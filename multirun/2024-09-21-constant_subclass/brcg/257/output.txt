Command:
python test_script.py -s constant_subclass -d 7 -n 500 --seed 73 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.016
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 7.

Computed total variation: 0.372
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:00 PM: Your problem has 265 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:00 PM: Finished problem compilation (took 8.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 265
  constraints   = 515
  nnz(P)        = 0
  nnz(A)        = 2515
  cones (total) = 1
    : Nonnegative = 1,  numel = 515

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9969e-01  +2.5069e+02  2.50e+02  9.36e-01  2.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.8751e-01  +5.2933e+01  5.23e+01  3.81e-01  1.38e+01  3.86e-03  5.48e-01  6.11e-01  
  2  +5.3519e-01  +6.7195e+00  6.18e+00  1.22e-01  5.53e+00  1.35e-02  2.44e-01  8.97e-01  
  3  +5.0269e-01  +1.4470e+00  9.44e-01  2.87e-02  1.27e+00  2.48e-05  2.02e-01  6.03e-01  
  4  +5.0049e-01  +6.2873e-01  1.28e-01  3.99e-03  1.83e-01  4.20e-06  4.15e-02  8.18e-01  
  5  +4.9962e-01  +6.0501e-01  1.05e-01  2.52e-03  1.17e-01  1.03e-05  1.09e-02  8.09e-01  
  6  +4.9273e-01  +5.6852e-01  7.58e-02  4.08e-04  1.92e-02  5.00e-05  1.32e-03  8.83e-01  
  7  +4.8120e-01  +5.0704e-01  2.58e-02  1.40e-04  6.59e-03  1.03e-05  4.90e-04  8.22e-01  
  8  +4.7478e-01  +4.7698e-01  2.21e-03  1.04e-05  4.88e-04  1.15e-06  3.84e-05  9.54e-01  
  9  +4.7411e-01  +4.7415e-01  3.94e-05  1.85e-07  8.65e-06  2.54e-08  6.87e-07  9.88e-01  
 10  +4.7410e-01  +4.7410e-01  3.94e-07  1.85e-09  8.65e-08  2.54e-10  6.87e-09  9.90e-01  
 11  +4.7410e-01  +4.7410e-01  3.94e-09  1.85e-11  8.65e-10  2.54e-12  6.88e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4938ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:00 PM: Optimal value: 4.741e-01
(CVXPY) Sep 20 07:39:00 PM: Compilation took 8.507e-03 seconds
(CVXPY) Sep 20 07:39:00 PM: Solver (including time spent in interface) took 3.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4741
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:01 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Finished problem compilation (took 6.504e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 2870
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +2.5132e+02  2.51e+02  9.37e-01  2.30e+01  1.00e+00  1.01e+00   ------   
  1  +5.8432e-01  +5.3103e+01  5.25e+01  3.84e-01  1.40e+01  3.85e-03  5.52e-01  6.10e-01  
  2  +5.3227e-01  +6.4235e+00  5.89e+00  1.16e-01  5.31e+00  1.40e-02  2.33e-01  9.32e-01  
  3  +5.0173e-01  +1.4021e+00  9.00e-01  2.77e-02  1.26e+00  3.33e-04  1.74e-01  7.75e-01  
  4  +4.9911e-01  +7.7640e-01  2.77e-01  8.18e-03  3.82e-01  1.87e-04  4.34e-02  8.22e-01  
  5  +4.7969e-01  +8.2010e-01  3.40e-01  2.33e-03  1.12e-01  1.12e-03  7.42e-03  9.11e-01  
  6  +4.6659e-01  +6.7869e-01  2.12e-01  1.24e-03  5.95e-02  6.25e-04  4.17e-03  5.19e-01  
  7  +4.5394e-01  +5.6228e-01  1.08e-01  5.47e-04  2.63e-02  2.11e-04  1.81e-03  8.01e-01  
  8  +4.4498e-01  +5.2891e-01  8.39e-02  3.13e-04  1.51e-02  2.03e-04  1.02e-03  4.86e-01  
  9  +4.4256e-01  +5.1480e-01  7.22e-02  2.98e-04  1.44e-02  1.38e-04  9.88e-04  1.66e-01  
 10  +4.2424e-01  +4.4188e-01  1.76e-02  6.13e-05  2.95e-03  2.42e-05  2.14e-04  8.77e-01  
 11  +4.1860e-01  +4.1939e-01  7.95e-04  2.74e-06  1.31e-04  9.74e-07  9.98e-06  9.57e-01  
 12  +4.1830e-01  +4.1831e-01  8.23e-06  2.84e-08  1.36e-06  1.01e-08  1.04e-07  9.90e-01  
 13  +4.1830e-01  +4.1830e-01  8.23e-08  2.84e-10  1.36e-08  1.01e-10  1.04e-09  9.90e-01  
 14  +4.1830e-01  +4.1830e-01  8.23e-10  2.84e-12  1.36e-10  1.01e-12  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.8737ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:01 PM: Optimal value: 4.183e-01
(CVXPY) Sep 20 07:39:01 PM: Compilation took 6.504e-03 seconds
(CVXPY) Sep 20 07:39:01 PM: Solver (including time spent in interface) took 5.000e-03 seconds
Iteration: 2, Objective: 0.4183
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:01 PM: Your problem has 285 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 285
  constraints   = 535
  nnz(P)        = 0
  nnz(A)        = 3110
  cones (total) = 1
    : Nonnegative = 1,  numel = 535

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9920e-01  +2.5137e+02  2.51e+02  9.37e-01  2.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.8234e-01  +5.3136e+01  5.26e+01  3.87e-01  1.39e+01  3.86e-03  5.52e-01  6.10e-01  
  2  +5.3061e-01  +6.2510e+00  5.72e+00  1.12e-01  5.09e+00  1.42e-02  2.25e-01  9.51e-01  
  3  +5.0110e-01  +1.3608e+00  8.60e-01  2.68e-02  1.22e+00  5.06e-04  1.53e-01  8.91e-01  
  4  +4.9666e-01  +8.6112e-01  3.64e-01  8.99e-03  4.25e-01  5.16e-04  3.44e-02  8.46e-01  
  5  +4.7716e-01  +7.6984e-01  2.93e-01  2.36e-03  1.14e-01  1.56e-03  7.12e-03  8.29e-01  
  6  +4.5933e-01  +6.7938e-01  2.20e-01  1.17e-03  5.66e-02  1.40e-03  3.58e-03  5.95e-01  
  7  +4.4689e-01  +6.1755e-01  1.71e-01  9.11e-04  4.38e-02  3.54e-04  2.92e-03  6.15e-01  
  8  +4.1724e-01  +4.8973e-01  7.25e-02  3.03e-04  1.46e-02  1.44e-04  1.03e-03  7.18e-01  
  9  +4.0263e-01  +4.2453e-01  2.19e-02  8.98e-05  4.31e-03  4.03e-05  3.20e-04  7.17e-01  
 10  +3.9710e-01  +4.0380e-01  6.70e-03  2.50e-05  1.21e-03  1.10e-05  9.25e-05  8.69e-01  
 11  +3.9472e-01  +3.9501e-01  2.90e-04  1.08e-06  5.21e-05  3.68e-07  4.04e-06  9.90e-01  
 12  +3.9460e-01  +3.9460e-01  2.92e-06  1.08e-08  5.23e-07  3.70e-09  4.06e-08  9.90e-01  
 13  +3.9460e-01  +3.9460e-01  2.92e-08  1.08e-10  5.23e-09  3.70e-11  4.06e-10  9.90e-01  
 14  +3.9460e-01  +3.9460e-01  2.92e-10  1.08e-12  5.23e-11  3.70e-13  4.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.4222ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:01 PM: Optimal value: 3.946e-01
(CVXPY) Sep 20 07:39:01 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:39:01 PM: Solver (including time spent in interface) took 5.507e-03 seconds
Iteration: 3, Objective: 0.3946
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:01 PM: Your problem has 295 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 295
  constraints   = 545
  nnz(P)        = 0
  nnz(A)        = 3248
  cones (total) = 1
    : Nonnegative = 1,  numel = 545

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9911e-01  +2.5149e+02  2.51e+02  9.38e-01  2.30e+01  1.00e+00  1.01e+00   ------   
  1  +5.7955e-01  +5.3199e+01  5.26e+01  3.89e-01  1.37e+01  3.86e-03  5.52e-01  6.10e-01  
  2  +5.2895e-01  +6.0787e+00  5.55e+00  1.07e-01  4.85e+00  1.45e-02  2.17e-01  9.71e-01  
  3  +5.0157e-01  +1.5085e+00  1.01e+00  3.14e-02  1.42e+00  1.25e-03  1.43e-01  8.57e-01  
  4  +4.9431e-01  +1.0246e+00  5.30e-01  1.02e-02  4.87e-01  1.72e-03  3.24e-02  8.50e-01  
  5  +4.6451e-01  +8.2787e-01  3.63e-01  2.19e-03  1.06e-01  4.35e-03  6.35e-03  8.36e-01  
  6  +4.4756e-01  +7.4623e-01  2.99e-01  1.39e-03  6.73e-02  3.67e-03  4.10e-03  4.49e-01  
  7  +4.2916e-01  +6.2523e-01  1.96e-01  1.01e-03  4.85e-02  1.39e-04  3.25e-03  7.12e-01  
  8  +3.9688e-01  +4.6905e-01  7.22e-02  3.13e-04  1.50e-02  5.21e-05  1.09e-03  7.10e-01  
  9  +3.8394e-01  +4.1134e-01  2.74e-02  1.12e-04  5.32e-03  3.01e-05  4.17e-04  9.90e-01  
 10  +3.7596e-01  +3.7921e-01  3.25e-03  1.30e-05  6.18e-04  3.37e-06  5.17e-05  8.86e-01  
 11  +3.7489e-01  +3.7514e-01  2.51e-04  1.00e-06  4.75e-05  2.54e-07  4.06e-06  9.28e-01  
 12  +3.7480e-01  +3.7480e-01  3.14e-06  1.25e-08  5.94e-07  3.16e-09  5.09e-08  9.89e-01  
 13  +3.7480e-01  +3.7480e-01  3.15e-08  1.25e-10  5.95e-09  3.16e-11  5.10e-10  9.90e-01  
 14  +3.7480e-01  +3.7480e-01  3.15e-10  1.25e-12  5.95e-11  3.17e-13  5.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.911ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:01 PM: Optimal value: 3.748e-01
(CVXPY) Sep 20 07:39:01 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 07:39:01 PM: Solver (including time spent in interface) took 4.014e-03 seconds
Iteration: 4, Objective: 0.3748
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:01 PM: Your problem has 303 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Finished problem compilation (took 4.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 303
  constraints   = 553
  nnz(P)        = 0
  nnz(A)        = 3398
  cones (total) = 1
    : Nonnegative = 1,  numel = 553

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9896e-01  +2.5124e+02  2.51e+02  9.38e-01  2.29e+01  1.00e+00  1.01e+00   ------   
  1  +5.7677e-01  +5.3276e+01  5.27e+01  3.91e-01  1.36e+01  3.87e-03  5.53e-01  6.08e-01  
  2  +5.2688e-01  +5.9288e+00  5.40e+00  1.04e-01  4.66e+00  1.49e-02  2.10e-01  9.90e-01  
  3  +5.0127e-01  +1.4261e+00  9.25e-01  2.87e-02  1.31e+00  1.19e-03  1.09e-01  9.59e-01  
  4  +4.8245e-01  +1.2210e+00  7.39e-01  6.81e-03  3.29e-01  3.67e-03  1.89e-02  9.03e-01  
  5  +4.5560e-01  +9.0336e-01  4.48e-01  2.69e-03  1.29e-01  2.33e-03  7.82e-03  7.20e-01  
  6  +4.3630e-01  +7.7643e-01  3.40e-01  1.70e-03  8.13e-02  1.59e-03  5.16e-03  4.53e-01  
  7  +4.0487e-01  +5.5612e-01  1.51e-01  7.40e-04  3.50e-02  1.84e-04  2.53e-03  7.81e-01  
  8  +3.8186e-01  +4.3857e-01  5.67e-02  2.56e-04  1.21e-02  6.32e-05  9.57e-04  6.58e-01  
  9  +3.7131e-01  +3.9219e-01  2.09e-02  9.09e-05  4.29e-03  1.99e-05  3.65e-04  8.01e-01  
 10  +3.6549e-01  +3.6738e-01  1.89e-03  8.05e-06  3.79e-04  1.68e-06  3.41e-05  9.19e-01  
 11  +3.6491e-01  +3.6493e-01  2.06e-05  8.74e-08  4.12e-06  1.80e-08  3.73e-07  9.89e-01  
 12  +3.6490e-01  +3.6490e-01  2.06e-07  8.74e-10  4.12e-08  1.80e-10  3.73e-09  9.90e-01  
 13  +3.6490e-01  +3.6490e-01  2.06e-09  8.74e-12  4.12e-10  1.80e-12  3.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0385ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:01 PM: Optimal value: 3.649e-01
(CVXPY) Sep 20 07:39:01 PM: Compilation took 4.005e-03 seconds
(CVXPY) Sep 20 07:39:01 PM: Solver (including time spent in interface) took 4.508e-03 seconds
Iteration: 5, Objective: 0.3649
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:01 PM: Your problem has 313 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Finished problem compilation (took 4.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 313
  constraints   = 563
  nnz(P)        = 0
  nnz(A)        = 3516
  cones (total) = 1
    : Nonnegative = 1,  numel = 563

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9893e-01  +2.5140e+02  2.51e+02  9.39e-01  2.28e+01  1.00e+00  1.01e+00   ------   
  1  +5.7505e-01  +5.3295e+01  5.27e+01  3.93e-01  1.35e+01  3.87e-03  5.52e-01  6.09e-01  
  2  +5.2597e-01  +5.9771e+00  5.45e+00  1.03e-01  4.56e+00  1.50e-02  2.09e-01  9.90e-01  
  3  +5.0240e-01  +1.4332e+00  9.31e-01  2.79e-02  1.29e+00  1.48e-03  8.98e-02  9.20e-01  
  4  +4.9018e-01  +1.4413e+00  9.51e-01  9.82e-03  4.73e-01  3.93e-03  2.62e-02  7.69e-01  
  5  +4.6056e-01  +1.0780e+00  6.17e-01  3.46e-03  1.67e-01  4.33e-03  9.55e-03  6.63e-01  
  6  +4.3613e-01  +8.9266e-01  4.57e-01  2.18e-03  1.04e-01  3.07e-03  6.32e-03  3.99e-01  
  7  +3.9458e-01  +5.4904e-01  1.54e-01  7.68e-04  3.60e-02  2.03e-04  2.61e-03  8.04e-01  
  8  +3.8204e-01  +4.7998e-01  9.79e-02  4.63e-04  2.16e-02  1.27e-04  1.64e-03  4.41e-01  
  9  +3.7300e-01  +4.3358e-01  6.06e-02  2.75e-04  1.28e-02  7.63e-05  1.02e-03  4.68e-01  
 10  +3.6196e-01  +3.7744e-01  1.55e-02  6.87e-05  3.21e-03  1.53e-05  2.75e-04  9.90e-01  
 11  +3.5733e-01  +3.5804e-01  7.07e-04  3.10e-06  1.45e-04  5.99e-07  1.31e-05  9.59e-01  
 12  +3.5711e-01  +3.5713e-01  2.53e-05  1.11e-07  5.20e-06  1.83e-08  4.82e-07  9.70e-01  
 13  +3.5710e-01  +3.5710e-01  2.55e-07  1.12e-09  5.22e-08  1.84e-10  4.86e-09  9.90e-01  
 14  +3.5710e-01  +3.5710e-01  2.55e-09  1.12e-11  5.23e-10  1.84e-12  4.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2549ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:01 PM: Optimal value: 3.571e-01
(CVXPY) Sep 20 07:39:01 PM: Compilation took 4.510e-03 seconds
(CVXPY) Sep 20 07:39:01 PM: Solver (including time spent in interface) took 5.507e-03 seconds
Iteration: 6, Objective: 0.3571
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:01 PM: Your problem has 323 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Finished problem compilation (took 5.104e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 323
  constraints   = 573
  nnz(P)        = 0
  nnz(A)        = 3628
  cones (total) = 1
    : Nonnegative = 1,  numel = 573

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9886e-01  +2.5134e+02  2.51e+02  9.40e-01  2.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.7366e-01  +5.3367e+01  5.28e+01  3.95e-01  1.33e+01  3.87e-03  5.53e-01  6.08e-01  
  2  +5.2493e-01  +6.0286e+00  5.50e+00  1.03e-01  4.52e+00  1.52e-02  2.09e-01  9.90e-01  
  3  +5.0336e-01  +1.4488e+00  9.45e-01  2.67e-02  1.25e+00  1.85e-03  7.85e-02  8.73e-01  
  4  +4.9566e-01  +1.5106e+00  1.01e+00  1.20e-02  5.74e-01  4.01e-03  3.13e-02  6.66e-01  
  5  +4.6949e-01  +1.2205e+00  7.51e-01  4.25e-03  2.05e-01  5.53e-03  1.13e-02  6.77e-01  
  6  +4.4714e-01  +1.0172e+00  5.70e-01  2.87e-03  1.37e-01  3.77e-03  8.05e-03  3.69e-01  
  7  +4.0807e-01  +6.5345e-01  2.45e-01  1.32e-03  6.12e-02  3.06e-05  4.30e-03  7.93e-01  
  8  +3.7668e-01  +4.6848e-01  9.18e-02  4.49e-04  2.07e-02  2.25e-05  1.64e-03  6.82e-01  
  9  +3.6372e-01  +4.1278e-01  4.91e-02  2.23e-04  1.03e-02  2.33e-05  8.78e-04  6.50e-01  
 10  +3.5160e-01  +3.5914e-01  7.54e-03  3.29e-05  1.52e-03  3.87e-06  1.42e-04  8.69e-01  
 11  +3.4942e-01  +3.4981e-01  3.89e-04  1.69e-06  7.79e-05  2.05e-07  7.45e-06  9.52e-01  
 12  +3.4930e-01  +3.4931e-01  4.93e-06  2.14e-08  9.86e-07  2.81e-09  9.46e-08  9.89e-01  
 13  +3.4930e-01  +3.4930e-01  4.93e-08  2.14e-10  9.86e-09  2.81e-11  9.46e-10  9.90e-01  
 14  +3.4930e-01  +3.4930e-01  4.93e-10  2.14e-12  9.86e-11  2.81e-13  9.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4227ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:01 PM: Optimal value: 3.493e-01
(CVXPY) Sep 20 07:39:01 PM: Compilation took 5.104e-03 seconds
(CVXPY) Sep 20 07:39:01 PM: Solver (including time spent in interface) took 4.942e-03 seconds
Iteration: 7, Objective: 0.3493
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:01 PM: Your problem has 333 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Finished problem compilation (took 5.612e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 333
  constraints   = 583
  nnz(P)        = 0
  nnz(A)        = 3693
  cones (total) = 1
    : Nonnegative = 1,  numel = 583

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9882e-01  +2.5132e+02  2.51e+02  9.40e-01  2.25e+01  1.00e+00  1.01e+00   ------   
  1  +5.7197e-01  +5.3397e+01  5.28e+01  3.97e-01  1.32e+01  3.87e-03  5.54e-01  6.07e-01  
  2  +5.2389e-01  +6.0814e+00  5.56e+00  1.03e-01  4.45e+00  1.53e-02  2.08e-01  9.90e-01  
  3  +5.0329e-01  +1.3312e+00  8.28e-01  2.19e-02  1.03e+00  1.85e-03  6.20e-02  8.82e-01  
  4  +4.9585e-01  +1.4046e+00  9.09e-01  9.88e-03  4.75e-01  4.14e-03  2.54e-02  6.57e-01  
  5  +4.7185e-01  +1.1874e+00  7.16e-01  4.13e-03  1.99e-01  5.18e-03  1.08e-02  6.48e-01  
  6  +4.4890e-01  +1.0048e+00  5.56e-01  2.83e-03  1.35e-01  3.57e-03  7.82e-03  3.64e-01  
  7  +4.0478e-01  +6.4683e-01  2.42e-01  1.31e-03  6.04e-02  2.86e-05  4.27e-03  7.67e-01  
  8  +3.7854e-01  +5.0091e-01  1.22e-01  6.07e-04  2.79e-02  2.67e-05  2.17e-03  5.60e-01  
  9  +3.6762e-01  +4.5241e-01  8.48e-02  3.96e-04  1.82e-02  3.07e-05  1.49e-03  4.50e-01  
 10  +3.5019e-01  +3.7215e-01  2.20e-02  9.79e-05  4.49e-03  1.03e-05  4.05e-04  7.91e-01  
 11  +3.4457e-01  +3.4759e-01  3.02e-03  1.33e-05  6.09e-04  1.46e-06  5.74e-05  8.66e-01  
 12  +3.4383e-01  +3.4449e-01  6.64e-04  2.87e-06  1.31e-04  4.67e-07  1.26e-05  9.10e-01  
 13  +3.4360e-01  +3.4361e-01  8.37e-06  3.62e-08  1.65e-06  5.86e-09  1.59e-07  9.87e-01  
 14  +3.4360e-01  +3.4360e-01  8.37e-08  3.62e-10  1.65e-08  5.86e-11  1.59e-09  9.90e-01  
 15  +3.4360e-01  +3.4360e-01  8.37e-10  3.62e-12  1.65e-10  5.86e-13  1.59e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2838ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:01 PM: Optimal value: 3.436e-01
(CVXPY) Sep 20 07:39:01 PM: Compilation took 5.612e-03 seconds
(CVXPY) Sep 20 07:39:01 PM: Solver (including time spent in interface) took 5.903e-03 seconds
Iteration: 8, Objective: 0.3436
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:01 PM: Your problem has 343 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:01 PM: Finished problem compilation (took 5.503e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 343
  constraints   = 593
  nnz(P)        = 0
  nnz(A)        = 3768
  cones (total) = 1
    : Nonnegative = 1,  numel = 593

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9875e-01  +2.5149e+02  2.51e+02  9.41e-01  2.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.6980e-01  +5.3475e+01  5.29e+01  3.99e-01  1.30e+01  3.87e-03  5.55e-01  6.07e-01  
  2  +5.2250e-01  +6.1653e+00  5.64e+00  1.03e-01  4.40e+00  1.56e-02  2.08e-01  9.90e-01  
  3  +5.0358e-01  +1.3981e+00  8.95e-01  2.12e-02  9.97e-01  2.49e-03  5.72e-02  8.25e-01  
  4  +4.9311e-01  +1.5043e+00  1.01e+00  8.71e-03  4.19e-01  5.97e-03  2.20e-02  7.07e-01  
  5  +4.6503e-01  +1.2105e+00  7.46e-01  4.06e-03  1.94e-01  5.38e-03  1.07e-02  6.19e-01  
  6  +4.3926e-01  +9.8133e-01  5.42e-01  2.88e-03  1.35e-01  3.00e-03  8.13e-03  3.31e-01  
  7  +3.8734e-01  +5.7710e-01  1.90e-01  1.01e-03  4.61e-02  3.89e-05  3.48e-03  8.01e-01  
  8  +3.7225e-01  +5.0607e-01  1.34e-01  6.67e-04  3.03e-02  4.99e-05  2.44e-03  4.65e-01  
  9  +3.5819e-01  +4.3687e-01  7.87e-02  3.80e-04  1.72e-02  3.87e-05  1.50e-03  5.33e-01  
 10  +3.4173e-01  +3.5638e-01  1.46e-02  6.89e-05  3.11e-03  7.52e-06  3.05e-04  8.41e-01  
 11  +3.3844e-01  +3.4124e-01  2.79e-03  1.31e-05  5.87e-04  1.46e-06  6.02e-05  8.14e-01  
 12  +3.3777e-01  +3.3830e-01  5.35e-04  2.45e-06  1.10e-04  3.54e-07  1.15e-05  9.24e-01  
 13  +3.3760e-01  +3.3761e-01  5.89e-06  2.70e-08  1.21e-06  3.87e-09  1.27e-07  9.89e-01  
 14  +3.3760e-01  +3.3760e-01  5.89e-08  2.70e-10  1.21e-08  3.87e-11  1.27e-09  9.90e-01  
 15  +3.3760e-01  +3.3760e-01  5.89e-10  2.70e-12  1.21e-10  3.87e-13  1.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1212ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:01 PM: Optimal value: 3.376e-01
(CVXPY) Sep 20 07:39:01 PM: Compilation took 5.503e-03 seconds
(CVXPY) Sep 20 07:39:01 PM: Solver (including time spent in interface) took 5.515e-03 seconds
Iteration: 9, Objective: 0.3376
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:02 PM: Your problem has 353 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:02 PM: Finished problem compilation (took 5.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 353
  constraints   = 603
  nnz(P)        = 0
  nnz(A)        = 3833
  cones (total) = 1
    : Nonnegative = 1,  numel = 603

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9874e-01  +2.5149e+02  2.51e+02  9.41e-01  2.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.6893e-01  +5.3478e+01  5.29e+01  4.00e-01  1.29e+01  3.87e-03  5.54e-01  6.07e-01  
  2  +5.2182e-01  +6.1866e+00  5.66e+00  1.02e-01  4.33e+00  1.56e-02  2.07e-01  9.90e-01  
  3  +5.0357e-01  +1.4483e+00  9.45e-01  2.14e-02  9.98e-01  2.83e-03  5.68e-02  8.01e-01  
  4  +4.8844e-01  +1.5922e+00  1.10e+00  7.59e-03  3.63e-01  7.65e-03  1.92e-02  7.79e-01  
  5  +4.5568e-01  +1.1235e+00  6.68e-01  3.82e-03  1.80e-01  3.01e-03  1.04e-02  6.20e-01  
  6  +4.1310e-01  +7.5126e-01  3.38e-01  1.90e-03  8.68e-02  3.81e-04  5.95e-03  6.66e-01  
  7  +3.7576e-01  +5.2246e-01  1.47e-01  7.53e-04  3.40e-02  1.39e-04  2.67e-03  6.28e-01  
  8  +3.6917e-01  +4.9701e-01  1.28e-01  6.23e-04  2.81e-02  1.23e-04  2.26e-03  3.12e-01  
  9  +3.5068e-01  +4.1065e-01  6.00e-02  2.78e-04  1.25e-02  5.49e-05  1.10e-03  5.65e-01  
 10  +3.3628e-01  +3.4436e-01  8.08e-03  3.66e-05  1.64e-03  6.34e-06  1.59e-04  8.79e-01  
 11  +3.3418e-01  +3.3509e-01  9.16e-04  4.14e-06  1.85e-04  6.97e-07  1.85e-05  8.97e-01  
 12  +3.3391e-01  +3.3393e-01  2.18e-05  9.87e-08  4.41e-06  1.67e-08  4.43e-07  9.80e-01  
 13  +3.3390e-01  +3.3390e-01  2.18e-07  9.87e-10  4.42e-08  1.67e-10  4.43e-09  9.90e-01  
 14  +3.3390e-01  +3.3390e-01  2.18e-09  9.88e-12  4.42e-10  1.67e-12  4.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8859ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:02 PM: Optimal value: 3.339e-01
(CVXPY) Sep 20 07:39:02 PM: Compilation took 5.512e-03 seconds
(CVXPY) Sep 20 07:39:02 PM: Solver (including time spent in interface) took 6.509e-03 seconds
Iteration: 10, Objective: 0.3339
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:02 PM: Your problem has 361 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:02 PM: Finished problem compilation (took 5.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 361
  constraints   = 611
  nnz(P)        = 0
  nnz(A)        = 3907
  cones (total) = 1
    : Nonnegative = 1,  numel = 611

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9874e-01  +2.5148e+02  2.51e+02  9.42e-01  2.20e+01  1.00e+00  1.01e+00   ------   
  1  +5.6875e-01  +5.3501e+01  5.29e+01  4.02e-01  1.28e+01  3.88e-03  5.54e-01  6.07e-01  
  2  +5.2135e-01  +6.1931e+00  5.67e+00  1.02e-01  4.28e+00  1.57e-02  2.07e-01  9.90e-01  
  3  +5.0326e-01  +1.4124e+00  9.09e-01  2.00e-02  9.31e-01  2.86e-03  5.33e-02  8.06e-01  
  4  +4.9034e-01  +1.5505e+00  1.06e+00  8.14e-03  3.87e-01  6.81e-03  2.07e-02  7.42e-01  
  5  +4.5906e-01  +1.1470e+00  6.88e-01  3.88e-03  1.82e-01  4.02e-03  1.05e-02  6.28e-01  
  6  +4.1581e-01  +7.6872e-01  3.53e-01  1.97e-03  8.96e-02  3.74e-04  6.12e-03  6.67e-01  
  7  +3.7588e-01  +5.2707e-01  1.51e-01  7.78e-04  3.49e-02  1.32e-04  2.76e-03  6.11e-01  
  8  +3.6159e-01  +4.6200e-01  1.00e-01  4.88e-04  2.18e-02  9.08e-05  1.82e-03  4.75e-01  
  9  +3.4500e-01  +3.8407e-01  3.91e-02  1.83e-04  8.17e-03  3.40e-05  7.48e-04  6.39e-01  
 10  +3.3589e-01  +3.4270e-01  6.81e-03  3.15e-05  1.40e-03  5.58e-06  1.38e-04  8.34e-01  
 11  +3.3409e-01  +3.3473e-01  6.39e-04  2.95e-06  1.31e-04  5.02e-07  1.32e-05  9.13e-01  
 12  +3.3390e-01  +3.3392e-01  1.17e-05  5.42e-08  2.41e-06  9.19e-09  2.44e-07  9.83e-01  
 13  +3.3390e-01  +3.3390e-01  1.17e-07  5.42e-10  2.41e-08  9.20e-11  2.44e-09  9.90e-01  
 14  +3.3390e-01  +3.3390e-01  1.17e-09  5.42e-12  2.41e-10  9.20e-13  2.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.0602ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:02 PM: Optimal value: 3.339e-01
(CVXPY) Sep 20 07:39:02 PM: Compilation took 5.510e-03 seconds
(CVXPY) Sep 20 07:39:02 PM: Solver (including time spent in interface) took 6.507e-03 seconds
Iteration: 11, Objective: 0.3339
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:02 PM: Your problem has 362 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:02 PM: Finished problem compilation (took 5.046e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 362
  constraints   = 612
  nnz(P)        = 0
  nnz(A)        = 3918
  cones (total) = 1
    : Nonnegative = 1,  numel = 612

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9872e-01  +2.5146e+02  2.51e+02  9.42e-01  2.20e+01  1.00e+00  1.01e+00   ------   
  1  +5.6822e-01  +5.3525e+01  5.30e+01  4.02e-01  1.28e+01  3.88e-03  5.55e-01  6.06e-01  
  2  +5.2110e-01  +6.2088e+00  5.69e+00  1.02e-01  4.28e+00  1.57e-02  2.07e-01  9.90e-01  
  3  +5.0353e-01  +1.5052e+00  1.00e+00  2.17e-02  1.01e+00  3.16e-03  5.72e-02  7.79e-01  
  4  +4.8971e-01  +1.6138e+00  1.12e+00  8.56e-03  4.06e-01  7.29e-03  2.17e-02  7.34e-01  
  5  +4.5971e-01  +1.1867e+00  7.27e-01  4.25e-03  1.99e-01  3.95e-03  1.15e-02  6.09e-01  
  6  +4.2938e-01  +9.0820e-01  4.79e-01  2.66e-03  1.22e-01  1.65e-03  7.84e-03  4.59e-01  
  7  +3.7864e-01  +5.3529e-01  1.57e-01  8.16e-04  3.66e-02  2.17e-04  2.85e-03  7.36e-01  
  8  +3.6547e-01  +4.7806e-01  1.13e-01  5.56e-04  2.48e-02  1.50e-04  2.03e-03  4.23e-01  
  9  +3.4874e-01  +4.0088e-01  5.21e-02  2.47e-04  1.10e-02  6.33e-05  9.86e-04  6.06e-01  
 10  +3.3702e-01  +3.4769e-01  1.07e-02  4.95e-05  2.20e-03  1.17e-05  2.14e-04  8.06e-01  
 11  +3.3422e-01  +3.3528e-01  1.06e-03  4.91e-06  2.18e-04  1.07e-06  2.20e-05  9.12e-01  
 12  +3.3391e-01  +3.3394e-01  3.08e-05  1.42e-07  6.32e-06  2.91e-08  6.42e-07  9.79e-01  
 13  +3.3390e-01  +3.3390e-01  3.08e-07  1.42e-09  6.32e-08  2.91e-10  6.42e-09  9.90e-01  
 14  +3.3390e-01  +3.3390e-01  3.08e-09  1.42e-11  6.32e-10  2.91e-12  6.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7757ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:02 PM: Optimal value: 3.339e-01
(CVXPY) Sep 20 07:39:02 PM: Compilation took 5.046e-03 seconds
(CVXPY) Sep 20 07:39:02 PM: Solver (including time spent in interface) took 6.508e-03 seconds
Iteration: 12, Objective: 0.3339
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:02 PM: Your problem has 363 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:02 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 363
  constraints   = 613
  nnz(P)        = 0
  nnz(A)        = 3928
  cones (total) = 1
    : Nonnegative = 1,  numel = 613

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9871e-01  +2.5148e+02  2.51e+02  9.42e-01  2.20e+01  1.00e+00  1.01e+00   ------   
  1  +5.6783e-01  +5.3539e+01  5.30e+01  4.02e-01  1.27e+01  3.88e-03  5.55e-01  6.06e-01  
  2  +5.2084e-01  +6.2202e+00  5.70e+00  1.02e-01  4.28e+00  1.57e-02  2.07e-01  9.90e-01  
  3  +5.0331e-01  +1.4702e+00  9.67e-01  2.07e-02  9.64e-01  3.12e-03  5.46e-02  7.86e-01  
  4  +4.9128e-01  +1.5767e+00  1.09e+00  9.01e-03  4.27e-01  6.64e-03  2.28e-02  7.01e-01  
  5  +4.6201e-01  +1.2180e+00  7.56e-01  4.24e-03  1.99e-01  5.16e-03  1.13e-02  6.11e-01  
  6  +4.2905e-01  +9.1780e-01  4.89e-01  2.64e-03  1.22e-01  2.17e-03  7.69e-03  4.37e-01  
  7  +3.7858e-01  +5.3892e-01  1.60e-01  8.42e-04  3.78e-02  2.64e-04  2.93e-03  7.28e-01  
  8  +3.6577e-01  +4.8218e-01  1.16e-01  5.79e-04  2.59e-02  1.80e-04  2.11e-03  4.28e-01  
  9  +3.4848e-01  +4.0030e-01  5.18e-02  2.48e-04  1.10e-02  7.07e-05  9.80e-04  6.34e-01  
 10  +3.3693e-01  +3.4723e-01  1.03e-02  4.80e-05  2.13e-03  1.25e-05  2.07e-04  8.15e-01  
 11  +3.3422e-01  +3.3531e-01  1.08e-03  5.02e-06  2.23e-04  1.21e-06  2.24e-05  8.99e-01  
 12  +3.3391e-01  +3.3394e-01  3.17e-05  1.47e-07  6.52e-06  3.26e-08  6.63e-07  9.78e-01  
 13  +3.3390e-01  +3.3390e-01  3.18e-07  1.47e-09  6.52e-08  3.26e-10  6.64e-09  9.90e-01  
 14  +3.3390e-01  +3.3390e-01  3.18e-09  1.47e-11  6.53e-10  3.27e-12  6.64e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.9498ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:02 PM: Optimal value: 3.339e-01
(CVXPY) Sep 20 07:39:02 PM: Compilation took 5.002e-03 seconds
(CVXPY) Sep 20 07:39:02 PM: Solver (including time spent in interface) took 6.511e-03 seconds
FULL MODEL:
  Accruacy: 0.63
  Our objective: 0.26

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x5 = 1)                                  <-- (term's our objective: 0.036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.028)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.032)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.052)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.189265251159668
Best over terms:
  Our final objective: 0.05199999999999995
    Its accruacy: 0.526
    Its hamming distance: 5
  Shortest hamming distance: 0
    Its our objective: 0.016000000000000018
  Highest accruacy: 0.526
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

