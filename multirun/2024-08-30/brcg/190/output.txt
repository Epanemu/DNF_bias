Command:
python test_script.py -s smallest_subclass -d 5 -n 10000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.033600000000000005
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.0658
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:55 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:55 PM: Finished problem compilation (took 1.653e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  9.26e+01  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +1.0021e+03  1.00e+03  3.64e-01  5.41e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4629e-01  +1.4312e+02  1.43e+02  1.45e-01  2.69e+01  9.84e-03  2.35e-01  7.78e-01  
  3  +5.1095e-01  +3.4174e+01  3.37e+01  1.16e-01  2.11e+01  2.36e-05  2.32e-01  8.71e-02  
  4  +5.0019e-01  +1.1979e+00  6.98e-01  4.70e-03  8.69e-01  4.10e-06  1.38e-01  9.90e-01  
  5  +5.0002e-01  +6.0842e-01  1.08e-01  7.23e-04  1.35e-01  1.03e-06  3.71e-02  7.91e-01  
  6  +5.0001e-01  +5.7434e-01  7.43e-02  4.96e-04  9.22e-02  8.15e-07  1.91e-02  5.95e-01  
  7  +4.9998e-01  +5.3832e-01  3.83e-02  2.48e-04  4.62e-02  1.51e-06  3.20e-03  8.61e-01  
  8  +4.9826e-01  +5.4346e-01  4.52e-02  2.27e-05  4.25e-03  7.34e-05  7.28e-05  9.83e-01  
  9  +4.9478e-01  +5.2470e-01  2.99e-02  8.09e-06  1.51e-03  9.24e-05  2.62e-05  6.63e-01  
 10  +4.9309e-01  +5.1573e-01  2.26e-02  5.91e-06  1.10e-03  5.03e-05  1.97e-05  3.94e-01  
 11  +4.9061e-01  +5.0311e-01  1.25e-02  2.96e-06  5.54e-04  5.18e-07  1.06e-05  9.06e-01  
 12  +4.8701e-01  +4.8803e-01  1.02e-03  2.10e-07  3.92e-05  3.10e-08  8.32e-07  9.65e-01  
 13  +4.8660e-01  +4.8662e-01  1.16e-05  2.33e-09  4.36e-07  3.46e-10  9.52e-09  9.89e-01  
 14  +4.8660e-01  +4.8660e-01  1.16e-07  2.33e-11  4.36e-09  3.46e-12  9.52e-11  9.90e-01  
 15  +4.8660e-01  +4.8660e-01  1.17e-09  2.34e-13  4.37e-11  3.94e-14  1.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.6232ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:55 PM: Optimal value: 4.866e-01
(CVXPY) Aug 30 12:06:55 PM: Compilation took 1.653e-02 seconds
(CVXPY) Aug 30 12:06:55 PM: Solver (including time spent in interface) took 4.651e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4866
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:55 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:55 PM: Finished problem compilation (took 1.644e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 44965
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0017e+03  5.00e+03  9.85e-01  9.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.9953e-01  +1.0023e+03  1.00e+03  3.65e-01  5.49e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4621e-01  +1.4296e+02  1.42e+02  1.45e-01  2.72e+01  9.85e-03  2.35e-01  7.78e-01  
  3  +5.1091e-01  +3.4100e+01  3.36e+01  1.16e-01  2.14e+01  2.36e-05  2.32e-01  8.80e-02  
  4  +5.0046e-01  +2.0551e+00  1.55e+00  1.05e-02  1.94e+00  4.69e-06  1.78e-01  5.67e-01  
  5  +5.0006e-01  +8.2522e-01  3.25e-01  2.17e-03  4.08e-01  2.11e-06  9.01e-02  6.28e-01  
  6  +5.0003e-01  +6.5858e-01  1.59e-01  1.06e-03  2.00e-01  1.08e-06  4.53e-02  5.52e-01  
  7  +5.0000e-01  +5.8052e-01  8.05e-02  5.36e-04  1.01e-01  7.90e-07  1.57e-02  7.40e-01  
  8  +4.9975e-01  +6.2690e-01  1.27e-01  4.19e-04  7.94e-02  8.48e-06  1.69e-03  9.90e-01  
  9  +4.9568e-01  +5.8558e-01  8.99e-02  2.59e-05  4.92e-03  1.11e-04  8.41e-05  9.50e-01  
 10  +4.9380e-01  +5.5355e-01  5.98e-02  1.77e-05  3.35e-03  3.14e-05  5.83e-05  5.46e-01  
 11  +4.9284e-01  +5.4494e-01  5.21e-02  1.49e-05  2.83e-03  2.40e-05  4.94e-05  2.38e-01  
 12  +4.9194e-01  +5.3336e-01  4.14e-02  1.14e-05  2.17e-03  1.05e-05  3.82e-05  5.23e-01  
 13  +4.8757e-01  +5.0474e-01  1.72e-02  4.15e-06  7.87e-04  1.16e-07  1.43e-05  9.65e-01  
 14  +4.8703e-01  +5.0226e-01  1.52e-02  3.47e-06  6.58e-04  1.64e-07  1.18e-05  2.48e-01  
 15  +4.8702e-01  +5.0232e-01  1.53e-02  3.38e-06  6.41e-04  3.14e-07  1.14e-05  2.63e-01  
 16  +4.8618e-01  +4.9916e-01  1.30e-02  3.05e-06  5.79e-04  2.83e-07  1.13e-05  1.60e-01  
 17  +4.8457e-01  +4.9067e-01  6.10e-03  1.40e-06  2.66e-04  1.47e-07  5.27e-06  5.82e-01  
 18  +4.8405e-01  +4.8938e-01  5.32e-03  1.10e-06  2.09e-04  1.72e-07  3.94e-06  4.06e-01  
 19  +4.8265e-01  +4.8306e-01  4.08e-04  8.46e-08  1.60e-05  9.38e-09  3.24e-07  9.38e-01  
 20  +4.8250e-01  +4.8251e-01  6.33e-06  1.32e-09  2.50e-07  1.75e-10  5.61e-09  9.88e-01  
 21  +4.8250e-01  +4.8250e-01  6.32e-08  1.32e-11  2.50e-09  1.75e-12  5.61e-11  9.90e-01  
 22  +4.8250e-01  +4.8250e-01  6.32e-10  1.32e-13  2.50e-11  1.76e-14  5.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 61.0298ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:55 PM: Optimal value: 4.825e-01
(CVXPY) Aug 30 12:06:55 PM: Compilation took 1.644e-02 seconds
(CVXPY) Aug 30 12:06:55 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 2, Objective: 0.4825
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:55 PM: Your problem has 5031 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:55 PM: Finished problem compilation (took 1.560e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5031
  constraints   = 10031
  nnz(P)        = 0
  nnz(A)        = 49751
  cones (total) = 1
    : Nonnegative = 1,  numel = 10031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0016e+03  5.00e+03  9.85e-01  9.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.9951e-01  +1.0025e+03  1.00e+03  3.65e-01  5.56e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4614e-01  +1.4282e+02  1.42e+02  1.45e-01  2.75e+01  9.87e-03  2.36e-01  7.79e-01  
  3  +5.1088e-01  +3.4046e+01  3.35e+01  1.16e-01  2.16e+01  2.36e-05  2.32e-01  8.86e-02  
  4  +5.0041e-01  +1.8931e+00  1.39e+00  9.39e-03  1.77e+00  4.62e-06  1.73e-01  6.21e-01  
  5  +5.0006e-01  +8.2508e-01  3.25e-01  2.17e-03  4.14e-01  2.16e-06  8.82e-02  6.43e-01  
  6  +5.0003e-01  +6.8076e-01  1.81e-01  1.21e-03  2.31e-01  1.31e-06  4.83e-02  5.00e-01  
  7  +5.0000e-01  +6.0377e-01  1.04e-01  6.89e-04  1.32e-01  1.25e-06  1.54e-02  7.95e-01  
  8  +4.9885e-01  +7.2359e-01  2.25e-01  2.61e-04  5.02e-02  3.72e-05  9.19e-04  9.90e-01  
  9  +4.9423e-01  +6.4965e-01  1.55e-01  4.89e-05  9.41e-03  1.19e-04  1.66e-04  8.21e-01  
 10  +4.9510e-01  +6.2328e-01  1.28e-01  4.26e-05  8.20e-03  6.17e-05  1.44e-04  3.34e-01  
 11  +4.9544e-01  +6.1521e-01  1.20e-01  4.18e-05  8.05e-03  4.72e-05  1.42e-04  1.21e-01  
 12  +4.9021e-01  +5.5701e-01  6.68e-02  1.94e-05  3.73e-03  2.11e-05  6.70e-05  6.25e-01  
 13  +4.8935e-01  +5.4732e-01  5.80e-02  1.59e-05  3.05e-03  1.56e-05  5.40e-05  3.31e-01  
 14  +4.8960e-01  +5.4640e-01  5.68e-02  1.56e-05  3.01e-03  1.31e-05  5.29e-05  1.51e-01  
 15  +4.8581e-01  +5.2011e-01  3.43e-02  8.30e-06  1.60e-03  6.85e-06  2.74e-05  6.00e-01  
 16  +4.8217e-01  +5.0187e-01  1.97e-02  3.45e-06  6.64e-04  5.62e-06  1.08e-05  6.19e-01  
 17  +4.8165e-01  +4.9941e-01  1.78e-02  3.42e-06  6.57e-04  4.47e-06  1.08e-05  8.56e-03  
 18  +4.7841e-01  +4.8807e-01  9.67e-03  1.71e-06  3.29e-04  1.36e-06  5.48e-06  6.79e-01  
 19  +4.7528e-01  +4.7636e-01  1.09e-03  1.77e-07  3.39e-05  1.33e-07  5.76e-07  9.01e-01  
 20  +4.7490e-01  +4.7492e-01  1.22e-05  1.98e-09  3.80e-07  1.35e-09  6.51e-09  9.89e-01  
 21  +4.7490e-01  +4.7490e-01  1.22e-07  1.98e-11  3.80e-09  1.35e-11  6.51e-11  9.90e-01  
 22  +4.7490e-01  +4.7490e-01  1.22e-09  1.98e-13  3.80e-11  1.38e-13  6.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.1784ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:55 PM: Optimal value: 4.749e-01
(CVXPY) Aug 30 12:06:55 PM: Compilation took 1.560e-02 seconds
(CVXPY) Aug 30 12:06:55 PM: Solver (including time spent in interface) took 6.254e-02 seconds
Iteration: 3, Objective: 0.4749
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:55 PM: Your problem has 5041 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:55 PM: Finished problem compilation (took 1.641e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5041
  constraints   = 10041
  nnz(P)        = 0
  nnz(A)        = 53132
  cones (total) = 1
    : Nonnegative = 1,  numel = 10041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  9.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.9943e-01  +1.0027e+03  1.00e+03  3.65e-01  5.60e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4605e-01  +1.4262e+02  1.42e+02  1.45e-01  2.76e+01  9.89e-03  2.36e-01  7.80e-01  
  3  +5.1086e-01  +3.4004e+01  3.35e+01  1.16e-01  2.17e+01  2.37e-05  2.32e-01  8.93e-02  
  4  +5.0031e-01  +1.5976e+00  1.10e+00  7.41e-03  1.41e+00  4.46e-06  1.60e-01  7.45e-01  
  5  +5.0004e-01  +7.4315e-01  2.43e-01  1.63e-03  3.12e-01  1.86e-06  6.83e-02  7.18e-01  
  6  +5.0003e-01  +6.8699e-01  1.87e-01  1.25e-03  2.40e-01  1.58e-06  4.32e-02  4.64e-01  
  7  +4.9999e-01  +6.3451e-01  1.35e-01  8.84e-04  1.70e-01  2.28e-06  1.37e-02  7.54e-01  
  8  +4.9867e-01  +6.5188e-01  1.53e-01  1.86e-04  3.59e-02  4.65e-05  6.47e-04  9.72e-01  
  9  +4.9741e-01  +6.3237e-01  1.35e-01  9.49e-05  1.84e-02  6.82e-05  3.22e-04  5.61e-01  
 10  +4.9801e-01  +6.2342e-01  1.25e-01  8.66e-05  1.68e-02  4.47e-05  2.90e-04  3.56e-01  
 11  +4.9764e-01  +5.9314e-01  9.55e-02  4.86e-05  9.42e-03  1.23e-05  1.60e-04  9.90e-01  
 12  +4.9621e-01  +5.8460e-01  8.84e-02  3.61e-05  6.99e-03  1.34e-05  1.18e-04  3.01e-01  
 13  +4.9436e-01  +5.7431e-01  7.99e-02  2.69e-05  5.21e-03  1.18e-05  8.68e-05  4.21e-01  
 14  +4.9431e-01  +5.7446e-01  8.02e-02  2.65e-05  5.14e-03  1.07e-05  8.54e-05  1.26e-01  
 15  +4.9349e-01  +5.7098e-01  7.75e-02  2.34e-05  4.53e-03  1.05e-05  7.52e-05  1.73e-01  
 16  +4.9254e-01  +5.6753e-01  7.50e-02  2.27e-05  4.40e-03  8.39e-06  7.39e-05  1.80e-01  
 17  +4.8734e-01  +5.4500e-01  5.77e-02  1.39e-05  2.68e-03  6.72e-06  4.55e-05  4.73e-01  
 18  +4.8029e-01  +5.1447e-01  3.42e-02  7.40e-06  1.43e-03  2.59e-06  2.50e-05  6.67e-01  
 19  +4.7761e-01  +5.0381e-01  2.62e-02  5.36e-06  1.04e-03  1.94e-06  1.82e-05  3.44e-01  
 20  +4.7388e-01  +4.8914e-01  1.53e-02  2.88e-06  5.57e-04  8.18e-07  9.89e-06  9.90e-01  
 21  +4.7342e-01  +4.8762e-01  1.42e-02  2.67e-06  5.16e-04  7.74e-07  9.21e-06  3.13e-01  
 22  +4.7090e-01  +4.7821e-01  7.32e-03  1.30e-06  2.52e-04  4.66e-07  4.54e-06  9.78e-01  
 23  +4.6851e-01  +4.6976e-01  1.25e-03  2.22e-07  4.30e-05  7.84e-08  7.90e-07  9.90e-01  
 24  +4.6801e-01  +4.6803e-01  2.40e-05  4.25e-09  8.23e-07  1.48e-09  1.52e-08  9.81e-01  
 25  +4.6800e-01  +4.6800e-01  2.40e-07  4.25e-11  8.23e-09  1.48e-11  1.52e-10  9.90e-01  
 26  +4.6800e-01  +4.6800e-01  2.40e-09  4.25e-13  8.23e-11  1.49e-13  1.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.3721ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:55 PM: Optimal value: 4.680e-01
(CVXPY) Aug 30 12:06:55 PM: Compilation took 1.641e-02 seconds
(CVXPY) Aug 30 12:06:55 PM: Solver (including time spent in interface) took 7.846e-02 seconds
Iteration: 4, Objective: 0.4680
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:55 PM: Your problem has 5042 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:55 PM: Finished problem compilation (took 3.121e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5042
  constraints   = 10042
  nnz(P)        = 0
  nnz(A)        = 53453
  cones (total) = 1
    : Nonnegative = 1,  numel = 10042

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  9.60e+01  1.00e+00  1.00e+00   ------   
  1  +5.9941e-01  +1.0030e+03  1.00e+03  3.66e-01  5.61e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4602e-01  +1.4262e+02  1.42e+02  1.45e-01  2.77e+01  9.91e-03  2.36e-01  7.80e-01  
  3  +5.1085e-01  +3.3975e+01  3.35e+01  1.16e-01  2.17e+01  2.37e-05  2.32e-01  8.98e-02  
  4  +5.0029e-01  +1.5406e+00  1.04e+00  7.04e-03  1.34e+00  4.44e-06  1.58e-01  7.75e-01  
  5  +5.0004e-01  +7.2614e-01  2.26e-01  1.51e-03  2.91e-01  1.81e-06  6.41e-02  7.42e-01  
  6  +5.0003e-01  +6.8519e-01  1.85e-01  1.24e-03  2.38e-01  1.69e-06  4.16e-02  4.30e-01  
  7  +4.9998e-01  +6.5082e-01  1.51e-01  9.86e-04  1.90e-01  2.75e-06  1.38e-02  7.55e-01  
  8  +4.9805e-01  +6.4875e-01  1.51e-01  1.33e-04  2.58e-02  6.92e-05  4.57e-04  9.84e-01  
  9  +4.9577e-01  +6.2128e-01  1.26e-01  6.33e-05  1.23e-02  9.67e-05  2.14e-04  5.86e-01  
 10  +4.9651e-01  +6.0447e-01  1.08e-01  5.17e-05  1.00e-02  2.82e-05  1.71e-04  6.77e-01  
 11  +4.9401e-01  +5.8316e-01  8.92e-02  3.10e-05  6.00e-03  2.16e-05  1.02e-04  6.34e-01  
 12  +4.9381e-01  +5.8179e-01  8.80e-02  3.06e-05  5.93e-03  1.92e-05  1.01e-04  9.84e-02  
 13  +4.9332e-01  +5.7930e-01  8.60e-02  2.81e-05  5.45e-03  1.81e-05  9.19e-05  1.60e-01  
 14  +4.9340e-01  +5.7935e-01  8.59e-02  2.65e-05  5.14e-03  1.23e-05  8.61e-05  3.97e-01  
 15  +4.8874e-01  +5.5749e-01  6.87e-02  1.76e-05  3.41e-03  7.66e-06  5.82e-05  5.60e-01  
 16  +4.8314e-01  +5.3172e-01  4.86e-02  1.13e-05  2.18e-03  4.82e-06  3.82e-05  4.22e-01  
 17  +4.8044e-01  +5.1830e-01  3.79e-02  8.30e-06  1.61e-03  2.64e-06  2.84e-05  6.11e-01  
 18  +4.7747e-01  +5.0576e-01  2.83e-02  5.92e-06  1.15e-03  1.92e-06  2.04e-05  3.33e-01  
 19  +4.7726e-01  +5.0476e-01  2.75e-02  5.70e-06  1.10e-03  1.83e-06  1.96e-05  1.40e-01  
 20  +4.7462e-01  +4.9334e-01  1.87e-02  3.64e-06  7.05e-04  9.89e-07  1.27e-05  9.90e-01  
 21  +4.7372e-01  +4.8979e-01  1.61e-02  3.05e-06  5.89e-04  8.73e-07  1.06e-05  2.29e-01  
 22  +4.7366e-01  +4.8958e-01  1.59e-02  3.03e-06  5.86e-04  8.62e-07  1.06e-05  3.87e-02  
 23  +4.7173e-01  +4.8242e-01  1.07e-02  2.01e-06  3.88e-04  5.87e-07  7.08e-06  5.79e-01  
 24  +4.6983e-01  +4.7534e-01  5.51e-03  1.01e-06  1.96e-04  3.04e-07  3.63e-06  5.21e-01  
 25  +4.6963e-01  +4.7434e-01  4.71e-03  8.66e-07  1.67e-04  2.77e-07  3.11e-06  6.61e-01  
 26  +4.6957e-01  +4.7406e-01  4.49e-03  8.22e-07  1.59e-04  2.69e-07  2.95e-06  2.82e-01  
 27  +4.6833e-01  +4.6964e-01  1.31e-03  2.38e-07  4.61e-05  8.08e-08  8.67e-07  9.90e-01  
 28  +4.6781e-01  +4.6785e-01  3.31e-05  6.02e-09  1.16e-06  1.99e-09  2.21e-08  9.82e-01  
 29  +4.6780e-01  +4.6780e-01  3.31e-07  6.02e-11  1.16e-08  1.99e-11  2.21e-10  9.90e-01  
 30  +4.6780e-01  +4.6780e-01  3.31e-09  6.02e-13  1.16e-10  2.00e-13  2.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 87.2561ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:55 PM: Optimal value: 4.678e-01
(CVXPY) Aug 30 12:06:55 PM: Compilation took 3.121e-02 seconds
(CVXPY) Aug 30 12:06:55 PM: Solver (including time spent in interface) took 9.407e-02 seconds
FULL MODEL:
  Accruacy: 0.5294
  Our objective: 0.05880000000000002

IF 
    (x1 = 1 AND x4 = 1 AND x0 = 0 AND x3 = 0)            <-- (term's our objective: 0.005999999999999971)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.033599999999999956)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x3 = 0) <-- (term's our objective: 0.005799999999999986)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.004799999999999964)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0) <-- (term's our objective: 0.005000000000000029)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0 AND x4 = 0) <-- (term's our objective: 0.003600000000000006)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.033599999999999956
    Its accruacy: 0.5168
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.033599999999999956
  Highest accruacy: 0.5168
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

