Command:
python test_script.py -s smallest_subclass -d 8 -n 100 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 8.

Computed total variation: 0.74
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:21 PM: Your problem has 67 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Finished problem compilation (took 3.973e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9746e-01  +5.1128e+01  5.06e+01  8.71e-01  9.93e+00  1.00e+00  1.04e+00   ------   
  1  +5.7813e-01  +1.1106e+01  1.05e+01  3.68e-01  5.92e+00  3.79e-03  5.81e-01  6.01e-01  
  2  +5.1430e-01  +1.7164e+00  1.20e+00  8.93e-02  1.77e+00  1.71e-02  2.28e-01  9.90e-01  
  3  +4.8765e-01  +8.6258e-01  3.75e-01  2.01e-02  4.19e-01  9.83e-03  6.14e-02  8.00e-01  
  4  +4.5359e-01  +6.6484e-01  2.11e-01  6.82e-03  1.43e-01  7.26e-03  2.31e-02  6.67e-01  
  5  +4.3380e-01  +5.5004e-01  1.16e-01  3.07e-03  6.40e-02  3.23e-03  1.19e-02  6.37e-01  
  6  +4.1375e-01  +4.6297e-01  4.92e-02  1.04e-03  2.17e-02  1.23e-03  4.71e-03  6.50e-01  
  7  +4.0155e-01  +4.0585e-01  4.30e-03  9.13e-05  1.89e-03  1.16e-05  4.45e-04  9.87e-01  
  8  +4.0012e-01  +4.0016e-01  4.54e-05  9.58e-07  1.99e-05  1.19e-07  4.71e-06  9.89e-01  
  9  +4.0010e-01  +4.0010e-01  4.54e-07  9.58e-09  1.99e-07  1.19e-09  4.71e-08  9.90e-01  
 10  +4.0010e-01  +4.0010e-01  4.54e-09  9.58e-11  1.99e-09  1.19e-11  4.71e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 368µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:21 PM: Optimal value: 4.001e-01
(CVXPY) Aug 30 12:17:21 PM: Compilation took 3.973e-03 seconds
(CVXPY) Aug 30 12:17:21 PM: Solver (including time spent in interface) took 9.439e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:21 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Finished problem compilation (took 2.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 647
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9468e-01  +5.1353e+01  5.09e+01  8.76e-01  9.82e+00  1.00e+00  1.05e+00   ------   
  1  +5.5796e-01  +1.1103e+01  1.05e+01  3.74e-01  5.70e+00  3.81e-03  5.80e-01  6.03e-01  
  2  +4.9567e-01  +1.8461e+00  1.35e+00  8.59e-02  1.72e+00  1.90e-02  2.12e-01  9.90e-01  
  3  +4.3792e-01  +1.0399e+00  6.02e-01  2.12e-02  4.48e-01  1.60e-02  5.93e-02  7.63e-01  
  4  +3.9696e-01  +6.5778e-01  2.61e-01  7.57e-03  1.59e-01  6.94e-03  2.28e-02  6.58e-01  
  5  +3.7257e-01  +5.7256e-01  2.00e-01  4.21e-03  9.10e-02  5.60e-03  1.30e-02  5.62e-01  
  6  +3.4042e-01  +4.3281e-01  9.24e-02  1.71e-03  3.69e-02  2.30e-03  5.62e-03  6.16e-01  
  7  +3.1514e-01  +3.2579e-01  1.07e-02  1.98e-04  4.26e-03  2.21e-05  6.93e-04  9.85e-01  
  8  +3.1067e-01  +3.1105e-01  3.77e-04  7.00e-06  1.50e-04  6.80e-07  2.49e-05  9.64e-01  
  9  +3.1051e-01  +3.1052e-01  1.46e-05  2.74e-07  5.78e-06  3.22e-08  9.98e-07  9.65e-01  
 10  +3.1050e-01  +3.1050e-01  1.47e-07  2.75e-09  5.80e-08  3.23e-10  1.00e-08  9.90e-01  
 11  +3.1050e-01  +3.1050e-01  1.47e-09  2.75e-11  5.80e-10  3.23e-12  1.00e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 449.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:21 PM: Optimal value: 3.105e-01
(CVXPY) Aug 30 12:17:21 PM: Compilation took 2.998e-03 seconds
(CVXPY) Aug 30 12:17:21 PM: Solver (including time spent in interface) took 1.069e-03 seconds
Iteration: 2, Objective: 0.3105
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:21 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Finished problem compilation (took 2.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 730
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9254e-01  +5.1557e+01  5.11e+01  8.81e-01  9.73e+00  1.00e+00  1.05e+00   ------   
  1  +5.4040e-01  +1.1221e+01  1.07e+01  3.83e-01  5.60e+00  3.82e-03  5.87e-01  5.98e-01  
  2  +4.7563e-01  +2.0500e+00  1.57e+00  9.11e-02  1.79e+00  2.07e-02  2.23e-01  9.62e-01  
  3  +3.9748e-01  +1.0227e+00  6.25e-01  2.08e-02  4.31e-01  1.54e-02  5.77e-02  7.73e-01  
  4  +3.2846e-01  +6.7842e-01  3.50e-01  8.27e-03  1.74e-01  8.93e-03  2.46e-02  6.68e-01  
  5  +2.9716e-01  +5.1926e-01  2.22e-01  5.06e-03  1.07e-01  4.84e-03  1.59e-02  4.38e-01  
  6  +2.6335e-01  +3.6376e-01  1.00e-01  2.19e-03  4.71e-02  1.68e-03  7.45e-03  6.40e-01  
  7  +2.3464e-01  +2.4474e-01  1.01e-02  2.15e-04  4.60e-03  9.31e-05  8.19e-04  9.12e-01  
  8  +2.3081e-01  +2.3111e-01  2.91e-04  6.21e-06  1.32e-04  2.19e-06  2.44e-05  9.71e-01  
  9  +2.3070e-01  +2.3071e-01  9.51e-06  2.06e-07  4.32e-06  5.94e-08  8.22e-07  9.78e-01  
 10  +2.3070e-01  +2.3070e-01  9.52e-08  2.06e-09  4.33e-08  5.95e-10  8.24e-09  9.90e-01  
 11  +2.3070e-01  +2.3070e-01  9.52e-10  2.06e-11  4.33e-10  5.95e-12  8.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 542.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:21 PM: Optimal value: 2.307e-01
(CVXPY) Aug 30 12:17:21 PM: Compilation took 2.007e-03 seconds
(CVXPY) Aug 30 12:17:21 PM: Solver (including time spent in interface) took 9.708e-04 seconds
Iteration: 3, Objective: 0.2307
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:21 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Finished problem compilation (took 3.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 781
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9109e-01  +5.1751e+01  5.13e+01  8.85e-01  9.51e+00  1.00e+00  1.06e+00   ------   
  1  +5.2266e-01  +1.1300e+01  1.08e+01  3.88e-01  5.40e+00  3.86e-03  5.87e-01  5.97e-01  
  2  +4.5221e-01  +2.1296e+00  1.68e+00  8.71e-02  1.67e+00  2.21e-02  2.14e-01  9.65e-01  
  3  +3.6671e-01  +1.1453e+00  7.79e-01  2.49e-02  4.98e-01  1.63e-02  6.79e-02  7.22e-01  
  4  +2.8891e-01  +6.3741e-01  3.49e-01  9.03e-03  1.80e-01  4.69e-03  2.72e-02  7.55e-01  
  5  +2.4144e-01  +3.3414e-01  9.27e-02  2.38e-03  4.73e-02  1.02e-03  7.95e-03  7.43e-01  
  6  +2.2696e-01  +2.7820e-01  5.12e-02  1.23e-03  2.53e-02  5.26e-04  4.28e-03  5.39e-01  
  7  +2.1351e-01  +2.2142e-01  7.90e-03  1.81e-04  3.77e-03  7.10e-05  6.80e-04  8.69e-01  
  8  +2.1115e-01  +2.1209e-01  9.47e-04  2.17e-05  4.49e-04  7.63e-06  8.41e-05  8.79e-01  
  9  +2.1089e-01  +2.1113e-01  2.41e-04  5.58e-06  1.14e-04  1.72e-06  2.24e-05  7.89e-01  
 10  +2.1081e-01  +2.1083e-01  2.40e-05  5.60e-07  1.14e-05  1.47e-07  2.27e-06  9.36e-01  
 11  +2.1080e-01  +2.1080e-01  2.45e-07  5.72e-09  1.16e-07  1.50e-09  2.32e-08  9.90e-01  
 12  +2.1080e-01  +2.1080e-01  2.45e-09  5.73e-11  1.16e-09  1.50e-11  2.33e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 649.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:21 PM: Optimal value: 2.108e-01
(CVXPY) Aug 30 12:17:21 PM: Compilation took 3.001e-03 seconds
(CVXPY) Aug 30 12:17:21 PM: Solver (including time spent in interface) took 9.980e-04 seconds
Iteration: 4, Objective: 0.2108
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:21 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Finished problem compilation (took 2.886e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 835
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9020e-01  +5.1831e+01  5.13e+01  8.89e-01  9.33e+00  1.00e+00  1.06e+00   ------   
  1  +5.0879e-01  +1.1308e+01  1.08e+01  3.91e-01  5.20e+00  3.89e-03  5.83e-01  5.99e-01  
  2  +4.2544e-01  +2.1708e+00  1.75e+00  8.00e-02  1.50e+00  2.34e-02  1.99e-01  9.74e-01  
  3  +3.0414e-01  +1.0051e+00  7.01e-01  1.92e-02  3.74e-01  1.45e-02  5.34e-02  8.07e-01  
  4  +2.2998e-01  +3.7156e-01  1.42e-01  3.79e-03  7.19e-02  1.01e-03  1.22e-02  8.52e-01  
  5  +2.1329e-01  +3.0994e-01  9.66e-02  2.33e-03  4.62e-02  7.26e-04  7.62e-03  4.70e-01  
  6  +1.9151e-01  +2.2117e-01  2.97e-02  7.05e-04  1.38e-02  1.36e-04  2.51e-03  9.90e-01  
  7  +1.8187e-01  +1.8427e-01  2.40e-03  5.52e-05  1.08e-03  9.81e-06  2.05e-04  9.22e-01  
  8  +1.8108e-01  +1.8127e-01  1.93e-04  4.59e-06  8.78e-05  4.76e-07  1.83e-05  9.14e-01  
  9  +1.8100e-01  +1.8101e-01  7.53e-06  1.81e-07  3.42e-06  1.94e-08  7.53e-07  9.61e-01  
 10  +1.8100e-01  +1.8100e-01  7.53e-08  1.81e-09  3.42e-08  1.94e-10  7.54e-09  9.90e-01  
 11  +1.8100e-01  +1.8100e-01  7.54e-10  1.81e-11  3.43e-10  1.95e-12  7.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 702µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:21 PM: Optimal value: 1.810e-01
(CVXPY) Aug 30 12:17:21 PM: Compilation took 2.886e-03 seconds
(CVXPY) Aug 30 12:17:21 PM: Solver (including time spent in interface) took 4.802e-04 seconds
Iteration: 5, Objective: 0.1810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:21 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Finished problem compilation (took 3.094e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 888
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8865e-01  +5.1883e+01  5.14e+01  8.92e-01  9.16e+00  1.00e+00  1.06e+00   ------   
  1  +4.9188e-01  +1.1544e+01  1.11e+01  4.01e-01  5.13e+00  3.93e-03  5.92e-01  5.87e-01  
  2  +4.0395e-01  +2.2594e+00  1.86e+00  8.54e-02  1.54e+00  2.49e-02  2.13e-01  9.67e-01  
  3  +2.8467e-01  +1.1355e+00  8.51e-01  2.46e-02  4.60e-01  1.61e-02  6.89e-02  7.64e-01  
  4  +2.2127e-01  +3.7993e-01  1.59e-01  4.61e-03  8.46e-02  1.43e-03  1.49e-02  8.51e-01  
  5  +2.0429e-01  +3.1388e-01  1.10e-01  2.82e-03  5.49e-02  9.96e-04  9.20e-03  5.28e-01  
  6  +1.8590e-01  +2.3534e-01  4.94e-02  1.26e-03  2.43e-02  3.08e-04  4.35e-03  7.39e-01  
  7  +1.7289e-01  +1.7882e-01  5.93e-03  1.44e-04  2.80e-03  3.47e-05  5.23e-04  8.88e-01  
  8  +1.7128e-01  +1.7182e-01  5.44e-04  1.35e-05  2.58e-04  2.26e-06  5.16e-05  9.05e-01  
  9  +1.7112e-01  +1.7117e-01  5.62e-05  1.43e-06  2.68e-05  2.26e-07  5.73e-06  8.97e-01  
 10  +1.7110e-01  +1.7110e-01  6.10e-07  1.56e-08  2.91e-07  2.44e-09  6.27e-08  9.89e-01  
 11  +1.7110e-01  +1.7110e-01  6.10e-09  1.56e-10  2.91e-09  2.44e-11  6.28e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 868.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:21 PM: Optimal value: 1.711e-01
(CVXPY) Aug 30 12:17:21 PM: Compilation took 3.094e-03 seconds
(CVXPY) Aug 30 12:17:21 PM: Solver (including time spent in interface) took 1.941e-03 seconds
Iteration: 6, Objective: 0.1711
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:21 PM: Your problem has 127 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Finished problem compilation (took 2.988e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 127
  constraints   = 177
  nnz(P)        = 0
  nnz(A)        = 934
  cones (total) = 1
    : Nonnegative = 1,  numel = 177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8780e-01  +5.1918e+01  5.14e+01  8.95e-01  8.99e+00  1.00e+00  1.06e+00   ------   
  1  +4.7671e-01  +1.1711e+01  1.12e+01  4.06e-01  5.03e+00  3.97e-03  5.94e-01  5.80e-01  
  2  +3.7937e-01  +2.4202e+00  2.04e+00  8.96e-02  1.56e+00  2.63e-02  2.24e-01  9.46e-01  
  3  +2.6302e-01  +1.1219e+00  8.59e-01  2.58e-02  4.65e-01  1.49e-02  7.29e-02  7.55e-01  
  4  +2.0551e-01  +3.5916e-01  1.54e-01  4.72e-03  8.40e-02  1.40e-03  1.52e-02  8.74e-01  
  5  +1.9140e-01  +3.0992e-01  1.19e-01  3.25e-03  6.20e-02  1.03e-03  1.05e-02  4.78e-01  
  6  +1.7176e-01  +2.1474e-01  4.30e-02  1.14e-03  2.19e-02  3.15e-04  3.87e-03  7.34e-01  
  7  +1.6182e-01  +1.6400e-01  2.19e-03  5.81e-05  1.11e-03  1.25e-05  2.04e-04  9.50e-01  
  8  +1.6132e-01  +1.6173e-01  4.12e-04  1.15e-05  2.13e-04  1.78e-06  4.35e-05  8.79e-01  
  9  +1.6120e-01  +1.6122e-01  1.56e-05  4.41e-07  8.08e-06  6.07e-08  1.70e-06  9.64e-01  
 10  +1.6120e-01  +1.6120e-01  1.56e-07  4.42e-09  8.09e-08  6.07e-10  1.71e-08  9.90e-01  
 11  +1.6120e-01  +1.6120e-01  1.56e-09  4.43e-11  8.11e-10  6.08e-12  1.71e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 688.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:21 PM: Optimal value: 1.612e-01
(CVXPY) Aug 30 12:17:21 PM: Compilation took 2.988e-03 seconds
(CVXPY) Aug 30 12:17:21 PM: Solver (including time spent in interface) took 1.020e-03 seconds
Iteration: 7, Objective: 0.1612
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:21 PM: Your problem has 128 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:21 PM: Finished problem compilation (took 2.933e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 128
  constraints   = 178
  nnz(P)        = 0
  nnz(A)        = 941
  cones (total) = 1
    : Nonnegative = 1,  numel = 178

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8765e-01  +5.1925e+01  5.14e+01  8.95e-01  8.98e+00  1.00e+00  1.06e+00   ------   
  1  +4.7532e-01  +1.1779e+01  1.13e+01  4.09e-01  5.05e+00  3.98e-03  5.97e-01  5.76e-01  
  2  +3.7887e-01  +2.4585e+00  2.08e+00  9.23e-02  1.59e+00  2.65e-02  2.31e-01  9.40e-01  
  3  +2.6122e-01  +1.1050e+00  8.44e-01  2.54e-02  4.56e-01  1.50e-02  7.22e-02  7.61e-01  
  4  +2.0607e-01  +3.6876e-01  1.63e-01  5.02e-03  8.93e-02  1.57e-03  1.62e-02  8.64e-01  
  5  +1.9324e-01  +3.2156e-01  1.28e-01  3.58e-03  6.77e-02  1.21e-03  1.16e-02  4.22e-01  
  6  +1.7831e-01  +2.4887e-01  7.06e-02  1.89e-03  3.61e-02  6.46e-04  6.30e-03  5.00e-01  
  7  +1.6270e-01  +1.6801e-01  5.31e-03  1.41e-04  2.69e-03  3.14e-05  4.95e-04  9.58e-01  
  8  +1.6144e-01  +1.6219e-01  7.54e-04  2.07e-05  3.87e-04  3.53e-06  7.59e-05  8.54e-01  
  9  +1.6124e-01  +1.6136e-01  1.24e-04  3.50e-06  6.42e-05  5.52e-07  1.35e-05  8.54e-01  
 10  +1.6120e-01  +1.6120e-01  1.45e-06  4.11e-08  7.52e-07  6.28e-09  1.60e-07  9.88e-01  
 11  +1.6120e-01  +1.6120e-01  1.45e-08  4.11e-10  7.52e-09  6.28e-11  1.60e-09  9.90e-01  
 12  +1.6120e-01  +1.6120e-01  1.45e-10  4.12e-12  7.52e-11  6.28e-13  1.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 863.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:21 PM: Optimal value: 1.612e-01
(CVXPY) Aug 30 12:17:21 PM: Compilation took 2.933e-03 seconds
(CVXPY) Aug 30 12:17:21 PM: Solver (including time spent in interface) took 1.035e-03 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.6799999999999999

IF 
    (x0 = 1 AND x6 = 1 AND x7 = 1 AND x2 = 0)                                             <-- (term's our objective: 0.09999999999999998)
 OR (x6 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0)                                             <-- (term's our objective: 0.14)
 OR (x2 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0)                                             <-- (term's our objective: 0.07999999999999997)
 OR (x1 = 1 AND x2 = 1 AND x7 = 1 AND x0 = 0)                                             <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x5 = 1 AND x7 = 1 AND x4 = 0)                                             <-- (term's our objective: 0.07999999999999996)
 OR (x2 = 1 AND x5 = 1 AND x7 = 1 AND x4 = 0)                                             <-- (term's our objective: 0.09999999999999998)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x3 = 0)                                             <-- (term's our objective: 0.09999999999999999)
 OR (x1 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0)                                             <-- (term's our objective: 0.07999999999999997)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1)                                  <-- (term's our objective: 0.040000000000000036)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1)                                  <-- (term's our objective: 0.040000000000000036)
 OR (x4 = 1 AND x5 = 1 AND x1 = 0 AND x3 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.040000000000000036)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.020000000000000018)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.14
    Its accruacy: 0.57
    Its hamming distance: 6
  Shortest hamming distance: 6
    Its our objective: 0.14
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

