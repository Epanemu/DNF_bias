Command:
python test_script.py -s smallest_subclass -d 1 -n 10000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6016
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 1.

Computed total variation: 0.6016
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:01:09 PM: Your problem has 5003 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:01:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:01:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:01:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:01:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:01:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:01:09 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:01:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:01:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:01:09 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:01:09 PM: Finished problem compilation (took 9.971e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5003
  constraints   = 10003
  nnz(P)        = 0
  nnz(A)        = 20003
  cones (total) = 1
    : Nonnegative = 1,  numel = 10003

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9986e-01  +5.0020e+03  5.00e+03  9.82e-01  6.39e+01  1.00e+00  1.00e+00   ------   
  1  +6.6412e-01  +8.0781e+02  8.07e+02  2.20e-01  2.62e+01  4.90e-03  3.30e-01  7.58e-01  
  2  +5.5451e-01  +1.4822e+02  1.48e+02  1.28e-01  1.68e+01  4.12e-03  2.10e-01  5.01e-01  
  3  +5.0002e-01  +4.0241e+00  3.52e+00  2.29e-02  2.86e+00  9.85e-04  1.98e-01  3.37e-01  
  4  +4.9144e-01  +3.2266e+00  2.74e+00  6.32e-03  8.73e-01  6.81e-03  1.51e-02  9.90e-01  
  5  +3.9108e-01  +2.8572e+00  2.47e+00  5.40e-04  7.61e-02  7.41e-02  1.14e-03  9.33e-01  
  6  +3.6467e-01  +1.6315e+00  1.27e+00  3.83e-04  5.25e-02  4.95e-04  9.05e-04  4.10e-01  
  7  +2.6147e-01  +6.2183e-01  3.60e-01  1.01e-04  1.33e-02  4.09e-06  3.12e-04  7.10e-01  
  8  +2.0464e-01  +2.4643e-01  4.18e-02  1.29e-05  1.65e-03  2.01e-06  7.32e-05  9.18e-01  
  9  +1.9943e-01  +2.0026e-01  8.30e-04  2.55e-07  3.26e-05  1.95e-08  1.61e-06  9.79e-01  
 10  +1.9930e-01  +1.9931e-01  8.27e-06  2.54e-09  3.25e-07  1.95e-10  1.61e-08  9.90e-01  
 11  +1.9930e-01  +1.9930e-01  8.27e-08  2.54e-11  3.25e-09  1.95e-12  1.61e-10  9.90e-01  
 12  +1.9930e-01  +1.9930e-01  8.27e-10  2.54e-13  3.25e-11  1.95e-14  1.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.3126ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:09 PM: Problem status: optimal
(CVXPY) Aug 30 12:01:09 PM: Optimal value: 1.993e-01
(CVXPY) Aug 30 12:01:09 PM: Compilation took 9.971e-03 seconds
(CVXPY) Aug 30 12:01:09 PM: Solver (including time spent in interface) took 2.532e-02 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.8008
  Our objective: 0.6016

IF 
    (x0 = 0) <-- (term's our objective: 0.6016)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.6016
    Its accruacy: 0.8008
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.6016
  Highest accruacy: 0.8008
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

