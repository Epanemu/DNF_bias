Command:
python test_script.py -s smallest_subclass -d 4 -n 50000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.07904
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.07904
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:12 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:12 PM: Finished problem compilation (took 6.476e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  1.93e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5118e-01  +7.5402e+02  7.53e+02  1.44e-01  5.58e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1149e-01  +1.6847e+02  1.68e+02  1.31e-01  5.06e+01  1.85e-05  2.26e-01  5.77e-02  
  4  +5.0022e-01  +3.2709e+00  2.77e+00  8.28e-03  3.16e+00  1.57e-06  1.70e-01  7.88e-01  
  5  +5.0002e-01  +8.9980e-01  4.00e-01  1.21e-03  4.66e-01  9.80e-06  9.83e-02  9.90e-01  
  6  +5.0000e-01  +5.6588e-01  6.59e-02  1.97e-04  7.62e-02  3.26e-06  1.60e-02  8.49e-01  
  7  +4.9983e-01  +7.2435e-01  2.25e-01  2.92e-04  1.13e-01  1.48e-04  1.06e-03  9.69e-01  
  8  +4.9896e-01  +7.0585e-01  2.07e-01  6.06e-05  2.35e-02  7.23e-04  1.90e-04  8.30e-01  
  9  +4.9481e-01  +5.8586e-01  9.10e-02  5.56e-06  2.16e-03  2.70e-03  1.69e-05  9.90e-01  
 10  +4.8919e-01  +5.3525e-01  4.61e-02  3.02e-06  1.17e-03  4.74e-05  9.50e-06  7.37e-01  
 11  +4.7965e-01  +4.8808e-01  8.43e-03  4.30e-07  1.67e-04  7.25e-06  1.42e-06  8.72e-01  
 12  +4.7768e-01  +4.7936e-01  1.67e-03  8.17e-08  3.17e-05  1.32e-06  2.80e-07  8.16e-01  
 13  +4.7708e-01  +4.7722e-01  1.41e-04  5.73e-09  2.22e-06  2.07e-08  2.35e-08  9.85e-01  
 14  +4.7704e-01  +4.7704e-01  1.44e-06  5.84e-11  2.26e-08  2.11e-10  2.40e-10  9.90e-01  
 15  +4.7704e-01  +4.7704e-01  1.44e-08  5.84e-13  2.26e-10  2.11e-12  2.40e-12  9.90e-01  
 16  +4.7704e-01  +4.7704e-01  1.45e-10  5.89e-15  2.29e-12  3.56e-14  3.94e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 231.6483ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:12 PM: Optimal value: 4.770e-01
(CVXPY) Aug 30 12:05:12 PM: Compilation took 6.476e-02 seconds
(CVXPY) Aug 30 12:05:12 PM: Solver (including time spent in interface) took 2.474e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4770
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:12 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:12 PM: Finished problem compilation (took 8.768e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 229315
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  2.09e+02  1.00e+00  1.00e+00   ------   
  1  +6.0818e-01  +4.8447e+03  4.84e+03  3.42e-01  1.17e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5110e-01  +7.5325e+02  7.53e+02  1.44e-01  6.04e+01  8.23e-03  2.28e-01  7.24e-01  
  3  +5.1146e-01  +1.6821e+02  1.68e+02  1.31e-01  5.48e+01  1.85e-05  2.26e-01  5.82e-02  
  4  +5.0020e-01  +3.0336e+00  2.53e+00  7.58e-03  3.13e+00  1.60e-06  1.65e-01  8.50e-01  
  5  +5.0002e-01  +8.9924e-01  3.99e-01  1.21e-03  5.04e-01  8.52e-06  8.67e-02  9.90e-01  
  6  +5.0001e-01  +6.8773e-01  1.88e-01  5.64e-04  2.36e-01  4.81e-06  3.79e-02  6.64e-01  
  7  +5.0000e-01  +6.5614e-01  1.56e-01  4.68e-04  1.96e-01  5.91e-06  1.70e-02  6.50e-01  
  8  +5.0001e-01  +6.6526e-01  1.65e-01  4.89e-04  2.04e-01  4.28e-06  8.58e-03  9.70e-01  
  9  +4.9987e-01  +6.0263e-01  1.03e-01  5.68e-05  2.38e-02  1.12e-04  1.72e-04  9.83e-01  
 10  +4.9937e-01  +6.0124e-01  1.02e-01  1.48e-05  6.22e-03  4.35e-04  4.25e-05  7.69e-01  
 11  +4.9855e-01  +5.9531e-01  9.68e-02  8.34e-06  3.51e-03  5.58e-04  2.38e-05  6.31e-01  
 12  +4.9851e-01  +5.9456e-01  9.60e-02  8.12e-06  3.41e-03  4.81e-04  2.31e-05  1.64e-01  
 13  +4.9880e-01  +5.9566e-01  9.69e-02  8.01e-06  3.37e-03  3.59e-04  2.27e-05  2.78e-01  
 14  +4.9738e-01  +5.8918e-01  9.18e-02  5.03e-06  2.12e-03  4.79e-04  1.43e-05  4.17e-01  
 15  +4.9660e-01  +5.8532e-01  8.87e-02  4.78e-06  2.01e-03  4.11e-04  1.35e-05  1.59e-01  
 16  +4.9575e-01  +5.8201e-01  8.63e-02  4.19e-06  1.76e-03  3.32e-04  1.18e-05  3.28e-01  
 17  +4.9537e-01  +5.8034e-01  8.50e-02  4.15e-06  1.75e-03  3.03e-04  1.17e-05  6.34e-02  
 18  +4.9370e-01  +5.7322e-01  7.95e-02  3.98e-06  1.67e-03  1.42e-04  1.13e-05  4.15e-01  
 19  +4.9099e-01  +5.6329e-01  7.23e-02  3.20e-06  1.34e-03  1.29e-04  9.09e-06  2.52e-01  
 20  +4.9027e-01  +5.6060e-01  7.03e-02  3.18e-06  1.33e-03  1.16e-04  9.06e-06  4.29e-02  
 21  +4.8617e-01  +5.4622e-01  6.00e-02  2.46e-06  1.03e-03  9.14e-05  7.08e-06  2.92e-01  
 22  +4.8136e-01  +5.2951e-01  4.82e-02  1.83e-06  7.69e-04  4.88e-05  5.34e-06  4.53e-01  
 23  +4.7879e-01  +5.2111e-01  4.23e-02  1.53e-06  6.41e-04  2.63e-05  4.46e-06  4.46e-01  
 24  +4.6991e-01  +4.9122e-01  2.13e-02  7.00e-07  2.94e-04  9.90e-06  2.08e-06  6.23e-01  
 25  +4.6197e-01  +4.6484e-01  2.87e-03  8.84e-08  3.71e-05  1.04e-06  2.66e-07  8.90e-01  
 26  +4.6138e-01  +4.6320e-01  1.82e-03  5.56e-08  2.33e-05  9.22e-08  1.69e-07  8.16e-01  
 27  +4.6080e-01  +4.6118e-01  3.83e-04  1.17e-08  4.88e-06  1.95e-08  3.51e-08  8.04e-01  
 28  +4.6059e-01  +4.6062e-01  2.89e-05  8.60e-10  3.60e-07  8.84e-10  2.58e-09  9.70e-01  
 29  +4.6058e-01  +4.6058e-01  2.90e-07  8.62e-12  3.61e-09  8.87e-12  2.59e-11  9.90e-01  
 30  +4.6058e-01  +4.6058e-01  2.91e-09  8.66e-14  3.63e-11  1.07e-13  3.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 541.821ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:13 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:13 PM: Optimal value: 4.606e-01
(CVXPY) Aug 30 12:05:13 PM: Compilation took 8.768e-02 seconds
(CVXPY) Aug 30 12:05:13 PM: Solver (including time spent in interface) took 5.600e-01 seconds
FULL MODEL:
  Accruacy: 0.53952
  Our objective: 0.07903999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.07903999999999997)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.07903999999999997
    Its accruacy: 0.53952
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.07903999999999997
  Highest accruacy: 0.53952
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

