Command:
python test_script.py -s smallest_subclass -d 2 -n 50000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30347999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 2.

Computed total variation: 0.30347999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:22 PM: Your problem has 25005 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:22 PM: Finished problem compilation (took 4.615e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25005
  constraints   = 50005
  nnz(P)        = 0
  nnz(A)        = 125005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5003e+04  2.50e+04  9.92e-01  1.59e+02  1.00e+00  1.00e+00   ------   
  1  +6.3758e-01  +4.3682e+03  4.37e+03  2.69e-01  7.51e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5927e-01  +8.1611e+02  8.16e+02  1.36e-01  4.39e+01  5.28e-03  2.16e-01  5.86e-01  
  3  +5.0727e-01  +1.0086e+02  1.00e+02  1.15e-01  3.67e+01  6.53e-06  2.15e-01  4.37e-02  
  4  +5.0016e-01  +3.5291e+00  3.03e+00  9.00e-03  2.82e+00  9.59e-07  2.03e-01  2.51e-01  
  5  +5.0001e-01  +1.1476e+00  6.48e-01  1.93e-03  6.13e-01  4.38e-07  9.77e-02  7.36e-01  
  6  +4.9987e-01  +9.2517e-01  4.25e-01  1.18e-03  3.77e-01  1.95e-06  9.83e-03  9.37e-01  
  7  +4.8954e-01  +8.9589e-01  4.06e-01  5.30e-05  1.72e-02  1.23e-04  1.44e-04  9.86e-01  
  8  +4.5823e-01  +6.9916e-01  2.41e-01  1.13e-05  3.66e-03  2.40e-04  3.19e-05  7.87e-01  
  9  +4.1307e-01  +4.7451e-01  6.14e-02  2.96e-06  9.45e-04  1.66e-06  1.18e-05  8.71e-01  
 10  +3.9895e-01  +4.0172e-01  2.76e-03  1.25e-07  3.99e-05  3.12e-08  5.55e-07  9.57e-01  
 11  +3.9809e-01  +3.9812e-01  2.86e-05  1.28e-09  4.08e-07  3.21e-10  5.77e-09  9.90e-01  
 12  +3.9808e-01  +3.9808e-01  2.86e-07  1.28e-11  4.08e-09  3.21e-12  5.77e-11  9.90e-01  
 13  +3.9808e-01  +3.9808e-01  2.87e-09  1.28e-13  4.09e-11  3.64e-14  6.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 137.5947ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:22 PM: Optimal value: 3.981e-01
(CVXPY) Aug 30 12:02:22 PM: Compilation took 4.615e-02 seconds
(CVXPY) Aug 30 12:02:22 PM: Solver (including time spent in interface) took 1.542e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.3981
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:22 PM: Your problem has 25006 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:22 PM: Finished problem compilation (took 4.382e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25006
  constraints   = 50006
  nnz(P)        = 0
  nnz(A)        = 135041
  cones (total) = 1
    : Nonnegative = 1,  numel = 50006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5002e+04  2.50e+04  9.92e-01  1.65e+02  1.00e+00  1.00e+00   ------   
  1  +6.3754e-01  +4.3684e+03  4.37e+03  2.69e-01  7.80e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5924e-01  +8.1578e+02  8.15e+02  1.36e-01  4.56e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0721e-01  +1.0009e+02  9.96e+01  1.15e-01  3.80e+01  6.49e-06  2.15e-01  4.44e-02  
  4  +5.0035e-01  +6.2132e+00  5.71e+00  1.68e-02  5.43e+00  1.20e-06  2.08e-01  1.40e-01  
  5  +5.0007e-01  +2.0563e+00  1.56e+00  4.63e-03  1.52e+00  6.52e-07  1.56e-01  3.70e-01  
  6  +5.0002e-01  +1.3463e+00  8.46e-01  2.52e-03  8.30e-01  4.98e-07  7.95e-02  5.97e-01  
  7  +4.9988e-01  +9.3096e-01  4.31e-01  1.15e-03  3.83e-01  1.76e-06  7.43e-03  9.44e-01  
  8  +4.9014e-01  +8.9798e-01  4.08e-01  4.40e-05  1.50e-02  1.09e-04  1.10e-04  9.85e-01  
  9  +4.9048e-01  +9.0262e-01  4.12e-01  4.25e-05  1.45e-02  8.87e-05  1.07e-04  2.56e-01  
 10  +4.9045e-01  +9.0341e-01  4.13e-01  4.18e-05  1.42e-02  7.36e-05  1.04e-04  2.03e-01  
 11  +4.8747e-01  +9.3373e-01  4.46e-01  2.96e-05  1.01e-02  3.46e-05  7.34e-05  9.90e-01  
 12  +4.6509e-01  +8.2193e-01  3.57e-01  1.41e-05  4.78e-03  3.41e-05  3.57e-05  7.15e-01  
 13  +4.0239e-01  +5.4498e-01  1.43e-01  5.20e-06  1.74e-03  3.19e-07  1.53e-05  7.66e-01  
 14  +3.5310e-01  +3.6302e-01  9.92e-03  3.65e-07  1.21e-04  8.47e-08  1.30e-06  9.81e-01  
 15  +3.4842e-01  +3.4853e-01  1.15e-04  4.20e-09  1.39e-06  8.32e-10  1.54e-08  9.88e-01  
 16  +3.4836e-01  +3.4836e-01  1.15e-06  4.20e-11  1.39e-08  8.32e-12  1.54e-10  9.90e-01  
 17  +3.4836e-01  +3.4836e-01  1.16e-08  4.21e-13  1.39e-10  8.54e-14  1.58e-12  9.90e-01  
 18  +3.4836e-01  +3.4836e-01  1.15e-10  4.19e-15  1.39e-12  8.76e-16  1.62e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 222.8675ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:23 PM: Optimal value: 3.484e-01
(CVXPY) Aug 30 12:02:23 PM: Compilation took 4.382e-02 seconds
(CVXPY) Aug 30 12:02:23 PM: Solver (including time spent in interface) took 2.411e-01 seconds
FULL MODEL:
  Accruacy: 0.65174
  Our objective: 0.30347999999999997

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.30347999999999997)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.30347999999999997
    Its accruacy: 0.65174
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30347999999999997
  Highest accruacy: 0.65174
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

