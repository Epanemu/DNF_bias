Command:
python test_script.py -s smallest_subclass -d 7 -n 50 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 7.

Computed total variation: 0.76
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:10 PM: Your problem has 40 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 65
  nnz(P)        = 0
  nnz(A)        = 265
  cones (total) = 1
    : Nonnegative = 1,  numel = 65

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9478e-01  +2.5984e+01  2.55e+01  8.29e-01  6.41e+00  1.00e+00  1.07e+00   ------   
  1  +5.7724e-01  +5.6537e+00  5.08e+00  3.42e-01  3.62e+00  3.82e-03  5.82e-01  6.16e-01  
  2  +5.0381e-01  +1.1008e+00  5.97e-01  7.14e-02  9.17e-01  1.64e-02  2.01e-01  9.90e-01  
  3  +4.6652e-01  +7.8005e-01  3.14e-01  2.22e-02  2.99e-01  1.25e-02  7.41e-02  7.40e-01  
  4  +4.3877e-01  +5.2980e-01  9.10e-02  5.53e-03  7.46e-02  3.34e-03  2.10e-02  7.38e-01  
  5  +4.3046e-01  +4.8074e-01  5.03e-02  2.74e-03  3.70e-02  1.57e-03  1.11e-02  6.06e-01  
  6  +4.2107e-01  +4.2513e-01  4.06e-03  2.11e-04  2.85e-03  1.17e-04  9.23e-04  9.23e-01  
  7  +4.2011e-01  +4.2015e-01  4.23e-05  2.20e-06  2.96e-05  1.19e-06  9.68e-06  9.90e-01  
  8  +4.2010e-01  +4.2010e-01  4.23e-07  2.20e-08  2.96e-07  1.19e-08  9.68e-08  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  4.23e-09  2.20e-10  2.96e-09  1.19e-10  9.68e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 344.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:10 PM: Optimal value: 4.201e-01
(CVXPY) Aug 30 12:12:10 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:12:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:10 PM: Your problem has 50 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 50
  constraints   = 75
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 75

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8901e-01  +2.6504e+01  2.60e+01  8.41e-01  6.31e+00  1.00e+00  1.09e+00   ------   
  1  +5.3737e-01  +5.7366e+00  5.20e+00  3.52e-01  3.45e+00  3.87e-03  5.86e-01  6.17e-01  
  2  +4.5639e-01  +1.2721e+00  8.16e-01  8.02e-02  1.01e+00  1.79e-02  2.17e-01  9.15e-01  
  3  +3.8539e-01  +6.9671e-01  3.11e-01  2.11e-02  2.69e-01  7.19e-03  6.98e-02  7.90e-01  
  4  +3.5419e-01  +5.0443e-01  1.50e-01  8.01e-03  1.06e-01  3.69e-03  2.90e-02  6.92e-01  
  5  +3.3016e-01  +3.7048e-01  4.03e-02  1.93e-03  2.60e-02  8.25e-04  7.65e-03  8.11e-01  
  6  +3.2088e-01  +3.2288e-01  2.00e-03  9.57e-05  1.29e-03  2.09e-05  3.94e-04  9.78e-01  
  7  +3.2032e-01  +3.2039e-01  6.92e-05  3.39e-06  4.52e-05  2.96e-07  1.45e-05  9.63e-01  
  8  +3.2030e-01  +3.2030e-01  1.42e-06  7.06e-08  9.34e-07  6.91e-09  3.12e-07  9.79e-01  
  9  +3.2030e-01  +3.2030e-01  1.42e-08  7.06e-10  9.34e-09  6.91e-11  3.12e-09  9.90e-01  
 10  +3.2030e-01  +3.2030e-01  1.42e-10  7.07e-12  9.35e-11  6.91e-13  3.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 363.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:10 PM: Optimal value: 3.203e-01
(CVXPY) Aug 30 12:12:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:10 PM: Your problem has 60 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 85
  nnz(P)        = 0
  nnz(A)        = 373
  cones (total) = 1
    : Nonnegative = 1,  numel = 85

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8237e-01  +2.6517e+01  2.60e+01  8.50e-01  6.22e+00  1.00e+00  1.09e+00   ------   
  1  +5.0917e-01  +5.7527e+00  5.24e+00  3.66e-01  3.36e+00  3.88e-03  5.89e-01  6.12e-01  
  2  +4.2201e-01  +1.3669e+00  9.45e-01  8.32e-02  1.04e+00  1.99e-02  2.14e-01  9.05e-01  
  3  +3.0325e-01  +7.3064e-01  4.27e-01  2.20e-02  2.82e-01  1.27e-02  6.86e-02  7.55e-01  
  4  +2.3544e-01  +3.8375e-01  1.48e-01  6.64e-03  8.68e-02  3.65e-03  2.26e-02  7.46e-01  
  5  +1.9309e-01  +2.2542e-01  3.23e-02  1.34e-03  1.78e-02  7.03e-04  4.84e-03  8.21e-01  
  6  +1.8095e-01  +1.8180e-01  8.54e-04  3.54e-05  4.69e-04  1.42e-05  1.31e-04  9.74e-01  
  7  +1.8062e-01  +1.8065e-01  3.08e-05  1.35e-06  1.75e-05  1.47e-07  5.24e-06  9.60e-01  
  8  +1.8060e-01  +1.8060e-01  3.20e-07  1.42e-08  1.82e-07  1.63e-09  5.60e-08  9.89e-01  
  9  +1.8060e-01  +1.8060e-01  3.20e-09  1.42e-10  1.82e-09  1.64e-11  5.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 527.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:10 PM: Optimal value: 1.806e-01
(CVXPY) Aug 30 12:12:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:10 PM: Your problem has 61 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 86
  nnz(P)        = 0
  nnz(A)        = 379
  cones (total) = 1
    : Nonnegative = 1,  numel = 86

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7877e-01  +2.7017e+01  2.65e+01  8.51e-01  6.23e+00  1.00e+00  1.11e+00   ------   
  1  +4.9330e-01  +5.8206e+00  5.33e+00  3.65e-01  3.37e+00  3.87e-03  5.98e-01  6.14e-01  
  2  +3.8665e-01  +1.5135e+00  1.13e+00  8.86e-02  1.10e+00  2.03e-02  2.24e-01  8.63e-01  
  3  +2.6331e-01  +6.5398e-01  3.91e-01  2.12e-02  2.73e-01  8.72e-03  6.55e-02  7.91e-01  
  4  +2.0645e-01  +3.4076e-01  1.34e-01  6.58e-03  8.73e-02  2.94e-03  2.27e-02  7.03e-01  
  5  +1.7568e-01  +2.2003e-01  4.44e-02  2.01e-03  2.73e-02  9.14e-04  7.39e-03  7.17e-01  
  6  +1.6125e-01  +1.6272e-01  1.46e-03  6.58e-05  8.89e-04  2.23e-05  2.54e-04  9.68e-01  
  7  +1.6072e-01  +1.6077e-01  4.58e-05  2.15e-06  2.86e-05  2.40e-07  8.52e-06  9.66e-01  
  8  +1.6070e-01  +1.6070e-01  5.09e-07  2.45e-08  3.22e-07  2.89e-09  9.84e-08  9.89e-01  
  9  +1.6070e-01  +1.6070e-01  5.09e-09  2.45e-10  3.22e-09  2.89e-11  9.85e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0197ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:10 PM: Optimal value: 1.607e-01
(CVXPY) Aug 30 12:12:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:10 PM: Your problem has 71 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 96
  nnz(P)        = 0
  nnz(A)        = 413
  cones (total) = 1
    : Nonnegative = 1,  numel = 96

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7664e-01  +2.6968e+01  2.65e+01  8.58e-01  6.02e+00  1.00e+00  1.11e+00   ------   
  1  +4.6901e-01  +5.9022e+00  5.43e+00  3.75e-01  3.22e+00  3.95e-03  5.98e-01  6.05e-01  
  2  +3.3985e-01  +1.8390e+00  1.50e+00  1.10e-01  1.23e+00  2.09e-02  2.69e-01  7.63e-01  
  3  +2.1702e-01  +7.4772e-01  5.31e-01  3.03e-02  3.63e-01  9.17e-03  9.17e-02  7.78e-01  
  4  +1.6192e-01  +2.4001e-01  7.81e-02  4.45e-03  5.33e-02  1.23e-03  1.63e-02  8.61e-01  
  5  +1.4238e-01  +1.4865e-01  6.27e-03  3.58e-04  4.26e-03  4.56e-05  1.45e-03  9.81e-01  
  6  +1.4078e-01  +1.4129e-01  5.12e-04  2.97e-05  3.50e-04  2.78e-06  1.25e-04  9.14e-01  
  7  +1.4063e-01  +1.4072e-01  9.29e-05  5.48e-06  6.33e-05  5.85e-07  2.70e-05  9.43e-01  
  8  +1.4060e-01  +1.4060e-01  1.72e-06  1.02e-07  1.17e-06  9.76e-09  5.13e-07  9.81e-01  
  9  +1.4060e-01  +1.4060e-01  1.72e-08  1.02e-09  1.17e-08  9.76e-11  5.13e-09  9.90e-01  
 10  +1.4060e-01  +1.4060e-01  1.72e-10  1.02e-11  1.17e-10  9.76e-13  5.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 560.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:10 PM: Optimal value: 1.406e-01
(CVXPY) Aug 30 12:12:10 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:12:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:10 PM: Your problem has 81 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:10 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 435
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7456e-01  +2.6955e+01  2.65e+01  8.65e-01  5.79e+00  1.00e+00  1.11e+00   ------   
  1  +4.3745e-01  +5.9329e+00  5.50e+00  3.76e-01  3.04e+00  4.04e-03  5.90e-01  6.03e-01  
  2  +2.9700e-01  +1.7046e+00  1.41e+00  9.77e-02  1.05e+00  2.09e-02  2.46e-01  7.93e-01  
  3  +2.0960e-01  +7.4707e-01  5.37e-01  3.27e-02  3.68e-01  9.47e-03  9.65e-02  6.88e-01  
  4  +1.6076e-01  +2.5690e-01  9.61e-02  5.81e-03  6.55e-02  1.62e-03  1.97e-02  8.28e-01  
  5  +1.4389e-01  +1.5816e-01  1.43e-02  8.60e-04  9.68e-03  1.45e-04  3.02e-03  9.72e-01  
  6  +1.4086e-01  +1.4168e-01  8.18e-04  5.04e-05  5.60e-04  5.29e-06  1.84e-04  9.40e-01  
  7  +1.4068e-01  +1.4097e-01  2.89e-04  1.81e-05  1.96e-04  1.98e-06  8.15e-05  8.13e-01  
  8  +1.4061e-01  +1.4062e-01  1.82e-05  1.15e-06  1.24e-05  1.01e-07  5.52e-06  9.34e-01  
  9  +1.4060e-01  +1.4060e-01  1.97e-07  1.25e-08  1.34e-07  1.10e-09  6.06e-08  9.89e-01  
 10  +1.4060e-01  +1.4060e-01  1.98e-09  1.25e-10  1.34e-09  1.10e-11  6.06e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 424.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:10 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:10 PM: Optimal value: 1.406e-01
(CVXPY) Aug 30 12:12:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.1406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:11 PM: Your problem has 91 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 91
  constraints   = 116
  nnz(P)        = 0
  nnz(A)        = 469
  cones (total) = 1
    : Nonnegative = 1,  numel = 116

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7049e-01  +2.7240e+01  2.68e+01  8.71e-01  5.65e+00  1.00e+00  1.12e+00   ------   
  1  +3.9633e-01  +6.0050e+00  5.61e+00  3.77e-01  2.92e+00  4.12e-03  5.91e-01  6.00e-01  
  2  +2.1432e-01  +1.8163e+00  1.60e+00  9.88e-02  1.01e+00  2.05e-02  2.54e-01  7.56e-01  
  3  +1.6783e-01  +4.4084e-01  2.73e-01  1.83e-02  1.95e-01  5.26e-03  5.81e-02  8.20e-01  
  4  +1.3450e-01  +2.2274e-01  8.82e-02  5.90e-03  6.22e-02  1.58e-03  2.04e-02  7.16e-01  
  5  +1.2150e-01  +1.2588e-01  4.38e-03  2.96e-04  3.09e-03  6.74e-05  1.08e-03  9.49e-01  
  6  +1.2088e-01  +1.2162e-01  7.39e-04  5.18e-05  5.30e-04  8.61e-06  2.00e-04  8.26e-01  
  7  +1.2072e-01  +1.2079e-01  6.87e-05  4.96e-06  4.97e-05  2.86e-07  2.24e-05  9.79e-01  
  8  +1.2070e-01  +1.2070e-01  8.46e-07  6.14e-08  6.14e-07  3.29e-09  2.86e-07  9.88e-01  
  9  +1.2070e-01  +1.2070e-01  8.46e-09  6.14e-10  6.14e-09  3.29e-11  2.86e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 465.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:11 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:11 PM: Optimal value: 1.207e-01
(CVXPY) Aug 30 12:12:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.88
  Our objective: 0.76

IF 
    (x3 = 1 AND x1 = 0 AND x4 = 0)            <-- (term's our objective: 0.16000000000000003)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.16000000000000003)
 OR (x0 = 1 AND x2 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.16000000000000003)
 OR (x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.12)
 OR (x2 = 1 AND x5 = 1 AND x0 = 0 AND x3 = 0) <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x6 = 1) <-- (term's our objective: 0.040000000000000036)
 OR (x5 = 1 AND x6 = 1 AND x0 = 0 AND x3 = 0) <-- (term's our objective: 0.07999999999999996)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.039999999999999994)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.16000000000000003
    Its accruacy: 0.58
    Its hamming distance: 6
  Shortest hamming distance: 3
    Its our objective: 0.12
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

