Command:
python test_script.py -s smallest_subclass -d 1 -n 50000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.59356
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 1.

Computed total variation: 0.59356
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:01:19 PM: Your problem has 25003 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:01:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:01:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:01:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:01:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:01:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:01:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:01:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:01:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:01:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:01:19 PM: Finished problem compilation (took 3.848e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25003
  constraints   = 50003
  nnz(P)        = 0
  nnz(A)        = 100003
  cones (total) = 1
    : Nonnegative = 1,  numel = 50003

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0002e-01  +2.5002e+04  2.50e+04  9.92e-01  1.44e+02  1.00e+00  1.00e+00   ------   
  1  +6.6439e-01  +4.0377e+03  4.04e+03  2.22e-01  5.90e+01  4.90e-03  3.29e-01  7.58e-01  
  2  +5.5528e-01  +7.4799e+02  7.47e+02  1.34e-01  3.91e+01  4.08e-03  2.12e-01  4.92e-01  
  3  +5.0054e-01  +1.0807e+01  1.03e+01  2.95e-02  8.20e+00  6.18e-05  2.03e-01  3.17e-01  
  4  +4.9993e-01  +2.0039e+00  1.50e+00  4.41e-03  1.27e+00  4.20e-05  5.12e-02  9.78e-01  
  5  +4.9254e-01  +2.2495e+00  1.76e+00  7.05e-04  2.23e-01  1.66e-03  1.49e-03  9.77e-01  
  6  +4.1715e-01  +1.7838e+00  1.37e+00  5.64e-05  1.79e-02  1.58e-02  1.15e-04  9.23e-01  
  7  +3.1809e-01  +9.7488e-01  6.57e-01  3.78e-05  1.14e-02  8.90e-05  9.95e-05  2.75e-01  
  8  +2.3735e-01  +4.2604e-01  1.89e-01  1.16e-05  3.37e-03  5.36e-07  4.75e-05  6.14e-01  
  9  +2.0574e-01  +2.1922e-01  1.35e-02  8.39e-07  2.41e-04  3.69e-08  5.00e-06  9.30e-01  
 10  +2.0335e-01  +2.0350e-01  1.56e-04  9.69e-09  2.79e-06  4.26e-10  6.10e-08  9.88e-01  
 11  +2.0332e-01  +2.0332e-01  1.56e-06  9.69e-11  2.79e-08  4.26e-12  6.10e-10  9.90e-01  
 12  +2.0332e-01  +2.0332e-01  1.56e-08  9.69e-13  2.79e-10  4.27e-14  6.12e-12  9.90e-01  
 13  +2.0332e-01  +2.0332e-01  1.56e-10  9.69e-15  2.79e-12  4.30e-16  6.15e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.9712ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:01:19 PM: Optimal value: 2.033e-01
(CVXPY) Aug 30 12:01:19 PM: Compilation took 3.848e-02 seconds
(CVXPY) Aug 30 12:01:19 PM: Solver (including time spent in interface) took 1.369e-01 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.79678
  Our objective: 0.59356

IF 
    (x0 = 0) <-- (term's our objective: 0.59356)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.59356
    Its accruacy: 0.79678
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.59356
  Highest accruacy: 0.79678
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

