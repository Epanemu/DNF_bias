Command:
python test_script.py -s smallest_subclass -d 4 -n 10000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0744
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.082
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:56 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:56 PM: Finished problem compilation (took 1.002e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.84e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +6.0819e-01  +9.6886e+02  9.68e+02  3.38e-01  4.77e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5105e-01  +1.5093e+02  1.50e+02  1.40e-01  2.42e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1091e-01  +3.2832e+01  3.23e+01  1.12e-01  1.89e+01  1.78e-05  2.25e-01  6.41e-02  
  4  +5.0006e-01  +1.0357e+00  5.36e-01  3.59e-03  6.16e-01  3.59e-06  1.45e-01  9.90e-01  
  5  +5.0001e-01  +5.8050e-01  8.05e-02  5.38e-04  9.27e-02  5.36e-07  2.69e-02  8.23e-01  
  6  +4.9998e-01  +5.7574e-01  7.58e-02  4.99e-04  8.61e-02  1.19e-06  8.31e-03  7.57e-01  
  7  +4.9765e-01  +5.7472e-01  7.71e-02  5.01e-05  8.67e-03  5.43e-05  1.59e-04  9.87e-01  
  8  +4.9158e-01  +5.3712e-01  4.55e-02  1.19e-05  2.07e-03  9.50e-05  3.81e-05  7.74e-01  
  9  +4.8354e-01  +4.9384e-01  1.03e-02  2.41e-06  4.17e-04  9.35e-07  8.78e-06  8.73e-01  
 10  +4.8021e-01  +4.8132e-01  1.12e-03  2.29e-07  3.96e-05  8.46e-08  9.33e-07  9.04e-01  
 11  +4.7980e-01  +4.7982e-01  1.25e-05  2.54e-09  4.39e-07  8.93e-10  1.05e-08  9.90e-01  
 12  +4.7980e-01  +4.7980e-01  1.25e-07  2.54e-11  4.39e-09  8.93e-12  1.05e-10  9.90e-01  
 13  +4.7980e-01  +4.7980e-01  1.26e-09  2.54e-13  4.40e-11  9.40e-14  1.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.1297ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:56 PM: Optimal value: 4.798e-01
(CVXPY) Aug 30 12:04:56 PM: Compilation took 1.002e-02 seconds
(CVXPY) Aug 30 12:04:56 PM: Solver (including time spent in interface) took 3.997e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:56 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:56 PM: Finished problem compilation (took 1.528e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 45759
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0011e+03  5.00e+03  9.84e-01  9.27e+01  1.00e+00  1.00e+00   ------   
  1  +6.0796e-01  +9.7057e+02  9.70e+02  3.40e-01  5.16e+01  4.09e-03  4.75e-01  6.66e-01  
  2  +5.5073e-01  +1.5037e+02  1.50e+02  1.40e-01  2.61e+01  8.32e-03  2.29e-01  7.27e-01  
  3  +5.1078e-01  +3.2592e+01  3.21e+01  1.12e-01  2.04e+01  1.80e-05  2.26e-01  6.68e-02  
  4  +5.0035e-01  +1.9436e+00  1.44e+00  9.70e-03  1.77e+00  4.25e-06  1.86e-01  4.84e-01  
  5  +5.0006e-01  +7.9855e-01  2.98e-01  2.00e-03  3.70e-01  1.19e-06  7.57e-02  6.68e-01  
  6  +5.0003e-01  +7.0441e-01  2.04e-01  1.37e-03  2.54e-01  9.73e-07  4.24e-02  5.06e-01  
  7  +5.0004e-01  +7.2380e-01  2.24e-01  1.50e-03  2.78e-01  9.22e-07  4.08e-02  2.41e-01  
  8  +4.9997e-01  +6.2621e-01  1.26e-01  8.12e-04  1.51e-01  1.49e-06  8.22e-03  8.70e-01  
  9  +4.9914e-01  +6.2119e-01  1.22e-01  1.97e-04  3.69e-02  1.69e-05  6.31e-04  9.25e-01  
 10  +4.9904e-01  +6.0929e-01  1.10e-01  1.17e-04  2.19e-02  9.11e-06  3.58e-04  9.90e-01  
 11  +4.9754e-01  +5.9601e-01  9.85e-02  5.23e-05  9.79e-03  1.09e-05  1.56e-04  9.04e-01  
 12  +4.9629e-01  +5.8856e-01  9.23e-02  4.14e-05  7.74e-03  2.93e-06  1.32e-04  8.59e-01  
 13  +4.9613e-01  +5.8834e-01  9.22e-02  4.09e-05  7.65e-03  2.87e-06  1.30e-04  1.26e-01  
 14  +4.9540e-01  +5.8453e-01  8.91e-02  3.38e-05  6.32e-03  3.07e-06  1.06e-04  2.61e-01  
 15  +4.9485e-01  +5.8051e-01  8.57e-02  3.42e-05  6.40e-03  2.77e-06  1.06e-04  1.17e-01  
 16  +4.9362e-01  +5.7302e-01  7.94e-02  2.77e-05  5.18e-03  2.82e-06  8.40e-05  2.65e-01  
 17  +4.9327e-01  +5.7167e-01  7.84e-02  2.75e-05  5.14e-03  2.72e-06  8.36e-05  1.03e-01  
 18  +4.9299e-01  +5.7111e-01  7.81e-02  2.51e-05  4.70e-03  2.85e-06  7.46e-05  2.95e-01  
 19  +4.9305e-01  +5.7188e-01  7.88e-02  2.45e-05  4.58e-03  2.95e-06  7.17e-05  2.05e-01  
 20  +4.9315e-01  +5.7307e-01  7.99e-02  2.33e-05  4.36e-03  3.13e-06  6.76e-05  2.82e-01  
 21  +4.9316e-01  +5.7331e-01  8.02e-02  2.27e-05  4.25e-03  3.21e-06  6.56e-05  1.88e-01  
 22  +4.9335e-01  +5.7491e-01  8.16e-02  2.11e-05  3.94e-03  3.54e-06  6.03e-05  5.18e-01  
 23  +4.9064e-01  +5.6363e-01  7.30e-02  1.48e-05  2.76e-03  3.89e-06  4.20e-05  7.47e-01  
 24  +4.8962e-01  +5.5838e-01  6.88e-02  1.43e-05  2.68e-03  3.52e-06  4.11e-05  1.39e-01  
 25  +4.8855e-01  +5.5452e-01  6.60e-02  1.41e-05  2.63e-03  3.30e-06  4.05e-05  1.07e-01  
 26  +4.8699e-01  +5.4784e-01  6.08e-02  1.20e-05  2.25e-03  3.31e-06  3.45e-05  7.40e-01  
 27  +4.8329e-01  +5.3418e-01  5.09e-02  9.44e-06  1.76e-03  2.92e-06  2.75e-05  9.90e-01  
 28  +4.7318e-01  +4.9786e-01  2.47e-02  4.02e-06  7.50e-04  1.40e-06  1.19e-05  6.38e-01  
 29  +4.6760e-01  +4.7902e-01  1.14e-02  1.75e-06  3.27e-04  6.54e-07  5.23e-06  5.83e-01  
 30  +4.6299e-01  +4.6318e-01  1.96e-04  2.91e-08  5.43e-06  9.85e-09  8.77e-08  9.90e-01  
 31  +4.6290e-01  +4.6290e-01  1.96e-06  2.91e-10  5.43e-08  9.85e-11  8.77e-10  9.90e-01  
 32  +4.6290e-01  +4.6290e-01  1.96e-08  2.91e-12  5.43e-10  1.00e-12  8.90e-12  9.90e-01  
 33  +4.6290e-01  +4.6290e-01  1.96e-10  2.91e-14  5.43e-12  1.02e-14  9.04e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 89.4474ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:56 PM: Optimal value: 4.629e-01
(CVXPY) Aug 30 12:04:56 PM: Compilation took 1.528e-02 seconds
(CVXPY) Aug 30 12:04:56 PM: Solver (including time spent in interface) took 8.993e-02 seconds
Iteration: 2, Objective: 0.4629
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:56 PM: Your problem has 5023 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:57 PM: Finished problem compilation (took 1.471e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5023
  constraints   = 10023
  nnz(P)        = 0
  nnz(A)        = 48562
  cones (total) = 1
    : Nonnegative = 1,  numel = 10023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0010e+03  5.00e+03  9.85e-01  9.39e+01  1.00e+00  1.03e+00   ------   
  1  +6.0824e-01  +9.7650e+02  9.76e+02  3.47e-01  5.24e+01  4.05e-03  4.98e-01  6.61e-01  
  2  +5.5057e-01  +1.5097e+02  1.50e+02  1.45e-01  2.66e+01  8.72e-03  2.42e-01  7.29e-01  
  3  +5.1048e-01  +3.1888e+01  3.14e+01  1.14e-01  2.05e+01  1.84e-05  2.39e-01  7.35e-02  
  4  +5.0036e-01  +1.9671e+00  1.47e+00  1.02e-02  1.83e+00  4.31e-06  1.96e-01  4.85e-01  
  5  +5.0003e-01  +7.1617e-01  2.16e-01  1.49e-03  2.72e-01  1.02e-06  6.24e-02  7.73e-01  
  6  +5.0003e-01  +7.1124e-01  2.11e-01  1.46e-03  2.65e-01  1.07e-06  4.46e-02  4.38e-01  
  7  +5.0005e-01  +7.3936e-01  2.39e-01  1.65e-03  3.00e-01  9.77e-07  4.01e-02  3.97e-01  
  8  +4.9996e-01  +6.1551e-01  1.16e-01  7.44e-04  1.36e-01  1.76e-06  6.42e-03  8.69e-01  
  9  +4.9887e-01  +6.1100e-01  1.12e-01  1.43e-04  2.62e-02  2.23e-05  4.59e-04  9.30e-01  
 10  +4.9893e-01  +6.1115e-01  1.12e-01  1.10e-04  2.02e-02  1.62e-05  3.45e-04  6.79e-01  
 11  +4.9895e-01  +6.1107e-01  1.12e-01  1.09e-04  2.00e-02  1.52e-05  3.40e-04  8.15e-02  
 12  +4.9850e-01  +6.0850e-01  1.10e-01  8.20e-05  1.51e-02  1.84e-05  2.54e-04  3.13e-01  
 13  +4.9862e-01  +6.0900e-01  1.10e-01  8.04e-05  1.48e-02  1.48e-05  2.49e-04  2.41e-01  
 14  +4.9827e-01  +6.0729e-01  1.09e-01  6.69e-05  1.23e-02  1.64e-05  2.06e-04  2.22e-01  
 15  +4.9825e-01  +6.0627e-01  1.08e-01  6.67e-05  1.23e-02  1.40e-05  2.04e-04  1.56e-01  
 16  +4.9819e-01  +6.0432e-01  1.06e-01  6.59e-05  1.21e-02  1.24e-05  2.03e-04  1.03e-01  
 17  +4.9745e-01  +6.0196e-01  1.05e-01  4.85e-05  8.94e-03  1.46e-05  1.49e-04  3.61e-01  
 18  +4.9685e-01  +5.9978e-01  1.03e-01  4.13e-05  7.60e-03  1.20e-05  1.26e-04  4.62e-01  
 19  +4.9655e-01  +5.9859e-01  1.02e-01  3.92e-05  7.22e-03  1.17e-05  1.20e-04  1.10e-01  
 20  +4.9605e-01  +5.9455e-01  9.85e-02  3.76e-05  6.93e-03  6.98e-06  1.16e-04  4.73e-01  
 21  +4.9588e-01  +5.9427e-01  9.84e-02  3.62e-05  6.67e-03  6.85e-06  1.11e-04  1.16e-01  
 22  +4.9303e-01  +5.8341e-01  9.04e-02  2.62e-05  4.82e-03  5.93e-06  8.04e-05  6.04e-01  
 23  +4.8865e-01  +5.6526e-01  7.66e-02  1.98e-05  3.64e-03  4.33e-06  6.12e-05  5.39e-01  
 24  +4.8439e-01  +5.4795e-01  6.36e-02  1.50e-05  2.75e-03  3.63e-06  4.66e-05  2.89e-01  
 25  +4.8392e-01  +5.4601e-01  6.21e-02  1.40e-05  2.56e-03  3.38e-06  4.30e-05  4.55e-01  
 26  +4.8117e-01  +5.3593e-01  5.48e-02  1.13e-05  2.07e-03  3.00e-06  3.48e-05  5.23e-01  
 27  +4.7940e-01  +5.2975e-01  5.03e-02  9.94e-06  1.83e-03  2.80e-06  3.08e-05  2.45e-01  
 28  +4.7402e-01  +5.0966e-01  3.56e-02  6.50e-06  1.19e-03  2.13e-06  2.04e-05  9.17e-01  
 29  +4.7272e-01  +5.0519e-01  3.25e-02  5.89e-06  1.08e-03  1.95e-06  1.86e-05  1.92e-01  
 30  +4.6483e-01  +4.7853e-01  1.37e-02  2.31e-06  4.24e-04  8.44e-07  7.46e-06  7.78e-01  
 31  +4.5970e-01  +4.6083e-01  1.13e-03  1.87e-07  3.43e-05  6.51e-08  6.19e-07  9.34e-01  
 32  +4.5921e-01  +4.5923e-01  1.72e-05  2.84e-09  5.22e-07  9.33e-10  9.53e-09  9.87e-01  
 33  +4.5920e-01  +4.5920e-01  1.72e-07  2.84e-11  5.22e-09  9.33e-12  9.53e-11  9.90e-01  
 34  +4.5920e-01  +4.5920e-01  1.72e-09  2.84e-13  5.22e-11  9.33e-14  9.53e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 91.9111ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:57 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:57 PM: Optimal value: 4.592e-01
(CVXPY) Aug 30 12:04:57 PM: Compilation took 1.471e-02 seconds
(CVXPY) Aug 30 12:04:57 PM: Solver (including time spent in interface) took 1.002e-01 seconds
FULL MODEL:
  Accruacy: 0.541
  Our objective: 0.08199999999999999

IF 
    (x0 = 1 AND x1 = 1 AND x2 = 1)            <-- (term's our objective: 0.007599999999999954)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.07440000000000005)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.07440000000000005
    Its accruacy: 0.5372
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.07440000000000005
  Highest accruacy: 0.5372
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

