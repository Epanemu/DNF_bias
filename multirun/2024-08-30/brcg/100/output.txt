Command:
python test_script.py -s smallest_subclass -d 3 -n 1000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.158
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 3.

Computed total variation: 0.16599999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:02 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:02 PM: Finished problem compilation (took 3.886e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 3007
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9970e-01  +5.0072e+02  5.00e+02  9.50e-01  2.42e+01  1.00e+00  1.00e+00   ------   
  1  +6.1963e-01  +9.3117e+01  9.25e+01  2.96e-01  1.25e+01  4.25e-03  4.37e-01  6.94e-01  
  2  +5.5422e-01  +1.5991e+01  1.54e+01  1.20e-01  5.99e+00  6.78e-03  2.16e-01  6.77e-01  
  3  +5.0142e-01  +1.5762e+00  1.07e+00  2.24e-02  1.07e+00  4.81e-04  2.04e-01  3.08e-01  
  4  +5.0025e-01  +6.8392e-01  1.84e-01  3.87e-03  1.90e-01  8.31e-05  4.79e-02  8.15e-01  
  5  +4.9376e-01  +9.5371e-01  4.60e-01  1.80e-03  9.01e-02  1.33e-03  5.54e-03  9.86e-01  
  6  +4.8000e-01  +6.8735e-01  2.07e-01  4.70e-04  2.35e-02  1.04e-03  1.47e-03  7.69e-01  
  7  +4.6191e-01  +5.0090e-01  3.90e-02  8.89e-05  4.43e-03  3.11e-05  3.15e-04  9.46e-01  
  8  +4.5091e-01  +4.5320e-01  2.29e-03  4.62e-06  2.30e-04  1.12e-06  1.95e-05  9.70e-01  
  9  +4.5011e-01  +4.5013e-01  2.46e-05  4.95e-08  2.46e-06  1.20e-08  2.11e-07  9.89e-01  
 10  +4.5010e-01  +4.5010e-01  2.46e-07  4.95e-10  2.46e-08  1.20e-10  2.11e-09  9.90e-01  
 11  +4.5010e-01  +4.5010e-01  2.46e-09  4.95e-12  2.46e-10  1.20e-12  2.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0684ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:02 PM: Optimal value: 4.501e-01
(CVXPY) Aug 30 12:03:02 PM: Compilation took 3.886e-03 seconds
(CVXPY) Aug 30 12:03:02 PM: Solver (including time spent in interface) took 3.098e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:02 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:02 PM: Finished problem compilation (took 2.968e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 3595
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0118e+02  5.01e+02  9.50e-01  2.58e+01  1.00e+00  1.02e+00   ------   
  1  +6.1780e-01  +9.3941e+01  9.33e+01  3.02e-01  1.33e+01  4.22e-03  4.52e-01  6.89e-01  
  2  +5.5270e-01  +1.5717e+01  1.52e+01  1.20e-01  6.27e+00  7.16e-03  2.19e-01  6.95e-01  
  3  +5.0159e-01  +1.7119e+00  1.21e+00  2.56e-02  1.28e+00  6.77e-04  2.05e-01  3.25e-01  
  4  +5.0031e-01  +8.1474e-01  3.14e-01  6.73e-03  3.46e-01  1.99e-04  6.57e-02  7.11e-01  
  5  +4.9579e-01  +7.6648e-01  2.71e-01  2.20e-03  1.15e-01  1.05e-03  6.89e-03  9.90e-01  
  6  +4.8365e-01  +6.5854e-01  1.75e-01  5.72e-04  3.02e-02  1.95e-03  1.71e-03  7.63e-01  
  7  +4.7740e-01  +6.2107e-01  1.44e-01  3.41e-04  1.80e-02  1.42e-03  1.02e-03  7.14e-01  
  8  +4.7060e-01  +5.9403e-01  1.23e-01  2.81e-04  1.48e-02  9.26e-04  8.57e-04  3.20e-01  
  9  +4.6946e-01  +5.8639e-01  1.17e-01  2.76e-04  1.45e-02  7.92e-04  8.55e-04  3.98e-02  
 10  +4.5482e-01  +5.3537e-01  8.05e-02  1.63e-04  8.56e-03  5.17e-04  5.19e-04  4.42e-01  
 11  +4.5589e-01  +5.4213e-01  8.62e-02  1.66e-04  8.72e-03  5.16e-04  5.13e-04  1.46e-01  
 12  +4.2896e-01  +4.4680e-01  1.78e-02  2.99e-05  1.57e-03  5.67e-05  9.83e-05  8.48e-01  
 13  +4.2722e-01  +4.4109e-01  1.39e-02  2.21e-05  1.16e-03  4.52e-05  7.23e-05  2.85e-01  
 14  +4.2578e-01  +4.3580e-01  1.00e-02  1.70e-05  8.88e-04  4.54e-06  5.76e-05  9.81e-01  
 15  +4.2294e-01  +4.2654e-01  3.60e-03  5.86e-06  3.06e-04  1.97e-06  1.95e-05  7.10e-01  
 16  +4.2117e-01  +4.2133e-01  1.58e-04  2.51e-07  1.31e-05  7.69e-08  8.37e-07  9.90e-01  
 17  +4.2110e-01  +4.2110e-01  1.66e-06  2.63e-09  1.38e-07  8.17e-10  8.79e-09  9.90e-01  
 18  +4.2110e-01  +4.2110e-01  1.66e-08  2.63e-11  1.38e-09  8.17e-12  8.79e-11  9.90e-01  
 19  +4.2110e-01  +4.2110e-01  1.66e-10  2.64e-13  1.38e-11  8.29e-14  8.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.1313ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:02 PM: Optimal value: 4.211e-01
(CVXPY) Aug 30 12:03:02 PM: Compilation took 2.968e-03 seconds
(CVXPY) Aug 30 12:03:02 PM: Solver (including time spent in interface) took 4.041e-03 seconds
Iteration: 2, Objective: 0.4211
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:02 PM: Your problem has 512 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:02 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 512
  constraints   = 1012
  nnz(P)        = 0
  nnz(A)        = 3668
  cones (total) = 1
    : Nonnegative = 1,  numel = 1012

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0095e+02  5.00e+02  9.51e-01  2.59e+01  1.00e+00  1.03e+00   ------   
  1  +6.1814e-01  +9.4051e+01  9.34e+01  3.05e-01  1.34e+01  4.20e-03  4.60e-01  6.87e-01  
  2  +5.5265e-01  +1.5724e+01  1.52e+01  1.21e-01  6.28e+00  7.26e-03  2.24e-01  6.95e-01  
  3  +5.0101e-01  +1.5601e+00  1.06e+00  2.27e-02  1.13e+00  6.43e-04  2.07e-01  3.79e-01  
  4  +5.0026e-01  +9.3920e-01  4.39e-01  9.44e-03  4.78e-01  2.99e-04  9.23e-02  5.60e-01  
  5  +5.0017e-01  +9.7980e-01  4.80e-01  1.00e-02  5.09e-01  3.46e-04  7.16e-02  3.88e-01  
  6  +4.9888e-01  +9.1874e-01  4.20e-01  6.74e-03  3.46e-01  5.37e-04  2.78e-02  6.99e-01  
  7  +4.9201e-01  +8.5036e-01  3.58e-01  2.04e-03  1.06e-01  1.62e-03  6.35e-03  7.76e-01  
  8  +4.8950e-01  +7.8907e-01  3.00e-01  1.16e-03  6.05e-02  1.22e-03  3.48e-03  7.48e-01  
  9  +4.8887e-01  +7.5255e-01  2.64e-01  9.60e-04  5.02e-02  4.99e-04  2.89e-03  5.97e-01  
 10  +4.7128e-01  +6.4882e-01  1.78e-01  4.18e-04  2.18e-02  3.94e-04  1.30e-03  6.93e-01  
 11  +4.6453e-01  +6.1582e-01  1.51e-01  3.47e-04  1.81e-02  2.31e-04  1.10e-03  3.96e-01  
 12  +4.4707e-01  +5.3956e-01  9.25e-02  1.93e-04  1.00e-02  1.16e-04  6.45e-04  5.03e-01  
 13  +4.2165e-01  +4.3126e-01  9.61e-03  1.86e-05  9.62e-04  1.84e-06  6.86e-05  9.21e-01  
 14  +4.2169e-01  +4.3190e-01  1.02e-02  1.82e-05  9.42e-04  2.33e-06  6.49e-05  9.87e-02  
 15  +4.2076e-01  +4.2864e-01  7.88e-03  1.55e-05  8.00e-04  2.46e-06  6.22e-05  3.46e-01  
 16  +4.2067e-01  +4.2830e-01  7.63e-03  1.50e-05  7.74e-04  2.43e-06  6.01e-05  5.57e-02  
 17  +4.1979e-01  +4.2493e-01  5.14e-03  1.00e-05  5.19e-04  2.00e-06  3.92e-05  5.01e-01  
 18  +4.1911e-01  +4.2408e-01  4.97e-03  8.80e-06  4.55e-04  2.36e-06  3.23e-05  4.44e-01  
 19  +4.1724e-01  +4.1734e-01  9.73e-05  1.72e-07  8.91e-06  4.36e-08  6.43e-07  9.80e-01  
 20  +4.1720e-01  +4.1720e-01  9.73e-07  1.72e-09  8.91e-08  4.36e-10  6.43e-09  9.90e-01  
 21  +4.1720e-01  +4.1720e-01  9.73e-09  1.72e-11  8.91e-10  4.36e-12  6.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.84ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:02 PM: Optimal value: 4.172e-01
(CVXPY) Aug 30 12:03:02 PM: Compilation took 2.999e-03 seconds
(CVXPY) Aug 30 12:03:02 PM: Solver (including time spent in interface) took 4.508e-03 seconds
FULL MODEL:
  Accruacy: 0.583
  Our objective: 0.16599999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.15799999999999997)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1) <-- (term's our objective: 0.008000000000000007)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.15799999999999997
    Its accruacy: 0.579
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15799999999999997
  Highest accruacy: 0.579
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

