Command:
python test_script.py -s smallest_subclass -d 8 -n 50000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0046
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 8.

Computed total variation: 0.05824
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:17 PM: Your problem has 25017 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:17 PM: Finished problem compilation (took 1.000e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25017
  constraints   = 50017
  nnz(P)        = 0
  nnz(A)        = 275017
  cones (total) = 1
    : Nonnegative = 1,  numel = 50017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3498e-01  +6.3201e+02  6.31e+02  1.70e-01  8.22e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0962e-01  +1.6465e+02  1.64e+02  1.47e-01  7.15e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5934e+01  1.54e+01  4.30e-02  2.06e+01  4.76e-06  1.96e-01  4.42e-01  
  5  +4.9999e-01  +1.0079e+00  5.08e-01  1.52e-03  7.55e-01  2.33e-05  1.91e-01  2.68e-01  
  6  +5.0000e-01  +5.3502e-01  3.50e-02  1.04e-04  5.21e-02  1.34e-06  1.37e-02  9.28e-01  
  7  +5.0000e-01  +5.2740e-01  2.74e-02  8.17e-05  4.08e-02  1.17e-06  8.80e-03  4.00e-01  
  8  +5.0000e-01  +5.1636e-01  1.64e-02  4.87e-05  2.43e-02  1.32e-06  2.64e-03  7.57e-01  
  9  +4.9993e-01  +5.2504e-01  2.51e-02  3.33e-05  1.67e-02  3.35e-05  1.32e-04  9.87e-01  
 10  +4.9842e-01  +5.1913e-01  2.07e-02  1.39e-06  6.96e-04  7.59e-04  4.48e-06  9.66e-01  
 11  +4.9768e-01  +5.0922e-01  1.15e-02  6.49e-07  3.24e-04  3.31e-04  2.16e-06  6.20e-01  
 12  +4.9728e-01  +5.0472e-01  7.44e-03  3.77e-07  1.88e-04  8.64e-05  1.32e-06  6.80e-01  
 13  +4.9599e-01  +4.9833e-01  2.34e-03  1.00e-07  5.01e-05  9.46e-07  3.84e-07  9.38e-01  
 14  +4.9569e-01  +4.9712e-01  1.43e-03  5.89e-08  2.95e-05  1.22e-08  2.30e-07  9.90e-01  
 15  +4.9525e-01  +4.9543e-01  1.83e-04  7.36e-09  3.68e-06  1.56e-09  2.96e-08  8.84e-01  
 16  +4.9519e-01  +4.9520e-01  1.69e-05  6.78e-10  3.39e-07  1.65e-10  2.74e-09  9.90e-01  
 17  +4.9518e-01  +4.9518e-01  1.69e-07  6.79e-12  3.39e-09  1.65e-12  2.74e-11  9.90e-01  
 18  +4.9518e-01  +4.9518e-01  1.70e-09  6.83e-14  3.42e-11  2.21e-14  3.63e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 340.1819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:17 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:17 PM: Optimal value: 4.952e-01
(CVXPY) Aug 30 12:22:17 PM: Compilation took 1.000e-01 seconds
(CVXPY) Aug 30 12:22:17 PM: Solver (including time spent in interface) took 3.635e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4952
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:17 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:17 PM: Finished problem compilation (took 1.059e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 291403
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3497e-01  +6.3195e+02  6.31e+02  1.70e-01  8.26e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0962e-01  +1.6463e+02  1.64e+02  1.47e-01  7.18e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5931e+01  1.54e+01  4.30e-02  2.07e+01  4.76e-06  1.96e-01  4.42e-01  
  5  +5.0001e-01  +1.2049e+00  7.05e-01  2.11e-03  1.05e+00  2.31e-05  1.92e-01  1.94e-01  
  6  +5.0000e-01  +5.9120e-01  9.12e-02  2.72e-04  1.36e-01  1.78e-06  3.24e-02  8.37e-01  
  7  +5.0000e-01  +5.5843e-01  5.84e-02  1.74e-04  8.74e-02  1.01e-06  1.96e-02  5.37e-01  
  8  +5.0000e-01  +5.4086e-01  4.09e-02  1.22e-04  6.11e-02  7.44e-07  1.17e-02  4.64e-01  
  9  +5.0000e-01  +5.4123e-01  4.12e-02  1.23e-04  6.17e-02  7.27e-07  1.17e-02  3.82e-02  
 10  +5.0000e-01  +5.3320e-01  3.32e-02  9.89e-05  4.96e-02  6.08e-07  6.03e-03  6.83e-01  
 11  +5.0000e-01  +5.1726e-01  1.73e-02  4.86e-05  2.44e-02  2.31e-06  5.36e-04  9.47e-01  
 12  +4.9971e-01  +5.1743e-01  1.77e-02  2.59e-06  1.30e-03  1.45e-04  8.60e-06  9.85e-01  
 13  +4.9889e-01  +5.1466e-01  1.58e-02  8.25e-07  4.15e-04  3.59e-04  2.72e-06  7.09e-01  
 14  +4.9876e-01  +5.1402e-01  1.53e-02  7.98e-07  4.01e-04  3.11e-04  2.63e-06  1.17e-01  
 15  +4.9851e-01  +5.1262e-01  1.41e-02  7.65e-07  3.85e-04  2.17e-04  2.53e-06  2.00e-01  
 16  +4.9823e-01  +5.1097e-01  1.27e-02  7.48e-07  3.76e-04  1.39e-04  2.50e-06  1.73e-01  
 17  +4.9689e-01  +5.0421e-01  7.32e-03  4.11e-07  2.07e-04  2.09e-05  1.43e-06  7.15e-01  
 18  +4.9578e-01  +4.9884e-01  3.06e-03  1.52e-07  7.62e-05  8.55e-07  5.41e-07  9.23e-01  
 19  +4.9567e-01  +4.9832e-01  2.65e-03  1.22e-07  6.12e-05  2.35e-07  4.46e-07  7.85e-01  
 20  +4.9559e-01  +4.9796e-01  2.37e-03  1.18e-07  5.95e-05  8.07e-08  4.28e-07  6.19e-01  
 21  +4.9512e-01  +4.9568e-01  5.58e-04  2.71e-08  1.36e-05  1.58e-08  1.05e-07  7.89e-01  
 22  +4.9508e-01  +4.9552e-01  4.40e-04  1.97e-08  9.88e-06  1.19e-08  7.63e-08  4.11e-01  
 23  +4.9505e-01  +4.9542e-01  3.68e-04  1.77e-08  8.89e-06  7.73e-09  7.76e-08  3.85e-02  
 24  +4.9505e-01  +4.9540e-01  3.55e-04  1.69e-08  8.48e-06  6.80e-09  7.32e-08  2.39e-01  
 25  +4.9500e-01  +4.9519e-01  1.84e-04  8.44e-09  4.25e-06  3.36e-09  3.70e-08  5.86e-01  
 26  +4.9496e-01  +4.9501e-01  5.37e-05  2.31e-09  1.16e-06  7.95e-10  1.03e-08  8.61e-01  
 27  +4.9494e-01  +4.9494e-01  7.49e-07  3.21e-11  1.61e-08  9.24e-12  1.46e-10  9.87e-01  
 28  +4.9494e-01  +4.9494e-01  7.48e-09  3.21e-13  1.61e-10  9.24e-14  1.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 680.5719ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:18 PM: Optimal value: 4.949e-01
(CVXPY) Aug 30 12:22:18 PM: Compilation took 1.059e-01 seconds
(CVXPY) Aug 30 12:22:18 PM: Solver (including time spent in interface) took 7.155e-01 seconds
Iteration: 2, Objective: 0.4949
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:18 PM: Your problem has 25037 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:18 PM: Finished problem compilation (took 1.202e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25037
  constraints   = 50037
  nnz(P)        = 0
  nnz(A)        = 320285
  cones (total) = 1
    : Nonnegative = 1,  numel = 50037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.54e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3464e+03  5.35e+03  4.23e-01  1.63e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3497e-01  +6.3187e+02  6.31e+02  1.70e-01  8.39e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6461e+02  1.64e+02  1.47e-01  7.29e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5931e+01  1.54e+01  4.30e-02  2.11e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1100e+00  6.10e-01  1.82e-03  9.26e-01  2.33e-05  1.91e-01  2.27e-01  
  6  +5.0000e-01  +6.2773e-01  1.28e-01  3.81e-04  1.94e-01  4.08e-06  4.59e-02  7.69e-01  
  7  +5.0000e-01  +5.7747e-01  7.75e-02  2.31e-04  1.18e-01  2.46e-06  2.61e-02  4.96e-01  
  8  +5.0000e-01  +5.6685e-01  6.69e-02  1.99e-04  1.02e-01  2.01e-06  1.91e-02  4.09e-01  
  9  +5.0000e-01  +5.7096e-01  7.10e-02  2.12e-04  1.08e-01  1.68e-06  1.81e-02  2.98e-01  
 10  +5.0000e-01  +5.5807e-01  5.81e-02  1.73e-04  8.82e-02  1.65e-06  1.11e-02  4.24e-01  
 11  +5.0000e-01  +5.6003e-01  6.00e-02  1.79e-04  9.10e-02  4.97e-07  6.74e-03  9.90e-01  
 12  +5.0000e-01  +5.4531e-01  4.53e-02  1.24e-04  6.31e-02  1.55e-06  1.15e-03  8.78e-01  
 13  +4.9985e-01  +5.4228e-01  4.24e-02  6.10e-06  3.12e-03  7.70e-05  2.05e-05  9.84e-01  
 14  +4.9946e-01  +5.3702e-01  3.76e-02  2.54e-06  1.30e-03  1.43e-04  8.45e-06  6.50e-01  
 15  +4.9923e-01  +5.3396e-01  3.47e-02  2.34e-06  1.19e-03  1.01e-04  7.67e-06  2.64e-01  
 16  +4.9912e-01  +5.3252e-01  3.34e-02  2.30e-06  1.17e-03  8.50e-05  7.54e-06  9.37e-02  
 17  +4.9891e-01  +5.3005e-01  3.11e-02  2.13e-06  1.09e-03  6.42e-05  6.98e-06  2.11e-01  
 18  +4.9852e-01  +5.2384e-01  2.53e-02  1.85e-06  9.46e-04  6.08e-07  6.01e-06  7.63e-01  
 19  +4.9832e-01  +5.2274e-01  2.44e-02  1.56e-06  7.97e-04  5.39e-07  5.04e-06  3.40e-01  
 20  +4.9815e-01  +5.2201e-01  2.39e-02  1.56e-06  7.96e-04  4.92e-07  5.02e-06  5.46e-02  
 21  +4.9759e-01  +5.1920e-01  2.16e-02  1.21e-06  6.20e-04  3.21e-07  3.87e-06  5.90e-01  
 22  +4.9715e-01  +5.1737e-01  2.02e-02  1.03e-06  5.27e-04  3.13e-07  3.28e-06  1.84e-01  
 23  +4.9706e-01  +5.1712e-01  2.01e-02  1.03e-06  5.25e-04  3.04e-07  3.28e-06  2.79e-02  
 24  +4.9629e-01  +5.1420e-01  1.79e-02  8.17e-07  4.17e-04  2.77e-07  2.61e-06  2.74e-01  
 25  +4.9623e-01  +5.1375e-01  1.75e-02  7.93e-07  4.05e-04  2.43e-07  2.53e-06  2.15e-01  
 26  +4.9515e-01  +5.0952e-01  1.44e-02  6.07e-07  3.10e-04  1.50e-07  1.95e-06  6.63e-01  
 27  +4.9181e-01  +4.9724e-01  5.43e-03  1.94e-07  9.92e-05  5.54e-08  6.38e-07  7.38e-01  
 28  +4.9001e-01  +4.9052e-01  5.07e-04  1.73e-08  8.86e-06  4.92e-09  5.80e-08  9.26e-01  
 29  +4.8996e-01  +4.9036e-01  3.92e-04  1.29e-08  6.59e-06  4.14e-09  4.25e-08  3.33e-01  
 30  +4.8995e-01  +4.9030e-01  3.50e-04  1.20e-08  6.15e-06  3.29e-09  4.31e-08  2.30e-02  
 31  +4.8993e-01  +4.9024e-01  3.05e-04  1.05e-08  5.36e-06  2.98e-09  3.74e-08  1.99e-01  
 32  +4.8992e-01  +4.9018e-01  2.61e-04  8.96e-09  4.58e-06  2.67e-09  3.17e-08  2.25e-01  
 33  +4.8987e-01  +4.9005e-01  1.74e-04  5.71e-09  2.91e-06  2.08e-09  1.99e-08  5.51e-01  
 34  +4.8980e-01  +4.8981e-01  4.60e-06  1.51e-10  7.71e-08  6.27e-11  5.27e-10  9.90e-01  
 35  +4.8980e-01  +4.8980e-01  4.60e-08  1.51e-12  7.71e-10  6.27e-13  5.28e-12  9.90e-01  
 36  +4.8980e-01  +4.8980e-01  4.65e-10  1.54e-14  7.79e-12  9.85e-15  8.10e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 828.8048ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:19 PM: Optimal value: 4.898e-01
(CVXPY) Aug 30 12:22:19 PM: Compilation took 1.202e-01 seconds
(CVXPY) Aug 30 12:22:19 PM: Solver (including time spent in interface) took 8.596e-01 seconds
Iteration: 3, Objective: 0.4898
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:19 PM: Your problem has 25047 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:20 PM: Finished problem compilation (took 1.200e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25047
  constraints   = 50047
  nnz(P)        = 0
  nnz(A)        = 337170
  cones (total) = 1
    : Nonnegative = 1,  numel = 50047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.56e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.64e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3496e-01  +6.3181e+02  6.31e+02  1.70e-01  8.43e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6458e+02  1.64e+02  1.47e-01  7.33e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5928e+01  1.54e+01  4.30e-02  2.12e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1398e+00  6.40e-01  1.91e-03  9.77e-01  2.34e-05  1.91e-01  2.18e-01  
  6  +5.0000e-01  +7.1538e-01  2.15e-01  6.43e-04  3.29e-01  6.95e-06  7.29e-02  6.51e-01  
  7  +5.0000e-01  +6.0486e-01  1.05e-01  3.13e-04  1.60e-01  1.83e-06  3.17e-02  9.24e-01  
  8  +5.0001e-01  +5.9887e-01  9.89e-02  2.95e-04  1.51e-01  1.36e-06  2.46e-02  5.13e-01  
  9  +5.0000e-01  +5.9178e-01  9.18e-02  2.74e-04  1.40e-01  1.19e-06  1.99e-02  3.10e-01  
 10  +5.0001e-01  +5.8208e-01  8.21e-02  2.45e-04  1.25e-01  5.44e-07  1.23e-02  8.21e-01  
 11  +5.0000e-01  +5.6455e-01  6.45e-02  1.91e-04  9.77e-02  8.05e-07  4.57e-03  6.61e-01  
 12  +4.9999e-01  +5.4265e-01  4.27e-02  6.68e-05  3.43e-02  6.74e-06  2.75e-04  9.90e-01  
 13  +4.9962e-01  +5.4150e-01  4.19e-02  3.13e-06  1.61e-03  1.82e-04  9.84e-06  9.64e-01  
 14  +4.9927e-01  +5.3844e-01  3.92e-02  2.52e-06  1.30e-03  1.67e-04  7.90e-06  3.36e-01  
 15  +4.9917e-01  +5.3754e-01  3.84e-02  2.50e-06  1.28e-03  1.45e-04  7.84e-06  9.47e-02  
 16  +4.9872e-01  +5.3328e-01  3.46e-02  2.30e-06  1.18e-03  5.30e-05  7.18e-06  5.41e-01  
 17  +4.9856e-01  +5.3245e-01  3.39e-02  2.17e-06  1.11e-03  4.72e-05  6.74e-06  1.66e-01  
 18  +4.9847e-01  +5.3202e-01  3.35e-02  2.14e-06  1.10e-03  4.11e-05  6.67e-06  1.13e-01  
 19  +4.9822e-01  +5.3099e-01  3.28e-02  1.98e-06  1.02e-03  3.94e-05  6.18e-06  1.20e-01  
 20  +4.9815e-01  +5.3068e-01  3.25e-02  1.97e-06  1.01e-03  3.69e-05  6.16e-06  4.77e-02  
 21  +4.9609e-01  +5.2234e-01  2.63e-02  1.26e-06  6.46e-04  2.37e-05  3.96e-06  5.80e-01  
 22  +4.9236e-01  +5.0785e-01  1.55e-02  6.51e-07  3.34e-04  1.10e-05  2.09e-06  5.53e-01  
 23  +4.9233e-01  +5.0770e-01  1.54e-02  6.48e-07  3.33e-04  1.02e-05  2.09e-06  5.32e-02  
 24  +4.9017e-01  +4.9987e-01  9.70e-03  3.73e-07  1.92e-04  3.93e-06  1.23e-06  6.17e-01  
 25  +4.8908e-01  +4.9593e-01  6.86e-03  2.52e-07  1.29e-04  1.34e-06  8.37e-07  6.63e-01  
 26  +4.8778e-01  +4.9135e-01  3.58e-03  1.26e-07  6.45e-05  1.72e-07  4.24e-07  8.96e-01  
 27  +4.8778e-01  +4.9136e-01  3.58e-03  1.25e-07  6.44e-05  1.70e-07  4.24e-07  1.75e-02  
 28  +4.8706e-01  +4.8887e-01  1.81e-03  6.25e-08  3.21e-05  2.61e-08  2.13e-07  9.90e-01  
 29  +4.8648e-01  +4.8695e-01  4.64e-04  1.60e-08  8.20e-06  6.56e-09  5.51e-08  8.26e-01  
 30  +4.8630e-01  +4.8636e-01  5.38e-05  1.85e-09  9.49e-07  7.57e-10  6.39e-09  8.96e-01  
 31  +4.8628e-01  +4.8628e-01  5.70e-07  1.96e-11  1.00e-08  8.01e-12  6.77e-11  9.89e-01  
 32  +4.8628e-01  +4.8628e-01  5.71e-09  1.96e-13  1.01e-10  8.98e-14  7.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 705.4111ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:20 PM: Optimal value: 4.863e-01
(CVXPY) Aug 30 12:22:20 PM: Compilation took 1.200e-01 seconds
(CVXPY) Aug 30 12:22:20 PM: Solver (including time spent in interface) took 7.349e-01 seconds
Iteration: 4, Objective: 0.4863
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:20 PM: Your problem has 25057 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:21 PM: Finished problem compilation (took 1.220e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25057
  constraints   = 50057
  nnz(P)        = 0
  nnz(A)        = 347501
  cones (total) = 1
    : Nonnegative = 1,  numel = 50057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.56e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3465e+03  5.35e+03  4.23e-01  1.64e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3495e-01  +6.3176e+02  6.31e+02  1.70e-01  8.44e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6457e+02  1.64e+02  1.47e-01  7.34e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5928e+01  1.54e+01  4.30e-02  2.12e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1129e+00  6.13e-01  1.83e-03  9.37e-01  2.35e-05  1.91e-01  2.29e-01  
  6  +5.0000e-01  +7.1994e-01  2.20e-01  6.56e-04  3.37e-01  7.56e-06  7.51e-02  6.45e-01  
  7  +5.0000e-01  +6.1808e-01  1.18e-01  3.52e-04  1.81e-01  3.39e-06  3.74e-02  6.83e-01  
  8  +5.0000e-01  +6.2271e-01  1.23e-01  3.66e-04  1.88e-01  3.12e-06  3.66e-02  1.72e-01  
  9  +5.0000e-01  +5.8273e-01  8.27e-02  2.47e-04  1.27e-01  2.14e-06  1.92e-02  6.18e-01  
 10  +5.0000e-01  +5.7983e-01  7.98e-02  2.38e-04  1.22e-01  2.06e-06  1.41e-02  4.09e-01  
 11  +5.0000e-01  +5.7240e-01  7.24e-02  2.14e-04  1.10e-01  1.48e-06  5.69e-03  9.90e-01  
 12  +4.9999e-01  +5.6110e-01  6.11e-02  1.32e-04  6.77e-02  8.46e-06  6.87e-04  8.89e-01  
 13  +4.9932e-01  +5.5775e-01  5.84e-02  5.07e-06  2.61e-03  3.35e-04  1.61e-05  9.77e-01  
 14  +4.9908e-01  +5.5490e-01  5.58e-02  4.24e-06  2.18e-03  3.47e-04  1.34e-05  2.12e-01  
 15  +4.9910e-01  +5.4970e-01  5.06e-02  3.88e-06  2.00e-03  2.29e-04  1.22e-05  3.03e-01  
 16  +4.9886e-01  +5.4534e-01  4.65e-02  3.25e-06  1.67e-03  1.80e-04  1.01e-05  3.44e-01  
 17  +4.9869e-01  +5.4332e-01  4.46e-02  2.96e-06  1.52e-03  1.57e-04  9.24e-06  2.04e-01  
 18  +4.9860e-01  +5.4126e-01  4.27e-02  2.89e-06  1.49e-03  1.14e-04  9.04e-06  2.07e-01  
 19  +4.9744e-01  +5.3550e-01  3.81e-02  2.09e-06  1.07e-03  1.10e-04  6.53e-06  3.52e-01  
 20  +4.9726e-01  +5.3435e-01  3.71e-02  2.07e-06  1.06e-03  9.41e-05  6.49e-06  9.01e-02  
 21  +4.9593e-01  +5.2587e-01  2.99e-02  1.67e-06  8.57e-04  9.37e-07  5.28e-06  8.00e-01  
 22  +4.9364e-01  +5.1682e-01  2.32e-02  1.12e-06  5.76e-04  7.36e-07  3.58e-06  3.57e-01  
 23  +4.9154e-01  +5.0824e-01  1.67e-02  7.14e-07  3.67e-04  8.39e-08  2.30e-06  9.90e-01  
 24  +4.8880e-01  +4.9819e-01  9.39e-03  3.70e-07  1.90e-04  5.19e-08  1.21e-06  5.28e-01  
 25  +4.8699e-01  +4.9175e-01  4.76e-03  1.71e-07  8.81e-05  5.75e-08  5.73e-07  9.90e-01  
 26  +4.8687e-01  +4.9130e-01  4.43e-03  1.59e-07  8.16e-05  5.45e-08  5.31e-07  2.24e-01  
 27  +4.8679e-01  +4.9103e-01  4.23e-03  1.51e-07  7.78e-05  5.31e-08  5.07e-07  2.86e-01  
 28  +4.8646e-01  +4.8989e-01  3.42e-03  1.21e-07  6.24e-05  4.36e-08  4.09e-07  3.83e-01  
 29  +4.8646e-01  +4.8988e-01  3.42e-03  1.21e-07  6.24e-05  4.36e-08  4.08e-07  1.53e-02  
 30  +4.8637e-01  +4.8953e-01  3.16e-03  1.12e-07  5.74e-05  4.17e-08  3.76e-07  6.63e-01  
 31  +4.8564e-01  +4.8706e-01  1.41e-03  4.92e-08  2.53e-05  1.90e-08  1.68e-07  9.90e-01  
 32  +4.8510e-01  +4.8523e-01  1.36e-04  4.66e-09  2.40e-06  1.82e-09  1.61e-08  9.45e-01  
 33  +4.8504e-01  +4.8504e-01  1.83e-06  6.30e-11  3.24e-08  2.47e-11  2.18e-10  9.86e-01  
 34  +4.8504e-01  +4.8504e-01  1.83e-08  6.30e-13  3.24e-10  2.47e-13  2.18e-12  9.90e-01  
 35  +4.8504e-01  +4.8504e-01  1.84e-10  6.37e-15  3.26e-12  3.10e-15  2.72e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 776.9184ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:21 PM: Optimal value: 4.850e-01
(CVXPY) Aug 30 12:22:21 PM: Compilation took 1.220e-01 seconds
(CVXPY) Aug 30 12:22:21 PM: Solver (including time spent in interface) took 8.051e-01 seconds
Iteration: 5, Objective: 0.4850
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:21 PM: Your problem has 25067 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:22 PM: Finished problem compilation (took 1.302e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25067
  constraints   = 50067
  nnz(P)        = 0
  nnz(A)        = 357885
  cones (total) = 1
    : Nonnegative = 1,  numel = 50067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.57e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.24e-01  1.64e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3495e-01  +6.3169e+02  6.31e+02  1.70e-01  8.46e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6455e+02  1.64e+02  1.47e-01  7.35e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5928e+01  1.54e+01  4.30e-02  2.13e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0831e+00  5.83e-01  1.74e-03  8.94e-01  2.35e-05  1.91e-01  2.42e-01  
  6  +5.0000e-01  +7.2795e-01  2.28e-01  6.80e-04  3.49e-01  7.54e-06  7.60e-02  7.29e-01  
  7  +5.0000e-01  +5.9677e-01  9.68e-02  2.89e-04  1.48e-01  2.85e-06  2.98e-02  7.57e-01  
  8  +5.0000e-01  +6.0352e-01  1.04e-01  3.09e-04  1.59e-01  2.60e-06  2.70e-02  3.18e-01  
  9  +5.0000e-01  +5.9833e-01  9.83e-02  2.93e-04  1.51e-01  1.60e-06  1.46e-02  9.00e-01  
 10  +5.0000e-01  +5.7103e-01  7.10e-02  2.08e-04  1.07e-01  2.97e-06  3.86e-03  7.61e-01  
 11  +4.9986e-01  +5.5922e-01  5.94e-02  3.52e-05  1.81e-02  7.09e-05  1.19e-04  9.73e-01  
 12  +4.9939e-01  +5.5669e-01  5.73e-02  8.79e-06  4.53e-03  2.81e-04  2.80e-05  7.77e-01  
 13  +4.9949e-01  +5.5024e-01  5.08e-02  6.58e-06  3.39e-03  1.67e-04  2.08e-05  6.38e-01  
 14  +4.9930e-01  +5.4876e-01  4.95e-02  5.06e-06  2.61e-03  1.86e-04  1.60e-05  3.24e-01  
 15  +4.9936e-01  +5.4681e-01  4.74e-02  4.71e-06  2.43e-03  1.07e-04  1.48e-05  4.51e-01  
 16  +4.9912e-01  +5.4560e-01  4.65e-02  3.88e-06  2.00e-03  1.18e-04  1.22e-05  2.25e-01  
 17  +4.9901e-01  +5.4408e-01  4.51e-02  3.66e-06  1.89e-03  6.76e-05  1.16e-05  4.29e-01  
 18  +4.9828e-01  +5.4036e-01  4.21e-02  2.73e-06  1.41e-03  4.70e-05  8.60e-06  5.90e-01  
 19  +4.9767e-01  +5.3760e-01  3.99e-02  2.52e-06  1.30e-03  2.98e-05  7.98e-06  3.45e-01  
 20  +4.9585e-01  +5.3011e-01  3.43e-02  1.86e-06  9.61e-04  2.35e-05  5.96e-06  3.71e-01  
 21  +4.9152e-01  +5.1276e-01  2.12e-02  9.75e-07  5.02e-04  9.77e-06  3.19e-06  6.25e-01  
 22  +4.8892e-01  +5.0268e-01  1.38e-02  5.86e-07  3.02e-04  4.83e-06  1.95e-06  5.07e-01  
 23  +4.8666e-01  +4.9402e-01  7.36e-03  2.87e-07  1.48e-04  5.19e-08  9.68e-07  9.77e-01  
 24  +4.8505e-01  +4.8803e-01  2.98e-03  1.12e-07  5.79e-05  2.33e-08  3.84e-07  6.56e-01  
 25  +4.8498e-01  +4.8780e-01  2.83e-03  1.09e-07  5.59e-05  2.33e-08  3.76e-07  1.98e-01  
 26  +4.8496e-01  +4.8775e-01  2.79e-03  1.07e-07  5.49e-05  2.41e-08  3.67e-07  1.00e-01  
 27  +4.8441e-01  +4.8570e-01  1.30e-03  4.83e-08  2.49e-05  1.31e-08  1.66e-07  6.94e-01  
 28  +4.8395e-01  +4.8411e-01  1.62e-04  5.94e-09  3.06e-06  1.76e-09  2.06e-08  9.34e-01  
 29  +4.8389e-01  +4.8389e-01  1.69e-06  6.20e-11  3.20e-08  1.84e-11  2.15e-10  9.90e-01  
 30  +4.8389e-01  +4.8389e-01  1.69e-08  6.20e-13  3.20e-10  1.84e-13  2.15e-12  9.90e-01  
 31  +4.8389e-01  +4.8389e-01  1.69e-10  6.22e-15  3.20e-12  1.97e-15  2.29e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 836.6866ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:22 PM: Optimal value: 4.839e-01
(CVXPY) Aug 30 12:22:22 PM: Compilation took 1.302e-01 seconds
(CVXPY) Aug 30 12:22:22 PM: Solver (including time spent in interface) took 8.740e-01 seconds
Iteration: 6, Objective: 0.4839
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:23 PM: Your problem has 25072 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:23 PM: Finished problem compilation (took 1.586e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25072
  constraints   = 50072
  nnz(P)        = 0
  nnz(A)        = 365901
  cones (total) = 1
    : Nonnegative = 1,  numel = 50072

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.57e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3468e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3161e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6453e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5930e+01  1.54e+01  4.30e-02  2.13e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0949e+00  5.95e-01  1.78e-03  9.14e-01  2.36e-05  1.91e-01  2.38e-01  
  6  +5.0000e-01  +7.5005e-01  2.50e-01  7.46e-04  3.84e-01  8.18e-06  8.19e-02  7.05e-01  
  7  +5.0000e-01  +6.1929e-01  1.19e-01  3.56e-04  1.83e-01  3.30e-06  3.61e-02  7.41e-01  
  8  +5.0000e-01  +6.0702e-01  1.07e-01  3.19e-04  1.64e-01  3.00e-06  2.73e-02  3.40e-01  
  9  +5.0000e-01  +6.0496e-01  1.05e-01  3.13e-04  1.61e-01  2.60e-06  2.01e-02  4.94e-01  
 10  +5.0000e-01  +5.7737e-01  7.74e-02  2.29e-04  1.18e-01  2.82e-06  6.36e-03  8.88e-01  
 11  +4.9998e-01  +5.6297e-01  6.30e-02  1.40e-04  7.22e-02  1.36e-05  7.60e-04  9.90e-01  
 12  +4.9893e-01  +5.5897e-01  6.00e-02  5.70e-06  2.95e-03  5.23e-04  1.82e-05  9.76e-01  
 13  +4.9810e-01  +5.5259e-01  5.45e-02  3.91e-06  2.02e-03  5.77e-04  1.24e-05  3.81e-01  
 14  +4.9818e-01  +5.5236e-01  5.42e-02  3.90e-06  2.02e-03  5.39e-04  1.24e-05  5.43e-02  
 15  +4.9787e-01  +5.5005e-01  5.22e-02  3.49e-06  1.81e-03  5.11e-04  1.10e-05  1.68e-01  
 16  +4.9787e-01  +5.4795e-01  5.01e-02  3.43e-06  1.77e-03  3.82e-04  1.08e-05  1.86e-01  
 17  +4.9614e-01  +5.3786e-01  4.17e-02  2.25e-06  1.16e-03  3.00e-04  7.14e-06  4.97e-01  
 18  +4.9601e-01  +5.3693e-01  4.09e-02  2.24e-06  1.15e-03  2.62e-04  7.10e-06  8.40e-02  
 19  +4.9394e-01  +5.2744e-01  3.35e-02  1.66e-06  8.59e-04  1.99e-04  5.33e-06  3.07e-01  
 20  +4.9143e-01  +5.1602e-01  2.46e-02  1.14e-06  5.87e-04  1.17e-04  3.69e-06  4.08e-01  
 21  +4.8747e-01  +4.9835e-01  1.09e-02  4.45e-07  2.30e-04  3.75e-06  1.48e-06  9.07e-01  
 22  +4.8627e-01  +4.9369e-01  7.42e-03  2.93e-07  1.52e-04  2.09e-06  9.82e-07  4.58e-01  
 23  +4.8627e-01  +4.9370e-01  7.43e-03  2.93e-07  1.51e-04  2.06e-06  9.81e-07  2.14e-02  
 24  +4.8554e-01  +4.9079e-01  5.25e-03  1.95e-07  1.01e-04  1.07e-07  6.54e-07  9.90e-01  
 25  +4.8515e-01  +4.8939e-01  4.24e-03  1.54e-07  7.95e-05  8.54e-08  5.16e-07  2.71e-01  
 26  +4.8500e-01  +4.8893e-01  3.93e-03  1.48e-07  7.66e-05  7.18e-08  5.16e-07  4.17e-02  
 27  +4.8464e-01  +4.8756e-01  2.92e-03  1.09e-07  5.64e-05  4.92e-08  3.80e-07  4.48e-01  
 28  +4.8429e-01  +4.8630e-01  2.01e-03  7.34e-08  3.79e-05  3.17e-08  2.54e-07  5.73e-01  
 29  +4.8392e-01  +4.8508e-01  1.16e-03  4.05e-08  2.09e-05  1.87e-08  1.39e-07  5.34e-01  
 30  +4.8346e-01  +4.8350e-01  4.24e-05  1.46e-09  7.56e-07  5.99e-10  5.08e-09  9.88e-01  
 31  +4.8344e-01  +4.8344e-01  4.30e-07  1.48e-11  7.65e-09  6.06e-12  5.15e-11  9.90e-01  
 32  +4.8344e-01  +4.8344e-01  4.30e-09  1.48e-13  7.65e-11  6.06e-14  5.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 925.9082ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:24 PM: Optimal value: 4.834e-01
(CVXPY) Aug 30 12:22:24 PM: Compilation took 1.586e-01 seconds
(CVXPY) Aug 30 12:22:24 PM: Solver (including time spent in interface) took 9.599e-01 seconds
Iteration: 7, Objective: 0.4834
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:24 PM: Your problem has 25082 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:24 PM: Finished problem compilation (took 1.506e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25082
  constraints   = 50082
  nnz(P)        = 0
  nnz(A)        = 373945
  cones (total) = 1
    : Nonnegative = 1,  numel = 50082

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3468e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3156e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6452e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5931e+01  1.54e+01  4.30e-02  2.13e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1055e+00  6.05e-01  1.81e-03  9.31e-01  2.36e-05  1.91e-01  2.34e-01  
  6  +5.0000e-01  +7.4294e-01  2.43e-01  7.25e-04  3.74e-01  8.28e-06  8.06e-02  6.60e-01  
  7  +5.0000e-01  +6.3010e-01  1.30e-01  3.88e-04  2.00e-01  4.09e-06  3.99e-02  6.42e-01  
  8  +5.0000e-01  +6.1041e-01  1.10e-01  3.29e-04  1.70e-01  3.41e-06  2.70e-02  4.69e-01  
  9  +5.0000e-01  +5.9511e-01  9.51e-02  2.83e-04  1.46e-01  2.80e-06  1.37e-02  7.61e-01  
 10  +4.9999e-01  +5.5665e-01  5.67e-02  1.59e-04  8.19e-02  7.86e-06  1.65e-03  9.90e-01  
 11  +4.9926e-01  +5.5466e-01  5.54e-02  1.03e-05  5.33e-03  3.65e-04  3.31e-05  9.83e-01  
 12  +4.9870e-01  +5.5201e-01  5.33e-02  6.15e-06  3.18e-03  5.41e-04  1.96e-05  4.51e-01  
 13  +4.9817e-01  +5.4891e-01  5.07e-02  4.44e-06  2.30e-03  5.95e-04  1.40e-05  3.82e-01  
 14  +4.9811e-01  +5.4817e-01  5.01e-02  4.10e-06  2.12e-03  5.47e-04  1.29e-05  1.89e-01  
 15  +4.9811e-01  +5.4760e-01  4.95e-02  4.06e-06  2.10e-03  4.97e-04  1.28e-05  8.08e-02  
 16  +4.9810e-01  +5.4592e-01  4.78e-02  3.70e-06  1.92e-03  3.28e-04  1.17e-05  3.88e-01  
 17  +4.9800e-01  +5.4414e-01  4.61e-02  3.54e-06  1.83e-03  1.96e-04  1.12e-05  3.68e-01  
 18  +4.9660e-01  +5.3799e-01  4.14e-02  2.53e-06  1.31e-03  2.00e-04  8.02e-06  3.24e-01  
 19  +4.9399e-01  +5.2538e-01  3.14e-02  1.70e-06  8.77e-04  2.30e-05  5.43e-06  8.18e-01  
 20  +4.8891e-01  +5.0431e-01  1.54e-02  6.86e-07  3.55e-04  8.09e-06  2.25e-06  6.94e-01  
 21  +4.8747e-01  +4.9859e-01  1.11e-02  4.67e-07  2.42e-04  3.95e-06  1.54e-06  5.28e-01  
 22  +4.8710e-01  +4.9706e-01  9.97e-03  4.03e-07  2.08e-04  2.14e-06  1.33e-06  4.96e-01  
 23  +4.8704e-01  +4.9686e-01  9.82e-03  3.99e-07  2.06e-04  1.90e-06  1.32e-06  9.25e-02  
 24  +4.8558e-01  +4.9116e-01  5.58e-03  2.18e-07  1.13e-04  7.93e-07  7.26e-07  6.07e-01  
 25  +4.8557e-01  +4.9111e-01  5.54e-03  2.13e-07  1.10e-04  6.32e-07  7.04e-07  2.55e-01  
 26  +4.8509e-01  +4.8933e-01  4.24e-03  1.58e-07  8.18e-05  4.78e-07  5.25e-07  2.77e-01  
 27  +4.8495e-01  +4.8888e-01  3.93e-03  1.52e-07  7.88e-05  3.91e-07  5.25e-07  4.44e-02  
 28  +4.8453e-01  +4.8722e-01  2.68e-03  1.02e-07  5.29e-05  1.87e-07  3.53e-07  5.66e-01  
 29  +4.8418e-01  +4.8593e-01  1.76e-03  6.49e-08  3.36e-05  9.45e-08  2.22e-07  5.76e-01  
 30  +4.8388e-01  +4.8497e-01  1.09e-03  3.85e-08  1.99e-05  5.49e-08  1.31e-07  4.82e-01  
 31  +4.8346e-01  +4.8350e-01  4.42e-05  1.52e-09  7.88e-07  1.86e-09  5.29e-09  9.70e-01  
 32  +4.8344e-01  +4.8344e-01  4.47e-07  1.54e-11  7.97e-09  1.89e-11  5.36e-11  9.90e-01  
 33  +4.8344e-01  +4.8344e-01  4.47e-09  1.54e-13  7.97e-11  1.89e-13  5.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 907.3546ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:25 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:25 PM: Optimal value: 4.834e-01
(CVXPY) Aug 30 12:22:25 PM: Compilation took 1.506e-01 seconds
(CVXPY) Aug 30 12:22:25 PM: Solver (including time spent in interface) took 9.478e-01 seconds
Iteration: 8, Objective: 0.4834
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:25 PM: Your problem has 25092 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:25 PM: Finished problem compilation (took 1.545e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25092
  constraints   = 50092
  nnz(P)        = 0
  nnz(A)        = 378487
  cones (total) = 1
    : Nonnegative = 1,  numel = 50092

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3469e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3152e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6450e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5931e+01  1.54e+01  4.30e-02  2.13e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1321e+00  6.32e-01  1.89e-03  9.73e-01  2.36e-05  1.91e-01  2.25e-01  
  6  +5.0000e-01  +7.4998e-01  2.50e-01  7.46e-04  3.85e-01  8.28e-06  8.19e-02  6.35e-01  
  7  +5.0000e-01  +6.4770e-01  1.48e-01  4.41e-04  2.27e-01  4.96e-06  4.61e-02  4.94e-01  
  8  +5.0000e-01  +6.2255e-01  1.23e-01  3.66e-04  1.89e-01  3.83e-06  2.95e-02  5.62e-01  
  9  +5.0000e-01  +6.0662e-01  1.07e-01  3.18e-04  1.64e-01  3.54e-06  1.69e-02  6.02e-01  
 10  +4.9999e-01  +5.6690e-01  6.69e-02  1.93e-04  9.95e-02  8.96e-06  2.64e-03  9.00e-01  
 11  +4.9963e-01  +5.6547e-01  6.58e-02  3.45e-05  1.78e-02  1.85e-04  1.18e-04  9.60e-01  
 12  +4.9872e-01  +5.5927e-01  6.06e-02  9.48e-06  4.91e-03  5.73e-04  3.09e-05  8.07e-01  
 13  +4.9867e-01  +5.5509e-01  5.64e-02  6.65e-06  3.44e-03  4.29e-04  2.14e-05  6.57e-01  
 14  +4.9874e-01  +5.5474e-01  5.60e-02  6.56e-06  3.40e-03  3.73e-04  2.11e-05  1.34e-01  
 15  +4.9822e-01  +5.5222e-01  5.40e-02  4.88e-06  2.52e-03  4.27e-04  1.56e-05  3.22e-01  
 16  +4.9823e-01  +5.5199e-01  5.38e-02  4.83e-06  2.50e-03  3.98e-04  1.55e-05  7.02e-02  
 17  +4.9788e-01  +5.4995e-01  5.21e-02  4.14e-06  2.14e-03  3.64e-04  1.33e-05  2.75e-01  
 18  +4.9777e-01  +5.4809e-01  5.03e-02  3.97e-06  2.05e-03  2.10e-04  1.27e-05  3.81e-01  
 19  +4.9645e-01  +5.4212e-01  4.57e-02  2.96e-06  1.53e-03  2.10e-04  9.54e-06  3.01e-01  
 20  +4.9545e-01  +5.3608e-01  4.06e-02  2.56e-06  1.32e-03  2.15e-06  8.29e-06  8.28e-01  
 21  +4.9204e-01  +5.2160e-01  2.96e-02  1.53e-06  7.92e-04  1.60e-06  5.06e-06  4.38e-01  
 22  +4.8736e-01  +5.0216e-01  1.48e-02  6.59e-07  3.41e-04  4.88e-07  2.24e-06  7.20e-01  
 23  +4.8490e-01  +4.9245e-01  7.55e-03  3.13e-07  1.62e-04  2.24e-07  1.09e-06  5.74e-01  
 24  +4.8497e-01  +4.9267e-01  7.70e-03  3.14e-07  1.62e-04  2.26e-07  1.08e-06  5.04e-02  
 25  +4.8490e-01  +4.9245e-01  7.54e-03  3.12e-07  1.61e-04  2.09e-07  1.08e-06  5.85e-02  
 26  +4.8424e-01  +4.8984e-01  5.61e-03  2.26e-07  1.17e-04  1.43e-07  7.86e-07  3.76e-01  
 27  +4.8399e-01  +4.8887e-01  4.88e-03  1.87e-07  9.67e-05  7.88e-08  6.48e-07  7.57e-01  
 28  +4.8389e-01  +4.8859e-01  4.70e-03  1.79e-07  9.25e-05  6.97e-08  6.21e-07  2.98e-01  
 29  +4.8347e-01  +4.8702e-01  3.55e-03  1.33e-07  6.90e-05  5.27e-08  4.65e-07  2.67e-01  
 30  +4.8347e-01  +4.8701e-01  3.54e-03  1.33e-07  6.89e-05  5.24e-08  4.65e-07  1.45e-02  
 31  +4.8313e-01  +4.8573e-01  2.60e-03  9.76e-08  5.05e-05  3.40e-08  3.43e-07  6.76e-01  
 32  +4.8248e-01  +4.8337e-01  8.91e-04  3.27e-08  1.69e-05  1.14e-08  1.17e-07  7.78e-01  
 33  +4.8221e-01  +4.8243e-01  2.20e-04  7.95e-09  4.11e-06  2.80e-09  2.87e-08  7.70e-01  
 34  +4.8217e-01  +4.8230e-01  1.28e-04  4.61e-09  2.39e-06  1.60e-09  1.67e-08  6.63e-01  
 35  +4.8212e-01  +4.8212e-01  1.33e-06  4.78e-11  2.47e-08  1.66e-11  1.73e-10  9.90e-01  
 36  +4.8212e-01  +4.8212e-01  1.33e-08  4.78e-13  2.47e-10  1.66e-13  1.73e-12  9.90e-01  
 37  +4.8212e-01  +4.8212e-01  1.34e-10  4.80e-15  2.50e-12  2.67e-15  2.72e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 995.9206ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:26 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:26 PM: Optimal value: 4.821e-01
(CVXPY) Aug 30 12:22:26 PM: Compilation took 1.545e-01 seconds
(CVXPY) Aug 30 12:22:26 PM: Solver (including time spent in interface) took 1.029e+00 seconds
Iteration: 9, Objective: 0.4821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:26 PM: Your problem has 25102 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:27 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:27 PM: Finished problem compilation (took 1.483e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25102
  constraints   = 50102
  nnz(P)        = 0
  nnz(A)        = 383906
  cones (total) = 1
    : Nonnegative = 1,  numel = 50102

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3470e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3143e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6448e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5934e+01  1.54e+01  4.30e-02  2.13e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1016e+00  6.02e-01  1.80e-03  9.26e-01  2.36e-05  1.91e-01  2.37e-01  
  6  +5.0000e-01  +7.4419e-01  2.44e-01  7.29e-04  3.76e-01  7.59e-06  7.82e-02  7.53e-01  
  7  +5.0000e-01  +6.5450e-01  1.54e-01  4.61e-04  2.38e-01  4.68e-06  4.63e-02  5.08e-01  
  8  +5.0000e-01  +6.2094e-01  1.21e-01  3.61e-04  1.86e-01  3.95e-06  3.01e-02  4.21e-01  
  9  +5.0000e-01  +6.1124e-01  1.11e-01  3.32e-04  1.71e-01  3.86e-06  2.06e-02  4.32e-01  
 10  +5.0000e-01  +6.1077e-01  1.11e-01  3.29e-04  1.70e-01  2.80e-06  1.13e-02  8.40e-01  
 11  +5.0000e-01  +5.8445e-01  8.45e-02  2.43e-04  1.25e-01  3.23e-06  3.17e-03  9.90e-01  
 12  +4.9975e-01  +5.7529e-01  7.55e-02  2.03e-05  1.05e-02  1.28e-04  6.60e-05  9.82e-01  
 13  +4.9876e-01  +5.6970e-01  7.09e-02  4.81e-06  2.49e-03  4.94e-04  1.53e-05  7.79e-01  
 14  +4.9849e-01  +5.6489e-01  6.64e-02  4.37e-06  2.26e-03  3.83e-04  1.39e-05  2.46e-01  
 15  +4.9843e-01  +5.6300e-01  6.46e-02  4.29e-06  2.22e-03  3.31e-04  1.36e-05  1.08e-01  
 16  +4.9780e-01  +5.5651e-01  5.87e-02  3.68e-06  1.91e-03  2.31e-04  1.17e-05  3.48e-01  
 17  +4.9738e-01  +5.5303e-01  5.56e-02  3.55e-06  1.84e-03  1.72e-04  1.14e-05  1.83e-01  
 18  +4.9546e-01  +5.4309e-01  4.76e-02  2.69e-06  1.39e-03  1.38e-04  8.71e-06  3.16e-01  
 19  +4.9242e-01  +5.2809e-01  3.57e-02  1.84e-06  9.52e-04  7.48e-05  6.08e-06  4.53e-01  
 20  +4.9217e-01  +5.2649e-01  3.43e-02  1.74e-06  9.00e-04  5.47e-05  5.76e-06  2.43e-01  
 21  +4.9150e-01  +5.2258e-01  3.11e-02  1.53e-06  7.90e-04  1.72e-05  5.10e-06  5.92e-01  
 22  +4.9079e-01  +5.1957e-01  2.88e-02  1.38e-06  7.14e-04  1.36e-05  4.64e-06  2.00e-01  
 23  +4.9010e-01  +5.1650e-01  2.64e-02  1.24e-06  6.41e-04  8.60e-06  4.18e-06  3.41e-01  
 24  +4.8725e-01  +5.0475e-01  1.75e-02  7.63e-07  3.95e-04  2.69e-06  2.64e-06  6.53e-01  
 25  +4.8332e-01  +4.8907e-01  5.75e-03  2.28e-07  1.18e-04  2.32e-07  8.19e-07  9.08e-01  
 26  +4.8326e-01  +4.8888e-01  5.62e-03  2.18e-07  1.13e-04  2.19e-07  7.81e-07  1.13e-01  
 27  +4.8316e-01  +4.8850e-01  5.34e-03  2.13e-07  1.10e-04  1.94e-07  7.80e-07  2.01e-02  
 28  +4.8307e-01  +4.8814e-01  5.07e-03  2.01e-07  1.04e-04  1.75e-07  7.37e-07  1.27e-01  
 29  +4.8240e-01  +4.8559e-01  3.19e-03  1.24e-07  6.43e-05  9.22e-08  4.53e-07  5.57e-01  
 30  +4.8221e-01  +4.8501e-01  2.80e-03  1.05e-07  5.45e-05  7.72e-08  3.80e-07  2.71e-01  
 31  +4.8215e-01  +4.8479e-01  2.64e-03  9.85e-08  5.10e-05  7.09e-08  3.56e-07  1.15e-01  
 32  +4.8212e-01  +4.8468e-01  2.56e-03  9.71e-08  5.02e-05  6.20e-08  3.53e-07  1.37e-01  
 33  +4.8152e-01  +4.8248e-01  9.57e-04  3.57e-08  1.85e-05  2.18e-08  1.31e-07  6.90e-01  
 34  +4.8119e-01  +4.8131e-01  1.23e-04  4.55e-09  2.35e-06  1.40e-09  1.67e-08  9.81e-01  
 35  +4.8114e-01  +4.8114e-01  2.54e-06  9.37e-11  4.85e-08  2.94e-11  3.45e-10  9.81e-01  
 36  +4.8114e-01  +4.8114e-01  2.54e-08  9.37e-13  4.85e-10  2.94e-13  3.45e-12  9.90e-01  
 37  +4.8114e-01  +4.8114e-01  2.57e-10  9.42e-15  4.90e-12  4.47e-15  5.14e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 921.3438ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:28 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:28 PM: Optimal value: 4.811e-01
(CVXPY) Aug 30 12:22:28 PM: Compilation took 1.483e-01 seconds
(CVXPY) Aug 30 12:22:28 PM: Solver (including time spent in interface) took 9.570e-01 seconds
Iteration: 10, Objective: 0.4811
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:28 PM: Your problem has 25112 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:28 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:28 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:28 PM: Finished problem compilation (took 2.850e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25112
  constraints   = 50112
  nnz(P)        = 0
  nnz(A)        = 388668
  cones (total) = 1
    : Nonnegative = 1,  numel = 50112

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3470e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3142e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6447e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5933e+01  1.54e+01  4.30e-02  2.14e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1517e+00  6.52e-01  1.95e-03  1.00e+00  2.36e-05  1.91e-01  2.18e-01  
  6  +5.0001e-01  +7.3739e-01  2.37e-01  7.09e-04  3.66e-01  6.59e-06  7.45e-02  7.72e-01  
  7  +5.0000e-01  +6.5651e-01  1.57e-01  4.67e-04  2.41e-01  4.33e-06  4.63e-02  4.63e-01  
  8  +5.0000e-01  +6.2061e-01  1.21e-01  3.60e-04  1.86e-01  3.50e-06  2.86e-02  4.94e-01  
  9  +5.0000e-01  +6.1280e-01  1.13e-01  3.36e-04  1.74e-01  3.45e-06  1.91e-02  4.75e-01  
 10  +5.0000e-01  +6.0195e-01  1.02e-01  3.01e-04  1.56e-01  3.15e-06  6.88e-03  9.90e-01  
 11  +4.9993e-01  +5.7916e-01  7.92e-02  9.85e-05  5.09e-02  3.68e-05  3.80e-04  9.53e-01  
 12  +4.9880e-01  +5.7425e-01  7.55e-02  7.13e-06  3.69e-03  5.67e-04  2.29e-05  9.40e-01  
 13  +4.9854e-01  +5.6491e-01  6.64e-02  5.61e-06  2.91e-03  3.84e-04  1.80e-05  4.61e-01  
 14  +4.9852e-01  +5.6329e-01  6.48e-02  5.26e-06  2.72e-03  3.38e-04  1.68e-05  1.80e-01  
 15  +4.9859e-01  +5.5931e-01  6.07e-02  4.80e-06  2.49e-03  1.92e-04  1.53e-05  4.33e-01  
 16  +4.9836e-01  +5.5658e-01  5.82e-02  4.49e-06  2.33e-03  1.41e-04  1.44e-05  2.75e-01  
 17  +4.9773e-01  +5.5317e-01  5.54e-02  3.86e-06  2.00e-03  1.31e-04  1.24e-05  2.23e-01  
 18  +4.9543e-01  +5.4191e-01  4.65e-02  2.61e-06  1.35e-03  1.06e-04  8.49e-06  4.45e-01  
 19  +4.9447e-01  +5.3663e-01  4.22e-02  2.39e-06  1.24e-03  5.13e-05  7.86e-06  3.89e-01  
 20  +4.9225e-01  +5.2688e-01  3.46e-02  1.81e-06  9.37e-04  3.57e-05  6.03e-06  3.33e-01  
 21  +4.9116e-01  +5.2201e-01  3.08e-02  1.53e-06  7.94e-04  1.56e-05  5.15e-06  5.09e-01  
 22  +4.9114e-01  +5.2191e-01  3.08e-02  1.53e-06  7.91e-04  1.52e-05  5.13e-06  2.49e-02  
 23  +4.9059e-01  +5.1960e-01  2.90e-02  1.42e-06  7.33e-04  1.21e-05  4.77e-06  1.91e-01  
 24  +4.8740e-01  +5.0647e-01  1.91e-02  8.57e-07  4.44e-04  6.48e-06  2.96e-06  4.66e-01  
 25  +4.8408e-01  +4.9308e-01  9.00e-03  3.73e-07  1.93e-04  2.19e-06  1.33e-06  6.59e-01  
 26  +4.8273e-01  +4.8783e-01  5.09e-03  2.00e-07  1.04e-04  1.05e-06  7.23e-07  5.56e-01  
 27  +4.8266e-01  +4.8750e-01  4.84e-03  1.95e-07  1.01e-04  9.41e-07  7.23e-07  1.10e-02  
 28  +4.8254e-01  +4.8704e-01  4.50e-03  1.80e-07  9.33e-05  7.85e-07  6.65e-07  1.86e-01  
 29  +4.8218e-01  +4.8568e-01  3.49e-03  1.37e-07  7.09e-05  4.97e-07  4.99e-07  4.23e-01  
 30  +4.8177e-01  +4.8422e-01  2.45e-03  9.26e-08  4.79e-05  3.19e-07  3.37e-07  4.09e-01  
 31  +4.8172e-01  +4.8404e-01  2.33e-03  8.92e-08  4.62e-05  2.24e-07  3.27e-07  2.64e-01  
 32  +4.8115e-01  +4.8194e-01  7.91e-04  2.99e-08  1.55e-05  6.73e-08  1.10e-07  7.16e-01  
 33  +4.8094e-01  +4.8118e-01  2.47e-04  9.17e-09  4.75e-06  5.63e-09  3.39e-08  9.46e-01  
 34  +4.8084e-01  +4.8084e-01  2.85e-06  1.06e-10  5.47e-08  6.46e-11  3.92e-10  9.89e-01  
 35  +4.8084e-01  +4.8084e-01  2.85e-08  1.06e-12  5.47e-10  6.46e-13  3.92e-12  9.90e-01  
 36  +4.8084e-01  +4.8084e-01  2.85e-10  1.06e-14  5.49e-12  7.30e-15  4.41e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3981976s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:30 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:30 PM: Optimal value: 4.808e-01
(CVXPY) Aug 30 12:22:30 PM: Compilation took 2.850e-01 seconds
(CVXPY) Aug 30 12:22:30 PM: Solver (including time spent in interface) took 1.462e+00 seconds
Iteration: 11, Objective: 0.4808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:30 PM: Your problem has 25122 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:30 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:30 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:30 PM: Finished problem compilation (took 2.773e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25122
  constraints   = 50122
  nnz(P)        = 0
  nnz(A)        = 392544
  cones (total) = 1
    : Nonnegative = 1,  numel = 50122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3470e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3139e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6446e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5933e+01  1.54e+01  4.30e-02  2.14e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1931e+00  6.93e-01  2.07e-03  1.07e+00  2.35e-05  1.91e-01  2.05e-01  
  6  +5.0001e-01  +7.5444e-01  2.54e-01  7.60e-04  3.92e-01  6.79e-06  7.83e-02  7.40e-01  
  7  +5.0000e-01  +6.6318e-01  1.63e-01  4.87e-04  2.52e-01  4.38e-06  4.82e-02  4.62e-01  
  8  +5.0000e-01  +6.2351e-01  1.24e-01  3.69e-04  1.90e-01  3.27e-06  2.79e-02  6.00e-01  
  9  +5.0001e-01  +6.3642e-01  1.36e-01  4.07e-04  2.10e-01  1.97e-06  1.74e-02  8.88e-01  
 10  +5.0001e-01  +5.9921e-01  9.92e-02  2.92e-04  1.51e-01  1.29e-06  5.84e-03  9.90e-01  
 11  +4.9997e-01  +5.8267e-01  8.27e-02  8.77e-05  4.54e-02  1.64e-05  3.25e-04  9.59e-01  
 12  +4.9946e-01  +5.8007e-01  8.06e-02  6.25e-06  3.24e-03  2.56e-04  2.00e-05  9.39e-01  
 13  +4.9900e-01  +5.7357e-01  7.46e-02  5.77e-06  2.99e-03  2.11e-04  1.85e-05  1.62e-01  
 14  +4.9885e-01  +5.7050e-01  7.17e-02  5.46e-06  2.83e-03  1.81e-04  1.75e-05  1.53e-01  
 15  +4.9854e-01  +5.6723e-01  6.87e-02  4.77e-06  2.47e-03  1.69e-04  1.53e-05  2.12e-01  
 16  +4.9828e-01  +5.6261e-01  6.43e-02  4.35e-06  2.25e-03  1.19e-04  1.39e-05  3.03e-01  
 17  +4.9787e-01  +5.5904e-01  6.12e-02  3.96e-06  2.05e-03  9.63e-05  1.27e-05  2.30e-01  
 18  +4.9742e-01  +5.5500e-01  5.76e-02  3.82e-06  1.98e-03  6.59e-05  1.23e-05  2.24e-01  
 19  +4.9448e-01  +5.4039e-01  4.59e-02  2.44e-06  1.26e-03  5.30e-05  7.98e-06  4.44e-01  
 20  +4.9184e-01  +5.2728e-01  3.54e-02  1.82e-06  9.44e-04  2.37e-05  6.11e-06  4.57e-01  
 21  +4.9177e-01  +5.2685e-01  3.51e-02  1.80e-06  9.32e-04  2.20e-05  6.03e-06  6.55e-02  
 22  +4.9113e-01  +5.2326e-01  3.21e-02  1.59e-06  8.23e-04  1.02e-05  5.36e-06  4.83e-01  
 23  +4.9109e-01  +5.2307e-01  3.20e-02  1.59e-06  8.21e-04  9.78e-06  5.35e-06  3.34e-02  
 24  +4.9046e-01  +5.2025e-01  2.98e-02  1.45e-06  7.49e-04  6.67e-06  4.91e-06  2.93e-01  
 25  +4.8976e-01  +5.1714e-01  2.74e-02  1.30e-06  6.71e-04  4.46e-06  4.42e-06  3.17e-01  
 26  +4.8913e-01  +5.1439e-01  2.53e-02  1.17e-06  6.05e-04  2.78e-06  4.00e-06  3.63e-01  
 27  +4.8756e-01  +5.0797e-01  2.04e-02  9.12e-07  4.72e-04  1.93e-06  3.17e-06  3.09e-01  
 28  +4.8749e-01  +5.0750e-01  2.00e-02  8.78e-07  4.55e-04  1.37e-06  3.05e-06  3.20e-01  
 29  +4.8438e-01  +4.9502e-01  1.06e-02  4.43e-07  2.29e-04  5.91e-07  1.58e-06  5.67e-01  
 30  +4.8230e-01  +4.8686e-01  4.55e-03  1.78e-07  9.19e-05  1.94e-07  6.49e-07  7.19e-01  
 31  +4.8224e-01  +4.8656e-01  4.32e-03  1.73e-07  8.95e-05  1.73e-07  6.49e-07  8.94e-03  
 32  +4.8220e-01  +4.8643e-01  4.22e-03  1.69e-07  8.73e-05  1.62e-07  6.31e-07  8.51e-02  
 33  +4.8196e-01  +4.8553e-01  3.58e-03  1.40e-07  7.26e-05  1.20e-07  5.17e-07  3.64e-01  
 34  +4.8119e-01  +4.8281e-01  1.62e-03  6.16e-08  3.19e-05  4.34e-08  2.30e-07  6.71e-01  
 35  +4.8062e-01  +4.8067e-01  5.06e-05  1.91e-09  9.91e-07  1.18e-09  7.28e-09  9.72e-01  
 36  +4.8060e-01  +4.8060e-01  5.10e-07  1.92e-11  9.96e-09  1.18e-11  7.34e-11  9.90e-01  
 37  +4.8060e-01  +4.8060e-01  5.10e-09  1.93e-13  9.96e-11  1.18e-13  7.34e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3709505s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:32 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:32 PM: Optimal value: 4.806e-01
(CVXPY) Aug 30 12:22:32 PM: Compilation took 2.773e-01 seconds
(CVXPY) Aug 30 12:22:32 PM: Solver (including time spent in interface) took 1.437e+00 seconds
Iteration: 12, Objective: 0.4806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:32 PM: Your problem has 25132 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:32 PM: Finished problem compilation (took 2.728e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25132
  constraints   = 50132
  nnz(P)        = 0
  nnz(A)        = 396272
  cones (total) = 1
    : Nonnegative = 1,  numel = 50132

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3468e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3140e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6445e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5929e+01  1.54e+01  4.30e-02  2.14e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.2028e+00  7.03e-01  2.10e-03  1.08e+00  2.35e-05  1.91e-01  2.03e-01  
  6  +5.0001e-01  +7.4952e-01  2.50e-01  7.45e-04  3.85e-01  6.25e-06  7.59e-02  7.85e-01  
  7  +5.0000e-01  +6.6463e-01  1.65e-01  4.92e-04  2.54e-01  4.21e-06  4.81e-02  4.29e-01  
  8  +5.0000e-01  +6.3867e-01  1.39e-01  4.14e-04  2.14e-01  3.43e-06  3.29e-02  4.78e-01  
  9  +5.0000e-01  +6.2827e-01  1.28e-01  3.83e-04  1.98e-01  2.93e-06  2.11e-02  5.94e-01  
 10  +5.0001e-01  +6.2304e-01  1.23e-01  3.66e-04  1.89e-01  9.21e-07  1.17e-02  9.90e-01  
 11  +5.0000e-01  +6.0173e-01  1.02e-01  2.76e-04  1.42e-01  2.92e-06  2.36e-03  8.08e-01  
 12  +4.9988e-01  +5.7397e-01  7.41e-02  2.22e-05  1.15e-02  6.23e-05  7.30e-05  9.90e-01  
 13  +4.9929e-01  +5.7051e-01  7.12e-02  4.77e-06  2.47e-03  2.79e-04  1.52e-05  7.98e-01  
 14  +4.9898e-01  +5.6704e-01  6.81e-02  4.65e-06  2.41e-03  2.24e-04  1.48e-05  1.41e-01  
 15  +4.9881e-01  +5.6513e-01  6.63e-02  4.39e-06  2.27e-03  1.98e-04  1.40e-05  1.58e-01  
 16  +4.9851e-01  +5.6197e-01  6.35e-02  4.10e-06  2.12e-03  1.57e-04  1.31e-05  2.19e-01  
 17  +4.9819e-01  +5.5903e-01  6.08e-02  4.01e-06  2.08e-03  1.16e-04  1.28e-05  1.93e-01  
 18  +4.9775e-01  +5.5637e-01  5.86e-02  3.74e-06  1.94e-03  1.02e-04  1.20e-05  1.52e-01  
 19  +4.9701e-01  +5.5195e-01  5.49e-02  3.49e-06  1.81e-03  6.80e-05  1.13e-05  2.77e-01  
 20  +4.9438e-01  +5.3923e-01  4.49e-02  2.47e-06  1.28e-03  5.11e-05  8.09e-06  3.76e-01  
 21  +4.9214e-01  +5.2867e-01  3.65e-02  1.91e-06  9.92e-04  2.70e-05  6.39e-06  4.16e-01  
 22  +4.9207e-01  +5.2827e-01  3.62e-02  1.89e-06  9.77e-04  2.52e-05  6.30e-06  6.68e-02  
 23  +4.9182e-01  +5.2671e-01  3.49e-02  1.79e-06  9.25e-04  1.47e-05  5.98e-06  3.63e-01  
 24  +4.9145e-01  +5.2504e-01  3.36e-02  1.68e-06  8.71e-04  1.09e-05  5.64e-06  2.42e-01  
 25  +4.9132e-01  +5.2442e-01  3.31e-02  1.66e-06  8.59e-04  9.02e-06  5.57e-06  1.47e-01  
 26  +4.8920e-01  +5.1557e-01  2.64e-02  1.24e-06  6.43e-04  6.43e-06  4.23e-06  3.06e-01  
 27  +4.8891e-01  +5.1425e-01  2.53e-02  1.17e-06  6.04e-04  4.17e-06  3.98e-06  3.41e-01  
 28  +4.8758e-01  +5.0879e-01  2.12e-02  9.41e-07  4.88e-04  2.57e-06  3.25e-06  3.81e-01  
 29  +4.8754e-01  +5.0853e-01  2.10e-02  9.22e-07  4.77e-04  2.08e-06  3.18e-06  2.05e-01  
 30  +4.8383e-01  +4.9379e-01  9.96e-03  4.08e-07  2.11e-04  8.12e-07  1.45e-06  6.03e-01  
 31  +4.8331e-01  +4.9171e-01  8.39e-03  3.36e-07  1.74e-04  5.80e-07  1.20e-06  3.27e-01  
 32  +4.8292e-01  +4.9019e-01  7.27e-03  2.86e-07  1.48e-04  4.95e-07  1.02e-06  1.73e-01  
 33  +4.8278e-01  +4.8971e-01  6.93e-03  2.78e-07  1.44e-04  4.18e-07  1.02e-06  8.03e-02  
 34  +4.8230e-01  +4.8777e-01  5.47e-03  2.16e-07  1.12e-04  2.73e-07  7.95e-07  3.93e-01  
 35  +4.8194e-01  +4.8639e-01  4.45e-03  1.74e-07  9.01e-05  2.06e-07  6.41e-07  2.79e-01  
 36  +4.8126e-01  +4.8386e-01  2.59e-03  9.86e-08  5.10e-05  8.89e-08  3.62e-07  6.57e-01  
 37  +4.8037e-01  +4.8065e-01  2.78e-04  1.04e-08  5.39e-06  3.09e-09  3.90e-08  9.83e-01  
 38  +4.8026e-01  +4.8027e-01  4.78e-06  1.78e-10  9.23e-08  5.31e-11  6.70e-10  9.83e-01  
 39  +4.8026e-01  +4.8026e-01  4.78e-08  1.78e-12  9.23e-10  5.31e-13  6.70e-12  9.90e-01  
 40  +4.8026e-01  +4.8026e-01  4.81e-10  1.79e-14  9.28e-12  6.88e-15  8.58e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.766567s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:34 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:34 PM: Optimal value: 4.803e-01
(CVXPY) Aug 30 12:22:34 PM: Compilation took 2.728e-01 seconds
(CVXPY) Aug 30 12:22:34 PM: Solver (including time spent in interface) took 1.841e+00 seconds
Iteration: 13, Objective: 0.4803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:34 PM: Your problem has 25142 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:34 PM: Finished problem compilation (took 2.635e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25142
  constraints   = 50142
  nnz(P)        = 0
  nnz(A)        = 401373
  cones (total) = 1
    : Nonnegative = 1,  numel = 50142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3470e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3491e-01  +6.3134e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6443e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1727e+00  6.73e-01  2.01e-03  1.04e+00  2.36e-05  1.91e-01  2.12e-01  
  6  +5.0001e-01  +7.3974e-01  2.40e-01  7.16e-04  3.70e-01  6.09e-06  7.34e-02  8.15e-01  
  7  +5.0000e-01  +6.5721e-01  1.57e-01  4.69e-04  2.42e-01  4.04e-06  4.49e-02  4.77e-01  
  8  +5.0000e-01  +6.3410e-01  1.34e-01  4.00e-04  2.07e-01  3.24e-06  2.78e-02  6.09e-01  
  9  +5.0000e-01  +6.2560e-01  1.26e-01  3.74e-04  1.93e-01  3.07e-06  1.64e-02  6.29e-01  
 10  +5.0000e-01  +6.0569e-01  1.06e-01  3.10e-04  1.60e-01  2.88e-06  5.49e-03  9.90e-01  
 11  +4.9993e-01  +5.9618e-01  9.62e-02  9.03e-05  4.68e-02  3.81e-05  3.33e-04  9.43e-01  
 12  +4.9918e-01  +5.9139e-01  9.22e-02  9.56e-06  4.96e-03  3.81e-04  3.13e-05  9.07e-01  
 13  +4.9891e-01  +5.8524e-01  8.63e-02  8.33e-06  4.32e-03  3.48e-04  2.72e-05  2.03e-01  
 14  +4.9870e-01  +5.7570e-01  7.70e-02  7.17e-06  3.72e-03  2.36e-04  2.33e-05  3.46e-01  
 15  +4.9868e-01  +5.7307e-01  7.44e-02  6.83e-06  3.54e-03  1.99e-04  2.21e-05  1.67e-01  
 16  +4.9846e-01  +5.6953e-01  7.11e-02  6.02e-06  3.12e-03  1.75e-04  1.95e-05  2.39e-01  
 17  +4.9823e-01  +5.6069e-01  6.25e-02  5.18e-06  2.69e-03  5.74e-05  1.67e-05  6.19e-01  
 18  +4.9790e-01  +5.5861e-01  6.07e-02  4.61e-06  2.39e-03  5.28e-05  1.49e-05  2.12e-01  
 19  +4.9739e-01  +5.5416e-01  5.68e-02  4.04e-06  2.10e-03  2.39e-05  1.31e-05  5.50e-01  
 20  +4.9611e-01  +5.4798e-01  5.19e-02  3.34e-06  1.73e-03  1.86e-05  1.09e-05  3.21e-01  
 21  +4.9351e-01  +5.3595e-01  4.24e-02  2.36e-06  1.22e-03  1.50e-05  7.77e-06  3.41e-01  
 22  +4.9220e-01  +5.2984e-01  3.76e-02  2.01e-06  1.04e-03  1.07e-05  6.68e-06  2.77e-01  
 23  +4.9183e-01  +5.2809e-01  3.63e-02  1.90e-06  9.85e-04  9.27e-06  6.34e-06  1.34e-01  
 24  +4.9167e-01  +5.2715e-01  3.55e-02  1.84e-06  9.52e-04  6.56e-06  6.13e-06  2.62e-01  
 25  +4.9109e-01  +5.2459e-01  3.35e-02  1.70e-06  8.78e-04  5.32e-06  5.68e-06  1.88e-01  
 26  +4.9001e-01  +5.1977e-01  2.98e-02  1.45e-06  7.52e-04  3.10e-06  4.90e-06  3.96e-01  
 27  +4.8965e-01  +5.1813e-01  2.85e-02  1.37e-06  7.09e-04  2.31e-06  4.63e-06  2.54e-01  
 28  +4.8726e-01  +5.0813e-01  2.09e-02  9.43e-07  4.89e-04  1.22e-06  3.24e-06  4.80e-01  
 29  +4.8627e-01  +5.0395e-01  1.77e-02  7.74e-07  4.01e-04  7.95e-07  2.68e-06  3.84e-01  
 30  +4.8358e-01  +4.9299e-01  9.41e-03  3.90e-07  2.02e-04  3.63e-07  1.38e-06  5.63e-01  
 31  +4.8331e-01  +4.9183e-01  8.52e-03  3.45e-07  1.79e-04  2.68e-07  1.22e-06  3.57e-01  
 32  +4.8315e-01  +4.9121e-01  8.06e-03  3.23e-07  1.67e-04  2.46e-07  1.14e-06  1.11e-01  
 33  +4.8301e-01  +4.9066e-01  7.65e-03  3.10e-07  1.61e-04  1.78e-07  1.12e-06  3.31e-01  
 34  +4.8209e-01  +4.8698e-01  4.89e-03  1.95e-07  1.01e-04  1.02e-07  7.09e-07  4.96e-01  
 35  +4.8193e-01  +4.8641e-01  4.48e-03  1.76e-07  9.12e-05  8.67e-08  6.37e-07  2.67e-01  
 36  +4.8106e-01  +4.8318e-01  2.12e-03  8.05e-08  4.17e-05  3.77e-08  2.95e-07  6.57e-01  
 37  +4.8035e-01  +4.8059e-01  2.35e-04  8.79e-09  4.55e-06  3.69e-09  3.29e-08  9.21e-01  
 38  +4.8027e-01  +4.8028e-01  1.32e-05  4.91e-10  2.55e-07  1.65e-10  1.85e-09  9.85e-01  
 39  +4.8026e-01  +4.8026e-01  1.32e-07  4.94e-12  2.56e-09  1.66e-12  1.86e-11  9.90e-01  
 40  +4.8026e-01  +4.8026e-01  1.33e-09  4.96e-14  2.57e-11  2.12e-14  2.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6402117s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:36 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:36 PM: Optimal value: 4.803e-01
(CVXPY) Aug 30 12:22:36 PM: Compilation took 2.635e-01 seconds
(CVXPY) Aug 30 12:22:36 PM: Solver (including time spent in interface) took 1.695e+00 seconds
Iteration: 14, Objective: 0.4803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:36 PM: Your problem has 25150 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:36 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:37 PM: Finished problem compilation (took 2.945e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25150
  constraints   = 50150
  nnz(P)        = 0
  nnz(A)        = 407733
  cones (total) = 1
    : Nonnegative = 1,  numel = 50150

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3471e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3490e-01  +6.3128e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6442e+02  1.64e+02  1.47e-01  7.38e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5934e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1712e+00  6.71e-01  2.01e-03  1.04e+00  2.36e-05  1.91e-01  2.13e-01  
  6  +5.0001e-01  +7.4127e-01  2.41e-01  7.21e-04  3.72e-01  6.06e-06  7.34e-02  8.27e-01  
  7  +5.0000e-01  +6.4813e-01  1.48e-01  4.42e-04  2.29e-01  3.55e-06  4.05e-02  6.12e-01  
  8  +5.0000e-01  +6.2292e-01  1.23e-01  3.67e-04  1.90e-01  3.15e-06  2.31e-02  6.06e-01  
  9  +5.0000e-01  +6.1917e-01  1.19e-01  3.55e-04  1.84e-01  3.43e-06  1.45e-02  5.16e-01  
 10  +5.0000e-01  +6.0121e-01  1.01e-01  2.91e-04  1.51e-01  5.22e-06  3.84e-03  9.90e-01  
 11  +4.9964e-01  +5.9085e-01  9.12e-02  2.76e-05  1.43e-02  1.78e-04  9.25e-05  9.79e-01  
 12  +4.9925e-01  +5.8175e-01  8.25e-02  1.24e-05  6.44e-03  3.08e-04  4.08e-05  6.56e-01  
 13  +4.9926e-01  +5.7446e-01  7.52e-02  9.91e-06  5.14e-03  2.21e-04  3.23e-05  4.81e-01  
 14  +4.9905e-01  +5.7166e-01  7.26e-02  7.98e-06  4.14e-03  2.26e-04  2.59e-05  3.00e-01  
 15  +4.9896e-01  +5.6892e-01  7.00e-02  7.10e-06  3.68e-03  1.88e-04  2.30e-05  2.93e-01  
 16  +4.9837e-01  +5.6130e-01  6.29e-02  4.96e-06  2.57e-03  1.11e-04  1.60e-05  7.06e-01  
 17  +4.9821e-01  +5.6047e-01  6.23e-02  4.92e-06  2.55e-03  1.03e-04  1.60e-05  5.61e-02  
 18  +4.9788e-01  +5.5851e-01  6.06e-02  4.64e-06  2.40e-03  8.53e-05  1.51e-05  2.01e-01  
 19  +4.9687e-01  +5.5343e-01  5.66e-02  3.85e-06  2.00e-03  7.54e-05  1.25e-05  2.71e-01  
 20  +4.9490e-01  +5.4372e-01  4.88e-02  2.96e-06  1.54e-03  4.26e-05  9.75e-06  4.87e-01  
 21  +4.9330e-01  +5.3632e-01  4.30e-02  2.46e-06  1.28e-03  2.57e-05  8.18e-06  3.80e-01  
 22  +4.9190e-01  +5.2989e-01  3.80e-02  2.06e-06  1.07e-03  1.04e-05  6.89e-06  5.36e-01  
 23  +4.9125e-01  +5.2708e-01  3.58e-02  1.88e-06  9.76e-04  8.39e-06  6.33e-06  1.97e-01  
 24  +4.9109e-01  +5.2638e-01  3.53e-02  1.85e-06  9.57e-04  7.41e-06  6.22e-06  1.03e-01  
 25  +4.8998e-01  +5.2164e-01  3.17e-02  1.60e-06  8.28e-04  3.91e-06  5.42e-06  4.35e-01  
 26  +4.8904e-01  +5.1766e-01  2.86e-02  1.40e-06  7.27e-04  3.17e-06  4.79e-06  1.99e-01  
 27  +4.8590e-01  +5.0446e-01  1.86e-02  8.33e-07  4.32e-04  1.09e-06  2.90e-06  6.57e-01  
 28  +4.8495e-01  +5.0048e-01  1.55e-02  6.79e-07  3.52e-04  7.92e-07  2.38e-06  3.04e-01  
 29  +4.8426e-01  +4.9734e-01  1.31e-02  5.47e-07  2.84e-04  2.62e-07  1.92e-06  8.00e-01  
 30  +4.8329e-01  +4.9346e-01  1.02e-02  4.21e-07  2.18e-04  1.98e-07  1.49e-06  2.66e-01  
 31  +4.8197e-01  +4.8812e-01  6.14e-03  2.47e-07  1.28e-04  6.89e-08  8.84e-07  9.90e-01  
 32  +4.8147e-01  +4.8620e-01  4.72e-03  1.88e-07  9.77e-05  5.32e-08  6.78e-07  3.04e-01  
 33  +4.8066e-01  +4.8305e-01  2.39e-03  9.39e-08  4.87e-05  2.71e-08  3.43e-07  9.90e-01  
 34  +4.8054e-01  +4.8260e-01  2.07e-03  8.04e-08  4.17e-05  2.35e-08  2.94e-07  1.92e-01  
 35  +4.8052e-01  +4.8254e-01  2.02e-03  7.95e-08  4.12e-05  2.26e-08  2.93e-07  8.53e-02  
 36  +4.8032e-01  +4.8181e-01  1.48e-03  5.80e-08  3.01e-05  1.65e-08  2.15e-07  3.83e-01  
 37  +4.8031e-01  +4.8178e-01  1.47e-03  5.67e-08  2.94e-05  1.66e-08  2.09e-07  2.30e-01  
 38  +4.7983e-01  +4.8000e-01  1.72e-04  6.55e-09  3.40e-06  1.90e-09  2.47e-08  9.61e-01  
 39  +4.7976e-01  +4.7976e-01  2.12e-06  8.01e-11  4.15e-08  2.31e-11  3.05e-10  9.90e-01  
 40  +4.7976e-01  +4.7976e-01  2.12e-08  8.01e-13  4.15e-10  2.32e-13  3.06e-12  9.90e-01  
 41  +4.7976e-01  +4.7976e-01  2.19e-10  8.30e-15  4.29e-12  6.26e-15  7.75e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5776991s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:38 PM: Optimal value: 4.798e-01
(CVXPY) Aug 30 12:22:38 PM: Compilation took 2.945e-01 seconds
(CVXPY) Aug 30 12:22:38 PM: Solver (including time spent in interface) took 1.643e+00 seconds
Iteration: 15, Objective: 0.4798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:39 PM: Your problem has 25160 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:39 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:39 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:39 PM: Finished problem compilation (took 3.220e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25160
  constraints   = 50160
  nnz(P)        = 0
  nnz(A)        = 412184
  cones (total) = 1
    : Nonnegative = 1,  numel = 50160

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3472e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3490e-01  +6.3121e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6440e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5937e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1655e+00  6.66e-01  1.99e-03  1.03e+00  2.36e-05  1.91e-01  2.16e-01  
  6  +5.0001e-01  +7.7383e-01  2.74e-01  8.18e-04  4.23e-01  7.06e-06  8.14e-02  8.13e-01  
  7  +5.0001e-01  +6.8676e-01  1.87e-01  5.58e-04  2.88e-01  4.48e-06  5.11e-02  5.42e-01  
  8  +5.0000e-01  +6.4723e-01  1.47e-01  4.40e-04  2.27e-01  3.91e-06  3.36e-02  3.97e-01  
  9  +5.0000e-01  +6.3226e-01  1.32e-01  3.94e-04  2.04e-01  3.92e-06  1.75e-02  6.85e-01  
 10  +4.9999e-01  +6.0715e-01  1.07e-01  3.04e-04  1.57e-01  1.08e-05  3.60e-03  8.49e-01  
 11  +4.9928e-01  +5.8847e-01  8.92e-02  2.42e-05  1.25e-02  3.58e-04  8.25e-05  9.89e-01  
 12  +4.9884e-01  +5.7997e-01  8.11e-02  1.28e-05  6.62e-03  4.78e-04  4.27e-05  6.47e-01  
 13  +4.9879e-01  +5.7650e-01  7.77e-02  1.05e-05  5.43e-03  4.17e-04  3.47e-05  3.88e-01  
 14  +4.9866e-01  +5.7441e-01  7.58e-02  8.97e-06  4.65e-03  3.98e-04  2.96e-05  2.70e-01  
 15  +4.9824e-01  +5.6488e-01  6.66e-02  5.66e-06  2.94e-03  1.64e-04  1.86e-05  9.21e-01  
 16  +4.9800e-01  +5.6363e-01  6.56e-02  5.27e-06  2.74e-03  1.34e-04  1.73e-05  2.52e-01  
 17  +4.9598e-01  +5.5273e-01  5.68e-02  3.69e-06  1.91e-03  6.53e-05  1.22e-05  6.86e-01  
 18  +4.9487e-01  +5.4753e-01  5.27e-02  3.26e-06  1.69e-03  5.53e-05  1.08e-05  1.89e-01  
 19  +4.9439e-01  +5.4528e-01  5.09e-02  3.11e-06  1.61e-03  4.49e-05  1.04e-05  1.66e-01  
 20  +4.9225e-01  +5.3553e-01  4.33e-02  2.43e-06  1.26e-03  3.02e-05  8.17e-06  3.59e-01  
 21  +4.9093e-01  +5.2980e-01  3.89e-02  2.07e-06  1.07e-03  2.32e-05  6.98e-06  2.58e-01  
 22  +4.9078e-01  +5.2930e-01  3.85e-02  2.05e-06  1.06e-03  2.09e-05  6.95e-06  7.57e-02  
 23  +4.8963e-01  +5.2434e-01  3.47e-02  1.78e-06  9.21e-04  1.71e-05  6.05e-06  2.00e-01  
 24  +4.8892e-01  +5.2134e-01  3.24e-02  1.60e-06  8.31e-04  1.24e-05  5.48e-06  2.75e-01  
 25  +4.8852e-01  +5.1964e-01  3.11e-02  1.50e-06  7.78e-04  8.12e-06  5.14e-06  3.30e-01  
 26  +4.8711e-01  +5.1380e-01  2.67e-02  1.24e-06  6.43e-04  6.16e-06  4.29e-06  2.50e-01  
 27  +4.8545e-01  +5.0679e-01  2.13e-02  9.39e-07  4.87e-04  2.31e-06  3.29e-06  6.15e-01  
 28  +4.8429e-01  +5.0190e-01  1.76e-02  7.44e-07  3.86e-04  6.51e-07  2.63e-06  7.45e-01  
 29  +4.8177e-01  +4.9186e-01  1.01e-02  4.10e-07  2.13e-04  3.15e-07  1.49e-06  5.39e-01  
 30  +4.8148e-01  +4.9059e-01  9.12e-03  3.67e-07  1.90e-04  2.35e-07  1.33e-06  3.46e-01  
 31  +4.7950e-01  +4.8292e-01  3.41e-03  1.34e-07  6.92e-05  7.16e-08  4.99e-07  7.41e-01  
 32  +4.7931e-01  +4.8220e-01  2.89e-03  1.12e-07  5.80e-05  5.83e-08  4.19e-07  2.29e-01  
 33  +4.7858e-01  +4.7939e-01  8.19e-04  3.14e-08  1.63e-05  9.33e-09  1.20e-07  9.90e-01  
 34  +4.7827e-01  +4.7828e-01  1.74e-05  6.63e-10  3.44e-07  1.87e-10  2.56e-09  9.87e-01  
 35  +4.7826e-01  +4.7826e-01  1.74e-07  6.64e-12  3.44e-09  1.87e-12  2.56e-11  9.90e-01  
 36  +4.7826e-01  +4.7826e-01  1.74e-09  6.63e-14  3.44e-11  1.87e-14  2.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3030618s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:40 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:40 PM: Optimal value: 4.783e-01
(CVXPY) Aug 30 12:22:40 PM: Compilation took 3.220e-01 seconds
(CVXPY) Aug 30 12:22:40 PM: Solver (including time spent in interface) took 1.371e+00 seconds
Iteration: 16, Objective: 0.4783
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:41 PM: Your problem has 25170 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:41 PM: Finished problem compilation (took 3.344e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25170
  constraints   = 50170
  nnz(P)        = 0
  nnz(A)        = 416534
  cones (total) = 1
    : Nonnegative = 1,  numel = 50170

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3473e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3111e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6437e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5937e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.1009e+00  6.01e-01  1.80e-03  9.28e-01  2.37e-05  1.91e-01  2.40e-01  
  6  +5.0001e-01  +7.4176e-01  2.42e-01  7.22e-04  3.73e-01  6.77e-06  7.41e-02  8.48e-01  
  7  +5.0000e-01  +6.4678e-01  1.47e-01  4.38e-04  2.27e-01  4.34e-06  4.02e-02  5.45e-01  
  8  +5.0000e-01  +6.5050e-01  1.50e-01  4.49e-04  2.32e-01  4.03e-06  2.45e-02  7.13e-01  
  9  +5.0000e-01  +6.1316e-01  1.13e-01  3.32e-04  1.72e-01  6.39e-06  5.98e-03  9.28e-01  
 10  +4.9968e-01  +5.9357e-01  9.39e-02  4.83e-05  2.50e-02  1.61e-04  1.71e-04  9.90e-01  
 11  +4.9891e-01  +5.8643e-01  8.75e-02  1.45e-05  7.53e-03  4.81e-04  4.91e-05  7.56e-01  
 12  +4.9902e-01  +5.8234e-01  8.33e-02  1.28e-05  6.64e-03  3.69e-04  4.29e-05  3.57e-01  
 13  +4.9860e-01  +5.7727e-01  7.87e-02  8.94e-06  4.64e-03  3.97e-04  2.97e-05  4.49e-01  
 14  +4.9850e-01  +5.7503e-01  7.65e-02  7.85e-06  4.08e-03  3.46e-04  2.59e-05  2.92e-01  
 15  +4.9859e-01  +5.7247e-01  7.39e-02  7.47e-06  3.88e-03  1.93e-04  2.49e-05  4.16e-01  
 16  +4.9832e-01  +5.6990e-01  7.16e-02  6.63e-06  3.44e-03  1.44e-04  2.20e-05  3.67e-01  
 17  +4.9708e-01  +5.6095e-01  6.39e-02  4.84e-06  2.51e-03  6.03e-05  1.60e-05  7.39e-01  
 18  +4.9505e-01  +5.5068e-01  5.56e-02  3.62e-06  1.88e-03  4.29e-05  1.21e-05  4.34e-01  
 19  +4.9378e-01  +5.4455e-01  5.08e-02  3.11e-06  1.61e-03  3.60e-05  1.04e-05  2.08e-01  
 20  +4.9345e-01  +5.4299e-01  4.95e-02  2.99e-06  1.55e-03  2.35e-05  1.01e-05  2.97e-01  
 21  +4.9205e-01  +5.3659e-01  4.45e-02  2.52e-06  1.31e-03  1.39e-05  8.52e-06  4.04e-01  
 22  +4.9116e-01  +5.3262e-01  4.15e-02  2.25e-06  1.17e-03  1.15e-05  7.65e-06  1.93e-01  
 23  +4.9064e-01  +5.3033e-01  3.97e-02  2.10e-06  1.09e-03  7.23e-06  7.15e-06  3.42e-01  
 24  +4.8936e-01  +5.2485e-01  3.55e-02  1.80e-06  9.32e-04  4.90e-06  6.16e-06  3.21e-01  
 25  +4.8831e-01  +5.2021e-01  3.19e-02  1.55e-06  8.06e-04  2.67e-06  5.36e-06  4.41e-01  
 26  +4.8642e-01  +5.1215e-01  2.57e-02  1.19e-06  6.20e-04  1.63e-06  4.17e-06  3.98e-01  
 27  +4.8521e-01  +5.0664e-01  2.14e-02  9.50e-07  4.93e-04  6.17e-07  3.34e-06  6.70e-01  
 28  +4.8355e-01  +4.9976e-01  1.62e-02  7.01e-07  3.64e-04  4.47e-07  2.49e-06  2.86e-01  
 29  +4.8324e-01  +4.9837e-01  1.51e-02  6.46e-07  3.35e-04  3.48e-07  2.30e-06  3.15e-01  
 30  +4.8147e-01  +4.9109e-01  9.62e-03  4.01e-07  2.08e-04  2.05e-07  1.45e-06  4.47e-01  
 31  +4.7983e-01  +4.8440e-01  4.57e-03  1.85e-07  9.57e-05  7.93e-08  6.76e-07  7.10e-01  
 32  +4.7943e-01  +4.8284e-01  3.40e-03  1.36e-07  7.08e-05  5.66e-08  5.01e-07  3.44e-01  
 33  +4.7845e-01  +4.7899e-01  5.43e-04  2.15e-08  1.11e-05  6.05e-09  8.01e-08  9.90e-01  
 34  +4.7826e-01  +4.7827e-01  1.46e-05  5.76e-10  2.99e-07  1.60e-10  2.16e-09  9.75e-01  
 35  +4.7825e-01  +4.7825e-01  1.64e-07  6.48e-12  3.36e-09  1.80e-12  2.42e-11  9.89e-01  
 36  +4.7825e-01  +4.7825e-01  1.64e-09  6.48e-14  3.36e-11  1.80e-14  2.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3987959s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:42 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:42 PM: Optimal value: 4.783e-01
(CVXPY) Aug 30 12:22:42 PM: Compilation took 3.344e-01 seconds
(CVXPY) Aug 30 12:22:42 PM: Solver (including time spent in interface) took 1.453e+00 seconds
Iteration: 17, Objective: 0.4783
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:43 PM: Your problem has 25177 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:43 PM: Finished problem compilation (took 3.621e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25177
  constraints   = 50177
  nnz(P)        = 0
  nnz(A)        = 419860
  cones (total) = 1
    : Nonnegative = 1,  numel = 50177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3472e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3110e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6436e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5935e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.1086e+00  6.09e-01  1.82e-03  9.40e-01  2.37e-05  1.91e-01  2.37e-01  
  6  +5.0000e-01  +7.3204e-01  2.32e-01  6.93e-04  3.59e-01  6.93e-06  7.28e-02  7.99e-01  
  7  +5.0000e-01  +6.5345e-01  1.53e-01  4.58e-04  2.37e-01  4.62e-06  4.18e-02  5.50e-01  
  8  +5.0000e-01  +6.3469e-01  1.35e-01  4.02e-04  2.08e-01  4.42e-06  2.33e-02  6.34e-01  
  9  +4.9999e-01  +6.1465e-01  1.15e-01  3.37e-04  1.74e-01  8.58e-06  6.28e-03  8.58e-01  
 10  +4.9975e-01  +5.9320e-01  9.35e-02  7.75e-05  4.02e-02  1.28e-04  2.90e-04  9.90e-01  
 11  +4.9903e-01  +5.8726e-01  8.82e-02  2.13e-05  1.11e-02  4.49e-04  7.32e-05  7.78e-01  
 12  +4.9894e-01  +5.8310e-01  8.42e-02  1.66e-05  8.60e-03  4.35e-04  5.61e-05  3.96e-01  
 13  +4.9870e-01  +5.7525e-01  7.66e-02  1.03e-05  5.37e-03  3.78e-04  3.44e-05  6.98e-01  
 14  +4.9844e-01  +5.7343e-01  7.50e-02  8.70e-06  4.52e-03  3.95e-04  2.88e-05  2.33e-01  
 15  +4.9857e-01  +5.7255e-01  7.40e-02  8.46e-06  4.39e-03  2.88e-04  2.80e-05  2.72e-01  
 16  +4.9832e-01  +5.7086e-01  7.25e-02  7.37e-06  3.83e-03  2.83e-04  2.43e-05  2.20e-01  
 17  +4.9791e-01  +5.6670e-01  6.88e-02  5.83e-06  3.03e-03  1.54e-04  1.92e-05  6.46e-01  
 18  +4.9692e-01  +5.6123e-01  6.43e-02  4.80e-06  2.49e-03  1.28e-04  1.58e-05  3.32e-01  
 19  +4.9382e-01  +5.4534e-01  5.15e-02  3.06e-06  1.59e-03  8.92e-05  1.02e-05  5.26e-01  
 20  +4.9342e-01  +5.4341e-01  5.00e-02  2.91e-06  1.51e-03  7.01e-05  9.74e-06  2.00e-01  
 21  +4.9310e-01  +5.4188e-01  4.88e-02  2.83e-06  1.47e-03  4.64e-05  9.50e-06  2.74e-01  
 22  +4.9251e-01  +5.3917e-01  4.67e-02  2.64e-06  1.37e-03  3.42e-05  8.90e-06  2.41e-01  
 23  +4.9106e-01  +5.3257e-01  4.15e-02  2.22e-06  1.15e-03  1.73e-05  7.53e-06  4.59e-01  
 24  +4.8999e-01  +5.2787e-01  3.79e-02  1.95e-06  1.01e-03  1.34e-05  6.64e-06  2.34e-01  
 25  +4.8928e-01  +5.2476e-01  3.55e-02  1.78e-06  9.21e-04  1.02e-05  6.06e-06  2.42e-01  
 26  +4.8840e-01  +5.2092e-01  3.25e-02  1.58e-06  8.18e-04  6.35e-06  5.41e-06  3.57e-01  
 27  +4.8709e-01  +5.1523e-01  2.81e-02  1.30e-06  6.77e-04  2.11e-06  4.52e-06  6.30e-01  
 28  +4.8464e-01  +5.0496e-01  2.03e-02  8.99e-07  4.66e-04  1.32e-06  3.16e-06  3.86e-01  
 29  +4.8295e-01  +4.9754e-01  1.46e-02  6.13e-07  3.18e-04  3.65e-07  2.18e-06  7.88e-01  
 30  +4.8174e-01  +4.9263e-01  1.09e-02  4.50e-07  2.33e-04  2.37e-07  1.62e-06  4.18e-01  
 31  +4.8087e-01  +4.8885e-01  7.98e-03  3.21e-07  1.66e-04  8.94e-08  1.16e-06  9.90e-01  
 32  +4.7994e-01  +4.8526e-01  5.33e-03  2.13e-07  1.10e-04  5.96e-08  7.75e-07  3.68e-01  
 33  +4.7883e-01  +4.8099e-01  2.16e-03  8.54e-08  4.43e-05  2.40e-08  3.16e-07  9.90e-01  
 34  +4.7834e-01  +4.7914e-01  8.06e-04  3.18e-08  1.65e-05  8.93e-09  1.18e-07  6.70e-01  
 35  +4.7808e-01  +4.7819e-01  1.09e-04  4.27e-09  2.22e-06  1.19e-09  1.60e-08  9.90e-01  
 36  +4.7804e-01  +4.7804e-01  1.13e-06  4.46e-11  2.31e-08  1.24e-11  1.67e-10  9.90e-01  
 37  +4.7804e-01  +4.7804e-01  1.13e-08  4.46e-13  2.31e-10  1.24e-13  1.67e-12  9.90e-01  
 38  +4.7804e-01  +4.7804e-01  1.21e-10  4.81e-15  2.48e-12  1.38e-15  1.86e-14  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5355044s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:45 PM: Optimal value: 4.780e-01
(CVXPY) Aug 30 12:22:45 PM: Compilation took 3.621e-01 seconds
(CVXPY) Aug 30 12:22:45 PM: Solver (including time spent in interface) took 1.601e+00 seconds
Iteration: 18, Objective: 0.4780
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:45 PM: Your problem has 25187 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:45 PM: Finished problem compilation (took 3.281e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25187
  constraints   = 50187
  nnz(P)        = 0
  nnz(A)        = 423812
  cones (total) = 1
    : Nonnegative = 1,  numel = 50187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3471e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3109e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6436e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5933e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.0980e+00  5.98e-01  1.79e-03  9.24e-01  2.38e-05  1.90e-01  2.41e-01  
  6  +5.0000e-01  +7.0291e-01  2.03e-01  6.06e-04  3.14e-01  6.44e-06  6.54e-02  7.94e-01  
  7  +5.0000e-01  +6.4344e-01  1.43e-01  4.29e-04  2.22e-01  4.58e-06  3.72e-02  5.90e-01  
  8  +5.0000e-01  +6.6233e-01  1.62e-01  4.84e-04  2.51e-01  4.20e-06  2.28e-02  7.89e-01  
  9  +5.0000e-01  +6.1830e-01  1.18e-01  3.46e-04  1.79e-01  5.08e-06  5.73e-03  9.90e-01  
 10  +4.9976e-01  +5.9442e-01  9.47e-02  4.74e-05  2.46e-02  1.22e-04  1.67e-04  9.90e-01  
 11  +4.9891e-01  +5.8859e-01  8.97e-02  1.16e-05  6.00e-03  4.76e-04  3.87e-05  7.80e-01  
 12  +4.9871e-01  +5.8330e-01  8.46e-02  9.54e-06  4.95e-03  4.22e-04  3.16e-05  3.36e-01  
 13  +4.9882e-01  +5.7929e-01  8.05e-02  8.70e-06  4.52e-03  2.82e-04  2.86e-05  3.80e-01  
 14  +4.9884e-01  +5.7665e-01  7.78e-02  7.95e-06  4.13e-03  2.03e-04  2.60e-05  3.54e-01  
 15  +4.9880e-01  +5.7349e-01  7.47e-02  7.20e-06  3.74e-03  1.13e-04  2.35e-05  4.92e-01  
 16  +4.9849e-01  +5.7142e-01  7.29e-02  6.28e-06  3.26e-03  1.03e-04  2.05e-05  2.68e-01  
 17  +4.9811e-01  +5.6820e-01  7.01e-02  5.92e-06  3.08e-03  5.66e-05  1.94e-05  4.23e-01  
 18  +4.9647e-01  +5.5981e-01  6.33e-02  4.22e-06  2.19e-03  5.92e-05  1.39e-05  3.30e-01  
 19  +4.9465e-01  +5.5063e-01  5.60e-02  3.46e-06  1.79e-03  4.17e-05  1.15e-05  3.31e-01  
 20  +4.9320e-01  +5.4370e-01  5.05e-02  2.95e-06  1.53e-03  3.24e-05  9.87e-06  2.48e-01  
 21  +4.9271e-01  +5.4136e-01  4.86e-02  2.81e-06  1.46e-03  1.71e-05  9.45e-06  3.89e-01  
 22  +4.9241e-01  +5.3991e-01  4.75e-02  2.70e-06  1.40e-03  1.23e-05  9.09e-06  2.51e-01  
 23  +4.9018e-01  +5.2980e-01  3.96e-02  2.08e-06  1.08e-03  4.34e-06  7.08e-06  6.03e-01  
 24  +4.8915e-01  +5.2532e-01  3.62e-02  1.84e-06  9.53e-04  3.59e-06  6.27e-06  1.93e-01  
 25  +4.8860e-01  +5.2294e-01  3.43e-02  1.70e-06  8.82e-04  2.81e-06  5.82e-06  2.27e-01  
 26  +4.8818e-01  +5.2118e-01  3.30e-02  1.61e-06  8.35e-04  2.41e-06  5.53e-06  1.48e-01  
 27  +4.8800e-01  +5.2030e-01  3.23e-02  1.55e-06  8.03e-04  1.73e-06  5.31e-06  2.93e-01  
 28  +4.8545e-01  +5.0967e-01  2.42e-02  1.09e-06  5.67e-04  9.93e-07  3.82e-06  4.49e-01  
 29  +4.8545e-01  +5.0966e-01  2.42e-02  1.09e-06  5.66e-04  9.69e-07  3.81e-06  3.07e-02  
 30  +4.8318e-01  +5.0029e-01  1.71e-02  7.38e-07  3.83e-04  6.04e-07  2.62e-06  3.97e-01  
 31  +4.8184e-01  +4.9471e-01  1.29e-02  5.34e-07  2.77e-04  3.40e-07  1.92e-06  5.20e-01  
 32  +4.8071e-01  +4.9011e-01  9.40e-03  3.79e-07  1.97e-04  1.96e-07  1.38e-06  5.35e-01  
 33  +4.8019e-01  +4.8788e-01  7.69e-03  3.05e-07  1.58e-04  1.14e-07  1.11e-06  6.97e-01  
 34  +4.7907e-01  +4.8364e-01  4.56e-03  1.78e-07  9.25e-05  6.52e-08  6.60e-07  4.97e-01  
 35  +4.7894e-01  +4.8307e-01  4.13e-03  1.59e-07  8.27e-05  5.22e-08  5.89e-07  6.01e-01  
 36  +4.7862e-01  +4.8188e-01  3.26e-03  1.24e-07  6.46e-05  3.98e-08  4.61e-07  5.01e-01  
 37  +4.7855e-01  +4.8161e-01  3.06e-03  1.17e-07  6.06e-05  3.71e-08  4.33e-07  1.65e-01  
 38  +4.7827e-01  +4.8056e-01  2.29e-03  8.72e-08  4.52e-05  2.68e-08  3.25e-07  6.68e-01  
 39  +4.7784e-01  +4.7903e-01  1.18e-03  4.52e-08  2.34e-05  1.31e-08  1.70e-07  9.90e-01  
 40  +4.7749e-01  +4.7776e-01  2.76e-04  1.04e-08  5.38e-06  3.10e-09  3.93e-08  8.07e-01  
 41  +4.7738e-01  +4.7738e-01  3.46e-06  1.30e-10  6.76e-08  3.88e-11  4.94e-10  9.89e-01  
 42  +4.7738e-01  +4.7738e-01  3.46e-08  1.30e-12  6.76e-10  3.88e-13  4.95e-12  9.90e-01  
 43  +4.7738e-01  +4.7738e-01  3.47e-10  1.30e-14  6.78e-12  4.39e-15  5.57e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6466587s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:47 PM: Optimal value: 4.774e-01
(CVXPY) Aug 30 12:22:47 PM: Compilation took 3.281e-01 seconds
(CVXPY) Aug 30 12:22:47 PM: Solver (including time spent in interface) took 1.695e+00 seconds
Iteration: 19, Objective: 0.4774
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:47 PM: Your problem has 25189 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:48 PM: Finished problem compilation (took 3.513e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25189
  constraints   = 50189
  nnz(P)        = 0
  nnz(A)        = 425447
  cones (total) = 1
    : Nonnegative = 1,  numel = 50189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3471e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3108e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6435e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5933e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.1186e+00  6.19e-01  1.85e-03  9.56e-01  2.37e-05  1.91e-01  2.33e-01  
  6  +5.0000e-01  +6.9421e-01  1.94e-01  5.80e-04  3.00e-01  6.06e-06  6.28e-02  7.82e-01  
  7  +5.0000e-01  +6.4950e-01  1.50e-01  4.47e-04  2.31e-01  4.64e-06  3.90e-02  5.41e-01  
  8  +5.0000e-01  +6.5065e-01  1.51e-01  4.50e-04  2.33e-01  4.38e-06  2.27e-02  7.24e-01  
  9  +4.9999e-01  +6.2460e-01  1.25e-01  3.67e-04  1.90e-01  7.89e-06  7.43e-03  7.13e-01  
 10  +4.9984e-01  +5.9568e-01  9.58e-02  1.12e-04  5.79e-02  8.17e-05  4.44e-04  9.90e-01  
 11  +4.9917e-01  +5.9164e-01  9.25e-02  2.50e-05  1.30e-02  3.95e-04  8.63e-05  8.10e-01  
 12  +4.9939e-01  +5.7650e-01  7.71e-02  1.52e-05  7.87e-03  1.73e-04  5.07e-05  9.43e-01  
 13  +4.9898e-01  +5.7302e-01  7.40e-02  9.22e-06  4.79e-03  2.09e-04  3.04e-05  5.93e-01  
 14  +4.9906e-01  +5.7295e-01  7.39e-02  8.81e-06  4.58e-03  1.46e-04  2.89e-05  3.53e-01  
 15  +4.9879e-01  +5.7133e-01  7.25e-02  7.10e-06  3.69e-03  1.26e-04  2.32e-05  4.44e-01  
 16  +4.9851e-01  +5.6963e-01  7.11e-02  6.22e-06  3.23e-03  1.06e-04  2.03e-05  3.25e-01  
 17  +4.9843e-01  +5.6930e-01  7.09e-02  6.20e-06  3.22e-03  1.01e-04  2.03e-05  4.39e-02  
 18  +4.9660e-01  +5.5980e-01  6.32e-02  4.04e-06  2.10e-03  8.96e-05  1.33e-05  5.43e-01  
 19  +4.9477e-01  +5.5050e-01  5.57e-02  3.44e-06  1.78e-03  5.31e-05  1.14e-05  3.65e-01  
 20  +4.9333e-01  +5.4368e-01  5.04e-02  2.95e-06  1.53e-03  3.78e-05  9.88e-06  2.89e-01  
 21  +4.9306e-01  +5.4253e-01  4.95e-02  2.90e-06  1.51e-03  2.95e-05  9.74e-06  1.73e-01  
 22  +4.9191e-01  +5.3726e-01  4.54e-02  2.55e-06  1.33e-03  1.41e-05  8.61e-06  4.64e-01  
 23  +4.9106e-01  +5.3349e-01  4.24e-02  2.31e-06  1.20e-03  8.37e-06  7.83e-06  3.71e-01  
 24  +4.8923e-01  +5.2555e-01  3.63e-02  1.86e-06  9.67e-04  6.42e-06  6.38e-06  2.63e-01  
 25  +4.8891e-01  +5.2415e-01  3.52e-02  1.78e-06  9.22e-04  5.25e-06  6.08e-06  1.83e-01  
 26  +4.8827e-01  +5.2141e-01  3.31e-02  1.63e-06  8.45e-04  4.28e-06  5.60e-06  1.93e-01  
 27  +4.8772e-01  +5.1906e-01  3.13e-02  1.50e-06  7.80e-04  2.68e-06  5.18e-06  3.65e-01  
 28  +4.8506e-01  +5.0777e-01  2.27e-02  1.01e-06  5.24e-04  6.23e-07  3.53e-06  7.70e-01  
 29  +4.8382e-01  +5.0269e-01  1.89e-02  8.16e-07  4.24e-04  4.73e-07  2.88e-06  2.82e-01  
 30  +4.8380e-01  +5.0260e-01  1.88e-02  8.12e-07  4.21e-04  4.60e-07  2.87e-06  4.29e-02  
 31  +4.8262e-01  +4.9779e-01  1.52e-02  6.38e-07  3.31e-04  3.17e-07  2.28e-06  3.89e-01  
 32  +4.8129e-01  +4.9244e-01  1.12e-02  4.56e-07  2.37e-04  2.06e-07  1.65e-06  4.42e-01  
 33  +4.8087e-01  +4.9068e-01  9.82e-03  3.97e-07  2.06e-04  1.60e-07  1.44e-06  3.77e-01  
 34  +4.7912e-01  +4.8388e-01  4.76e-03  1.88e-07  9.73e-05  7.10e-08  6.95e-07  6.34e-01  
 35  +4.7913e-01  +4.8388e-01  4.75e-03  1.84e-07  9.56e-05  6.82e-08  6.80e-07  2.20e-01  
 36  +4.7883e-01  +4.8272e-01  3.89e-03  1.49e-07  7.74e-05  5.18e-08  5.52e-07  4.65e-01  
 37  +4.7868e-01  +4.8216e-01  3.47e-03  1.33e-07  6.89e-05  4.60e-08  4.92e-07  1.60e-01  
 38  +4.7857e-01  +4.8168e-01  3.11e-03  1.19e-07  6.18e-05  3.80e-08  4.42e-07  5.63e-01  
 39  +4.7829e-01  +4.8068e-01  2.39e-03  9.08e-08  4.71e-05  2.91e-08  3.38e-07  2.79e-01  
 40  +4.7766e-01  +4.7837e-01  7.08e-04  2.67e-08  1.39e-05  8.01e-09  1.01e-07  9.90e-01  
 41  +4.7739e-01  +4.7742e-01  2.95e-05  1.11e-09  5.77e-07  3.29e-10  4.22e-09  9.90e-01  
 42  +4.7738e-01  +4.7738e-01  2.96e-07  1.11e-11  5.77e-09  3.30e-12  4.22e-11  9.90e-01  
 43  +4.7738e-01  +4.7738e-01  2.96e-09  1.11e-13  5.77e-11  3.30e-14  4.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7518762s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:49 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:49 PM: Optimal value: 4.774e-01
(CVXPY) Aug 30 12:22:49 PM: Compilation took 3.513e-01 seconds
(CVXPY) Aug 30 12:22:49 PM: Solver (including time spent in interface) took 1.823e+00 seconds
Iteration: 20, Objective: 0.4774
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:50 PM: Your problem has 25194 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:50 PM: Finished problem compilation (took 2.937e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25194
  constraints   = 50194
  nnz(P)        = 0
  nnz(A)        = 427404
  cones (total) = 1
    : Nonnegative = 1,  numel = 50194

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3471e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3488e-01  +6.3104e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5934e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.1167e+00  6.17e-01  1.85e-03  9.53e-01  2.37e-05  1.91e-01  2.34e-01  
  6  +5.0000e-01  +7.0320e-01  2.03e-01  6.07e-04  3.14e-01  6.89e-06  6.68e-02  7.17e-01  
  7  +5.0000e-01  +6.4689e-01  1.47e-01  4.39e-04  2.27e-01  5.04e-06  3.92e-02  5.57e-01  
  8  +5.0000e-01  +6.3929e-01  1.39e-01  4.16e-04  2.15e-01  5.22e-06  2.40e-02  5.66e-01  
  9  +5.0000e-01  +6.3811e-01  1.38e-01  4.07e-04  2.11e-01  6.27e-06  8.25e-03  9.90e-01  
 10  +4.9986e-01  +6.1453e-01  1.15e-01  1.25e-04  6.50e-02  7.38e-05  4.88e-04  9.50e-01  
 11  +4.9929e-01  +6.0969e-01  1.10e-01  2.92e-05  1.52e-02  3.37e-04  9.99e-05  8.01e-01  
 12  +4.9964e-01  +5.9203e-01  9.24e-02  2.45e-05  1.27e-02  1.39e-04  8.28e-05  5.79e-01  
 13  +4.9896e-01  +5.8636e-01  8.74e-02  9.93e-06  5.16e-03  3.08e-04  3.29e-05  6.30e-01  
 14  +4.9909e-01  +5.7834e-01  7.92e-02  9.07e-06  4.71e-03  1.08e-04  2.98e-05  5.98e-01  
 15  +4.9895e-01  +5.7705e-01  7.81e-02  8.17e-06  4.25e-03  1.07e-04  2.68e-05  1.74e-01  
 16  +4.9893e-01  +5.7435e-01  7.54e-02  7.43e-06  3.86e-03  5.21e-05  2.42e-05  5.58e-01  
 17  +4.9867e-01  +5.7273e-01  7.41e-02  6.57e-06  3.41e-03  4.97e-05  2.14e-05  2.21e-01  
 18  +4.9799e-01  +5.6727e-01  6.93e-02  5.69e-06  2.95e-03  1.50e-05  1.86e-05  7.17e-01  
 19  +4.9654e-01  +5.6021e-01  6.37e-02  4.31e-06  2.24e-03  1.40e-05  1.42e-05  3.42e-01  
 20  +4.9565e-01  +5.5586e-01  6.02e-02  3.92e-06  2.04e-03  1.16e-05  1.30e-05  1.95e-01  
 21  +4.9428e-01  +5.4921e-01  5.49e-02  3.43e-06  1.78e-03  6.59e-06  1.15e-05  3.99e-01  
 22  +4.9362e-01  +5.4625e-01  5.26e-02  3.20e-06  1.66e-03  5.25e-06  1.07e-05  2.02e-01  
 23  +4.9149e-01  +5.3667e-01  4.52e-02  2.53e-06  1.31e-03  3.43e-06  8.58e-06  3.79e-01  
 24  +4.9025e-01  +5.3118e-01  4.09e-02  2.19e-06  1.14e-03  2.38e-06  7.47e-06  3.16e-01  
 25  +4.8834e-01  +5.2283e-01  3.45e-02  1.73e-06  8.99e-04  1.64e-06  5.97e-06  3.44e-01  
 26  +4.8825e-01  +5.2247e-01  3.42e-02  1.71e-06  8.87e-04  1.47e-06  5.90e-06  1.09e-01  
 27  +4.8669e-01  +5.1582e-01  2.91e-02  1.38e-06  7.18e-04  1.01e-06  4.82e-06  3.54e-01  
 28  +4.8658e-01  +5.1535e-01  2.88e-02  1.36e-06  7.07e-04  9.28e-07  4.75e-06  9.64e-02  
 29  +4.8509e-01  +5.0906e-01  2.40e-02  1.09e-06  5.65e-04  6.68e-07  3.83e-06  3.27e-01  
 30  +4.8509e-01  +5.0893e-01  2.38e-02  1.07e-06  5.55e-04  5.61e-07  3.76e-06  2.39e-01  
 31  +4.8356e-01  +5.0263e-01  1.91e-02  8.26e-07  4.29e-04  3.97e-07  2.94e-06  3.56e-01  
 32  +4.8354e-01  +5.0254e-01  1.90e-02  8.22e-07  4.27e-04  3.87e-07  2.92e-06  3.99e-02  
 33  +4.8145e-01  +4.9409e-01  1.26e-02  5.25e-07  2.73e-04  2.13e-07  1.91e-06  5.44e-01  
 34  +4.8114e-01  +4.9276e-01  1.16e-02  4.77e-07  2.48e-04  1.82e-07  1.74e-06  2.73e-01  
 35  +4.8021e-01  +4.8887e-01  8.65e-03  3.47e-07  1.80e-04  1.06e-07  1.27e-06  7.77e-01  
 36  +4.7870e-01  +4.8304e-01  4.34e-03  1.71e-07  8.88e-05  5.21e-08  6.40e-07  5.99e-01  
 37  +4.7868e-01  +4.8294e-01  4.26e-03  1.66e-07  8.59e-05  5.07e-08  6.17e-07  2.80e-01  
 38  +4.7798e-01  +4.8032e-01  2.34e-03  8.94e-08  4.64e-05  2.75e-08  3.36e-07  6.09e-01  
 39  +4.7791e-01  +4.8005e-01  2.14e-03  8.28e-08  4.30e-05  2.37e-08  3.15e-07  4.55e-01  
 40  +4.7761e-01  +4.7893e-01  1.32e-03  5.09e-08  2.64e-05  1.46e-08  1.95e-07  4.46e-01  
 41  +4.7750e-01  +4.7852e-01  1.02e-03  3.92e-08  2.03e-05  1.13e-08  1.49e-07  6.82e-01  
 42  +4.7739e-01  +4.7812e-01  7.36e-04  2.80e-08  1.45e-05  8.27e-09  1.06e-07  4.07e-01  
 43  +4.7711e-01  +4.7713e-01  2.23e-05  8.46e-10  4.39e-07  2.47e-10  3.24e-09  9.90e-01  
 44  +4.7710e-01  +4.7710e-01  2.24e-07  8.47e-12  4.40e-09  2.47e-12  3.24e-11  9.90e-01  
 45  +4.7710e-01  +4.7710e-01  2.24e-09  8.49e-14  4.41e-11  2.73e-14  3.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1054322s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:52 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:52 PM: Optimal value: 4.771e-01
(CVXPY) Aug 30 12:22:52 PM: Compilation took 2.937e-01 seconds
(CVXPY) Aug 30 12:22:52 PM: Solver (including time spent in interface) took 2.172e+00 seconds
Iteration: 21, Objective: 0.4771
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:53 PM: Your problem has 25197 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:53 PM: Finished problem compilation (took 3.549e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25197
  constraints   = 50197
  nnz(P)        = 0
  nnz(A)        = 428129
  cones (total) = 1
    : Nonnegative = 1,  numel = 50197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3471e+03  5.35e+03  4.24e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3488e-01  +6.3103e+02  6.30e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5934e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.0860e+00  5.86e-01  1.75e-03  9.06e-01  2.38e-05  1.90e-01  2.47e-01  
  6  +5.0000e-01  +7.0399e-01  2.04e-01  6.10e-04  3.16e-01  7.37e-06  6.78e-02  7.21e-01  
  7  +5.0000e-01  +6.4787e-01  1.48e-01  4.42e-04  2.29e-01  5.34e-06  3.95e-02  5.73e-01  
  8  +5.0000e-01  +6.4652e-01  1.47e-01  4.38e-04  2.27e-01  5.37e-06  2.78e-02  4.73e-01  
  9  +5.0001e-01  +6.6399e-01  1.64e-01  4.88e-04  2.52e-01  3.16e-06  1.49e-02  9.90e-01  
 10  +4.9998e-01  +6.2030e-01  1.20e-01  2.94e-04  1.52e-01  1.34e-05  1.92e-03  8.85e-01  
 11  +4.9912e-01  +6.1128e-01  1.12e-01  1.58e-05  8.21e-03  4.31e-04  5.30e-05  9.74e-01  
 12  +4.9887e-01  +5.9337e-01  9.45e-02  1.09e-05  5.65e-03  3.27e-04  3.61e-05  5.42e-01  
 13  +4.9882e-01  +5.9049e-01  9.17e-02  1.01e-05  5.22e-03  2.97e-04  3.32e-05  1.73e-01  
 14  +4.9881e-01  +5.7992e-01  8.11e-02  8.26e-06  4.29e-03  1.38e-04  2.70e-05  5.96e-01  
 15  +4.9880e-01  +5.7948e-01  8.07e-02  8.23e-06  4.27e-03  1.30e-04  2.69e-05  5.24e-02  
 16  +4.9842e-01  +5.7580e-01  7.74e-02  6.75e-06  3.51e-03  1.17e-04  2.20e-05  3.48e-01  
 17  +4.9826e-01  +5.7332e-01  7.51e-02  6.35e-06  3.30e-03  7.88e-05  2.07e-05  3.36e-01  
 18  +4.9622e-01  +5.6197e-01  6.57e-02  4.11e-06  2.13e-03  7.38e-05  1.35e-05  4.94e-01  
 19  +4.9495e-01  +5.5550e-01  6.05e-02  3.61e-06  1.88e-03  6.43e-05  1.20e-05  1.61e-01  
 20  +4.9384e-01  +5.4952e-01  5.57e-02  3.27e-06  1.70e-03  4.10e-05  1.09e-05  3.03e-01  
 21  +4.9330e-01  +5.4679e-01  5.35e-02  3.11e-06  1.61e-03  3.19e-05  1.04e-05  1.88e-01  
 22  +4.9190e-01  +5.4007e-01  4.82e-02  2.69e-06  1.40e-03  1.90e-05  9.09e-06  3.64e-01  
 23  +4.9073e-01  +5.3469e-01  4.40e-02  2.37e-06  1.23e-03  1.30e-05  8.06e-06  2.97e-01  
 24  +4.8855e-01  +5.2499e-01  3.64e-02  1.84e-06  9.54e-04  8.38e-06  6.33e-06  3.65e-01  
 25  +4.8840e-01  +5.2430e-01  3.59e-02  1.80e-06  9.34e-04  7.39e-06  6.20e-06  1.09e-01  
 26  +4.8760e-01  +5.2080e-01  3.32e-02  1.62e-06  8.42e-04  5.99e-06  5.63e-06  1.95e-01  
 27  +4.8760e-01  +5.2080e-01  3.32e-02  1.62e-06  8.42e-04  5.90e-06  5.62e-06  1.37e-02  
 28  +4.8648e-01  +5.1596e-01  2.95e-02  1.40e-06  7.24e-04  4.47e-06  4.87e-06  2.49e-01  
 29  +4.8397e-01  +5.0504e-01  2.11e-02  9.17e-07  4.76e-04  4.98e-07  3.25e-06  8.71e-01  
 30  +4.8297e-01  +5.0092e-01  1.79e-02  7.58e-07  3.93e-04  3.53e-07  2.70e-06  4.07e-01  
 31  +4.8296e-01  +5.0087e-01  1.79e-02  7.57e-07  3.93e-04  3.49e-07  2.70e-06  1.74e-02  
 32  +4.8146e-01  +4.9487e-01  1.34e-02  5.54e-07  2.87e-04  2.25e-07  2.01e-06  4.55e-01  
 33  +4.8080e-01  +4.9220e-01  1.14e-02  4.64e-07  2.41e-04  1.75e-07  1.69e-06  3.51e-01  
 34  +4.7939e-01  +4.8652e-01  7.12e-03  2.83e-07  1.47e-04  9.04e-08  1.05e-06  7.48e-01  
 35  +4.7838e-01  +4.8263e-01  4.24e-03  1.67e-07  8.65e-05  5.25e-08  6.23e-07  5.32e-01  
 36  +4.7824e-01  +4.8203e-01  3.79e-03  1.46e-07  7.60e-05  4.41e-08  5.46e-07  6.57e-01  
 37  +4.7784e-01  +4.8055e-01  2.71e-03  1.04e-07  5.38e-05  3.16e-08  3.89e-07  3.23e-01  
 38  +4.7776e-01  +4.8023e-01  2.47e-03  9.45e-08  4.90e-05  2.84e-08  3.55e-07  3.94e-01  
 39  +4.7692e-01  +4.7719e-01  2.67e-04  1.01e-08  5.26e-06  2.96e-09  3.86e-08  9.83e-01  
 40  +4.7682e-01  +4.7682e-01  3.30e-06  1.25e-10  6.49e-08  3.64e-11  4.78e-10  9.90e-01  
 41  +4.7682e-01  +4.7682e-01  3.30e-08  1.25e-12  6.49e-10  3.64e-13  4.78e-12  9.90e-01  
 42  +4.7682e-01  +4.7682e-01  3.31e-10  1.25e-14  6.50e-12  4.03e-15  5.27e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9484952s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:55 PM: Optimal value: 4.768e-01
(CVXPY) Aug 30 12:22:55 PM: Compilation took 3.549e-01 seconds
(CVXPY) Aug 30 12:22:55 PM: Solver (including time spent in interface) took 2.031e+00 seconds
Iteration: 22, Objective: 0.4768
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:55 PM: Your problem has 25200 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:56 PM: Finished problem compilation (took 3.396e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:56 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25200
  constraints   = 50200
  nnz(P)        = 0
  nnz(A)        = 430706
  cones (total) = 1
    : Nonnegative = 1,  numel = 50200

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3468e+03  5.35e+03  4.24e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3106e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6432e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0122e-01  +1.5927e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.0675e+00  5.67e-01  1.70e-03  8.78e-01  2.38e-05  1.90e-01  2.55e-01  
  6  +5.0000e-01  +7.1252e-01  2.13e-01  6.35e-04  3.29e-01  8.06e-06  7.13e-02  7.05e-01  
  7  +5.0000e-01  +6.4056e-01  1.41e-01  4.20e-04  2.18e-01  5.55e-06  3.85e-02  5.82e-01  
  8  +5.0000e-01  +6.4229e-01  1.42e-01  4.25e-04  2.20e-01  5.72e-06  2.87e-02  4.12e-01  
  9  +5.0001e-01  +6.6931e-01  1.69e-01  5.04e-04  2.61e-01  3.59e-06  1.60e-02  9.90e-01  
 10  +4.9998e-01  +6.2150e-01  1.22e-01  3.10e-04  1.61e-01  1.33e-05  2.25e-03  8.72e-01  
 11  +4.9914e-01  +6.1211e-01  1.13e-01  1.87e-05  9.69e-03  4.21e-04  6.28e-05  9.74e-01  
 12  +4.9898e-01  +5.9666e-01  9.77e-02  1.31e-05  6.78e-03  3.49e-04  4.35e-05  5.07e-01  
 13  +4.9892e-01  +5.9208e-01  9.32e-02  1.15e-05  5.96e-03  3.10e-04  3.80e-05  2.51e-01  
 14  +4.9922e-01  +5.8023e-01  8.10e-02  1.00e-05  5.20e-03  8.21e-05  3.28e-05  6.89e-01  
 15  +4.9901e-01  +5.7837e-01  7.94e-02  8.48e-06  4.40e-03  8.54e-05  2.77e-05  2.26e-01  
 16  +4.9891e-01  +5.7545e-01  7.65e-02  7.69e-06  4.00e-03  5.07e-05  2.51e-05  4.64e-01  
 17  +4.9863e-01  +5.7348e-01  7.48e-02  6.71e-06  3.49e-03  4.53e-05  2.19e-05  2.87e-01  
 18  +4.9833e-01  +5.7089e-01  7.26e-02  6.31e-06  3.28e-03  2.88e-05  2.06e-05  3.72e-01  
 19  +4.9602e-01  +5.5915e-01  6.31e-02  3.78e-06  1.96e-03  3.10e-05  1.24e-05  4.96e-01  
 20  +4.9494e-01  +5.5382e-01  5.89e-02  3.45e-06  1.79e-03  2.59e-05  1.14e-05  1.57e-01  
 21  +4.9393e-01  +5.4885e-01  5.49e-02  3.18e-06  1.65e-03  1.78e-05  1.06e-05  2.59e-01  
 22  +4.9301e-01  +5.4463e-01  5.16e-02  2.92e-06  1.52e-03  1.39e-05  9.78e-06  2.00e-01  
 23  +4.9119e-01  +5.3633e-01  4.51e-02  2.44e-06  1.27e-03  8.69e-06  8.25e-06  3.53e-01  
 24  +4.9012e-01  +5.3141e-01  4.13e-02  2.16e-06  1.12e-03  5.05e-06  7.35e-06  3.85e-01  
 25  +4.8902e-01  +5.2658e-01  3.76e-02  1.90e-06  9.85e-04  3.24e-06  6.50e-06  3.46e-01  
 26  +4.8855e-01  +5.2452e-01  3.60e-02  1.79e-06  9.27e-04  2.45e-06  6.14e-06  2.42e-01  
 27  +4.8771e-01  +5.2092e-01  3.32e-02  1.61e-06  8.37e-04  2.00e-06  5.57e-06  1.91e-01  
 28  +4.8767e-01  +5.2074e-01  3.31e-02  1.60e-06  8.31e-04  1.89e-06  5.53e-06  6.35e-02  
 29  +4.8492e-01  +5.0912e-01  2.42e-02  1.08e-06  5.63e-04  5.05e-07  3.81e-06  7.57e-01  
 30  +4.8459e-01  +5.0772e-01  2.31e-02  1.03e-06  5.34e-04  4.67e-07  3.62e-06  1.04e-01  
 31  +4.8258e-01  +4.9936e-01  1.68e-02  7.07e-07  3.67e-04  2.53e-07  2.52e-06  6.26e-01  
 32  +4.8256e-01  +4.9928e-01  1.67e-02  7.04e-07  3.66e-04  2.50e-07  2.52e-06  2.94e-02  
 33  +4.8099e-01  +4.9302e-01  1.20e-02  4.94e-07  2.57e-04  1.60e-07  1.79e-06  5.04e-01  
 34  +4.8058e-01  +4.9131e-01  1.07e-02  4.36e-07  2.26e-04  1.36e-07  1.59e-06  3.54e-01  
 35  +4.7884e-01  +4.8437e-01  5.53e-03  2.19e-07  1.14e-04  6.30e-08  8.12e-07  8.51e-01  
 36  +4.7841e-01  +4.8272e-01  4.31e-03  1.68e-07  8.74e-05  4.90e-08  6.28e-07  4.22e-01  
 37  +4.7840e-01  +4.8266e-01  4.26e-03  1.67e-07  8.66e-05  4.83e-08  6.22e-07  9.46e-02  
 38  +4.7762e-01  +4.7972e-01  2.10e-03  8.09e-08  4.20e-05  2.38e-08  3.05e-07  7.23e-01  
 39  +4.7755e-01  +4.7949e-01  1.94e-03  7.39e-08  3.83e-05  2.21e-08  2.78e-07  1.18e-01  
 40  +4.7753e-01  +4.7942e-01  1.88e-03  7.28e-08  3.78e-05  2.09e-08  2.78e-07  4.25e-02  
 41  +4.7740e-01  +4.7891e-01  1.51e-03  5.84e-08  3.03e-05  1.68e-08  2.23e-07  2.70e-01  
 42  +4.7728e-01  +4.7843e-01  1.16e-03  4.44e-08  2.31e-05  1.30e-08  1.68e-07  8.00e-01  
 43  +4.7696e-01  +4.7734e-01  3.73e-04  1.42e-08  7.37e-06  4.04e-09  5.41e-08  8.33e-01  
 44  +4.7682e-01  +4.7683e-01  9.72e-06  3.68e-10  1.91e-07  1.06e-10  1.41e-09  9.75e-01  
 45  +4.7682e-01  +4.7682e-01  9.72e-08  3.69e-12  1.91e-09  1.07e-12  1.41e-11  9.90e-01  
 46  +4.7682e-01  +4.7682e-01  9.75e-10  3.70e-14  1.92e-11  1.22e-14  1.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.120083s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:58 PM: Problem status: optimal
(CVXPY) Aug 30 12:22:58 PM: Optimal value: 4.768e-01
(CVXPY) Aug 30 12:22:58 PM: Compilation took 3.396e-01 seconds
(CVXPY) Aug 30 12:22:58 PM: Solver (including time spent in interface) took 2.180e+00 seconds
Iteration: 23, Objective: 0.4768
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:22:58 PM: Your problem has 25201 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:22:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:22:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:22:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:22:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:22:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:22:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:22:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:22:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:22:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:22:58 PM: Finished problem compilation (took 3.442e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:22:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25201
  constraints   = 50201
  nnz(P)        = 0
  nnz(A)        = 431140
  cones (total) = 1
    : Nonnegative = 1,  numel = 50201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3468e+03  5.35e+03  4.24e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3106e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6432e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0122e-01  +1.5927e+01  1.54e+01  4.31e-02  2.14e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.0684e+00  5.68e-01  1.70e-03  8.79e-01  2.38e-05  1.90e-01  2.55e-01  
  6  +5.0000e-01  +7.1321e-01  2.13e-01  6.37e-04  3.30e-01  8.08e-06  7.16e-02  7.03e-01  
  7  +5.0000e-01  +6.3929e-01  1.39e-01  4.16e-04  2.16e-01  5.51e-06  3.80e-02  5.90e-01  
  8  +5.0000e-01  +6.4243e-01  1.42e-01  4.26e-04  2.20e-01  5.68e-06  2.86e-02  4.12e-01  
  9  +5.0001e-01  +6.6815e-01  1.68e-01  5.00e-04  2.59e-01  3.67e-06  1.57e-02  9.90e-01  
 10  +4.9998e-01  +6.2118e-01  1.21e-01  3.05e-04  1.58e-01  1.42e-05  2.13e-03  8.76e-01  
 11  +4.9912e-01  +6.1203e-01  1.13e-01  1.85e-05  9.62e-03  4.31e-04  6.24e-05  9.73e-01  
 12  +4.9899e-01  +5.9672e-01  9.77e-02  1.32e-05  6.87e-03  3.46e-04  4.41e-05  4.98e-01  
 13  +4.9892e-01  +5.9197e-01  9.31e-02  1.15e-05  5.98e-03  3.10e-04  3.81e-05  2.60e-01  
 14  +4.9922e-01  +5.8038e-01  8.12e-02  1.01e-05  5.23e-03  8.51e-05  3.30e-05  6.81e-01  
 15  +4.9900e-01  +5.7849e-01  7.95e-02  8.49e-06  4.41e-03  8.91e-05  2.77e-05  2.27e-01  
 16  +4.9893e-01  +5.7583e-01  7.69e-02  7.81e-06  4.06e-03  5.57e-05  2.55e-05  4.23e-01  
 17  +4.9861e-01  +5.7369e-01  7.51e-02  6.70e-06  3.48e-03  5.33e-05  2.18e-05  2.59e-01  
 18  +4.9844e-01  +5.7226e-01  7.38e-02  6.51e-06  3.39e-03  4.20e-05  2.13e-05  2.06e-01  
 19  +4.9644e-01  +5.6182e-01  6.54e-02  4.05e-06  2.11e-03  4.61e-05  1.33e-05  4.61e-01  
 20  +4.9482e-01  +5.5359e-01  5.88e-02  3.49e-06  1.81e-03  3.56e-05  1.16e-05  2.32e-01  
 21  +4.9394e-01  +5.4915e-01  5.52e-02  3.25e-06  1.69e-03  2.41e-05  1.08e-05  2.68e-01  
 22  +4.9305e-01  +5.4501e-01  5.20e-02  2.98e-06  1.55e-03  1.87e-05  9.97e-06  2.07e-01  
 23  +4.9128e-01  +5.3686e-01  4.56e-02  2.48e-06  1.29e-03  1.16e-05  8.40e-06  3.59e-01  
 24  +4.9019e-01  +5.3182e-01  4.16e-02  2.19e-06  1.14e-03  6.67e-06  7.46e-06  3.89e-01  
 25  +4.8926e-01  +5.2771e-01  3.84e-02  1.96e-06  1.02e-03  4.74e-06  6.72e-06  2.80e-01  
 26  +4.8849e-01  +5.2436e-01  3.59e-02  1.79e-06  9.28e-04  3.51e-06  6.15e-06  2.55e-01  
 27  +4.8748e-01  +5.2001e-01  3.25e-02  1.57e-06  8.15e-04  2.26e-06  5.43e-06  3.58e-01  
 28  +4.8493e-01  +5.0911e-01  2.42e-02  1.08e-06  5.63e-04  5.81e-07  3.81e-06  7.56e-01  
 29  +4.8160e-01  +4.9548e-01  1.39e-02  5.82e-07  3.02e-04  2.72e-07  2.10e-06  5.95e-01  
 30  +4.8155e-01  +4.9524e-01  1.37e-02  5.73e-07  2.98e-04  2.60e-07  2.07e-06  7.27e-02  
 31  +4.7973e-01  +4.8806e-01  8.33e-03  3.37e-07  1.75e-04  1.36e-07  1.24e-06  5.73e-01  
 32  +4.7851e-01  +4.8320e-01  4.70e-03  1.86e-07  9.68e-05  7.19e-08  6.95e-07  5.38e-01  
 33  +4.7852e-01  +4.8317e-01  4.65e-03  1.82e-07  9.44e-05  6.72e-08  6.75e-07  2.74e-01  
 34  +4.7805e-01  +4.8139e-01  3.35e-03  1.29e-07  6.71e-05  4.78e-08  4.83e-07  3.36e-01  
 35  +4.7798e-01  +4.8111e-01  3.13e-03  1.20e-07  6.25e-05  4.33e-08  4.50e-07  2.11e-01  
 36  +4.7790e-01  +4.8076e-01  2.85e-03  1.11e-07  5.76e-05  3.33e-08  4.19e-07  7.20e-01  
 37  +4.7746e-01  +4.7911e-01  1.65e-03  6.41e-08  3.33e-05  1.91e-08  2.44e-07  4.89e-01  
 38  +4.7739e-01  +4.7884e-01  1.46e-03  5.62e-08  2.92e-05  1.66e-08  2.13e-07  5.28e-01  
 39  +4.7713e-01  +4.7791e-01  7.86e-04  2.99e-08  1.55e-05  9.04e-09  1.14e-07  5.44e-01  
 40  +4.7684e-01  +4.7688e-01  4.46e-05  1.69e-09  8.79e-07  4.96e-10  6.47e-09  9.90e-01  
 41  +4.7682e-01  +4.7682e-01  4.49e-07  1.70e-11  8.83e-09  4.98e-12  6.50e-11  9.90e-01  
 42  +4.7682e-01  +4.7682e-01  4.49e-09  1.70e-13  8.83e-11  4.98e-14  6.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6757479s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:23:00 PM: Problem status: optimal
(CVXPY) Aug 30 12:23:00 PM: Optimal value: 4.768e-01
(CVXPY) Aug 30 12:23:00 PM: Compilation took 3.442e-01 seconds
(CVXPY) Aug 30 12:23:00 PM: Solver (including time spent in interface) took 1.747e+00 seconds
FULL MODEL:
  Accruacy: 0.50768
  Our objective: 0.015360000000000026

IF 
    (x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0)                                             <-- (term's our objective: 0.009479999999999981)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0004799999999999865)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0005200000000000395)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.00044000000000000376)
 OR (x2 = 1 AND x3 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0010799999999999994)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x2 = 0 AND x7 = 0) <-- (term's our objective: 0.00048000000000002164)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.0003600000000000391)
 OR (x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x4 = 0 AND x7 = 0) <-- (term's our objective: 0.0012000000000000435)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x4 = 0 AND x7 = 0) <-- (term's our objective: 0.0007199999999999507)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x7 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0005999999999999634)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.009479999999999981
    Its accruacy: 0.50474
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.009479999999999981
  Highest accruacy: 0.50474
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

