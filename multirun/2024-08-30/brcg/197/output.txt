Command:
python test_script.py -s smallest_subclass -d 5 -n 50000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.04144
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 5.

Computed total variation: 0.046079999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:35 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:35 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:35 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:35 PM: Finished problem compilation (took 7.824e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 200011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.9962e-01  +5.0087e+03  5.01e+03  3.68e-01  1.22e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4642e-01  +7.1491e+02  7.14e+02  1.49e-01  6.20e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1139e-01  +1.7344e+02  1.73e+02  1.36e-01  5.62e+01  2.41e-05  2.33e-01  8.02e-02  
  4  +5.0054e-01  +7.3134e+00  6.81e+00  2.01e-02  8.17e+00  2.53e-06  1.88e-01  5.16e-01  
  5  +5.0000e-01  +9.0458e-01  4.05e-01  1.23e-03  5.11e-01  2.31e-05  1.54e-01  8.81e-01  
  6  +5.0000e-01  +5.5586e-01  5.59e-02  1.67e-04  6.97e-02  3.85e-06  2.05e-02  8.69e-01  
  7  +4.9999e-01  +5.4526e-01  4.53e-02  1.35e-04  5.65e-02  7.06e-06  6.23e-03  7.49e-01  
  8  +4.9953e-01  +5.6256e-01  6.30e-02  4.85e-05  2.03e-02  3.16e-04  1.67e-04  9.84e-01  
  9  +4.9543e-01  +5.5110e-01  5.57e-02  5.11e-06  2.14e-03  2.64e-03  1.62e-05  9.12e-01  
 10  +4.9117e-01  +5.2466e-01  3.35e-02  1.61e-06  6.73e-04  2.86e-03  5.11e-06  7.33e-01  
 11  +4.8986e-01  +5.0135e-01  1.15e-02  5.54e-07  2.32e-04  3.93e-04  1.87e-06  7.85e-01  
 12  +4.8735e-01  +4.8865e-01  1.30e-03  5.42e-08  2.27e-05  3.19e-05  2.08e-07  9.06e-01  
 13  +4.8689e-01  +4.8690e-01  1.77e-05  6.99e-10  2.92e-07  3.68e-07  2.84e-09  9.88e-01  
 14  +4.8688e-01  +4.8688e-01  1.77e-07  6.98e-12  2.92e-09  3.69e-09  2.84e-11  9.90e-01  
 15  +4.8688e-01  +4.8688e-01  1.84e-09  7.12e-14  2.98e-11  7.28e-11  5.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 205.142ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:35 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:35 PM: Optimal value: 4.869e-01
(CVXPY) Aug 30 12:07:35 PM: Compilation took 7.824e-02 seconds
(CVXPY) Aug 30 12:07:35 PM: Solver (including time spent in interface) took 2.206e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4869
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:35 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:35 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:35 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:35 PM: Finished problem compilation (took 7.867e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 226283
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.12e+02  1.00e+00  1.00e+00   ------   
  1  +5.9961e-01  +5.0089e+03  5.01e+03  3.68e-01  1.24e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4640e-01  +7.1471e+02  7.14e+02  1.49e-01  6.31e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1138e-01  +1.7333e+02  1.73e+02  1.36e-01  5.71e+01  2.41e-05  2.33e-01  8.05e-02  
  4  +5.0053e-01  +7.1934e+00  6.69e+00  1.98e-02  8.17e+00  2.55e-06  1.87e-01  5.26e-01  
  5  +5.0001e-01  +1.1112e+00  6.11e-01  1.85e-03  7.85e-01  2.35e-05  1.59e-01  6.82e-01  
  6  +5.0001e-01  +6.9551e-01  1.96e-01  5.84e-04  2.48e-01  4.34e-06  5.38e-02  9.90e-01  
  7  +5.0000e-01  +5.9198e-01  9.20e-02  2.74e-04  1.16e-01  2.55e-06  2.28e-02  5.86e-01  
  8  +5.0000e-01  +5.6268e-01  6.27e-02  1.86e-04  7.91e-02  3.43e-06  6.30e-03  8.50e-01  
  9  +4.9990e-01  +5.6841e-01  6.85e-02  8.30e-05  3.53e-02  6.62e-05  2.98e-04  9.83e-01  
 10  +4.9824e-01  +5.6416e-01  6.59e-02  5.55e-06  2.36e-03  1.10e-03  1.67e-05  9.44e-01  
 11  +4.9679e-01  +5.5322e-01  5.64e-02  3.35e-06  1.42e-03  1.20e-03  1.00e-05  4.80e-01  
 12  +4.9680e-01  +5.5234e-01  5.55e-02  3.32e-06  1.41e-03  1.12e-03  9.93e-06  4.55e-02  
 13  +4.9644e-01  +5.4750e-01  5.11e-02  2.97e-06  1.26e-03  8.75e-04  8.77e-06  2.41e-01  
 14  +4.9581e-01  +5.4378e-01  4.80e-02  2.59e-06  1.10e-03  8.31e-04  7.59e-06  1.67e-01  
 15  +4.9566e-01  +5.4004e-01  4.44e-02  2.17e-06  9.22e-04  5.34e-04  6.22e-06  4.47e-01  
 16  +4.9568e-01  +5.3795e-01  4.23e-02  1.97e-06  8.38e-04  3.13e-04  5.60e-06  4.12e-01  
 17  +4.9533e-01  +5.3407e-01  3.87e-02  1.70e-06  7.23e-04  4.44e-05  4.85e-06  7.53e-01  
 18  +4.9449e-01  +5.3096e-01  3.65e-02  1.44e-06  6.13e-04  4.05e-05  4.11e-06  2.25e-01  
 19  +4.9379e-01  +5.2875e-01  3.50e-02  1.44e-06  6.12e-04  3.65e-05  4.11e-06  1.37e-02  
 20  +4.8861e-01  +5.1059e-01  2.20e-02  7.19e-07  3.06e-04  2.34e-05  2.06e-06  5.52e-01  
 21  +4.8367e-01  +4.9374e-01  1.01e-02  3.08e-07  1.31e-04  8.38e-06  8.92e-07  6.33e-01  
 22  +4.7953e-01  +4.7985e-01  3.22e-04  9.36e-09  3.98e-06  8.78e-08  2.73e-08  9.81e-01  
 23  +4.7938e-01  +4.7938e-01  3.24e-06  9.37e-11  3.99e-08  8.80e-10  2.74e-10  9.90e-01  
 24  +4.7938e-01  +4.7938e-01  3.25e-08  9.41e-13  4.00e-10  1.03e-11  3.19e-12  9.90e-01  
 25  +4.7938e-01  +4.7938e-01  3.26e-10  9.50e-15  4.02e-12  1.21e-13  3.72e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 414.9432ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:36 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:36 PM: Optimal value: 4.794e-01
(CVXPY) Aug 30 12:07:36 PM: Compilation took 7.867e-02 seconds
(CVXPY) Aug 30 12:07:36 PM: Solver (including time spent in interface) took 4.404e-01 seconds
Iteration: 2, Objective: 0.4794
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:36 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:36 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:36 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:36 PM: Finished problem compilation (took 7.885e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 236447
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.9960e-01  +5.0093e+03  5.01e+03  3.68e-01  1.25e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4638e-01  +7.1457e+02  7.14e+02  1.50e-01  6.33e+01  9.84e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7329e+02  1.73e+02  1.36e-01  5.73e+01  2.41e-05  2.33e-01  8.06e-02  
  4  +5.0053e-01  +7.1995e+00  6.70e+00  1.98e-02  8.21e+00  2.55e-06  1.87e-01  5.26e-01  
  5  +5.0003e-01  +1.3073e+00  8.07e-01  2.45e-03  1.04e+00  2.29e-05  1.66e-01  5.21e-01  
  6  +5.0001e-01  +6.3491e-01  1.35e-01  4.03e-04  1.72e-01  3.56e-06  4.08e-02  7.87e-01  
  7  +5.0000e-01  +5.8950e-01  8.95e-02  2.67e-04  1.14e-01  2.48e-06  1.97e-02  6.94e-01  
  8  +5.0000e-01  +5.6222e-01  6.22e-02  1.85e-04  7.87e-02  4.36e-06  4.76e-03  8.33e-01  
  9  +4.9977e-01  +5.6518e-01  6.54e-02  3.94e-05  1.68e-02  1.53e-04  1.26e-04  9.86e-01  
 10  +4.9771e-01  +5.5990e-01  6.22e-02  4.32e-06  1.85e-03  1.36e-03  1.29e-05  8.99e-01  
 11  +4.9683e-01  +5.5425e-01  5.74e-02  3.42e-06  1.46e-03  1.35e-03  1.02e-05  2.65e-01  
 12  +4.9721e-01  +5.4856e-01  5.14e-02  3.19e-06  1.36e-03  5.86e-04  9.33e-06  4.59e-01  
 13  +4.9575e-01  +5.3942e-01  4.37e-02  2.23e-06  9.55e-04  3.77e-04  6.46e-06  5.61e-01  
 14  +4.9596e-01  +5.3980e-01  4.38e-02  2.15e-06  9.20e-04  2.67e-04  6.20e-06  3.02e-01  
 15  +4.9543e-01  +5.3747e-01  4.20e-02  1.85e-06  7.91e-04  1.46e-04  5.34e-06  5.06e-01  
 16  +4.9449e-01  +5.3394e-01  3.94e-02  1.83e-06  7.82e-04  1.13e-04  5.31e-06  9.68e-02  
 17  +4.9197e-01  +5.2454e-01  3.26e-02  1.33e-06  5.68e-04  9.12e-05  3.86e-06  3.30e-01  
 18  +4.8636e-01  +5.0447e-01  1.81e-02  6.17e-07  2.63e-04  8.44e-06  1.81e-06  8.74e-01  
 19  +4.8541e-01  +5.0118e-01  1.58e-02  5.23e-07  2.23e-04  6.22e-06  1.54e-06  2.75e-01  
 20  +4.8549e-01  +5.0140e-01  1.59e-02  5.21e-07  2.23e-04  5.99e-06  1.53e-06  5.77e-02  
 21  +4.8538e-01  +5.0103e-01  1.57e-02  5.19e-07  2.22e-04  5.53e-06  1.53e-06  4.55e-02  
 22  +4.8333e-01  +4.9423e-01  1.09e-02  3.49e-07  1.49e-04  3.40e-06  1.03e-06  3.98e-01  
 23  +4.8337e-01  +4.9431e-01  1.09e-02  3.46e-07  1.48e-04  3.04e-06  1.02e-06  1.28e-01  
 24  +4.7887e-01  +4.7970e-01  8.30e-04  2.50e-08  1.07e-05  8.78e-08  7.50e-08  9.57e-01  
 25  +4.7849e-01  +4.7850e-01  1.03e-05  3.10e-10  1.33e-07  8.89e-10  9.37e-10  9.90e-01  
 26  +4.7848e-01  +4.7848e-01  1.03e-07  3.10e-12  1.33e-09  8.88e-12  9.37e-12  9.90e-01  
 27  +4.7848e-01  +4.7848e-01  1.04e-09  3.11e-14  1.33e-11  9.73e-14  1.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 457.725ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:36 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:36 PM: Optimal value: 4.785e-01
(CVXPY) Aug 30 12:07:36 PM: Compilation took 7.885e-02 seconds
(CVXPY) Aug 30 12:07:36 PM: Solver (including time spent in interface) took 4.866e-01 seconds
Iteration: 3, Objective: 0.4785
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:37 PM: Your problem has 25030 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:37 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25030
  constraints   = 50030
  nnz(P)        = 0
  nnz(A)        = 240314
  cones (total) = 1
    : Nonnegative = 1,  numel = 50030

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.9960e-01  +5.0093e+03  5.01e+03  3.68e-01  1.25e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4638e-01  +7.1452e+02  7.14e+02  1.49e-01  6.34e+01  9.84e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7328e+02  1.73e+02  1.36e-01  5.74e+01  2.41e-05  2.33e-01  8.06e-02  
  4  +5.0053e-01  +7.1985e+00  6.70e+00  1.98e-02  8.22e+00  2.55e-06  1.87e-01  5.26e-01  
  5  +5.0000e-01  +9.1416e-01  4.14e-01  1.26e-03  5.36e-01  2.42e-05  1.47e-01  9.64e-01  
  6  +5.0000e-01  +6.8601e-01  1.86e-01  5.58e-04  2.38e-01  9.37e-06  5.80e-02  7.66e-01  
  7  +5.0000e-01  +6.1333e-01  1.13e-01  3.39e-04  1.45e-01  6.41e-06  2.93e-02  5.48e-01  
  8  +4.9999e-01  +5.7709e-01  7.71e-02  2.31e-04  9.84e-02  7.51e-06  9.27e-03  8.03e-01  
  9  +4.9998e-01  +5.7819e-01  7.82e-02  2.31e-04  9.87e-02  1.48e-05  4.11e-03  6.05e-01  
 10  +4.9946e-01  +5.7649e-01  7.70e-02  4.41e-05  1.89e-02  3.64e-04  1.49e-04  9.66e-01  
 11  +4.9619e-01  +5.6499e-01  6.88e-02  6.53e-06  2.79e-03  2.15e-03  2.09e-05  8.72e-01  
 12  +4.9704e-01  +5.6268e-01  6.56e-02  6.43e-06  2.75e-03  1.50e-03  2.02e-05  2.51e-01  
 13  +4.9605e-01  +5.5363e-01  5.76e-02  4.35e-06  1.86e-03  1.38e-03  1.35e-05  4.67e-01  
 14  +4.9645e-01  +5.5353e-01  5.71e-02  4.29e-06  1.84e-03  1.14e-03  1.31e-05  1.78e-01  
 15  +4.9710e-01  +5.5143e-01  5.43e-02  3.98e-06  1.70e-03  5.46e-04  1.19e-05  5.04e-01  
 16  +4.9715e-01  +5.4807e-01  5.09e-02  3.38e-06  1.45e-03  1.87e-04  9.96e-06  6.81e-01  
 17  +4.9517e-01  +5.3860e-01  4.34e-02  2.20e-06  9.42e-04  1.88e-04  6.41e-06  4.03e-01  
 18  +4.9511e-01  +5.3845e-01  4.33e-02  2.20e-06  9.41e-04  1.85e-04  6.41e-06  1.11e-02  
 19  +4.9381e-01  +5.3382e-01  4.00e-02  1.72e-06  7.36e-04  1.79e-04  5.00e-06  2.74e-01  
 20  +4.9290e-01  +5.3025e-01  3.73e-02  1.68e-06  7.20e-04  1.31e-04  4.94e-06  1.33e-01  
 21  +4.9175e-01  +5.2607e-01  3.43e-02  1.44e-06  6.16e-04  8.24e-05  4.23e-06  3.90e-01  
 22  +4.9172e-01  +5.2571e-01  3.40e-02  1.41e-06  6.04e-04  6.53e-05  4.14e-06  1.85e-01  
 23  +4.8821e-01  +5.1345e-01  2.52e-02  9.27e-07  3.97e-04  4.78e-05  2.74e-06  3.70e-01  
 24  +4.8822e-01  +5.1340e-01  2.52e-02  9.25e-07  3.96e-04  4.58e-05  2.73e-06  3.58e-02  
 25  +4.8807e-01  +5.1277e-01  2.47e-02  9.01e-07  3.86e-04  4.27e-05  2.66e-06  6.86e-02  
 26  +4.8807e-01  +5.1274e-01  2.47e-02  9.01e-07  3.85e-04  4.20e-05  2.66e-06  1.23e-02  
 27  +4.8691e-01  +5.0820e-01  2.13e-02  7.48e-07  3.20e-04  2.53e-05  2.22e-06  3.88e-01  
 28  +4.8248e-01  +4.9236e-01  9.88e-03  3.18e-07  1.36e-04  5.77e-07  9.53e-07  9.24e-01  
 29  +4.8228e-01  +4.9171e-01  9.43e-03  3.01e-07  1.29e-04  5.30e-07  9.02e-07  1.04e-01  
 30  +4.8218e-01  +4.9125e-01  9.07e-03  2.91e-07  1.24e-04  3.91e-07  8.84e-07  3.02e-01  
 31  +4.8195e-01  +4.9032e-01  8.37e-03  2.63e-07  1.12e-04  2.17e-07  7.93e-07  6.95e-01  
 32  +4.7936e-01  +4.8202e-01  2.67e-03  8.23e-08  3.52e-05  6.64e-08  2.51e-07  7.17e-01  
 33  +4.7825e-01  +4.7860e-01  3.43e-04  1.05e-08  4.50e-06  5.32e-09  3.23e-08  9.88e-01  
 34  +4.7808e-01  +4.7809e-01  9.13e-06  2.79e-10  1.19e-07  1.44e-10  8.57e-10  9.77e-01  
 35  +4.7808e-01  +4.7808e-01  9.13e-08  2.79e-12  1.19e-09  1.44e-12  8.57e-12  9.90e-01  
 36  +4.7808e-01  +4.7808e-01  9.16e-10  2.80e-14  1.20e-11  1.63e-14  9.67e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 619.7595ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:37 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:37 PM: Optimal value: 4.781e-01
(CVXPY) Aug 30 12:07:37 PM: Compilation took 7.812e-02 seconds
(CVXPY) Aug 30 12:07:37 PM: Solver (including time spent in interface) took 6.452e-01 seconds
Iteration: 4, Objective: 0.4781
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:37 PM: Your problem has 25033 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:37 PM: Finished problem compilation (took 7.844e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25033
  constraints   = 50033
  nnz(P)        = 0
  nnz(A)        = 244226
  cones (total) = 1
    : Nonnegative = 1,  numel = 50033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +5.0094e+03  5.01e+03  3.68e-01  1.25e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4637e-01  +7.1448e+02  7.14e+02  1.49e-01  6.35e+01  9.84e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7328e+02  1.73e+02  1.36e-01  5.75e+01  2.41e-05  2.33e-01  8.06e-02  
  4  +5.0053e-01  +7.1966e+00  6.70e+00  1.98e-02  8.23e+00  2.55e-06  1.87e-01  5.26e-01  
  5  +5.0000e-01  +9.3699e-01  4.37e-01  1.33e-03  5.66e-01  2.42e-05  1.49e-01  9.24e-01  
  6  +5.0000e-01  +6.8853e-01  1.89e-01  5.65e-04  2.41e-01  7.10e-06  5.40e-02  9.10e-01  
  7  +5.0000e-01  +6.2677e-01  1.27e-01  3.79e-04  1.62e-01  5.32e-06  2.97e-02  5.22e-01  
  8  +5.0000e-01  +6.1438e-01  1.14e-01  3.42e-04  1.46e-01  6.01e-06  1.79e-02  4.66e-01  
  9  +5.0000e-01  +6.2468e-01  1.25e-01  3.71e-04  1.59e-01  3.43e-06  1.24e-02  8.12e-01  
 10  +5.0000e-01  +6.2028e-01  1.20e-01  3.57e-04  1.52e-01  3.27e-06  9.37e-03  3.82e-01  
 11  +5.0000e-01  +5.9356e-01  9.36e-02  2.52e-04  1.08e-01  6.24e-06  2.07e-03  9.90e-01  
 12  +4.9961e-01  +5.9272e-01  9.31e-02  1.47e-05  6.30e-03  2.61e-04  4.70e-05  9.78e-01  
 13  +4.9893e-01  +5.8423e-01  8.53e-02  6.59e-06  2.82e-03  4.73e-04  2.09e-05  6.20e-01  
 14  +4.9813e-01  +5.7490e-01  7.68e-02  5.69e-06  2.44e-03  3.94e-04  1.81e-05  2.07e-01  
 15  +4.9776e-01  +5.6841e-01  7.07e-02  5.27e-06  2.26e-03  2.82e-04  1.66e-05  2.40e-01  
 16  +4.9642e-01  +5.5510e-01  5.87e-02  4.01e-06  1.72e-03  1.76e-04  1.24e-05  4.46e-01  
 17  +4.9642e-01  +5.5485e-01  5.84e-02  3.90e-06  1.67e-03  1.69e-04  1.20e-05  7.58e-02  
 18  +4.9650e-01  +5.5461e-01  5.81e-02  3.79e-06  1.63e-03  1.43e-04  1.16e-05  1.70e-01  
 19  +4.9645e-01  +5.5360e-01  5.71e-02  3.74e-06  1.60e-03  1.13e-04  1.14e-05  1.74e-01  
 20  +4.9561e-01  +5.4877e-01  5.32e-02  3.15e-06  1.35e-03  1.07e-04  9.47e-06  2.14e-01  
 21  +4.9563e-01  +5.4861e-01  5.30e-02  3.13e-06  1.34e-03  9.81e-05  9.40e-06  7.27e-02  
 22  +4.9373e-01  +5.3902e-01  4.53e-02  2.17e-06  9.30e-04  8.26e-05  6.44e-06  4.23e-01  
 23  +4.9321e-01  +5.3715e-01  4.39e-02  1.90e-06  8.15e-04  7.54e-05  5.63e-06  2.22e-01  
 24  +4.9267e-01  +5.3497e-01  4.23e-02  1.89e-06  8.11e-04  6.76e-05  5.62e-06  2.63e-02  
 25  +4.8886e-01  +5.1995e-01  3.11e-02  1.21e-06  5.19e-04  4.09e-05  3.63e-06  4.75e-01  
 26  +4.8703e-01  +5.1104e-01  2.40e-02  8.78e-07  3.76e-04  1.15e-05  2.63e-06  6.72e-01  
 27  +4.8659e-01  +5.0926e-01  2.27e-02  8.18e-07  3.50e-04  9.60e-06  2.45e-06  1.67e-01  
 28  +4.8526e-01  +5.0314e-01  1.79e-02  6.15e-07  2.63e-04  1.00e-07  1.85e-06  9.24e-01  
 29  +4.8404e-01  +4.9903e-01  1.50e-02  5.04e-07  2.16e-04  9.72e-08  1.52e-06  2.56e-01  
 30  +4.8376e-01  +4.9801e-01  1.42e-02  4.77e-07  2.04e-04  1.51e-07  1.46e-06  5.07e-01  
 31  +4.8371e-01  +4.9781e-01  1.41e-02  4.71e-07  2.02e-04  1.53e-07  1.44e-06  5.70e-02  
 32  +4.8276e-01  +4.9459e-01  1.18e-02  3.90e-07  1.67e-04  1.35e-07  1.20e-06  2.93e-01  
 33  +4.8037e-01  +4.8636e-01  5.99e-03  1.92e-07  8.22e-05  9.24e-08  5.91e-07  9.90e-01  
 34  +4.7973e-01  +4.8441e-01  4.69e-03  1.47e-07  6.31e-05  7.37e-08  4.53e-07  3.53e-01  
 35  +4.7777e-01  +4.7817e-01  4.02e-04  1.25e-08  5.36e-06  6.17e-09  3.91e-08  9.90e-01  
 36  +4.7758e-01  +4.7759e-01  4.63e-06  1.44e-10  6.16e-08  7.02e-11  4.51e-10  9.89e-01  
 37  +4.7758e-01  +4.7758e-01  4.63e-08  1.44e-12  6.16e-10  7.02e-13  4.51e-12  9.90e-01  
 38  +4.7758e-01  +4.7758e-01  4.63e-10  1.44e-14  6.17e-12  7.34e-15  4.70e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 644.337ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:38 PM: Optimal value: 4.776e-01
(CVXPY) Aug 30 12:07:38 PM: Compilation took 7.844e-02 seconds
(CVXPY) Aug 30 12:07:38 PM: Solver (including time spent in interface) took 6.764e-01 seconds
Iteration: 5, Objective: 0.4776
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:38 PM: Your problem has 25034 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:38 PM: Finished problem compilation (took 7.777e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25034
  constraints   = 50034
  nnz(P)        = 0
  nnz(A)        = 245012
  cones (total) = 1
    : Nonnegative = 1,  numel = 50034

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +5.0094e+03  5.01e+03  3.68e-01  1.25e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4637e-01  +7.1447e+02  7.14e+02  1.49e-01  6.35e+01  9.84e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7327e+02  1.73e+02  1.36e-01  5.75e+01  2.41e-05  2.33e-01  8.06e-02  
  4  +5.0053e-01  +7.1954e+00  6.69e+00  1.98e-02  8.23e+00  2.55e-06  1.87e-01  5.26e-01  
  5  +5.0000e-01  +1.0055e+00  5.05e-01  1.53e-03  6.54e-01  2.40e-05  1.53e-01  8.15e-01  
  6  +5.0001e-01  +6.6803e-01  1.68e-01  5.02e-04  2.15e-01  4.64e-06  4.68e-02  9.82e-01  
  7  +5.0000e-01  +6.3368e-01  1.34e-01  3.99e-04  1.71e-01  3.92e-06  3.00e-02  4.64e-01  
  8  +5.0000e-01  +6.1884e-01  1.19e-01  3.55e-04  1.52e-01  4.30e-06  1.81e-02  4.71e-01  
  9  +5.0000e-01  +6.2123e-01  1.21e-01  3.61e-04  1.54e-01  3.94e-06  1.20e-02  6.07e-01  
 10  +4.9998e-01  +5.8855e-01  8.86e-02  2.15e-04  9.20e-02  1.80e-05  1.32e-03  9.60e-01  
 11  +4.9918e-01  +5.8651e-01  8.73e-02  1.32e-05  5.65e-03  5.37e-04  4.22e-05  9.68e-01  
 12  +4.9797e-01  +5.7611e-01  7.81e-02  6.16e-06  2.64e-03  8.72e-04  1.96e-05  6.04e-01  
 13  +4.9718e-01  +5.6700e-01  6.98e-02  5.31e-06  2.28e-03  6.96e-04  1.69e-05  2.25e-01  
 14  +4.9726e-01  +5.6635e-01  6.91e-02  5.25e-06  2.25e-03  6.24e-04  1.66e-05  9.37e-02  
 15  +4.9621e-01  +5.5548e-01  5.93e-02  4.09e-06  1.75e-03  4.15e-04  1.27e-05  4.28e-01  
 16  +4.9662e-01  +5.5698e-01  6.04e-02  4.10e-06  1.76e-03  3.71e-04  1.26e-05  1.27e-01  
 17  +4.9664e-01  +5.5465e-01  5.80e-02  3.76e-06  1.61e-03  2.31e-04  1.14e-05  3.89e-01  
 18  +4.9661e-01  +5.5401e-01  5.74e-02  3.73e-06  1.60e-03  1.98e-04  1.13e-05  1.21e-01  
 19  +4.9561e-01  +5.4722e-01  5.16e-02  2.83e-06  1.21e-03  1.08e-04  8.43e-06  5.90e-01  
 20  +4.9530e-01  +5.4522e-01  4.99e-02  2.48e-06  1.06e-03  5.34e-05  7.34e-06  5.33e-01  
 21  +4.9439e-01  +5.4195e-01  4.76e-02  2.09e-06  8.96e-04  3.12e-05  6.21e-06  4.87e-01  
 22  +4.9185e-01  +5.2934e-01  3.75e-02  1.66e-06  7.12e-04  9.20e-06  4.98e-06  5.52e-01  
 23  +4.8868e-01  +5.1702e-01  2.83e-02  1.16e-06  4.97e-04  5.03e-06  3.50e-06  4.60e-01  
 24  +4.8554e-01  +5.0538e-01  1.98e-02  7.37e-07  3.16e-04  2.42e-06  2.24e-06  5.48e-01  
 25  +4.8552e-01  +5.0533e-01  1.98e-02  7.36e-07  3.15e-04  2.38e-06  2.24e-06  1.38e-02  
 26  +4.8454e-01  +5.0167e-01  1.71e-02  6.11e-07  2.62e-04  1.54e-06  1.86e-06  3.90e-01  
 27  +4.8287e-01  +4.9585e-01  1.30e-02  4.45e-07  1.91e-04  1.12e-06  1.36e-06  2.95e-01  
 28  +4.8272e-01  +4.9533e-01  1.26e-02  4.36e-07  1.87e-04  9.37e-07  1.35e-06  1.35e-01  
 29  +4.8259e-01  +4.9483e-01  1.22e-02  4.21e-07  1.80e-04  8.76e-07  1.31e-06  7.99e-02  
 30  +4.8244e-01  +4.9426e-01  1.18e-02  4.02e-07  1.72e-04  7.63e-07  1.25e-06  1.62e-01  
 31  +4.8059e-01  +4.8759e-01  6.99e-03  2.30e-07  9.85e-05  9.34e-08  7.17e-07  9.90e-01  
 32  +4.8003e-01  +4.8576e-01  5.72e-03  1.84e-07  7.89e-05  8.23e-08  5.73e-07  4.35e-01  
 33  +4.7800e-01  +4.7915e-01  1.15e-03  3.66e-08  1.57e-05  1.77e-08  1.16e-07  9.19e-01  
 34  +4.7747e-01  +4.7750e-01  2.52e-05  8.00e-10  3.43e-07  3.64e-10  2.55e-09  9.84e-01  
 35  +4.7746e-01  +4.7746e-01  2.52e-07  8.00e-12  3.43e-09  3.64e-12  2.55e-11  9.90e-01  
 36  +4.7746e-01  +4.7746e-01  2.52e-09  8.00e-14  3.43e-11  3.64e-14  2.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 632.732ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:39 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:39 PM: Optimal value: 4.775e-01
(CVXPY) Aug 30 12:07:39 PM: Compilation took 7.777e-02 seconds
(CVXPY) Aug 30 12:07:39 PM: Solver (including time spent in interface) took 6.602e-01 seconds
FULL MODEL:
  Accruacy: 0.52282
  Our objective: 0.045640000000000014

IF 
    (x1 = 1 AND x4 = 1 AND x0 = 0 AND x3 = 0)            <-- (term's our objective: 0.001999999999999995)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.041440000000000025)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.00099999999999998)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.001200000000000017)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.041440000000000025
    Its accruacy: 0.52072
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.041440000000000025
  Highest accruacy: 0.52072
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

