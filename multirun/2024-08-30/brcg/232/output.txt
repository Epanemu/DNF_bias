Command:
python test_script.py -s smallest_subclass -d 6 -n 10000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.016
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 6.

Computed total variation: 0.07780000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:04 PM: Your problem has 5013 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:04 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5013
  constraints   = 10013
  nnz(P)        = 0
  nnz(A)        = 45013
  cones (total) = 1
    : Nonnegative = 1,  numel = 10013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  9.90e+01  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +1.0289e+03  1.03e+03  3.86e-01  6.01e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4198e-01  +1.3641e+02  1.36e+02  1.50e-01  2.96e+01  1.15e-02  2.45e-01  8.24e-01  
  3  +5.1051e-01  +3.4143e+01  3.36e+01  1.19e-01  2.30e+01  2.91e-05  2.39e-01  1.20e-01  
  4  +5.0032e-01  +1.3415e+00  8.41e-01  5.70e-03  1.12e+00  4.36e-06  1.30e-01  9.90e-01  
  5  +5.0003e-01  +6.3191e-01  1.32e-01  8.80e-04  1.75e-01  4.01e-06  4.38e-02  8.47e-01  
  6  +5.0002e-01  +5.8388e-01  8.39e-02  5.59e-04  1.11e-01  2.50e-06  2.61e-02  5.13e-01  
  7  +5.0000e-01  +5.2942e-01  2.94e-02  1.96e-04  3.89e-02  1.73e-06  5.71e-03  8.35e-01  
  8  +4.9951e-01  +6.2438e-01  1.25e-01  1.06e-04  2.12e-02  1.04e-04  3.63e-04  9.90e-01  
  9  +4.9751e-01  +5.8965e-01  9.21e-02  2.22e-05  4.43e-03  3.23e-04  7.42e-05  8.01e-01  
 10  +4.9629e-01  +5.3753e-01  4.12e-02  1.17e-05  2.33e-03  2.67e-06  4.03e-05  6.61e-01  
 11  +4.9610e-01  +5.1962e-01  2.35e-02  6.69e-06  1.34e-03  2.82e-07  2.36e-05  9.90e-01  
 12  +4.9430e-01  +5.1156e-01  1.73e-02  4.58e-06  9.16e-04  5.76e-07  1.69e-05  9.17e-01  
 13  +4.9283e-01  +5.0572e-01  1.29e-02  3.07e-06  6.14e-04  4.43e-07  1.15e-05  4.78e-01  
 14  +4.9221e-01  +5.0314e-01  1.09e-02  2.50e-06  4.99e-04  4.42e-07  9.52e-06  9.90e-01  
 15  +4.8892e-01  +4.9035e-01  1.43e-03  2.92e-07  5.83e-05  4.67e-08  1.18e-06  9.89e-01  
 16  +4.8841e-01  +4.8843e-01  2.21e-05  4.44e-09  8.87e-07  6.87e-10  1.81e-08  9.85e-01  
 17  +4.8840e-01  +4.8840e-01  2.21e-07  4.44e-11  8.87e-09  6.87e-12  1.81e-10  9.90e-01  
 18  +4.8840e-01  +4.8840e-01  2.22e-09  4.44e-13  8.88e-11  7.31e-14  1.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.9135ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:04 PM: Optimal value: 4.884e-01
(CVXPY) Aug 30 12:10:04 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:10:04 PM: Solver (including time spent in interface) took 4.686e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4884
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:04 PM: Your problem has 5023 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:04 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5023
  constraints   = 10023
  nnz(P)        = 0
  nnz(A)        = 49393
  cones (total) = 1
    : Nonnegative = 1,  numel = 10023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.00e+02  1.00e+00  1.00e+00   ------   
  1  +5.9310e-01  +1.0290e+03  1.03e+03  3.86e-01  6.07e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4190e-01  +1.3625e+02  1.36e+02  1.50e-01  2.99e+01  1.15e-02  2.45e-01  8.25e-01  
  3  +5.1048e-01  +3.4069e+01  3.36e+01  1.19e-01  2.32e+01  2.91e-05  2.39e-01  1.21e-01  
  4  +5.0031e-01  +1.3483e+00  8.48e-01  5.75e-03  1.15e+00  4.43e-06  1.29e-01  9.90e-01  
  5  +5.0006e-01  +7.0845e-01  2.08e-01  1.39e-03  2.80e-01  3.93e-06  5.80e-02  6.87e-01  
  6  +5.0003e-01  +6.1456e-01  1.15e-01  7.65e-04  1.54e-01  2.61e-06  2.75e-02  6.06e-01  
  7  +5.0004e-01  +6.4747e-01  1.47e-01  9.79e-04  1.97e-01  2.38e-06  2.00e-02  7.46e-01  
  8  +5.0001e-01  +5.8685e-01  8.68e-02  5.02e-04  1.01e-01  3.92e-06  3.41e-03  9.90e-01  
  9  +4.9939e-01  +5.8389e-01  8.45e-02  3.67e-05  7.42e-03  1.02e-04  1.19e-04  9.66e-01  
 10  +4.9801e-01  +5.7055e-01  7.25e-02  2.51e-05  5.08e-03  9.53e-05  8.19e-05  4.12e-01  
 11  +4.9538e-01  +5.5047e-01  5.51e-02  1.90e-05  3.83e-03  5.16e-05  6.37e-05  3.42e-01  
 12  +4.9510e-01  +5.4731e-01  5.22e-02  1.84e-05  3.73e-03  3.64e-05  6.25e-05  1.93e-01  
 13  +4.9380e-01  +5.3891e-01  4.51e-02  1.51e-05  3.05e-03  2.66e-05  5.20e-05  2.72e-01  
 14  +4.9202e-01  +5.2723e-01  3.52e-02  1.08e-05  2.19e-03  1.06e-05  3.85e-05  5.67e-01  
 15  +4.8716e-01  +5.0024e-01  1.31e-02  3.26e-06  6.59e-04  1.21e-07  1.25e-05  9.69e-01  
 16  +4.8697e-01  +4.9936e-01  1.24e-02  3.01e-06  6.07e-04  1.67e-07  1.15e-05  1.97e-01  
 17  +4.8685e-01  +4.9873e-01  1.19e-02  2.92e-06  5.91e-04  2.22e-07  1.12e-05  2.03e-01  
 18  +4.8547e-01  +4.9213e-01  6.66e-03  1.59e-06  3.22e-04  1.52e-07  6.33e-06  5.58e-01  
 19  +4.8548e-01  +4.9218e-01  6.70e-03  1.59e-06  3.22e-04  1.54e-07  6.33e-06  1.30e-03  
 20  +4.8547e-01  +4.9211e-01  6.64e-03  1.59e-06  3.21e-04  1.54e-07  6.32e-06  1.43e-02  
 21  +4.8536e-01  +4.9152e-01  6.16e-03  1.46e-06  2.94e-04  1.85e-07  5.86e-06  3.92e-01  
 22  +4.8497e-01  +4.8962e-01  4.65e-03  1.10e-06  2.21e-04  1.81e-07  4.53e-06  7.71e-01  
 23  +4.8466e-01  +4.8815e-01  3.49e-03  8.19e-07  1.66e-04  1.41e-07  3.47e-06  5.40e-01  
 24  +4.8446e-01  +4.8724e-01  2.77e-03  6.52e-07  1.32e-04  1.11e-07  2.81e-06  2.39e-01  
 25  +4.8446e-01  +4.8723e-01  2.77e-03  6.49e-07  1.31e-04  1.12e-07  2.79e-06  8.94e-02  
 26  +4.8375e-01  +4.8391e-01  1.58e-04  3.71e-08  7.49e-06  3.96e-09  1.73e-07  9.76e-01  
 27  +4.8370e-01  +4.8370e-01  1.59e-06  3.73e-10  7.54e-08  3.95e-11  1.79e-09  9.90e-01  
 28  +4.8370e-01  +4.8370e-01  1.59e-08  3.73e-12  7.54e-10  3.95e-13  1.79e-11  9.90e-01  
 29  +4.8370e-01  +4.8370e-01  1.59e-10  3.73e-14  7.54e-12  3.97e-15  1.80e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 88.1259ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:04 PM: Optimal value: 4.837e-01
(CVXPY) Aug 30 12:10:04 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:10:04 PM: Solver (including time spent in interface) took 1.002e-01 seconds
Iteration: 2, Objective: 0.4837
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:04 PM: Your problem has 5033 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:04 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5033
  constraints   = 10033
  nnz(P)        = 0
  nnz(A)        = 54133
  cones (total) = 1
    : Nonnegative = 1,  numel = 10033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.01e+02  1.00e+00  1.00e+00   ------   
  1  +5.9302e-01  +1.0292e+03  1.03e+03  3.86e-01  6.15e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4182e-01  +1.3609e+02  1.36e+02  1.50e-01  3.02e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1045e-01  +3.4022e+01  3.35e+01  1.18e-01  2.34e+01  2.91e-05  2.39e-01  1.22e-01  
  4  +5.0033e-01  +1.4062e+00  9.06e-01  6.14e-03  1.24e+00  4.50e-06  1.33e-01  9.56e-01  
  5  +5.0005e-01  +6.9472e-01  1.95e-01  1.30e-03  2.65e-01  3.99e-06  5.45e-02  7.38e-01  
  6  +5.0003e-01  +6.3508e-01  1.35e-01  9.02e-04  1.83e-01  3.26e-06  3.10e-02  4.93e-01  
  7  +5.0002e-01  +6.2488e-01  1.25e-01  8.28e-04  1.68e-01  3.85e-06  1.61e-02  6.29e-01  
  8  +4.9984e-01  +5.7262e-01  7.28e-02  2.50e-04  5.11e-02  2.53e-05  9.89e-04  9.80e-01  
  9  +4.9891e-01  +5.6854e-01  6.96e-02  5.18e-05  1.06e-02  1.39e-04  1.66e-04  8.41e-01  
 10  +4.9846e-01  +5.6688e-01  6.84e-02  3.96e-05  8.11e-03  1.58e-04  1.26e-04  3.26e-01  
 11  +4.9764e-01  +5.6337e-01  6.57e-02  2.93e-05  6.00e-03  1.65e-04  9.26e-05  4.00e-01  
 12  +4.9630e-01  +5.5793e-01  6.16e-02  2.15e-05  4.40e-03  1.06e-04  6.77e-05  6.33e-01  
 13  +4.9627e-01  +5.5807e-01  6.18e-02  2.09e-05  4.28e-03  9.05e-05  6.57e-05  1.73e-01  
 14  +4.9471e-01  +5.5207e-01  5.74e-02  1.66e-05  3.40e-03  1.06e-06  5.23e-05  9.65e-01  
 15  +4.9244e-01  +5.4310e-01  5.07e-02  1.28e-05  2.62e-03  1.26e-06  4.06e-05  4.00e-01  
 16  +4.9176e-01  +5.4049e-01  4.87e-02  1.24e-05  2.54e-03  1.40e-06  3.94e-05  2.48e-01  
 17  +4.8927e-01  +5.3098e-01  4.17e-02  9.62e-06  1.97e-03  1.31e-06  3.08e-05  3.01e-01  
 18  +4.8405e-01  +5.1147e-01  2.74e-02  5.55e-06  1.14e-03  1.29e-06  1.82e-05  9.90e-01  
 19  +4.7609e-01  +4.8153e-01  5.44e-03  9.76e-07  2.00e-04  2.55e-07  3.33e-06  9.42e-01  
 20  +4.7567e-01  +4.8017e-01  4.50e-03  7.76e-07  1.59e-04  2.26e-07  2.62e-06  2.69e-01  
 21  +4.7551e-01  +4.7961e-01  4.10e-03  7.39e-07  1.51e-04  1.90e-07  2.61e-06  5.65e-02  
 22  +4.7539e-01  +4.7920e-01  3.81e-03  6.81e-07  1.39e-04  1.98e-07  2.37e-06  3.57e-01  
 23  +4.7469e-01  +4.7686e-01  2.17e-03  3.77e-07  7.70e-05  1.27e-07  1.29e-06  5.91e-01  
 24  +4.7385e-01  +4.7421e-01  3.56e-04  6.10e-08  1.25e-05  1.88e-08  2.10e-07  9.58e-01  
 25  +4.7370e-01  +4.7371e-01  9.94e-06  1.68e-09  3.44e-07  5.65e-10  5.79e-09  9.75e-01  
 26  +4.7370e-01  +4.7370e-01  9.94e-08  1.68e-11  3.44e-09  5.66e-12  5.79e-11  9.90e-01  
 27  +4.7370e-01  +4.7370e-01  9.96e-10  1.68e-13  3.44e-11  6.06e-14  6.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 83.4532ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:04 PM: Optimal value: 4.737e-01
(CVXPY) Aug 30 12:10:04 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:10:04 PM: Solver (including time spent in interface) took 9.374e-02 seconds
Iteration: 3, Objective: 0.4737
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:04 PM: Your problem has 5043 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:04 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5043
  constraints   = 10043
  nnz(P)        = 0
  nnz(A)        = 57307
  cones (total) = 1
    : Nonnegative = 1,  numel = 10043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.02e+02  1.00e+00  1.00e+00   ------   
  1  +5.9299e-01  +1.0294e+03  1.03e+03  3.87e-01  6.18e+01  3.92e-03  5.26e-01  6.26e-01  
  2  +5.4178e-01  +1.3601e+02  1.35e+02  1.50e-01  3.03e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1044e-01  +3.4000e+01  3.35e+01  1.18e-01  2.35e+01  2.92e-05  2.39e-01  1.22e-01  
  4  +5.0033e-01  +1.3984e+00  8.98e-01  6.10e-03  1.24e+00  4.50e-06  1.32e-01  9.62e-01  
  5  +5.0006e-01  +7.2260e-01  2.23e-01  1.49e-03  3.04e-01  4.04e-06  5.93e-02  6.86e-01  
  6  +5.0004e-01  +6.5020e-01  1.50e-01  1.00e-03  2.05e-01  3.31e-06  3.16e-02  5.56e-01  
  7  +5.0002e-01  +6.3268e-01  1.33e-01  8.70e-04  1.78e-01  5.26e-06  1.24e-02  6.82e-01  
  8  +4.9927e-01  +6.0623e-01  1.07e-01  1.16e-04  2.40e-02  1.08e-04  3.91e-04  9.90e-01  
  9  +4.9713e-01  +5.9105e-01  9.39e-02  3.72e-05  7.65e-03  2.79e-04  1.21e-04  7.01e-01  
 10  +4.9744e-01  +5.9187e-01  9.44e-02  3.73e-05  7.68e-03  2.52e-04  1.20e-04  9.58e-02  
 11  +4.9696e-01  +5.8525e-01  8.83e-02  3.33e-05  6.86e-03  1.82e-04  1.07e-04  3.16e-01  
 12  +4.9650e-01  +5.8039e-01  8.39e-02  2.89e-05  5.96e-03  1.37e-04  9.21e-05  3.49e-01  
 13  +4.9624e-01  +5.7691e-01  8.07e-02  2.68e-05  5.51e-03  8.97e-05  8.48e-05  3.56e-01  
 14  +4.9461e-01  +5.6678e-01  7.22e-02  2.28e-05  4.69e-03  1.82e-05  7.36e-05  7.19e-01  
 15  +4.8869e-01  +5.3929e-01  5.06e-02  1.21e-05  2.49e-03  1.21e-05  3.94e-05  6.03e-01  
 16  +4.8398e-01  +5.1995e-01  3.60e-02  7.83e-06  1.61e-03  7.91e-06  2.59e-05  3.96e-01  
 17  +4.8371e-01  +5.1898e-01  3.53e-02  7.69e-06  1.58e-03  6.97e-06  2.56e-05  1.06e-01  
 18  +4.8082e-01  +5.0765e-01  2.68e-02  5.47e-06  1.12e-03  3.86e-06  1.84e-05  5.27e-01  
 19  +4.7445e-01  +4.8281e-01  8.36e-03  1.57e-06  3.23e-04  3.71e-07  5.45e-06  9.90e-01  
 20  +4.7255e-01  +4.7618e-01  3.62e-03  6.45e-07  1.33e-04  1.76e-07  2.25e-06  6.32e-01  
 21  +4.7254e-01  +4.7613e-01  3.59e-03  6.43e-07  1.32e-04  1.73e-07  2.24e-06  1.21e-02  
 22  +4.7219e-01  +4.7500e-01  2.82e-03  5.18e-07  1.06e-04  1.29e-07  1.90e-06  4.33e-01  
 23  +4.7212e-01  +4.7472e-01  2.60e-03  4.77e-07  9.81e-05  1.25e-07  1.74e-06  2.10e-01  
 24  +4.7182e-01  +4.7361e-01  1.79e-03  3.26e-07  6.71e-05  9.20e-08  1.18e-06  4.62e-01  
 25  +4.7158e-01  +4.7299e-01  1.41e-03  2.47e-07  5.07e-05  7.97e-08  8.66e-07  4.15e-01  
 26  +4.7111e-01  +4.7136e-01  2.56e-04  4.44e-08  9.14e-06  1.46e-08  1.57e-07  8.32e-01  
 27  +4.7100e-01  +4.7101e-01  3.98e-06  6.91e-10  1.42e-07  2.38e-10  2.44e-09  9.90e-01  
 28  +4.7100e-01  +4.7100e-01  3.98e-08  6.91e-12  1.42e-09  2.39e-12  2.44e-11  9.90e-01  
 29  +4.7100e-01  +4.7100e-01  3.99e-10  6.92e-14  1.42e-11  2.43e-14  2.48e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 91.4584ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:04 PM: Optimal value: 4.710e-01
(CVXPY) Aug 30 12:10:04 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:10:04 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 4, Objective: 0.4710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:04 PM: Your problem has 5053 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:04 PM: Finished problem compilation (took 1.566e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5053
  constraints   = 10053
  nnz(P)        = 0
  nnz(A)        = 60017
  cones (total) = 1
    : Nonnegative = 1,  numel = 10053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.02e+02  1.00e+00  1.00e+00   ------   
  1  +5.9290e-01  +1.0298e+03  1.03e+03  3.87e-01  6.20e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4164e-01  +1.3576e+02  1.35e+02  1.51e-01  3.03e+01  1.16e-02  2.45e-01  8.27e-01  
  3  +5.1040e-01  +3.3919e+01  3.34e+01  1.18e-01  2.36e+01  2.92e-05  2.39e-01  1.24e-01  
  4  +5.0033e-01  +1.3885e+00  8.88e-01  6.04e-03  1.23e+00  4.52e-06  1.31e-01  9.71e-01  
  5  +5.0009e-01  +7.9496e-01  2.95e-01  1.98e-03  4.06e-01  4.23e-06  6.91e-02  5.78e-01  
  6  +5.0007e-01  +7.3979e-01  2.40e-01  1.61e-03  3.29e-01  4.03e-06  4.46e-02  4.71e-01  
  7  +5.0005e-01  +7.2086e-01  2.21e-01  1.47e-03  3.01e-01  4.99e-06  2.51e-02  5.21e-01  
  8  +4.9994e-01  +6.8071e-01  1.81e-01  8.01e-04  1.65e-01  1.95e-05  3.78e-03  8.85e-01  
  9  +4.9834e-01  +6.6101e-01  1.63e-01  8.26e-05  1.71e-02  2.24e-04  2.77e-04  9.27e-01  
 10  +4.9660e-01  +6.3471e-01  1.38e-01  6.37e-05  1.32e-02  1.79e-04  2.12e-04  3.20e-01  
 11  +4.9741e-01  +6.2604e-01  1.29e-01  5.32e-05  1.10e-02  6.89e-05  1.71e-04  6.79e-01  
 12  +4.9665e-01  +6.1894e-01  1.22e-01  4.31e-05  8.90e-03  6.52e-05  1.38e-04  3.06e-01  
 13  +4.9670e-01  +6.1643e-01  1.20e-01  4.17e-05  8.62e-03  5.17e-05  1.34e-04  2.07e-01  
 14  +4.9448e-01  +6.0069e-01  1.06e-01  3.22e-05  6.66e-03  3.13e-05  1.04e-04  5.34e-01  
 15  +4.8963e-01  +5.7443e-01  8.48e-02  2.26e-05  4.67e-03  2.04e-05  7.44e-05  4.37e-01  
 16  +4.8552e-01  +5.5474e-01  6.92e-02  1.70e-05  3.51e-03  1.56e-05  5.71e-05  2.83e-01  
 17  +4.8449e-01  +5.4874e-01  6.43e-02  1.63e-05  3.36e-03  1.24e-05  5.69e-05  6.90e-02  
 18  +4.8286e-01  +5.4018e-01  5.73e-02  1.43e-05  2.95e-03  9.79e-06  5.04e-05  2.13e-01  
 19  +4.8208e-01  +5.3670e-01  5.46e-02  1.32e-05  2.73e-03  6.36e-06  4.59e-05  4.48e-01  
 20  +4.7437e-01  +5.0357e-01  2.92e-02  6.33e-06  1.31e-03  2.94e-06  2.30e-05  5.66e-01  
 21  +4.6936e-01  +4.8200e-01  1.26e-02  2.58e-06  5.33e-04  7.89e-07  9.84e-06  8.55e-01  
 22  +4.6673e-01  +4.7148e-01  4.75e-03  9.57e-07  1.97e-04  2.82e-07  3.78e-06  6.87e-01  
 23  +4.6656e-01  +4.7075e-01  4.18e-03  8.39e-07  1.73e-04  2.38e-07  3.32e-06  4.28e-01  
 24  +4.6552e-01  +4.6665e-01  1.14e-03  2.28e-07  4.70e-05  5.90e-08  9.19e-07  9.77e-01  
 25  +4.6511e-01  +4.6513e-01  1.87e-05  3.74e-09  7.71e-07  9.47e-10  1.53e-08  9.84e-01  
 26  +4.6510e-01  +4.6510e-01  1.87e-07  3.74e-11  7.71e-09  9.47e-12  1.53e-10  9.90e-01  
 27  +4.6510e-01  +4.6510e-01  1.87e-09  3.74e-13  7.72e-11  9.49e-14  1.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.5037ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:04 PM: Optimal value: 4.651e-01
(CVXPY) Aug 30 12:10:04 PM: Compilation took 1.566e-02 seconds
(CVXPY) Aug 30 12:10:04 PM: Solver (including time spent in interface) took 1.093e-01 seconds
Iteration: 5, Objective: 0.4651
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:05 PM: Your problem has 5063 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:05 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5063
  constraints   = 10063
  nnz(P)        = 0
  nnz(A)        = 62264
  cones (total) = 1
    : Nonnegative = 1,  numel = 10063

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.03e+02  1.00e+00  1.00e+00   ------   
  1  +5.9287e-01  +1.0299e+03  1.03e+03  3.87e-01  6.21e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4161e-01  +1.3569e+02  1.35e+02  1.51e-01  3.03e+01  1.16e-02  2.45e-01  8.28e-01  
  3  +5.1039e-01  +3.3897e+01  3.34e+01  1.19e-01  2.36e+01  2.93e-05  2.39e-01  1.24e-01  
  4  +5.0032e-01  +1.3600e+00  8.60e-01  5.85e-03  1.19e+00  4.50e-06  1.28e-01  9.90e-01  
  5  +5.0009e-01  +7.8362e-01  2.84e-01  1.91e-03  3.91e-01  4.24e-06  6.61e-02  5.91e-01  
  6  +5.0007e-01  +7.3380e-01  2.34e-01  1.57e-03  3.22e-01  4.23e-06  3.99e-02  5.32e-01  
  7  +5.0006e-01  +7.2209e-01  2.22e-01  1.48e-03  3.03e-01  5.43e-06  2.41e-02  4.46e-01  
  8  +4.9992e-01  +6.8087e-01  1.81e-01  6.96e-04  1.44e-01  2.41e-05  3.02e-03  9.45e-01  
  9  +4.9849e-01  +6.6228e-01  1.64e-01  8.50e-05  1.76e-02  2.18e-04  2.86e-04  9.06e-01  
 10  +4.9616e-01  +6.2443e-01  1.28e-01  6.16e-05  1.27e-02  1.38e-04  2.05e-04  4.16e-01  
 11  +4.9643e-01  +6.2562e-01  1.29e-01  5.81e-05  1.20e-02  1.29e-04  1.91e-04  1.81e-01  
 12  +4.9669e-01  +6.2326e-01  1.27e-01  5.48e-05  1.14e-02  1.00e-04  1.78e-04  2.70e-01  
 13  +4.9597e-01  +6.1815e-01  1.22e-01  4.46e-05  9.23e-03  1.01e-04  1.44e-04  2.77e-01  
 14  +4.9619e-01  +6.1585e-01  1.20e-01  4.20e-05  8.70e-03  7.21e-05  1.35e-04  3.17e-01  
 15  +4.9377e-01  +5.9878e-01  1.05e-01  3.07e-05  6.35e-03  4.30e-05  9.92e-05  5.86e-01  
 16  +4.8533e-01  +5.5328e-01  6.80e-02  1.68e-05  3.46e-03  1.70e-05  5.61e-05  6.46e-01  
 17  +4.8492e-01  +5.5191e-01  6.70e-02  1.61e-05  3.33e-03  1.62e-05  5.40e-05  8.06e-02  
 18  +4.8399e-01  +5.4625e-01  6.23e-02  1.54e-05  3.19e-03  1.08e-05  5.27e-05  2.57e-01  
 19  +4.8022e-01  +5.2973e-01  4.95e-02  1.14e-05  2.37e-03  5.78e-06  3.97e-05  5.26e-01  
 20  +4.7304e-01  +4.9845e-01  2.54e-02  5.50e-06  1.14e-03  2.45e-06  2.00e-05  5.62e-01  
 21  +4.6938e-01  +4.8264e-01  1.33e-02  2.76e-06  5.69e-04  9.79e-07  1.04e-05  7.06e-01  
 22  +4.6745e-01  +4.7471e-01  7.26e-03  1.49e-06  3.07e-04  5.00e-07  5.74e-06  5.60e-01  
 23  +4.6657e-01  +4.7095e-01  4.39e-03  8.81e-07  1.82e-04  2.35e-07  3.44e-06  9.90e-01  
 24  +4.6524e-01  +4.6589e-01  6.55e-04  1.31e-07  2.70e-05  3.47e-08  5.24e-07  8.71e-01  
 25  +4.6501e-01  +4.6503e-01  1.97e-05  3.93e-09  8.12e-07  1.01e-09  1.58e-08  9.90e-01  
 26  +4.6500e-01  +4.6500e-01  1.97e-07  3.94e-11  8.13e-09  1.01e-11  1.58e-10  9.90e-01  
 27  +4.6500e-01  +4.6500e-01  1.97e-09  3.94e-13  8.14e-11  1.02e-13  1.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97.7936ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:05 PM: Optimal value: 4.650e-01
(CVXPY) Aug 30 12:10:05 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:10:05 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 6, Objective: 0.4650
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:05 PM: Your problem has 5065 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:05 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5065
  constraints   = 10065
  nnz(P)        = 0
  nnz(A)        = 62523
  cones (total) = 1
    : Nonnegative = 1,  numel = 10065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.03e+02  1.00e+00  1.00e+00   ------   
  1  +5.9287e-01  +1.0299e+03  1.03e+03  3.87e-01  6.21e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4160e-01  +1.3569e+02  1.35e+02  1.51e-01  3.03e+01  1.16e-02  2.45e-01  8.28e-01  
  3  +5.1039e-01  +3.3893e+01  3.34e+01  1.19e-01  2.36e+01  2.93e-05  2.39e-01  1.24e-01  
  4  +5.0032e-01  +1.3627e+00  8.62e-01  5.87e-03  1.20e+00  4.50e-06  1.29e-01  9.88e-01  
  5  +5.0009e-01  +7.8401e-01  2.84e-01  1.91e-03  3.92e-01  4.24e-06  6.62e-02  5.91e-01  
  6  +5.0007e-01  +7.3535e-01  2.35e-01  1.58e-03  3.24e-01  4.23e-06  4.02e-02  5.33e-01  
  7  +5.0006e-01  +7.2249e-01  2.22e-01  1.48e-03  3.04e-01  5.42e-06  2.41e-02  4.48e-01  
  8  +4.9992e-01  +6.8093e-01  1.81e-01  7.02e-04  1.45e-01  2.39e-05  3.05e-03  9.41e-01  
  9  +4.9847e-01  +6.6215e-01  1.64e-01  8.49e-05  1.76e-02  2.18e-04  2.86e-04  9.07e-01  
 10  +4.9615e-01  +6.2455e-01  1.28e-01  6.14e-05  1.27e-02  1.40e-04  2.05e-04  4.16e-01  
 11  +4.9644e-01  +6.2577e-01  1.29e-01  5.77e-05  1.20e-02  1.30e-04  1.89e-04  1.93e-01  
 12  +4.9719e-01  +6.2089e-01  1.24e-01  5.13e-05  1.06e-02  6.01e-05  1.65e-04  5.88e-01  
 13  +4.9701e-01  +6.1748e-01  1.20e-01  4.71e-05  9.75e-03  4.33e-05  1.52e-04  3.34e-01  
 14  +4.9600e-01  +6.1004e-01  1.14e-01  3.88e-05  8.03e-03  3.79e-05  1.26e-04  3.26e-01  
 15  +4.9372e-01  +5.9094e-01  9.72e-02  3.27e-05  6.77e-03  1.07e-05  1.06e-04  6.51e-01  
 16  +4.9076e-01  +5.7631e-01  8.56e-02  2.57e-05  5.31e-03  6.70e-06  8.44e-05  5.22e-01  
 17  +4.8773e-01  +5.6264e-01  7.49e-02  2.02e-05  4.18e-03  5.09e-06  6.75e-05  3.97e-01  
 18  +4.8680e-01  +5.5804e-01  7.12e-02  1.97e-05  4.07e-03  4.32e-06  6.70e-05  1.13e-01  
 19  +4.7668e-01  +5.1180e-01  3.51e-02  8.05e-06  1.66e-03  1.68e-06  2.86e-05  7.46e-01  
 20  +4.7315e-01  +4.9723e-01  2.41e-02  5.30e-06  1.10e-03  1.08e-06  1.94e-05  5.13e-01  
 21  +4.6826e-01  +4.7797e-01  9.71e-03  2.01e-06  4.15e-04  4.29e-07  7.63e-06  7.21e-01  
 22  +4.6786e-01  +4.7640e-01  8.54e-03  1.74e-06  3.59e-04  3.86e-07  6.62e-06  1.96e-01  
 23  +4.6782e-01  +4.7624e-01  8.42e-03  1.72e-06  3.55e-04  3.82e-07  6.54e-06  5.73e-02  
 24  +4.6624e-01  +4.6998e-01  3.74e-03  7.53e-07  1.55e-04  1.87e-07  2.95e-06  9.90e-01  
 25  +4.6530e-01  +4.6636e-01  1.06e-03  2.11e-07  4.35e-05  5.47e-08  8.38e-07  7.96e-01  
 26  +4.6491e-01  +4.6493e-01  2.27e-05  4.48e-09  9.26e-07  1.11e-09  1.80e-08  9.90e-01  
 27  +4.6490e-01  +4.6490e-01  2.28e-07  4.49e-11  9.27e-09  1.11e-11  1.80e-10  9.90e-01  
 28  +4.6490e-01  +4.6490e-01  2.28e-09  4.49e-13  9.27e-11  1.11e-13  1.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 94.3657ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:05 PM: Optimal value: 4.649e-01
(CVXPY) Aug 30 12:10:05 PM: Compilation took 3.126e-02 seconds
(CVXPY) Aug 30 12:10:05 PM: Solver (including time spent in interface) took 9.375e-02 seconds
Iteration: 7, Objective: 0.4649
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:05 PM: Your problem has 5069 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:05 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5069
  constraints   = 10069
  nnz(P)        = 0
  nnz(A)        = 63265
  cones (total) = 1
    : Nonnegative = 1,  numel = 10069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.03e+02  1.00e+00  1.00e+00   ------   
  1  +5.9284e-01  +1.0300e+03  1.03e+03  3.88e-01  6.22e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4157e-01  +1.3562e+02  1.35e+02  1.51e-01  3.03e+01  1.16e-02  2.45e-01  8.28e-01  
  3  +5.1039e-01  +3.3881e+01  3.34e+01  1.19e-01  2.36e+01  2.93e-05  2.39e-01  1.24e-01  
  4  +5.0033e-01  +1.3935e+00  8.93e-01  6.08e-03  1.24e+00  4.52e-06  1.31e-01  9.70e-01  
  5  +5.0010e-01  +8.1571e-01  3.16e-01  2.12e-03  4.36e-01  4.31e-06  7.17e-02  5.53e-01  
  6  +5.0008e-01  +7.6443e-01  2.64e-01  1.77e-03  3.65e-01  4.15e-06  4.66e-02  5.11e-01  
  7  +5.0005e-01  +7.3174e-01  2.32e-01  1.51e-03  3.10e-01  5.82e-06  1.78e-02  7.91e-01  
  8  +4.9954e-01  +6.8940e-01  1.90e-01  2.39e-04  4.95e-02  7.79e-05  8.54e-04  9.71e-01  
  9  +4.9790e-01  +6.6002e-01  1.62e-01  8.20e-05  1.70e-02  1.77e-04  2.83e-04  6.91e-01  
 10  +4.9770e-01  +6.5059e-01  1.53e-01  7.88e-05  1.63e-02  1.32e-04  2.67e-04  2.03e-01  
 11  +4.9594e-01  +6.2534e-01  1.29e-01  5.56e-05  1.15e-02  1.09e-04  1.82e-04  4.40e-01  
 12  +4.9595e-01  +6.2446e-01  1.29e-01  5.11e-05  1.06e-02  9.93e-05  1.66e-04  2.15e-01  
 13  +4.9629e-01  +6.2311e-01  1.27e-01  4.38e-05  9.07e-03  6.72e-05  1.41e-04  4.89e-01  
 14  +4.9550e-01  +6.1620e-01  1.21e-01  3.78e-05  7.83e-03  5.34e-05  1.22e-04  3.25e-01  
 15  +4.9221e-01  +5.8716e-01  9.50e-02  3.08e-05  6.38e-03  1.08e-06  1.01e-04  8.08e-01  
 16  +4.8772e-01  +5.6600e-01  7.83e-02  2.12e-05  4.39e-03  1.26e-06  7.04e-05  4.05e-01  
 17  +4.8697e-01  +5.6264e-01  7.57e-02  2.00e-05  4.14e-03  1.38e-06  6.66e-05  1.31e-01  
 18  +4.8432e-01  +5.4851e-01  6.42e-02  1.65e-05  3.42e-03  2.05e-06  5.60e-05  6.74e-01  
 19  +4.8108e-01  +5.3410e-01  5.30e-02  1.30e-05  2.69e-03  1.71e-06  4.49e-05  2.99e-01  
 20  +4.7477e-01  +5.0639e-01  3.16e-02  7.12e-06  1.47e-03  1.02e-06  2.55e-05  4.95e-01  
 21  +4.7399e-01  +5.0274e-01  2.87e-02  6.31e-06  1.31e-03  1.02e-06  2.26e-05  2.80e-01  
 22  +4.7186e-01  +4.9302e-01  2.12e-02  4.47e-06  9.25e-04  9.34e-07  1.63e-05  7.19e-01  
 23  +4.6834e-01  +4.7845e-01  1.01e-02  2.07e-06  4.28e-04  4.72e-07  7.74e-06  6.80e-01  
 24  +4.6793e-01  +4.7682e-01  8.89e-03  1.80e-06  3.73e-04  4.21e-07  6.77e-06  1.82e-01  
 25  +4.6780e-01  +4.7627e-01  8.46e-03  1.72e-06  3.55e-04  4.07e-07  6.45e-06  1.75e-01  
 26  +4.6558e-01  +4.6750e-01  1.93e-03  3.84e-07  7.94e-05  9.65e-08  1.49e-06  9.21e-01  
 27  +4.6500e-01  +4.6529e-01  2.89e-04  5.73e-08  1.18e-05  1.45e-08  2.24e-07  8.55e-01  
 28  +4.6490e-01  +4.6492e-01  1.20e-05  2.37e-09  4.89e-07  6.12e-10  9.30e-09  9.83e-01  
 29  +4.6490e-01  +4.6490e-01  1.20e-07  2.37e-11  4.90e-09  6.14e-12  9.33e-11  9.90e-01  
 30  +4.6490e-01  +4.6490e-01  1.99e-09  3.93e-13  8.13e-11  1.02e-13  1.56e-12  9.83e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 110.3336ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:05 PM: Optimal value: 4.649e-01
(CVXPY) Aug 30 12:10:05 PM: Compilation took 3.124e-02 seconds
(CVXPY) Aug 30 12:10:05 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 8, Objective: 0.4649
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:05 PM: Your problem has 5073 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:05 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5073
  constraints   = 10073
  nnz(P)        = 0
  nnz(A)        = 64407
  cones (total) = 1
    : Nonnegative = 1,  numel = 10073

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.03e+02  1.00e+00  1.00e+00   ------   
  1  +5.9283e-01  +1.0300e+03  1.03e+03  3.88e-01  6.22e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4156e-01  +1.3559e+02  1.35e+02  1.51e-01  3.04e+01  1.16e-02  2.45e-01  8.28e-01  
  3  +5.1038e-01  +3.3877e+01  3.34e+01  1.19e-01  2.36e+01  2.93e-05  2.39e-01  1.24e-01  
  4  +5.0033e-01  +1.4115e+00  9.11e-01  6.20e-03  1.27e+00  4.54e-06  1.32e-01  9.59e-01  
  5  +5.0010e-01  +8.2833e-01  3.28e-01  2.21e-03  4.54e-01  4.33e-06  7.40e-02  5.40e-01  
  6  +5.0008e-01  +7.6147e-01  2.61e-01  1.76e-03  3.61e-01  4.04e-06  4.72e-02  5.01e-01  
  7  +5.0006e-01  +7.3517e-01  2.35e-01  1.54e-03  3.17e-01  5.55e-06  1.91e-02  7.73e-01  
  8  +4.9963e-01  +6.8928e-01  1.90e-01  2.94e-04  6.10e-02  6.19e-05  1.07e-03  9.64e-01  
  9  +4.9786e-01  +6.5953e-01  1.62e-01  7.78e-05  1.61e-02  1.91e-04  2.68e-04  7.62e-01  
 10  +4.9749e-01  +6.5052e-01  1.53e-01  7.22e-05  1.50e-02  1.54e-04  2.43e-04  2.21e-01  
 11  +4.9630e-01  +6.3379e-01  1.37e-01  5.62e-05  1.17e-02  1.31e-04  1.83e-04  3.62e-01  
 12  +4.9576e-01  +6.2752e-01  1.32e-01  4.33e-05  8.98e-03  1.17e-04  1.39e-04  4.30e-01  
 13  +4.9545e-01  +6.2160e-01  1.26e-01  4.09e-05  8.50e-03  8.92e-05  1.32e-04  2.22e-01  
 14  +4.9396e-01  +6.0897e-01  1.15e-01  3.51e-05  7.29e-03  5.84e-05  1.14e-04  3.74e-01  
 15  +4.8731e-01  +5.6992e-01  8.26e-02  2.09e-05  4.33e-03  3.19e-05  6.94e-05  5.67e-01  
 16  +4.8538e-01  +5.6027e-01  7.49e-02  1.82e-05  3.78e-03  2.67e-05  6.11e-05  1.84e-01  
 17  +4.8468e-01  +5.5467e-01  7.00e-02  1.75e-05  3.63e-03  1.78e-05  5.92e-05  2.56e-01  
 18  +4.7892e-01  +5.2671e-01  4.78e-02  1.10e-05  2.28e-03  7.74e-06  3.83e-05  5.72e-01  
 19  +4.7404e-01  +5.0452e-01  3.05e-02  6.68e-06  1.38e-03  4.32e-06  2.41e-05  4.42e-01  
 20  +4.7378e-01  +5.0318e-01  2.94e-02  6.41e-06  1.33e-03  3.87e-06  2.31e-05  1.38e-01  
 21  +4.7304e-01  +4.9936e-01  2.63e-02  5.59e-06  1.16e-03  2.94e-06  2.03e-05  3.49e-01  
 22  +4.7280e-01  +4.9808e-01  2.53e-02  5.35e-06  1.11e-03  2.62e-06  1.94e-05  1.74e-01  
 23  +4.6794e-01  +4.7753e-01  9.59e-03  1.96e-06  4.05e-04  7.50e-07  7.39e-06  7.77e-01  
 24  +4.6756e-01  +4.7600e-01  8.44e-03  1.70e-06  3.53e-04  6.52e-07  6.45e-06  1.80e-01  
 25  +4.6747e-01  +4.7560e-01  8.13e-03  1.64e-06  3.40e-04  6.03e-07  6.22e-06  1.54e-01  
 26  +4.6539e-01  +4.6733e-01  1.94e-03  3.85e-07  7.98e-05  9.85e-08  1.51e-06  9.90e-01  
 27  +4.6472e-01  +4.6478e-01  5.94e-05  1.17e-08  2.42e-06  3.02e-09  4.66e-08  9.72e-01  
 28  +4.6470e-01  +4.6470e-01  5.95e-07  1.17e-10  2.42e-08  3.02e-11  4.67e-10  9.90e-01  
 29  +4.6470e-01  +4.6470e-01  5.95e-09  1.17e-12  2.42e-10  3.02e-13  4.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100.6545ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:05 PM: Optimal value: 4.647e-01
(CVXPY) Aug 30 12:10:05 PM: Compilation took 3.125e-02 seconds
(CVXPY) Aug 30 12:10:05 PM: Solver (including time spent in interface) took 1.093e-01 seconds
Iteration: 9, Objective: 0.4647
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:05 PM: Your problem has 5074 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:05 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5074
  constraints   = 10074
  nnz(P)        = 0
  nnz(A)        = 64591
  cones (total) = 1
    : Nonnegative = 1,  numel = 10074

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.03e+02  1.00e+00  1.00e+00   ------   
  1  +5.9283e-01  +1.0300e+03  1.03e+03  3.88e-01  6.22e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4156e-01  +1.3559e+02  1.35e+02  1.51e-01  3.04e+01  1.16e-02  2.45e-01  8.28e-01  
  3  +5.1038e-01  +3.3876e+01  3.34e+01  1.19e-01  2.36e+01  2.93e-05  2.39e-01  1.24e-01  
  4  +5.0033e-01  +1.4108e+00  9.11e-01  6.20e-03  1.27e+00  4.54e-06  1.32e-01  9.59e-01  
  5  +5.0010e-01  +8.2871e-01  3.29e-01  2.21e-03  4.55e-01  4.33e-06  7.40e-02  5.40e-01  
  6  +5.0008e-01  +7.6193e-01  2.62e-01  1.76e-03  3.62e-01  4.05e-06  4.71e-02  5.07e-01  
  7  +5.0005e-01  +7.3551e-01  2.35e-01  1.54e-03  3.17e-01  5.63e-06  1.88e-02  7.78e-01  
  8  +4.9949e-01  +6.7872e-01  1.79e-01  2.18e-04  4.53e-02  8.01e-05  7.78e-04  9.78e-01  
  9  +4.9783e-01  +6.5098e-01  1.53e-01  7.91e-05  1.64e-02  1.71e-04  2.72e-04  6.74e-01  
 10  +4.9756e-01  +6.4420e-01  1.47e-01  7.47e-05  1.55e-02  1.42e-04  2.52e-04  1.88e-01  
 11  +4.9623e-01  +6.2574e-01  1.30e-01  5.49e-05  1.14e-02  1.18e-04  1.79e-04  4.40e-01  
 12  +4.9612e-01  +6.2384e-01  1.28e-01  4.66e-05  9.68e-03  1.03e-04  1.50e-04  3.52e-01  
 13  +4.9522e-01  +6.1673e-01  1.22e-01  3.67e-05  7.62e-03  8.32e-05  1.19e-04  4.38e-01  
 14  +4.9417e-01  +6.0884e-01  1.15e-01  3.56e-05  7.38e-03  6.61e-05  1.16e-04  1.27e-01  
 15  +4.9092e-01  +5.8299e-01  9.21e-02  2.78e-05  5.76e-03  7.82e-06  9.14e-05  7.55e-01  
 16  +4.8593e-01  +5.5815e-01  7.22e-02  1.89e-05  3.91e-03  5.67e-06  6.36e-05  4.21e-01  
 17  +4.8526e-01  +5.5401e-01  6.88e-02  1.83e-05  3.80e-03  4.65e-06  6.26e-05  1.70e-01  
 18  +4.8370e-01  +5.4636e-01  6.27e-02  1.62e-05  3.36e-03  3.78e-06  5.55e-05  2.90e-01  
 19  +4.7849e-01  +5.2286e-01  4.44e-02  1.03e-05  2.13e-03  2.09e-06  3.61e-05  6.91e-01  
 20  +4.7376e-01  +5.0223e-01  2.85e-02  6.25e-06  1.30e-03  1.29e-06  2.27e-05  4.36e-01  
 21  +4.7354e-01  +5.0123e-01  2.77e-02  6.06e-06  1.26e-03  1.26e-06  2.20e-05  9.16e-02  
 22  +4.7342e-01  +5.0050e-01  2.71e-02  5.85e-06  1.21e-03  1.26e-06  2.12e-05  1.57e-01  
 23  +4.7072e-01  +4.8910e-01  1.84e-02  3.87e-06  8.01e-04  8.52e-07  1.43e-05  4.06e-01  
 24  +4.6723e-01  +4.7433e-01  7.10e-03  1.43e-06  2.96e-04  3.64e-07  5.44e-06  9.44e-01  
 25  +4.6680e-01  +4.7269e-01  5.89e-03  1.19e-06  2.47e-04  2.93e-07  4.63e-06  4.03e-01  
 26  +4.6651e-01  +4.7150e-01  4.99e-03  1.01e-06  2.09e-04  2.50e-07  3.93e-06  2.71e-01  
 27  +4.6642e-01  +4.7118e-01  4.76e-03  9.60e-07  1.99e-04  2.43e-07  3.72e-06  2.38e-01  
 28  +4.6580e-01  +4.6884e-01  3.04e-03  6.04e-07  1.25e-04  1.59e-07  2.35e-06  6.02e-01  
 29  +4.6481e-01  +4.6510e-01  2.92e-04  5.76e-08  1.19e-05  1.52e-08  2.29e-07  9.90e-01  
 30  +4.6470e-01  +4.6470e-01  3.10e-06  6.10e-10  1.26e-07  1.61e-10  2.44e-09  9.90e-01  
 31  +4.6470e-01  +4.6470e-01  3.10e-08  6.10e-12  1.26e-09  1.61e-12  2.44e-11  9.90e-01  
 32  +4.6470e-01  +4.6470e-01  3.10e-10  6.10e-14  1.26e-11  1.64e-14  2.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.1037ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:05 PM: Optimal value: 4.647e-01
(CVXPY) Aug 30 12:10:05 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:10:05 PM: Solver (including time spent in interface) took 1.250e-01 seconds
FULL MODEL:
  Accruacy: 0.5235
  Our objective: 0.04700000000000004

IF 
    (x2 = 1 AND x3 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.02099999999999999)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.015999999999999952)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0) <-- (term's our objective: 0.00379999999999997)
 OR (x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0) <-- (term's our objective: 0.0041999999999999486)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0019999999999999706)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.02099999999999999
    Its accruacy: 0.5105
    Its hamming distance: 5
  Shortest hamming distance: 0
    Its our objective: 0.015999999999999952
  Highest accruacy: 0.5105
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

