Command:
python test_script.py -s smallest_subclass -d 6 -n 50000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.01828
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 6.

Computed total variation: 0.04124
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:40 PM: Your problem has 25013 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:40 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:40 PM: Finished problem compilation (took 7.911e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25013
  constraints   = 50013
  nnz(P)        = 0
  nnz(A)        = 225013
  cones (total) = 1
    : Nonnegative = 1,  numel = 50013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.9317e-01  +5.1431e+03  5.14e+03  3.90e-01  1.35e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4210e-01  +6.8134e+02  6.81e+02  1.56e-01  6.85e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1087e-01  +1.7229e+02  1.72e+02  1.40e-01  6.15e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0082e-01  +1.0787e+01  1.03e+01  2.98e-02  1.28e+01  3.44e-06  1.93e-01  4.61e-01  
  5  +5.0000e-01  +9.8671e-01  4.87e-01  1.47e-03  6.52e-01  2.51e-05  1.79e-01  4.91e-01  
  6  +5.0000e-01  +5.5258e-01  5.26e-02  1.57e-04  7.00e-02  2.59e-06  2.01e-02  8.89e-01  
  7  +5.0000e-01  +5.2767e-01  2.77e-02  8.25e-05  3.68e-02  2.78e-06  5.09e-03  8.23e-01  
  8  +4.9996e-01  +5.3370e-01  3.37e-02  8.56e-05  3.82e-02  2.52e-05  5.76e-04  9.18e-01  
  9  +4.9860e-01  +5.3069e-01  3.21e-02  4.99e-06  2.23e-03  8.24e-04  1.58e-05  9.73e-01  
 10  +4.9591e-01  +5.2082e-01  2.49e-02  1.43e-06  6.38e-04  1.75e-03  4.49e-06  7.37e-01  
 11  +4.9450e-01  +5.0376e-01  9.26e-03  5.13e-07  2.30e-04  1.08e-04  1.69e-06  8.02e-01  
 12  +4.9227e-01  +4.9332e-01  1.04e-03  4.84e-08  2.17e-05  1.04e-05  1.69e-07  9.07e-01  
 13  +4.9192e-01  +4.9197e-01  5.26e-05  2.12e-09  9.49e-07  1.79e-07  8.50e-09  9.83e-01  
 14  +4.9190e-01  +4.9190e-01  5.29e-07  2.11e-11  9.45e-09  1.80e-09  8.55e-11  9.90e-01  
 15  +4.9190e-01  +4.9190e-01  5.29e-09  2.11e-13  9.44e-11  1.80e-11  8.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 258.6047ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:40 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:40 PM: Optimal value: 4.919e-01
(CVXPY) Aug 30 12:10:40 PM: Compilation took 7.911e-02 seconds
(CVXPY) Aug 30 12:10:40 PM: Solver (including time spent in interface) took 2.814e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4919
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:40 PM: Your problem has 25023 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:41 PM: Finished problem compilation (took 9.405e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25023
  constraints   = 50023
  nnz(P)        = 0
  nnz(A)        = 247257
  cones (total) = 1
    : Nonnegative = 1,  numel = 50023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1432e+03  5.14e+03  3.90e-01  1.37e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4209e-01  +6.8119e+02  6.81e+02  1.56e-01  6.92e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7223e+02  1.72e+02  1.40e-01  6.21e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0754e+01  1.03e+01  2.97e-02  1.29e+01  3.44e-06  1.93e-01  4.63e-01  
  5  +5.0001e-01  +1.1162e+00  6.16e-01  1.86e-03  8.35e-01  2.54e-05  1.81e-01  4.10e-01  
  6  +5.0000e-01  +6.9929e-01  1.99e-01  5.96e-04  2.69e-01  7.16e-06  6.55e-02  6.90e-01  
  7  +5.0000e-01  +6.9359e-01  1.94e-01  5.79e-04  2.61e-01  6.60e-06  6.19e-02  1.33e-01  
  8  +5.0001e-01  +6.9795e-01  1.98e-01  5.92e-04  2.67e-01  6.16e-06  6.15e-02  1.28e-01  
  9  +5.0001e-01  +6.5560e-01  1.56e-01  4.65e-04  2.09e-01  3.78e-06  4.45e-02  5.41e-01  
 10  +5.0001e-01  +6.3140e-01  1.31e-01  3.92e-04  1.77e-01  3.10e-06  3.58e-02  2.64e-01  
 11  +5.0001e-01  +6.1513e-01  1.15e-01  3.44e-04  1.55e-01  2.47e-06  2.89e-02  3.24e-01  
 12  +5.0001e-01  +6.1220e-01  1.12e-01  3.34e-04  1.51e-01  3.03e-07  2.24e-02  9.90e-01  
 13  +5.0000e-01  +5.5389e-01  5.39e-02  1.60e-04  7.23e-02  2.32e-07  7.11e-03  7.24e-01  
 14  +5.0000e-01  +5.5172e-01  5.17e-02  1.53e-04  6.88e-02  3.61e-07  3.48e-03  5.72e-01  
 15  +5.0000e-01  +5.4798e-01  4.80e-02  1.34e-04  6.05e-02  6.38e-07  1.33e-03  7.60e-01  
 16  +5.0000e-01  +5.3774e-01  3.77e-02  9.89e-05  4.46e-02  2.50e-07  7.17e-04  9.90e-01  
 17  +4.9998e-01  +5.3785e-01  3.79e-02  4.50e-06  2.03e-03  1.28e-05  1.37e-05  9.81e-01  
 18  +4.9993e-01  +5.3708e-01  3.71e-02  2.15e-06  9.73e-04  2.44e-05  6.52e-06  5.90e-01  
 19  +4.9961e-01  +5.3495e-01  3.53e-02  2.15e-06  9.73e-04  2.18e-05  6.52e-06  6.26e-03  
 20  +4.9756e-01  +5.2140e-01  2.38e-02  1.89e-06  8.55e-04  5.03e-06  5.73e-06  3.23e-01  
 21  +4.9785e-01  +5.2330e-01  2.54e-02  1.87e-06  8.44e-04  4.14e-06  5.60e-06  2.79e-01  
 22  +4.9778e-01  +5.2299e-01  2.52e-02  1.86e-06  8.43e-04  3.94e-06  5.60e-06  2.77e-02  
 23  +4.9790e-01  +5.2342e-01  2.55e-02  1.85e-06  8.38e-04  3.10e-06  5.52e-06  2.18e-01  
 24  +4.9741e-01  +5.2179e-01  2.44e-02  1.30e-06  5.89e-04  4.39e-07  3.81e-06  9.90e-01  
 25  +4.9729e-01  +5.2143e-01  2.41e-02  1.18e-06  5.35e-04  4.14e-07  3.46e-06  2.52e-01  
 26  +4.9649e-01  +5.1916e-01  2.27e-02  1.12e-06  5.08e-04  3.07e-07  3.36e-06  3.09e-01  
 27  +4.9539e-01  +5.1501e-01  1.96e-02  8.67e-07  3.92e-04  2.77e-07  2.58e-06  2.79e-01  
 28  +4.9510e-01  +5.1280e-01  1.77e-02  7.07e-07  3.20e-04  1.83e-07  2.07e-06  9.50e-01  
 29  +4.9231e-01  +5.0352e-01  1.12e-02  3.93e-07  1.78e-04  1.19e-07  1.16e-06  5.29e-01  
 30  +4.8856e-01  +4.9063e-01  2.08e-03  6.51e-08  2.94e-05  2.03e-08  1.97e-07  8.60e-01  
 31  +4.8856e-01  +4.9063e-01  2.06e-03  6.42e-08  2.90e-05  2.20e-08  1.94e-07  1.26e-01  
 32  +4.8856e-01  +4.9061e-01  2.05e-03  6.42e-08  2.90e-05  2.18e-08  1.94e-07  1.24e-03  
 33  +4.8852e-01  +4.9042e-01  1.90e-03  5.91e-08  2.67e-05  2.28e-08  1.79e-07  2.80e-01  
 34  +4.8852e-01  +4.9041e-01  1.90e-03  5.89e-08  2.66e-05  2.28e-08  1.78e-07  1.56e-02  
 35  +4.8852e-01  +4.9043e-01  1.91e-03  5.89e-08  2.66e-05  2.33e-08  1.78e-07  2.04e-02  
 36  +4.8810e-01  +4.8898e-01  8.77e-04  2.67e-08  1.21e-05  1.49e-08  8.13e-08  9.90e-01  
 37  +4.8771e-01  +4.8776e-01  5.63e-05  1.71e-09  7.73e-07  9.57e-10  5.23e-09  9.65e-01  
 38  +4.8768e-01  +4.8768e-01  6.11e-07  1.86e-11  8.39e-09  1.04e-11  5.68e-11  9.89e-01  
 39  +4.8768e-01  +4.8768e-01  6.13e-09  1.86e-13  8.41e-11  1.15e-13  6.25e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 670.3249ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:41 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:41 PM: Optimal value: 4.877e-01
(CVXPY) Aug 30 12:10:41 PM: Compilation took 9.405e-02 seconds
(CVXPY) Aug 30 12:10:41 PM: Solver (including time spent in interface) took 7.044e-01 seconds
Iteration: 2, Objective: 0.4877
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:41 PM: Your problem has 25033 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:41 PM: Finished problem compilation (took 9.405e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25033
  constraints   = 50033
  nnz(P)        = 0
  nnz(A)        = 261762
  cones (total) = 1
    : Nonnegative = 1,  numel = 50033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1434e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8107e+02  6.81e+02  1.56e-01  6.96e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7219e+02  1.72e+02  1.40e-01  6.24e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0754e+01  1.03e+01  2.97e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0002e-01  +1.2197e+00  7.20e-01  2.17e-03  9.80e-01  2.52e-05  1.82e-01  3.52e-01  
  6  +5.0001e-01  +7.5830e-01  2.58e-01  7.72e-04  3.50e-01  7.61e-06  7.82e-02  6.75e-01  
  7  +5.0001e-01  +7.3542e-01  2.35e-01  7.04e-04  3.19e-01  6.58e-06  6.98e-02  1.99e-01  
  8  +5.0001e-01  +7.0694e-01  2.07e-01  6.18e-04  2.80e-01  5.00e-06  5.82e-02  3.68e-01  
  9  +5.0001e-01  +6.4089e-01  1.41e-01  4.21e-04  1.91e-01  3.43e-06  3.78e-02  4.16e-01  
 10  +5.0000e-01  +5.8932e-01  8.93e-02  2.66e-04  1.21e-01  2.22e-06  1.85e-02  6.61e-01  
 11  +5.0000e-01  +5.9427e-01  9.43e-02  2.81e-04  1.27e-01  1.73e-06  1.78e-02  3.05e-01  
 12  +5.0001e-01  +5.8498e-01  8.50e-02  2.52e-04  1.14e-01  1.01e-06  7.78e-03  9.90e-01  
 13  +4.9999e-01  +5.5787e-01  5.79e-02  1.20e-04  5.45e-02  6.79e-06  6.03e-04  9.35e-01  
 14  +4.9963e-01  +5.5664e-01  5.70e-02  5.72e-06  2.60e-03  2.16e-04  1.83e-05  9.70e-01  
 15  +4.9921e-01  +5.5145e-01  5.22e-02  4.10e-06  1.87e-03  2.26e-04  1.31e-05  3.80e-01  
 16  +4.9867e-01  +5.4576e-01  4.71e-02  3.71e-06  1.69e-03  1.76e-04  1.18e-05  1.93e-01  
 17  +4.9750e-01  +5.3554e-01  3.80e-02  2.76e-06  1.26e-03  1.17e-04  8.62e-06  4.02e-01  
 18  +4.9774e-01  +5.3663e-01  3.89e-02  2.58e-06  1.17e-03  9.25e-05  7.88e-06  3.28e-01  
 19  +4.9767e-01  +5.3541e-01  3.77e-02  2.44e-06  1.11e-03  4.69e-05  7.63e-06  4.10e-01  
 20  +4.9766e-01  +5.3291e-01  3.53e-02  2.39e-06  1.09e-03  2.21e-05  7.28e-06  4.06e-01  
 21  +4.9723e-01  +5.3110e-01  3.39e-02  2.05e-06  9.32e-04  2.14e-05  6.24e-06  2.01e-01  
 22  +4.9687e-01  +5.2992e-01  3.31e-02  2.03e-06  9.25e-04  1.95e-05  6.24e-06  3.76e-02  
 23  +4.9616e-01  +5.2686e-01  3.07e-02  1.72e-06  7.84e-04  1.80e-05  5.27e-06  2.03e-01  
 24  +4.9607e-01  +5.2652e-01  3.04e-02  1.69e-06  7.69e-04  1.39e-05  5.17e-06  1.99e-01  
 25  +4.9417e-01  +5.1915e-01  2.50e-02  1.16e-06  5.29e-04  1.13e-05  3.57e-06  3.84e-01  
 26  +4.9361e-01  +5.1678e-01  2.32e-02  1.04e-06  4.75e-04  7.57e-06  3.20e-06  3.13e-01  
 27  +4.9341e-01  +5.1588e-01  2.25e-02  9.98e-07  4.53e-04  6.21e-06  3.06e-06  1.72e-01  
 28  +4.9337e-01  +5.1532e-01  2.20e-02  9.48e-07  4.31e-04  2.68e-06  2.91e-06  5.13e-01  
 29  +4.9173e-01  +5.0941e-01  1.77e-02  7.08e-07  3.22e-04  1.94e-06  2.19e-06  3.22e-01  
 30  +4.9165e-01  +5.0911e-01  1.75e-02  7.06e-07  3.21e-04  1.81e-06  2.18e-06  4.47e-02  
 31  +4.9153e-01  +5.0799e-01  1.65e-02  6.32e-07  2.87e-04  2.20e-07  1.96e-06  8.67e-01  
 32  +4.8765e-01  +4.9441e-01  6.76e-03  2.40e-07  1.09e-04  7.66e-08  7.62e-07  7.13e-01  
 33  +4.8668e-01  +4.9134e-01  4.67e-03  1.58e-07  7.17e-05  5.64e-08  5.02e-07  4.94e-01  
 34  +4.8486e-01  +4.8529e-01  4.32e-04  1.40e-08  6.35e-06  5.90e-09  4.53e-08  9.90e-01  
 35  +4.8466e-01  +4.8467e-01  4.53e-06  1.46e-10  6.65e-08  6.15e-11  4.76e-10  9.90e-01  
 36  +4.8466e-01  +4.8466e-01  4.53e-08  1.46e-12  6.65e-10  6.15e-13  4.76e-12  9.90e-01  
 37  +4.8466e-01  +4.8466e-01  4.54e-10  1.47e-14  6.66e-12  7.00e-15  5.39e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 650.1777ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:42 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:42 PM: Optimal value: 4.847e-01
(CVXPY) Aug 30 12:10:42 PM: Compilation took 9.405e-02 seconds
(CVXPY) Aug 30 12:10:42 PM: Solver (including time spent in interface) took 6.732e-01 seconds
Iteration: 3, Objective: 0.4847
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:42 PM: Your problem has 25043 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:42 PM: Finished problem compilation (took 1.095e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25043
  constraints   = 50043
  nnz(P)        = 0
  nnz(A)        = 272601
  cones (total) = 1
    : Nonnegative = 1,  numel = 50043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1434e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8104e+02  6.80e+02  1.56e-01  6.97e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7217e+02  1.72e+02  1.40e-01  6.25e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0751e+01  1.03e+01  2.97e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1973e+00  6.97e-01  2.10e-03  9.52e-01  2.53e-05  1.82e-01  3.65e-01  
  6  +5.0001e-01  +7.9030e-01  2.90e-01  8.69e-04  3.94e-01  9.21e-06  8.72e-02  6.15e-01  
  7  +5.0001e-01  +7.3818e-01  2.38e-01  7.12e-04  3.23e-01  6.98e-06  6.96e-02  3.32e-01  
  8  +5.0001e-01  +6.7584e-01  1.76e-01  5.25e-04  2.39e-01  4.93e-06  4.93e-02  3.90e-01  
  9  +5.0000e-01  +6.0705e-01  1.07e-01  3.19e-04  1.45e-01  2.12e-06  2.34e-02  8.50e-01  
 10  +5.0000e-01  +5.9243e-01  9.24e-02  2.75e-04  1.25e-01  1.83e-06  1.04e-02  8.51e-01  
 11  +4.9999e-01  +5.6349e-01  6.35e-02  1.51e-04  6.85e-02  1.03e-05  9.19e-04  9.39e-01  
 12  +4.9936e-01  +5.6176e-01  6.24e-02  7.31e-06  3.33e-03  3.78e-04  2.39e-05  9.74e-01  
 13  +4.9854e-01  +5.5471e-01  5.62e-02  4.22e-06  1.92e-03  4.93e-04  1.37e-05  4.99e-01  
 14  +4.9808e-01  +5.5031e-01  5.22e-02  3.85e-06  1.75e-03  4.27e-04  1.25e-05  1.51e-01  
 15  +4.9795e-01  +5.4697e-01  4.90e-02  3.79e-06  1.73e-03  2.78e-04  1.23e-05  2.24e-01  
 16  +4.9790e-01  +5.4476e-01  4.69e-02  3.60e-06  1.64e-03  1.83e-04  1.15e-05  3.11e-01  
 17  +4.9743e-01  +5.3972e-01  4.23e-02  2.91e-06  1.32e-03  7.25e-05  9.10e-06  6.40e-01  
 18  +4.9736e-01  +5.3937e-01  4.20e-02  2.91e-06  1.33e-03  6.94e-05  9.09e-06  2.65e-02  
 19  +4.9679e-01  +5.3642e-01  3.96e-02  2.43e-06  1.11e-03  6.00e-05  7.54e-06  2.96e-01  
 20  +4.9623e-01  +5.3361e-01  3.74e-02  2.02e-06  9.20e-04  3.92e-05  6.23e-06  4.50e-01  
 21  +4.9587e-01  +5.3258e-01  3.67e-02  2.01e-06  9.14e-04  3.73e-05  6.23e-06  1.06e-02  
 22  +4.9471e-01  +5.2733e-01  3.26e-02  1.66e-06  7.58e-04  1.11e-05  5.22e-06  6.27e-01  
 23  +4.9424e-01  +5.2539e-01  3.12e-02  1.53e-06  6.95e-04  6.25e-06  4.78e-06  4.08e-01  
 24  +4.9015e-01  +5.0922e-01  1.91e-02  7.73e-07  3.52e-04  3.77e-06  2.46e-06  5.28e-01  
 25  +4.9026e-01  +5.0959e-01  1.93e-02  7.74e-07  3.52e-04  3.78e-06  2.46e-06  2.52e-02  
 26  +4.9022e-01  +5.0924e-01  1.90e-02  7.66e-07  3.49e-04  3.31e-06  2.45e-06  9.72e-02  
 27  +4.8823e-01  +5.0119e-01  1.30e-02  5.04e-07  2.29e-04  1.98e-06  1.63e-06  3.93e-01  
 28  +4.8821e-01  +5.0077e-01  1.26e-02  4.79e-07  2.18e-04  1.43e-06  1.55e-06  3.14e-01  
 29  +4.8747e-01  +4.9784e-01  1.04e-02  3.77e-07  1.72e-04  8.84e-07  1.22e-06  4.52e-01  
 30  +4.8681e-01  +4.9540e-01  8.60e-03  3.07e-07  1.40e-04  6.53e-07  1.00e-06  2.85e-01  
 31  +4.8674e-01  +4.9509e-01  8.35e-03  3.00e-07  1.37e-04  5.11e-07  9.87e-07  2.20e-01  
 32  +4.8596e-01  +4.9203e-01  6.07e-03  2.13e-07  9.71e-05  1.24e-07  7.04e-07  8.97e-01  
 33  +4.8466e-01  +4.8760e-01  2.93e-03  1.02e-07  4.63e-05  5.74e-08  3.39e-07  5.78e-01  
 34  +4.8374e-01  +4.8451e-01  7.65e-04  2.62e-08  1.19e-05  9.68e-09  8.84e-08  9.90e-01  
 35  +4.8344e-01  +4.8348e-01  4.40e-05  1.50e-09  6.81e-07  5.73e-10  5.07e-09  9.47e-01  
 36  +4.8342e-01  +4.8342e-01  4.45e-07  1.51e-11  6.90e-09  5.81e-12  5.14e-11  9.90e-01  
 37  +4.8342e-01  +4.8342e-01  4.45e-09  1.51e-13  6.90e-11  5.81e-14  5.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 690.0122ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:43 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:43 PM: Optimal value: 4.834e-01
(CVXPY) Aug 30 12:10:43 PM: Compilation took 1.095e-01 seconds
(CVXPY) Aug 30 12:10:43 PM: Solver (including time spent in interface) took 7.192e-01 seconds
Iteration: 4, Objective: 0.4834
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:43 PM: Your problem has 25053 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:43 PM: Finished problem compilation (took 1.094e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25053
  constraints   = 50053
  nnz(P)        = 0
  nnz(A)        = 282415
  cones (total) = 1
    : Nonnegative = 1,  numel = 50053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1434e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8098e+02  6.80e+02  1.56e-01  6.98e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7215e+02  1.72e+02  1.40e-01  6.27e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0751e+01  1.02e+01  2.97e-02  1.31e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1699e+00  6.70e-01  2.02e-03  9.16e-01  2.54e-05  1.81e-01  3.81e-01  
  6  +5.0001e-01  +7.8078e-01  2.81e-01  8.40e-04  3.82e-01  9.41e-06  8.57e-02  6.10e-01  
  7  +5.0001e-01  +7.3548e-01  2.35e-01  7.04e-04  3.20e-01  7.27e-06  6.90e-02  3.29e-01  
  8  +5.0001e-01  +6.7757e-01  1.78e-01  5.31e-04  2.41e-01  4.89e-06  4.78e-02  4.86e-01  
  9  +5.0001e-01  +6.5732e-01  1.57e-01  4.70e-04  2.14e-01  2.70e-06  3.31e-02  7.35e-01  
 10  +5.0001e-01  +6.5769e-01  1.58e-01  4.71e-04  2.14e-01  2.56e-06  3.26e-02  7.52e-02  
 11  +5.0001e-01  +6.2782e-01  1.28e-01  3.81e-04  1.74e-01  2.35e-06  2.08e-02  4.21e-01  
 12  +5.0001e-01  +6.1533e-01  1.15e-01  3.43e-04  1.56e-01  2.42e-06  1.29e-02  4.88e-01  
 13  +5.0000e-01  +5.8840e-01  8.84e-02  2.55e-04  1.16e-01  3.26e-06  3.49e-03  9.50e-01  
 14  +4.9996e-01  +5.6838e-01  6.84e-02  7.23e-05  3.30e-02  2.63e-05  2.76e-04  9.90e-01  
 15  +4.9936e-01  +5.6610e-01  6.67e-02  5.78e-06  2.64e-03  3.65e-04  1.91e-05  9.31e-01  
 16  +4.9873e-01  +5.5918e-01  6.04e-02  5.02e-06  2.29e-03  2.98e-04  1.66e-05  2.33e-01  
 17  +4.9859e-01  +5.5759e-01  5.90e-02  4.92e-06  2.24e-03  2.75e-04  1.62e-05  6.13e-02  
 18  +4.9850e-01  +5.5573e-01  5.72e-02  4.88e-06  2.23e-03  2.27e-04  1.60e-05  1.19e-01  
 19  +4.9755e-01  +5.4770e-01  5.01e-02  3.90e-06  1.78e-03  1.84e-04  1.27e-05  3.07e-01  
 20  +4.9753e-01  +5.4534e-01  4.78e-02  3.63e-06  1.66e-03  7.90e-05  1.15e-05  5.23e-01  
 21  +4.9757e-01  +5.4455e-01  4.70e-02  3.29e-06  1.50e-03  3.28e-05  1.02e-05  5.88e-01  
 22  +4.9700e-01  +5.4145e-01  4.44e-02  2.68e-06  1.22e-03  3.21e-05  8.32e-06  2.48e-01  
 23  +4.9682e-01  +5.4075e-01  4.39e-02  2.68e-06  1.22e-03  3.01e-05  8.31e-06  3.62e-02  
 24  +4.9675e-01  +5.4062e-01  4.39e-02  2.60e-06  1.19e-03  2.71e-05  8.06e-06  1.25e-01  
 25  +4.9599e-01  +5.3725e-01  4.13e-02  2.36e-06  1.08e-03  1.22e-05  7.41e-06  4.78e-01  
 26  +4.9477e-01  +5.3188e-01  3.71e-02  1.90e-06  8.66e-04  1.02e-05  5.94e-06  2.95e-01  
 27  +4.9345e-01  +5.2535e-01  3.19e-02  1.54e-06  7.02e-04  1.07e-07  4.85e-06  8.52e-01  
 28  +4.9178e-01  +5.1877e-01  2.70e-02  1.20e-06  5.49e-04  1.03e-07  3.82e-06  2.56e-01  
 29  +4.9164e-01  +5.1813e-01  2.65e-02  1.20e-06  5.46e-04  1.07e-07  3.81e-06  4.89e-02  
 30  +4.8962e-01  +5.0993e-01  2.03e-02  8.56e-07  3.91e-04  1.06e-07  2.75e-06  4.11e-01  
 31  +4.8966e-01  +5.0988e-01  2.02e-02  8.34e-07  3.81e-04  1.26e-07  2.67e-06  1.80e-01  
 32  +4.8961e-01  +5.0956e-01  2.00e-02  8.24e-07  3.76e-04  1.36e-07  2.64e-06  1.38e-01  
 33  +4.8791e-01  +5.0289e-01  1.50e-02  5.90e-07  2.69e-04  1.14e-07  1.91e-06  4.20e-01  
 34  +4.8808e-01  +5.0341e-01  1.53e-02  5.87e-07  2.68e-04  1.30e-07  1.89e-06  1.53e-01  
 35  +4.8543e-01  +4.9352e-01  8.09e-03  2.89e-07  1.32e-04  8.12e-08  9.47e-07  7.32e-01  
 36  +4.8508e-01  +4.9227e-01  7.19e-03  2.54e-07  1.16e-04  7.34e-08  8.34e-07  1.57e-01  
 37  +4.8504e-01  +4.9206e-01  7.02e-03  2.50e-07  1.14e-04  7.38e-08  8.28e-07  1.53e-01  
 38  +4.8432e-01  +4.8932e-01  5.00e-03  1.74e-07  7.93e-05  6.18e-08  5.78e-07  7.19e-01  
 39  +4.8417e-01  +4.8878e-01  4.61e-03  1.59e-07  7.28e-05  5.89e-08  5.29e-07  2.95e-01  
 40  +4.8338e-01  +4.8613e-01  2.75e-03  9.37e-08  4.27e-05  3.60e-08  3.13e-07  5.13e-01  
 41  +4.8229e-01  +4.8250e-01  2.11e-04  7.11e-09  3.24e-06  2.84e-09  2.41e-08  9.87e-01  
 42  +4.8220e-01  +4.8220e-01  2.83e-06  9.57e-11  4.37e-08  3.78e-11  3.25e-10  9.90e-01  
 43  +4.8220e-01  +4.8220e-01  2.83e-08  9.57e-13  4.37e-10  3.78e-13  3.25e-12  9.90e-01  
 44  +4.8220e-01  +4.8220e-01  2.84e-10  9.51e-15  4.37e-12  3.97e-15  3.41e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 824.6386ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:44 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:44 PM: Optimal value: 4.822e-01
(CVXPY) Aug 30 12:10:44 PM: Compilation took 1.094e-01 seconds
(CVXPY) Aug 30 12:10:44 PM: Solver (including time spent in interface) took 8.610e-01 seconds
Iteration: 5, Objective: 0.4822
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:44 PM: Your problem has 25063 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:44 PM: Finished problem compilation (took 1.215e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25063
  constraints   = 50063
  nnz(P)        = 0
  nnz(A)        = 290817
  cones (total) = 1
    : Nonnegative = 1,  numel = 50063

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.28e+02  1.00e+00  1.00e+00   ------   
  1  +5.9317e-01  +5.1432e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8092e+02  6.80e+02  1.56e-01  6.99e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7212e+02  1.72e+02  1.40e-01  6.27e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0747e+01  1.02e+01  2.97e-02  1.31e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1541e+00  6.54e-01  1.97e-03  8.96e-01  2.55e-05  1.81e-01  3.91e-01  
  6  +5.0001e-01  +7.7841e-01  2.78e-01  8.33e-04  3.80e-01  9.40e-06  8.49e-02  6.37e-01  
  7  +5.0001e-01  +7.0237e-01  2.02e-01  6.05e-04  2.76e-01  6.50e-06  5.94e-02  4.07e-01  
  8  +5.0001e-01  +6.9000e-01  1.90e-01  5.68e-04  2.59e-01  5.76e-06  5.23e-02  2.24e-01  
  9  +5.0001e-01  +6.8565e-01  1.86e-01  5.55e-04  2.53e-01  4.37e-06  4.41e-02  4.53e-01  
 10  +5.0001e-01  +6.2524e-01  1.25e-01  3.74e-04  1.70e-01  1.53e-06  2.02e-02  9.90e-01  
 11  +5.0001e-01  +6.1221e-01  1.12e-01  3.33e-04  1.52e-01  1.90e-06  1.03e-02  5.79e-01  
 12  +4.9998e-01  +5.8191e-01  8.19e-02  1.55e-04  7.07e-02  1.44e-05  7.53e-04  9.51e-01  
 13  +4.9938e-01  +5.7947e-01  8.01e-02  8.49e-06  3.89e-03  3.63e-04  2.86e-05  9.62e-01  
 14  +4.9898e-01  +5.7283e-01  7.39e-02  6.98e-06  3.19e-03  3.34e-04  2.35e-05  2.72e-01  
 15  +4.9852e-01  +5.6419e-01  6.57e-02  6.23e-06  2.85e-03  2.17e-04  2.08e-05  3.08e-01  
 16  +4.9828e-01  +5.6051e-01  6.22e-02  5.68e-06  2.60e-03  1.76e-04  1.89e-05  2.26e-01  
 17  +4.9818e-01  +5.5588e-01  5.77e-02  5.49e-06  2.51e-03  8.15e-05  1.82e-05  4.06e-01  
 18  +4.9804e-01  +5.5238e-01  5.43e-02  5.13e-06  2.34e-03  3.64e-05  1.68e-05  4.87e-01  
 19  +4.9767e-01  +5.4934e-01  5.17e-02  4.35e-06  1.99e-03  2.52e-05  1.40e-05  4.25e-01  
 20  +4.9737e-01  +5.4760e-01  5.02e-02  3.86e-06  1.77e-03  2.28e-05  1.24e-05  2.31e-01  
 21  +4.9714e-01  +5.4641e-01  4.93e-02  3.50e-06  1.60e-03  1.99e-05  1.11e-05  2.35e-01  
 22  +4.9737e-01  +5.4761e-01  5.02e-02  3.27e-06  1.50e-03  1.32e-05  1.03e-05  4.09e-01  
 23  +4.9702e-01  +5.4604e-01  4.90e-02  2.89e-06  1.32e-03  1.21e-05  9.11e-06  2.22e-01  
 24  +4.9615e-01  +5.4280e-01  4.67e-02  2.81e-06  1.29e-03  8.61e-06  9.00e-06  1.92e-01  
 25  +4.9459e-01  +5.3563e-01  4.10e-02  2.18e-06  9.95e-04  7.42e-06  6.97e-06  2.91e-01  
 26  +4.9450e-01  +5.3492e-01  4.04e-02  2.14e-06  9.79e-04  6.03e-06  6.87e-06  1.54e-01  
 27  +4.9251e-01  +5.2634e-01  3.38e-02  1.63e-06  7.46e-04  4.15e-06  5.28e-06  3.67e-01  
 28  +4.9152e-01  +5.2040e-01  2.89e-02  1.33e-06  6.07e-04  3.16e-07  4.31e-06  8.39e-01  
 29  +4.9126e-01  +5.1925e-01  2.80e-02  1.27e-06  5.81e-04  2.92e-07  4.13e-06  2.46e-01  
 30  +4.8894e-01  +5.0998e-01  2.10e-02  8.92e-07  4.08e-04  1.98e-07  2.93e-06  6.76e-01  
 31  +4.8813e-01  +5.0673e-01  1.86e-02  7.57e-07  3.46e-04  1.80e-07  2.49e-06  2.88e-01  
 32  +4.8795e-01  +5.0603e-01  1.81e-02  7.44e-07  3.40e-04  1.74e-07  2.46e-06  1.65e-01  
 33  +4.8675e-01  +5.0131e-01  1.46e-02  5.81e-07  2.65e-04  1.42e-07  1.93e-06  2.95e-01  
 34  +4.8658e-01  +5.0061e-01  1.40e-02  5.53e-07  2.53e-04  1.39e-07  1.84e-06  1.36e-01  
 35  +4.8591e-01  +4.9811e-01  1.22e-02  4.68e-07  2.14e-04  1.24e-07  1.56e-06  2.22e-01  
 36  +4.8509e-01  +4.9466e-01  9.57e-03  3.46e-07  1.58e-04  1.16e-07  1.15e-06  9.42e-01  
 37  +4.8486e-01  +4.9386e-01  9.00e-03  3.23e-07  1.48e-04  1.10e-07  1.08e-06  1.90e-01  
 38  +4.8396e-01  +4.9059e-01  6.63e-03  2.33e-07  1.07e-04  8.59e-08  7.83e-07  7.72e-01  
 39  +4.8389e-01  +4.9033e-01  6.44e-03  2.29e-07  1.05e-04  8.28e-08  7.70e-07  1.34e-01  
 40  +4.8294e-01  +4.8708e-01  4.14e-03  1.45e-07  6.63e-05  5.34e-08  4.92e-07  4.08e-01  
 41  +4.8182e-01  +4.8323e-01  1.40e-03  4.87e-08  2.22e-05  1.82e-08  1.67e-07  7.62e-01  
 42  +4.8127e-01  +4.8135e-01  7.40e-05  2.56e-09  1.17e-06  9.41e-10  8.89e-09  9.59e-01  
 43  +4.8124e-01  +4.8124e-01  7.52e-07  2.60e-11  1.19e-08  9.52e-12  9.05e-11  9.90e-01  
 44  +4.8124e-01  +4.8124e-01  7.53e-09  2.60e-13  1.19e-10  9.52e-14  9.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 975.2349ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:45 PM: Optimal value: 4.812e-01
(CVXPY) Aug 30 12:10:45 PM: Compilation took 1.215e-01 seconds
(CVXPY) Aug 30 12:10:45 PM: Solver (including time spent in interface) took 1.007e+00 seconds
Iteration: 6, Objective: 0.4812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:46 PM: Your problem has 25070 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:46 PM: Finished problem compilation (took 1.202e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25070
  constraints   = 50070
  nnz(P)        = 0
  nnz(A)        = 296323
  cones (total) = 1
    : Nonnegative = 1,  numel = 50070

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.28e+02  1.00e+00  1.00e+00   ------   
  1  +5.9318e-01  +5.1432e+03  5.14e+03  3.90e-01  1.39e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8091e+02  6.80e+02  1.56e-01  6.99e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7211e+02  1.72e+02  1.40e-01  6.28e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0743e+01  1.02e+01  2.97e-02  1.31e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0002e-01  +1.2316e+00  7.32e-01  2.21e-03  1.00e+00  2.53e-05  1.82e-01  3.51e-01  
  6  +5.0001e-01  +8.3634e-01  3.36e-01  1.01e-03  4.59e-01  9.01e-06  9.30e-02  7.64e-01  
  7  +5.0001e-01  +6.9985e-01  2.00e-01  5.97e-04  2.72e-01  5.17e-06  5.64e-02  5.04e-01  
  8  +5.0001e-01  +6.8043e-01  1.80e-01  5.39e-04  2.46e-01  4.60e-06  4.80e-02  2.16e-01  
  9  +5.0001e-01  +6.6890e-01  1.69e-01  5.04e-04  2.30e-01  3.51e-06  3.79e-02  4.76e-01  
 10  +5.0001e-01  +6.1979e-01  1.20e-01  3.57e-04  1.63e-01  1.64e-06  1.66e-02  9.55e-01  
 11  +5.0000e-01  +6.0341e-01  1.03e-01  3.03e-04  1.38e-01  2.35e-06  5.37e-03  8.75e-01  
 12  +4.9991e-01  +5.8953e-01  8.96e-02  4.87e-05  2.23e-02  5.55e-05  1.73e-04  9.73e-01  
 13  +4.9926e-01  +5.8568e-01  8.64e-02  6.93e-06  3.17e-03  3.91e-04  2.32e-05  8.67e-01  
 14  +4.9832e-01  +5.7113e-01  7.28e-02  6.50e-06  2.98e-03  2.45e-04  2.19e-05  1.53e-01  
 15  +4.9834e-01  +5.7096e-01  7.26e-02  6.50e-06  2.98e-03  2.39e-04  2.18e-05  1.78e-02  
 16  +4.9813e-01  +5.6627e-01  6.81e-02  6.00e-06  2.75e-03  1.90e-04  2.00e-05  2.06e-01  
 17  +4.9809e-01  +5.6161e-01  6.35e-02  5.50e-06  2.52e-03  1.23e-04  1.81e-05  3.33e-01  
 18  +4.9804e-01  +5.5850e-01  6.05e-02  5.28e-06  2.42e-03  8.28e-05  1.72e-05  2.71e-01  
 19  +4.9786e-01  +5.5504e-01  5.72e-02  4.65e-06  2.13e-03  5.60e-05  1.50e-05  3.82e-01  
 20  +4.9787e-01  +5.5206e-01  5.42e-02  4.07e-06  1.86e-03  1.70e-05  1.30e-05  6.79e-01  
 21  +4.9751e-01  +5.4973e-01  5.22e-02  3.45e-06  1.58e-03  1.40e-05  1.09e-05  3.43e-01  
 22  +4.9741e-01  +5.4943e-01  5.20e-02  3.41e-06  1.56e-03  1.25e-05  1.09e-05  9.66e-02  
 23  +4.9707e-01  +5.4806e-01  5.10e-02  3.23e-06  1.48e-03  1.00e-05  1.03e-05  2.21e-01  
 24  +4.9657e-01  +5.4551e-01  4.89e-02  2.95e-06  1.35e-03  7.66e-06  9.39e-06  2.70e-01  
 25  +4.9351e-01  +5.3197e-01  3.85e-02  1.81e-06  8.30e-04  6.22e-06  5.84e-06  4.62e-01  
 26  +4.9202e-01  +5.2459e-01  3.26e-02  1.51e-06  6.92e-04  3.51e-06  4.92e-06  3.75e-01  
 27  +4.9147e-01  +5.2184e-01  3.04e-02  1.39e-06  6.35e-04  2.48e-06  4.53e-06  2.76e-01  
 28  +4.9098e-01  +5.1908e-01  2.81e-02  1.27e-06  5.81e-04  1.34e-06  4.16e-06  4.30e-01  
 29  +4.9059e-01  +5.1747e-01  2.69e-02  1.20e-06  5.50e-04  1.21e-06  3.95e-06  1.05e-01  
 30  +4.9058e-01  +5.1737e-01  2.68e-02  1.20e-06  5.48e-04  1.13e-06  3.93e-06  7.31e-02  
 31  +4.8831e-01  +5.0823e-01  1.99e-02  8.39e-07  3.84e-04  6.68e-07  2.79e-06  4.36e-01  
 32  +4.8771e-01  +5.0582e-01  1.81e-02  7.39e-07  3.38e-04  5.61e-07  2.46e-06  2.21e-01  
 33  +4.8758e-01  +5.0533e-01  1.78e-02  7.34e-07  3.36e-04  5.21e-07  2.45e-06  4.79e-02  
 34  +4.8575e-01  +4.9818e-01  1.24e-02  4.90e-07  2.24e-04  3.16e-07  1.65e-06  4.54e-01  
 35  +4.8532e-01  +4.9645e-01  1.11e-02  4.20e-07  1.92e-04  2.43e-07  1.41e-06  3.99e-01  
 36  +4.8521e-01  +4.9603e-01  1.08e-02  4.11e-07  1.88e-04  2.14e-07  1.39e-06  1.82e-01  
 37  +4.8431e-01  +4.9269e-01  8.38e-03  3.10e-07  1.42e-04  1.57e-07  1.05e-06  3.56e-01  
 38  +4.8428e-01  +4.9257e-01  8.29e-03  3.09e-07  1.41e-04  1.51e-07  1.05e-06  8.07e-02  
 39  +4.8283e-01  +4.8732e-01  4.49e-03  1.60e-07  7.32e-05  7.37e-08  5.48e-07  6.73e-01  
 40  +4.8214e-01  +4.8486e-01  2.72e-03  9.66e-08  4.42e-05  3.95e-08  3.34e-07  7.00e-01  
 41  +4.8145e-01  +4.8251e-01  1.05e-03  3.70e-08  1.69e-05  1.52e-08  1.29e-07  6.27e-01  
 42  +4.8104e-01  +4.8108e-01  4.23e-05  1.48e-09  6.78e-07  5.83e-10  5.22e-09  9.66e-01  
 43  +4.8102e-01  +4.8102e-01  4.27e-07  1.49e-11  6.83e-09  5.86e-12  5.27e-11  9.90e-01  
 44  +4.8102e-01  +4.8102e-01  4.28e-09  1.50e-13  6.85e-11  5.88e-14  5.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 885.7557ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:47 PM: Optimal value: 4.810e-01
(CVXPY) Aug 30 12:10:47 PM: Compilation took 1.202e-01 seconds
(CVXPY) Aug 30 12:10:47 PM: Solver (including time spent in interface) took 9.199e-01 seconds
FULL MODEL:
  Accruacy: 0.51778
  Our objective: 0.03556000000000001

IF 
    (x0 = 1 AND x2 = 1 AND x1 = 0 AND x5 = 0)                       <-- (term's our objective: 0.0023600000000000287)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.02072000000000002)
 OR (x4 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.002519999999999998)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x5 = 0) <-- (term's our objective: 0.001279999999999967)
 OR (x2 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.0018799999999999564)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.001759999999999949)
 OR (x1 = 1 AND x3 = 1 AND x0 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0015599999999999833)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.000760000000000054)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x0 = 0 AND x4 = 0) <-- (term's our objective: 0.0016000000000000458)
 OR (x0 = 1 AND x4 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0008399999999999744)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.0002800000000000337)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.02072000000000002
    Its accruacy: 0.51036
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.02072000000000002
  Highest accruacy: 0.51036
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

