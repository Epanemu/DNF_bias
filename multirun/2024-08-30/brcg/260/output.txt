Command:
python test_script.py -s smallest_subclass -d 7 -n 1000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.012
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 7.

Computed total variation: 0.274
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:55 PM: Your problem has 515 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:55 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 515
  constraints   = 1015
  nnz(P)        = 0
  nnz(A)        = 5015
  cones (total) = 1
    : Nonnegative = 1,  numel = 1015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9993e-01  +5.0063e+02  5.00e+02  9.54e-01  3.24e+01  1.00e+00  1.00e+00   ------   
  1  +5.8786e-01  +1.0545e+02  1.05e+02  3.89e-01  2.00e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3679e-01  +1.3262e+01  1.27e+01  1.35e-01  8.72e+00  1.33e-02  2.50e-01  8.80e-01  
  3  +5.0648e-01  +3.1343e+00  2.63e+00  5.37e-02  3.34e+00  2.96e-05  2.31e-01  3.07e-01  
  4  +5.0026e-01  +6.3736e-01  1.37e-01  3.02e-03  1.98e-01  8.78e-06  4.65e-02  9.90e-01  
  5  +5.0001e-01  +5.8258e-01  8.26e-02  1.76e-03  1.16e-01  9.65e-06  1.53e-02  7.47e-01  
  6  +4.9627e-01  +6.1494e-01  1.19e-01  4.49e-04  2.99e-02  1.16e-04  1.50e-03  9.49e-01  
  7  +4.8832e-01  +5.4245e-01  5.41e-02  1.29e-04  8.58e-03  7.55e-05  4.46e-04  7.68e-01  
  8  +4.8073e-01  +5.0106e-01  2.03e-02  4.34e-05  2.89e-03  2.06e-05  1.67e-04  7.03e-01  
  9  +4.7589e-01  +4.7813e-01  2.24e-03  4.52e-06  3.01e-04  7.05e-07  1.90e-05  9.90e-01  
 10  +4.7511e-01  +4.7514e-01  2.97e-05  5.95e-08  3.96e-06  1.01e-08  2.53e-07  9.90e-01  
 11  +4.7510e-01  +4.7510e-01  2.97e-07  5.95e-10  3.96e-08  1.01e-10  2.53e-09  9.90e-01  
 12  +4.7510e-01  +4.7510e-01  2.97e-09  5.95e-12  3.96e-10  1.01e-12  2.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.7363ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:55 PM: Optimal value: 4.751e-01
(CVXPY) Aug 30 12:12:55 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:12:55 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4751
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:55 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:55 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 5809
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0103e+02  5.01e+02  9.55e-01  3.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.8639e-01  +1.0571e+02  1.05e+02  3.91e-01  2.05e+01  3.86e-03  5.49e-01  6.10e-01  
  2  +5.3520e-01  +1.2941e+01  1.24e+01  1.32e-01  8.72e+00  1.36e-02  2.46e-01  8.97e-01  
  3  +5.0589e-01  +3.0173e+00  2.51e+00  5.17e-02  3.31e+00  3.03e-05  2.23e-01  3.63e-01  
  4  +5.0108e-01  +1.0011e+00  5.00e-01  1.10e-02  7.34e-01  1.19e-05  1.03e-01  6.32e-01  
  5  +4.9980e-01  +6.8711e-01  1.87e-01  3.80e-03  2.57e-01  1.33e-05  2.15e-02  8.90e-01  
  6  +4.9301e-01  +6.4876e-01  1.56e-01  7.53e-04  5.18e-02  8.58e-05  2.36e-03  9.03e-01  
  7  +4.8793e-01  +6.0702e-01  1.19e-01  5.06e-04  3.47e-02  6.38e-05  1.61e-03  3.98e-01  
  8  +4.8561e-01  +5.9427e-01  1.09e-01  3.80e-04  2.61e-02  6.11e-05  1.20e-03  3.82e-01  
  9  +4.8370e-01  +5.8289e-01  9.92e-02  3.51e-04  2.41e-02  4.61e-05  1.11e-03  2.91e-01  
 10  +4.7595e-01  +5.3552e-01  5.96e-02  1.44e-04  9.87e-03  3.79e-05  4.61e-04  6.46e-01  
 11  +4.7462e-01  +5.2888e-01  5.43e-02  1.35e-04  9.26e-03  2.99e-05  4.36e-04  2.30e-01  
 12  +4.7291e-01  +5.2373e-01  5.08e-02  1.18e-04  8.10e-03  2.43e-05  3.78e-04  6.51e-01  
 13  +4.6879e-01  +5.0607e-01  3.73e-02  7.64e-05  5.23e-03  1.88e-05  2.46e-04  4.96e-01  
 14  +4.6097e-01  +4.7190e-01  1.09e-02  2.07e-05  1.42e-03  5.48e-06  6.83e-05  9.90e-01  
 15  +4.5734e-01  +4.5773e-01  3.90e-04  7.20e-07  4.93e-05  1.79e-07  2.40e-06  9.79e-01  
 16  +4.5720e-01  +4.5721e-01  3.91e-06  7.22e-09  4.94e-07  1.79e-09  2.41e-08  9.90e-01  
 17  +4.5720e-01  +4.5720e-01  3.91e-08  7.22e-11  4.94e-09  1.79e-11  2.41e-10  9.90e-01  
 18  +4.5720e-01  +4.5720e-01  3.91e-10  7.22e-13  4.94e-11  1.80e-13  2.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.2155ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:55 PM: Optimal value: 4.572e-01
(CVXPY) Aug 30 12:12:55 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:12:55 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4572
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:55 PM: Your problem has 535 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:55 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 535
  constraints   = 1035
  nnz(P)        = 0
  nnz(A)        = 6384
  cones (total) = 1
    : Nonnegative = 1,  numel = 1035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9971e-01  +5.0114e+02  5.01e+02  9.55e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.8593e-01  +1.0573e+02  1.05e+02  3.93e-01  2.06e+01  3.86e-03  5.50e-01  6.10e-01  
  2  +5.3470e-01  +1.2843e+01  1.23e+01  1.31e-01  8.63e+00  1.37e-02  2.44e-01  9.03e-01  
  3  +5.0562e-01  +2.9600e+00  2.45e+00  5.08e-02  3.27e+00  3.04e-05  2.19e-01  3.91e-01  
  4  +5.0113e-01  +1.0441e+00  5.43e-01  1.20e-02  8.04e-01  1.23e-05  1.02e-01  6.16e-01  
  5  +4.9963e-01  +7.6965e-01  2.70e-01  5.02e-03  3.42e-01  1.88e-05  2.30e-02  8.71e-01  
  6  +4.9075e-01  +7.4135e-01  2.51e-01  1.02e-03  7.08e-02  1.11e-04  3.09e-03  8.95e-01  
  7  +4.8278e-01  +6.9270e-01  2.10e-01  6.31e-04  4.38e-02  1.13e-04  1.92e-03  4.61e-01  
  8  +4.7776e-01  +6.6849e-01  1.91e-01  5.09e-04  3.53e-02  1.03e-04  1.57e-03  3.00e-01  
  9  +4.6088e-01  +5.7877e-01  1.18e-01  2.80e-04  1.93e-02  4.56e-05  9.29e-04  7.55e-01  
 10  +4.4379e-01  +5.0122e-01  5.74e-02  1.23e-04  8.47e-03  2.12e-05  4.35e-04  6.47e-01  
 11  +4.3324e-01  +4.5439e-01  2.11e-02  4.35e-05  2.99e-03  7.62e-06  1.60e-04  6.61e-01  
 12  +4.2899e-01  +4.3621e-01  7.22e-03  1.43e-05  9.84e-04  3.88e-06  5.47e-05  9.90e-01  
 13  +4.2659e-01  +4.2694e-01  3.55e-04  6.98e-07  4.80e-05  1.86e-07  2.73e-06  9.58e-01  
 14  +4.2645e-01  +4.2645e-01  3.59e-06  7.04e-09  4.84e-07  1.88e-09  2.77e-08  9.90e-01  
 15  +4.2645e-01  +4.2645e-01  3.59e-08  7.04e-11  4.84e-09  1.88e-11  2.77e-10  9.90e-01  
 16  +4.2645e-01  +4.2645e-01  3.59e-10  7.04e-13  4.84e-11  1.88e-13  2.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.4813ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:55 PM: Optimal value: 4.265e-01
(CVXPY) Aug 30 12:12:55 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:12:55 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.4265
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:56 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6597
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +5.0125e+02  5.01e+02  9.55e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.8464e-01  +1.0585e+02  1.05e+02  3.95e-01  2.05e+01  3.85e-03  5.52e-01  6.09e-01  
  2  +5.3379e-01  +1.2670e+01  1.21e+01  1.29e-01  8.44e+00  1.39e-02  2.41e-01  9.14e-01  
  3  +5.0537e-01  +2.9107e+00  2.41e+00  5.00e-02  3.21e+00  3.12e-05  2.13e-01  4.27e-01  
  4  +5.0104e-01  +1.0399e+00  5.39e-01  1.19e-02  7.97e-01  1.27e-05  9.21e-02  6.36e-01  
  5  +4.9936e-01  +9.8104e-01  4.82e-01  7.30e-03  4.97e-01  3.19e-05  2.61e-02  8.38e-01  
  6  +4.8917e-01  +8.3611e-01  3.47e-01  1.39e-03  9.68e-02  1.13e-04  4.12e-03  8.54e-01  
  7  +4.8674e-01  +8.1077e-01  3.24e-01  1.03e-03  7.14e-02  1.19e-04  2.98e-03  6.54e-01  
  8  +4.8373e-01  +7.6440e-01  2.81e-01  8.52e-04  5.91e-02  9.98e-05  2.52e-03  6.03e-01  
  9  +4.6749e-01  +6.4599e-01  1.78e-01  4.86e-04  3.36e-02  5.97e-05  1.52e-03  8.09e-01  
 10  +4.4617e-01  +5.4369e-01  9.75e-02  2.24e-04  1.54e-02  3.26e-05  7.51e-04  5.86e-01  
 11  +4.2609e-01  +4.5535e-01  2.93e-02  6.12e-05  4.20e-03  9.71e-06  2.22e-04  7.79e-01  
 12  +4.2108e-01  +4.3558e-01  1.45e-02  2.93e-05  2.01e-03  5.55e-06  1.09e-04  6.25e-01  
 13  +4.1782e-01  +4.2354e-01  5.72e-03  1.11e-05  7.59e-04  2.70e-06  4.29e-05  8.27e-01  
 14  +4.1614e-01  +4.1725e-01  1.11e-03  2.12e-06  1.46e-04  6.04e-07  8.39e-06  9.90e-01  
 15  +4.1570e-01  +4.1572e-01  1.23e-05  2.34e-08  1.61e-06  6.65e-09  9.33e-08  9.89e-01  
 16  +4.1570e-01  +4.1570e-01  1.23e-07  2.34e-10  1.61e-08  6.65e-11  9.33e-10  9.90e-01  
 17  +4.1570e-01  +4.1570e-01  1.23e-09  2.34e-12  1.61e-10  6.66e-13  9.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.262ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:56 PM: Optimal value: 4.157e-01
(CVXPY) Aug 30 12:12:56 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:12:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.4157
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:56 PM: Your problem has 555 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 555
  constraints   = 1055
  nnz(P)        = 0
  nnz(A)        = 6825
  cones (total) = 1
    : Nonnegative = 1,  numel = 1055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0135e+02  5.01e+02  9.55e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.8384e-01  +1.0595e+02  1.05e+02  3.97e-01  2.03e+01  3.85e-03  5.52e-01  6.09e-01  
  2  +5.3324e-01  +1.2565e+01  1.20e+01  1.28e-01  8.27e+00  1.40e-02  2.39e-01  9.21e-01  
  3  +5.0523e-01  +2.8834e+00  2.38e+00  4.96e-02  3.17e+00  3.18e-05  2.08e-01  4.51e-01  
  4  +5.0136e-01  +1.2012e+00  7.00e-01  1.55e-02  1.03e+00  1.46e-05  1.05e-01  5.50e-01  
  5  +4.9901e-01  +9.4619e-01  4.47e-01  6.51e-03  4.44e-01  3.57e-05  2.24e-02  9.67e-01  
  6  +4.9352e-01  +8.7280e-01  3.79e-01  2.42e-03  1.67e-01  7.69e-05  7.19e-03  7.03e-01  
  7  +4.9014e-01  +8.5896e-01  3.69e-01  1.56e-03  1.08e-01  1.05e-04  4.55e-03  5.49e-01  
  8  +4.8395e-01  +7.8666e-01  3.03e-01  1.05e-03  7.26e-02  9.88e-05  3.08e-03  6.83e-01  
  9  +4.6963e-01  +6.9844e-01  2.29e-01  6.10e-04  4.22e-02  8.80e-05  1.85e-03  4.59e-01  
 10  +4.4630e-01  +5.7005e-01  1.24e-01  2.85e-04  1.96e-02  4.50e-05  9.36e-04  6.40e-01  
 11  +4.3133e-01  +4.9943e-01  6.81e-02  1.48e-04  1.02e-02  2.52e-05  5.15e-04  5.62e-01  
 12  +4.1886e-01  +4.4253e-01  2.37e-02  4.94e-05  3.38e-03  1.07e-05  1.80e-04  8.53e-01  
 13  +4.1321e-01  +4.1880e-01  5.59e-03  1.15e-05  7.81e-04  2.53e-06  4.33e-05  7.76e-01  
 14  +4.1169e-01  +4.1292e-01  1.23e-03  2.40e-06  1.63e-04  6.50e-07  9.43e-06  9.70e-01  
 15  +4.1126e-01  +4.1130e-01  4.02e-05  7.82e-08  5.32e-06  2.11e-08  3.10e-07  9.68e-01  
 16  +4.1125e-01  +4.1125e-01  4.06e-07  7.90e-10  5.38e-08  2.13e-10  3.13e-09  9.90e-01  
 17  +4.1125e-01  +4.1125e-01  4.06e-09  7.91e-12  5.38e-10  2.13e-12  3.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1778ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:56 PM: Optimal value: 4.113e-01
(CVXPY) Aug 30 12:12:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.4113
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:56 PM: Your problem has 565 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 565
  constraints   = 1065
  nnz(P)        = 0
  nnz(A)        = 7098
  cones (total) = 1
    : Nonnegative = 1,  numel = 1065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0135e+02  5.01e+02  9.56e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.8306e-01  +1.0600e+02  1.05e+02  3.98e-01  2.03e+01  3.86e-03  5.53e-01  6.08e-01  
  2  +5.3262e-01  +1.2433e+01  1.19e+01  1.27e-01  8.14e+00  1.41e-02  2.37e-01  9.28e-01  
  3  +5.0508e-01  +2.8536e+00  2.35e+00  4.91e-02  3.13e+00  3.23e-05  2.04e-01  4.74e-01  
  4  +5.0129e-01  +1.1985e+00  6.97e-01  1.54e-02  1.02e+00  1.49e-05  9.92e-02  5.63e-01  
  5  +4.9786e-01  +1.0056e+00  5.08e-01  5.61e-03  3.87e-01  5.04e-05  1.74e-02  9.90e-01  
  6  +4.8899e-01  +8.8005e-01  3.91e-01  1.87e-03  1.30e-01  9.71e-05  5.44e-03  7.17e-01  
  7  +4.8467e-01  +8.6822e-01  3.84e-01  1.26e-03  8.80e-02  1.31e-04  3.63e-03  5.30e-01  
  8  +4.7747e-01  +8.1262e-01  3.35e-01  9.66e-04  6.72e-02  1.23e-04  2.84e-03  3.68e-01  
  9  +4.5008e-01  +6.1427e-01  1.64e-01  3.96e-04  2.73e-02  5.68e-05  1.27e-03  9.05e-01  
 10  +4.2444e-01  +4.9309e-01  6.86e-02  1.52e-04  1.04e-02  2.26e-05  5.36e-04  7.00e-01  
 11  +4.1490e-01  +4.5313e-01  3.82e-02  7.94e-05  5.44e-03  1.41e-05  2.91e-04  5.52e-01  
 12  +4.1219e-01  +4.4225e-01  3.01e-02  6.23e-05  4.26e-03  1.20e-05  2.33e-04  3.97e-01  
 13  +4.0866e-01  +4.2806e-01  1.94e-02  3.91e-05  2.67e-03  8.66e-06  1.49e-04  5.67e-01  
 14  +4.0264e-01  +4.0471e-01  2.07e-03  4.06e-06  2.77e-04  8.97e-07  1.61e-05  9.05e-01  
 15  +4.0196e-01  +4.0213e-01  1.67e-04  3.26e-07  2.23e-05  7.22e-08  1.32e-06  9.23e-01  
 16  +4.0190e-01  +4.0190e-01  2.19e-06  4.27e-09  2.91e-07  9.63e-10  1.72e-08  9.88e-01  
 17  +4.0190e-01  +4.0190e-01  2.19e-08  4.27e-11  2.92e-09  9.64e-12  1.72e-10  9.90e-01  
 18  +4.0190e-01  +4.0190e-01  2.19e-10  4.27e-13  2.92e-11  9.66e-14  1.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8582ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:56 PM: Optimal value: 4.019e-01
(CVXPY) Aug 30 12:12:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:56 PM: Solver (including time spent in interface) took 1.560e-02 seconds
Iteration: 6, Objective: 0.4019
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:56 PM: Your problem has 575 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 575
  constraints   = 1075
  nnz(P)        = 0
  nnz(A)        = 7264
  cones (total) = 1
    : Nonnegative = 1,  numel = 1075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0118e+02  5.01e+02  9.56e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.8223e-01  +1.0601e+02  1.05e+02  3.99e-01  2.01e+01  3.86e-03  5.53e-01  6.08e-01  
  2  +5.3214e-01  +1.2336e+01  1.18e+01  1.26e-01  7.98e+00  1.42e-02  2.34e-01  9.34e-01  
  3  +5.0497e-01  +2.8320e+00  2.33e+00  4.88e-02  3.10e+00  3.28e-05  2.00e-01  4.94e-01  
  4  +5.0093e-01  +1.0633e+00  5.62e-01  1.25e-02  8.28e-01  1.38e-05  8.00e-02  6.50e-01  
  5  +4.9573e-01  +1.4115e+00  9.16e-01  5.71e-03  3.96e-01  9.67e-05  1.61e-02  9.90e-01  
  6  +4.8277e-01  +1.0331e+00  5.50e-01  1.97e-03  1.37e-01  1.04e-04  5.62e-03  6.69e-01  
  7  +4.7252e-01  +8.6242e-01  3.90e-01  9.81e-04  6.80e-02  1.33e-04  2.84e-03  7.75e-01  
  8  +4.6745e-01  +7.5900e-01  2.92e-01  8.76e-04  6.07e-02  8.78e-05  2.64e-03  3.90e-01  
  9  +4.4945e-01  +6.5145e-01  2.02e-01  5.00e-04  3.45e-02  6.76e-05  1.57e-03  4.77e-01  
 10  +4.4748e-01  +6.3637e-01  1.89e-01  4.62e-04  3.18e-02  6.97e-05  1.47e-03  3.07e-01  
 11  +4.2368e-01  +5.0895e-01  8.53e-02  1.86e-04  1.27e-02  3.00e-05  6.40e-04  6.16e-01  
 12  +4.1151e-01  +4.5524e-01  4.37e-02  8.86e-05  6.04e-03  1.71e-05  3.20e-04  6.04e-01  
 13  +4.0141e-01  +4.1092e-01  9.52e-03  1.88e-05  1.28e-03  4.51e-06  7.14e-05  9.18e-01  
 14  +3.9843e-01  +3.9936e-01  9.24e-04  1.81e-06  1.23e-04  4.26e-07  7.05e-06  9.05e-01  
 15  +3.9811e-01  +3.9815e-01  3.99e-05  7.81e-08  5.32e-06  1.92e-08  3.06e-07  9.69e-01  
 16  +3.9810e-01  +3.9810e-01  4.02e-07  7.88e-10  5.36e-08  1.94e-10  3.09e-09  9.90e-01  
 17  +3.9810e-01  +3.9810e-01  4.02e-09  7.89e-12  5.37e-10  1.94e-12  3.09e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0147ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:56 PM: Optimal value: 3.981e-01
(CVXPY) Aug 30 12:12:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:56 PM: Solver (including time spent in interface) took 1.501e-02 seconds
Iteration: 7, Objective: 0.3981
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:56 PM: Your problem has 585 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 585
  constraints   = 1085
  nnz(P)        = 0
  nnz(A)        = 7479
  cones (total) = 1
    : Nonnegative = 1,  numel = 1085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0119e+02  5.01e+02  9.56e-01  3.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.8107e-01  +1.0612e+02  1.06e+02  4.01e-01  2.00e+01  3.86e-03  5.53e-01  6.07e-01  
  2  +5.3142e-01  +1.2193e+01  1.17e+01  1.24e-01  7.83e+00  1.43e-02  2.32e-01  9.42e-01  
  3  +5.0479e-01  +2.7957e+00  2.29e+00  4.81e-02  3.05e+00  3.36e-05  1.95e-01  5.26e-01  
  4  +5.0074e-01  +1.0366e+00  5.36e-01  1.18e-02  7.84e-01  1.42e-05  7.03e-02  6.81e-01  
  5  +4.9346e-01  +1.4740e+00  9.80e-01  5.19e-03  3.59e-01  1.12e-04  1.46e-02  9.43e-01  
  6  +4.8112e-01  +1.0560e+00  5.75e-01  2.08e-03  1.44e-01  1.09e-04  5.98e-03  6.86e-01  
  7  +4.7144e-01  +9.6286e-01  4.91e-01  1.33e-03  9.20e-02  1.29e-04  3.86e-03  4.66e-01  
  8  +4.6614e-01  +7.9918e-01  3.33e-01  1.06e-03  7.28e-02  9.25e-05  3.20e-03  5.70e-01  
  9  +4.3663e-01  +6.0698e-01  1.70e-01  4.02e-04  2.75e-02  5.67e-05  1.30e-03  6.49e-01  
 10  +4.2587e-01  +5.4950e-01  1.24e-01  2.80e-04  1.91e-02  4.29e-05  9.33e-04  3.46e-01  
 11  +4.1690e-01  +5.0257e-01  8.57e-02  1.85e-04  1.26e-02  3.66e-05  6.38e-04  6.03e-01  
 12  +4.0508e-01  +4.4859e-01  4.35e-02  9.04e-05  6.15e-03  1.84e-05  3.29e-04  5.13e-01  
 13  +3.9484e-01  +4.0235e-01  7.51e-03  1.52e-05  1.03e-03  3.44e-06  5.82e-05  8.97e-01  
 14  +3.9260e-01  +3.9342e-01  8.23e-04  1.65e-06  1.12e-04  3.85e-07  6.45e-06  9.19e-01  
 15  +3.9230e-01  +3.9232e-01  1.13e-05  2.24e-08  1.52e-06  5.40e-09  8.86e-08  9.90e-01  
 16  +3.9230e-01  +3.9230e-01  1.13e-07  2.25e-10  1.52e-08  5.40e-11  8.86e-10  9.90e-01  
 17  +3.9230e-01  +3.9230e-01  1.13e-09  2.25e-12  1.52e-10  5.42e-13  8.89e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8027ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:56 PM: Optimal value: 3.923e-01
(CVXPY) Aug 30 12:12:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.3923
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:56 PM: Your problem has 595 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 595
  constraints   = 1095
  nnz(P)        = 0
  nnz(A)        = 7657
  cones (total) = 1
    : Nonnegative = 1,  numel = 1095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0122e+02  5.01e+02  9.56e-01  3.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.8021e-01  +1.0614e+02  1.06e+02  4.01e-01  1.99e+01  3.86e-03  5.52e-01  6.07e-01  
  2  +5.3077e-01  +1.2046e+01  1.15e+01  1.22e-01  7.68e+00  1.44e-02  2.28e-01  9.50e-01  
  3  +5.0458e-01  +2.7512e+00  2.25e+00  4.71e-02  3.00e+00  3.42e-05  1.88e-01  5.59e-01  
  4  +5.0076e-01  +1.1163e+00  6.16e-01  1.34e-02  8.86e-01  1.60e-05  7.14e-02  6.51e-01  
  5  +4.9304e-01  +1.5981e+00  1.11e+00  5.71e-03  3.94e-01  1.20e-04  1.59e-02  9.53e-01  
  6  +4.7449e-01  +1.0125e+00  5.38e-01  1.82e-03  1.25e-01  9.25e-05  5.29e-03  6.95e-01  
  7  +4.6919e-01  +9.4831e-01  4.79e-01  1.36e-03  9.36e-02  1.17e-04  3.97e-03  4.38e-01  
  8  +4.6399e-01  +8.0908e-01  3.45e-01  1.09e-03  7.48e-02  1.03e-04  3.30e-03  6.40e-01  
  9  +4.3309e-01  +6.0986e-01  1.77e-01  4.18e-04  2.85e-02  6.26e-05  1.36e-03  6.63e-01  
 10  +4.2204e-01  +5.4713e-01  1.25e-01  2.86e-04  1.94e-02  4.70e-05  9.64e-04  3.83e-01  
 11  +4.0767e-01  +4.7042e-01  6.27e-02  1.36e-04  9.21e-03  2.72e-05  4.87e-04  6.84e-01  
 12  +3.9725e-01  +4.2110e-01  2.38e-02  5.02e-05  3.38e-03  1.06e-05  1.89e-04  6.95e-01  
 13  +3.9170e-01  +3.9600e-01  4.30e-03  8.90e-06  6.00e-04  2.03e-06  3.48e-05  8.92e-01  
 14  +3.9039e-01  +3.9064e-01  2.47e-04  5.08e-07  3.42e-05  1.15e-07  2.03e-06  9.62e-01  
 15  +3.9030e-01  +3.9030e-01  2.61e-06  5.34e-09  3.60e-07  1.21e-09  2.14e-08  9.90e-01  
 16  +3.9030e-01  +3.9030e-01  2.61e-08  5.35e-11  3.60e-09  1.21e-11  2.15e-10  9.90e-01  
 17  +3.9030e-01  +3.9030e-01  2.62e-10  5.36e-13  3.61e-11  1.22e-13  2.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.7188ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:56 PM: Optimal value: 3.903e-01
(CVXPY) Aug 30 12:12:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:56 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 9, Objective: 0.3903
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:56 PM: Your problem has 605 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 605
  constraints   = 1105
  nnz(P)        = 0
  nnz(A)        = 7783
  cones (total) = 1
    : Nonnegative = 1,  numel = 1105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0123e+02  5.01e+02  9.56e-01  3.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.7968e-01  +1.0615e+02  1.06e+02  4.02e-01  1.98e+01  3.86e-03  5.52e-01  6.08e-01  
  2  +5.3058e-01  +1.2003e+01  1.15e+01  1.22e-01  7.57e+00  1.44e-02  2.27e-01  9.52e-01  
  3  +5.0448e-01  +2.7318e+00  2.23e+00  4.68e-02  2.96e+00  3.43e-05  1.86e-01  5.72e-01  
  4  +5.0064e-01  +1.0982e+00  5.98e-01  1.29e-02  8.54e-01  1.61e-05  6.71e-02  6.68e-01  
  5  +4.9227e-01  +1.4992e+00  1.01e+00  5.15e-03  3.54e-01  1.16e-04  1.44e-02  9.44e-01  
  6  +4.7422e-01  +9.9466e-01  5.20e-01  1.82e-03  1.25e-01  9.01e-05  5.33e-03  6.71e-01  
  7  +4.6812e-01  +9.3536e-01  4.67e-01  1.36e-03  9.30e-02  1.11e-04  3.98e-03  4.09e-01  
  8  +4.6126e-01  +7.8090e-01  3.20e-01  1.01e-03  6.92e-02  9.76e-05  3.10e-03  7.50e-01  
  9  +4.3770e-01  +6.4146e-01  2.04e-01  5.18e-04  3.52e-02  6.86e-05  1.68e-03  5.14e-01  
 10  +4.1446e-01  +5.1304e-01  9.86e-02  2.29e-04  1.54e-02  3.29e-05  8.00e-04  6.02e-01  
 11  +4.0191e-01  +4.5469e-01  5.28e-02  1.15e-04  7.70e-03  1.84e-05  4.24e-04  5.17e-01  
 12  +3.8970e-01  +3.9873e-01  9.02e-03  1.89e-05  1.26e-03  4.23e-06  7.49e-05  9.89e-01  
 13  +3.8824e-01  +3.9309e-01  4.85e-03  1.00e-05  6.71e-04  2.31e-06  4.06e-05  6.23e-01  
 14  +3.8661e-01  +3.8690e-01  2.90e-04  5.92e-07  3.97e-05  1.36e-07  2.46e-06  9.43e-01  
 15  +3.8650e-01  +3.8650e-01  3.03e-06  6.18e-09  4.14e-07  1.42e-09  2.57e-08  9.90e-01  
 16  +3.8650e-01  +3.8650e-01  3.03e-08  6.19e-11  4.15e-09  1.42e-11  2.57e-10  9.90e-01  
 17  +3.8650e-01  +3.8650e-01  3.03e-10  6.19e-13  4.15e-11  1.42e-13  2.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.1624ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:56 PM: Optimal value: 3.865e-01
(CVXPY) Aug 30 12:12:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:12:56 PM: Solver (including time spent in interface) took 1.503e-02 seconds
Iteration: 10, Objective: 0.3865
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:56 PM: Your problem has 615 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 615
  constraints   = 1115
  nnz(P)        = 0
  nnz(A)        = 7967
  cones (total) = 1
    : Nonnegative = 1,  numel = 1115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0127e+02  5.01e+02  9.57e-01  3.30e+01  1.00e+00  1.01e+00   ------   
  1  +5.7878e-01  +1.0622e+02  1.06e+02  4.03e-01  1.97e+01  3.86e-03  5.52e-01  6.07e-01  
  2  +5.2997e-01  +1.1877e+01  1.13e+01  1.20e-01  7.42e+00  1.45e-02  2.25e-01  9.59e-01  
  3  +5.0434e-01  +2.7041e+00  2.20e+00  4.63e-02  2.92e+00  3.51e-05  1.81e-01  6.00e-01  
  4  +5.0042e-01  +1.0747e+00  5.74e-01  1.22e-02  8.08e-01  1.70e-05  5.94e-02  6.95e-01  
  5  +4.9019e-01  +1.3624e+00  8.72e-01  4.20e-03  2.89e-01  1.20e-04  1.17e-02  9.31e-01  
  6  +4.7282e-01  +1.0242e+00  5.51e-01  1.79e-03  1.23e-01  1.22e-04  5.17e-03  6.66e-01  
  7  +4.6354e-01  +9.3470e-01  4.71e-01  1.32e-03  8.99e-02  1.26e-04  3.89e-03  3.90e-01  
  8  +4.5195e-01  +7.4282e-01  2.91e-01  8.92e-04  6.04e-02  1.03e-04  2.80e-03  9.90e-01  
  9  +4.2412e-01  +5.9039e-01  1.66e-01  4.12e-04  2.77e-02  6.20e-05  1.39e-03  5.71e-01  
 10  +4.0451e-01  +4.9131e-01  8.68e-02  2.01e-04  1.34e-02  3.17e-05  7.30e-04  5.51e-01  
 11  +3.9303e-01  +4.3788e-01  4.49e-02  9.89e-05  6.62e-03  1.68e-05  3.79e-04  5.39e-01  
 12  +3.8899e-01  +4.1983e-01  3.08e-02  6.67e-05  4.46e-03  1.19e-05  2.62e-04  3.71e-01  
 13  +3.8235e-01  +3.8979e-01  7.44e-03  1.58e-05  1.05e-03  3.60e-06  6.44e-05  9.90e-01  
 14  +3.8028e-01  +3.8191e-01  1.63e-03  3.41e-06  2.28e-04  7.73e-07  1.43e-05  8.45e-01  
 15  +3.7972e-01  +3.7976e-01  4.39e-05  9.15e-08  6.10e-06  2.00e-08  3.88e-07  9.76e-01  
 16  +3.7970e-01  +3.7970e-01  4.39e-07  9.16e-10  6.11e-08  2.00e-10  3.89e-09  9.90e-01  
 17  +3.7970e-01  +3.7970e-01  4.39e-09  9.16e-12  6.11e-10  2.00e-12  3.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.643ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:56 PM: Optimal value: 3.797e-01
(CVXPY) Aug 30 12:12:56 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:12:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 11, Objective: 0.3797
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:56 PM: Your problem has 625 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 625
  constraints   = 1125
  nnz(P)        = 0
  nnz(A)        = 8171
  cones (total) = 1
    : Nonnegative = 1,  numel = 1125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0132e+02  5.01e+02  9.57e-01  3.29e+01  1.00e+00  1.01e+00   ------   
  1  +5.7757e-01  +1.0643e+02  1.06e+02  4.05e-01  1.96e+01  3.87e-03  5.53e-01  6.06e-01  
  2  +5.2898e-01  +1.1685e+01  1.12e+01  1.18e-01  7.25e+00  1.47e-02  2.22e-01  9.70e-01  
  3  +5.0401e-01  +2.6381e+00  2.13e+00  4.48e-02  2.83e+00  3.65e-05  1.71e-01  6.58e-01  
  4  +5.0016e-01  +1.1667e+00  6.67e-01  1.34e-02  8.90e-01  2.25e-05  5.66e-02  6.96e-01  
  5  +4.8758e-01  +1.2086e+00  7.21e-01  3.50e-03  2.40e-01  1.21e-04  9.80e-03  9.04e-01  
  6  +4.8684e-01  +1.3061e+00  8.19e-01  2.84e-03  1.96e-01  2.08e-04  7.76e-03  4.98e-01  
  7  +4.7160e-01  +1.1016e+00  6.30e-01  1.78e-03  1.22e-01  1.84e-04  5.04e-03  4.13e-01  
  8  +4.3837e-01  +6.9933e-01  2.61e-01  7.32e-04  4.94e-02  6.33e-05  2.36e-03  7.97e-01  
  9  +4.1562e-01  +5.7224e-01  1.57e-01  3.99e-04  2.67e-02  4.09e-05  1.39e-03  5.05e-01  
 10  +3.9306e-01  +4.5986e-01  6.68e-02  1.56e-04  1.04e-02  2.07e-05  5.97e-04  7.16e-01  
 11  +3.8674e-01  +4.2992e-01  4.32e-02  9.79e-05  6.52e-03  1.52e-05  3.91e-04  5.37e-01  
 12  +3.7973e-01  +3.9826e-01  1.85e-02  4.09e-05  2.72e-03  7.52e-06  1.71e-04  7.72e-01  
 13  +3.7539e-01  +3.7969e-01  4.31e-03  9.35e-06  6.22e-04  1.80e-06  4.05e-05  8.15e-01  
 14  +3.7409e-01  +3.7433e-01  2.42e-04  5.24e-07  3.49e-05  1.03e-07  2.30e-06  9.90e-01  
 15  +3.7400e-01  +3.7400e-01  2.48e-06  5.37e-09  3.57e-07  1.06e-09  2.36e-08  9.90e-01  
 16  +3.7400e-01  +3.7400e-01  2.49e-08  5.38e-11  3.57e-09  1.06e-11  2.36e-10  9.90e-01  
 17  +3.7400e-01  +3.7400e-01  2.49e-10  5.38e-13  3.57e-11  1.06e-13  2.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.2337ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:56 PM: Optimal value: 3.740e-01
(CVXPY) Aug 30 12:12:56 PM: Compilation took 1.561e-02 seconds
(CVXPY) Aug 30 12:12:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 12, Objective: 0.3740
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:56 PM: Your problem has 635 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:56 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 635
  constraints   = 1135
  nnz(P)        = 0
  nnz(A)        = 8290
  cones (total) = 1
    : Nonnegative = 1,  numel = 1135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0137e+02  5.01e+02  9.57e-01  3.28e+01  1.00e+00  1.01e+00   ------   
  1  +5.7669e-01  +1.0651e+02  1.06e+02  4.05e-01  1.95e+01  3.87e-03  5.53e-01  6.06e-01  
  2  +5.2841e-01  +1.1565e+01  1.10e+01  1.16e-01  7.10e+00  1.48e-02  2.19e-01  9.77e-01  
  3  +5.0372e-01  +2.5757e+00  2.07e+00  4.34e-02  2.74e+00  3.72e-05  1.64e-01  7.03e-01  
  4  +5.0006e-01  +1.3419e+00  8.42e-01  1.60e-02  1.06e+00  2.96e-05  6.03e-02  6.64e-01  
  5  +4.8599e-01  +1.3542e+00  8.68e-01  4.04e-03  2.76e-01  1.40e-04  1.13e-02  9.04e-01  
  6  +4.7713e-01  +1.2527e+00  7.76e-01  2.68e-03  1.84e-01  1.96e-04  7.53e-03  6.34e-01  
  7  +4.6395e-01  +1.0664e+00  6.02e-01  1.80e-03  1.23e-01  1.72e-04  5.24e-03  4.42e-01  
  8  +4.4521e-01  +7.9089e-01  3.46e-01  1.09e-03  7.34e-02  1.13e-04  3.47e-03  9.90e-01  
  9  +4.1264e-01  +5.7159e-01  1.59e-01  4.12e-04  2.75e-02  5.05e-05  1.45e-03  6.27e-01  
 10  +3.9654e-01  +4.8987e-01  9.33e-02  2.26e-04  1.50e-02  3.12e-05  8.52e-04  5.17e-01  
 11  +3.8862e-01  +4.5150e-01  6.29e-02  1.48e-04  9.79e-03  2.16e-05  5.80e-04  3.83e-01  
 12  +3.8158e-01  +4.1787e-01  3.63e-02  8.24e-05  5.46e-03  1.33e-05  3.38e-04  5.33e-01  
 13  +3.7523e-01  +3.8745e-01  1.22e-02  2.71e-05  1.79e-03  5.47e-06  1.16e-04  9.90e-01  
 14  +3.7290e-01  +3.7804e-01  5.14e-03  1.12e-05  7.44e-04  2.30e-06  4.94e-05  6.24e-01  
 15  +3.7130e-01  +3.7159e-01  2.86e-04  6.24e-07  4.12e-05  1.20e-07  2.79e-06  9.86e-01  
 16  +3.7120e-01  +3.7121e-01  3.80e-06  8.28e-09  5.48e-07  1.59e-09  3.72e-08  9.87e-01  
 17  +3.7120e-01  +3.7120e-01  3.81e-08  8.29e-11  5.48e-09  1.59e-11  3.72e-10  9.90e-01  
 18  +3.7120e-01  +3.7120e-01  3.81e-10  8.29e-13  5.48e-11  1.59e-13  3.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.1263ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:56 PM: Optimal value: 3.712e-01
(CVXPY) Aug 30 12:12:56 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:12:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 13, Objective: 0.3712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:57 PM: Your problem has 638 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:57 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 638
  constraints   = 1138
  nnz(P)        = 0
  nnz(A)        = 8319
  cones (total) = 1
    : Nonnegative = 1,  numel = 1138

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0137e+02  5.01e+02  9.57e-01  3.28e+01  1.00e+00  1.01e+00   ------   
  1  +5.7669e-01  +1.0647e+02  1.06e+02  4.05e-01  1.94e+01  3.87e-03  5.52e-01  6.06e-01  
  2  +5.2838e-01  +1.1552e+01  1.10e+01  1.16e-01  7.07e+00  1.48e-02  2.18e-01  9.77e-01  
  3  +5.0370e-01  +2.5692e+00  2.07e+00  4.33e-02  2.73e+00  3.71e-05  1.63e-01  7.05e-01  
  4  +5.0003e-01  +1.3416e+00  8.42e-01  1.59e-02  1.05e+00  2.98e-05  5.99e-02  6.65e-01  
  5  +4.8578e-01  +1.3480e+00  8.62e-01  3.98e-03  2.72e-01  1.41e-04  1.11e-02  9.03e-01  
  6  +4.7621e-01  +1.2413e+00  7.65e-01  2.62e-03  1.79e-01  1.93e-04  7.36e-03  6.18e-01  
  7  +4.6376e-01  +1.0673e+00  6.04e-01  1.80e-03  1.22e-01  1.73e-04  5.24e-03  4.39e-01  
  8  +4.4439e-01  +7.8656e-01  3.42e-01  1.07e-03  7.20e-02  1.12e-04  3.42e-03  9.90e-01  
  9  +4.1231e-01  +5.7088e-01  1.59e-01  4.12e-04  2.74e-02  4.99e-05  1.45e-03  6.12e-01  
 10  +3.9726e-01  +4.9411e-01  9.69e-02  2.36e-04  1.56e-02  3.20e-05  8.83e-04  4.85e-01  
 11  +3.8918e-01  +4.5462e-01  6.54e-02  1.54e-04  1.02e-02  2.20e-05  6.03e-04  3.65e-01  
 12  +3.8143e-01  +4.1720e-01  3.58e-02  8.14e-05  5.38e-03  1.30e-05  3.33e-04  5.73e-01  
 13  +3.7536e-01  +3.8797e-01  1.26e-02  2.81e-05  1.85e-03  5.65e-06  1.20e-04  9.90e-01  
 14  +3.7288e-01  +3.7793e-01  5.05e-03  1.11e-05  7.32e-04  2.26e-06  4.85e-05  6.40e-01  
 15  +3.7136e-01  +3.7184e-01  4.74e-04  1.04e-06  6.84e-05  2.02e-07  4.63e-06  9.47e-01  
 16  +3.7120e-01  +3.7122e-01  1.30e-05  2.84e-08  1.87e-06  5.53e-09  1.27e-07  9.75e-01  
 17  +3.7120e-01  +3.7120e-01  1.30e-07  2.84e-10  1.87e-08  5.53e-11  1.27e-09  9.90e-01  
 18  +3.7120e-01  +3.7120e-01  1.30e-09  2.84e-12  1.87e-10  5.54e-13  1.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9629ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:57 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:57 PM: Optimal value: 3.712e-01
(CVXPY) Aug 30 12:12:57 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:12:57 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 14, Objective: 0.3712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:57 PM: Your problem has 639 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:57 PM: Finished problem compilation (took 1.554e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 639
  constraints   = 1139
  nnz(P)        = 0
  nnz(A)        = 8336
  cones (total) = 1
    : Nonnegative = 1,  numel = 1139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0138e+02  5.01e+02  9.57e-01  3.28e+01  1.00e+00  1.01e+00   ------   
  1  +5.7679e-01  +1.0647e+02  1.06e+02  4.05e-01  1.94e+01  3.87e-03  5.52e-01  6.06e-01  
  2  +5.2837e-01  +1.1547e+01  1.10e+01  1.16e-01  7.06e+00  1.48e-02  2.19e-01  9.77e-01  
  3  +5.0370e-01  +2.5696e+00  2.07e+00  4.33e-02  2.73e+00  3.71e-05  1.63e-01  7.05e-01  
  4  +5.0002e-01  +1.3357e+00  8.36e-01  1.58e-02  1.04e+00  2.97e-05  5.95e-02  6.67e-01  
  5  +4.8572e-01  +1.3390e+00  8.53e-01  3.93e-03  2.69e-01  1.41e-04  1.10e-02  9.02e-01  
  6  +4.7638e-01  +1.2396e+00  7.63e-01  2.61e-03  1.78e-01  1.94e-04  7.33e-03  6.18e-01  
  7  +4.6395e-01  +1.0671e+00  6.03e-01  1.80e-03  1.22e-01  1.73e-04  5.24e-03  4.32e-01  
  8  +4.4421e-01  +7.8470e-01  3.40e-01  1.06e-03  7.14e-02  1.11e-04  3.39e-03  9.90e-01  
  9  +4.1218e-01  +5.6965e-01  1.57e-01  4.09e-04  2.72e-02  4.92e-05  1.44e-03  6.12e-01  
 10  +3.9766e-01  +4.9590e-01  9.82e-02  2.40e-04  1.59e-02  3.21e-05  8.96e-04  4.67e-01  
 11  +3.8955e-01  +4.5635e-01  6.68e-02  1.58e-04  1.04e-02  2.22e-05  6.15e-04  3.58e-01  
 12  +3.8123e-01  +4.1610e-01  3.49e-02  7.93e-05  5.25e-03  1.26e-05  3.25e-04  6.04e-01  
 13  +3.7527e-01  +3.8757e-01  1.23e-02  2.74e-05  1.81e-03  5.50e-06  1.17e-04  9.90e-01  
 14  +3.7295e-01  +3.7822e-01  5.27e-03  1.16e-05  7.64e-04  2.35e-06  5.06e-05  6.13e-01  
 15  +3.7140e-01  +3.7197e-01  5.71e-04  1.25e-06  8.23e-05  2.45e-07  5.58e-06  9.32e-01  
 16  +3.7121e-01  +3.7122e-01  1.71e-05  3.72e-08  2.46e-06  7.29e-09  1.67e-07  9.72e-01  
 17  +3.7120e-01  +3.7120e-01  1.71e-07  3.73e-10  2.46e-08  7.30e-11  1.68e-09  9.90e-01  
 18  +3.7120e-01  +3.7120e-01  1.71e-09  3.73e-12  2.46e-10  7.31e-13  1.68e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.2686ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:57 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:57 PM: Optimal value: 3.712e-01
(CVXPY) Aug 30 12:12:57 PM: Compilation took 1.554e-02 seconds
(CVXPY) Aug 30 12:12:57 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 15, Objective: 0.3712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:12:57 PM: Your problem has 640 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:12:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:12:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:12:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:12:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:12:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:12:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:12:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:12:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:12:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:12:57 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 640
  constraints   = 1140
  nnz(P)        = 0
  nnz(A)        = 8355
  cones (total) = 1
    : Nonnegative = 1,  numel = 1140

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0137e+02  5.01e+02  9.57e-01  3.28e+01  1.00e+00  1.01e+00   ------   
  1  +5.7666e-01  +1.0649e+02  1.06e+02  4.05e-01  1.94e+01  3.87e-03  5.52e-01  6.06e-01  
  2  +5.2828e-01  +1.1530e+01  1.10e+01  1.16e-01  7.04e+00  1.48e-02  2.18e-01  9.78e-01  
  3  +5.0368e-01  +2.5644e+00  2.06e+00  4.32e-02  2.72e+00  3.73e-05  1.63e-01  7.10e-01  
  4  +5.0001e-01  +1.3412e+00  8.41e-01  1.59e-02  1.05e+00  2.99e-05  5.93e-02  6.66e-01  
  5  +4.8569e-01  +1.3362e+00  8.50e-01  3.92e-03  2.68e-01  1.40e-04  1.10e-02  9.02e-01  
  6  +4.7685e-01  +1.2561e+00  7.79e-01  2.62e-03  1.79e-01  2.06e-04  7.34e-03  6.54e-01  
  7  +4.6658e-01  +1.1083e+00  6.42e-01  1.95e-03  1.33e-01  1.84e-04  5.63e-03  3.69e-01  
  8  +4.4143e-01  +7.5942e-01  3.18e-01  9.68e-04  6.50e-02  9.80e-05  3.10e-03  9.90e-01  
  9  +4.1342e-01  +5.7510e-01  1.62e-01  4.30e-04  2.86e-02  4.70e-05  1.51e-03  5.58e-01  
 10  +4.0183e-01  +5.1610e-01  1.14e-01  2.87e-04  1.91e-02  3.43e-05  1.06e-03  3.63e-01  
 11  +3.9054e-01  +4.6036e-01  6.98e-02  1.67e-04  1.11e-02  2.14e-05  6.50e-04  4.35e-01  
 12  +3.7938e-01  +4.0681e-01  2.74e-02  6.22e-05  4.11e-03  9.73e-06  2.58e-04  7.43e-01  
 13  +3.7486e-01  +3.8570e-01  1.08e-02  2.41e-05  1.59e-03  4.81e-06  1.03e-04  9.90e-01  
 14  +3.7254e-01  +3.7650e-01  3.96e-03  8.70e-06  5.74e-04  1.74e-06  3.83e-05  6.63e-01  
 15  +3.7129e-01  +3.7154e-01  2.53e-04  5.52e-07  3.65e-05  1.06e-07  2.48e-06  9.51e-01  
 16  +3.7120e-01  +3.7121e-01  3.77e-06  8.23e-09  5.43e-07  1.58e-09  3.70e-08  9.87e-01  
 17  +3.7120e-01  +3.7120e-01  3.78e-08  8.25e-11  5.44e-09  1.59e-11  3.71e-10  9.90e-01  
 18  +3.7120e-01  +3.7120e-01  3.78e-10  8.25e-13  5.44e-11  1.59e-13  3.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.744ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:12:57 PM: Problem status: optimal
(CVXPY) Aug 30 12:12:57 PM: Optimal value: 3.712e-01
(CVXPY) Aug 30 12:12:57 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:12:57 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.601
  Our objective: 0.20199999999999996

IF 
    (x0 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x3 = 0)                       <-- (term's our objective: 0.01600000000000004)
 OR (x2 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 0)            <-- (term's our objective: 0.014000000000000023)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.016000000000000018)
 OR (x5 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.014000000000000016)
 OR (x4 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.008000000000000016)
 OR (x1 = 1 AND x3 = 1 AND x5 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.008000000000000012)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.022000000000000023)
 OR (x1 = 1 AND x6 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0)            <-- (term's our objective: 0.018000000000000023)
 OR (x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x6 = 0)            <-- (term's our objective: 0.020000000000000025)
 OR (x0 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x6 = 0)            <-- (term's our objective: 0.012000000000000016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.014000000000000014)
 OR (x3 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.014000000000000014)
 OR (x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.004000000000000009)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.008000000000000014)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x0 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.008000000000000014)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0020000000000000052)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.00800000000000001)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.022000000000000023
    Its accruacy: 0.511
    Its hamming distance: 9
  Shortest hamming distance: 1
    Its our objective: 0.016000000000000018
  Highest accruacy: 0.511
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

