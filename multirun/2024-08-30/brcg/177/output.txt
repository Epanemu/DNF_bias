Command:
python test_script.py -s smallest_subclass -d 5 -n 500 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.036000000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.21200000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:08 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:08 PM: Finished problem compilation (took 1.567e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +2.5067e+02  2.50e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9886e-01  +5.0501e+01  4.99e+01  3.44e-01  1.15e+01  3.99e-03  5.05e-01  6.45e-01  
  2  +5.4322e-01  +7.3098e+00  6.77e+00  1.16e-01  4.72e+00  1.01e-02  2.26e-01  8.07e-01  
  3  +5.0130e-01  +1.2613e+00  7.60e-01  2.27e-02  8.98e-01  4.33e-04  1.97e-01  5.27e-01  
  4  +5.0035e-01  +6.6076e-01  1.60e-01  4.85e-03  1.97e-01  8.74e-05  5.11e-02  7.76e-01  
  5  +4.9926e-01  +6.1840e-01  1.19e-01  2.87e-03  1.18e-01  1.52e-04  1.32e-02  8.61e-01  
  6  +4.8941e-01  +5.7339e-01  8.40e-02  4.22e-04  1.76e-02  7.98e-04  1.40e-03  9.05e-01  
  7  +4.7848e-01  +5.0863e-01  3.01e-02  1.54e-04  6.40e-03  7.08e-06  5.71e-04  8.11e-01  
  8  +4.7176e-01  +4.7689e-01  5.13e-03  2.34e-05  9.72e-04  1.22e-06  9.47e-05  8.48e-01  
  9  +4.7020e-01  +4.7051e-01  3.08e-04  1.30e-06  5.39e-05  2.31e-07  5.87e-06  9.90e-01  
 10  +4.7010e-01  +4.7010e-01  3.09e-06  1.29e-08  5.37e-07  2.31e-09  5.90e-08  9.90e-01  
 11  +4.7010e-01  +4.7010e-01  3.09e-08  1.29e-10  5.37e-09  2.31e-11  5.90e-10  9.90e-01  
 12  +4.7010e-01  +4.7010e-01  3.09e-10  1.29e-12  5.37e-11  2.32e-13  5.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3493ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:08 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:08 PM: Optimal value: 4.701e-01
(CVXPY) Aug 30 12:06:08 PM: Compilation took 1.567e-02 seconds
(CVXPY) Aug 30 12:06:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:08 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:08 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2421
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9904e-01  +2.5156e+02  2.51e+02  9.34e-01  2.06e+01  1.00e+00  1.02e+00   ------   
  1  +5.9491e-01  +5.0848e+01  5.03e+01  3.49e-01  1.18e+01  3.97e-03  5.13e-01  6.42e-01  
  2  +5.4013e-01  +7.0007e+00  6.46e+00  1.10e-01  4.60e+00  1.06e-02  2.17e-01  8.41e-01  
  3  +5.0318e-01  +1.6524e+00  1.15e+00  3.47e-02  1.40e+00  1.47e-03  1.90e-01  4.51e-01  
  4  +4.9993e-01  +7.6354e-01  2.64e-01  7.96e-03  3.32e-01  5.29e-04  4.66e-02  8.18e-01  
  5  +4.8677e-01  +8.0389e-01  3.17e-01  2.47e-03  1.07e-01  3.26e-03  7.35e-03  8.93e-01  
  6  +4.8350e-01  +7.5699e-01  2.73e-01  2.00e-03  8.62e-02  2.18e-03  6.07e-03  3.44e-01  
  7  +4.7101e-01  +6.2583e-01  1.55e-01  1.00e-03  4.32e-02  7.41e-04  3.24e-03  6.24e-01  
  8  +4.6392e-01  +5.5625e-01  9.23e-02  4.67e-04  2.02e-02  1.78e-04  1.50e-03  9.66e-01  
  9  +4.5857e-01  +5.3553e-01  7.70e-02  3.36e-04  1.46e-02  1.23e-04  1.09e-03  5.39e-01  
 10  +4.5212e-01  +5.0493e-01  5.28e-02  2.31e-04  1.01e-02  4.46e-05  7.66e-04  9.90e-01  
 11  +4.4821e-01  +4.8927e-01  4.11e-02  1.67e-04  7.29e-03  3.59e-05  5.62e-04  2.90e-01  
 12  +4.4095e-01  +4.5871e-01  1.78e-02  6.63e-05  2.91e-03  2.04e-05  2.30e-04  9.90e-01  
 13  +4.3481e-01  +4.3578e-01  9.71e-04  3.53e-06  1.56e-04  8.76e-07  1.28e-05  9.83e-01  
 14  +4.3440e-01  +4.3441e-01  1.03e-05  3.71e-08  1.64e-06  9.19e-09  1.35e-07  9.89e-01  
 15  +4.3440e-01  +4.3440e-01  1.03e-07  3.71e-10  1.64e-08  9.19e-11  1.35e-09  9.90e-01  
 16  +4.3440e-01  +4.3440e-01  1.03e-09  3.71e-12  1.64e-10  9.20e-13  1.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.784ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:08 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:08 PM: Optimal value: 4.344e-01
(CVXPY) Aug 30 12:06:08 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:06:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4344
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:08 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:08 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 2694
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9871e-01  +2.5168e+02  2.51e+02  9.35e-01  2.09e+01  1.00e+00  1.02e+00   ------   
  1  +5.9229e-01  +5.1077e+01  5.05e+01  3.54e-01  1.19e+01  3.97e-03  5.17e-01  6.40e-01  
  2  +5.3868e-01  +6.8629e+00  6.32e+00  1.08e-01  4.50e+00  1.10e-02  2.13e-01  8.58e-01  
  3  +5.0224e-01  +1.5643e+00  1.06e+00  3.24e-02  1.32e+00  1.46e-03  1.78e-01  5.46e-01  
  4  +4.9808e-01  +8.4477e-01  3.47e-01  9.24e-03  3.91e-01  1.05e-03  3.94e-02  8.88e-01  
  5  +4.7642e-01  +9.3902e-01  4.63e-01  2.88e-03  1.25e-01  4.63e-03  8.72e-03  9.75e-01  
  6  +4.7140e-01  +8.9386e-01  4.22e-01  2.32e-03  1.01e-01  3.86e-03  7.13e-03  2.99e-01  
  7  +4.5804e-01  +7.3303e-01  2.75e-01  1.49e-03  6.43e-02  5.36e-04  4.94e-03  6.99e-01  
  8  +4.2699e-01  +5.3830e-01  1.11e-01  5.17e-04  2.22e-02  9.35e-05  1.96e-03  8.16e-01  
  9  +4.0819e-01  +4.4748e-01  3.93e-02  1.70e-04  7.29e-03  3.21e-05  7.22e-04  7.02e-01  
 10  +4.0086e-01  +4.1341e-01  1.25e-02  5.41e-05  2.31e-03  1.05e-05  2.41e-04  9.90e-01  
 11  +3.9692e-01  +3.9824e-01  1.32e-03  5.55e-06  2.37e-04  1.09e-06  2.54e-05  9.39e-01  
 12  +3.9650e-01  +3.9652e-01  1.35e-05  5.66e-08  2.42e-06  1.11e-08  2.60e-07  9.90e-01  
 13  +3.9650e-01  +3.9650e-01  1.35e-07  5.66e-10  2.42e-08  1.11e-10  2.60e-09  9.90e-01  
 14  +3.9650e-01  +3.9650e-01  1.35e-09  5.66e-12  2.42e-10  1.11e-12  2.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7899ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:08 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:08 PM: Optimal value: 3.965e-01
(CVXPY) Aug 30 12:06:08 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:06:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.592
  Our objective: 0.184

IF 
    (x2 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.096)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x1 = 0)            <-- (term's our objective: 0.039999999999999966)
 OR (x2 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.03199999999999996)
 OR (x4 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.01600000000000005)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.096
    Its accruacy: 0.548
    Its hamming distance: 3
  Shortest hamming distance: 2
    Its our objective: 0.01600000000000005
  Highest accruacy: 0.548
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

