Command:
python test_script.py -s smallest_subclass -d 6 -n 5000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0164
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 6.

Computed total variation: 0.0972
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:23 PM: Your problem has 2513 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:23 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2513
  constraints   = 5013
  nnz(P)        = 0
  nnz(A)        = 22513
  cones (total) = 1
    : Nonnegative = 1,  numel = 5013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5007e+03  2.50e+03  9.79e-01  6.97e+01  1.00e+00  1.00e+00   ------   
  1  +5.9311e-01  +5.1464e+02  5.14e+02  3.83e-01  4.22e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4183e-01  +6.8297e+01  6.78e+01  1.47e-01  2.04e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1006e-01  +1.6872e+01  1.64e+01  1.04e-01  1.40e+01  2.85e-05  2.38e-01  1.30e-01  
  4  +5.0023e-01  +9.9566e-01  4.95e-01  4.76e-03  6.63e-01  6.48e-06  1.19e-01  9.90e-01  
  5  +5.0002e-01  +5.5360e-01  5.36e-02  5.08e-04  7.12e-02  9.59e-07  1.95e-02  8.68e-01  
  6  +5.0000e-01  +5.4179e-01  4.18e-02  3.93e-04  5.52e-02  1.30e-06  7.50e-03  6.82e-01  
  7  +4.9921e-01  +5.3793e-01  3.87e-02  6.88e-05  9.71e-03  3.11e-05  2.29e-04  9.88e-01  
  8  +4.9658e-01  +5.2440e-01  2.78e-02  1.61e-05  2.28e-03  8.17e-05  5.20e-05  7.78e-01  
  9  +4.9265e-01  +5.0442e-01  1.18e-02  5.87e-06  8.29e-04  1.90e-05  2.02e-05  7.11e-01  
 10  +4.9027e-01  +4.9428e-01  4.01e-03  1.73e-06  2.44e-04  2.70e-06  6.49e-06  8.43e-01  
 11  +4.8913e-01  +4.8979e-01  6.60e-04  2.64e-07  3.74e-05  7.78e-08  1.06e-06  9.90e-01  
 12  +4.8890e-01  +4.8891e-01  6.86e-06  2.72e-09  3.84e-07  7.94e-10  1.11e-08  9.90e-01  
 13  +4.8890e-01  +4.8890e-01  6.86e-08  2.71e-11  3.84e-09  7.94e-12  1.11e-10  9.90e-01  
 14  +4.8890e-01  +4.8890e-01  6.86e-10  2.72e-13  3.84e-11  8.34e-14  1.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.2835ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:23 PM: Optimal value: 4.889e-01
(CVXPY) Aug 30 12:09:23 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:23 PM: Solver (including time spent in interface) took 3.129e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4889
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:24 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Finished problem compilation (took 1.512e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 24478
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.79e-01  7.03e+01  1.00e+00  1.00e+00   ------   
  1  +5.9289e-01  +5.1482e+02  5.14e+02  3.83e-01  4.25e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4161e-01  +6.8070e+01  6.75e+01  1.46e-01  2.04e+01  1.15e-02  2.43e-01  8.28e-01  
  3  +5.0998e-01  +1.6786e+01  1.63e+01  1.03e-01  1.40e+01  2.85e-05  2.37e-01  1.33e-01  
  4  +5.0061e-01  +1.6173e+00  1.12e+00  1.07e-02  1.49e+00  7.53e-06  1.64e-01  6.03e-01  
  5  +5.0011e-01  +7.7717e-01  2.77e-01  2.63e-03  3.71e-01  2.93e-06  7.43e-02  6.23e-01  
  6  +5.0005e-01  +6.9289e-01  1.93e-01  1.83e-03  2.58e-01  2.63e-06  3.89e-02  5.51e-01  
  7  +4.9982e-01  +6.7582e-01  1.76e-01  1.28e-03  1.81e-01  8.46e-06  6.73e-03  9.68e-01  
  8  +4.9502e-01  +6.3164e-01  1.37e-01  9.90e-05  1.41e-02  1.20e-04  3.30e-04  9.55e-01  
  9  +4.8799e-01  +5.6107e-01  7.31e-02  4.88e-05  6.95e-03  1.56e-05  1.76e-04  7.16e-01  
 10  +4.8629e-01  +5.4793e-01  6.16e-02  3.72e-05  5.30e-03  7.09e-06  1.36e-04  6.57e-01  
 11  +4.8485e-01  +5.3963e-01  5.48e-02  3.09e-05  4.40e-03  5.14e-06  1.15e-04  4.74e-01  
 12  +4.8271e-01  +5.2697e-01  4.43e-02  2.45e-05  3.49e-03  2.63e-06  9.34e-05  9.90e-01  
 13  +4.7633e-01  +4.9383e-01  1.75e-02  8.64e-06  1.23e-03  1.00e-06  3.58e-05  6.52e-01  
 14  +4.7233e-01  +4.7381e-01  1.48e-03  6.96e-07  9.90e-05  5.60e-08  3.22e-06  9.34e-01  
 15  +4.7193e-01  +4.7205e-01  1.18e-04  5.54e-08  7.89e-06  8.22e-09  2.68e-07  9.90e-01  
 16  +4.7190e-01  +4.7190e-01  1.20e-06  5.63e-10  8.02e-08  8.34e-11  2.73e-09  9.90e-01  
 17  +4.7190e-01  +4.7190e-01  1.20e-08  5.63e-12  8.02e-10  8.39e-13  2.74e-11  9.90e-01  
 18  +4.7190e-01  +4.7190e-01  1.20e-10  5.63e-14  8.02e-12  8.44e-15  2.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.3609ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:24 PM: Optimal value: 4.719e-01
(CVXPY) Aug 30 12:09:24 PM: Compilation took 1.512e-02 seconds
(CVXPY) Aug 30 12:09:24 PM: Solver (including time spent in interface) took 3.137e-02 seconds
Iteration: 2, Objective: 0.4719
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:24 PM: Your problem has 2533 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Finished problem compilation (took 1.627e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2533
  constraints   = 5033
  nnz(P)        = 0
  nnz(A)        = 27368
  cones (total) = 1
    : Nonnegative = 1,  numel = 5033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.79e-01  7.16e+01  1.00e+00  1.00e+00   ------   
  1  +5.9282e-01  +5.1488e+02  5.14e+02  3.84e-01  4.33e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4152e-01  +6.7976e+01  6.74e+01  1.46e-01  2.07e+01  1.15e-02  2.43e-01  8.29e-01  
  3  +5.0995e-01  +1.6760e+01  1.63e+01  1.03e-01  1.43e+01  2.86e-05  2.37e-01  1.34e-01  
  4  +5.0060e-01  +1.6079e+00  1.11e+00  1.06e-02  1.51e+00  7.54e-06  1.63e-01  6.09e-01  
  5  +5.0009e-01  +7.4857e-01  2.48e-01  2.36e-03  3.39e-01  2.79e-06  6.75e-02  6.63e-01  
  6  +5.0004e-01  +6.9485e-01  1.95e-01  1.84e-03  2.65e-01  3.06e-06  3.28e-02  6.29e-01  
  7  +5.0004e-01  +7.7153e-01  2.71e-01  2.24e-03  3.22e-01  4.90e-06  1.42e-02  9.77e-01  
  8  +4.9937e-01  +7.3317e-01  2.34e-01  6.58e-04  9.55e-02  2.09e-05  2.32e-03  8.52e-01  
  9  +4.9797e-01  +7.0792e-01  2.10e-01  2.70e-04  3.92e-02  4.32e-05  8.99e-04  6.35e-01  
 10  +4.9820e-01  +7.0156e-01  2.03e-01  2.68e-04  3.90e-02  3.81e-05  8.92e-04  7.46e-02  
 11  +4.9438e-01  +6.5744e-01  1.63e-01  1.14e-04  1.65e-02  5.86e-05  3.77e-04  5.95e-01  
 12  +4.9184e-01  +6.1170e-01  1.20e-01  8.30e-05  1.21e-02  2.27e-05  2.77e-04  5.35e-01  
 13  +4.9088e-01  +6.0043e-01  1.10e-01  6.94e-05  1.01e-02  1.86e-05  2.28e-04  3.33e-01  
 14  +4.8993e-01  +5.9115e-01  1.01e-01  6.56e-05  9.53e-03  1.24e-05  2.21e-04  3.03e-01  
 15  +4.8408e-01  +5.5330e-01  6.92e-02  3.75e-05  5.45e-03  8.26e-06  1.26e-04  5.41e-01  
 16  +4.8099e-01  +5.4024e-01  5.92e-02  2.66e-05  3.87e-03  5.74e-06  8.99e-05  7.64e-01  
 17  +4.7679e-01  +5.2183e-01  4.50e-02  1.84e-05  2.67e-03  4.44e-06  6.33e-05  3.56e-01  
 18  +4.7658e-01  +5.2089e-01  4.43e-02  1.83e-05  2.66e-03  4.31e-06  6.32e-05  2.58e-02  
 19  +4.7067e-01  +4.9439e-01  2.37e-02  9.62e-06  1.39e-03  2.08e-06  3.43e-05  7.94e-01  
 20  +4.6612e-01  +4.7500e-01  8.88e-03  3.37e-06  4.89e-04  9.51e-07  1.24e-05  9.90e-01  
 21  +4.6309e-01  +4.6358e-01  4.90e-04  1.84e-07  2.67e-05  4.30e-08  7.04e-07  9.50e-01  
 22  +4.6290e-01  +4.6291e-01  5.89e-06  2.22e-09  3.21e-07  5.13e-10  8.55e-09  9.89e-01  
 23  +4.6290e-01  +4.6290e-01  5.90e-08  2.22e-11  3.22e-09  5.14e-12  8.57e-11  9.90e-01  
 24  +4.6290e-01  +4.6290e-01  5.91e-10  2.22e-13  3.22e-11  5.16e-14  8.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.1496ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:24 PM: Optimal value: 4.629e-01
(CVXPY) Aug 30 12:09:24 PM: Compilation took 1.627e-02 seconds
(CVXPY) Aug 30 12:09:24 PM: Solver (including time spent in interface) took 3.087e-02 seconds
Iteration: 3, Objective: 0.4629
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:24 PM: Your problem has 2543 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2543
  constraints   = 5043
  nnz(P)        = 0
  nnz(A)        = 28933
  cones (total) = 1
    : Nonnegative = 1,  numel = 5043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.79e-01  7.20e+01  1.00e+00  1.00e+00   ------   
  1  +5.9261e-01  +5.1527e+02  5.15e+02  3.85e-01  4.35e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4130e-01  +6.7776e+01  6.72e+01  1.46e-01  2.08e+01  1.16e-02  2.43e-01  8.31e-01  
  3  +5.0990e-01  +1.6717e+01  1.62e+01  1.03e-01  1.43e+01  2.87e-05  2.37e-01  1.37e-01  
  4  +5.0058e-01  +1.5817e+00  1.08e+00  1.04e-02  1.48e+00  7.55e-06  1.61e-01  6.25e-01  
  5  +5.0012e-01  +8.0477e-01  3.05e-01  2.91e-03  4.19e-01  3.21e-06  7.60e-02  5.91e-01  
  6  +5.0007e-01  +7.4069e-01  2.41e-01  2.28e-03  3.29e-01  3.34e-06  4.11e-02  5.60e-01  
  7  +4.9978e-01  +7.1880e-01  2.19e-01  1.54e-03  2.23e-01  1.06e-05  7.62e-03  9.27e-01  
  8  +4.9485e-01  +6.6531e-01  1.70e-01  1.38e-04  2.02e-02  1.24e-04  4.50e-04  9.43e-01  
  9  +4.9419e-01  +6.4733e-01  1.53e-01  1.11e-04  1.62e-02  6.75e-05  3.62e-04  5.21e-01  
 10  +4.9359e-01  +6.3631e-01  1.43e-01  1.00e-04  1.47e-02  4.74e-05  3.27e-04  3.16e-01  
 11  +4.9159e-01  +6.2302e-01  1.31e-01  8.13e-05  1.19e-02  4.41e-05  2.65e-04  2.56e-01  
 12  +4.9026e-01  +6.0634e-01  1.16e-01  7.21e-05  1.05e-02  1.90e-05  2.36e-04  5.29e-01  
 13  +4.8861e-01  +5.9792e-01  1.09e-01  6.31e-05  9.20e-03  1.74e-05  2.08e-04  1.95e-01  
 14  +4.8613e-01  +5.8194e-01  9.58e-02  5.42e-05  7.90e-03  9.17e-06  1.81e-04  5.76e-01  
 15  +4.7924e-01  +5.5050e-01  7.13e-02  3.48e-05  5.07e-03  6.70e-06  1.20e-04  4.49e-01  
 16  +4.7588e-01  +5.3227e-01  5.64e-02  2.61e-05  3.81e-03  4.67e-06  9.16e-05  8.01e-01  
 17  +4.7134e-01  +5.1263e-01  4.13e-02  1.82e-05  2.66e-03  3.39e-06  6.53e-05  3.67e-01  
 18  +4.6993e-01  +5.0623e-01  3.63e-02  1.52e-05  2.21e-03  3.27e-06  5.43e-05  4.87e-01  
 19  +4.6759e-01  +4.9597e-01  2.84e-02  1.18e-05  1.72e-03  2.80e-06  4.35e-05  9.90e-01  
 20  +4.6171e-01  +4.7204e-01  1.03e-02  4.13e-06  6.01e-04  1.06e-06  1.57e-05  7.32e-01  
 21  +4.5838e-01  +4.5970e-01  1.32e-03  5.16e-07  7.51e-05  1.07e-07  2.04e-06  9.42e-01  
 22  +4.5791e-01  +4.5793e-01  2.57e-05  1.00e-08  1.46e-06  1.96e-09  4.00e-08  9.81e-01  
 23  +4.5790e-01  +4.5790e-01  2.57e-07  1.00e-10  1.46e-08  1.96e-11  4.00e-10  9.90e-01  
 24  +4.5790e-01  +4.5790e-01  2.57e-09  1.00e-12  1.46e-10  1.98e-13  4.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.9757ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:24 PM: Optimal value: 4.579e-01
(CVXPY) Aug 30 12:09:24 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:09:24 PM: Solver (including time spent in interface) took 4.686e-02 seconds
Iteration: 4, Objective: 0.4579
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:24 PM: Your problem has 2553 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Finished problem compilation (took 1.649e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2553
  constraints   = 5053
  nnz(P)        = 0
  nnz(A)        = 29875
  cones (total) = 1
    : Nonnegative = 1,  numel = 5053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.21e+01  1.00e+00  1.00e+00   ------   
  1  +5.9265e-01  +5.1513e+02  5.15e+02  3.85e-01  4.35e+01  3.92e-03  5.27e-01  6.26e-01  
  2  +5.4119e-01  +6.7641e+01  6.71e+01  1.46e-01  2.07e+01  1.16e-02  2.43e-01  8.31e-01  
  3  +5.0987e-01  +1.6674e+01  1.62e+01  1.03e-01  1.43e+01  2.87e-05  2.37e-01  1.38e-01  
  4  +5.0051e-01  +1.4560e+00  9.56e-01  9.22e-03  1.32e+00  7.38e-06  1.53e-01  6.83e-01  
  5  +5.0009e-01  +7.4981e-01  2.50e-01  2.38e-03  3.44e-01  2.99e-06  6.33e-02  6.42e-01  
  6  +5.0008e-01  +7.6209e-01  2.62e-01  2.49e-03  3.59e-01  3.76e-06  4.39e-02  4.27e-01  
  7  +4.9996e-01  +7.3958e-01  2.40e-01  2.15e-03  3.10e-01  6.52e-06  1.79e-02  6.25e-01  
  8  +4.9915e-01  +7.1528e-01  2.16e-01  7.40e-04  1.08e-01  2.74e-05  2.66e-03  9.90e-01  
  9  +4.9649e-01  +6.8430e-01  1.88e-01  2.31e-04  3.37e-02  7.43e-05  7.63e-04  7.26e-01  
 10  +4.9468e-01  +6.4445e-01  1.50e-01  1.36e-04  1.98e-02  4.23e-05  4.48e-04  7.48e-01  
 11  +4.9444e-01  +6.4081e-01  1.46e-01  1.29e-04  1.89e-02  3.60e-05  4.26e-04  1.91e-01  
 12  +4.9371e-01  +6.3151e-01  1.38e-01  1.07e-04  1.57e-02  2.21e-05  3.51e-04  5.63e-01  
 13  +4.9137e-01  +6.1798e-01  1.27e-01  8.44e-05  1.23e-02  2.10e-05  2.78e-04  2.97e-01  
 14  +4.8757e-01  +5.9433e-01  1.07e-01  6.24e-05  9.10e-03  1.19e-05  2.06e-04  6.35e-01  
 15  +4.8470e-01  +5.8243e-01  9.77e-02  5.17e-05  7.55e-03  9.87e-06  1.73e-04  4.12e-01  
 16  +4.7676e-01  +5.4531e-01  6.85e-02  3.26e-05  4.75e-03  6.21e-06  1.13e-04  5.04e-01  
 17  +4.6674e-01  +5.0073e-01  3.40e-02  1.45e-05  2.12e-03  2.76e-06  5.27e-05  7.65e-01  
 18  +4.6439e-01  +4.9130e-01  2.69e-02  1.10e-05  1.60e-03  2.28e-06  3.99e-05  2.96e-01  
 19  +4.6285e-01  +4.8409e-01  2.12e-02  8.61e-06  1.25e-03  2.13e-06  3.29e-05  9.90e-01  
 20  +4.6025e-01  +4.7367e-01  1.34e-02  5.37e-06  7.82e-04  1.43e-06  2.04e-05  5.85e-01  
 21  +4.5926e-01  +4.7058e-01  1.13e-02  4.40e-06  6.41e-04  1.24e-06  1.65e-05  2.72e-01  
 22  +4.5712e-01  +4.6283e-01  5.71e-03  2.17e-06  3.15e-04  6.38e-07  8.24e-06  9.77e-01  
 23  +4.5533e-01  +4.5621e-01  8.77e-04  3.33e-07  4.84e-05  9.72e-08  1.29e-06  9.20e-01  
 24  +4.5501e-01  +4.5504e-01  2.97e-05  1.13e-08  1.64e-06  3.28e-09  4.38e-08  9.68e-01  
 25  +4.5500e-01  +4.5500e-01  2.98e-07  1.13e-10  1.65e-08  3.29e-11  4.39e-10  9.90e-01  
 26  +4.5500e-01  +4.5500e-01  2.98e-09  1.13e-12  1.65e-10  3.29e-13  4.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.3489ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:24 PM: Optimal value: 4.550e-01
(CVXPY) Aug 30 12:09:24 PM: Compilation took 1.649e-02 seconds
(CVXPY) Aug 30 12:09:24 PM: Solver (including time spent in interface) took 4.754e-02 seconds
Iteration: 5, Objective: 0.4550
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:24 PM: Your problem has 2563 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2563
  constraints   = 5063
  nnz(P)        = 0
  nnz(A)        = 30670
  cones (total) = 1
    : Nonnegative = 1,  numel = 5063

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.21e+01  1.00e+00  1.00e+00   ------   
  1  +5.9268e-01  +5.1524e+02  5.15e+02  3.85e-01  4.34e+01  3.92e-03  5.27e-01  6.26e-01  
  2  +5.4113e-01  +6.7575e+01  6.70e+01  1.46e-01  2.06e+01  1.16e-02  2.44e-01  8.32e-01  
  3  +5.0986e-01  +1.6656e+01  1.61e+01  1.03e-01  1.42e+01  2.88e-05  2.37e-01  1.38e-01  
  4  +5.0051e-01  +1.4654e+00  9.65e-01  9.33e-03  1.33e+00  7.39e-06  1.54e-01  6.80e-01  
  5  +5.0011e-01  +7.7823e-01  2.78e-01  2.66e-03  3.84e-01  3.17e-06  6.90e-02  6.04e-01  
  6  +5.0008e-01  +7.6825e-01  2.68e-01  2.55e-03  3.68e-01  3.82e-06  4.37e-02  4.77e-01  
  7  +4.9992e-01  +7.3519e-01  2.35e-01  2.02e-03  2.92e-01  7.63e-06  1.42e-02  7.11e-01  
  8  +4.9749e-01  +6.8757e-01  1.90e-01  2.98e-04  4.36e-02  6.95e-05  9.99e-04  9.90e-01  
  9  +4.9384e-01  +6.3695e-01  1.43e-01  1.27e-04  1.85e-02  7.27e-05  4.19e-04  7.69e-01  
 10  +4.9437e-01  +6.4006e-01  1.46e-01  1.25e-04  1.83e-02  6.73e-05  4.11e-04  1.33e-01  
 11  +4.9373e-01  +6.3514e-01  1.41e-01  1.08e-04  1.58e-02  5.74e-05  3.53e-04  3.20e-01  
 12  +4.9100e-01  +6.1908e-01  1.28e-01  8.16e-05  1.19e-02  5.37e-05  2.67e-04  3.28e-01  
 13  +4.8900e-01  +6.0494e-01  1.16e-01  7.08e-05  1.03e-02  3.32e-05  2.33e-04  3.98e-01  
 14  +4.8676e-01  +5.9361e-01  1.07e-01  6.01e-05  8.77e-03  2.93e-05  1.98e-04  2.25e-01  
 15  +4.8532e-01  +5.8548e-01  1.00e-01  5.63e-05  8.21e-03  1.94e-05  1.88e-04  3.26e-01  
 16  +4.8012e-01  +5.6193e-01  8.18e-02  4.10e-05  5.98e-03  1.58e-05  1.39e-04  2.92e-01  
 17  +4.6833e-01  +5.0783e-01  3.95e-02  1.73e-05  2.52e-03  3.92e-06  6.20e-05  8.11e-01  
 18  +4.6596e-01  +4.9798e-01  3.20e-02  1.33e-05  1.94e-03  3.24e-06  4.78e-05  4.25e-01  
 19  +4.6323e-01  +4.8613e-01  2.29e-02  9.17e-06  1.34e-03  2.38e-06  3.37e-05  9.90e-01  
 20  +4.5973e-01  +4.7287e-01  1.31e-02  5.07e-06  7.38e-04  1.42e-06  1.89e-05  6.61e-01  
 21  +4.5874e-01  +4.6910e-01  1.04e-02  3.97e-06  5.78e-04  1.13e-06  1.49e-05  2.42e-01  
 22  +4.5752e-01  +4.6415e-01  6.63e-03  2.53e-06  3.69e-04  7.50e-07  9.60e-06  8.38e-01  
 23  +4.5544e-01  +4.5660e-01  1.16e-03  4.39e-07  6.40e-05  1.28e-07  1.70e-06  8.99e-01  
 24  +4.5510e-01  +4.5538e-01  2.73e-04  1.04e-07  1.51e-05  3.03e-08  4.03e-07  7.90e-01  
 25  +4.5503e-01  +4.5512e-01  8.98e-05  3.41e-08  4.96e-06  9.92e-09  1.33e-07  7.45e-01  
 26  +4.5500e-01  +4.5500e-01  9.42e-07  3.57e-10  5.20e-08  1.04e-10  1.39e-09  9.90e-01  
 27  +4.5500e-01  +4.5500e-01  9.42e-09  3.57e-12  5.20e-10  1.04e-12  1.39e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.3028ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:24 PM: Optimal value: 4.550e-01
(CVXPY) Aug 30 12:09:24 PM: Compilation took 1.561e-02 seconds
(CVXPY) Aug 30 12:09:24 PM: Solver (including time spent in interface) took 4.688e-02 seconds
Iteration: 6, Objective: 0.4550
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:24 PM: Your problem has 2565 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2565
  constraints   = 5065
  nnz(P)        = 0
  nnz(A)        = 30943
  cones (total) = 1
    : Nonnegative = 1,  numel = 5065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.9267e-01  +5.1516e+02  5.15e+02  3.85e-01  4.35e+01  3.92e-03  5.27e-01  6.26e-01  
  2  +5.4114e-01  +6.7582e+01  6.70e+01  1.46e-01  2.06e+01  1.16e-02  2.43e-01  8.32e-01  
  3  +5.0986e-01  +1.6660e+01  1.62e+01  1.03e-01  1.42e+01  2.87e-05  2.37e-01  1.38e-01  
  4  +5.0051e-01  +1.4651e+00  9.65e-01  9.32e-03  1.33e+00  7.39e-06  1.54e-01  6.80e-01  
  5  +5.0013e-01  +8.1439e-01  3.14e-01  3.01e-03  4.34e-01  3.39e-06  7.57e-02  5.56e-01  
  6  +5.0007e-01  +7.5443e-01  2.54e-01  2.42e-03  3.49e-01  3.81e-06  3.89e-02  5.93e-01  
  7  +4.9979e-01  +7.3437e-01  2.35e-01  1.71e-03  2.48e-01  1.12e-05  8.85e-03  8.28e-01  
  8  +4.9632e-01  +6.8582e-01  1.90e-01  2.20e-04  3.22e-02  9.51e-05  7.34e-04  9.34e-01  
  9  +4.9568e-01  +6.6230e-01  1.67e-01  1.72e-04  2.52e-02  5.62e-05  5.69e-04  5.21e-01  
 10  +4.9381e-01  +6.4614e-01  1.52e-01  1.26e-04  1.84e-02  5.44e-05  4.16e-04  3.71e-01  
 11  +4.9344e-01  +6.3639e-01  1.43e-01  1.09e-04  1.59e-02  3.40e-05  3.57e-04  4.73e-01  
 12  +4.9068e-01  +6.1854e-01  1.28e-01  8.33e-05  1.22e-02  2.96e-05  2.74e-04  3.54e-01  
 13  +4.8747e-01  +5.9338e-01  1.06e-01  6.17e-05  9.01e-03  7.27e-06  2.04e-04  8.70e-01  
 14  +4.8688e-01  +5.9123e-01  1.04e-01  6.11e-05  8.92e-03  7.07e-06  2.03e-04  5.63e-02  
 15  +4.8044e-01  +5.6231e-01  8.19e-02  4.06e-05  5.93e-03  5.96e-06  1.38e-04  4.03e-01  
 16  +4.7117e-01  +5.1986e-01  4.87e-02  2.19e-05  3.19e-03  3.53e-06  7.76e-05  7.48e-01  
 17  +4.6241e-01  +4.8319e-01  2.08e-02  8.46e-06  1.23e-03  1.63e-06  3.11e-05  7.34e-01  
 18  +4.6024e-01  +4.7457e-01  1.43e-02  5.63e-06  8.21e-04  1.34e-06  2.10e-05  6.62e-01  
 19  +4.5854e-01  +4.6811e-01  9.57e-03  3.70e-06  5.39e-04  9.44e-07  1.39e-05  5.24e-01  
 20  +4.5804e-01  +4.6614e-01  8.10e-03  3.12e-06  4.54e-04  8.33e-07  1.18e-05  4.21e-01  
 21  +4.5559e-01  +4.5715e-01  1.55e-03  5.91e-07  8.62e-05  1.65e-07  2.29e-06  9.49e-01  
 22  +4.5508e-01  +4.5529e-01  2.09e-04  7.94e-08  1.16e-05  2.22e-08  3.09e-07  8.66e-01  
 23  +4.5500e-01  +4.5501e-01  6.40e-06  2.43e-09  3.54e-07  6.82e-10  9.45e-09  9.75e-01  
 24  +4.5500e-01  +4.5500e-01  6.41e-08  2.43e-11  3.54e-09  6.83e-12  9.46e-11  9.90e-01  
 25  +4.5500e-01  +4.5500e-01  6.41e-10  2.43e-13  3.54e-11  6.85e-14  9.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 46.9867ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:24 PM: Optimal value: 4.550e-01
(CVXPY) Aug 30 12:09:24 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:24 PM: Solver (including time spent in interface) took 4.730e-02 seconds
Iteration: 7, Objective: 0.4550
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:24 PM: Your problem has 2568 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2568
  constraints   = 5068
  nnz(P)        = 0
  nnz(A)        = 31170
  cones (total) = 1
    : Nonnegative = 1,  numel = 5068

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.9262e-01  +5.1520e+02  5.15e+02  3.85e-01  4.35e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4113e-01  +6.7574e+01  6.70e+01  1.46e-01  2.06e+01  1.16e-02  2.43e-01  8.32e-01  
  3  +5.0986e-01  +1.6661e+01  1.62e+01  1.03e-01  1.42e+01  2.88e-05  2.37e-01  1.38e-01  
  4  +5.0052e-01  +1.4731e+00  9.73e-01  9.40e-03  1.34e+00  7.40e-06  1.54e-01  6.76e-01  
  5  +5.0011e-01  +7.8038e-01  2.80e-01  2.68e-03  3.87e-01  3.18e-06  6.93e-02  6.03e-01  
  6  +5.0008e-01  +7.7529e-01  2.75e-01  2.62e-03  3.78e-01  3.98e-06  4.21e-02  5.27e-01  
  7  +4.9980e-01  +7.2706e-01  2.27e-01  1.72e-03  2.49e-01  1.06e-05  9.28e-03  8.21e-01  
  8  +4.9647e-01  +6.8105e-01  1.85e-01  2.26e-04  3.30e-02  9.17e-05  7.51e-04  9.45e-01  
  9  +4.9529e-01  +6.5840e-01  1.63e-01  1.71e-04  2.50e-02  6.45e-05  5.67e-04  4.74e-01  
 10  +4.9550e-01  +6.5043e-01  1.55e-01  1.38e-04  2.01e-02  3.58e-05  4.49e-04  6.34e-01  
 11  +4.9358e-01  +6.3188e-01  1.38e-01  1.02e-04  1.49e-02  2.30e-05  3.32e-04  6.18e-01  
 12  +4.9124e-01  +6.1814e-01  1.27e-01  8.21e-05  1.20e-02  2.06e-05  2.69e-04  3.10e-01  
 13  +4.8692e-01  +5.9166e-01  1.05e-01  5.90e-05  8.62e-03  1.04e-05  1.95e-04  7.08e-01  
 14  +4.8628e-01  +5.8914e-01  1.03e-01  5.84e-05  8.53e-03  9.90e-06  1.94e-04  5.87e-02  
 15  +4.8016e-01  +5.6154e-01  8.14e-02  4.01e-05  5.85e-03  7.98e-06  1.36e-04  3.68e-01  
 16  +4.7749e-01  +5.4884e-01  7.14e-02  3.42e-05  5.00e-03  6.50e-06  1.18e-04  3.47e-01  
 17  +4.6733e-01  +5.0490e-01  3.76e-02  1.61e-05  2.35e-03  3.18e-06  5.83e-05  5.76e-01  
 18  +4.5929e-01  +4.7152e-01  1.22e-02  4.91e-06  7.16e-04  1.03e-06  1.86e-05  8.16e-01  
 19  +4.5844e-01  +4.6815e-01  9.71e-03  3.84e-06  5.60e-04  8.50e-07  1.46e-05  2.91e-01  
 20  +4.5768e-01  +4.6524e-01  7.56e-03  2.95e-06  4.30e-04  6.83e-07  1.13e-05  3.35e-01  
 21  +4.5592e-01  +4.5833e-01  2.41e-03  9.29e-07  1.35e-04  2.61e-07  3.61e-06  9.90e-01  
 22  +4.5503e-01  +4.5510e-01  7.28e-05  2.80e-08  4.09e-06  7.70e-09  1.10e-07  9.86e-01  
 23  +4.5500e-01  +4.5500e-01  7.30e-07  2.81e-10  4.10e-08  7.72e-11  1.10e-09  9.90e-01  
 24  +4.5500e-01  +4.5500e-01  7.30e-09  2.81e-12  4.10e-10  7.73e-13  1.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.1632ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:24 PM: Optimal value: 4.550e-01
(CVXPY) Aug 30 12:09:24 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:24 PM: Solver (including time spent in interface) took 4.766e-02 seconds
Iteration: 8, Objective: 0.4550
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:24 PM: Your problem has 2571 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:24 PM: Finished problem compilation (took 1.692e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2571
  constraints   = 5071
  nnz(P)        = 0
  nnz(A)        = 31395
  cones (total) = 1
    : Nonnegative = 1,  numel = 5071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.9260e-01  +5.1518e+02  5.15e+02  3.85e-01  4.34e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4112e-01  +6.7565e+01  6.70e+01  1.46e-01  2.06e+01  1.16e-02  2.43e-01  8.32e-01  
  3  +5.0986e-01  +1.6659e+01  1.61e+01  1.03e-01  1.42e+01  2.88e-05  2.37e-01  1.38e-01  
  4  +5.0052e-01  +1.4745e+00  9.74e-01  9.42e-03  1.34e+00  7.41e-06  1.54e-01  6.76e-01  
  5  +5.0012e-01  +7.9590e-01  2.96e-01  2.83e-03  4.09e-01  3.28e-06  7.21e-02  5.83e-01  
  6  +5.0008e-01  +7.7634e-01  2.76e-01  2.62e-03  3.79e-01  3.99e-06  4.15e-02  5.61e-01  
  7  +4.9979e-01  +7.2208e-01  2.22e-01  1.67e-03  2.41e-01  1.08e-05  8.86e-03  8.16e-01  
  8  +4.9617e-01  +6.7664e-01  1.80e-01  2.07e-04  3.03e-02  9.85e-05  6.87e-04  9.44e-01  
  9  +4.9551e-01  +6.5832e-01  1.63e-01  1.69e-04  2.47e-02  6.00e-05  5.57e-04  4.80e-01  
 10  +4.9436e-01  +6.4542e-01  1.51e-01  1.28e-04  1.87e-02  5.03e-05  4.21e-04  4.45e-01  
 11  +4.9335e-01  +6.3603e-01  1.43e-01  1.10e-04  1.60e-02  4.01e-05  3.60e-04  3.42e-01  
 12  +4.9083e-01  +6.1975e-01  1.29e-01  8.47e-05  1.24e-02  3.49e-05  2.79e-04  3.52e-01  
 13  +4.8663e-01  +5.9040e-01  1.04e-01  5.88e-05  8.59e-03  1.10e-05  1.95e-04  8.02e-01  
 14  +4.8605e-01  +5.8812e-01  1.02e-01  5.82e-05  8.50e-03  1.05e-05  1.94e-04  5.40e-02  
 15  +4.8109e-01  +5.6591e-01  8.48e-02  4.29e-05  6.26e-03  8.88e-06  1.45e-04  2.97e-01  
 16  +4.7543e-01  +5.3986e-01  6.44e-02  3.05e-05  4.45e-03  5.84e-06  1.06e-04  5.17e-01  
 17  +4.6459e-01  +4.9340e-01  2.88e-02  1.21e-05  1.76e-03  2.40e-06  4.43e-05  6.70e-01  
 18  +4.5876e-01  +4.6954e-01  1.08e-02  4.33e-06  6.31e-04  8.93e-07  1.64e-05  6.83e-01  
 19  +4.5792e-01  +4.6627e-01  8.34e-03  3.28e-06  4.78e-04  7.22e-07  1.25e-05  3.28e-01  
 20  +4.5736e-01  +4.6392e-01  6.56e-03  2.57e-06  3.75e-04  6.15e-07  9.84e-06  4.96e-01  
 21  +4.5597e-01  +4.5864e-01  2.67e-03  1.03e-06  1.51e-04  2.56e-07  4.01e-06  6.40e-01  
 22  +4.5588e-01  +4.5827e-01  2.40e-03  9.26e-07  1.35e-04  2.35e-07  3.59e-06  2.73e-01  
 23  +4.5502e-01  +4.5509e-01  6.52e-05  2.51e-08  3.66e-06  6.36e-09  9.85e-08  9.77e-01  
 24  +4.5500e-01  +4.5500e-01  6.57e-07  2.53e-10  3.69e-08  6.40e-11  9.92e-10  9.90e-01  
 25  +4.5500e-01  +4.5500e-01  6.57e-09  2.53e-12  3.69e-10  6.42e-13  9.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.7169ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:25 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:25 PM: Optimal value: 4.550e-01
(CVXPY) Aug 30 12:09:25 PM: Compilation took 1.692e-02 seconds
(CVXPY) Aug 30 12:09:25 PM: Solver (including time spent in interface) took 4.639e-02 seconds
FULL MODEL:
  Accruacy: 0.5324
  Our objective: 0.06480000000000002

IF 
    (x2 = 1 AND x5 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.010399999999999965)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.016400000000000022)
 OR (x2 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.004000000000000014)
 OR (x0 = 1 AND x1 = 1 AND x5 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.003999999999999971)
 OR (x1 = 1 AND x5 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.002800000000000035)
 OR (x1 = 1 AND x2 = 1 AND x5 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.0027999999999999484)
 OR (x1 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.005599999999999994)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.005999999999999997)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0 AND x5 = 0) <-- (term's our objective: 0.003600000000000037)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.00200000000000004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.001599999999999947)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x5 = 0) <-- (term's our objective: 0.001999999999999995)
 OR (x0 = 1 AND x4 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0035999999999999487)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.016400000000000022
    Its accruacy: 0.5082
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.016400000000000022
  Highest accruacy: 0.5082
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

