Command:
python test_script.py -s smallest_subclass -d 7 -n 50000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.00916
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 7.

Computed total variation: 0.0468
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:13 PM: Your problem has 25015 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:13 PM: Finished problem compilation (took 9.375e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25015
  constraints   = 50015
  nnz(P)        = 0
  nnz(A)        = 250015
  cones (total) = 1
    : Nonnegative = 1,  numel = 50015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.36e+02  1.00e+00  1.00e+00   ------   
  1  +5.8817e-01  +5.2537e+03  5.25e+03  4.08e-01  1.48e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3830e-01  +6.5389e+02  6.53e+02  1.62e-01  7.52e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6881e+02  1.68e+02  1.43e-01  6.66e+01  3.48e-05  2.47e-01  1.52e-01  
  4  +5.0105e-01  +1.3668e+01  1.32e+01  3.74e-02  1.70e+01  4.18e-06  1.95e-01  4.45e-01  
  5  +4.9999e-01  +9.9779e-01  4.98e-01  1.49e-03  7.04e-01  2.45e-05  1.87e-01  3.44e-01  
  6  +5.0000e-01  +5.3627e-01  3.63e-02  1.08e-04  5.12e-02  1.54e-06  1.42e-02  9.25e-01  
  7  +5.0000e-01  +5.2067e-01  2.07e-02  6.16e-05  2.92e-02  1.35e-06  4.89e-03  7.34e-01  
  8  +4.9998e-01  +5.2205e-01  2.21e-02  5.78e-05  2.73e-02  1.19e-05  4.42e-04  9.57e-01  
  9  +4.9895e-01  +5.1954e-01  2.06e-02  2.53e-06  1.20e-03  5.64e-04  8.20e-06  9.81e-01  
 10  +4.9732e-01  +5.1268e-01  1.54e-02  8.27e-07  3.92e-04  9.50e-04  2.69e-06  6.93e-01  
 11  +4.9622e-01  +5.0356e-01  7.33e-03  3.62e-07  1.72e-04  2.60e-04  1.25e-06  6.47e-01  
 12  +4.9521e-01  +4.9839e-01  3.18e-03  1.37e-07  6.52e-05  7.64e-05  5.12e-07  7.01e-01  
 13  +4.9444e-01  +4.9493e-01  4.95e-04  1.99e-08  9.46e-06  7.84e-07  7.93e-08  9.79e-01  
 14  +4.9427e-01  +4.9428e-01  1.54e-05  6.14e-10  2.91e-07  7.82e-09  2.48e-09  9.90e-01  
 15  +4.9426e-01  +4.9426e-01  1.54e-07  6.14e-12  2.91e-09  7.82e-11  2.48e-11  9.90e-01  
 16  +4.9426e-01  +4.9426e-01  1.55e-09  6.21e-14  2.94e-11  1.21e-12  3.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 277.6017ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:14 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:14 PM: Optimal value: 4.943e-01
(CVXPY) Aug 30 12:15:14 PM: Compilation took 9.375e-02 seconds
(CVXPY) Aug 30 12:15:14 PM: Solver (including time spent in interface) took 2.969e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4943
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:14 PM: Your problem has 25025 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:14 PM: Finished problem compilation (took 7.823e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25025
  constraints   = 50025
  nnz(P)        = 0
  nnz(A)        = 273580
  cones (total) = 1
    : Nonnegative = 1,  numel = 50025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.39e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2539e+03  5.25e+03  4.08e-01  1.50e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3829e-01  +6.5376e+02  6.53e+02  1.62e-01  7.60e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6875e+02  1.68e+02  1.43e-01  6.73e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3655e+01  1.32e+01  3.74e-02  1.72e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0001e-01  +1.1347e+00  6.35e-01  1.90e-03  9.08e-01  2.46e-05  1.88e-01  2.77e-01  
  6  +5.0000e-01  +5.7303e-01  7.30e-02  2.18e-04  1.04e-01  1.65e-06  2.60e-02  8.91e-01  
  7  +5.0000e-01  +5.7544e-01  7.54e-02  2.25e-04  1.08e-01  1.59e-06  2.56e-02  1.18e-01  
  8  +5.0000e-01  +5.7490e-01  7.49e-02  2.23e-04  1.07e-01  1.21e-06  2.07e-02  5.08e-01  
  9  +5.0000e-01  +5.7645e-01  7.64e-02  2.28e-04  1.09e-01  9.64e-07  2.04e-02  2.20e-01  
 10  +5.0000e-01  +5.5983e-01  5.98e-02  1.78e-04  8.53e-02  6.69e-07  1.26e-02  5.81e-01  
 11  +5.0000e-01  +5.2855e-01  2.86e-02  8.47e-05  4.05e-02  8.52e-07  2.46e-03  8.70e-01  
 12  +4.9995e-01  +5.3510e-01  3.52e-02  2.31e-05  1.11e-02  2.95e-05  7.80e-05  9.90e-01  
 13  +4.9940e-01  +5.3296e-01  3.36e-02  2.30e-06  1.10e-03  2.98e-04  7.19e-06  9.08e-01  
 14  +4.9889e-01  +5.2782e-01  2.89e-02  2.14e-06  1.02e-03  2.05e-04  6.73e-06  1.43e-01  
 15  +4.9816e-01  +5.1968e-01  2.15e-02  1.70e-06  8.16e-04  5.72e-05  5.40e-06  5.04e-01  
 16  +4.9826e-01  +5.1812e-01  1.99e-02  1.50e-06  7.21e-04  6.01e-07  4.75e-06  8.32e-01  
 17  +4.9796e-01  +5.1637e-01  1.84e-02  1.29e-06  6.21e-04  5.35e-07  4.09e-06  2.08e-01  
 18  +4.9773e-01  +5.1532e-01  1.76e-02  1.28e-06  6.15e-04  4.39e-07  4.08e-06  1.00e-01  
 19  +4.9760e-01  +5.1459e-01  1.70e-02  1.28e-06  6.13e-04  3.79e-07  4.07e-06  7.94e-02  
 20  +4.9689e-01  +5.1040e-01  1.35e-02  9.49e-07  4.55e-04  2.59e-07  3.04e-06  3.66e-01  
 21  +4.9575e-01  +5.0413e-01  8.37e-03  4.62e-07  2.21e-04  9.63e-08  1.45e-06  8.89e-01  
 22  +4.9527e-01  +5.0237e-01  7.10e-03  2.86e-07  1.37e-04  1.07e-07  8.50e-07  4.75e-01  
 23  +4.9521e-01  +5.0218e-01  6.97e-03  2.86e-07  1.37e-04  1.03e-07  8.50e-07  1.18e-02  
 24  +4.9520e-01  +5.0227e-01  7.08e-03  2.78e-07  1.33e-04  1.06e-07  8.23e-07  1.01e-01  
 25  +4.9514e-01  +5.0210e-01  6.96e-03  2.78e-07  1.33e-04  1.02e-07  8.23e-07  7.34e-03  
 26  +4.9423e-01  +4.9957e-01  5.34e-03  2.09e-07  1.00e-04  6.19e-08  6.34e-07  5.39e-01  
 27  +4.9271e-01  +4.9440e-01  1.69e-03  5.25e-08  2.52e-05  2.56e-08  1.58e-07  7.67e-01  
 28  +4.9251e-01  +4.9366e-01  1.15e-03  3.54e-08  1.70e-05  1.79e-08  1.07e-07  4.59e-01  
 29  +4.9251e-01  +4.9366e-01  1.15e-03  3.54e-08  1.70e-05  1.79e-08  1.07e-07  2.53e-03  
 30  +4.9250e-01  +4.9360e-01  1.09e-03  3.36e-08  1.61e-05  1.75e-08  1.01e-07  3.37e-01  
 31  +4.9246e-01  +4.9341e-01  9.50e-04  2.91e-08  1.39e-05  1.57e-08  8.78e-08  4.83e-01  
 32  +4.9244e-01  +4.9336e-01  9.18e-04  2.81e-08  1.35e-05  1.52e-08  8.49e-08  6.94e-02  
 33  +4.9244e-01  +4.9336e-01  9.19e-04  2.81e-08  1.35e-05  1.52e-08  8.49e-08  1.02e-02  
 34  +4.9213e-01  +4.9236e-01  2.29e-04  6.95e-09  3.33e-06  3.96e-09  2.11e-08  9.90e-01  
 35  +4.9202e-01  +4.9202e-01  3.32e-06  1.00e-10  4.82e-08  5.73e-11  3.06e-10  9.90e-01  
 36  +4.9202e-01  +4.9202e-01  3.32e-08  1.01e-12  4.82e-10  5.74e-13  3.06e-12  9.90e-01  
 37  +4.9202e-01  +4.9202e-01  3.33e-10  1.01e-14  4.84e-12  7.07e-15  3.75e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 770.0902ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:15 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:15 PM: Optimal value: 4.920e-01
(CVXPY) Aug 30 12:15:15 PM: Compilation took 7.823e-02 seconds
(CVXPY) Aug 30 12:15:15 PM: Solver (including time spent in interface) took 7.976e-01 seconds
Iteration: 2, Objective: 0.4920
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:15 PM: Your problem has 25035 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:15 PM: Finished problem compilation (took 1.093e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25035
  constraints   = 50035
  nnz(P)        = 0
  nnz(A)        = 292838
  cones (total) = 1
    : Nonnegative = 1,  numel = 50035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.41e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2539e+03  5.25e+03  4.08e-01  1.51e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3828e-01  +6.5371e+02  6.53e+02  1.62e-01  7.66e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6874e+02  1.68e+02  1.43e-01  6.78e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3655e+01  1.32e+01  3.74e-02  1.73e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0001e-01  +1.1542e+00  6.54e-01  1.96e-03  9.43e-01  2.46e-05  1.88e-01  2.70e-01  
  6  +5.0001e-01  +7.3608e-01  2.36e-01  7.05e-04  3.40e-01  7.49e-06  7.68e-02  6.70e-01  
  7  +5.0000e-01  +6.7692e-01  1.77e-01  5.28e-04  2.55e-01  5.39e-06  5.71e-02  3.27e-01  
  8  +5.0001e-01  +6.6512e-01  1.65e-01  4.93e-04  2.38e-01  4.24e-06  4.99e-02  3.36e-01  
  9  +5.0001e-01  +6.3144e-01  1.31e-01  3.92e-04  1.89e-01  2.77e-06  3.67e-02  4.82e-01  
 10  +5.0001e-01  +6.0211e-01  1.02e-01  3.04e-04  1.47e-01  9.47e-07  2.30e-02  8.71e-01  
 11  +5.0001e-01  +5.9200e-01  9.20e-02  2.74e-04  1.32e-01  9.98e-08  1.59e-02  9.90e-01  
 12  +5.0000e-01  +5.3558e-01  3.56e-02  1.05e-04  5.06e-02  1.34e-07  2.46e-03  8.66e-01  
 13  +4.9998e-01  +5.4235e-01  4.24e-02  1.15e-05  5.54e-03  9.97e-06  3.65e-05  9.88e-01  
 14  +4.9990e-01  +5.4176e-01  4.19e-02  2.43e-06  1.17e-03  4.71e-05  7.55e-06  8.00e-01  
 15  +4.9959e-01  +5.3960e-01  4.00e-02  2.41e-06  1.17e-03  4.20e-05  7.51e-06  2.78e-02  
 16  +4.9936e-01  +5.3804e-01  3.87e-02  2.33e-06  1.13e-03  3.89e-05  7.27e-06  6.33e-02  
 17  +4.9867e-01  +5.3248e-01  3.38e-02  2.23e-06  1.08e-03  1.88e-05  6.97e-06  3.17e-01  
 18  +4.9862e-01  +5.3212e-01  3.35e-02  2.23e-06  1.08e-03  1.82e-05  6.97e-06  1.06e-02  
 19  +4.9846e-01  +5.3075e-01  3.23e-02  2.09e-06  1.01e-03  1.26e-05  6.53e-06  3.00e-01  
 20  +4.9814e-01  +5.2846e-01  3.03e-02  2.01e-06  9.73e-04  6.68e-06  6.35e-06  3.52e-01  
 21  +4.9721e-01  +5.2403e-01  2.68e-02  1.54e-06  7.45e-04  3.86e-06  4.87e-06  5.26e-01  
 22  +4.9714e-01  +5.2378e-01  2.66e-02  1.54e-06  7.45e-04  3.72e-06  4.87e-06  2.12e-02  
 23  +4.9650e-01  +5.2124e-01  2.47e-02  1.31e-06  6.33e-04  3.03e-06  4.15e-06  2.77e-01  
 24  +4.9624e-01  +5.2028e-01  2.40e-02  1.29e-06  6.24e-04  2.48e-06  4.10e-06  1.28e-01  
 25  +4.9369e-01  +5.1039e-01  1.67e-02  7.40e-07  3.58e-04  1.68e-06  2.38e-06  4.85e-01  
 26  +4.9117e-01  +5.0112e-01  9.95e-03  3.80e-07  1.84e-04  9.14e-07  1.23e-06  5.50e-01  
 27  +4.9084e-01  +4.9982e-01  8.98e-03  3.56e-07  1.72e-04  7.17e-07  1.23e-06  2.30e-02  
 28  +4.9076e-01  +4.9934e-01  8.59e-03  3.32e-07  1.60e-04  4.74e-07  1.12e-06  4.36e-01  
 29  +4.8919e-01  +4.9380e-01  4.62e-03  1.67e-07  8.07e-05  2.25e-07  5.55e-07  6.08e-01  
 30  +4.8738e-01  +4.8808e-01  6.97e-04  2.35e-08  1.14e-05  1.27e-08  7.90e-08  9.45e-01  
 31  +4.8712e-01  +4.8713e-01  1.05e-05  3.53e-10  1.71e-07  1.79e-10  1.19e-09  9.89e-01  
 32  +4.8712e-01  +4.8712e-01  1.05e-07  3.53e-12  1.71e-09  1.80e-12  1.19e-11  9.90e-01  
 33  +4.8712e-01  +4.8712e-01  1.06e-09  3.54e-14  1.71e-11  2.06e-14  1.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 677.2421ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:16 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:16 PM: Optimal value: 4.871e-01
(CVXPY) Aug 30 12:15:16 PM: Compilation took 1.093e-01 seconds
(CVXPY) Aug 30 12:15:16 PM: Solver (including time spent in interface) took 7.037e-01 seconds
Iteration: 3, Objective: 0.4871
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:16 PM: Your problem has 25045 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:16 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:16 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:16 PM: Finished problem compilation (took 1.096e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25045
  constraints   = 50045
  nnz(P)        = 0
  nnz(A)        = 308845
  cones (total) = 1
    : Nonnegative = 1,  numel = 50045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.42e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2539e+03  5.25e+03  4.08e-01  1.52e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3828e-01  +6.5367e+02  6.53e+02  1.62e-01  7.70e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1023e-01  +1.6872e+02  1.68e+02  1.43e-01  6.82e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3653e+01  1.32e+01  3.74e-02  1.74e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1738e+00  6.74e-01  2.02e-03  9.77e-01  2.46e-05  1.88e-01  2.64e-01  
  6  +5.0000e-01  +7.2238e-01  2.22e-01  6.64e-04  3.22e-01  7.03e-06  7.26e-02  6.58e-01  
  7  +5.0000e-01  +6.8244e-01  1.82e-01  5.45e-04  2.64e-01  5.48e-06  5.78e-02  2.92e-01  
  8  +5.0000e-01  +6.5588e-01  1.56e-01  4.65e-04  2.26e-01  4.12e-06  4.59e-02  3.80e-01  
  9  +5.0001e-01  +6.4805e-01  1.48e-01  4.42e-04  2.14e-01  2.94e-06  3.88e-02  4.59e-01  
 10  +5.0001e-01  +6.2919e-01  1.29e-01  3.85e-04  1.87e-01  2.29e-06  3.07e-02  3.64e-01  
 11  +5.0000e-01  +5.9381e-01  9.38e-02  2.80e-04  1.36e-01  1.58e-06  1.74e-02  5.99e-01  
 12  +5.0000e-01  +5.6057e-01  6.06e-02  1.80e-04  8.70e-02  1.39e-06  4.87e-03  9.57e-01  
 13  +4.9999e-01  +5.5354e-01  5.35e-02  1.10e-04  5.34e-02  8.56e-06  5.46e-04  9.53e-01  
 14  +4.9948e-01  +5.5159e-01  5.21e-02  5.03e-06  2.45e-03  2.78e-04  1.60e-05  9.71e-01  
 15  +4.9892e-01  +5.4577e-01  4.68e-02  3.53e-06  1.72e-03  2.88e-04  1.12e-05  3.83e-01  
 16  +4.9902e-01  +5.4595e-01  4.69e-02  3.53e-06  1.72e-03  2.76e-04  1.12e-05  4.21e-02  
 17  +4.9885e-01  +5.4181e-01  4.30e-02  3.43e-06  1.67e-03  1.65e-04  1.08e-05  2.73e-01  
 18  +4.9860e-01  +5.3964e-01  4.10e-02  3.12e-06  1.52e-03  1.48e-04  9.78e-06  1.73e-01  
 19  +4.9845e-01  +5.3732e-01  3.89e-02  2.84e-06  1.38e-03  1.03e-04  8.85e-06  3.20e-01  
 20  +4.9835e-01  +5.3633e-01  3.80e-02  2.80e-06  1.36e-03  8.11e-05  8.74e-06  1.66e-01  
 21  +4.9774e-01  +5.3252e-01  3.48e-02  2.23e-06  1.09e-03  6.36e-05  6.94e-06  3.77e-01  
 22  +4.9753e-01  +5.3177e-01  3.42e-02  2.21e-06  1.08e-03  5.91e-05  6.94e-06  3.50e-02  
 23  +4.9746e-01  +5.3129e-01  3.38e-02  2.16e-06  1.05e-03  5.17e-05  6.76e-06  1.23e-01  
 24  +4.9613e-01  +5.2516e-01  2.90e-02  1.51e-06  7.32e-04  4.12e-05  4.71e-06  4.39e-01  
 25  +4.9604e-01  +5.2482e-01  2.88e-02  1.51e-06  7.32e-04  4.03e-05  4.71e-06  5.05e-03  
 26  +4.9559e-01  +5.2298e-01  2.74e-02  1.39e-06  6.74e-04  3.53e-05  4.35e-06  1.46e-01  
 27  +4.9532e-01  +5.2120e-01  2.59e-02  1.31e-06  6.39e-04  1.26e-05  4.14e-06  5.11e-01  
 28  +4.9396e-01  +5.1588e-01  2.19e-02  1.03e-06  4.98e-04  9.15e-06  3.25e-06  3.20e-01  
 29  +4.9338e-01  +5.1314e-01  1.98e-02  8.75e-07  4.25e-04  1.09e-06  2.78e-06  7.83e-01  
 30  +4.9039e-01  +5.0197e-01  1.16e-02  4.62e-07  2.25e-04  5.31e-07  1.50e-06  5.40e-01  
 31  +4.8766e-01  +4.9183e-01  4.17e-03  1.52e-07  7.39e-05  1.57e-07  5.05e-07  7.24e-01  
 32  +4.8766e-01  +4.9184e-01  4.18e-03  1.51e-07  7.36e-05  1.57e-07  5.03e-07  2.42e-02  
 33  +4.8762e-01  +4.9163e-01  4.00e-03  1.47e-07  7.15e-05  1.30e-07  4.99e-07  1.44e-01  
 34  +4.8757e-01  +4.9142e-01  3.85e-03  1.40e-07  6.81e-05  1.09e-07  4.72e-07  2.82e-01  
 35  +4.8714e-01  +4.8995e-01  2.80e-03  9.84e-08  4.78e-05  6.47e-08  3.31e-07  5.78e-01  
 36  +4.8633e-01  +4.8716e-01  8.28e-04  2.86e-08  1.39e-05  1.63e-08  9.82e-08  8.01e-01  
 37  +4.8617e-01  +4.8659e-01  4.27e-04  1.47e-08  7.15e-06  5.87e-09  5.06e-08  9.90e-01  
 38  +4.8598e-01  +4.8599e-01  4.95e-06  1.70e-10  8.28e-08  6.67e-11  5.90e-10  9.90e-01  
 39  +4.8598e-01  +4.8598e-01  4.95e-08  1.70e-12  8.28e-10  6.67e-13  5.90e-12  9.90e-01  
 40  +4.8598e-01  +4.8598e-01  4.97e-10  1.70e-14  8.31e-12  7.87e-15  6.91e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 859.8138ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:17 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:17 PM: Optimal value: 4.860e-01
(CVXPY) Aug 30 12:15:17 PM: Compilation took 1.096e-01 seconds
(CVXPY) Aug 30 12:15:17 PM: Solver (including time spent in interface) took 8.934e-01 seconds
Iteration: 4, Objective: 0.4860
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:17 PM: Your problem has 25055 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:17 PM: Finished problem compilation (took 1.254e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25055
  constraints   = 50055
  nnz(P)        = 0
  nnz(A)        = 319700
  cones (total) = 1
    : Nonnegative = 1,  numel = 50055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.43e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2540e+03  5.25e+03  4.08e-01  1.52e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3827e-01  +6.5360e+02  6.53e+02  1.62e-01  7.72e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6870e+02  1.68e+02  1.43e-01  6.83e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3652e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1930e+00  6.93e-01  2.08e-03  1.01e+00  2.46e-05  1.89e-01  2.57e-01  
  6  +5.0000e-01  +6.5479e-01  1.55e-01  4.62e-04  2.25e-01  4.29e-06  5.14e-02  7.72e-01  
  7  +5.0000e-01  +6.3618e-01  1.36e-01  4.06e-04  1.98e-01  3.52e-06  4.11e-02  3.39e-01  
  8  +5.0001e-01  +6.3506e-01  1.35e-01  4.03e-04  1.96e-01  2.10e-06  3.00e-02  7.56e-01  
  9  +5.0000e-01  +5.9004e-01  9.00e-02  2.68e-04  1.30e-01  1.73e-06  1.36e-02  6.52e-01  
 10  +5.0000e-01  +5.7520e-01  7.52e-02  2.20e-04  1.07e-01  3.17e-06  3.74e-03  8.60e-01  
 11  +4.9978e-01  +5.6180e-01  6.20e-02  2.14e-05  1.04e-02  1.22e-04  7.17e-05  9.85e-01  
 12  +4.9918e-01  +5.5751e-01  5.83e-02  6.23e-06  3.04e-03  3.76e-04  2.03e-05  7.51e-01  
 13  +4.9893e-01  +5.5267e-01  5.37e-02  4.98e-06  2.43e-03  3.10e-04  1.62e-05  3.91e-01  
 14  +4.9898e-01  +5.5200e-01  5.30e-02  4.90e-06  2.39e-03  2.74e-04  1.58e-05  1.18e-01  
 15  +4.9894e-01  +5.4864e-01  4.97e-02  4.46e-06  2.17e-03  1.58e-04  1.44e-05  4.31e-01  
 16  +4.9891e-01  +5.4829e-01  4.94e-02  4.42e-06  2.15e-03  1.49e-04  1.42e-05  5.62e-02  
 17  +4.9799e-01  +5.4306e-01  4.51e-02  3.07e-06  1.50e-03  1.60e-04  9.83e-06  3.83e-01  
 18  +4.9793e-01  +5.4256e-01  4.46e-02  3.03e-06  1.48e-03  1.46e-04  9.70e-06  8.12e-02  
 19  +4.9764e-01  +5.4075e-01  4.31e-02  2.80e-06  1.37e-03  1.20e-04  8.93e-06  2.24e-01  
 20  +4.9718e-01  +5.3646e-01  3.93e-02  2.49e-06  1.21e-03  1.24e-06  7.87e-06  8.50e-01  
 21  +4.9668e-01  +5.3439e-01  3.77e-02  2.20e-06  1.07e-03  1.16e-06  6.98e-06  1.93e-01  
 22  +4.9667e-01  +5.3436e-01  3.77e-02  2.20e-06  1.07e-03  1.16e-06  6.98e-06  1.45e-03  
 23  +4.9622e-01  +5.3305e-01  3.68e-02  2.16e-06  1.05e-03  9.92e-07  6.92e-06  1.17e-01  
 24  +4.9371e-01  +5.2214e-01  2.84e-02  1.39e-06  6.77e-04  1.57e-07  4.46e-06  9.90e-01  
 25  +4.9209e-01  +5.1574e-01  2.37e-02  1.09e-06  5.31e-04  1.51e-07  3.53e-06  4.07e-01  
 26  +4.8946e-01  +5.0571e-01  1.62e-02  6.84e-07  3.33e-04  1.08e-07  2.25e-06  4.19e-01  
 27  +4.8838e-01  +5.0117e-01  1.28e-02  4.94e-07  2.41e-04  1.40e-07  1.63e-06  9.90e-01  
 28  +4.8776e-01  +4.9890e-01  1.11e-02  4.25e-07  2.07e-04  1.23e-07  1.41e-06  2.18e-01  
 29  +4.8733e-01  +4.9721e-01  9.88e-03  3.69e-07  1.80e-04  1.22e-07  1.22e-06  9.90e-01  
 30  +4.8489e-01  +4.8848e-01  3.59e-03  1.31e-07  6.40e-05  4.33e-08  4.46e-07  7.21e-01  
 31  +4.8438e-01  +4.8665e-01  2.26e-03  8.21e-08  4.00e-05  2.84e-08  2.80e-07  6.89e-01  
 32  +4.8356e-01  +4.8375e-01  1.90e-04  6.86e-09  3.34e-06  2.27e-09  2.39e-08  9.39e-01  
 33  +4.8348e-01  +4.8349e-01  4.50e-06  1.61e-10  7.84e-08  4.62e-11  5.79e-10  9.85e-01  
 34  +4.8348e-01  +4.8348e-01  4.50e-08  1.61e-12  7.83e-10  4.62e-13  5.80e-12  9.90e-01  
 35  +4.8348e-01  +4.8348e-01  4.49e-10  1.60e-14  7.83e-12  4.62e-15  5.80e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 795.5439ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:18 PM: Optimal value: 4.835e-01
(CVXPY) Aug 30 12:15:18 PM: Compilation took 1.254e-01 seconds
(CVXPY) Aug 30 12:15:18 PM: Solver (including time spent in interface) took 8.281e-01 seconds
Iteration: 5, Objective: 0.4835
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:18 PM: Your problem has 25065 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:18 PM: Finished problem compilation (took 1.248e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25065
  constraints   = 50065
  nnz(P)        = 0
  nnz(A)        = 328930
  cones (total) = 1
    : Nonnegative = 1,  numel = 50065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.43e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2540e+03  5.25e+03  4.08e-01  1.52e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3827e-01  +6.5354e+02  6.53e+02  1.62e-01  7.73e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6869e+02  1.68e+02  1.43e-01  6.84e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3652e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1927e+00  6.93e-01  2.08e-03  1.01e+00  2.47e-05  1.89e-01  2.58e-01  
  6  +5.0001e-01  +6.4819e-01  1.48e-01  4.42e-04  2.15e-01  3.60e-06  4.84e-02  8.47e-01  
  7  +5.0000e-01  +6.1863e-01  1.19e-01  3.54e-04  1.72e-01  2.97e-06  3.53e-02  3.29e-01  
  8  +5.0000e-01  +6.1490e-01  1.15e-01  3.43e-04  1.67e-01  2.57e-06  2.71e-02  4.52e-01  
  9  +5.0000e-01  +5.9509e-01  9.51e-02  2.83e-04  1.38e-01  2.22e-06  1.36e-02  7.18e-01  
 10  +5.0000e-01  +5.7171e-01  7.17e-02  2.05e-04  9.99e-02  5.32e-06  2.56e-03  9.29e-01  
 11  +4.9962e-01  +5.6667e-01  6.70e-02  1.75e-05  8.53e-03  2.06e-04  5.75e-05  9.81e-01  
 12  +4.9874e-01  +5.6226e-01  6.35e-02  5.77e-06  2.82e-03  5.70e-04  1.86e-05  6.91e-01  
 13  +4.9898e-01  +5.5877e-01  5.98e-02  5.62e-06  2.74e-03  3.78e-04  1.80e-05  2.69e-01  
 14  +4.9866e-01  +5.5561e-01  5.69e-02  4.53e-06  2.21e-03  3.71e-04  1.45e-05  3.03e-01  
 15  +4.9841e-01  +5.5269e-01  5.43e-02  3.94e-06  1.92e-03  3.18e-04  1.26e-05  2.80e-01  
 16  +4.9832e-01  +5.5165e-01  5.33e-02  3.76e-06  1.84e-03  2.91e-04  1.20e-05  1.20e-01  
 17  +4.9783e-01  +5.4442e-01  4.66e-02  3.19e-06  1.56e-03  5.83e-05  1.02e-05  7.36e-01  
 18  +4.9556e-01  +5.3440e-01  3.88e-02  2.11e-06  1.03e-03  4.60e-05  6.84e-06  4.79e-01  
 19  +4.9354e-01  +5.2578e-01  3.22e-02  1.65e-06  8.03e-04  3.01e-05  5.41e-06  3.41e-01  
 20  +4.9338e-01  +5.2509e-01  3.17e-02  1.60e-06  7.82e-04  2.57e-05  5.26e-06  1.36e-01  
 21  +4.9294e-01  +5.2315e-01  3.02e-02  1.50e-06  7.33e-04  1.37e-05  4.96e-06  3.97e-01  
 22  +4.9128e-01  +5.1618e-01  2.49e-02  1.16e-06  5.67e-04  1.45e-07  3.86e-06  8.65e-01  
 23  +4.8944e-01  +5.0902e-01  1.96e-02  8.65e-07  4.22e-04  1.17e-07  2.90e-06  2.90e-01  
 24  +4.8862e-01  +5.0565e-01  1.70e-02  6.95e-07  3.39e-04  1.74e-07  2.33e-06  9.90e-01  
 25  +4.8638e-01  +4.9724e-01  1.09e-02  4.23e-07  2.07e-04  1.11e-07  1.44e-06  4.41e-01  
 26  +4.8583e-01  +4.9521e-01  9.38e-03  3.60e-07  1.75e-04  9.72e-08  1.23e-06  2.19e-01  
 27  +4.8570e-01  +4.9476e-01  9.06e-03  3.50e-07  1.71e-04  9.47e-08  1.21e-06  2.31e-01  
 28  +4.8393e-01  +4.8824e-01  4.31e-03  1.60e-07  7.83e-05  4.64e-08  5.64e-07  6.28e-01  
 29  +4.8372e-01  +4.8741e-01  3.69e-03  1.35e-07  6.57e-05  4.45e-08  4.72e-07  8.36e-01  
 30  +4.8249e-01  +4.8309e-01  6.01e-04  2.16e-08  1.05e-05  7.31e-09  7.73e-08  9.90e-01  
 31  +4.8226e-01  +4.8230e-01  4.35e-05  1.56e-09  7.59e-07  5.38e-10  5.61e-09  9.83e-01  
 32  +4.8224e-01  +4.8224e-01  4.42e-07  1.58e-11  7.71e-09  5.47e-12  5.70e-11  9.90e-01  
 33  +4.8224e-01  +4.8224e-01  4.42e-09  1.58e-13  7.71e-11  5.47e-14  5.70e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 728.4399ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:19 PM: Optimal value: 4.822e-01
(CVXPY) Aug 30 12:15:19 PM: Compilation took 1.248e-01 seconds
(CVXPY) Aug 30 12:15:19 PM: Solver (including time spent in interface) took 7.657e-01 seconds
Iteration: 6, Objective: 0.4822
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:19 PM: Your problem has 25075 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:19 PM: Finished problem compilation (took 1.406e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25075
  constraints   = 50075
  nnz(P)        = 0
  nnz(A)        = 335582
  cones (total) = 1
    : Nonnegative = 1,  numel = 50075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.43e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2540e+03  5.25e+03  4.08e-01  1.52e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5348e+02  6.53e+02  1.62e-01  7.73e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6866e+02  1.68e+02  1.43e-01  6.84e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3652e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1836e+00  6.84e-01  2.05e-03  9.96e-01  2.47e-05  1.88e-01  2.62e-01  
  6  +5.0001e-01  +7.0560e-01  2.06e-01  6.14e-04  2.99e-01  5.54e-06  6.49e-02  7.94e-01  
  7  +5.0000e-01  +6.5219e-01  1.52e-01  4.54e-04  2.21e-01  4.01e-06  4.49e-02  4.08e-01  
  8  +5.0000e-01  +6.3819e-01  1.38e-01  4.12e-04  2.01e-01  3.41e-06  3.52e-02  3.65e-01  
  9  +5.0001e-01  +6.3097e-01  1.31e-01  3.91e-04  1.90e-01  2.70e-06  2.57e-02  5.34e-01  
 10  +5.0000e-01  +5.8820e-01  8.82e-02  2.62e-04  1.28e-01  2.99e-06  8.57e-03  7.78e-01  
 11  +4.9998e-01  +5.8226e-01  8.23e-02  2.07e-04  1.01e-01  1.33e-05  1.44e-03  8.70e-01  
 12  +4.9897e-01  +5.7707e-01  7.81e-02  9.50e-06  4.64e-03  5.49e-04  3.16e-05  9.79e-01  
 13  +4.9850e-01  +5.6903e-01  7.05e-02  6.68e-06  3.26e-03  5.55e-04  2.21e-05  4.11e-01  
 14  +4.9862e-01  +5.6800e-01  6.94e-02  6.67e-06  3.26e-03  4.97e-04  2.20e-05  7.35e-02  
 15  +4.9812e-01  +5.6193e-01  6.38e-02  5.20e-06  2.54e-03  4.61e-04  1.71e-05  3.34e-01  
 16  +4.9807e-01  +5.5445e-01  5.64e-02  4.50e-06  2.20e-03  2.04e-04  1.46e-05  5.27e-01  
 17  +4.9756e-01  +5.5086e-01  5.33e-02  3.68e-06  1.80e-03  1.76e-04  1.19e-05  3.37e-01  
 18  +4.9716e-01  +5.4918e-01  5.20e-02  3.62e-06  1.77e-03  1.63e-04  1.19e-05  2.63e-02  
 19  +4.9635e-01  +5.4446e-01  4.81e-02  3.13e-06  1.53e-03  1.33e-04  1.03e-05  2.47e-01  
 20  +4.9480e-01  +5.3673e-01  4.19e-02  2.43e-06  1.19e-03  9.51e-05  8.05e-06  3.78e-01  
 21  +4.9409e-01  +5.3301e-01  3.89e-02  2.18e-06  1.06e-03  6.66e-05  7.24e-06  2.83e-01  
 22  +4.9404e-01  +5.3249e-01  3.84e-02  2.15e-06  1.05e-03  5.51e-05  7.16e-06  1.38e-01  
 23  +4.9109e-01  +5.1959e-01  2.85e-02  1.41e-06  6.87e-04  3.29e-05  4.76e-06  4.55e-01  
 24  +4.9042e-01  +5.1649e-01  2.61e-02  1.24e-06  6.03e-04  2.17e-05  4.19e-06  3.37e-01  
 25  +4.8939e-01  +5.1179e-01  2.24e-02  1.01e-06  4.94e-04  8.11e-06  3.45e-06  5.85e-01  
 26  +4.8566e-01  +4.9671e-01  1.10e-02  4.58e-07  2.24e-04  2.91e-06  1.60e-06  6.38e-01  
 27  +4.8409e-01  +4.9061e-01  6.52e-03  2.54e-07  1.24e-04  1.60e-06  8.94e-07  4.96e-01  
 28  +4.8407e-01  +4.9054e-01  6.47e-03  2.54e-07  1.24e-04  1.54e-06  8.94e-07  1.92e-02  
 29  +4.8284e-01  +4.8598e-01  3.14e-03  1.20e-07  5.85e-05  4.55e-07  4.29e-07  6.99e-01  
 30  +4.8188e-01  +4.8244e-01  5.55e-04  2.05e-08  1.00e-05  9.96e-09  7.53e-08  9.90e-01  
 31  +4.8166e-01  +4.8167e-01  8.05e-06  2.96e-10  1.45e-07  1.38e-10  1.10e-09  9.87e-01  
 32  +4.8166e-01  +4.8166e-01  8.05e-08  2.96e-12  1.45e-09  1.38e-12  1.10e-11  9.90e-01  
 33  +4.8166e-01  +4.8166e-01  8.10e-10  2.97e-14  1.45e-11  1.74e-14  1.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 784.1516ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:20 PM: Optimal value: 4.817e-01
(CVXPY) Aug 30 12:15:20 PM: Compilation took 1.406e-01 seconds
(CVXPY) Aug 30 12:15:20 PM: Solver (including time spent in interface) took 8.166e-01 seconds
Iteration: 7, Objective: 0.4817
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:20 PM: Your problem has 25085 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:20 PM: Finished problem compilation (took 1.409e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25085
  constraints   = 50085
  nnz(P)        = 0
  nnz(A)        = 340098
  cones (total) = 1
    : Nonnegative = 1,  numel = 50085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.43e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2540e+03  5.25e+03  4.08e-01  1.52e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5339e+02  6.53e+02  1.62e-01  7.73e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6864e+02  1.68e+02  1.43e-01  6.84e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3653e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1875e+00  6.88e-01  2.06e-03  1.00e+00  2.47e-05  1.88e-01  2.61e-01  
  6  +5.0001e-01  +6.6249e-01  1.62e-01  4.85e-04  2.36e-01  3.97e-06  5.20e-02  8.58e-01  
  7  +5.0001e-01  +6.4691e-01  1.47e-01  4.39e-04  2.14e-01  3.36e-06  4.12e-02  3.71e-01  
  8  +5.0001e-01  +6.3158e-01  1.32e-01  3.93e-04  1.91e-01  2.75e-06  2.81e-02  5.44e-01  
  9  +5.0001e-01  +6.4679e-01  1.47e-01  4.37e-04  2.13e-01  9.32e-07  1.85e-02  9.90e-01  
 10  +5.0000e-01  +5.9304e-01  9.30e-02  2.68e-04  1.31e-01  1.91e-06  3.74e-03  8.23e-01  
 11  +4.9989e-01  +5.8464e-01  8.48e-02  2.69e-05  1.31e-02  6.49e-05  9.11e-05  9.82e-01  
 12  +4.9924e-01  +5.8059e-01  8.14e-02  4.85e-06  2.37e-03  3.48e-04  1.59e-05  8.31e-01  
 13  +4.9859e-01  +5.7291e-01  7.43e-02  4.65e-06  2.27e-03  2.61e-04  1.53e-05  1.41e-01  
 14  +4.9836e-01  +5.6939e-01  7.10e-02  4.62e-06  2.26e-03  2.16e-04  1.52e-05  8.57e-02  
 15  +4.9777e-01  +5.6339e-01  6.56e-02  4.16e-06  2.04e-03  1.67e-04  1.37e-05  2.33e-01  
 16  +4.9750e-01  +5.5837e-01  6.09e-02  3.97e-06  1.94e-03  9.73e-05  1.30e-05  3.12e-01  
 17  +4.9678e-01  +5.5225e-01  5.55e-02  3.45e-06  1.68e-03  5.17e-05  1.13e-05  4.51e-01  
 18  +4.9546e-01  +5.4410e-01  4.86e-02  2.92e-06  1.43e-03  2.74e-05  9.69e-06  4.14e-01  
 19  +4.9478e-01  +5.4059e-01  4.58e-02  2.68e-06  1.31e-03  2.24e-05  8.92e-06  1.82e-01  
 20  +4.9365e-01  +5.3344e-01  3.98e-02  2.29e-06  1.12e-03  2.25e-07  7.70e-06  8.07e-01  
 21  +4.9091e-01  +5.2169e-01  3.08e-02  1.57e-06  7.68e-04  1.91e-07  5.37e-06  4.96e-01  
 22  +4.8976e-01  +5.1696e-01  2.72e-02  1.32e-06  6.45e-04  1.79e-07  4.53e-06  3.00e-01  
 23  +4.8967e-01  +5.1655e-01  2.69e-02  1.28e-06  6.26e-04  1.90e-07  4.40e-06  2.59e-01  
 24  +4.8813e-01  +5.1026e-01  2.21e-02  9.64e-07  4.71e-04  1.94e-07  3.33e-06  9.45e-01  
 25  +4.8738e-01  +5.0729e-01  1.99e-02  8.52e-07  4.16e-04  1.76e-07  2.96e-06  1.69e-01  
 26  +4.8731e-01  +5.0698e-01  1.97e-02  8.40e-07  4.10e-04  1.76e-07  2.92e-06  1.20e-01  
 27  +4.8529e-01  +4.9904e-01  1.37e-02  5.66e-07  2.77e-04  1.25e-07  2.00e-06  4.64e-01  
 28  +4.8429e-01  +4.9509e-01  1.08e-02  4.37e-07  2.14e-04  9.97e-08  1.56e-06  3.23e-01  
 29  +4.8424e-01  +4.9479e-01  1.06e-02  4.25e-07  2.08e-04  1.01e-07  1.52e-06  1.92e-01  
 30  +4.8334e-01  +4.9132e-01  7.98e-03  3.18e-07  1.55e-04  7.65e-08  1.15e-06  2.87e-01  
 31  +4.8219e-01  +4.8668e-01  4.48e-03  1.75e-07  8.53e-05  5.01e-08  6.38e-07  9.90e-01  
 32  +4.8079e-01  +4.8147e-01  6.80e-04  2.63e-08  1.28e-05  7.50e-09  9.84e-08  8.99e-01  
 33  +4.8062e-01  +4.8087e-01  2.48e-04  9.32e-09  4.55e-06  2.81e-09  3.53e-08  6.99e-01  
 34  +4.8054e-01  +4.8059e-01  4.87e-05  1.83e-09  8.95e-07  5.50e-10  6.95e-09  9.90e-01  
 35  +4.8052e-01  +4.8052e-01  4.94e-07  1.86e-11  9.07e-09  5.56e-12  7.06e-11  9.90e-01  
 36  +4.8052e-01  +4.8052e-01  4.94e-09  1.86e-13  9.07e-11  5.56e-14  7.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 818.8058ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:21 PM: Optimal value: 4.805e-01
(CVXPY) Aug 30 12:15:21 PM: Compilation took 1.409e-01 seconds
(CVXPY) Aug 30 12:15:21 PM: Solver (including time spent in interface) took 8.630e-01 seconds
Iteration: 8, Objective: 0.4805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:21 PM: Your problem has 25091 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:21 PM: Finished problem compilation (took 1.407e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25091
  constraints   = 50091
  nnz(P)        = 0
  nnz(A)        = 343173
  cones (total) = 1
    : Nonnegative = 1,  numel = 50091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.43e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2540e+03  5.25e+03  4.08e-01  1.52e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5336e+02  6.53e+02  1.62e-01  7.73e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6863e+02  1.68e+02  1.43e-01  6.84e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3653e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.2122e+00  7.12e-01  2.14e-03  1.04e+00  2.47e-05  1.89e-01  2.53e-01  
  6  +5.0000e-01  +6.4969e-01  1.50e-01  4.47e-04  2.18e-01  3.78e-06  4.87e-02  8.15e-01  
  7  +5.0000e-01  +6.3538e-01  1.35e-01  4.04e-04  1.97e-01  3.28e-06  3.77e-02  3.79e-01  
  8  +5.0000e-01  +6.3564e-01  1.36e-01  4.05e-04  1.97e-01  3.15e-06  3.46e-02  1.77e-01  
  9  +5.0001e-01  +6.3448e-01  1.34e-01  4.01e-04  1.96e-01  2.92e-06  2.92e-02  3.01e-01  
 10  +5.0000e-01  +6.1754e-01  1.18e-01  3.50e-04  1.71e-01  2.71e-06  1.60e-02  6.54e-01  
 11  +5.0000e-01  +5.8879e-01  8.88e-02  2.52e-04  1.23e-01  5.79e-06  2.97e-03  9.90e-01  
 12  +4.9967e-01  +5.8558e-01  8.59e-02  2.51e-05  1.22e-02  1.82e-04  8.51e-05  9.74e-01  
 13  +4.9892e-01  +5.7591e-01  7.70e-02  7.74e-06  3.78e-03  4.77e-04  2.57e-05  7.62e-01  
 14  +4.9890e-01  +5.6705e-01  6.82e-02  6.38e-06  3.12e-03  2.66e-04  2.10e-05  5.20e-01  
 15  +4.9869e-01  +5.6482e-01  6.61e-02  5.67e-06  2.77e-03  2.51e-04  1.87e-05  2.07e-01  
 16  +4.9860e-01  +5.6134e-01  6.27e-02  5.41e-06  2.64e-03  1.56e-04  1.78e-05  3.35e-01  
 17  +4.9755e-01  +5.5538e-01  5.78e-02  3.94e-06  1.93e-03  1.69e-04  1.29e-05  3.17e-01  
 18  +4.9714e-01  +5.5311e-01  5.60e-02  3.62e-06  1.77e-03  1.55e-04  1.19e-05  1.49e-01  
 19  +4.9700e-01  +5.5239e-01  5.54e-02  3.61e-06  1.76e-03  1.47e-04  1.19e-05  2.84e-02  
 20  +4.9562e-01  +5.4511e-01  4.95e-02  2.95e-06  1.44e-03  1.05e-04  9.75e-06  3.47e-01  
 21  +4.9396e-01  +5.3635e-01  4.24e-02  2.38e-06  1.16e-03  4.03e-05  7.94e-06  5.53e-01  
 22  +4.9355e-01  +5.3432e-01  4.08e-02  2.25e-06  1.10e-03  2.25e-05  7.50e-06  3.79e-01  
 23  +4.9266e-01  +5.3044e-01  3.78e-02  2.01e-06  9.81e-04  1.83e-05  6.74e-06  1.95e-01  
 24  +4.9149e-01  +5.2469e-01  3.32e-02  1.66e-06  8.13e-04  1.93e-07  5.62e-06  8.53e-01  
 25  +4.8961e-01  +5.1703e-01  2.74e-02  1.29e-06  6.30e-04  1.72e-07  4.39e-06  3.53e-01  
 26  +4.8954e-01  +5.1674e-01  2.72e-02  1.27e-06  6.22e-04  1.79e-07  4.34e-06  1.19e-01  
 27  +4.8653e-01  +5.0459e-01  1.81e-02  7.76e-07  3.79e-04  1.25e-07  2.70e-06  4.81e-01  
 28  +4.8643e-01  +5.0419e-01  1.78e-02  7.61e-07  3.72e-04  1.29e-07  2.65e-06  1.22e-01  
 29  +4.8642e-01  +5.0403e-01  1.76e-02  7.41e-07  3.62e-04  1.39e-07  2.57e-06  2.10e-01  
 30  +4.8631e-01  +5.0352e-01  1.72e-02  7.18e-07  3.51e-04  1.43e-07  2.50e-06  1.97e-01  
 31  +4.8473e-01  +4.9744e-01  1.27e-02  5.13e-07  2.51e-04  1.09e-07  1.81e-06  3.79e-01  
 32  +4.8439e-01  +4.9612e-01  1.17e-02  4.69e-07  2.29e-04  1.04e-07  1.66e-06  1.85e-01  
 33  +4.8426e-01  +4.9538e-01  1.11e-02  4.37e-07  2.14e-04  1.11e-07  1.54e-06  5.03e-01  
 34  +4.8282e-01  +4.9002e-01  7.20e-03  2.78e-07  1.36e-04  7.24e-08  1.00e-06  4.34e-01  
 35  +4.8102e-01  +4.8326e-01  2.24e-03  8.43e-08  4.12e-05  2.49e-08  3.12e-07  9.51e-01  
 36  +4.8046e-01  +4.8123e-01  7.68e-04  2.88e-08  1.41e-05  8.55e-09  1.08e-07  6.75e-01  
 37  +4.8018e-01  +4.8021e-01  3.91e-05  1.46e-09  7.14e-07  4.43e-10  5.51e-09  9.86e-01  
 38  +4.8016e-01  +4.8016e-01  3.92e-07  1.47e-11  7.16e-09  4.44e-12  5.53e-11  9.90e-01  
 39  +4.8016e-01  +4.8016e-01  3.92e-09  1.47e-13  7.16e-11  4.44e-14  5.53e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 904.6855ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:22 PM: Optimal value: 4.802e-01
(CVXPY) Aug 30 12:15:22 PM: Compilation took 1.407e-01 seconds
(CVXPY) Aug 30 12:15:22 PM: Solver (including time spent in interface) took 9.381e-01 seconds
Iteration: 9, Objective: 0.4802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:22 PM: Your problem has 25093 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:23 PM: Finished problem compilation (took 1.416e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25093
  constraints   = 50093
  nnz(P)        = 0
  nnz(A)        = 345559
  cones (total) = 1
    : Nonnegative = 1,  numel = 50093

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.43e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2540e+03  5.25e+03  4.08e-01  1.52e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5334e+02  6.53e+02  1.62e-01  7.73e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6862e+02  1.68e+02  1.43e-01  6.84e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3653e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1925e+00  6.93e-01  2.08e-03  1.01e+00  2.47e-05  1.88e-01  2.60e-01  
  6  +5.0000e-01  +6.6336e-01  1.63e-01  4.88e-04  2.38e-01  4.50e-06  5.32e-02  7.87e-01  
  7  +5.0000e-01  +6.3333e-01  1.33e-01  3.98e-04  1.94e-01  3.77e-06  3.85e-02  3.55e-01  
  8  +5.0000e-01  +6.3171e-01  1.32e-01  3.93e-04  1.92e-01  3.65e-06  3.42e-02  1.97e-01  
  9  +5.0000e-01  +6.3010e-01  1.30e-01  3.88e-04  1.89e-01  3.43e-06  2.70e-02  3.76e-01  
 10  +5.0001e-01  +6.2931e-01  1.29e-01  3.84e-04  1.87e-01  2.12e-06  1.28e-02  9.90e-01  
 11  +4.9999e-01  +5.8880e-01  8.88e-02  2.17e-04  1.06e-01  9.46e-06  1.42e-03  9.17e-01  
 12  +4.9928e-01  +5.8600e-01  8.67e-02  9.77e-06  4.78e-03  3.88e-04  3.26e-05  9.77e-01  
 13  +4.9892e-01  +5.8149e-01  8.26e-02  7.49e-06  3.66e-03  4.31e-04  2.49e-05  2.89e-01  
 14  +4.9897e-01  +5.7713e-01  7.82e-02  7.02e-06  3.44e-03  3.37e-04  2.33e-05  2.23e-01  
 15  +4.9907e-01  +5.6970e-01  7.06e-02  6.74e-06  3.30e-03  1.63e-04  2.23e-05  3.94e-01  
 16  +4.9859e-01  +5.6228e-01  6.37e-02  5.23e-06  2.56e-03  1.09e-04  1.73e-05  5.24e-01  
 17  +4.9855e-01  +5.6203e-01  6.35e-02  5.22e-06  2.56e-03  1.06e-04  1.73e-05  1.99e-02  
 18  +4.9822e-01  +5.5991e-01  6.17e-02  4.68e-06  2.29e-03  9.66e-05  1.55e-05  2.11e-01  
 19  +4.9805e-01  +5.5842e-01  6.04e-02  4.59e-06  2.25e-03  7.71e-05  1.52e-05  1.72e-01  
 20  +4.9709e-01  +5.5375e-01  5.67e-02  3.78e-06  1.85e-03  7.75e-05  1.26e-05  2.01e-01  
 21  +4.9650e-01  +5.5058e-01  5.41e-02  3.49e-06  1.71e-03  6.58e-05  1.16e-05  1.70e-01  
 22  +4.9644e-01  +5.5024e-01  5.38e-02  3.48e-06  1.70e-03  6.25e-05  1.16e-05  3.52e-02  
 23  +4.9451e-01  +5.4092e-01  4.64e-02  2.70e-06  1.32e-03  4.86e-05  9.11e-06  3.13e-01  
 24  +4.9401e-01  +5.3844e-01  4.44e-02  2.54e-06  1.24e-03  3.95e-05  8.59e-06  1.72e-01  
 25  +4.9256e-01  +5.3089e-01  3.83e-02  2.11e-06  1.03e-03  4.45e-06  7.18e-06  7.44e-01  
 26  +4.9213e-01  +5.2908e-01  3.69e-02  1.97e-06  9.62e-04  3.27e-06  6.72e-06  2.66e-01  
 27  +4.9203e-01  +5.2864e-01  3.66e-02  1.95e-06  9.52e-04  2.82e-06  6.65e-06  1.25e-01  
 28  +4.8938e-01  +5.1738e-01  2.80e-02  1.36e-06  6.64e-04  1.99e-06  4.71e-06  3.46e-01  
 29  +4.8938e-01  +5.1739e-01  2.80e-02  1.36e-06  6.63e-04  1.90e-06  4.70e-06  4.53e-02  
 30  +4.8788e-01  +5.1119e-01  2.33e-02  1.07e-06  5.25e-04  1.45e-06  3.76e-06  2.66e-01  
 31  +4.8781e-01  +5.1094e-01  2.31e-02  1.06e-06  5.19e-04  1.28e-06  3.72e-06  1.28e-01  
 32  +4.8585e-01  +5.0297e-01  1.71e-02  7.44e-07  3.64e-04  8.74e-07  2.65e-06  3.42e-01  
 33  +4.8570e-01  +5.0236e-01  1.67e-02  7.15e-07  3.50e-04  7.70e-07  2.55e-06  1.49e-01  
 34  +4.8553e-01  +5.0167e-01  1.61e-02  6.88e-07  3.36e-04  6.62e-07  2.46e-06  1.63e-01  
 35  +4.8437e-01  +4.9700e-01  1.26e-02  5.21e-07  2.55e-04  4.20e-07  1.88e-06  4.18e-01  
 36  +4.8395e-01  +4.9536e-01  1.14e-02  4.66e-07  2.28e-04  3.67e-07  1.69e-06  1.41e-01  
 37  +4.8218e-01  +4.8839e-01  6.21e-03  2.45e-07  1.20e-04  1.40e-07  9.07e-07  6.90e-01  
 38  +4.8048e-01  +4.8191e-01  1.42e-03  5.50e-08  2.69e-05  2.60e-08  2.10e-07  8.39e-01  
 39  +4.8026e-01  +4.8103e-01  7.75e-04  2.98e-08  1.46e-05  1.01e-08  1.14e-07  8.52e-01  
 40  +4.7996e-01  +4.7997e-01  1.05e-05  4.05e-10  1.98e-07  1.28e-10  1.57e-09  9.89e-01  
 41  +4.7996e-01  +4.7996e-01  1.05e-07  4.05e-12  1.98e-09  1.28e-12  1.57e-11  9.90e-01  
 42  +4.7996e-01  +4.7996e-01  1.05e-09  4.05e-14  1.98e-11  1.34e-14  1.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 940.4162ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:24 PM: Optimal value: 4.800e-01
(CVXPY) Aug 30 12:15:24 PM: Compilation took 1.416e-01 seconds
(CVXPY) Aug 30 12:15:24 PM: Solver (including time spent in interface) took 9.703e-01 seconds
Iteration: 10, Objective: 0.4800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:24 PM: Your problem has 25101 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:24 PM: Finished problem compilation (took 1.406e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25101
  constraints   = 50101
  nnz(P)        = 0
  nnz(A)        = 349850
  cones (total) = 1
    : Nonnegative = 1,  numel = 50101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.44e+02  1.00e+00  1.00e+00   ------   
  1  +5.8813e-01  +5.2541e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3824e-01  +6.5332e+02  6.53e+02  1.62e-01  7.73e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6862e+02  1.68e+02  1.43e-01  6.85e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3656e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1694e+00  6.69e-01  2.01e-03  9.77e-01  2.48e-05  1.88e-01  2.69e-01  
  6  +5.0000e-01  +6.5644e-01  1.56e-01  4.67e-04  2.28e-01  4.61e-06  5.16e-02  7.81e-01  
  7  +5.0000e-01  +6.2546e-01  1.25e-01  3.75e-04  1.83e-01  3.88e-06  3.58e-02  3.80e-01  
  8  +5.0000e-01  +6.2395e-01  1.24e-01  3.70e-04  1.81e-01  3.78e-06  2.69e-02  4.15e-01  
  9  +5.0000e-01  +6.2863e-01  1.29e-01  3.84e-04  1.87e-01  3.38e-06  2.05e-02  4.92e-01  
 10  +4.9999e-01  +5.9361e-01  9.36e-02  2.74e-04  1.34e-01  6.76e-06  4.68e-03  8.47e-01  
 11  +4.9987e-01  +5.8514e-01  8.53e-02  9.10e-05  4.45e-02  7.09e-05  3.55e-04  9.59e-01  
 12  +4.9965e-01  +5.6659e-01  6.69e-02  2.27e-05  1.11e-02  1.80e-04  7.84e-05  9.90e-01  
 13  +4.9906e-01  +5.6416e-01  6.51e-02  9.01e-06  4.41e-03  4.20e-04  3.04e-05  6.56e-01  
 14  +4.9898e-01  +5.6337e-01  6.44e-02  7.95e-06  3.89e-03  3.92e-04  2.66e-05  2.71e-01  
 15  +4.9848e-01  +5.6081e-01  6.23e-02  5.86e-06  2.87e-03  4.61e-04  1.95e-05  3.31e-01  
 16  +4.9815e-01  +5.5900e-01  6.08e-02  5.03e-06  2.46e-03  4.50e-04  1.67e-05  2.43e-01  
 17  +4.9809e-01  +5.5856e-01  6.05e-02  5.00e-06  2.45e-03  4.12e-04  1.66e-05  7.24e-02  
 18  +4.9789e-01  +5.5734e-01  5.94e-02  4.68e-06  2.29e-03  3.56e-04  1.55e-05  2.03e-01  
 19  +4.9682e-01  +5.5138e-01  5.46e-02  3.66e-06  1.79e-03  1.62e-04  1.22e-05  6.60e-01  
 20  +4.9569e-01  +5.4601e-01  5.03e-02  3.14e-06  1.54e-03  1.29e-04  1.05e-05  2.62e-01  
 21  +4.9538e-01  +5.4458e-01  4.92e-02  3.03e-06  1.49e-03  1.15e-04  1.02e-05  1.06e-01  
 22  +4.9392e-01  +5.3775e-01  4.38e-02  2.56e-06  1.25e-03  5.25e-05  8.68e-06  4.87e-01  
 23  +4.9342e-01  +5.3551e-01  4.21e-02  2.40e-06  1.18e-03  4.38e-05  8.16e-06  1.66e-01  
 24  +4.9226e-01  +5.3047e-01  3.82e-02  2.08e-06  1.02e-03  3.63e-05  7.09e-06  2.01e-01  
 25  +4.9206e-01  +5.2954e-01  3.75e-02  2.01e-06  9.85e-04  2.64e-05  6.88e-06  2.37e-01  
 26  +4.8980e-01  +5.1990e-01  3.01e-02  1.49e-06  7.30e-04  1.85e-05  5.17e-06  3.33e-01  
 27  +4.8967e-01  +5.1931e-01  2.96e-02  1.45e-06  7.11e-04  1.49e-05  5.04e-06  1.79e-01  
 28  +4.8822e-01  +5.1333e-01  2.51e-02  1.18e-06  5.77e-04  1.07e-05  4.13e-06  2.90e-01  
 29  +4.8807e-01  +5.1260e-01  2.45e-02  1.13e-06  5.54e-04  8.24e-06  3.97e-06  2.27e-01  
 30  +4.8608e-01  +5.0452e-01  1.84e-02  8.10e-07  3.96e-04  5.36e-06  2.89e-06  3.57e-01  
 31  +4.8608e-01  +5.0449e-01  1.84e-02  8.05e-07  3.94e-04  5.08e-06  2.87e-06  5.89e-02  
 32  +4.8571e-01  +5.0298e-01  1.73e-02  7.42e-07  3.63e-04  4.16e-06  2.65e-06  1.93e-01  
 33  +4.8568e-01  +5.0280e-01  1.71e-02  7.34e-07  3.59e-04  3.81e-06  2.62e-06  8.57e-02  
 34  +4.8444e-01  +4.9786e-01  1.34e-02  5.60e-07  2.74e-04  2.26e-06  2.03e-06  4.09e-01  
 35  +4.8379e-01  +4.9526e-01  1.15e-02  4.71e-07  2.30e-04  1.59e-06  1.72e-06  3.06e-01  
 36  +4.8334e-01  +4.9323e-01  9.88e-03  3.94e-07  1.93e-04  3.85e-07  1.44e-06  8.23e-01  
 37  +4.8192e-01  +4.8781e-01  5.90e-03  2.32e-07  1.14e-04  2.01e-07  8.67e-07  4.93e-01  
 38  +4.8052e-01  +4.8252e-01  1.99e-03  7.76e-08  3.80e-05  5.93e-08  2.98e-07  7.12e-01  
 39  +4.8036e-01  +4.8188e-01  1.52e-03  5.89e-08  2.88e-05  3.43e-08  2.27e-07  5.31e-01  
 40  +4.7982e-01  +4.7988e-01  5.64e-05  2.18e-09  1.07e-06  7.46e-10  8.52e-09  9.90e-01  
 41  +4.7980e-01  +4.7980e-01  5.65e-07  2.19e-11  1.07e-08  7.48e-12  8.55e-11  9.90e-01  
 42  +4.7980e-01  +4.7980e-01  5.65e-09  2.19e-13  1.07e-10  7.48e-14  8.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 936.9845ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:25 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:25 PM: Optimal value: 4.798e-01
(CVXPY) Aug 30 12:15:25 PM: Compilation took 1.406e-01 seconds
(CVXPY) Aug 30 12:15:25 PM: Solver (including time spent in interface) took 9.708e-01 seconds
Iteration: 11, Objective: 0.4798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:25 PM: Your problem has 25102 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:25 PM: Finished problem compilation (took 1.406e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25102
  constraints   = 50102
  nnz(P)        = 0
  nnz(A)        = 350264
  cones (total) = 1
    : Nonnegative = 1,  numel = 50102

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.44e+02  1.00e+00  1.00e+00   ------   
  1  +5.8813e-01  +5.2542e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3824e-01  +6.5329e+02  6.53e+02  1.62e-01  7.73e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6861e+02  1.68e+02  1.43e-01  6.85e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3658e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1654e+00  6.65e-01  2.00e-03  9.72e-01  2.48e-05  1.88e-01  2.71e-01  
  6  +5.0000e-01  +6.4061e-01  1.41e-01  4.20e-04  2.05e-01  4.12e-06  4.68e-02  7.99e-01  
  7  +5.0000e-01  +6.2485e-01  1.25e-01  3.73e-04  1.82e-01  3.77e-06  3.60e-02  3.07e-01  
  8  +5.0000e-01  +6.2141e-01  1.21e-01  3.63e-04  1.77e-01  3.75e-06  2.93e-02  2.79e-01  
  9  +5.0000e-01  +6.3083e-01  1.31e-01  3.90e-04  1.90e-01  3.32e-06  1.85e-02  7.27e-01  
 10  +5.0000e-01  +5.9448e-01  9.45e-02  2.73e-04  1.33e-01  6.68e-06  3.84e-03  9.08e-01  
 11  +4.9978e-01  +5.8678e-01  8.70e-02  4.91e-05  2.40e-02  1.23e-04  1.74e-04  9.69e-01  
 12  +4.9905e-01  +5.7689e-01  7.78e-02  1.10e-05  5.40e-03  4.65e-04  3.71e-05  8.45e-01  
 13  +4.9906e-01  +5.7181e-01  7.28e-02  8.97e-06  4.39e-03  3.66e-04  2.99e-05  4.38e-01  
 14  +4.9892e-01  +5.6414e-01  6.52e-02  6.37e-06  3.12e-03  2.08e-04  2.11e-05  7.26e-01  
 15  +4.9868e-01  +5.6172e-01  6.30e-02  5.40e-06  2.64e-03  1.63e-04  1.78e-05  4.06e-01  
 16  +4.9860e-01  +5.6130e-01  6.27e-02  5.37e-06  2.63e-03  1.51e-04  1.77e-05  6.28e-02  
 17  +4.9837e-01  +5.6001e-01  6.16e-02  4.98e-06  2.44e-03  1.42e-04  1.64e-05  1.53e-01  
 18  +4.9814e-01  +5.5803e-01  5.99e-02  4.78e-06  2.34e-03  7.95e-05  1.58e-05  4.04e-01  
 19  +4.9654e-01  +5.5023e-01  5.37e-02  3.41e-06  1.67e-03  7.45e-05  1.13e-05  3.90e-01  
 20  +4.9649e-01  +5.4998e-01  5.35e-02  3.40e-06  1.66e-03  7.20e-05  1.13e-05  2.32e-02  
 21  +4.9553e-01  +5.4538e-01  4.99e-02  3.04e-06  1.49e-03  5.81e-05  1.02e-05  2.09e-01  
 22  +4.9496e-01  +5.4274e-01  4.78e-02  2.87e-06  1.40e-03  4.63e-05  9.64e-06  1.82e-01  
 23  +4.9297e-01  +5.3376e-01  4.08e-02  2.26e-06  1.11e-03  3.14e-05  7.69e-06  3.48e-01  
 24  +4.9258e-01  +5.3198e-01  3.94e-02  2.14e-06  1.05e-03  2.27e-05  7.31e-06  2.46e-01  
 25  +4.9128e-01  +5.2603e-01  3.48e-02  1.81e-06  8.85e-04  2.71e-06  6.21e-06  7.53e-01  
 26  +4.8949e-01  +5.1854e-01  2.91e-02  1.42e-06  6.96e-04  1.79e-06  4.93e-06  3.61e-01  
 27  +4.8944e-01  +5.1835e-01  2.89e-02  1.41e-06  6.90e-04  1.66e-06  4.90e-06  7.31e-02  
 28  +4.8782e-01  +5.1167e-01  2.38e-02  1.11e-06  5.44e-04  1.25e-06  3.91e-06  2.72e-01  
 29  +4.8782e-01  +5.1167e-01  2.39e-02  1.11e-06  5.44e-04  1.23e-06  3.90e-06  1.55e-02  
 30  +4.8643e-01  +5.0596e-01  1.95e-02  8.73e-07  4.27e-04  8.88e-07  3.10e-06  3.06e-01  
 31  +4.8621e-01  +5.0502e-01  1.88e-02  8.29e-07  4.06e-04  7.87e-07  2.95e-06  1.45e-01  
 32  +4.8601e-01  +5.0416e-01  1.82e-02  7.85e-07  3.84e-04  6.36e-07  2.79e-06  2.48e-01  
 33  +4.8596e-01  +5.0395e-01  1.80e-02  7.77e-07  3.80e-04  5.88e-07  2.76e-06  9.64e-02  
 34  +4.8403e-01  +4.9629e-01  1.23e-02  5.09e-07  2.49e-04  3.42e-07  1.85e-06  4.52e-01  
 35  +4.8384e-01  +4.9548e-01  1.16e-02  4.80e-07  2.35e-04  3.05e-07  1.75e-06  1.46e-01  
 36  +4.8349e-01  +4.9380e-01  1.03e-02  4.13e-07  2.02e-04  1.51e-07  1.50e-06  7.92e-01  
 37  +4.8295e-01  +4.9175e-01  8.80e-03  3.50e-07  1.71e-04  1.26e-07  1.29e-06  2.01e-01  
 38  +4.8083e-01  +4.8369e-01  2.85e-03  1.11e-07  5.45e-05  3.61e-08  4.24e-07  7.86e-01  
 39  +4.8076e-01  +4.8339e-01  2.63e-03  1.03e-07  5.03e-05  3.26e-08  3.91e-07  2.37e-01  
 40  +4.7987e-01  +4.8007e-01  1.93e-04  7.47e-09  3.65e-06  2.09e-09  2.91e-08  9.78e-01  
 41  +4.7980e-01  +4.7980e-01  2.53e-06  9.80e-11  4.79e-08  2.72e-11  3.83e-10  9.90e-01  
 42  +4.7980e-01  +4.7980e-01  2.53e-08  9.80e-13  4.79e-10  2.72e-13  3.83e-12  9.90e-01  
 43  +4.7980e-01  +4.7980e-01  2.53e-10  9.81e-15  4.80e-12  2.85e-15  4.01e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 969.3084ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:26 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:26 PM: Optimal value: 4.798e-01
(CVXPY) Aug 30 12:15:26 PM: Compilation took 1.406e-01 seconds
(CVXPY) Aug 30 12:15:26 PM: Solver (including time spent in interface) took 1.001e+00 seconds
Iteration: 12, Objective: 0.4798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:26 PM: Your problem has 25103 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:26 PM: Finished problem compilation (took 1.257e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25103
  constraints   = 50103
  nnz(P)        = 0
  nnz(A)        = 350482
  cones (total) = 1
    : Nonnegative = 1,  numel = 50103

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.44e+02  1.00e+00  1.00e+00   ------   
  1  +5.8813e-01  +5.2542e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3824e-01  +6.5328e+02  6.53e+02  1.62e-01  7.73e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6861e+02  1.68e+02  1.43e-01  6.85e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3658e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1669e+00  6.67e-01  2.00e-03  9.74e-01  2.48e-05  1.88e-01  2.70e-01  
  6  +5.0000e-01  +6.4132e-01  1.41e-01  4.22e-04  2.06e-01  4.13e-06  4.70e-02  7.98e-01  
  7  +5.0000e-01  +6.2507e-01  1.25e-01  3.73e-04  1.82e-01  3.78e-06  3.61e-02  3.08e-01  
  8  +5.0000e-01  +6.2158e-01  1.22e-01  3.63e-04  1.77e-01  3.75e-06  2.95e-02  2.74e-01  
  9  +5.0000e-01  +6.2843e-01  1.28e-01  3.83e-04  1.87e-01  3.43e-06  2.04e-02  6.03e-01  
 10  +5.0000e-01  +5.9891e-01  9.89e-02  2.90e-04  1.41e-01  5.59e-06  5.21e-03  9.04e-01  
 11  +4.9983e-01  +5.8686e-01  8.70e-02  6.32e-05  3.09e-02  9.72e-05  2.30e-04  9.75e-01  
 12  +4.9894e-01  +5.7751e-01  7.86e-02  1.06e-05  5.18e-03  5.29e-04  3.56e-05  8.81e-01  
 13  +4.9900e-01  +5.7204e-01  7.30e-02  8.72e-06  4.27e-03  3.96e-04  2.91e-05  4.39e-01  
 14  +4.9886e-01  +5.6428e-01  6.54e-02  6.31e-06  3.09e-03  2.25e-04  2.08e-05  7.01e-01  
 15  +4.9863e-01  +5.6203e-01  6.34e-02  5.44e-06  2.66e-03  1.84e-04  1.79e-05  3.58e-01  
 16  +4.9856e-01  +5.6157e-01  6.30e-02  5.40e-06  2.64e-03  1.69e-04  1.78e-05  6.90e-02  
 17  +4.9838e-01  +5.6043e-01  6.21e-02  5.07e-06  2.48e-03  1.56e-04  1.67e-05  1.49e-01  
 18  +4.9810e-01  +5.5777e-01  5.97e-02  4.74e-06  2.32e-03  6.76e-05  1.57e-05  5.36e-01  
 19  +4.9552e-01  +5.4539e-01  4.99e-02  2.82e-06  1.38e-03  6.82e-05  9.42e-06  4.81e-01  
 20  +4.9532e-01  +5.4434e-01  4.90e-02  2.78e-06  1.36e-03  5.94e-05  9.29e-06  9.88e-02  
 21  +4.9395e-01  +5.3788e-01  4.39e-02  2.49e-06  1.22e-03  3.01e-05  8.41e-06  3.84e-01  
 22  +4.9337e-01  +5.3528e-01  4.19e-02  2.34e-06  1.14e-03  2.28e-05  7.93e-06  2.14e-01  
 23  +4.9141e-01  +5.2677e-01  3.54e-02  1.84e-06  9.02e-04  1.09e-05  6.33e-06  4.87e-01  
 24  +4.9082e-01  +5.2404e-01  3.32e-02  1.68e-06  8.23e-04  5.39e-06  5.78e-06  4.59e-01  
 25  +4.9072e-01  +5.2368e-01  3.30e-02  1.66e-06  8.12e-04  4.80e-06  5.72e-06  9.94e-02  
 26  +4.8821e-01  +5.1315e-01  2.49e-02  1.17e-06  5.74e-04  2.64e-06  4.11e-06  4.50e-01  
 27  +4.8821e-01  +5.1314e-01  2.49e-02  1.17e-06  5.73e-04  2.55e-06  4.10e-06  3.58e-02  
 28  +4.8646e-01  +5.0598e-01  1.95e-02  8.71e-07  4.26e-04  1.59e-06  3.09e-06  3.93e-01  
 29  +4.8612e-01  +5.0456e-01  1.84e-02  8.01e-07  3.92e-04  1.20e-06  2.85e-06  2.86e-01  
 30  +4.8590e-01  +5.0363e-01  1.77e-02  7.59e-07  3.72e-04  9.46e-07  2.70e-06  2.42e-01  
 31  +4.8444e-01  +4.9771e-01  1.33e-02  5.47e-07  2.67e-04  3.23e-07  1.97e-06  7.33e-01  
 32  +4.8414e-01  +4.9655e-01  1.24e-02  5.09e-07  2.49e-04  2.84e-07  1.84e-06  1.62e-01  
 33  +4.8252e-01  +4.9023e-01  7.72e-03  3.08e-07  1.51e-04  1.56e-07  1.14e-06  5.04e-01  
 34  +4.8099e-01  +4.8433e-01  3.34e-03  1.31e-07  6.41e-05  5.96e-08  4.97e-07  6.61e-01  
 35  +4.8067e-01  +4.8302e-01  2.34e-03  9.11e-08  4.46e-05  3.03e-08  3.48e-07  8.10e-01  
 36  +4.7991e-01  +4.8019e-01  2.87e-04  1.11e-08  5.43e-06  3.42e-09  4.32e-08  9.22e-01  
 37  +4.7981e-01  +4.7982e-01  1.75e-05  6.79e-10  3.32e-07  1.90e-10  2.65e-09  9.90e-01  
 38  +4.7980e-01  +4.7980e-01  1.75e-07  6.80e-12  3.32e-09  1.90e-12  2.65e-11  9.90e-01  
 39  +4.7980e-01  +4.7980e-01  1.76e-09  6.80e-14  3.33e-11  1.97e-14  2.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 845.8156ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:27 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:27 PM: Optimal value: 4.798e-01
(CVXPY) Aug 30 12:15:27 PM: Compilation took 1.257e-01 seconds
(CVXPY) Aug 30 12:15:27 PM: Solver (including time spent in interface) took 8.756e-01 seconds
FULL MODEL:
  Accruacy: 0.5107
  Our objective: 0.021399999999999975

IF 
    (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0)                       <-- (term's our objective: 0.012080000000000042)
 OR (x5 = 1 AND x6 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.0024800000000000204)
 OR (x2 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0008399999999999536)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.001239999999999999)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x4 = 0) <-- (term's our objective: 0.0006800000000000521)
 OR (x0 = 1 AND x4 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0011999999999999502)
 OR (x3 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0005199999999999849)
 OR (x2 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.00048000000000002034)
 OR (x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.001160000000000043)
 OR (x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.000720000000000021)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.012080000000000042
    Its accruacy: 0.50604
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.012080000000000042
  Highest accruacy: 0.50604
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

