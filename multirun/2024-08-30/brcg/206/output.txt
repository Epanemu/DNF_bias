Command:
python test_script.py -s smallest_subclass -d 6 -n 50 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.04
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 6.

Computed total variation: 0.92
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:11 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 238
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9297e-01  +2.6096e+01  2.56e+01  8.24e-01  6.12e+00  1.00e+00  1.08e+00   ------   
  1  +5.7865e-01  +5.5444e+00  4.97e+00  3.22e-01  3.36e+00  3.87e-03  5.61e-01  6.34e-01  
  2  +4.9853e-01  +1.0870e+00  5.89e-01  6.31e-02  7.91e-01  1.47e-02  1.75e-01  9.73e-01  
  3  +4.3791e-01  +8.2820e-01  3.90e-01  2.12e-02  2.78e-01  1.41e-02  6.89e-02  7.10e-01  
  4  +3.9061e-01  +4.9437e-01  1.04e-01  4.90e-03  6.29e-02  2.44e-03  2.08e-02  7.74e-01  
  5  +3.6332e-01  +3.7463e-01  1.13e-02  4.99e-04  6.38e-03  1.74e-04  2.58e-03  9.06e-01  
  6  +3.6014e-01  +3.6026e-01  1.26e-04  5.54e-06  7.06e-05  1.86e-06  2.93e-05  9.89e-01  
  7  +3.6010e-01  +3.6010e-01  1.26e-06  5.54e-08  7.06e-07  1.86e-08  2.93e-07  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  1.26e-08  5.54e-10  7.06e-09  1.86e-10  2.93e-09  9.90e-01  
  9  +3.6010e-01  +3.6010e-01  1.26e-10  5.54e-12  7.06e-11  1.86e-12  2.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 197.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:11 PM: Optimal value: 3.601e-01
(CVXPY) Aug 30 12:08:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:11 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 311
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8607e-01  +2.6562e+01  2.61e+01  8.37e-01  6.26e+00  1.00e+00  1.10e+00   ------   
  1  +5.4823e-01  +5.6897e+00  5.14e+00  3.45e-01  3.41e+00  3.85e-03  5.84e-01  6.23e-01  
  2  +4.6872e-01  +1.1831e+00  7.14e-01  7.06e-02  9.13e-01  1.69e-02  1.92e-01  9.52e-01  
  3  +3.9572e-01  +7.1038e-01  3.15e-01  1.93e-02  2.60e-01  9.91e-03  6.08e-02  7.56e-01  
  4  +3.4677e-01  +5.3000e-01  1.83e-01  7.20e-03  1.01e-01  7.07e-03  2.41e-02  7.43e-01  
  5  +3.0288e-01  +3.6413e-01  6.13e-02  2.19e-03  3.09e-02  1.94e-03  7.94e-03  7.19e-01  
  6  +2.8287e-01  +2.8927e-01  6.40e-03  2.29e-04  3.20e-03  1.62e-04  8.75e-04  9.03e-01  
  7  +2.8038e-01  +2.8055e-01  1.68e-04  6.09e-06  8.45e-05  3.26e-06  2.36e-05  9.73e-01  
  8  +2.8030e-01  +2.8030e-01  3.18e-06  1.19e-07  1.61e-06  3.31e-08  4.85e-07  9.83e-01  
  9  +2.8030e-01  +2.8030e-01  3.18e-08  1.19e-09  1.62e-08  3.31e-10  4.86e-09  9.90e-01  
 10  +2.8030e-01  +2.8030e-01  3.18e-10  1.19e-11  1.62e-10  3.31e-12  4.86e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 235.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:11 PM: Optimal value: 2.803e-01
(CVXPY) Aug 30 12:08:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:11 PM: Your problem has 58 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 58
  constraints   = 83
  nnz(P)        = 0
  nnz(A)        = 356
  cones (total) = 1
    : Nonnegative = 1,  numel = 83

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8150e-01  +2.6409e+01  2.59e+01  8.46e-01  6.09e+00  1.00e+00  1.09e+00   ------   
  1  +5.1785e-01  +5.6862e+00  5.17e+00  3.56e-01  3.24e+00  3.90e-03  5.78e-01  6.20e-01  
  2  +4.3226e-01  +1.2766e+00  8.44e-01  7.27e-02  9.13e-01  1.84e-02  1.88e-01  9.27e-01  
  3  +3.2255e-01  +7.7032e-01  4.48e-01  2.29e-02  3.07e-01  1.38e-02  6.65e-02  7.20e-01  
  4  +2.5298e-01  +4.1379e-01  1.61e-01  7.31e-03  1.03e-01  4.64e-03  2.28e-02  7.16e-01  
  5  +2.4012e-01  +3.8478e-01  1.45e-01  5.81e-03  8.64e-02  3.98e-03  1.87e-02  3.18e-01  
  6  +1.9830e-01  +2.4189e-01  4.36e-02  1.61e-03  2.47e-02  9.65e-04  5.53e-03  7.91e-01  
  7  +1.8136e-01  +1.8295e-01  1.59e-03  5.83e-05  8.92e-04  2.32e-05  2.09e-04  9.67e-01  
  8  +1.8075e-01  +1.8102e-01  2.71e-04  1.05e-05  1.53e-04  3.29e-06  3.85e-05  8.32e-01  
  9  +1.8061e-01  +1.8063e-01  2.07e-05  8.24e-07  1.14e-05  2.26e-07  3.23e-06  9.73e-01  
 10  +1.8060e-01  +1.8060e-01  2.15e-07  8.57e-09  1.19e-07  2.30e-09  3.38e-08  9.90e-01  
 11  +1.8060e-01  +1.8060e-01  2.15e-09  8.57e-11  1.19e-09  2.30e-11  3.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 275.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:11 PM: Optimal value: 1.806e-01
(CVXPY) Aug 30 12:08:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:11 PM: Your problem has 65 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 90
  nnz(P)        = 0
  nnz(A)        = 386
  cones (total) = 1
    : Nonnegative = 1,  numel = 90

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7648e-01  +2.6591e+01  2.61e+01  8.52e-01  5.99e+00  1.00e+00  1.09e+00   ------   
  1  +4.8186e-01  +5.8701e+00  5.39e+00  3.67e-01  3.21e+00  3.99e-03  5.89e-01  6.03e-01  
  2  +3.8467e-01  +1.1637e+00  7.79e-01  6.56e-02  7.86e-01  2.05e-02  1.70e-01  9.82e-01  
  3  +2.6424e-01  +6.9059e-01  4.26e-01  2.28e-02  2.86e-01  1.38e-02  6.68e-02  6.87e-01  
  4  +2.0108e-01  +3.5872e-01  1.58e-01  7.75e-03  9.97e-02  4.73e-03  2.53e-02  6.59e-01  
  5  +1.9363e-01  +3.4521e-01  1.52e-01  6.58e-03  8.93e-02  4.45e-03  2.19e-02  2.60e-01  
  6  +1.5380e-01  +1.8631e-01  3.25e-02  1.34e-03  1.85e-02  2.91e-04  4.88e-03  9.72e-01  
  7  +1.4116e-01  +1.4223e-01  1.08e-03  4.39e-05  6.02e-04  6.63e-06  1.67e-04  9.67e-01  
  8  +1.4074e-01  +1.4081e-01  7.59e-05  3.32e-06  4.35e-05  2.49e-07  1.36e-05  9.25e-01  
  9  +1.4070e-01  +1.4070e-01  1.18e-06  5.25e-08  6.79e-07  6.03e-09  2.23e-07  9.87e-01  
 10  +1.4070e-01  +1.4070e-01  1.18e-08  5.25e-10  6.79e-09  6.03e-11  2.23e-09  9.90e-01  
 11  +1.4070e-01  +1.4070e-01  1.18e-10  5.26e-12  6.79e-11  6.03e-13  2.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 302.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:11 PM: Optimal value: 1.407e-01
(CVXPY) Aug 30 12:08:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:11 PM: Your problem has 66 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 66
  constraints   = 91
  nnz(P)        = 0
  nnz(A)        = 391
  cones (total) = 1
    : Nonnegative = 1,  numel = 91

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7502e-01  +2.6686e+01  2.62e+01  8.52e-01  5.99e+00  1.00e+00  1.10e+00   ------   
  1  +4.7329e-01  +5.8880e+00  5.41e+00  3.67e-01  3.21e+00  4.00e-03  5.89e-01  6.03e-01  
  2  +3.7166e-01  +1.1403e+00  7.69e-01  6.34e-02  7.62e-01  2.08e-02  1.63e-01  9.90e-01  
  3  +2.5430e-01  +6.6754e-01  4.13e-01  2.27e-02  2.86e-01  1.32e-02  6.52e-02  6.76e-01  
  4  +1.8759e-01  +3.4309e-01  1.56e-01  7.70e-03  1.01e-01  4.75e-03  2.48e-02  6.61e-01  
  5  +1.7736e-01  +3.2085e-01  1.43e-01  6.22e-03  8.59e-02  4.17e-03  2.07e-02  3.03e-01  
  6  +1.3185e-01  +1.5719e-01  2.53e-02  1.02e-03  1.42e-02  2.74e-04  3.79e-03  9.50e-01  
  7  +1.2141e-01  +1.2271e-01  1.30e-03  5.21e-05  7.23e-04  1.28e-05  2.01e-04  9.67e-01  
  8  +1.2083e-01  +1.2089e-01  6.00e-05  2.58e-06  3.44e-05  1.45e-07  1.05e-05  9.49e-01  
  9  +1.2080e-01  +1.2080e-01  7.11e-07  3.14e-08  4.13e-07  2.29e-09  1.31e-07  9.88e-01  
 10  +1.2080e-01  +1.2080e-01  7.11e-09  3.15e-10  4.13e-09  2.29e-11  1.31e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 295µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:11 PM: Optimal value: 1.208e-01
(CVXPY) Aug 30 12:08:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:11 PM: Your problem has 76 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 76
  constraints   = 101
  nnz(P)        = 0
  nnz(A)        = 417
  cones (total) = 1
    : Nonnegative = 1,  numel = 101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6876e-01  +2.6836e+01  2.64e+01  8.59e-01  5.78e+00  1.00e+00  1.10e+00   ------   
  1  +4.1706e-01  +6.0493e+00  5.63e+00  3.73e-01  3.09e+00  4.12e-03  5.93e-01  5.89e-01  
  2  +2.8332e-01  +1.1463e+00  8.63e-01  6.38e-02  7.18e-01  2.27e-02  1.59e-01  9.80e-01  
  3  +1.9181e-01  +5.4925e-01  3.57e-01  2.21e-02  2.60e-01  9.14e-03  6.12e-02  6.64e-01  
  4  +1.4272e-01  +3.0385e-01  1.61e-01  8.59e-03  1.08e-01  4.33e-03  2.65e-02  6.26e-01  
  5  +1.3141e-01  +2.7486e-01  1.43e-01  6.71e-03  8.84e-02  3.72e-03  2.16e-02  2.84e-01  
  6  +9.0967e-02  +1.1604e-01  2.51e-02  1.08e-03  1.45e-02  1.87e-04  3.83e-03  9.85e-01  
  7  +8.1466e-02  +8.2556e-02  1.09e-03  4.66e-05  6.19e-04  6.01e-06  1.71e-04  9.57e-01  
  8  +8.1098e-02  +8.1321e-02  2.23e-04  1.04e-05  1.32e-04  1.54e-06  4.16e-05  8.47e-01  
  9  +8.1002e-02  +8.1007e-02  4.54e-06  2.19e-07  2.73e-06  2.35e-08  8.97e-07  9.79e-01  
 10  +8.1000e-02  +8.1000e-02  4.53e-08  2.19e-09  2.73e-08  2.34e-10  8.99e-09  9.90e-01  
 11  +8.1000e-02  +8.1000e-02  4.55e-10  2.19e-11  2.74e-10  2.35e-12  9.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 327.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:11 PM: Optimal value: 8.100e-02
(CVXPY) Aug 30 12:08:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:11 PM: Your problem has 83 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 83
  constraints   = 108
  nnz(P)        = 0
  nnz(A)        = 431
  cones (total) = 1
    : Nonnegative = 1,  numel = 108

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6776e-01  +2.6966e+01  2.65e+01  8.63e-01  5.63e+00  1.00e+00  1.11e+00   ------   
  1  +3.8727e-01  +6.0275e+00  5.64e+00  3.67e-01  2.95e+00  4.18e-03  5.84e-01  5.94e-01  
  2  +2.2873e-01  +1.1082e+00  8.79e-01  5.97e-02  6.49e-01  2.19e-02  1.50e-01  9.68e-01  
  3  +1.4498e-01  +3.5982e-01  2.15e-01  1.34e-02  1.49e-01  3.74e-03  3.99e-02  8.11e-01  
  4  +1.3121e-01  +3.2566e-01  1.94e-01  1.06e-02  1.26e-01  3.54e-03  3.24e-02  2.89e-01  
  5  +1.0917e-01  +2.5043e-01  1.41e-01  6.70e-03  8.35e-02  2.57e-03  2.20e-02  3.90e-01  
  6  +6.7828e-02  +8.7639e-02  1.98e-02  8.73e-04  1.09e-02  2.22e-04  3.15e-03  9.42e-01  
  7  +6.1512e-02  +6.2553e-02  1.04e-03  4.63e-05  5.73e-04  7.91e-06  1.73e-04  9.46e-01  
  8  +6.1209e-02  +6.1481e-02  2.72e-04  1.33e-05  1.58e-04  2.14e-06  5.49e-05  7.91e-01  
  9  +6.1104e-02  +6.1111e-02  7.31e-06  3.69e-07  4.33e-06  4.11e-08  1.59e-06  9.72e-01  
 10  +6.1100e-02  +6.1100e-02  7.31e-08  3.70e-09  4.34e-08  4.11e-10  1.59e-08  9.90e-01  
 11  +6.1100e-02  +6.1100e-02  7.31e-10  3.70e-11  4.34e-10  4.11e-12  1.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 317.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:11 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:11 PM: Optimal value: 6.110e-02
(CVXPY) Aug 30 12:08:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0611
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:12 PM: Your problem has 84 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 434
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6681e-01  +2.6984e+01  2.65e+01  8.64e-01  5.62e+00  1.00e+00  1.11e+00   ------   
  1  +3.7809e-01  +6.0660e+00  5.69e+00  3.68e-01  2.94e+00  4.21e-03  5.86e-01  5.91e-01  
  2  +2.1867e-01  +1.1972e+00  9.79e-01  6.60e-02  7.07e-01  2.19e-02  1.65e-01  9.38e-01  
  3  +1.3784e-01  +3.6258e-01  2.25e-01  1.41e-02  1.53e-01  4.09e-03  4.17e-02  8.05e-01  
  4  +1.2639e-01  +3.4256e-01  2.16e-01  1.22e-02  1.40e-01  3.88e-03  3.69e-02  2.62e-01  
  5  +8.2216e-02  +1.5951e-01  7.73e-02  3.90e-03  4.45e-02  1.09e-03  1.32e-02  8.04e-01  
  6  +6.2449e-02  +6.7305e-02  4.86e-03  2.38e-04  2.70e-03  5.85e-05  8.55e-04  9.37e-01  
  7  +6.1325e-02  +6.2155e-02  8.29e-04  4.29e-05  4.74e-04  7.49e-06  1.63e-04  8.18e-01  
  8  +6.1089e-02  +6.1312e-02  2.22e-04  1.16e-05  1.24e-04  1.83e-06  5.22e-05  8.02e-01  
  9  +6.1005e-02  +6.1014e-02  9.87e-06  5.22e-07  5.53e-06  6.33e-08  2.53e-06  9.65e-01  
 10  +6.1000e-02  +6.1000e-02  9.89e-08  5.23e-09  5.54e-08  6.32e-10  2.55e-08  9.90e-01  
 11  +6.1000e-02  +6.1000e-02  9.89e-10  5.23e-11  5.54e-10  6.32e-12  2.56e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 347.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:12 PM: Optimal value: 6.100e-02
(CVXPY) Aug 30 12:08:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.0610
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:12 PM: Your problem has 85 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 110
  nnz(P)        = 0
  nnz(A)        = 437
  cones (total) = 1
    : Nonnegative = 1,  numel = 110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6448e-01  +2.7085e+01  2.66e+01  8.64e-01  5.61e+00  1.00e+00  1.11e+00   ------   
  1  +3.5362e-01  +6.1067e+00  5.75e+00  3.65e-01  2.93e+00  4.26e-03  5.84e-01  5.89e-01  
  2  +1.6225e-01  +1.1126e+00  9.50e-01  6.12e-02  6.42e-01  2.20e-02  1.53e-01  9.49e-01  
  3  +1.1222e-01  +4.8051e-01  3.68e-01  2.30e-02  2.43e-01  8.14e-03  6.79e-02  6.98e-01  
  4  +7.1338e-02  +2.0105e-01  1.30e-01  7.23e-03  7.60e-02  1.86e-03  2.49e-02  9.29e-01  
  5  +4.4711e-02  +5.9318e-02  1.46e-02  7.71e-04  8.10e-03  1.86e-04  2.89e-03  9.06e-01  
  6  +4.1363e-02  +4.2392e-02  1.03e-03  5.55e-05  5.77e-04  9.12e-06  2.16e-04  9.26e-01  
  7  +4.1112e-02  +4.1432e-02  3.20e-04  1.74e-05  1.77e-04  2.48e-06  8.35e-05  7.96e-01  
  8  +4.1007e-02  +4.1022e-02  1.53e-05  8.36e-07  8.49e-06  7.58e-08  4.47e-06  9.52e-01  
  9  +4.1000e-02  +4.1000e-02  1.55e-07  8.43e-09  8.57e-08  7.68e-10  4.60e-08  9.90e-01  
 10  +4.1000e-02  +4.1000e-02  1.55e-09  8.43e-11  8.56e-10  7.68e-12  4.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 344.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:12 PM: Optimal value: 4.100e-02
(CVXPY) Aug 30 12:08:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0410
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:12 PM: Your problem has 86 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 86
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 442
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6450e-01  +2.7087e+01  2.66e+01  8.65e-01  5.60e+00  1.00e+00  1.11e+00   ------   
  1  +3.5282e-01  +6.1048e+00  5.75e+00  3.65e-01  2.92e+00  4.26e-03  5.83e-01  5.89e-01  
  2  +1.5887e-01  +1.1270e+00  9.68e-01  6.22e-02  6.51e-01  2.19e-02  1.55e-01  9.43e-01  
  3  +1.0801e-01  +4.3475e-01  3.27e-01  2.05e-02  2.16e-01  7.10e-03  6.12e-02  7.50e-01  
  4  +7.0089e-02  +2.0179e-01  1.32e-01  7.37e-03  7.76e-02  2.15e-03  2.52e-02  8.32e-01  
  5  +4.4204e-02  +5.6665e-02  1.25e-02  6.67e-04  7.00e-03  1.68e-04  2.48e-03  9.23e-01  
  6  +4.1335e-02  +4.2286e-02  9.51e-04  5.23e-05  5.41e-04  8.78e-06  2.02e-04  9.19e-01  
  7  +4.1089e-02  +4.1349e-02  2.60e-04  1.46e-05  1.48e-04  2.07e-06  6.83e-05  7.89e-01  
  8  +4.1004e-02  +4.1013e-02  9.42e-06  5.32e-07  5.37e-06  5.50e-08  2.70e-06  9.62e-01  
  9  +4.1000e-02  +4.1000e-02  9.42e-08  5.33e-09  5.37e-08  5.50e-10  2.72e-08  9.90e-01  
 10  +4.1000e-02  +4.1000e-02  9.42e-10  5.33e-11  5.37e-10  5.50e-12  2.72e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 341.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:12 PM: Optimal value: 4.100e-02
(CVXPY) Aug 30 12:08:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.0410
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:12 PM: Your problem has 87 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 112
  nnz(P)        = 0
  nnz(A)        = 448
  cones (total) = 1
    : Nonnegative = 1,  numel = 112

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6448e-01  +2.7086e+01  2.66e+01  8.65e-01  5.60e+00  1.00e+00  1.11e+00   ------   
  1  +3.5230e-01  +6.1069e+00  5.75e+00  3.67e-01  2.92e+00  4.26e-03  5.84e-01  5.89e-01  
  2  +1.5538e-01  +1.1416e+00  9.86e-01  6.31e-02  6.60e-01  2.19e-02  1.58e-01  9.38e-01  
  3  +1.0270e-01  +3.5360e-01  2.51e-01  1.58e-02  1.66e-01  5.41e-03  4.83e-02  8.35e-01  
  4  +7.1838e-02  +2.0628e-01  1.34e-01  7.59e-03  8.01e-02  2.40e-03  2.57e-02  6.79e-01  
  5  +4.4459e-02  +5.7272e-02  1.28e-02  6.93e-04  7.26e-03  1.82e-04  2.56e-03  9.18e-01  
  6  +4.1356e-02  +4.2347e-02  9.91e-04  5.48e-05  5.68e-04  9.85e-06  2.11e-04  9.18e-01  
  7  +4.1105e-02  +4.1409e-02  3.04e-04  1.72e-05  1.74e-04  2.52e-06  7.96e-05  7.84e-01  
  8  +4.1005e-02  +4.1017e-02  1.19e-05  6.76e-07  6.82e-06  6.84e-08  3.42e-06  9.59e-01  
  9  +4.1000e-02  +4.1000e-02  1.20e-07  6.80e-09  6.86e-08  6.88e-10  3.47e-08  9.90e-01  
 10  +4.1000e-02  +4.1000e-02  1.20e-09  6.80e-11  6.86e-10  6.88e-12  3.48e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 337.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:12 PM: Optimal value: 4.100e-02
(CVXPY) Aug 30 12:08:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.96
  Our objective: 0.92

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0)            <-- (term's our objective: 0.16000000000000003)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0)            <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x2 = 1 AND x5 = 1 AND x0 = 0)            <-- (term's our objective: 0.07999999999999996)
 OR (x1 = 1 AND x0 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.19999999999999996)
 OR (x0 = 1 AND x1 = 1 AND x5 = 1 AND x2 = 0)            <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 0)            <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x2 = 1 AND x1 = 0 AND x4 = 0)            <-- (term's our objective: 0.07999999999999996)
 OR (x3 = 1 AND x0 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.16000000000000003)
 OR (x0 = 1 AND x4 = 1 AND x1 = 0 AND x2 = 0 AND x5 = 0) <-- (term's our objective: 0.040000000000000036)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0) <-- (term's our objective: 0.040000000000000036)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 4
  Shortest hamming distance: 2
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

