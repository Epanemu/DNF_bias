Command:
python test_script.py -s smallest_subclass -d 5 -n 10000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.036
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.06319999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:04 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:04 PM: Finished problem compilation (took 1.569e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  9.26e+01  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +1.0021e+03  1.00e+03  3.64e-01  5.41e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4629e-01  +1.4312e+02  1.43e+02  1.45e-01  2.69e+01  9.84e-03  2.35e-01  7.78e-01  
  3  +5.1095e-01  +3.4182e+01  3.37e+01  1.16e-01  2.11e+01  2.36e-05  2.32e-01  8.70e-02  
  4  +5.0019e-01  +1.1968e+00  6.97e-01  4.70e-03  8.67e-01  4.08e-06  1.38e-01  9.90e-01  
  5  +5.0002e-01  +6.1016e-01  1.10e-01  7.35e-04  1.37e-01  1.02e-06  3.84e-02  7.83e-01  
  6  +5.0001e-01  +5.7533e-01  7.53e-02  5.02e-04  9.35e-02  6.89e-07  2.35e-02  4.97e-01  
  7  +5.0000e-01  +5.2952e-01  2.95e-02  1.96e-04  3.65e-02  5.40e-07  5.40e-03  8.21e-01  
  8  +4.9932e-01  +6.1241e-01  1.13e-01  9.43e-05  1.76e-02  3.11e-05  3.19e-04  9.90e-01  
  9  +4.9660e-01  +5.6633e-01  6.97e-02  1.67e-05  3.12e-03  8.82e-05  5.54e-05  8.30e-01  
 10  +4.9410e-01  +5.1426e-01  2.02e-02  4.89e-06  9.14e-04  8.29e-07  1.71e-05  8.59e-01  
 11  +4.9297e-01  +5.0751e-01  1.45e-02  3.32e-06  6.22e-04  5.92e-07  1.20e-05  4.14e-01  
 12  +4.9238e-01  +5.0216e-01  9.78e-03  2.12e-06  3.96e-04  4.40e-07  7.96e-06  9.90e-01  
 13  +4.9030e-01  +4.9376e-01  3.46e-03  7.09e-07  1.33e-04  1.61e-07  2.79e-06  9.90e-01  
 14  +4.8914e-01  +4.8925e-01  1.11e-04  2.23e-08  4.17e-06  4.57e-09  9.08e-08  9.72e-01  
 15  +4.8910e-01  +4.8910e-01  1.13e-06  2.26e-10  4.23e-08  4.63e-11  9.22e-10  9.90e-01  
 16  +4.8910e-01  +4.8910e-01  1.13e-08  2.26e-12  4.23e-10  4.75e-13  9.44e-12  9.90e-01  
 17  +4.8910e-01  +4.8910e-01  1.13e-10  2.27e-14  4.23e-12  4.86e-15  9.67e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.5034ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:04 PM: Optimal value: 4.891e-01
(CVXPY) Aug 30 12:07:04 PM: Compilation took 1.569e-02 seconds
(CVXPY) Aug 30 12:07:04 PM: Solver (including time spent in interface) took 4.773e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:04 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:04 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 44969
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0017e+03  5.00e+03  9.85e-01  9.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.9953e-01  +1.0023e+03  1.00e+03  3.65e-01  5.49e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4620e-01  +1.4294e+02  1.42e+02  1.45e-01  2.72e+01  9.86e-03  2.35e-01  7.79e-01  
  3  +5.1090e-01  +3.4082e+01  3.36e+01  1.16e-01  2.14e+01  2.36e-05  2.32e-01  8.82e-02  
  4  +5.0049e-01  +2.1461e+00  1.65e+00  1.11e-02  2.05e+00  4.76e-06  1.80e-01  5.43e-01  
  5  +5.0007e-01  +8.7463e-01  3.75e-01  2.50e-03  4.70e-01  2.23e-06  9.86e-02  5.85e-01  
  6  +5.0002e-01  +6.4024e-01  1.40e-01  9.36e-04  1.77e-01  8.94e-07  4.05e-02  6.47e-01  
  7  +5.0001e-01  +5.7327e-01  7.33e-02  4.88e-04  9.21e-02  6.61e-07  1.34e-02  7.94e-01  
  8  +4.9998e-01  +5.7448e-01  7.45e-02  4.80e-04  9.06e-02  1.35e-06  5.58e-03  6.26e-01  
  9  +4.9797e-01  +5.5823e-01  6.03e-02  3.04e-05  5.78e-03  5.58e-05  9.58e-05  9.88e-01  
 10  +4.9651e-01  +5.4842e-01  5.19e-02  2.08e-05  3.94e-03  5.48e-05  6.52e-05  3.69e-01  
 11  +4.9537e-01  +5.4107e-01  4.57e-02  1.66e-05  3.14e-03  4.76e-05  5.19e-05  2.50e-01  
 12  +4.9548e-01  +5.3946e-01  4.40e-02  1.59e-05  3.02e-03  2.67e-05  4.97e-05  3.68e-01  
 13  +4.9001e-01  +5.0709e-01  1.71e-02  4.46e-06  8.47e-04  7.39e-06  1.39e-05  8.70e-01  
 14  +4.9012e-01  +5.0840e-01  1.83e-02  4.22e-06  8.01e-04  7.94e-06  1.28e-05  1.86e-01  
 15  +4.9014e-01  +5.0915e-01  1.90e-02  3.82e-06  7.24e-04  7.64e-06  1.12e-05  2.95e-01  
 16  +4.8990e-01  +5.0855e-01  1.86e-02  3.25e-06  6.16e-04  7.11e-06  9.41e-06  2.97e-01  
 17  +4.8952e-01  +5.0748e-01  1.80e-02  3.20e-06  6.07e-04  5.90e-06  9.34e-06  1.08e-01  
 18  +4.8818e-01  +5.0301e-01  1.48e-02  2.84e-06  5.39e-04  9.18e-07  8.62e-06  7.16e-01  
 19  +4.8577e-01  +4.9387e-01  8.10e-03  1.31e-06  2.49e-04  6.00e-07  3.82e-06  6.90e-01  
 20  +4.8554e-01  +4.9307e-01  7.53e-03  1.20e-06  2.27e-04  5.58e-07  3.54e-06  5.39e-01  
 21  +4.8314e-01  +4.8534e-01  2.20e-03  3.31e-07  6.27e-05  1.52e-07  9.81e-07  7.58e-01  
 22  +4.8313e-01  +4.8535e-01  2.21e-03  3.32e-07  6.29e-05  1.53e-07  9.80e-07  7.90e-03  
 23  +4.8305e-01  +4.8518e-01  2.13e-03  3.14e-07  5.96e-05  1.56e-07  9.18e-07  1.71e-01  
 24  +4.8212e-01  +4.8216e-01  3.90e-05  5.62e-09  1.07e-06  2.83e-09  1.64e-08  9.89e-01  
 25  +4.8210e-01  +4.8210e-01  3.90e-07  5.62e-11  1.07e-08  2.84e-11  1.64e-10  9.90e-01  
 26  +4.8210e-01  +4.8210e-01  3.90e-09  5.62e-13  1.07e-10  2.96e-13  1.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.2332ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:04 PM: Optimal value: 4.821e-01
(CVXPY) Aug 30 12:07:04 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:07:04 PM: Solver (including time spent in interface) took 7.855e-02 seconds
Iteration: 2, Objective: 0.4821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:04 PM: Your problem has 5031 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:04 PM: Finished problem compilation (took 1.575e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5031
  constraints   = 10031
  nnz(P)        = 0
  nnz(A)        = 50242
  cones (total) = 1
    : Nonnegative = 1,  numel = 10031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0013e+03  5.00e+03  9.85e-01  9.58e+01  1.00e+00  1.00e+00   ------   
  1  +5.9943e-01  +1.0027e+03  1.00e+03  3.65e-01  5.60e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4608e-01  +1.4271e+02  1.42e+02  1.45e-01  2.77e+01  9.88e-03  2.36e-01  7.80e-01  
  3  +5.1088e-01  +3.4035e+01  3.35e+01  1.16e-01  2.18e+01  2.37e-05  2.32e-01  8.91e-02  
  4  +5.0041e-01  +1.8905e+00  1.39e+00  9.37e-03  1.78e+00  4.64e-06  1.72e-01  6.24e-01  
  5  +5.0005e-01  +8.0045e-01  3.00e-01  2.01e-03  3.85e-01  2.09e-06  8.28e-02  6.72e-01  
  6  +5.0003e-01  +6.6811e-01  1.68e-01  1.12e-03  2.16e-01  1.26e-06  4.39e-02  5.41e-01  
  7  +5.0001e-01  +6.1987e-01  1.20e-01  7.98e-04  1.53e-01  1.22e-06  1.91e-02  6.82e-01  
  8  +4.9972e-01  +5.9100e-01  9.13e-02  3.18e-04  6.15e-02  9.61e-06  1.29e-03  9.90e-01  
  9  +4.9902e-01  +5.8470e-01  8.57e-02  1.16e-04  2.24e-02  2.75e-05  3.90e-04  7.24e-01  
 10  +4.9886e-01  +5.7993e-01  8.11e-02  8.19e-05  1.59e-02  2.43e-05  2.67e-04  5.96e-01  
 11  +4.9894e-01  +5.7713e-01  7.82e-02  5.94e-05  1.15e-02  1.29e-05  1.88e-04  8.29e-01  
 12  +4.9795e-01  +5.7069e-01  7.27e-02  3.29e-05  6.36e-03  1.67e-05  1.02e-04  6.27e-01  
 13  +4.9744e-01  +5.6855e-01  7.11e-02  2.68e-05  5.18e-03  1.71e-05  8.23e-05  3.01e-01  
 14  +4.9707e-01  +5.6721e-01  7.01e-02  2.55e-05  4.94e-03  1.48e-05  7.85e-05  1.91e-01  
 15  +4.9616e-01  +5.6349e-01  6.73e-02  2.12e-05  4.10e-03  1.49e-05  6.51e-05  2.36e-01  
 16  +4.9396e-01  +5.5350e-01  5.95e-02  1.65e-05  3.19e-03  1.23e-06  5.13e-05  9.90e-01  
 17  +4.8857e-01  +5.3302e-01  4.45e-02  9.74e-06  1.89e-03  1.39e-06  3.06e-05  6.03e-01  
 18  +4.7827e-01  +4.9310e-01  1.48e-02  2.81e-06  5.43e-04  4.95e-07  9.12e-06  7.94e-01  
 19  +4.7726e-01  +4.8976e-01  1.25e-02  2.22e-06  4.29e-04  4.68e-07  7.13e-06  2.79e-01  
 20  +4.7686e-01  +4.8832e-01  1.15e-02  2.08e-06  4.03e-04  4.84e-07  6.94e-06  2.65e-01  
 21  +4.7669e-01  +4.8787e-01  1.12e-02  1.98e-06  3.83e-04  5.97e-07  6.45e-06  4.66e-01  
 22  +4.7441e-01  +4.8014e-01  5.73e-03  9.58e-07  1.85e-04  3.32e-07  3.12e-06  5.80e-01  
 23  +4.7388e-01  +4.7827e-01  4.39e-03  7.29e-07  1.41e-04  3.14e-07  2.38e-06  9.90e-01  
 24  +4.7270e-01  +4.7448e-01  1.78e-03  2.90e-07  5.61e-05  1.30e-07  9.51e-07  6.37e-01  
 25  +4.7193e-01  +4.7199e-01  6.39e-05  1.04e-08  2.01e-06  4.70e-09  3.42e-08  9.90e-01  
 26  +4.7190e-01  +4.7190e-01  6.40e-07  1.04e-10  2.01e-08  4.70e-11  3.43e-10  9.90e-01  
 27  +4.7190e-01  +4.7190e-01  6.40e-09  1.04e-12  2.01e-10  4.74e-13  3.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.518ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:04 PM: Optimal value: 4.719e-01
(CVXPY) Aug 30 12:07:04 PM: Compilation took 1.575e-02 seconds
(CVXPY) Aug 30 12:07:04 PM: Solver (including time spent in interface) took 7.812e-02 seconds
Iteration: 3, Objective: 0.4719
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:04 PM: Your problem has 5039 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:04 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5039
  constraints   = 10039
  nnz(P)        = 0
  nnz(A)        = 53896
  cones (total) = 1
    : Nonnegative = 1,  numel = 10039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0013e+03  5.00e+03  9.85e-01  9.68e+01  1.00e+00  1.00e+00   ------   
  1  +5.9937e-01  +1.0030e+03  1.00e+03  3.65e-01  5.65e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4602e-01  +1.4258e+02  1.42e+02  1.45e-01  2.79e+01  9.90e-03  2.36e-01  7.80e-01  
  3  +5.1086e-01  +3.4013e+01  3.35e+01  1.16e-01  2.19e+01  2.37e-05  2.32e-01  8.95e-02  
  4  +5.0036e-01  +1.7606e+00  1.26e+00  8.51e-03  1.63e+00  4.57e-06  1.67e-01  6.75e-01  
  5  +5.0004e-01  +7.5582e-01  2.56e-01  1.71e-03  3.32e-01  1.90e-06  7.22e-02  7.02e-01  
  6  +5.0003e-01  +6.7983e-01  1.80e-01  1.20e-03  2.33e-01  1.45e-06  4.45e-02  4.58e-01  
  7  +5.0000e-01  +6.3279e-01  1.33e-01  8.83e-04  1.71e-01  1.60e-06  1.81e-02  7.11e-01  
  8  +4.9985e-01  +6.3164e-01  1.32e-01  6.32e-04  1.23e-01  6.48e-06  3.14e-03  9.21e-01  
  9  +4.9938e-01  +6.2413e-01  1.25e-01  2.56e-04  5.00e-02  1.95e-05  9.08e-04  7.26e-01  
 10  +4.9945e-01  +5.9287e-01  9.34e-02  1.26e-04  2.46e-02  1.08e-05  4.20e-04  9.90e-01  
 11  +4.9911e-01  +5.8995e-01  9.08e-02  8.41e-05  1.64e-02  1.45e-05  2.73e-04  4.23e-01  
 12  +4.9894e-01  +5.8593e-01  8.70e-02  5.41e-05  1.06e-02  7.49e-06  1.71e-04  9.90e-01  
 13  +4.9859e-01  +5.8394e-01  8.54e-02  4.36e-05  8.52e-03  8.44e-06  1.36e-04  2.62e-01  
 14  +4.9795e-01  +5.8102e-01  8.31e-02  2.97e-05  5.81e-03  6.24e-06  9.19e-05  8.50e-01  
 15  +4.9749e-01  +5.7916e-01  8.17e-02  2.89e-05  5.66e-03  5.49e-06  8.99e-05  1.87e-01  
 16  +4.9620e-01  +5.7349e-01  7.73e-02  2.35e-05  4.60e-03  5.44e-06  7.31e-05  3.09e-01  
 17  +4.9510e-01  +5.6892e-01  7.38e-02  2.14e-05  4.19e-03  4.32e-06  6.70e-05  3.85e-01  
 18  +4.9211e-01  +5.5633e-01  6.42e-02  1.69e-05  3.31e-03  3.12e-06  5.36e-05  5.73e-01  
 19  +4.8271e-01  +5.1878e-01  3.61e-02  7.50e-06  1.47e-03  1.77e-06  2.46e-05  7.05e-01  
 20  +4.8073e-01  +5.1135e-01  3.06e-02  6.17e-06  1.20e-03  1.51e-06  2.04e-05  2.23e-01  
 21  +4.7934e-01  +5.0569e-01  2.63e-02  5.17e-06  1.01e-03  1.40e-06  1.77e-05  8.88e-01  
 22  +4.7862e-01  +5.0297e-01  2.43e-02  4.72e-06  9.22e-04  1.35e-06  1.61e-05  3.94e-01  
 23  +4.7613e-01  +4.9359e-01  1.75e-02  3.31e-06  6.46e-04  1.01e-06  1.13e-05  5.88e-01  
 24  +4.7308e-01  +4.8278e-01  9.70e-03  1.78e-06  3.47e-04  5.71e-07  6.20e-06  5.62e-01  
 25  +4.7133e-01  +4.7646e-01  5.13e-03  9.24e-07  1.80e-04  3.06e-07  3.26e-06  4.92e-01  
 26  +4.7101e-01  +4.7532e-01  4.31e-03  7.88e-07  1.54e-04  2.47e-07  2.85e-06  4.51e-01  
 27  +4.7081e-01  +4.7448e-01  3.67e-03  6.69e-07  1.31e-04  2.21e-07  2.41e-06  5.90e-01  
 28  +4.7080e-01  +4.7447e-01  3.67e-03  6.68e-07  1.30e-04  2.22e-07  2.39e-06  5.96e-02  
 29  +4.6989e-01  +4.7127e-01  1.38e-03  2.48e-07  4.84e-05  8.74e-08  8.91e-07  7.38e-01  
 30  +4.6934e-01  +4.6944e-01  9.43e-05  1.68e-08  3.29e-06  5.22e-09  6.11e-08  9.84e-01  
 31  +4.6930e-01  +4.6930e-01  1.07e-06  1.91e-10  3.72e-08  5.93e-11  6.92e-10  9.89e-01  
 32  +4.6930e-01  +4.6930e-01  1.07e-08  1.91e-12  3.72e-10  5.93e-13  6.92e-12  9.90e-01  
 33  +4.6930e-01  +4.6930e-01  1.07e-10  1.91e-14  3.73e-12  6.70e-15  7.78e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 103.5488ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:05 PM: Optimal value: 4.693e-01
(CVXPY) Aug 30 12:07:05 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:07:05 PM: Solver (including time spent in interface) took 1.100e-01 seconds
Iteration: 4, Objective: 0.4693
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:05 PM: Your problem has 5041 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:05 PM: Finished problem compilation (took 1.574e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5041
  constraints   = 10041
  nnz(P)        = 0
  nnz(A)        = 54523
  cones (total) = 1
    : Nonnegative = 1,  numel = 10041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0013e+03  5.00e+03  9.85e-01  9.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.9937e-01  +1.0030e+03  1.00e+03  3.65e-01  5.66e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4600e-01  +1.4255e+02  1.42e+02  1.45e-01  2.79e+01  9.90e-03  2.36e-01  7.80e-01  
  3  +5.1086e-01  +3.4007e+01  3.35e+01  1.16e-01  2.20e+01  2.37e-05  2.32e-01  8.96e-02  
  4  +5.0035e-01  +1.7290e+00  1.23e+00  8.29e-03  1.59e+00  4.55e-06  1.66e-01  6.88e-01  
  5  +5.0004e-01  +7.5439e-01  2.54e-01  1.70e-03  3.30e-01  1.90e-06  7.16e-02  7.06e-01  
  6  +5.0003e-01  +6.8418e-01  1.84e-01  1.23e-03  2.39e-01  1.50e-06  4.61e-02  4.12e-01  
  7  +5.0000e-01  +6.3258e-01  1.33e-01  8.82e-04  1.71e-01  1.60e-06  1.88e-02  7.00e-01  
  8  +4.9978e-01  +6.4088e-01  1.41e-01  5.64e-04  1.10e-01  8.85e-06  2.46e-03  9.90e-01  
  9  +4.9906e-01  +6.2947e-01  1.30e-01  1.91e-04  3.72e-02  2.83e-05  6.55e-04  7.44e-01  
 10  +4.9935e-01  +6.0466e-01  1.05e-01  1.29e-04  2.53e-02  1.34e-05  4.29e-04  7.52e-01  
 11  +4.9876e-01  +5.9898e-01  1.00e-01  7.65e-05  1.50e-02  2.03e-05  2.47e-04  4.54e-01  
 12  +4.9883e-01  +5.9033e-01  9.15e-02  6.00e-05  1.17e-02  1.00e-05  1.90e-04  7.18e-01  
 13  +4.9885e-01  +5.8912e-01  9.03e-02  5.89e-05  1.15e-02  8.79e-06  1.87e-04  1.38e-01  
 14  +4.9791e-01  +5.8358e-01  8.57e-02  3.66e-05  7.16e-03  1.20e-05  1.14e-04  4.47e-01  
 15  +4.9782e-01  +5.8278e-01  8.50e-02  3.53e-05  6.90e-03  9.92e-06  1.10e-04  2.44e-01  
 16  +4.9665e-01  +5.7782e-01  8.12e-02  2.64e-05  5.16e-03  9.57e-06  8.19e-05  4.66e-01  
 17  +4.9452e-01  +5.6822e-01  7.37e-02  2.04e-05  4.00e-03  8.45e-06  6.39e-05  3.69e-01  
 18  +4.9131e-01  +5.5304e-01  6.17e-02  1.66e-05  3.24e-03  2.62e-06  5.29e-05  7.69e-01  
 19  +4.8532e-01  +5.2927e-01  4.39e-02  9.92e-06  1.94e-03  1.93e-06  3.24e-05  5.27e-01  
 20  +4.8181e-01  +5.1570e-01  3.39e-02  7.18e-06  1.40e-03  1.49e-06  2.38e-05  3.36e-01  
 21  +4.7812e-01  +5.0173e-01  2.36e-02  4.63e-06  9.05e-04  1.13e-06  1.56e-05  7.04e-01  
 22  +4.7187e-01  +4.7842e-01  6.55e-03  1.21e-06  2.37e-04  2.92e-07  4.26e-06  7.64e-01  
 23  +4.7111e-01  +4.7569e-01  4.57e-03  8.26e-07  1.61e-04  2.16e-07  2.91e-06  3.90e-01  
 24  +4.7109e-01  +4.7558e-01  4.49e-03  8.17e-07  1.60e-04  2.15e-07  2.88e-06  6.44e-02  
 25  +4.6999e-01  +4.7173e-01  1.74e-03  3.13e-07  6.11e-05  1.01e-07  1.12e-06  9.55e-01  
 26  +4.6934e-01  +4.6943e-01  8.81e-05  1.57e-08  3.07e-06  5.19e-09  5.69e-08  9.51e-01  
 27  +4.6930e-01  +4.6930e-01  9.01e-07  1.60e-10  3.14e-08  5.28e-11  5.82e-10  9.90e-01  
 28  +4.6930e-01  +4.6930e-01  9.01e-09  1.60e-12  3.14e-10  5.28e-13  5.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 86.6131ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:05 PM: Optimal value: 4.693e-01
(CVXPY) Aug 30 12:07:05 PM: Compilation took 1.574e-02 seconds
(CVXPY) Aug 30 12:07:05 PM: Solver (including time spent in interface) took 9.432e-02 seconds
Iteration: 5, Objective: 0.4693
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:07:05 PM: Your problem has 5042 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:07:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:07:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:07:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:07:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:07:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:07:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:07:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:07:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:07:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:07:05 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5042
  constraints   = 10042
  nnz(P)        = 0
  nnz(A)        = 54695
  cones (total) = 1
    : Nonnegative = 1,  numel = 10042

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0013e+03  5.00e+03  9.85e-01  9.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.9936e-01  +1.0030e+03  1.00e+03  3.65e-01  5.66e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4599e-01  +1.4253e+02  1.42e+02  1.45e-01  2.79e+01  9.90e-03  2.36e-01  7.80e-01  
  3  +5.1086e-01  +3.4003e+01  3.35e+01  1.16e-01  2.20e+01  2.37e-05  2.32e-01  8.96e-02  
  4  +5.0033e-01  +1.6724e+00  1.17e+00  7.91e-03  1.52e+00  4.52e-06  1.63e-01  7.12e-01  
  5  +5.0004e-01  +7.4341e-01  2.43e-01  1.63e-03  3.16e-01  1.83e-06  6.87e-02  7.05e-01  
  6  +5.0003e-01  +6.9702e-01  1.97e-01  1.32e-03  2.56e-01  1.55e-06  4.80e-02  4.00e-01  
  7  +5.0001e-01  +6.5641e-01  1.56e-01  1.04e-03  2.03e-01  1.59e-06  2.46e-02  5.93e-01  
  8  +4.9994e-01  +6.4140e-01  1.41e-01  8.40e-04  1.63e-01  3.91e-06  6.12e-03  8.43e-01  
  9  +4.9914e-01  +6.2693e-01  1.28e-01  1.95e-04  3.82e-02  2.83e-05  6.81e-04  9.01e-01  
 10  +4.9935e-01  +6.1869e-01  1.19e-01  1.79e-04  3.50e-02  2.00e-05  6.17e-04  3.21e-01  
 11  +4.9825e-01  +6.0434e-01  1.06e-01  7.56e-05  1.48e-02  3.81e-05  2.49e-04  6.40e-01  
 12  +4.9827e-01  +6.0331e-01  1.05e-01  7.46e-05  1.46e-02  3.61e-05  2.45e-04  6.06e-02  
 13  +4.9850e-01  +6.0152e-01  1.03e-01  7.03e-05  1.38e-02  2.90e-05  2.28e-04  2.67e-01  
 14  +4.9801e-01  +5.9515e-01  9.71e-02  5.09e-05  9.97e-03  2.87e-05  1.62e-04  4.56e-01  
 15  +4.9709e-01  +5.8926e-01  9.22e-02  3.69e-05  7.22e-03  3.28e-05  1.16e-04  3.44e-01  
 16  +4.9704e-01  +5.8668e-01  8.96e-02  3.55e-05  6.96e-03  2.49e-05  1.12e-04  2.40e-01  
 17  +4.9471e-01  +5.7455e-01  7.98e-02  2.35e-05  4.60e-03  2.37e-05  7.40e-05  4.94e-01  
 18  +4.9305e-01  +5.6638e-01  7.33e-02  2.00e-05  3.91e-03  2.00e-05  6.33e-05  2.43e-01  
 19  +4.9141e-01  +5.5597e-01  6.46e-02  1.75e-05  3.42e-03  7.30e-06  5.60e-05  5.66e-01  
 20  +4.8788e-01  +5.4091e-01  5.30e-02  1.28e-05  2.51e-03  5.01e-06  4.15e-05  4.43e-01  
 21  +4.8673e-01  +5.3601e-01  4.93e-02  1.16e-05  2.27e-03  3.73e-06  3.79e-05  3.47e-01  
 22  +4.7959e-01  +5.0732e-01  2.77e-02  5.71e-06  1.12e-03  1.79e-06  1.92e-05  6.26e-01  
 23  +4.7376e-01  +4.8559e-01  1.18e-02  2.22e-06  4.33e-04  6.09e-07  7.67e-06  9.19e-01  
 24  +4.7067e-01  +4.7412e-01  3.44e-03  6.26e-07  1.22e-04  1.80e-07  2.22e-06  7.28e-01  
 25  +4.7065e-01  +4.7397e-01  3.32e-03  6.11e-07  1.19e-04  1.67e-07  2.21e-06  1.64e-02  
 26  +4.7065e-01  +4.7398e-01  3.33e-03  6.12e-07  1.20e-04  1.71e-07  2.20e-06  4.12e-02  
 27  +4.7061e-01  +4.7391e-01  3.31e-03  5.94e-07  1.16e-04  1.78e-07  2.10e-06  1.08e-01  
 28  +4.6981e-01  +4.7101e-01  1.20e-03  2.15e-07  4.20e-05  7.47e-08  7.71e-07  9.90e-01  
 29  +4.6931e-01  +4.6935e-01  3.21e-05  5.72e-09  1.12e-06  1.83e-09  2.07e-08  9.78e-01  
 30  +4.6930e-01  +4.6930e-01  3.22e-07  5.73e-11  1.12e-08  1.83e-11  2.08e-10  9.90e-01  
 31  +4.6930e-01  +4.6930e-01  3.22e-09  5.73e-13  1.12e-10  1.83e-13  2.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.1209ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:07:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:07:05 PM: Optimal value: 4.693e-01
(CVXPY) Aug 30 12:07:05 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:07:05 PM: Solver (including time spent in interface) took 9.456e-02 seconds
FULL MODEL:
  Accruacy: 0.529
  Our objective: 0.058000000000000024

IF 
    (x0 = 1 AND x1 = 1 AND x4 = 0)                       <-- (term's our objective: 0.006199999999999983)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.03600000000000002)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.006400000000000031)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0) <-- (term's our objective: 0.005599999999999966)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0) <-- (term's our objective: 0.003800000000000029)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.03600000000000002
    Its accruacy: 0.518
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.03600000000000002
  Highest accruacy: 0.518
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

