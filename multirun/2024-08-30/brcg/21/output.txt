Command:
python test_script.py -s smallest_subclass -d 1 -n 1000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6239999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 1.

Computed total variation: 0.624
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:00:56 PM: Your problem has 503 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:00:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:00:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:00:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:00:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:00:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:00:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:00:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:00:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:00:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:00:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:00:56 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:00:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 503
  constraints   = 1003
  nnz(P)        = 0
  nnz(A)        = 2003
  cones (total) = 1
    : Nonnegative = 1,  numel = 1003

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9771e-01  +5.0215e+02  5.02e+02  9.45e-01  1.98e+01  1.00e+00  1.01e+00   ------   
  1  +6.6071e-01  +8.1064e+01  8.04e+01  2.13e-01  8.07e+00  4.90e-03  3.31e-01  7.60e-01  
  2  +5.4441e-01  +1.2918e+01  1.24e+01  9.47e-02  3.99e+00  4.63e-03  1.76e-01  6.23e-01  
  3  +4.9115e-01  +4.0220e+00  3.53e+00  2.92e-02  1.27e+00  1.87e-02  6.39e-02  9.90e-01  
  4  +4.2212e-01  +3.8660e+00  3.44e+00  7.03e-03  3.17e-01  6.85e-02  1.45e-02  7.75e-01  
  5  +3.8589e-01  +2.1920e+00  1.81e+00  4.79e-03  2.11e-01  4.96e-04  1.07e-02  4.97e-01  
  6  +2.6601e-01  +7.5974e-01  4.94e-01  1.32e-03  5.50e-02  4.33e-05  3.78e-03  7.28e-01  
  7  +1.9344e-01  +2.5593e-01  6.25e-02  1.94e-04  7.69e-03  4.13e-05  1.14e-03  9.34e-01  
  8  +1.8836e-01  +1.9003e-01  1.67e-03  5.19e-06  2.06e-04  3.61e-07  3.49e-05  9.71e-01  
  9  +1.8810e-01  +1.8812e-01  1.66e-05  5.15e-08  2.04e-06  3.61e-09  3.50e-07  9.90e-01  
 10  +1.8810e-01  +1.8810e-01  1.66e-07  5.15e-10  2.04e-08  3.61e-11  3.50e-09  9.90e-01  
 11  +1.8810e-01  +1.8810e-01  1.66e-09  5.15e-12  2.04e-10  3.61e-13  3.50e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8823ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:00:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:00:56 PM: Optimal value: 1.881e-01
(CVXPY) Aug 30 12:00:56 PM: Compilation took 5.001e-03 seconds
(CVXPY) Aug 30 12:00:56 PM: Solver (including time spent in interface) took 2.513e-03 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.812
  Our objective: 0.6240000000000001

IF 
    (x0 = 0) <-- (term's our objective: 0.6240000000000001)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.6240000000000001
    Its accruacy: 0.812
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.6240000000000001
  Highest accruacy: 0.812
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

