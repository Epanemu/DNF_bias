Command:
python test_script.py -s smallest_subclass -d 4 -n 1000 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.056
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.12000000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:38 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:38 PM: Finished problem compilation (took 5.784e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9980e-01  +5.0062e+02  5.00e+02  9.51e-01  2.65e+01  1.00e+00  1.00e+00   ------   
  1  +6.0781e-01  +9.7267e+01  9.67e+01  3.26e-01  1.46e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.4961e-01  +1.5238e+01  1.47e+01  1.24e-01  6.69e+00  8.33e-03  2.23e-01  7.38e-01  
  3  +5.0392e-01  +2.2193e+00  1.72e+00  3.54e-02  1.82e+00  1.02e-05  2.13e-01  2.33e-01  
  4  +5.0022e-01  +6.1361e-01  1.13e-01  2.43e-03  1.31e-01  3.35e-06  3.87e-02  9.39e-01  
  5  +4.9998e-01  +5.9466e-01  9.47e-02  1.89e-03  1.02e-01  5.93e-06  1.30e-02  7.46e-01  
  6  +4.9503e-01  +5.9012e-01  9.51e-02  2.69e-04  1.47e-02  7.31e-05  8.82e-04  9.50e-01  
  7  +4.8424e-01  +5.1713e-01  3.29e-02  7.75e-05  4.23e-03  8.97e-06  2.83e-04  8.40e-01  
  8  +4.7737e-01  +4.8963e-01  1.23e-02  2.52e-05  1.37e-03  4.06e-06  9.99e-05  8.34e-01  
  9  +4.7401e-01  +4.7654e-01  2.53e-03  5.00e-06  2.73e-04  1.19e-06  2.07e-05  9.90e-01  
 10  +4.7311e-01  +4.7315e-01  3.47e-05  6.84e-08  3.73e-06  1.57e-08  2.86e-07  9.87e-01  
 11  +4.7310e-01  +4.7310e-01  3.47e-07  6.84e-10  3.73e-08  1.57e-10  2.86e-09  9.90e-01  
 12  +4.7310e-01  +4.7310e-01  3.47e-09  6.84e-12  3.73e-10  1.57e-12  2.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.649ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:38 PM: Optimal value: 4.731e-01
(CVXPY) Aug 30 12:04:38 PM: Compilation took 5.784e-03 seconds
(CVXPY) Aug 30 12:04:38 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4731
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:38 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:38 PM: Finished problem compilation (took 2.477e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4323
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9969e-01  +5.0116e+02  5.01e+02  9.52e-01  2.77e+01  1.00e+00  1.01e+00   ------   
  1  +6.0649e-01  +9.7701e+01  9.71e+01  3.30e-01  1.52e+01  4.08e-03  4.81e-01  6.65e-01  
  2  +5.4816e-01  +1.4951e+01  1.44e+01  1.23e-01  6.81e+00  8.60e-03  2.23e-01  7.51e-01  
  3  +5.0348e-01  +2.1408e+00  1.64e+00  3.41e-02  1.83e+00  1.03e-05  2.11e-01  2.74e-01  
  4  +5.0080e-01  +8.9121e-01  3.90e-01  8.40e-03  4.65e-01  4.26e-06  9.28e-02  6.17e-01  
  5  +5.0012e-01  +6.9622e-01  1.96e-01  4.06e-03  2.26e-01  4.89e-06  3.03e-02  7.93e-01  
  6  +4.9338e-01  +8.2827e-01  3.35e-01  1.15e-03  6.50e-02  5.87e-05  3.79e-03  9.71e-01  
  7  +4.8254e-01  +6.2023e-01  1.38e-01  4.12e-04  2.33e-02  2.68e-05  1.42e-03  7.51e-01  
  8  +4.7624e-01  +5.6167e-01  8.54e-02  2.27e-04  1.28e-02  2.14e-05  7.79e-04  5.96e-01  
  9  +4.7543e-01  +5.5648e-01  8.11e-02  1.93e-04  1.09e-02  2.47e-05  6.32e-04  3.22e-01  
 10  +4.7706e-01  +5.5790e-01  8.08e-02  1.78e-04  1.01e-02  3.30e-05  5.60e-04  5.36e-01  
 11  +4.7351e-01  +5.4126e-01  6.78e-02  1.24e-04  7.05e-03  3.19e-05  3.89e-04  3.23e-01  
 12  +4.6934e-01  +5.1940e-01  5.01e-02  1.09e-04  6.18e-03  2.08e-05  3.61e-04  4.88e-01  
 13  +4.5889e-01  +4.7648e-01  1.76e-02  2.91e-05  1.65e-03  1.09e-05  9.41e-05  7.50e-01  
 14  +4.5246e-01  +4.5307e-01  6.11e-04  1.00e-06  5.67e-05  3.74e-07  3.30e-06  9.90e-01  
 15  +4.5220e-01  +4.5221e-01  6.12e-06  1.00e-08  5.68e-07  3.74e-09  3.31e-08  9.90e-01  
 16  +4.5220e-01  +4.5220e-01  6.12e-08  1.00e-10  5.68e-09  3.74e-11  3.31e-10  9.90e-01  
 17  +4.5220e-01  +4.5220e-01  6.12e-10  1.00e-12  5.68e-11  3.75e-13  3.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9201ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:38 PM: Optimal value: 4.522e-01
(CVXPY) Aug 30 12:04:38 PM: Compilation took 2.477e-03 seconds
(CVXPY) Aug 30 12:04:38 PM: Solver (including time spent in interface) took 4.387e-03 seconds
Iteration: 2, Objective: 0.4522
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:38 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:38 PM: Finished problem compilation (took 2.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 4633
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0096e+02  5.00e+02  9.52e-01  2.79e+01  1.00e+00  1.01e+00   ------   
  1  +6.0513e-01  +9.8089e+01  9.75e+01  3.34e-01  1.53e+01  4.07e-03  4.85e-01  6.62e-01  
  2  +5.4768e-01  +1.4877e+01  1.43e+01  1.22e-01  6.80e+00  8.78e-03  2.22e-01  7.59e-01  
  3  +5.0362e-01  +2.1934e+00  1.69e+00  3.53e-02  1.90e+00  1.10e-05  2.10e-01  2.77e-01  
  4  +5.0067e-01  +8.3725e-01  3.37e-01  7.29e-03  4.06e-01  4.31e-06  8.04e-02  6.80e-01  
  5  +5.0007e-01  +8.2011e-01  3.20e-01  5.90e-03  3.31e-01  1.03e-05  2.93e-02  8.28e-01  
  6  +4.9461e-01  +7.4263e-01  2.48e-01  1.19e-03  6.81e-02  4.61e-05  3.94e-03  8.82e-01  
  7  +4.9482e-01  +7.3256e-01  2.38e-01  1.05e-03  5.99e-02  4.96e-05  3.41e-03  3.77e-01  
  8  +4.8699e-01  +6.5805e-01  1.71e-01  5.34e-04  3.05e-02  4.89e-05  1.76e-03  5.50e-01  
  9  +4.8296e-01  +6.3445e-01  1.51e-01  3.82e-04  2.18e-02  5.17e-05  1.25e-03  3.75e-01  
 10  +4.7986e-01  +6.1115e-01  1.31e-01  3.60e-04  2.06e-02  4.03e-05  1.22e-03  1.99e-01  
 11  +4.6569e-01  +5.3923e-01  7.35e-02  1.54e-04  8.75e-03  2.86e-05  5.29e-04  6.35e-01  
 12  +4.6186e-01  +5.2237e-01  6.05e-02  1.21e-04  6.88e-03  2.44e-05  4.21e-04  2.47e-01  
 13  +4.5751e-01  +4.9994e-01  4.24e-02  8.24e-05  4.69e-03  2.10e-05  2.95e-04  6.98e-01  
 14  +4.4550e-01  +4.5100e-01  5.50e-03  1.04e-05  5.90e-04  2.31e-06  4.00e-05  9.90e-01  
 15  +4.4350e-01  +4.4377e-01  2.65e-04  4.95e-07  2.82e-05  1.16e-07  1.96e-06  9.64e-01  
 16  +4.4340e-01  +4.4340e-01  2.70e-06  5.05e-09  2.87e-07  1.18e-09  2.00e-08  9.90e-01  
 17  +4.4340e-01  +4.4340e-01  2.70e-08  5.05e-11  2.87e-09  1.18e-11  2.00e-10  9.90e-01  
 18  +4.4340e-01  +4.4340e-01  2.70e-10  5.05e-13  2.87e-11  1.18e-13  2.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2815ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:38 PM: Optimal value: 4.434e-01
(CVXPY) Aug 30 12:04:38 PM: Compilation took 2.993e-03 seconds
(CVXPY) Aug 30 12:04:38 PM: Solver (including time spent in interface) took 3.568e-03 seconds
Iteration: 3, Objective: 0.4434
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:38 PM: Your problem has 528 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:38 PM: Finished problem compilation (took 9.071e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 528
  constraints   = 1028
  nnz(P)        = 0
  nnz(A)        = 4777
  cones (total) = 1
    : Nonnegative = 1,  numel = 1028

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0092e+02  5.00e+02  9.52e-01  2.80e+01  1.00e+00  1.01e+00   ------   
  1  +6.0457e-01  +9.8329e+01  9.77e+01  3.35e-01  1.54e+01  4.07e-03  4.86e-01  6.61e-01  
  2  +5.4728e-01  +1.4804e+01  1.43e+01  1.22e-01  6.80e+00  8.89e-03  2.22e-01  7.64e-01  
  3  +5.0373e-01  +2.2289e+00  1.73e+00  3.61e-02  1.94e+00  1.14e-05  2.09e-01  2.78e-01  
  4  +5.0061e-01  +8.1146e-01  3.11e-01  6.74e-03  3.77e-01  4.41e-06  7.45e-02  7.12e-01  
  5  +4.9984e-01  +1.1379e+00  6.38e-01  7.00e-03  3.97e-01  2.83e-05  2.46e-02  9.90e-01  
  6  +4.9078e-01  +8.1399e-01  3.23e-01  9.45e-04  5.42e-02  7.67e-05  3.06e-03  8.78e-01  
  7  +4.8776e-01  +7.7725e-01  2.89e-01  7.45e-04  4.28e-02  8.16e-05  2.40e-03  3.38e-01  
  8  +4.8429e-01  +7.2134e-01  2.37e-01  5.96e-04  3.42e-02  7.26e-05  1.94e-03  3.83e-01  
  9  +4.7290e-01  +6.1460e-01  1.42e-01  3.47e-04  1.99e-02  4.12e-05  1.20e-03  5.70e-01  
 10  +4.5327e-01  +4.9337e-01  4.01e-02  8.71e-05  4.97e-03  1.05e-05  3.26e-04  8.01e-01  
 11  +4.5131e-01  +4.8525e-01  3.39e-02  7.29e-05  4.16e-03  9.49e-06  2.80e-04  2.74e-01  
 12  +4.4898e-01  +4.7682e-01  2.78e-02  5.67e-05  3.24e-03  9.75e-06  2.18e-04  4.39e-01  
 13  +4.4419e-01  +4.5549e-01  1.13e-02  2.24e-05  1.28e-03  5.33e-06  9.00e-05  8.76e-01  
 14  +4.4052e-01  +4.4086e-01  3.39e-04  6.69e-07  3.81e-05  1.34e-07  2.80e-06  9.73e-01  
 15  +4.4040e-01  +4.4040e-01  3.40e-06  6.72e-09  3.83e-07  1.34e-09  2.82e-08  9.90e-01  
 16  +4.4040e-01  +4.4040e-01  3.40e-08  6.72e-11  3.83e-09  1.34e-11  2.82e-10  9.90e-01  
 17  +4.4040e-01  +4.4040e-01  3.40e-10  6.72e-13  3.83e-11  1.35e-13  2.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.124ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:38 PM: Optimal value: 4.404e-01
(CVXPY) Aug 30 12:04:38 PM: Compilation took 9.071e-03 seconds
(CVXPY) Aug 30 12:04:38 PM: Solver (including time spent in interface) took 3.815e-03 seconds
FULL MODEL:
  Accruacy: 0.558
  Our objective: 0.11600000000000005

IF 
    (x0 = 1 AND x1 = 1 AND x2 = 0)            <-- (term's our objective: 0.04000000000000001)
 OR (x2 = 1 AND x3 = 1 AND x1 = 0)            <-- (term's our objective: 0.014000000000000012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.05599999999999997)
 OR (x1 = 1 AND x3 = 1 AND x0 = 0 AND x2 = 0) <-- (term's our objective: 0.006000000000000054)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.05599999999999997
    Its accruacy: 0.528
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.05599999999999997
  Highest accruacy: 0.528
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

