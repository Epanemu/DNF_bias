Command:
python test_script.py -s smallest_subclass -d 7 -n 1000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.02
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 7.

Computed total variation: 0.28600000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:11 PM: Your problem has 515 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:11 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 515
  constraints   = 1015
  nnz(P)        = 0
  nnz(A)        = 5015
  cones (total) = 1
    : Nonnegative = 1,  numel = 1015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9993e-01  +5.0064e+02  5.00e+02  9.54e-01  3.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.8786e-01  +1.0546e+02  1.05e+02  3.89e-01  2.00e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3680e-01  +1.3264e+01  1.27e+01  1.35e-01  8.72e+00  1.33e-02  2.50e-01  8.80e-01  
  3  +5.0650e-01  +3.1389e+00  2.63e+00  5.38e-02  3.35e+00  2.97e-05  2.31e-01  3.06e-01  
  4  +5.0026e-01  +6.3766e-01  1.37e-01  3.02e-03  1.98e-01  8.80e-06  4.69e-02  9.90e-01  
  5  +5.0000e-01  +5.5759e-01  5.76e-02  1.24e-03  8.13e-02  7.00e-06  1.20e-02  8.19e-01  
  6  +4.9723e-01  +6.1377e-01  1.17e-01  4.66e-04  3.11e-02  9.11e-05  1.55e-03  9.59e-01  
  7  +4.9155e-01  +5.4374e-01  5.22e-02  1.35e-04  9.04e-03  5.85e-05  4.60e-04  7.58e-01  
  8  +4.8526e-01  +4.9997e-01  1.47e-02  3.33e-05  2.22e-03  1.07e-05  1.25e-04  8.12e-01  
  9  +4.8218e-01  +4.8579e-01  3.61e-03  7.45e-06  4.97e-04  2.41e-06  3.07e-05  7.81e-01  
 10  +4.8114e-01  +4.8127e-01  1.31e-04  2.62e-07  1.75e-05  7.02e-08  1.12e-06  9.81e-01  
 11  +4.8110e-01  +4.8110e-01  1.31e-06  2.62e-09  1.75e-07  7.02e-10  1.12e-08  9.90e-01  
 12  +4.8110e-01  +4.8110e-01  1.31e-08  2.62e-11  1.75e-09  7.04e-12  1.12e-10  9.90e-01  
 13  +4.8110e-01  +4.8110e-01  1.31e-10  2.62e-13  1.75e-11  7.06e-14  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0615ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:11 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:11 PM: Optimal value: 4.811e-01
(CVXPY) Aug 30 12:13:11 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:13:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4811
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:12 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 5601
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9982e-01  +5.0095e+02  5.00e+02  9.54e-01  3.29e+01  1.00e+00  1.00e+00   ------   
  1  +5.8659e-01  +1.0554e+02  1.05e+02  3.90e-01  2.01e+01  3.86e-03  5.47e-01  6.11e-01  
  2  +5.3538e-01  +1.2965e+01  1.24e+01  1.31e-01  8.55e+00  1.35e-02  2.44e-01  8.96e-01  
  3  +5.0576e-01  +2.9887e+00  2.48e+00  5.10e-02  3.22e+00  2.98e-05  2.21e-01  3.71e-01  
  4  +5.0106e-01  +9.9536e-01  4.94e-01  1.09e-02  7.13e-01  1.16e-05  9.92e-02  6.40e-01  
  5  +4.9997e-01  +7.3322e-01  2.33e-01  4.69e-03  3.12e-01  1.42e-05  2.57e-02  8.83e-01  
  6  +4.9184e-01  +6.8766e-01  1.96e-01  7.40e-04  5.03e-02  1.12e-04  2.22e-03  9.25e-01  
  7  +4.8373e-01  +6.2494e-01  1.41e-01  4.60e-04  3.12e-02  7.53e-05  1.43e-03  4.60e-01  
  8  +4.7955e-01  +6.0430e-01  1.25e-01  3.37e-04  2.28e-02  7.14e-05  1.03e-03  3.92e-01  
  9  +4.7101e-01  +5.5719e-01  8.62e-02  1.99e-04  1.34e-02  4.24e-05  6.15e-04  7.51e-01  
 10  +4.7020e-01  +5.5443e-01  8.42e-02  1.76e-04  1.19e-02  4.42e-05  5.39e-04  3.94e-01  
 11  +4.5841e-01  +5.0405e-01  4.56e-02  8.21e-05  5.53e-03  2.49e-05  2.61e-04  9.85e-01  
 12  +4.4637e-01  +4.5994e-01  1.36e-02  2.22e-05  1.49e-03  7.15e-06  7.35e-05  7.96e-01  
 13  +4.4353e-01  +4.4865e-01  5.12e-03  8.32e-06  5.59e-04  3.78e-06  2.80e-05  9.90e-01  
 14  +4.4125e-01  +4.4137e-01  1.15e-04  1.86e-07  1.25e-05  7.78e-08  6.31e-07  9.80e-01  
 15  +4.4120e-01  +4.4120e-01  1.15e-06  1.86e-09  1.25e-07  7.78e-10  6.32e-09  9.90e-01  
 16  +4.4120e-01  +4.4120e-01  1.15e-08  1.86e-11  1.25e-09  7.79e-12  6.32e-11  9.90e-01  
 17  +4.4120e-01  +4.4120e-01  1.15e-10  1.86e-13  1.25e-11  7.80e-14  6.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.5528ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:12 PM: Optimal value: 4.412e-01
(CVXPY) Aug 30 12:13:12 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:13:12 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 2, Objective: 0.4412
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:12 PM: Your problem has 535 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Finished problem compilation (took 1.556e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 535
  constraints   = 1035
  nnz(P)        = 0
  nnz(A)        = 6046
  cones (total) = 1
    : Nonnegative = 1,  numel = 1035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0134e+02  5.01e+02  9.55e-01  3.30e+01  1.00e+00  1.01e+00   ------   
  1  +5.8560e-01  +1.0564e+02  1.05e+02  3.92e-01  2.02e+01  3.86e-03  5.48e-01  6.11e-01  
  2  +5.3456e-01  +1.2801e+01  1.23e+01  1.30e-01  8.40e+00  1.36e-02  2.41e-01  9.06e-01  
  3  +5.0540e-01  +2.9166e+00  2.41e+00  4.97e-02  3.15e+00  3.01e-05  2.14e-01  4.10e-01  
  4  +5.0132e-01  +1.1471e+00  6.46e-01  1.41e-02  9.30e-01  1.32e-05  1.07e-01  5.64e-01  
  5  +4.9938e-01  +7.9882e-01  2.99e-01  5.17e-03  3.47e-01  2.31e-05  2.10e-02  9.49e-01  
  6  +4.8854e-01  +7.4039e-01  2.52e-01  9.36e-04  6.41e-02  1.28e-04  2.72e-03  8.79e-01  
  7  +4.7709e-01  +6.9621e-01  2.19e-01  5.56e-04  3.79e-02  1.40e-04  1.66e-03  4.94e-01  
  8  +4.6736e-01  +6.4835e-01  1.81e-01  4.37e-04  2.97e-02  8.92e-05  1.36e-03  5.53e-01  
  9  +4.4135e-01  +5.3489e-01  9.35e-02  1.90e-04  1.29e-02  3.69e-05  6.41e-04  9.66e-01  
 10  +4.1733e-01  +4.3885e-01  2.15e-02  4.09e-05  2.75e-03  6.78e-06  1.52e-04  8.23e-01  
 11  +4.1018e-01  +4.1212e-01  1.94e-03  3.62e-06  2.44e-04  1.01e-06  1.42e-05  9.90e-01  
 12  +4.0941e-01  +4.0943e-01  2.08e-05  3.87e-08  2.60e-06  1.05e-08  1.53e-07  9.89e-01  
 13  +4.0940e-01  +4.0940e-01  2.08e-07  3.87e-10  2.60e-08  1.05e-10  1.53e-09  9.90e-01  
 14  +4.0940e-01  +4.0940e-01  2.08e-09  3.87e-12  2.60e-10  1.05e-12  1.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7528ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:12 PM: Optimal value: 4.094e-01
(CVXPY) Aug 30 12:13:12 PM: Compilation took 1.556e-02 seconds
(CVXPY) Aug 30 12:13:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.4094
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:12 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6228
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9969e-01  +5.0145e+02  5.01e+02  9.55e-01  3.29e+01  1.00e+00  1.01e+00   ------   
  1  +5.8445e-01  +1.0575e+02  1.05e+02  3.94e-01  2.00e+01  3.86e-03  5.49e-01  6.10e-01  
  2  +5.3380e-01  +1.2651e+01  1.21e+01  1.28e-01  8.24e+00  1.38e-02  2.38e-01  9.15e-01  
  3  +5.0520e-01  +2.8794e+00  2.37e+00  4.91e-02  3.10e+00  3.08e-05  2.09e-01  4.39e-01  
  4  +5.0122e-01  +1.1439e+00  6.43e-01  1.41e-02  9.24e-01  1.36e-05  9.88e-02  5.83e-01  
  5  +4.9876e-01  +9.7929e-01  4.81e-01  6.49e-03  4.38e-01  3.70e-05  2.18e-02  9.09e-01  
  6  +4.8352e-01  +8.4405e-01  3.61e-01  1.11e-03  7.60e-02  1.54e-04  3.19e-03  8.63e-01  
  7  +4.7198e-01  +7.8770e-01  3.16e-01  7.47e-04  5.09e-02  1.59e-04  2.20e-03  3.89e-01  
  8  +4.5123e-01  +6.4295e-01  1.92e-01  4.57e-04  3.09e-02  6.77e-05  1.46e-03  6.59e-01  
  9  +4.2775e-01  +5.3203e-01  1.04e-01  2.22e-04  1.49e-02  3.48e-05  7.74e-04  5.14e-01  
 10  +4.2240e-01  +5.0816e-01  8.58e-02  1.78e-04  1.20e-02  2.92e-05  6.38e-04  2.10e-01  
 11  +4.2142e-01  +5.0056e-01  7.91e-02  1.65e-04  1.11e-02  3.27e-05  6.01e-04  4.18e-01  
 12  +4.1420e-01  +4.6852e-01  5.43e-02  1.12e-04  7.49e-03  2.33e-05  4.23e-04  4.14e-01  
 13  +4.1128e-01  +4.5601e-01  4.47e-02  9.11e-05  6.11e-03  2.03e-05  3.47e-04  3.15e-01  
 14  +4.0664e-01  +4.3753e-01  3.09e-02  6.16e-05  4.13e-03  1.45e-05  2.40e-04  4.07e-01  
 15  +3.9702e-01  +3.9818e-01  1.16e-03  2.28e-06  1.53e-04  4.01e-07  9.50e-06  9.70e-01  
 16  +3.9660e-01  +3.9662e-01  1.18e-05  2.33e-08  1.56e-06  4.04e-09  9.75e-08  9.90e-01  
 17  +3.9660e-01  +3.9660e-01  1.18e-07  2.33e-10  1.56e-08  4.04e-11  9.75e-10  9.90e-01  
 18  +3.9660e-01  +3.9660e-01  1.18e-09  2.33e-12  1.56e-10  4.04e-13  9.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.3362ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:12 PM: Optimal value: 3.966e-01
(CVXPY) Aug 30 12:13:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:12 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 4, Objective: 0.3966
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:12 PM: Your problem has 555 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 555
  constraints   = 1055
  nnz(P)        = 0
  nnz(A)        = 6391
  cones (total) = 1
    : Nonnegative = 1,  numel = 1055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0145e+02  5.01e+02  9.55e-01  3.28e+01  1.00e+00  1.01e+00   ------   
  1  +5.8296e-01  +1.0584e+02  1.05e+02  3.95e-01  1.99e+01  3.86e-03  5.49e-01  6.10e-01  
  2  +5.3308e-01  +1.2515e+01  1.20e+01  1.26e-01  8.05e+00  1.39e-02  2.35e-01  9.24e-01  
  3  +5.0497e-01  +2.8395e+00  2.33e+00  4.83e-02  3.05e+00  3.15e-05  2.03e-01  4.71e-01  
  4  +5.0116e-01  +1.1757e+00  6.75e-01  1.47e-02  9.62e-01  1.46e-05  9.32e-02  5.86e-01  
  5  +4.9539e-01  +1.1252e+00  6.30e-01  4.73e-03  3.22e-01  7.47e-05  1.38e-02  9.60e-01  
  6  +4.7711e-01  +8.9646e-01  4.19e-01  1.27e-03  8.63e-02  1.38e-04  3.65e-03  7.47e-01  
  7  +4.6496e-01  +8.2936e-01  3.64e-01  8.41e-04  5.71e-02  1.48e-04  2.47e-03  4.32e-01  
  8  +4.5186e-01  +6.8549e-01  2.34e-01  6.42e-04  4.33e-02  7.46e-05  2.05e-03  6.77e-01  
  9  +4.1938e-01  +5.2719e-01  1.08e-01  2.30e-04  1.54e-02  3.86e-05  8.02e-04  6.71e-01  
 10  +4.0607e-01  +4.6506e-01  5.90e-02  1.22e-04  8.17e-03  2.16e-05  4.53e-04  4.92e-01  
 11  +3.9661e-01  +4.1977e-01  2.32e-02  4.71e-05  3.15e-03  1.25e-05  1.84e-04  9.90e-01  
 12  +3.8945e-01  +3.9101e-01  1.56e-03  3.17e-06  2.11e-04  7.40e-07  1.31e-05  9.42e-01  
 13  +3.8892e-01  +3.8897e-01  5.09e-05  1.03e-07  6.87e-06  1.95e-08  4.42e-07  9.85e-01  
 14  +3.8890e-01  +3.8890e-01  5.12e-07  1.04e-09  6.91e-08  1.96e-10  4.46e-09  9.90e-01  
 15  +3.8890e-01  +3.8890e-01  5.12e-09  1.04e-11  6.90e-10  1.96e-12  4.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6067ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:12 PM: Optimal value: 3.889e-01
(CVXPY) Aug 30 12:13:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:12 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 5, Objective: 0.3889
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:12 PM: Your problem has 565 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 565
  constraints   = 1065
  nnz(P)        = 0
  nnz(A)        = 6562
  cones (total) = 1
    : Nonnegative = 1,  numel = 1065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0147e+02  5.01e+02  9.55e-01  3.27e+01  1.00e+00  1.01e+00   ------   
  1  +5.8246e-01  +1.0583e+02  1.05e+02  3.96e-01  1.98e+01  3.86e-03  5.49e-01  6.10e-01  
  2  +5.3270e-01  +1.2428e+01  1.19e+01  1.25e-01  7.91e+00  1.40e-02  2.33e-01  9.28e-01  
  3  +5.0486e-01  +2.8137e+00  2.31e+00  4.80e-02  3.01e+00  3.17e-05  1.99e-01  4.89e-01  
  4  +5.0119e-01  +1.2123e+00  7.11e-01  1.55e-02  1.01e+00  1.52e-05  9.29e-02  5.74e-01  
  5  +4.9515e-01  +1.1594e+00  6.64e-01  4.87e-03  3.31e-01  7.74e-05  1.40e-02  9.63e-01  
  6  +4.7617e-01  +9.1383e-01  4.38e-01  1.29e-03  8.81e-02  1.42e-04  3.69e-03  7.59e-01  
  7  +4.6500e-01  +8.5037e-01  3.85e-01  9.19e-04  6.23e-02  1.48e-04  2.68e-03  3.79e-01  
  8  +4.4494e-01  +6.7195e-01  2.27e-01  5.70e-04  3.84e-02  7.40e-05  1.80e-03  7.18e-01  
  9  +4.1808e-01  +5.3871e-01  1.21e-01  2.65e-04  1.77e-02  4.25e-05  9.17e-04  6.44e-01  
 10  +3.9896e-01  +4.5103e-01  5.21e-02  1.09e-04  7.25e-03  1.80e-05  4.07e-04  6.05e-01  
 11  +3.9049e-01  +4.1139e-01  2.09e-02  4.31e-05  2.87e-03  1.02e-05  1.72e-04  9.90e-01  
 12  +3.8912e-01  +4.0569e-01  1.66e-02  3.42e-05  2.27e-03  8.22e-06  1.37e-04  3.21e-01  
 13  +3.8674e-01  +3.9756e-01  1.08e-02  2.19e-05  1.46e-03  5.56e-06  8.82e-05  5.58e-01  
 14  +3.8330e-01  +3.8385e-01  5.55e-04  1.12e-06  7.46e-05  2.67e-07  4.68e-06  9.48e-01  
 15  +3.8310e-01  +3.8311e-01  6.88e-06  1.39e-08  9.22e-07  3.10e-09  5.86e-08  9.89e-01  
 16  +3.8310e-01  +3.8310e-01  6.89e-08  1.39e-10  9.22e-09  3.10e-11  5.86e-10  9.90e-01  
 17  +3.8310e-01  +3.8310e-01  6.89e-10  1.39e-12  9.23e-11  3.12e-13  5.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.9269ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:12 PM: Optimal value: 3.831e-01
(CVXPY) Aug 30 12:13:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.3831
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:12 PM: Your problem has 575 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 575
  constraints   = 1075
  nnz(P)        = 0
  nnz(A)        = 6661
  cones (total) = 1
    : Nonnegative = 1,  numel = 1075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0150e+02  5.01e+02  9.56e-01  3.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.8146e-01  +1.0599e+02  1.05e+02  3.98e-01  1.97e+01  3.86e-03  5.50e-01  6.09e-01  
  2  +5.3232e-01  +1.2366e+01  1.18e+01  1.24e-01  7.81e+00  1.41e-02  2.31e-01  9.34e-01  
  3  +5.0480e-01  +2.8074e+00  2.30e+00  4.79e-02  3.00e+00  3.23e-05  1.97e-01  5.04e-01  
  4  +5.0116e-01  +1.2290e+00  7.28e-01  1.58e-02  1.03e+00  1.59e-05  9.07e-02  5.75e-01  
  5  +4.9310e-01  +1.3552e+00  8.62e-01  4.82e-03  3.26e-01  1.09e-04  1.34e-02  9.90e-01  
  6  +4.7095e-01  +1.0057e+00  5.35e-01  1.44e-03  9.77e-02  1.47e-04  4.10e-03  7.05e-01  
  7  +4.5553e-01  +8.8968e-01  4.34e-01  9.75e-04  6.57e-02  1.40e-04  2.88e-03  3.82e-01  
  8  +4.3858e-01  +6.8592e-01  2.47e-01  6.15e-04  4.11e-02  1.04e-04  1.99e-03  8.34e-01  
  9  +3.9920e-01  +4.6890e-01  6.97e-02  1.51e-04  9.99e-03  2.01e-05  5.62e-04  7.56e-01  
 10  +3.9703e-01  +4.6024e-01  6.32e-02  1.34e-04  8.87e-03  1.95e-05  5.03e-04  1.62e-01  
 11  +3.8578e-01  +4.0925e-01  2.35e-02  4.93e-05  3.25e-03  1.21e-05  2.00e-04  9.90e-01  
 12  +3.7883e-01  +3.8043e-01  1.60e-03  3.35e-06  2.21e-04  7.26e-07  1.45e-05  9.43e-01  
 13  +3.7831e-01  +3.7836e-01  4.18e-05  8.75e-08  5.77e-06  1.73e-08  3.85e-07  9.76e-01  
 14  +3.7830e-01  +3.7830e-01  4.18e-07  8.75e-10  5.77e-08  1.72e-10  3.85e-09  9.90e-01  
 15  +3.7830e-01  +3.7830e-01  4.19e-09  8.76e-12  5.77e-10  1.72e-12  3.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0576ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:12 PM: Optimal value: 3.783e-01
(CVXPY) Aug 30 12:13:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:12 PM: Solver (including time spent in interface) took 1.559e-02 seconds
Iteration: 7, Objective: 0.3783
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:12 PM: Your problem has 585 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Finished problem compilation (took 1.555e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 585
  constraints   = 1085
  nnz(P)        = 0
  nnz(A)        = 6825
  cones (total) = 1
    : Nonnegative = 1,  numel = 1085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0157e+02  5.01e+02  9.56e-01  3.25e+01  1.00e+00  1.01e+00   ------   
  1  +5.8057e-01  +1.0606e+02  1.05e+02  3.99e-01  1.95e+01  3.86e-03  5.51e-01  6.09e-01  
  2  +5.3187e-01  +1.2281e+01  1.17e+01  1.23e-01  7.66e+00  1.42e-02  2.29e-01  9.39e-01  
  3  +5.0467e-01  +2.7839e+00  2.28e+00  4.75e-02  2.96e+00  3.29e-05  1.93e-01  5.27e-01  
  4  +5.0096e-01  +1.1864e+00  6.85e-01  1.49e-02  9.62e-01  1.61e-05  8.13e-02  6.11e-01  
  5  +4.9338e-01  +2.0138e+00  1.52e+00  7.27e-03  4.91e-01  1.47e-04  1.96e-02  9.82e-01  
  6  +4.7444e-01  +1.3026e+00  8.28e-01  2.43e-03  1.64e-01  1.29e-04  6.81e-03  6.58e-01  
  7  +4.5861e-01  +1.1165e+00  6.58e-01  1.50e-03  1.01e-01  1.40e-04  4.35e-03  4.25e-01  
  8  +4.3240e-01  +6.7064e-01  2.38e-01  5.52e-04  3.68e-02  1.01e-04  1.77e-03  9.32e-01  
  9  +4.0648e-01  +5.2560e-01  1.19e-01  2.66e-04  1.76e-02  4.62e-05  9.50e-04  5.49e-01  
 10  +4.0191e-01  +4.9973e-01  9.78e-02  2.13e-04  1.40e-02  4.48e-05  7.78e-04  5.36e-01  
 11  +3.9350e-01  +4.5750e-01  6.40e-02  1.37e-04  9.05e-03  3.37e-05  5.28e-04  9.26e-01  
 12  +3.8093e-01  +4.0174e-01  2.08e-02  4.39e-05  2.89e-03  1.09e-05  1.82e-04  7.09e-01  
 13  +3.7479e-01  +3.7537e-01  5.73e-04  1.20e-06  7.91e-05  2.46e-07  5.27e-06  9.81e-01  
 14  +3.7460e-01  +3.7461e-01  5.90e-06  1.24e-08  8.14e-07  2.46e-09  5.46e-08  9.90e-01  
 15  +3.7460e-01  +3.7460e-01  5.90e-08  1.24e-10  8.15e-09  2.46e-11  5.46e-10  9.90e-01  
 16  +3.7460e-01  +3.7460e-01  5.90e-10  1.24e-12  8.15e-11  2.47e-13  5.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.0621ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:12 PM: Optimal value: 3.746e-01
(CVXPY) Aug 30 12:13:12 PM: Compilation took 1.555e-02 seconds
(CVXPY) Aug 30 12:13:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.3746
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:12 PM: Your problem has 591 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 591
  constraints   = 1091
  nnz(P)        = 0
  nnz(A)        = 6916
  cones (total) = 1
    : Nonnegative = 1,  numel = 1091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0157e+02  5.01e+02  9.56e-01  3.24e+01  1.00e+00  1.01e+00   ------   
  1  +5.8017e-01  +1.0607e+02  1.05e+02  3.99e-01  1.95e+01  3.86e-03  5.51e-01  6.08e-01  
  2  +5.3153e-01  +1.2206e+01  1.17e+01  1.22e-01  7.60e+00  1.43e-02  2.28e-01  9.43e-01  
  3  +5.0459e-01  +2.7658e+00  2.26e+00  4.72e-02  2.94e+00  3.32e-05  1.90e-01  5.42e-01  
  4  +5.0087e-01  +1.1744e+00  6.74e-01  1.45e-02  9.41e-01  1.63e-05  7.71e-02  6.24e-01  
  5  +4.9242e-01  +1.8790e+00  1.39e+00  6.51e-03  4.40e-01  1.43e-04  1.76e-02  9.70e-01  
  6  +4.7273e-01  +1.2233e+00  7.51e-01  2.23e-03  1.50e-01  1.22e-04  6.27e-03  6.56e-01  
  7  +4.5986e-01  +1.1131e+00  6.53e-01  1.52e-03  1.02e-01  1.43e-04  4.36e-03  3.68e-01  
  8  +4.4248e-01  +7.4709e-01  3.05e-01  7.68e-04  5.12e-02  1.22e-04  2.39e-03  8.78e-01  
  9  +4.1560e-01  +5.8146e-01  1.66e-01  3.83e-04  2.53e-02  6.20e-05  1.31e-03  5.71e-01  
 10  +4.0541e-01  +5.2246e-01  1.17e-01  2.63e-04  1.73e-02  5.41e-05  9.49e-04  7.55e-01  
 11  +3.9312e-01  +4.6325e-01  7.01e-02  1.54e-04  1.01e-02  3.18e-05  5.91e-04  4.24e-01  
 12  +3.7984e-01  +4.0068e-01  2.08e-02  4.47e-05  2.94e-03  9.33e-06  1.86e-04  7.88e-01  
 13  +3.7418e-01  +3.7571e-01  1.52e-03  3.25e-06  2.13e-04  6.28e-07  1.43e-05  9.32e-01  
 14  +3.7371e-01  +3.7375e-01  3.45e-05  7.33e-08  4.81e-06  1.30e-08  3.28e-07  9.79e-01  
 15  +3.7370e-01  +3.7370e-01  3.46e-07  7.35e-10  4.82e-08  1.31e-10  3.29e-09  9.90e-01  
 16  +3.7370e-01  +3.7370e-01  3.46e-09  7.35e-12  4.82e-10  1.31e-12  3.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0643ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:12 PM: Optimal value: 3.737e-01
(CVXPY) Aug 30 12:13:12 PM: Compilation took 1.501e-02 seconds
(CVXPY) Aug 30 12:13:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.3737
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:12 PM: Your problem has 598 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 598
  constraints   = 1098
  nnz(P)        = 0
  nnz(A)        = 6993
  cones (total) = 1
    : Nonnegative = 1,  numel = 1098

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0159e+02  5.01e+02  9.56e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.7975e-01  +1.0611e+02  1.06e+02  4.00e-01  1.94e+01  3.86e-03  5.51e-01  6.08e-01  
  2  +5.3119e-01  +1.2135e+01  1.16e+01  1.21e-01  7.52e+00  1.43e-02  2.27e-01  9.47e-01  
  3  +5.0452e-01  +2.7509e+00  2.25e+00  4.69e-02  2.92e+00  3.36e-05  1.87e-01  5.56e-01  
  4  +5.0086e-01  +1.2040e+00  7.03e-01  1.51e-02  9.75e-01  1.72e-05  7.71e-02  6.16e-01  
  5  +4.9059e-01  +1.5932e+00  1.10e+00  5.16e-03  3.48e-01  1.32e-04  1.42e-02  9.43e-01  
  6  +4.6862e-01  +1.0420e+00  5.73e-01  1.72e-03  1.16e-01  1.10e-04  4.94e-03  6.84e-01  
  7  +4.5978e-01  +9.9757e-01  5.38e-01  1.31e-03  8.78e-02  1.32e-04  3.79e-03  3.08e-01  
  8  +4.5213e-01  +8.2225e-01  3.70e-01  1.03e-03  6.89e-02  1.17e-04  3.15e-03  5.81e-01  
  9  +4.1324e-01  +5.6966e-01  1.56e-01  3.52e-04  2.33e-02  4.97e-05  1.20e-03  7.03e-01  
 10  +3.9570e-01  +4.7792e-01  8.22e-02  1.82e-04  1.19e-02  2.79e-05  6.76e-04  5.18e-01  
 11  +3.8985e-01  +4.5001e-01  6.02e-02  1.30e-04  8.56e-03  2.14e-05  5.02e-04  3.29e-01  
 12  +3.7790e-01  +3.9255e-01  1.46e-02  3.14e-05  2.06e-03  5.51e-06  1.32e-04  8.07e-01  
 13  +3.7410e-01  +3.7541e-01  1.31e-03  2.80e-06  1.83e-04  4.77e-07  1.23e-05  9.18e-01  
 14  +3.7372e-01  +3.7377e-01  5.62e-05  1.20e-07  7.84e-06  2.10e-08  5.33e-07  9.69e-01  
 15  +3.7370e-01  +3.7370e-01  5.65e-07  1.20e-09  7.87e-08  2.10e-10  5.36e-09  9.90e-01  
 16  +3.7370e-01  +3.7370e-01  5.65e-09  1.20e-11  7.87e-10  2.10e-12  5.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1229ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:12 PM: Optimal value: 3.737e-01
(CVXPY) Aug 30 12:13:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:12 PM: Solver (including time spent in interface) took 1.614e-02 seconds
Iteration: 10, Objective: 0.3737
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:12 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 7000
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0159e+02  5.01e+02  9.56e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.7979e-01  +1.0609e+02  1.06e+02  4.00e-01  1.94e+01  3.86e-03  5.51e-01  6.08e-01  
  2  +5.3117e-01  +1.2129e+01  1.16e+01  1.21e-01  7.51e+00  1.43e-02  2.27e-01  9.47e-01  
  3  +5.0451e-01  +2.7488e+00  2.24e+00  4.69e-02  2.92e+00  3.36e-05  1.87e-01  5.56e-01  
  4  +5.0086e-01  +1.2033e+00  7.02e-01  1.51e-02  9.74e-01  1.72e-05  7.69e-02  6.17e-01  
  5  +4.9053e-01  +1.5912e+00  1.10e+00  5.14e-03  3.47e-01  1.32e-04  1.41e-02  9.43e-01  
  6  +4.6845e-01  +1.0382e+00  5.70e-01  1.71e-03  1.15e-01  1.10e-04  4.90e-03  6.86e-01  
  7  +4.5963e-01  +9.9494e-01  5.35e-01  1.30e-03  8.72e-02  1.32e-04  3.76e-03  3.03e-01  
  8  +4.5192e-01  +8.2051e-01  3.69e-01  1.03e-03  6.85e-02  1.17e-04  3.14e-03  5.80e-01  
  9  +4.1179e-01  +5.6052e-01  1.49e-01  3.33e-04  2.20e-02  4.71e-05  1.14e-03  7.22e-01  
 10  +3.9614e-01  +4.8040e-01  8.43e-02  1.85e-04  1.22e-02  2.88e-05  6.86e-04  4.78e-01  
 11  +3.8991e-01  +4.5022e-01  6.03e-02  1.31e-04  8.60e-03  2.16e-05  5.05e-04  3.41e-01  
 12  +3.7788e-01  +3.9253e-01  1.46e-02  3.16e-05  2.06e-03  5.41e-06  1.32e-04  7.90e-01  
 13  +3.7503e-01  +3.7953e-01  4.50e-03  9.63e-06  6.29e-04  1.70e-06  4.17e-05  7.29e-01  
 14  +3.7379e-01  +3.7409e-01  2.98e-04  6.36e-07  4.16e-05  1.10e-07  2.82e-06  9.41e-01  
 15  +3.7370e-01  +3.7371e-01  3.90e-06  8.31e-09  5.43e-07  1.43e-09  3.70e-08  9.87e-01  
 16  +3.7370e-01  +3.7370e-01  3.90e-08  8.31e-11  5.43e-09  1.43e-11  3.70e-10  9.90e-01  
 17  +3.7370e-01  +3.7370e-01  3.92e-10  8.37e-13  5.47e-11  1.44e-13  3.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.0411ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:13 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:13 PM: Optimal value: 3.737e-01
(CVXPY) Aug 30 12:13:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:13 PM: Solver (including time spent in interface) took 1.569e-02 seconds
Iteration: 11, Objective: 0.3737
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:13 PM: Your problem has 600 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 600
  constraints   = 1100
  nnz(P)        = 0
  nnz(A)        = 7012
  cones (total) = 1
    : Nonnegative = 1,  numel = 1100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0159e+02  5.01e+02  9.56e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.7976e-01  +1.0609e+02  1.06e+02  4.00e-01  1.93e+01  3.86e-03  5.51e-01  6.08e-01  
  2  +5.3113e-01  +1.2120e+01  1.16e+01  1.21e-01  7.50e+00  1.43e-02  2.27e-01  9.47e-01  
  3  +5.0451e-01  +2.7483e+00  2.24e+00  4.69e-02  2.91e+00  3.36e-05  1.87e-01  5.57e-01  
  4  +5.0085e-01  +1.2019e+00  7.01e-01  1.50e-02  9.72e-01  1.72e-05  7.66e-02  6.18e-01  
  5  +4.9058e-01  +1.5936e+00  1.10e+00  5.16e-03  3.47e-01  1.32e-04  1.41e-02  9.43e-01  
  6  +4.6844e-01  +1.0384e+00  5.70e-01  1.71e-03  1.14e-01  1.11e-04  4.89e-03  6.87e-01  
  7  +4.5969e-01  +9.9601e-01  5.36e-01  1.30e-03  8.72e-02  1.32e-04  3.76e-03  3.01e-01  
  8  +4.5186e-01  +8.2106e-01  3.69e-01  1.03e-03  6.83e-02  1.17e-04  3.13e-03  5.82e-01  
  9  +4.1232e-01  +5.6372e-01  1.51e-01  3.40e-04  2.24e-02  4.77e-05  1.16e-03  7.13e-01  
 10  +3.9589e-01  +4.7911e-01  8.32e-02  1.83e-04  1.20e-02  2.79e-05  6.80e-04  4.87e-01  
 11  +3.8997e-01  +4.5050e-01  6.05e-02  1.32e-04  8.64e-03  2.12e-05  5.07e-04  3.28e-01  
 12  +3.7805e-01  +3.9326e-01  1.52e-02  3.28e-05  2.14e-03  5.58e-06  1.37e-04  7.87e-01  
 13  +3.7509e-01  +3.7978e-01  4.69e-03  1.01e-05  6.57e-04  1.77e-06  4.35e-05  7.27e-01  
 14  +3.7380e-01  +3.7412e-01  3.16e-04  6.76e-07  4.41e-05  1.16e-07  2.99e-06  9.41e-01  
 15  +3.7370e-01  +3.7371e-01  4.24e-06  9.05e-09  5.91e-07  1.55e-09  4.03e-08  9.87e-01  
 16  +3.7370e-01  +3.7370e-01  4.24e-08  9.05e-11  5.91e-09  1.55e-11  4.03e-10  9.90e-01  
 17  +3.7370e-01  +3.7370e-01  4.27e-10  9.11e-13  5.95e-11  1.56e-13  4.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.6086ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:13 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:13 PM: Optimal value: 3.737e-01
(CVXPY) Aug 30 12:13:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:13 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 12, Objective: 0.3737
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:13 PM: Your problem has 603 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 603
  constraints   = 1103
  nnz(P)        = 0
  nnz(A)        = 7061
  cones (total) = 1
    : Nonnegative = 1,  numel = 1103

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0160e+02  5.01e+02  9.56e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.7971e-01  +1.0610e+02  1.06e+02  4.01e-01  1.93e+01  3.86e-03  5.51e-01  6.08e-01  
  2  +5.3107e-01  +1.2107e+01  1.16e+01  1.21e-01  7.47e+00  1.43e-02  2.26e-01  9.48e-01  
  3  +5.0450e-01  +2.7443e+00  2.24e+00  4.69e-02  2.91e+00  3.37e-05  1.86e-01  5.60e-01  
  4  +5.0084e-01  +1.2063e+00  7.05e-01  1.51e-02  9.76e-01  1.76e-05  7.63e-02  6.20e-01  
  5  +4.9066e-01  +1.6237e+00  1.13e+00  5.31e-03  3.57e-01  1.35e-04  1.45e-02  9.45e-01  
  6  +4.6814e-01  +1.0189e+00  5.51e-01  1.66e-03  1.11e-01  1.08e-04  4.77e-03  7.09e-01  
  7  +4.5921e-01  +9.8147e-01  5.22e-01  1.27e-03  8.47e-02  1.30e-04  3.66e-03  2.98e-01  
  8  +4.5075e-01  +8.2285e-01  3.72e-01  1.00e-03  6.66e-02  1.16e-04  3.04e-03  5.30e-01  
  9  +4.1287e-01  +5.6791e-01  1.55e-01  3.52e-04  2.32e-02  4.54e-05  1.20e-03  6.88e-01  
 10  +3.9542e-01  +4.7750e-01  8.21e-02  1.81e-04  1.19e-02  2.62e-05  6.68e-04  5.22e-01  
 11  +3.8915e-01  +4.4757e-01  5.84e-02  1.26e-04  8.26e-03  1.99e-05  4.80e-04  3.54e-01  
 12  +3.8585e-01  +4.3232e-01  4.65e-02  9.85e-05  6.45e-03  1.63e-05  3.82e-04  2.39e-01  
 13  +3.7837e-01  +3.9488e-01  1.65e-02  3.47e-05  2.27e-03  8.41e-06  1.41e-04  9.90e-01  
 14  +3.7405e-01  +3.7772e-01  3.67e-03  7.66e-06  5.00e-04  1.82e-06  3.24e-05  7.91e-01  
 15  +3.7288e-01  +3.7310e-01  2.24e-04  4.66e-07  3.04e-05  1.06e-07  2.02e-06  9.41e-01  
 16  +3.7280e-01  +3.7280e-01  2.66e-06  5.53e-09  3.61e-07  1.24e-09  2.40e-08  9.88e-01  
 17  +3.7280e-01  +3.7280e-01  2.66e-08  5.53e-11  3.61e-09  1.24e-11  2.40e-10  9.90e-01  
 18  +3.7280e-01  +3.7280e-01  2.68e-10  5.57e-13  3.64e-11  1.26e-13  2.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.807ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:13 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:13 PM: Optimal value: 3.728e-01
(CVXPY) Aug 30 12:13:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 13, Objective: 0.3728
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:13 PM: Your problem has 604 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 604
  constraints   = 1104
  nnz(P)        = 0
  nnz(A)        = 7072
  cones (total) = 1
    : Nonnegative = 1,  numel = 1104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0160e+02  5.01e+02  9.56e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.7970e-01  +1.0610e+02  1.06e+02  4.01e-01  1.93e+01  3.86e-03  5.51e-01  6.08e-01  
  2  +5.3105e-01  +1.2101e+01  1.16e+01  1.21e-01  7.46e+00  1.43e-02  2.26e-01  9.48e-01  
  3  +5.0449e-01  +2.7429e+00  2.24e+00  4.68e-02  2.90e+00  3.37e-05  1.86e-01  5.61e-01  
  4  +5.0084e-01  +1.2099e+00  7.09e-01  1.52e-02  9.80e-01  1.77e-05  7.64e-02  6.19e-01  
  5  +4.9056e-01  +1.6159e+00  1.13e+00  5.26e-03  3.54e-01  1.35e-04  1.44e-02  9.45e-01  
  6  +4.6791e-01  +1.0094e+00  5.42e-01  1.64e-03  1.09e-01  1.07e-04  4.70e-03  7.14e-01  
  7  +4.5886e-01  +9.7385e-01  5.15e-01  1.24e-03  8.33e-02  1.29e-04  3.60e-03  2.92e-01  
  8  +4.4982e-01  +8.1686e-01  3.67e-01  9.79e-04  6.51e-02  1.13e-04  2.98e-03  5.19e-01  
  9  +4.1186e-01  +5.6089e-01  1.49e-01  3.38e-04  2.23e-02  4.31e-05  1.16e-03  7.06e-01  
 10  +3.9567e-01  +4.7880e-01  8.31e-02  1.83e-04  1.20e-02  2.62e-05  6.75e-04  4.94e-01  
 11  +3.8904e-01  +4.4705e-01  5.80e-02  1.25e-04  8.20e-03  1.96e-05  4.77e-04  3.71e-01  
 12  +3.8590e-01  +4.3251e-01  4.66e-02  9.90e-05  6.47e-03  1.62e-05  3.83e-04  2.30e-01  
 13  +3.7835e-01  +3.9484e-01  1.65e-02  3.48e-05  2.27e-03  8.40e-06  1.41e-04  9.90e-01  
 14  +3.7381e-01  +3.7671e-01  2.90e-03  6.09e-06  3.97e-04  1.43e-06  2.58e-05  8.42e-01  
 15  +3.7294e-01  +3.7334e-01  3.97e-04  8.26e-07  5.39e-05  1.90e-07  3.57e-06  8.97e-01  
 16  +3.7280e-01  +3.7281e-01  5.11e-06  1.06e-08  6.93e-07  2.41e-09  4.62e-08  9.88e-01  
 17  +3.7280e-01  +3.7280e-01  5.11e-08  1.06e-10  6.93e-09  2.41e-11  4.62e-10  9.90e-01  
 18  +3.7280e-01  +3.7280e-01  5.13e-10  1.07e-12  6.97e-11  2.42e-13  4.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8788ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:13 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:13 PM: Optimal value: 3.728e-01
(CVXPY) Aug 30 12:13:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:13 PM: Solver (including time spent in interface) took 1.554e-02 seconds
FULL MODEL:
  Accruacy: 0.587
  Our objective: 0.174

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.04400000000000005)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x6 = 1 AND x3 = 0)                       <-- (term's our objective: 0.026000000000000044)
 OR (x0 = 1 AND x2 = 1 AND x5 = 1 AND x3 = 0 AND x6 = 0)                       <-- (term's our objective: 0.024000000000000028)
 OR (x0 = 1 AND x6 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.018000000000000023)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.016000000000000014)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0)            <-- (term's our objective: 0.012000000000000018)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.02400000000000003)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x6 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.006000000000000009)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x1 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.004000000000000005)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.04400000000000005
    Its accruacy: 0.522
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.04400000000000005
  Highest accruacy: 0.522
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

