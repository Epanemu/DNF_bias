Command:
python test_script.py -s smallest_subclass -d 5 -n 500 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.048
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.196
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:13 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:13 PM: Finished problem compilation (took 1.568e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +2.5073e+02  2.50e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9881e-01  +5.0505e+01  4.99e+01  3.44e-01  1.15e+01  3.99e-03  5.05e-01  6.45e-01  
  2  +5.4313e-01  +7.2997e+00  6.76e+00  1.16e-01  4.71e+00  1.01e-02  2.25e-01  8.08e-01  
  3  +5.0142e-01  +1.3014e+00  8.00e-01  2.38e-02  9.43e-01  5.84e-04  1.96e-01  5.16e-01  
  4  +5.0026e-01  +6.6337e-01  1.63e-01  4.92e-03  2.00e-01  1.25e-04  4.78e-02  7.97e-01  
  5  +4.9123e-01  +8.6897e-01  3.78e-01  2.29e-03  9.54e-02  1.32e-03  7.47e-03  9.85e-01  
  6  +4.7585e-01  +5.4892e-01  7.31e-02  3.37e-04  1.40e-02  1.32e-04  1.18e-03  9.14e-01  
  7  +4.6147e-01  +4.7996e-01  1.85e-02  7.82e-05  3.24e-03  2.18e-05  3.26e-04  8.11e-01  
  8  +4.5668e-01  +4.5843e-01  1.75e-03  7.20e-06  2.98e-04  1.57e-06  3.20e-05  9.90e-01  
  9  +4.5611e-01  +4.5613e-01  1.92e-05  7.89e-08  3.27e-06  1.71e-08  3.53e-07  9.90e-01  
 10  +4.5610e-01  +4.5610e-01  1.92e-07  7.89e-10  3.27e-08  1.71e-10  3.53e-09  9.90e-01  
 11  +4.5610e-01  +4.5610e-01  1.92e-09  7.89e-12  3.27e-10  1.71e-12  3.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3338ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:13 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:13 PM: Optimal value: 4.561e-01
(CVXPY) Aug 30 12:06:13 PM: Compilation took 1.568e-02 seconds
(CVXPY) Aug 30 12:06:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4561
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:13 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2449
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9920e-01  +2.5104e+02  2.51e+02  9.34e-01  2.08e+01  1.00e+00  1.01e+00   ------   
  1  +5.9660e-01  +5.0770e+01  5.02e+01  3.49e-01  1.18e+01  3.98e-03  5.12e-01  6.42e-01  
  2  +5.4095e-01  +7.0812e+00  6.54e+00  1.13e-01  4.71e+00  1.05e-02  2.22e-01  8.30e-01  
  3  +5.0111e-01  +1.2945e+00  7.93e-01  2.40e-02  9.82e-01  6.55e-04  1.87e-01  5.91e-01  
  4  +5.0002e-01  +7.7416e-01  2.74e-01  8.34e-03  3.50e-01  2.70e-04  6.46e-02  7.10e-01  
  5  +4.9219e-01  +8.0726e-01  3.15e-01  3.51e-03  1.52e-01  1.14e-03  1.17e-02  9.50e-01  
  6  +4.7984e-01  +6.2401e-01  1.44e-01  1.01e-03  4.42e-02  7.83e-04  3.42e-03  7.38e-01  
  7  +4.7433e-01  +5.6777e-01  9.34e-02  4.97e-04  2.15e-02  4.14e-04  1.60e-03  7.66e-01  
  8  +4.7138e-01  +5.4668e-01  7.53e-02  3.66e-04  1.58e-02  2.64e-04  1.18e-03  4.42e-01  
  9  +4.6646e-01  +5.2280e-01  5.63e-02  2.33e-04  1.01e-02  1.90e-04  7.52e-04  4.64e-01  
 10  +4.5896e-01  +4.8782e-01  2.89e-02  1.10e-04  4.72e-03  7.85e-05  3.64e-04  6.14e-01  
 11  +4.5203e-01  +4.5725e-01  5.23e-03  1.86e-05  8.01e-04  1.21e-05  6.50e-05  8.40e-01  
 12  +4.5031e-01  +4.5081e-01  5.04e-04  1.72e-06  7.41e-05  8.49e-07  6.26e-06  9.59e-01  
 13  +4.5010e-01  +4.5011e-01  7.48e-06  2.55e-08  1.09e-06  1.14e-08  9.36e-08  9.87e-01  
 14  +4.5010e-01  +4.5010e-01  7.47e-08  2.54e-10  1.09e-08  1.14e-10  9.36e-10  9.90e-01  
 15  +4.5010e-01  +4.5010e-01  7.47e-10  2.54e-12  1.09e-10  1.14e-12  9.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8223ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:13 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:13 PM: Optimal value: 4.501e-01
(CVXPY) Aug 30 12:06:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:06:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:14 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 2792
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +2.5119e+02  2.51e+02  9.36e-01  2.14e+01  1.00e+00  1.03e+00   ------   
  1  +5.9370e-01  +5.1054e+01  5.05e+01  3.59e-01  1.22e+01  3.93e-03  5.30e-01  6.37e-01  
  2  +5.3829e-01  +6.8345e+00  6.30e+00  1.12e-01  4.68e+00  1.12e-02  2.24e-01  8.58e-01  
  3  +5.0241e-01  +1.5393e+00  1.04e+00  3.22e-02  1.32e+00  1.27e-03  1.88e-01  5.38e-01  
  4  +5.0017e-01  +9.1666e-01  4.16e-01  1.28e-02  5.41e-01  6.73e-04  7.49e-02  6.23e-01  
  5  +4.8892e-01  +1.1267e+00  6.38e-01  5.37e-03  2.35e-01  2.93e-03  1.66e-02  9.89e-01  
  6  +4.7574e-01  +8.3392e-01  3.58e-01  2.41e-03  1.05e-01  1.70e-03  7.81e-03  5.62e-01  
  7  +4.7321e-01  +7.7301e-01  3.00e-01  1.66e-03  7.28e-02  1.12e-03  5.28e-03  5.72e-01  
  8  +4.6619e-01  +6.8359e-01  2.17e-01  1.04e-03  4.56e-02  5.95e-04  3.35e-03  6.14e-01  
  9  +4.5543e-01  +5.8082e-01  1.25e-01  5.86e-04  2.57e-02  1.48e-04  1.97e-03  7.58e-01  
 10  +4.4128e-01  +5.0776e-01  6.65e-02  2.86e-04  1.26e-02  5.90e-05  9.99e-04  8.60e-01  
 11  +4.3024e-01  +4.6028e-01  3.00e-02  1.21e-04  5.33e-03  2.81e-05  4.47e-04  6.85e-01  
 12  +4.2946e-01  +4.5690e-01  2.74e-02  1.10e-04  4.87e-03  2.57e-05  4.12e-04  1.47e-01  
 13  +4.2907e-01  +4.5409e-01  2.50e-02  9.89e-05  4.38e-03  2.60e-05  3.68e-04  4.30e-01  
 14  +4.2142e-01  +4.2425e-01  2.82e-03  1.10e-05  4.87e-04  2.99e-06  4.33e-05  9.90e-01  
 15  +4.2031e-01  +4.2035e-01  3.31e-05  1.29e-07  5.70e-06  3.23e-08  5.16e-07  9.89e-01  
 16  +4.2030e-01  +4.2030e-01  3.31e-07  1.29e-09  5.70e-08  3.23e-10  5.16e-09  9.90e-01  
 17  +4.2030e-01  +4.2030e-01  3.31e-09  1.29e-11  5.70e-10  3.23e-12  5.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2168ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:14 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:14 PM: Optimal value: 4.203e-01
(CVXPY) Aug 30 12:06:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:06:14 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.4203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:14 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 2988
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +2.5119e+02  2.51e+02  9.37e-01  2.14e+01  1.00e+00  1.03e+00   ------   
  1  +5.9340e-01  +5.1104e+01  5.05e+01  3.61e-01  1.21e+01  3.94e-03  5.30e-01  6.37e-01  
  2  +5.3826e-01  +6.8335e+00  6.30e+00  1.12e-01  4.58e+00  1.12e-02  2.23e-01  8.59e-01  
  3  +5.0079e-01  +1.3063e+00  8.05e-01  2.52e-02  1.04e+00  8.64e-04  1.77e-01  6.93e-01  
  4  +4.9885e-01  +8.8160e-01  3.83e-01  1.13e-02  4.78e-01  6.26e-04  6.16e-02  7.20e-01  
  5  +4.8688e-01  +9.0566e-01  4.19e-01  4.36e-03  1.90e-01  2.11e-03  1.42e-02  8.84e-01  
  6  +4.7191e-01  +7.4538e-01  2.73e-01  1.58e-03  6.92e-02  1.58e-03  5.08e-03  8.67e-01  
  7  +4.5138e-01  +6.1115e-01  1.60e-01  7.49e-04  3.25e-02  6.27e-04  2.56e-03  6.67e-01  
  8  +4.4566e-01  +5.8021e-01  1.35e-01  6.31e-04  2.74e-02  4.14e-04  2.21e-03  3.07e-01  
  9  +4.2405e-01  +4.7776e-01  5.37e-02  2.27e-04  9.82e-03  1.26e-04  8.66e-04  6.76e-01  
 10  +4.1151e-01  +4.2104e-01  9.53e-03  3.94e-05  1.70e-03  1.80e-05  1.63e-04  8.29e-01  
 11  +4.0860e-01  +4.0888e-01  2.79e-04  1.14e-06  4.93e-05  3.80e-07  4.96e-06  9.74e-01  
 12  +4.0850e-01  +4.0850e-01  2.80e-06  1.14e-08  4.93e-07  3.80e-09  4.98e-08  9.90e-01  
 13  +4.0850e-01  +4.0850e-01  2.80e-08  1.14e-10  4.93e-09  3.80e-11  4.98e-10  9.90e-01  
 14  +4.0850e-01  +4.0850e-01  2.80e-10  1.14e-12  4.93e-11  3.80e-13  4.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0955ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:14 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:14 PM: Optimal value: 4.085e-01
(CVXPY) Aug 30 12:06:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:06:14 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.4085
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:14 PM: Your problem has 293 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 293
  constraints   = 543
  nnz(P)        = 0
  nnz(A)        = 3045
  cones (total) = 1
    : Nonnegative = 1,  numel = 543

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +2.5117e+02  2.51e+02  9.37e-01  2.13e+01  1.00e+00  1.03e+00   ------   
  1  +5.9316e-01  +5.1173e+01  5.06e+01  3.61e-01  1.20e+01  3.94e-03  5.27e-01  6.36e-01  
  2  +5.3805e-01  +6.8112e+00  6.27e+00  1.11e-01  4.56e+00  1.13e-02  2.21e-01  8.61e-01  
  3  +5.0149e-01  +1.4119e+00  9.10e-01  2.85e-02  1.17e+00  1.04e-03  1.80e-01  6.23e-01  
  4  +4.9917e-01  +8.7098e-01  3.72e-01  1.08e-02  4.59e-01  6.63e-04  5.40e-02  8.50e-01  
  5  +4.8934e-01  +8.7469e-01  3.85e-01  4.29e-03  1.87e-01  2.05e-03  1.40e-02  8.13e-01  
  6  +4.8233e-01  +8.2142e-01  3.39e-01  2.54e-03  1.11e-01  1.96e-03  8.13e-03  5.98e-01  
  7  +4.6942e-01  +7.3150e-01  2.62e-01  1.48e-03  6.49e-02  1.70e-03  4.84e-03  4.54e-01  
  8  +4.5164e-01  +6.2081e-01  1.69e-01  8.11e-04  3.53e-02  7.53e-04  2.78e-03  6.01e-01  
  9  +4.2907e-01  +5.0556e-01  7.65e-02  3.32e-04  1.44e-02  2.59e-04  1.24e-03  6.16e-01  
 10  +4.1376e-01  +4.3616e-01  2.24e-02  9.22e-05  3.98e-03  3.68e-05  3.70e-04  8.67e-01  
 11  +4.0801e-01  +4.1204e-01  4.03e-03  1.65e-05  7.10e-04  6.01e-06  6.96e-05  8.34e-01  
 12  +4.0762e-01  +4.1054e-01  2.92e-03  1.17e-05  5.05e-04  4.16e-06  4.97e-05  4.05e-01  
 13  +4.0679e-01  +4.0727e-01  4.85e-04  1.94e-06  8.38e-05  4.94e-07  8.38e-06  9.90e-01  
 14  +4.0660e-01  +4.0661e-01  4.98e-06  1.99e-08  8.59e-07  5.03e-09  8.62e-08  9.90e-01  
 15  +4.0660e-01  +4.0660e-01  4.98e-08  1.99e-10  8.59e-09  5.03e-11  8.62e-10  9.90e-01  
 16  +4.0660e-01  +4.0660e-01  4.98e-10  1.99e-12  8.59e-11  5.03e-13  8.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5041ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:14 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:14 PM: Optimal value: 4.066e-01
(CVXPY) Aug 30 12:06:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:06:14 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.592
  Our objective: 0.18399999999999994

IF 
    (x2 = 1 AND x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.00799999999999998)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.07199999999999998)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x2 = 0)            <-- (term's our objective: 0.05599999999999998)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0 AND x4 = 0) <-- (term's our objective: 0.01600000000000003)
 OR (x1 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.020000000000000046)
 OR (x1 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.008000000000000035)
 OR (x3 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.004000000000000024)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.07199999999999998
    Its accruacy: 0.536
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.07199999999999998
  Highest accruacy: 0.536
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

