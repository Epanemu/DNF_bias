Command:
python test_script.py -s smallest_subclass -d 4 -n 50 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.36
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:55 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:55 PM: Finished problem compilation (took 6.362e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9260e-01  +2.5955e+01  2.55e+01  8.13e-01  5.39e+00  1.00e+00  1.07e+00   ------   
  1  +5.9619e-01  +5.2747e+00  4.68e+00  2.81e-01  2.75e+00  4.06e-03  5.05e-01  6.72e-01  
  2  +5.1583e-01  +1.0068e+00  4.91e-01  5.05e-02  5.72e-01  1.05e-02  1.41e-01  9.46e-01  
  3  +4.8905e-01  +9.0696e-01  4.18e-01  2.48e-02  2.91e-01  1.22e-02  7.61e-02  5.47e-01  
  4  +4.4675e-01  +6.1706e-01  1.70e-01  8.19e-03  9.63e-02  4.47e-03  3.00e-02  6.44e-01  
  5  +4.1367e-01  +4.6474e-01  5.11e-02  2.08e-03  2.44e-02  1.14e-03  9.65e-03  7.54e-01  
  6  +4.0048e-01  +4.0159e-01  1.11e-03  4.61e-05  5.38e-04  1.04e-05  2.34e-04  9.90e-01  
  7  +4.0010e-01  +4.0011e-01  1.11e-05  4.61e-07  5.38e-06  1.03e-07  2.35e-06  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  1.11e-07  4.61e-09  5.38e-08  1.03e-09  2.35e-08  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  1.11e-09  4.61e-11  5.38e-10  1.03e-11  2.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 201.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:55 PM: Optimal value: 4.001e-01
(CVXPY) Aug 30 12:03:55 PM: Compilation took 6.362e-03 seconds
(CVXPY) Aug 30 12:03:55 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:55 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:55 PM: Finished problem compilation (took 3.812e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 250
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8716e-01  +2.5983e+01  2.55e+01  8.29e-01  5.54e+00  1.00e+00  1.09e+00   ------   
  1  +5.6907e-01  +5.3990e+00  4.83e+00  3.10e-01  2.81e+00  4.00e-03  5.35e-01  6.53e-01  
  2  +4.9751e-01  +1.0231e+00  5.26e-01  5.02e-02  5.76e-01  1.27e-02  1.44e-01  9.71e-01  
  3  +4.3270e-01  +7.9094e-01  3.58e-01  1.78e-02  2.09e-01  1.15e-02  5.86e-02  7.22e-01  
  4  +3.9028e-01  +5.4469e-01  1.54e-01  6.51e-03  7.65e-02  5.33e-03  2.33e-02  6.41e-01  
  5  +3.7033e-01  +4.6909e-01  9.88e-02  3.77e-03  4.42e-02  3.23e-03  1.43e-02  4.84e-01  
  6  +3.4301e-01  +3.5064e-01  7.64e-03  2.89e-04  3.37e-03  1.40e-04  1.20e-03  9.39e-01  
  7  +3.4040e-01  +3.4088e-01  4.83e-04  1.84e-05  2.13e-04  7.74e-06  7.80e-05  9.35e-01  
  8  +3.4021e-01  +3.4023e-01  1.70e-05  6.59e-07  7.61e-06  9.98e-08  3.01e-06  9.81e-01  
  9  +3.4020e-01  +3.4020e-01  1.72e-07  6.67e-09  7.70e-08  1.01e-09  3.08e-08  9.90e-01  
 10  +3.4020e-01  +3.4020e-01  1.72e-09  6.67e-11  7.70e-10  1.01e-11  3.08e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 219.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:55 PM: Optimal value: 3.402e-01
(CVXPY) Aug 30 12:03:55 PM: Compilation took 3.812e-03 seconds
(CVXPY) Aug 30 12:03:55 PM: Solver (including time spent in interface) took 5.295e-04 seconds
Iteration: 2, Objective: 0.3402
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:55 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:55 PM: Finished problem compilation (took 5.678e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 263
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8660e-01  +2.6035e+01  2.55e+01  8.33e-01  5.45e+00  1.00e+00  1.09e+00   ------   
  1  +5.6083e-01  +5.4398e+00  4.88e+00  3.15e-01  2.77e+00  4.01e-03  5.39e-01  6.49e-01  
  2  +4.9123e-01  +1.0787e+00  5.87e-01  5.42e-02  6.12e-01  1.31e-02  1.53e-01  9.48e-01  
  3  +4.0706e-01  +8.1130e-01  4.04e-01  1.79e-02  2.08e-01  1.30e-02  5.84e-02  7.56e-01  
  4  +3.5146e-01  +4.7951e-01  1.28e-01  5.32e-03  6.07e-02  3.24e-03  1.98e-02  7.59e-01  
  5  +3.2247e-01  +3.2904e-01  6.57e-03  2.80e-04  3.16e-03  9.19e-05  1.15e-03  9.50e-01  
  6  +3.2071e-01  +3.2170e-01  9.96e-04  4.28e-05  4.82e-04  1.28e-05  1.79e-04  8.53e-01  
  7  +3.2052e-01  +3.2107e-01  5.48e-04  2.25e-05  2.53e-04  6.53e-06  1.02e-04  6.48e-01  
  8  +3.2031e-01  +3.2034e-01  2.45e-05  1.00e-06  1.13e-05  2.09e-07  4.79e-06  9.56e-01  
  9  +3.2030e-01  +3.2030e-01  2.53e-07  1.03e-08  1.16e-07  2.12e-09  4.99e-08  9.90e-01  
 10  +3.2030e-01  +3.2030e-01  2.53e-09  1.03e-10  1.16e-09  2.12e-11  4.99e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 225.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:55 PM: Optimal value: 3.203e-01
(CVXPY) Aug 30 12:03:55 PM: Compilation took 5.678e-03 seconds
(CVXPY) Aug 30 12:03:55 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.68
  Our objective: 0.36

IF 
    (x3 = 1 AND x2 = 0)                       <-- (term's our objective: 0.16000000000000003)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.16000000000000003)
 OR (x1 = 1 AND x2 = 1 AND x0 = 0 AND x3 = 0) <-- (term's our objective: 0.03999999999999996)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.16000000000000003
    Its accruacy: 0.58
    Its hamming distance: 4
  Shortest hamming distance: 0
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

