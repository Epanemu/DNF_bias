Command:
python test_script.py -s smallest_subclass -d 5 -n 500 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.06
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.208
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:01 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:01 PM: Finished problem compilation (took 1.675e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +2.5070e+02  2.50e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9886e-01  +5.0504e+01  4.99e+01  3.44e-01  1.14e+01  3.99e-03  5.05e-01  6.45e-01  
  2  +5.4327e-01  +7.3149e+00  6.77e+00  1.16e-01  4.71e+00  1.01e-02  2.26e-01  8.07e-01  
  3  +5.0131e-01  +1.2572e+00  7.56e-01  2.25e-02  8.92e-01  4.00e-04  1.97e-01  5.25e-01  
  4  +5.0037e-01  +6.4574e-01  1.45e-01  4.40e-03  1.79e-01  6.96e-05  4.79e-02  7.87e-01  
  5  +4.9976e-01  +5.8785e-01  8.81e-02  2.45e-03  1.00e-01  8.01e-05  1.42e-02  7.94e-01  
  6  +4.9310e-01  +5.5704e-01  6.39e-02  3.68e-04  1.53e-02  5.30e-04  1.20e-03  9.35e-01  
  7  +4.8778e-01  +5.2983e-01  4.21e-02  2.12e-04  8.79e-03  3.08e-04  7.30e-04  4.55e-01  
  8  +4.8136e-01  +4.9748e-01  1.61e-02  7.39e-05  3.07e-03  3.00e-06  2.89e-04  9.15e-01  
  9  +4.7679e-01  +4.7885e-01  2.06e-03  8.29e-06  3.44e-04  4.34e-07  3.52e-05  8.85e-01  
 10  +4.7612e-01  +4.7618e-01  6.03e-05  2.39e-07  9.94e-06  4.20e-08  1.03e-06  9.90e-01  
 11  +4.7610e-01  +4.7610e-01  6.04e-07  2.39e-09  9.94e-08  4.20e-10  1.03e-08  9.90e-01  
 12  +4.7610e-01  +4.7610e-01  6.04e-09  2.39e-11  9.94e-10  4.21e-12  1.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3884ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:01 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:01 PM: Optimal value: 4.761e-01
(CVXPY) Aug 30 12:06:01 PM: Compilation took 1.675e-02 seconds
(CVXPY) Aug 30 12:06:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4761
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:01 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:01 PM: Finished problem compilation (took 1.569e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2300
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +2.5127e+02  2.51e+02  9.34e-01  2.02e+01  1.00e+00  1.01e+00   ------   
  1  +5.9592e-01  +5.0654e+01  5.01e+01  3.47e-01  1.15e+01  3.98e-03  5.09e-01  6.44e-01  
  2  +5.4077e-01  +7.0518e+00  6.51e+00  1.11e-01  4.50e+00  1.04e-02  2.17e-01  8.34e-01  
  3  +5.0123e-01  +1.3419e+00  8.41e-01  2.53e-02  1.01e+00  8.69e-04  1.82e-01  5.86e-01  
  4  +4.9972e-01  +8.2197e-01  3.22e-01  9.63e-03  3.93e-01  4.45e-04  6.36e-02  6.95e-01  
  5  +4.8518e-01  +8.0695e-01  3.22e-01  2.55e-03  1.08e-01  2.37e-03  8.04e-03  9.66e-01  
  6  +4.7023e-01  +6.0791e-01  1.38e-01  8.95e-04  3.75e-02  8.54e-04  2.98e-03  6.76e-01  
  7  +4.6760e-01  +5.8017e-01  1.13e-01  5.92e-04  2.49e-02  5.41e-04  1.94e-03  6.44e-01  
  8  +4.6562e-01  +5.6600e-01  1.00e-01  4.61e-04  1.94e-02  4.28e-04  1.48e-03  4.18e-01  
  9  +4.5557e-01  +5.0302e-01  4.75e-02  1.85e-04  7.74e-03  1.14e-04  5.95e-04  8.48e-01  
 10  +4.4917e-01  +4.8118e-01  3.20e-02  1.11e-04  4.66e-03  4.41e-05  3.64e-04  7.69e-01  
 11  +4.3956e-01  +4.4316e-01  3.60e-03  1.17e-05  4.90e-04  4.28e-06  4.04e-05  9.14e-01  
 12  +4.3847e-01  +4.3906e-01  5.91e-04  1.92e-06  8.01e-05  8.32e-07  6.69e-06  9.71e-01  
 13  +4.3820e-01  +4.3821e-01  6.09e-06  1.97e-08  8.25e-07  8.56e-09  6.90e-08  9.90e-01  
 14  +4.3820e-01  +4.3820e-01  6.09e-08  1.97e-10  8.25e-09  8.56e-11  6.90e-10  9.90e-01  
 15  +4.3820e-01  +4.3820e-01  6.09e-10  1.97e-12  8.25e-11  8.56e-13  6.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7685ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:01 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:01 PM: Optimal value: 4.382e-01
(CVXPY) Aug 30 12:06:01 PM: Compilation took 1.569e-02 seconds
(CVXPY) Aug 30 12:06:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4382
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:02 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 2631
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +2.5122e+02  2.51e+02  9.35e-01  2.07e+01  1.00e+00  1.01e+00   ------   
  1  +5.9326e-01  +5.0930e+01  5.03e+01  3.53e-01  1.18e+01  3.97e-03  5.15e-01  6.41e-01  
  2  +5.3869e-01  +6.8448e+00  6.31e+00  1.08e-01  4.48e+00  1.09e-02  2.13e-01  8.56e-01  
  3  +5.0131e-01  +1.4030e+00  9.02e-01  2.75e-02  1.12e+00  1.10e-03  1.74e-01  6.23e-01  
  4  +4.9901e-01  +9.5909e-01  4.60e-01  1.32e-02  5.50e-01  8.41e-04  6.59e-02  6.92e-01  
  5  +4.7794e-01  +9.2780e-01  4.50e-01  3.18e-03  1.37e-01  3.78e-03  1.01e-02  9.23e-01  
  6  +4.6980e-01  +8.3499e-01  3.65e-01  2.20e-03  9.50e-02  3.12e-03  7.11e-03  3.52e-01  
  7  +4.5766e-01  +6.5528e-01  1.98e-01  1.06e-03  4.57e-02  9.20e-04  3.51e-03  7.46e-01  
  8  +4.4560e-01  +5.8503e-01  1.39e-01  6.12e-04  2.62e-02  6.86e-04  2.06e-03  4.69e-01  
  9  +4.4056e-01  +5.4986e-01  1.09e-01  4.58e-04  1.96e-02  3.35e-04  1.57e-03  5.77e-01  
 10  +4.2139e-01  +4.5721e-01  3.58e-02  1.40e-04  5.99e-03  6.98e-05  5.26e-04  7.47e-01  
 11  +4.1118e-01  +4.1316e-01  1.98e-03  7.52e-06  3.20e-04  1.59e-06  3.04e-05  9.70e-01  
 12  +4.1041e-01  +4.1043e-01  2.02e-05  7.66e-08  3.26e-06  1.59e-08  3.14e-07  9.90e-01  
 13  +4.1040e-01  +4.1040e-01  2.02e-07  7.66e-10  3.26e-08  1.59e-10  3.14e-09  9.90e-01  
 14  +4.1040e-01  +4.1040e-01  2.02e-09  7.66e-12  3.26e-10  1.59e-12  3.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8294ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:02 PM: Optimal value: 4.104e-01
(CVXPY) Aug 30 12:06:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:06:02 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.4104
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:02 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:02 PM: Finished problem compilation (took 2.244e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 2811
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +2.5119e+02  2.51e+02  9.35e-01  2.08e+01  1.00e+00  1.01e+00   ------   
  1  +5.9185e-01  +5.1031e+01  5.04e+01  3.56e-01  1.18e+01  3.97e-03  5.16e-01  6.39e-01  
  2  +5.3814e-01  +6.7969e+00  6.26e+00  1.07e-01  4.41e+00  1.10e-02  2.11e-01  8.63e-01  
  3  +5.0071e-01  +1.3443e+00  8.44e-01  2.58e-02  1.06e+00  1.08e-03  1.66e-01  6.98e-01  
  4  +4.9733e-01  +9.8210e-01  4.85e-01  1.27e-02  5.34e-01  1.11e-03  5.53e-02  7.47e-01  
  5  +4.7766e-01  +8.5417e-01  3.77e-01  3.17e-03  1.37e-01  3.39e-03  1.02e-02  8.53e-01  
  6  +4.7394e-01  +8.3799e-01  3.64e-01  2.46e-03  1.06e-01  2.82e-03  7.84e-03  4.49e-01  
  7  +4.5946e-01  +7.1100e-01  2.52e-01  1.41e-03  6.06e-02  1.19e-03  4.65e-03  6.46e-01  
  8  +4.4342e-01  +6.0603e-01  1.63e-01  8.24e-04  3.54e-02  6.34e-04  2.89e-03  4.65e-01  
  9  +4.2947e-01  +5.2856e-01  9.91e-02  4.58e-04  1.96e-02  3.55e-04  1.70e-03  4.67e-01  
 10  +4.1965e-01  +4.8074e-01  6.11e-02  2.62e-04  1.12e-02  1.54e-04  1.01e-03  6.22e-01  
 11  +4.1310e-01  +4.4548e-01  3.24e-02  1.36e-04  5.79e-03  3.40e-05  5.45e-04  9.90e-01  
 12  +4.0414e-01  +4.0902e-01  4.87e-03  2.00e-05  8.50e-04  4.56e-06  8.56e-05  8.67e-01  
 13  +4.0262e-01  +4.0268e-01  5.88e-05  2.40e-07  1.02e-05  5.19e-08  1.05e-06  9.88e-01  
 14  +4.0260e-01  +4.0260e-01  5.88e-07  2.40e-09  1.02e-07  5.19e-10  1.05e-08  9.90e-01  
 15  +4.0260e-01  +4.0260e-01  5.88e-09  2.40e-11  1.02e-09  5.19e-12  1.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0853ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:02 PM: Optimal value: 4.026e-01
(CVXPY) Aug 30 12:06:02 PM: Compilation took 2.244e-03 seconds
(CVXPY) Aug 30 12:06:02 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.4026
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:06:02 PM: Your problem has 290 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:06:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:06:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:06:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:06:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:06:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:06:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:06:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:06:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:06:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:06:02 PM: Finished problem compilation (took 8.101e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 290
  constraints   = 540
  nnz(P)        = 0
  nnz(A)        = 2867
  cones (total) = 1
    : Nonnegative = 1,  numel = 540

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9892e-01  +2.5117e+02  2.51e+02  9.36e-01  2.08e+01  1.00e+00  1.01e+00   ------   
  1  +5.9139e-01  +5.1081e+01  5.05e+01  3.57e-01  1.17e+01  3.97e-03  5.17e-01  6.39e-01  
  2  +5.3778e-01  +6.7599e+00  6.22e+00  1.07e-01  4.38e+00  1.11e-02  2.10e-01  8.67e-01  
  3  +5.0033e-01  +1.3019e+00  8.02e-01  2.46e-02  1.01e+00  1.03e-03  1.62e-01  7.47e-01  
  4  +4.9621e-01  +1.0188e+00  5.23e-01  1.28e-02  5.37e-01  1.29e-03  5.22e-02  7.74e-01  
  5  +4.7884e-01  +9.0490e-01  4.26e-01  3.90e-03  1.68e-01  3.08e-03  1.28e-02  8.09e-01  
  6  +4.7248e-01  +8.5567e-01  3.83e-01  2.80e-03  1.21e-01  2.65e-03  9.17e-03  4.27e-01  
  7  +4.5808e-01  +7.3393e-01  2.76e-01  1.63e-03  7.00e-02  1.57e-03  5.50e-03  5.52e-01  
  8  +4.4189e-01  +6.2135e-01  1.79e-01  9.40e-04  4.02e-02  8.23e-04  3.36e-03  4.90e-01  
  9  +4.2952e-01  +5.4793e-01  1.18e-01  5.82e-04  2.49e-02  5.01e-04  2.19e-03  3.81e-01  
 10  +4.1806e-01  +4.8496e-01  6.69e-02  3.07e-04  1.31e-02  2.61e-04  1.22e-03  4.99e-01  
 11  +4.1496e-01  +4.6999e-01  5.50e-02  2.44e-04  1.04e-02  2.04e-04  9.85e-04  2.50e-01  
 12  +4.0464e-01  +4.1703e-01  1.24e-02  5.34e-05  2.27e-03  1.06e-05  2.31e-04  9.90e-01  
 13  +4.0099e-01  +4.0187e-01  8.81e-04  3.77e-06  1.60e-04  7.22e-07  1.70e-05  9.36e-01  
 14  +4.0071e-01  +4.0073e-01  2.25e-05  9.62e-08  4.09e-06  1.86e-08  4.35e-07  9.75e-01  
 15  +4.0070e-01  +4.0070e-01  2.25e-07  9.62e-10  4.09e-08  1.86e-10  4.35e-09  9.90e-01  
 16  +4.0070e-01  +4.0070e-01  2.25e-09  9.62e-12  4.09e-10  1.86e-12  4.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3007ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:06:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:06:02 PM: Optimal value: 4.007e-01
(CVXPY) Aug 30 12:06:02 PM: Compilation took 8.101e-03 seconds
(CVXPY) Aug 30 12:06:02 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.582
  Our objective: 0.16399999999999998

IF 
    (x0 = 1 AND x2 = 1 AND x4 = 0)                       <-- (term's our objective: 0.03600000000000002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0)            <-- (term's our objective: 0.06799999999999998)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0)            <-- (term's our objective: 0.051999999999999956)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0) <-- (term's our objective: 0.008000000000000021)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.06799999999999998
    Its accruacy: 0.534
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.06799999999999998
  Highest accruacy: 0.534
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

