Command:
python test_script.py -s smallest_subclass -d 8 -n 10000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0028000000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 8.

Computed total variation: 0.128
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:58 PM: Your problem has 5017 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:58 PM: Finished problem compilation (took 1.911e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5017
  constraints   = 10017
  nnz(P)        = 0
  nnz(A)        = 55017
  cones (total) = 1
    : Nonnegative = 1,  numel = 10017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.11e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +1.0695e+03  1.07e+03  4.19e-01  7.07e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3486e-01  +1.2656e+02  1.26e+02  1.63e-01  3.53e+01  1.47e-02  2.66e-01  9.00e-01  
  3  +5.0935e-01  +3.2820e+01  3.23e+01  1.22e-01  2.62e+01  3.96e-05  2.53e-01  2.13e-01  
  4  +5.0088e-01  +2.7234e+00  2.22e+00  1.51e-02  3.28e+00  5.39e-06  1.65e-01  6.34e-01  
  5  +5.0009e-01  +8.3989e-01  3.40e-01  2.28e-03  5.05e-01  2.83e-05  9.07e-02  9.90e-01  
  6  +5.0001e-01  +5.4803e-01  4.80e-02  3.20e-04  7.13e-02  5.91e-06  1.64e-02  8.34e-01  
  7  +5.0000e-01  +5.4807e-01  4.81e-02  3.19e-04  7.09e-02  9.69e-06  6.91e-03  7.13e-01  
  8  +4.9996e-01  +5.5394e-01  5.40e-02  2.79e-04  6.21e-02  3.29e-05  1.54e-03  9.52e-01  
  9  +4.9860e-01  +5.4876e-01  5.02e-02  1.77e-05  3.97e-03  7.63e-04  5.71e-05  9.63e-01  
 10  +4.9693e-01  +5.3347e-01  3.65e-02  1.05e-05  2.34e-03  5.27e-04  3.43e-05  5.28e-01  
 11  +4.9472e-01  +5.1921e-01  2.45e-02  6.58e-06  1.47e-03  2.40e-04  2.26e-05  4.60e-01  
 12  +4.9440e-01  +5.1563e-01  2.12e-02  5.68e-06  1.27e-03  8.70e-05  2.00e-05  5.15e-01  
 13  +4.9316e-01  +5.1001e-01  1.69e-02  4.24e-06  9.48e-04  6.23e-05  1.54e-05  2.88e-01  
 14  +4.9290e-01  +5.0845e-01  1.55e-02  3.73e-06  8.34e-04  3.79e-05  1.36e-05  4.00e-01  
 15  +4.9177e-01  +5.0354e-01  1.18e-02  2.67e-06  5.96e-04  2.33e-05  9.98e-06  3.88e-01  
 16  +4.9117e-01  +5.0075e-01  9.58e-03  2.11e-06  4.72e-04  9.78e-06  7.99e-06  5.68e-01  
 17  +4.8888e-01  +4.9151e-01  2.62e-03  5.36e-07  1.20e-04  2.27e-06  2.14e-06  7.58e-01  
 18  +4.8808e-01  +4.8829e-01  2.16e-04  4.33e-08  9.67e-06  2.77e-08  1.76e-07  9.90e-01  
 19  +4.8800e-01  +4.8800e-01  2.24e-06  4.48e-10  1.00e-07  2.86e-10  1.83e-09  9.90e-01  
 20  +4.8800e-01  +4.8800e-01  2.24e-08  4.48e-12  1.00e-09  2.93e-12  1.87e-11  9.90e-01  
 21  +4.8800e-01  +4.8800e-01  2.24e-10  4.48e-14  1.00e-11  2.99e-14  1.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 66.5832ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:58 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:58 PM: Optimal value: 4.880e-01
(CVXPY) Aug 30 12:19:58 PM: Compilation took 1.911e-02 seconds
(CVXPY) Aug 30 12:19:58 PM: Solver (including time spent in interface) took 7.242e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4880
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:58 PM: Your problem has 5027 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:58 PM: Finished problem compilation (took 1.997e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5027
  constraints   = 10027
  nnz(P)        = 0
  nnz(A)        = 61965
  cones (total) = 1
    : Nonnegative = 1,  numel = 10027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8411e-01  +1.0697e+03  1.07e+03  4.19e-01  7.23e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3478e-01  +1.2640e+02  1.26e+02  1.63e-01  3.61e+01  1.47e-02  2.66e-01  9.00e-01  
  3  +5.0933e-01  +3.2767e+01  3.23e+01  1.22e-01  2.68e+01  3.97e-05  2.53e-01  2.14e-01  
  4  +5.0088e-01  +2.7191e+00  2.22e+00  1.51e-02  3.35e+00  5.40e-06  1.65e-01  6.37e-01  
  5  +5.0009e-01  +8.4781e-01  3.48e-01  2.33e-03  5.29e-01  2.84e-05  8.94e-02  9.90e-01  
  6  +5.0002e-01  +5.9343e-01  9.34e-02  6.24e-04  1.42e-01  9.83e-06  2.75e-02  7.44e-01  
  7  +5.0002e-01  +5.9334e-01  9.33e-02  6.21e-04  1.41e-01  1.07e-05  1.39e-02  7.76e-01  
  8  +4.9992e-01  +5.5012e-01  5.02e-02  2.20e-04  5.01e-02  5.27e-05  1.03e-03  9.56e-01  
  9  +4.9851e-01  +5.4634e-01  4.78e-02  1.92e-05  4.39e-03  7.93e-04  6.28e-05  9.39e-01  
 10  +4.9779e-01  +5.4206e-01  4.43e-02  1.64e-05  3.74e-03  7.25e-04  5.30e-05  2.18e-01  
 11  +4.9725e-01  +5.3902e-01  4.18e-02  1.45e-05  3.30e-03  5.38e-04  4.60e-05  3.34e-01  
 12  +4.9706e-01  +5.3811e-01  4.11e-02  1.39e-05  3.17e-03  4.73e-04  4.38e-05  1.48e-01  
 13  +4.9621e-01  +5.3481e-01  3.86e-02  1.11e-05  2.54e-03  6.70e-05  3.48e-05  8.52e-01  
 14  +4.9598e-01  +5.3402e-01  3.80e-02  1.09e-05  2.48e-03  5.14e-05  3.40e-05  2.03e-01  
 15  +4.9429e-01  +5.2692e-01  3.26e-02  7.81e-06  1.79e-03  4.46e-05  2.47e-05  3.36e-01  
 16  +4.9372e-01  +5.2430e-01  3.06e-02  7.46e-06  1.71e-03  2.51e-05  2.37e-05  3.35e-01  
 17  +4.9070e-01  +5.1286e-01  2.22e-02  4.41e-06  1.01e-03  1.68e-05  1.43e-05  4.95e-01  
 18  +4.9044e-01  +5.1162e-01  2.12e-02  4.29e-06  9.80e-04  1.37e-05  1.39e-05  1.40e-01  
 19  +4.8673e-01  +4.9731e-01  1.06e-02  1.98e-06  4.51e-04  2.64e-06  6.57e-06  7.65e-01  
 20  +4.8393e-01  +4.8710e-01  3.17e-03  5.56e-07  1.27e-04  6.93e-07  1.90e-06  7.35e-01  
 21  +4.8283e-01  +4.8312e-01  2.90e-04  4.97e-08  1.14e-05  2.28e-08  1.73e-07  9.90e-01  
 22  +4.8270e-01  +4.8270e-01  2.92e-06  5.00e-10  1.14e-07  2.29e-10  1.74e-09  9.90e-01  
 23  +4.8270e-01  +4.8270e-01  2.92e-08  5.00e-12  1.14e-09  2.29e-12  1.74e-11  9.90e-01  
 24  +4.8270e-01  +4.8270e-01  2.93e-10  5.00e-14  1.14e-11  2.33e-14  1.77e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 87.6031ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:58 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:58 PM: Optimal value: 4.827e-01
(CVXPY) Aug 30 12:19:58 PM: Compilation took 1.997e-02 seconds
(CVXPY) Aug 30 12:19:58 PM: Solver (including time spent in interface) took 9.388e-02 seconds
Iteration: 2, Objective: 0.4827
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:58 PM: Your problem has 5037 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:59 PM: Finished problem compilation (took 2.428e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5037
  constraints   = 10037
  nnz(P)        = 0
  nnz(A)        = 66409
  cones (total) = 1
    : Nonnegative = 1,  numel = 10037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.14e+02  1.00e+00  1.00e+00   ------   
  1  +5.8406e-01  +1.0698e+03  1.07e+03  4.19e-01  7.29e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3471e-01  +1.2628e+02  1.26e+02  1.63e-01  3.63e+01  1.47e-02  2.66e-01  9.01e-01  
  3  +5.0931e-01  +3.2727e+01  3.22e+01  1.22e-01  2.69e+01  3.97e-05  2.53e-01  2.16e-01  
  4  +5.0088e-01  +2.7125e+00  2.21e+00  1.50e-02  3.37e+00  5.42e-06  1.64e-01  6.40e-01  
  5  +5.0009e-01  +8.5697e-01  3.57e-01  2.40e-03  5.47e-01  2.85e-05  8.78e-02  9.90e-01  
  6  +5.0004e-01  +6.7693e-01  1.77e-01  1.18e-03  2.71e-01  1.64e-05  4.42e-02  5.73e-01  
  7  +5.0005e-01  +6.8042e-01  1.80e-01  1.20e-03  2.75e-01  1.13e-05  2.51e-02  9.17e-01  
  8  +5.0000e-01  +5.8991e-01  8.99e-02  5.37e-04  1.23e-01  2.21e-05  3.95e-03  8.58e-01  
  9  +4.9902e-01  +5.8815e-01  8.91e-02  4.56e-05  1.05e-02  5.50e-04  1.46e-04  9.65e-01  
 10  +4.9808e-01  +5.7965e-01  8.16e-02  3.28e-05  7.57e-03  5.78e-04  1.05e-04  3.58e-01  
 11  +4.9784e-01  +5.7595e-01  7.81e-02  3.17e-05  7.30e-03  4.70e-04  1.01e-04  1.55e-01  
 12  +4.9748e-01  +5.7136e-01  7.39e-02  2.98e-05  6.87e-03  3.50e-04  9.49e-05  2.26e-01  
 13  +4.9680e-01  +5.6152e-01  6.47e-02  2.53e-05  5.83e-03  6.30e-05  8.00e-05  7.26e-01  
 14  +4.9640e-01  +5.5919e-01  6.28e-02  2.30e-05  5.32e-03  5.57e-05  7.29e-05  1.93e-01  
 15  +4.9532e-01  +5.5136e-01  5.60e-02  1.95e-05  4.49e-03  5.90e-07  6.15e-05  8.76e-01  
 16  +4.9349e-01  +5.4265e-01  4.92e-02  1.44e-05  3.33e-03  7.36e-07  4.55e-05  3.58e-01  
 17  +4.9280e-01  +5.3962e-01  4.68e-02  1.30e-05  2.99e-03  1.30e-06  4.08e-05  5.47e-01  
 18  +4.9208e-01  +5.3631e-01  4.42e-02  1.13e-05  2.61e-03  1.34e-06  3.55e-05  2.22e-01  
 19  +4.9125e-01  +5.3358e-01  4.23e-02  1.11e-05  2.56e-03  1.27e-06  3.53e-05  8.11e-02  
 20  +4.8927e-01  +5.2493e-01  3.57e-02  8.60e-06  1.98e-03  1.14e-06  2.74e-05  2.97e-01  
 21  +4.8822e-01  +5.2037e-01  3.22e-02  7.19e-06  1.66e-03  1.23e-06  2.29e-05  4.71e-01  
 22  +4.8531e-01  +5.0790e-01  2.26e-02  4.58e-06  1.06e-03  1.12e-06  1.48e-05  9.90e-01  
 23  +4.8289e-01  +4.9878e-01  1.59e-02  3.05e-06  7.02e-04  7.91e-07  1.00e-05  3.80e-01  
 24  +4.8078e-01  +4.9043e-01  9.66e-03  1.75e-06  4.04e-04  5.52e-07  5.85e-06  8.30e-01  
 25  +4.7912e-01  +4.8422e-01  5.09e-03  8.95e-07  2.06e-04  3.32e-07  3.04e-06  9.90e-01  
 26  +4.7727e-01  +4.7788e-01  6.15e-04  1.06e-07  2.45e-05  4.01e-08  3.69e-07  9.90e-01  
 27  +4.7700e-01  +4.7701e-01  7.51e-06  1.29e-09  2.98e-07  4.86e-10  4.51e-09  9.88e-01  
 28  +4.7700e-01  +4.7700e-01  7.51e-08  1.29e-11  2.98e-09  4.86e-12  4.51e-11  9.90e-01  
 29  +4.7700e-01  +4.7700e-01  7.52e-10  1.29e-13  2.98e-11  4.99e-14  4.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.3822ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:59 PM: Optimal value: 4.770e-01
(CVXPY) Aug 30 12:19:59 PM: Compilation took 2.428e-02 seconds
(CVXPY) Aug 30 12:19:59 PM: Solver (including time spent in interface) took 1.190e-01 seconds
Iteration: 3, Objective: 0.4770
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:59 PM: Your problem has 5047 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:59 PM: Finished problem compilation (took 2.359e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5047
  constraints   = 10047
  nnz(P)        = 0
  nnz(A)        = 70872
  cones (total) = 1
    : Nonnegative = 1,  numel = 10047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8401e-01  +1.0700e+03  1.07e+03  4.20e-01  7.35e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3467e-01  +1.2618e+02  1.26e+02  1.63e-01  3.65e+01  1.48e-02  2.65e-01  9.02e-01  
  3  +5.0930e-01  +3.2700e+01  3.22e+01  1.22e-01  2.71e+01  3.97e-05  2.53e-01  2.17e-01  
  4  +5.0088e-01  +2.7121e+00  2.21e+00  1.50e-02  3.40e+00  5.42e-06  1.63e-01  6.41e-01  
  5  +5.0009e-01  +8.6278e-01  3.63e-01  2.44e-03  5.61e-01  2.87e-05  8.71e-02  9.90e-01  
  6  +5.0004e-01  +6.6292e-01  1.63e-01  1.09e-03  2.52e-01  1.68e-05  3.82e-02  6.03e-01  
  7  +5.0004e-01  +6.8662e-01  1.87e-01  1.24e-03  2.86e-01  1.73e-05  2.47e-02  6.90e-01  
  8  +4.9998e-01  +6.2980e-01  1.30e-01  7.55e-04  1.74e-01  4.04e-05  5.11e-03  8.10e-01  
  9  +4.9845e-01  +6.1546e-01  1.17e-01  6.01e-05  1.40e-02  8.60e-04  1.95e-04  9.69e-01  
 10  +4.9623e-01  +5.9135e-01  9.51e-02  3.33e-05  7.74e-03  9.04e-04  1.07e-04  5.51e-01  
 11  +4.9472e-01  +5.7758e-01  8.29e-02  2.72e-05  6.33e-03  6.71e-04  8.70e-05  3.06e-01  
 12  +4.9302e-01  +5.6495e-01  7.19e-02  2.00e-05  4.64e-03  4.29e-04  6.36e-05  5.01e-01  
 13  +4.9294e-01  +5.6446e-01  7.15e-02  1.99e-05  4.63e-03  4.22e-04  6.36e-05  4.51e-03  
 14  +4.9180e-01  +5.5682e-01  6.50e-02  1.84e-05  4.29e-03  2.78e-04  5.93e-05  2.43e-01  
 15  +4.9089e-01  +5.5150e-01  6.06e-02  1.65e-05  3.84e-03  1.98e-04  5.33e-05  2.81e-01  
 16  +4.8623e-01  +5.2889e-01  4.27e-02  1.01e-05  2.36e-03  1.31e-04  3.33e-05  4.23e-01  
 17  +4.8166e-01  +5.0507e-01  2.34e-02  5.13e-06  1.19e-03  1.29e-05  1.73e-05  8.38e-01  
 18  +4.7915e-01  +4.9336e-01  1.42e-02  2.94e-06  6.82e-04  5.01e-07  1.01e-05  9.90e-01  
 19  +4.7615e-01  +4.8122e-01  5.07e-03  1.03e-06  2.38e-04  1.97e-07  3.62e-06  7.23e-01  
 20  +4.7472e-01  +4.7554e-01  8.23e-04  1.64e-07  3.81e-05  3.58e-08  6.01e-07  9.00e-01  
 21  +4.7442e-01  +4.7447e-01  4.78e-05  9.25e-09  2.15e-06  2.27e-09  3.61e-08  9.85e-01  
 22  +4.7440e-01  +4.7440e-01  4.82e-07  9.30e-11  2.16e-08  2.28e-11  3.66e-10  9.90e-01  
 23  +4.7440e-01  +4.7440e-01  4.82e-09  9.30e-13  2.16e-10  2.28e-13  3.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.3296ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:59 PM: Optimal value: 4.744e-01
(CVXPY) Aug 30 12:19:59 PM: Compilation took 2.359e-02 seconds
(CVXPY) Aug 30 12:19:59 PM: Solver (including time spent in interface) took 9.997e-02 seconds
Iteration: 4, Objective: 0.4744
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:59 PM: Your problem has 5057 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:59 PM: Finished problem compilation (took 2.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5057
  constraints   = 10057
  nnz(P)        = 0
  nnz(A)        = 73895
  cones (total) = 1
    : Nonnegative = 1,  numel = 10057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8394e-01  +1.0701e+03  1.07e+03  4.20e-01  7.37e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3460e-01  +1.2606e+02  1.26e+02  1.63e-01  3.66e+01  1.48e-02  2.65e-01  9.02e-01  
  3  +5.0928e-01  +3.2672e+01  3.22e+01  1.22e-01  2.72e+01  3.98e-05  2.52e-01  2.18e-01  
  4  +5.0088e-01  +2.7125e+00  2.21e+00  1.50e-02  3.41e+00  5.43e-06  1.63e-01  6.43e-01  
  5  +5.0010e-01  +8.6883e-01  3.69e-01  2.48e-03  5.72e-01  2.89e-05  8.64e-02  9.90e-01  
  6  +5.0004e-01  +6.7900e-01  1.79e-01  1.20e-03  2.78e-01  1.83e-05  3.90e-02  6.06e-01  
  7  +5.0001e-01  +6.4979e-01  1.50e-01  9.75e-04  2.26e-01  3.03e-05  1.18e-02  8.36e-01  
  8  +4.9955e-01  +6.3953e-01  1.40e-01  2.90e-04  6.75e-02  2.75e-04  1.02e-03  9.29e-01  
  9  +4.9634e-01  +6.2296e-01  1.27e-01  4.24e-05  9.90e-03  1.76e-03  1.36e-04  8.75e-01  
 10  +4.9565e-01  +6.1482e-01  1.19e-01  3.79e-05  8.83e-03  1.47e-03  1.21e-04  2.13e-01  
 11  +4.9520e-01  +6.0351e-01  1.08e-01  3.27e-05  7.63e-03  9.31e-04  1.05e-04  3.77e-01  
 12  +4.9422e-01  +5.9295e-01  9.87e-02  2.98e-05  6.95e-03  6.34e-04  9.64e-05  2.60e-01  
 13  +4.9164e-01  +5.7554e-01  8.39e-02  2.43e-05  5.66e-03  3.62e-04  7.99e-05  3.83e-01  
 14  +4.8704e-01  +5.5054e-01  6.35e-02  1.68e-05  3.92e-03  1.67e-04  5.71e-05  5.00e-01  
 15  +4.8058e-01  +5.1915e-01  3.86e-02  9.17e-06  2.14e-03  2.92e-05  3.27e-05  7.41e-01  
 16  +4.7270e-01  +4.8489e-01  1.22e-02  2.60e-06  6.06e-04  2.15e-06  9.97e-06  8.80e-01  
 17  +4.7101e-01  +4.7813e-01  7.12e-03  1.48e-06  3.44e-04  1.01e-06  5.83e-06  5.79e-01  
 18  +4.6887e-01  +4.6964e-01  7.72e-04  1.57e-07  3.66e-05  8.68e-08  6.46e-07  9.16e-01  
 19  +4.6861e-01  +4.6862e-01  1.48e-05  3.00e-09  6.99e-07  1.20e-09  1.24e-08  9.90e-01  
 20  +4.6860e-01  +4.6860e-01  1.48e-07  3.00e-11  6.99e-09  1.20e-11  1.24e-10  9.90e-01  
 21  +4.6860e-01  +4.6860e-01  1.48e-09  3.00e-13  6.99e-11  1.21e-13  1.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 91.8649ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:59 PM: Optimal value: 4.686e-01
(CVXPY) Aug 30 12:19:59 PM: Compilation took 2.561e-02 seconds
(CVXPY) Aug 30 12:19:59 PM: Solver (including time spent in interface) took 9.961e-02 seconds
Iteration: 5, Objective: 0.4686
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:59 PM: Your problem has 5067 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:59 PM: Finished problem compilation (took 2.770e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5067
  constraints   = 10067
  nnz(P)        = 0
  nnz(A)        = 76277
  cones (total) = 1
    : Nonnegative = 1,  numel = 10067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8390e-01  +1.0702e+03  1.07e+03  4.20e-01  7.38e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3456e-01  +1.2597e+02  1.25e+02  1.63e-01  3.66e+01  1.48e-02  2.65e-01  9.03e-01  
  3  +5.0927e-01  +3.2642e+01  3.21e+01  1.22e-01  2.72e+01  3.98e-05  2.52e-01  2.19e-01  
  4  +5.0088e-01  +2.7124e+00  2.21e+00  1.51e-02  3.42e+00  5.44e-06  1.62e-01  6.44e-01  
  5  +5.0010e-01  +8.7451e-01  3.74e-01  2.52e-03  5.83e-01  2.91e-05  8.56e-02  9.90e-01  
  6  +5.0004e-01  +6.9796e-01  1.98e-01  1.33e-03  3.08e-01  2.00e-05  4.08e-02  5.82e-01  
  7  +5.0000e-01  +6.4842e-01  1.48e-01  9.73e-04  2.26e-01  3.20e-05  1.26e-02  7.47e-01  
  8  +4.9926e-01  +6.4468e-01  1.45e-01  2.16e-04  5.05e-02  4.35e-04  7.31e-04  9.90e-01  
  9  +4.9695e-01  +6.2999e-01  1.33e-01  6.16e-05  1.44e-02  1.37e-03  1.98e-04  7.39e-01  
 10  +4.9698e-01  +6.1923e-01  1.22e-01  5.39e-05  1.26e-02  8.92e-04  1.71e-04  3.88e-01  
 11  +4.9567e-01  +6.0335e-01  1.08e-01  3.79e-05  8.85e-03  6.51e-04  1.20e-04  5.47e-01  
 12  +4.9526e-01  +5.9724e-01  1.02e-01  3.44e-05  8.04e-03  4.13e-04  1.09e-04  3.68e-01  
 13  +4.9487e-01  +5.9442e-01  9.96e-02  3.37e-05  7.89e-03  3.60e-04  1.07e-04  1.01e-01  
 14  +4.8937e-01  +5.6567e-01  7.63e-02  1.97e-05  4.60e-03  2.80e-04  6.40e-05  5.07e-01  
 15  +4.8836e-01  +5.5959e-01  7.12e-02  1.85e-05  4.33e-03  2.02e-04  6.05e-05  2.12e-01  
 16  +4.8457e-01  +5.4117e-01  5.66e-02  1.40e-05  3.27e-03  1.43e-04  4.66e-05  2.84e-01  
 17  +4.7723e-01  +5.0531e-01  2.81e-02  6.32e-06  1.48e-03  1.52e-06  2.18e-05  8.99e-01  
 18  +4.7292e-01  +4.8676e-01  1.38e-02  2.96e-06  6.91e-04  7.23e-07  1.05e-05  5.49e-01  
 19  +4.7072e-01  +4.7746e-01  6.75e-03  1.35e-06  3.15e-04  3.73e-07  4.83e-06  9.90e-01  
 20  +4.6985e-01  +4.7428e-01  4.44e-03  8.40e-07  1.96e-04  2.53e-07  3.05e-06  4.94e-01  
 21  +4.6969e-01  +4.7365e-01  3.96e-03  7.59e-07  1.77e-04  2.25e-07  2.76e-06  4.54e-01  
 22  +4.6852e-01  +4.6939e-01  8.64e-04  1.62e-07  3.77e-05  4.71e-08  6.04e-07  8.18e-01  
 23  +4.6821e-01  +4.6823e-01  2.02e-05  3.74e-09  8.73e-07  1.11e-09  1.41e-08  9.90e-01  
 24  +4.6820e-01  +4.6820e-01  2.02e-07  3.74e-11  8.73e-09  1.11e-11  1.41e-10  9.90e-01  
 25  +4.6820e-01  +4.6820e-01  2.02e-09  3.75e-13  8.74e-11  1.17e-13  1.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 110.171ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:59 PM: Optimal value: 4.682e-01
(CVXPY) Aug 30 12:19:59 PM: Compilation took 2.770e-02 seconds
(CVXPY) Aug 30 12:19:59 PM: Solver (including time spent in interface) took 1.171e-01 seconds
Iteration: 6, Objective: 0.4682
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:59 PM: Your problem has 5077 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:59 PM: Finished problem compilation (took 2.947e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5077
  constraints   = 10077
  nnz(P)        = 0
  nnz(A)        = 78024
  cones (total) = 1
    : Nonnegative = 1,  numel = 10077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8381e-01  +1.0703e+03  1.07e+03  4.20e-01  7.38e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3448e-01  +1.2582e+02  1.25e+02  1.63e-01  3.65e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0925e-01  +3.2603e+01  3.21e+01  1.22e-01  2.71e+01  3.99e-05  2.52e-01  2.20e-01  
  4  +5.0087e-01  +2.7111e+00  2.21e+00  1.51e-02  3.42e+00  5.46e-06  1.62e-01  6.46e-01  
  5  +5.0010e-01  +8.8441e-01  3.84e-01  2.59e-03  5.99e-01  2.94e-05  8.43e-02  9.90e-01  
  6  +5.0003e-01  +6.8029e-01  1.80e-01  1.21e-03  2.80e-01  2.11e-05  3.16e-02  7.05e-01  
  7  +4.9994e-01  +6.9164e-01  1.92e-01  1.08e-03  2.51e-01  7.57e-05  6.56e-03  8.92e-01  
  8  +4.9778e-01  +6.7295e-01  1.75e-01  1.04e-04  2.45e-02  1.21e-03  3.39e-04  9.50e-01  
  9  +4.9605e-01  +6.4477e-01  1.49e-01  7.11e-05  1.66e-02  1.13e-03  2.29e-04  4.03e-01  
 10  +4.9638e-01  +6.4383e-01  1.47e-01  7.04e-05  1.65e-02  1.01e-03  2.25e-04  1.07e-01  
 11  +4.9608e-01  +6.3306e-01  1.37e-01  5.87e-05  1.37e-02  7.59e-04  1.86e-04  3.80e-01  
 12  +4.9624e-01  +6.1391e-01  1.18e-01  4.57e-05  1.07e-02  1.15e-04  1.43e-04  8.29e-01  
 13  +4.9597e-01  +6.1225e-01  1.16e-01  4.51e-05  1.06e-02  1.03e-04  1.41e-04  9.36e-02  
 14  +4.9300e-01  +5.9521e-01  1.02e-01  2.98e-05  6.97e-03  8.32e-05  9.39e-05  5.42e-01  
 15  +4.9192e-01  +5.9003e-01  9.81e-02  2.95e-05  6.91e-03  7.27e-05  9.37e-05  4.36e-02  
 16  +4.8563e-01  +5.5889e-01  7.33e-02  1.86e-05  4.34e-03  4.43e-05  6.03e-05  4.97e-01  
 17  +4.8315e-01  +5.4634e-01  6.32e-02  1.55e-05  3.62e-03  2.03e-05  5.09e-05  4.94e-01  
 18  +4.7616e-01  +5.1533e-01  3.92e-02  8.58e-06  2.00e-03  6.80e-06  2.90e-05  6.74e-01  
 19  +4.7382e-01  +5.0508e-01  3.13e-02  6.43e-06  1.50e-03  2.25e-06  2.21e-05  8.24e-01  
 20  +4.6831e-01  +4.8308e-01  1.48e-02  2.88e-06  6.71e-04  8.44e-07  1.02e-05  8.62e-01  
 21  +4.6407e-01  +4.6686e-01  2.79e-03  5.23e-07  1.22e-04  1.56e-07  1.94e-06  9.12e-01  
 22  +4.6303e-01  +4.6312e-01  8.64e-05  1.60e-08  3.75e-06  4.73e-09  6.07e-08  9.90e-01  
 23  +4.6300e-01  +4.6300e-01  8.65e-07  1.61e-10  3.75e-08  4.74e-11  6.08e-10  9.90e-01  
 24  +4.6300e-01  +4.6300e-01  8.65e-09  1.61e-12  3.75e-10  4.74e-13  6.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 103.8745ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:00 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:00 PM: Optimal value: 4.630e-01
(CVXPY) Aug 30 12:20:00 PM: Compilation took 2.947e-02 seconds
(CVXPY) Aug 30 12:20:00 PM: Solver (including time spent in interface) took 1.108e-01 seconds
Iteration: 7, Objective: 0.4630
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:00 PM: Your problem has 5087 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:00 PM: Finished problem compilation (took 3.112e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5087
  constraints   = 10087
  nnz(P)        = 0
  nnz(A)        = 79361
  cones (total) = 1
    : Nonnegative = 1,  numel = 10087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8380e-01  +1.0703e+03  1.07e+03  4.20e-01  7.38e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3446e-01  +1.2579e+02  1.25e+02  1.63e-01  3.65e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0925e-01  +3.2592e+01  3.21e+01  1.22e-01  2.71e+01  3.99e-05  2.52e-01  2.21e-01  
  4  +5.0087e-01  +2.7107e+00  2.21e+00  1.51e-02  3.42e+00  5.46e-06  1.62e-01  6.47e-01  
  5  +5.0012e-01  +9.1898e-01  4.19e-01  2.82e-03  6.53e-01  2.90e-05  8.80e-02  9.39e-01  
  6  +5.0005e-01  +7.0860e-01  2.09e-01  1.40e-03  3.24e-01  2.07e-05  3.72e-02  6.77e-01  
  7  +4.9998e-01  +6.7772e-01  1.78e-01  1.10e-03  2.55e-01  5.07e-05  8.88e-03  8.25e-01  
  8  +4.9806e-01  +6.6002e-01  1.62e-01  1.04e-04  2.43e-02  1.08e-03  3.35e-04  9.76e-01  
  9  +4.9566e-01  +6.3374e-01  1.38e-01  5.73e-05  1.34e-02  1.30e-03  1.83e-04  5.25e-01  
 10  +4.9607e-01  +6.3325e-01  1.37e-01  5.47e-05  1.28e-02  1.09e-03  1.73e-04  2.23e-01  
 11  +4.9512e-01  +6.2507e-01  1.30e-01  4.62e-05  1.08e-02  1.00e-03  1.45e-04  2.48e-01  
 12  +4.9446e-01  +6.1374e-01  1.19e-01  4.20e-05  9.83e-03  5.77e-04  1.32e-04  3.75e-01  
 13  +4.9074e-01  +5.9252e-01  1.02e-01  2.81e-05  6.56e-03  5.23e-04  8.90e-05  4.06e-01  
 14  +4.8981e-01  +5.8725e-01  9.74e-02  2.79e-05  6.52e-03  4.64e-04  8.89e-05  2.66e-02  
 15  +4.8429e-01  +5.5906e-01  7.48e-02  1.87e-05  4.38e-03  3.19e-04  6.09e-05  3.96e-01  
 16  +4.8193e-01  +5.4532e-01  6.34e-02  1.54e-05  3.60e-03  1.60e-04  5.05e-05  4.45e-01  
 17  +4.7582e-01  +5.1633e-01  4.05e-02  9.04e-06  2.11e-03  6.81e-05  3.04e-05  5.61e-01  
 18  +4.7330e-01  +5.0517e-01  3.19e-02  6.84e-06  1.60e-03  4.71e-05  2.32e-05  3.23e-01  
 19  +4.7083e-01  +4.9403e-01  2.32e-02  4.74e-06  1.11e-03  1.96e-05  1.63e-05  5.98e-01  
 20  +4.6713e-01  +4.7839e-01  1.13e-02  2.19e-06  5.11e-04  6.47e-07  7.79e-06  9.90e-01  
 21  +4.6395e-01  +4.6646e-01  2.51e-03  4.72e-07  1.10e-04  1.42e-07  1.76e-06  8.30e-01  
 22  +4.6318e-01  +4.6361e-01  4.39e-04  8.17e-08  1.91e-05  2.52e-08  3.08e-07  9.90e-01  
 23  +4.6300e-01  +4.6301e-01  5.47e-06  1.02e-09  2.37e-07  3.13e-10  3.85e-09  9.88e-01  
 24  +4.6300e-01  +4.6300e-01  5.47e-08  1.02e-11  2.37e-09  3.13e-12  3.85e-11  9.90e-01  
 25  +4.6300e-01  +4.6300e-01  5.47e-10  1.02e-13  2.37e-11  3.22e-14  3.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.1015ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:00 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:00 PM: Optimal value: 4.630e-01
(CVXPY) Aug 30 12:20:00 PM: Compilation took 3.112e-02 seconds
(CVXPY) Aug 30 12:20:00 PM: Solver (including time spent in interface) took 1.197e-01 seconds
Iteration: 8, Objective: 0.4630
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:00 PM: Your problem has 5097 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:00 PM: Finished problem compilation (took 2.947e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5097
  constraints   = 10097
  nnz(P)        = 0
  nnz(A)        = 80407
  cones (total) = 1
    : Nonnegative = 1,  numel = 10097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8374e-01  +1.0704e+03  1.07e+03  4.21e-01  7.38e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3443e-01  +1.2575e+02  1.25e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0924e-01  +3.2582e+01  3.21e+01  1.22e-01  2.71e+01  4.00e-05  2.52e-01  2.21e-01  
  4  +5.0088e-01  +2.7133e+00  2.21e+00  1.51e-02  3.43e+00  5.47e-06  1.61e-01  6.47e-01  
  5  +5.0010e-01  +8.8990e-01  3.90e-01  2.63e-03  6.08e-01  2.96e-05  8.37e-02  9.90e-01  
  6  +5.0004e-01  +7.1362e-01  2.14e-01  1.43e-03  3.32e-01  2.28e-05  3.57e-02  6.85e-01  
  7  +4.9997e-01  +6.9337e-01  1.93e-01  1.16e-03  2.68e-01  5.99e-05  8.12e-03  8.72e-01  
  8  +4.9793e-01  +6.7013e-01  1.72e-01  1.05e-04  2.45e-02  1.14e-03  3.35e-04  9.68e-01  
  9  +4.9555e-01  +6.4282e-01  1.47e-01  6.04e-05  1.41e-02  1.32e-03  1.92e-04  5.01e-01  
 10  +4.9565e-01  +6.3472e-01  1.39e-01  5.35e-05  1.25e-02  8.89e-04  1.68e-04  3.84e-01  
 11  +4.9527e-01  +6.2504e-01  1.30e-01  4.69e-05  1.10e-02  5.77e-04  1.47e-04  3.91e-01  
 12  +4.9489e-01  +6.1792e-01  1.23e-01  4.49e-05  1.05e-02  3.51e-04  1.41e-04  3.15e-01  
 13  +4.9219e-01  +6.0255e-01  1.10e-01  3.30e-05  7.71e-03  3.23e-04  1.04e-04  3.49e-01  
 14  +4.9085e-01  +5.9429e-01  1.03e-01  3.23e-05  7.55e-03  2.36e-04  1.03e-04  1.41e-01  
 15  +4.8534e-01  +5.6649e-01  8.12e-02  2.16e-05  5.04e-03  1.75e-04  7.03e-05  3.91e-01  
 16  +4.8058e-01  +5.4350e-01  6.29e-02  1.55e-05  3.62e-03  1.12e-04  5.15e-05  3.71e-01  
 17  +4.7565e-01  +5.1941e-01  4.38e-02  9.95e-06  2.32e-03  3.79e-05  3.37e-05  6.38e-01  
 18  +4.7099e-01  +4.9823e-01  2.72e-02  5.82e-06  1.36e-03  1.51e-05  2.00e-05  6.11e-01  
 19  +4.7045e-01  +4.9539e-01  2.49e-02  5.24e-06  1.22e-03  8.47e-06  1.80e-05  4.78e-01  
 20  +4.6743e-01  +4.8269e-01  1.53e-02  3.13e-06  7.30e-04  4.82e-06  1.09e-05  4.40e-01  
 21  +4.6439e-01  +4.7005e-01  5.66e-03  1.12e-06  2.62e-04  1.05e-06  3.98e-06  8.25e-01  
 22  +4.6433e-01  +4.6983e-01  5.50e-03  1.07e-06  2.50e-04  9.00e-07  3.79e-06  2.24e-01  
 23  +4.6408e-01  +4.6885e-01  4.77e-03  9.41e-07  2.20e-04  4.24e-07  3.43e-06  6.66e-01  
 24  +4.6388e-01  +4.6808e-01  4.20e-03  8.25e-07  1.93e-04  3.56e-07  3.02e-06  2.38e-01  
 25  +4.6328e-01  +4.6579e-01  2.51e-03  4.87e-07  1.14e-04  1.97e-07  1.79e-06  5.69e-01  
 26  +4.6307e-01  +4.6508e-01  2.02e-03  3.81e-07  8.89e-05  1.56e-07  1.39e-06  3.43e-01  
 27  +4.6233e-01  +4.6240e-01  6.84e-05  1.27e-08  2.95e-06  4.68e-09  4.73e-08  9.80e-01  
 28  +4.6230e-01  +4.6230e-01  6.90e-07  1.28e-10  2.98e-08  4.72e-11  4.77e-10  9.90e-01  
 29  +4.6230e-01  +4.6230e-01  6.90e-09  1.28e-12  2.98e-10  4.72e-13  4.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.5379ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:00 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:00 PM: Optimal value: 4.623e-01
(CVXPY) Aug 30 12:20:00 PM: Compilation took 2.947e-02 seconds
(CVXPY) Aug 30 12:20:00 PM: Solver (including time spent in interface) took 1.439e-01 seconds
Iteration: 9, Objective: 0.4623
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:00 PM: Your problem has 5107 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:00 PM: Finished problem compilation (took 3.203e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5107
  constraints   = 10107
  nnz(P)        = 0
  nnz(A)        = 82156
  cones (total) = 1
    : Nonnegative = 1,  numel = 10107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8374e-01  +1.0703e+03  1.07e+03  4.21e-01  7.38e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3442e-01  +1.2569e+02  1.25e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0924e-01  +3.2559e+01  3.20e+01  1.22e-01  2.70e+01  3.99e-05  2.51e-01  2.22e-01  
  4  +5.0087e-01  +2.7089e+00  2.21e+00  1.51e-02  3.42e+00  5.48e-06  1.61e-01  6.48e-01  
  5  +5.0010e-01  +8.9306e-01  3.93e-01  2.65e-03  6.14e-01  2.96e-05  8.32e-02  9.90e-01  
  6  +5.0005e-01  +7.4248e-01  2.42e-01  1.63e-03  3.78e-01  2.47e-05  4.18e-02  5.48e-01  
  7  +4.9998e-01  +7.1588e-01  2.16e-01  1.27e-03  2.94e-01  5.98e-05  8.33e-03  9.90e-01  
  8  +4.9804e-01  +6.7883e-01  1.81e-01  1.05e-04  2.47e-02  1.08e-03  3.35e-04  9.76e-01  
  9  +4.9529e-01  +6.4985e-01  1.55e-01  5.55e-05  1.30e-02  1.38e-03  1.75e-04  5.57e-01  
 10  +4.9471e-01  +6.3967e-01  1.45e-01  5.11e-05  1.20e-02  1.07e-03  1.61e-04  2.26e-01  
 11  +4.9366e-01  +6.3145e-01  1.38e-01  4.46e-05  1.05e-02  9.51e-04  1.41e-04  2.23e-01  
 12  +4.9312e-01  +6.1922e-01  1.26e-01  4.05e-05  9.48e-03  4.42e-04  1.28e-04  4.56e-01  
 13  +4.9097e-01  +6.0745e-01  1.16e-01  3.32e-05  7.77e-03  3.84e-04  1.06e-04  2.71e-01  
 14  +4.9001e-01  +6.0085e-01  1.11e-01  3.26e-05  7.63e-03  2.94e-04  1.04e-04  1.37e-01  
 15  +4.8381e-01  +5.7058e-01  8.68e-02  2.19e-05  5.13e-03  2.18e-04  7.19e-05  3.72e-01  
 16  +4.7711e-01  +5.3879e-01  6.17e-02  1.45e-05  3.38e-03  1.26e-04  4.89e-05  4.07e-01  
 17  +4.7093e-01  +5.1068e-01  3.97e-02  8.73e-06  2.04e-03  6.43e-05  3.04e-05  4.75e-01  
 18  +4.6560e-01  +4.8667e-01  2.11e-02  4.34e-06  1.01e-03  1.11e-05  1.56e-05  8.18e-01  
 19  +4.6001e-01  +4.6398e-01  3.97e-03  7.86e-07  1.84e-04  1.14e-06  2.95e-06  8.96e-01  
 20  +4.5999e-01  +4.6393e-01  3.94e-03  7.64e-07  1.78e-04  1.13e-06  2.84e-06  7.21e-02  
 21  +4.5991e-01  +4.6361e-01  3.69e-03  7.35e-07  1.72e-04  9.04e-07  2.82e-06  1.16e-01  
 22  +4.5987e-01  +4.6345e-01  3.58e-03  7.12e-07  1.66e-04  8.21e-07  2.72e-06  1.20e-01  
 23  +4.5957e-01  +4.6233e-01  2.76e-03  5.44e-07  1.27e-04  5.64e-07  2.07e-06  3.72e-01  
 24  +4.5930e-01  +4.6142e-01  2.12e-03  4.08e-07  9.52e-05  3.93e-07  1.55e-06  3.62e-01  
 25  +4.5853e-01  +4.5860e-01  7.26e-05  1.38e-08  3.23e-06  6.55e-09  5.35e-08  9.88e-01  
 26  +4.5850e-01  +4.5850e-01  7.27e-07  1.38e-10  3.23e-08  6.56e-11  5.37e-10  9.90e-01  
 27  +4.5850e-01  +4.5850e-01  7.27e-09  1.38e-12  3.23e-10  6.56e-13  5.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.4352ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:00 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:00 PM: Optimal value: 4.585e-01
(CVXPY) Aug 30 12:20:00 PM: Compilation took 3.203e-02 seconds
(CVXPY) Aug 30 12:20:00 PM: Solver (including time spent in interface) took 1.425e-01 seconds
Iteration: 10, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:01 PM: Your problem has 5117 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:01 PM: Finished problem compilation (took 3.173e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5117
  constraints   = 10117
  nnz(P)        = 0
  nnz(A)        = 82872
  cones (total) = 1
    : Nonnegative = 1,  numel = 10117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8370e-01  +1.0702e+03  1.07e+03  4.21e-01  7.37e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3439e-01  +1.2562e+02  1.25e+02  1.63e-01  3.63e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0923e-01  +3.2539e+01  3.20e+01  1.22e-01  2.70e+01  3.99e-05  2.51e-01  2.22e-01  
  4  +5.0087e-01  +2.7064e+00  2.21e+00  1.51e-02  3.42e+00  5.48e-06  1.61e-01  6.49e-01  
  5  +5.0013e-01  +9.6138e-01  4.61e-01  3.11e-03  7.20e-01  2.89e-05  9.01e-02  8.95e-01  
  6  +5.0005e-01  +7.3554e-01  2.35e-01  1.58e-03  3.67e-01  2.20e-05  3.93e-02  6.33e-01  
  7  +4.9997e-01  +7.0946e-01  2.09e-01  1.22e-03  2.83e-01  6.41e-05  7.80e-03  9.02e-01  
  8  +4.9785e-01  +6.9293e-01  1.95e-01  1.11e-04  2.61e-02  1.19e-03  3.53e-04  9.61e-01  
  9  +4.9494e-01  +6.6357e-01  1.69e-01  5.89e-05  1.38e-02  1.56e-03  1.86e-04  5.45e-01  
 10  +4.9444e-01  +6.5167e-01  1.57e-01  5.53e-05  1.30e-02  1.18e-03  1.75e-04  1.98e-01  
 11  +4.9277e-01  +6.3561e-01  1.43e-01  4.52e-05  1.06e-02  9.03e-04  1.43e-04  3.45e-01  
 12  +4.9039e-01  +6.1783e-01  1.27e-01  3.68e-05  8.62e-03  6.57e-04  1.17e-04  3.41e-01  
 13  +4.8964e-01  +6.1050e-01  1.21e-01  3.61e-05  8.46e-03  4.94e-04  1.15e-04  1.45e-01  
 14  +4.8674e-01  +5.9448e-01  1.08e-01  3.00e-05  7.02e-03  4.00e-04  9.68e-05  2.39e-01  
 15  +4.8236e-01  +5.6684e-01  8.45e-02  2.20e-05  5.15e-03  8.40e-05  7.23e-05  6.86e-01  
 16  +4.7945e-01  +5.5177e-01  7.23e-02  1.80e-05  4.20e-03  1.95e-05  5.97e-05  6.84e-01  
 17  +4.7055e-01  +5.1263e-01  4.21e-02  9.37e-06  2.19e-03  1.01e-05  3.22e-05  5.06e-01  
 18  +4.6856e-01  +5.0305e-01  3.45e-02  7.37e-06  1.72e-03  4.09e-06  2.55e-05  6.88e-01  
 19  +4.6277e-01  +4.7895e-01  1.62e-02  3.33e-06  7.78e-04  1.72e-06  1.19e-05  5.98e-01  
 20  +4.6118e-01  +4.7190e-01  1.07e-02  2.14e-06  5.00e-04  6.25e-07  7.66e-06  9.90e-01  
 21  +4.5894e-01  +4.6315e-01  4.21e-03  8.30e-07  1.94e-04  2.49e-07  3.01e-06  6.83e-01  
 22  +4.5888e-01  +4.6291e-01  4.03e-03  8.07e-07  1.88e-04  2.30e-07  2.96e-06  1.88e-01  
 23  +4.5885e-01  +4.6281e-01  3.95e-03  7.89e-07  1.84e-04  2.26e-07  2.88e-06  1.29e-01  
 24  +4.5839e-01  +4.6107e-01  2.69e-03  5.27e-07  1.23e-04  1.56e-07  1.92e-06  4.92e-01  
 25  +4.5754e-01  +4.5791e-01  3.69e-04  7.20e-08  1.68e-05  2.07e-08  2.66e-07  9.86e-01  
 26  +4.5741e-01  +4.5743e-01  2.12e-05  4.13e-09  9.64e-07  1.18e-09  1.53e-08  9.90e-01  
 27  +4.5740e-01  +4.5740e-01  2.13e-07  4.15e-11  9.68e-09  1.19e-11  1.54e-10  9.90e-01  
 28  +4.5740e-01  +4.5740e-01  2.13e-09  4.15e-13  9.69e-11  1.22e-13  1.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 134.1751ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:01 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:01 PM: Optimal value: 4.574e-01
(CVXPY) Aug 30 12:20:01 PM: Compilation took 3.173e-02 seconds
(CVXPY) Aug 30 12:20:01 PM: Solver (including time spent in interface) took 1.419e-01 seconds
Iteration: 11, Objective: 0.4574
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:01 PM: Your problem has 5127 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:01 PM: Finished problem compilation (took 3.356e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5127
  constraints   = 10127
  nnz(P)        = 0
  nnz(A)        = 83799
  cones (total) = 1
    : Nonnegative = 1,  numel = 10127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8366e-01  +1.0701e+03  1.07e+03  4.21e-01  7.37e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3437e-01  +1.2559e+02  1.25e+02  1.63e-01  3.62e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0922e-01  +3.2527e+01  3.20e+01  1.22e-01  2.70e+01  3.99e-05  2.51e-01  2.23e-01  
  4  +5.0087e-01  +2.7046e+00  2.20e+00  1.50e-02  3.42e+00  5.49e-06  1.60e-01  6.50e-01  
  5  +5.0013e-01  +9.4884e-01  4.49e-01  3.03e-03  7.01e-01  2.92e-05  8.77e-02  9.19e-01  
  6  +5.0005e-01  +7.2830e-01  2.28e-01  1.53e-03  3.56e-01  2.32e-05  3.62e-02  6.49e-01  
  7  +4.9994e-01  +7.1706e-01  2.17e-01  1.20e-03  2.79e-01  8.00e-05  6.85e-03  8.94e-01  
  8  +4.9748e-01  +7.0132e-01  2.04e-01  1.08e-04  2.52e-02  1.38e-03  3.40e-04  9.54e-01  
  9  +4.9556e-01  +6.8017e-01  1.85e-01  7.08e-05  1.66e-02  1.57e-03  2.22e-04  4.19e-01  
 10  +4.9394e-01  +6.5507e-01  1.61e-01  5.46e-05  1.28e-02  1.12e-03  1.71e-04  4.26e-01  
 11  +4.9201e-01  +6.4039e-01  1.48e-01  4.49e-05  1.05e-02  9.63e-04  1.42e-04  2.76e-01  
 12  +4.9109e-01  +6.2884e-01  1.38e-01  4.39e-05  1.03e-02  6.70e-04  1.40e-04  1.67e-01  
 13  +4.9070e-01  +6.2355e-01  1.33e-01  4.25e-05  9.94e-03  5.31e-04  1.35e-04  1.64e-01  
 14  +4.8407e-01  +5.8769e-01  1.04e-01  2.75e-05  6.42e-03  3.94e-04  8.95e-05  4.21e-01  
 15  +4.8093e-01  +5.6560e-01  8.47e-02  2.21e-05  5.16e-03  3.13e-05  7.30e-05  7.57e-01  
 16  +4.7366e-01  +5.3248e-01  5.88e-02  1.38e-05  3.23e-03  1.18e-05  4.71e-05  6.24e-01  
 17  +4.6959e-01  +5.1457e-01  4.50e-02  1.01e-05  2.37e-03  7.99e-06  3.51e-05  3.39e-01  
 18  +4.6558e-01  +4.9670e-01  3.11e-02  6.68e-06  1.56e-03  3.74e-06  2.35e-05  6.09e-01  
 19  +4.6046e-01  +4.7471e-01  1.43e-02  2.91e-06  6.80e-04  7.58e-07  1.05e-05  9.90e-01  
 20  +4.5745e-01  +4.6271e-01  5.25e-03  1.06e-06  2.47e-04  2.83e-07  3.87e-06  6.79e-01  
 21  +4.5739e-01  +4.6246e-01  5.07e-03  1.01e-06  2.37e-04  2.75e-07  3.71e-06  8.86e-02  
 22  +4.5691e-01  +4.6052e-01  3.61e-03  7.19e-07  1.68e-04  1.99e-07  2.63e-06  9.90e-01  
 23  +4.5599e-01  +4.5708e-01  1.09e-03  2.15e-07  5.01e-05  5.98e-08  7.94e-07  7.58e-01  
 24  +4.5561e-01  +4.5564e-01  2.65e-05  5.20e-09  1.21e-06  1.46e-09  1.93e-08  9.77e-01  
 25  +4.5560e-01  +4.5560e-01  2.66e-07  5.22e-11  1.22e-08  1.46e-11  1.94e-10  9.90e-01  
 26  +4.5560e-01  +4.5560e-01  2.66e-09  5.22e-13  1.22e-10  1.47e-13  1.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.7726ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:01 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:01 PM: Optimal value: 4.556e-01
(CVXPY) Aug 30 12:20:01 PM: Compilation took 3.356e-02 seconds
(CVXPY) Aug 30 12:20:01 PM: Solver (including time spent in interface) took 1.417e-01 seconds
Iteration: 12, Objective: 0.4556
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:01 PM: Your problem has 5137 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:01 PM: Finished problem compilation (took 3.297e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5137
  constraints   = 10137
  nnz(P)        = 0
  nnz(A)        = 85265
  cones (total) = 1
    : Nonnegative = 1,  numel = 10137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8363e-01  +1.0701e+03  1.07e+03  4.21e-01  7.37e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3435e-01  +1.2553e+02  1.25e+02  1.63e-01  3.62e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0922e-01  +3.2506e+01  3.20e+01  1.22e-01  2.69e+01  3.99e-05  2.51e-01  2.23e-01  
  4  +5.0087e-01  +2.7028e+00  2.20e+00  1.50e-02  3.42e+00  5.50e-06  1.60e-01  6.51e-01  
  5  +5.0011e-01  +9.0464e-01  4.05e-01  2.73e-03  6.33e-01  3.00e-05  8.16e-02  9.90e-01  
  6  +5.0005e-01  +7.4883e-01  2.49e-01  1.67e-03  3.88e-01  2.71e-05  3.74e-02  5.94e-01  
  7  +4.9990e-01  +7.2113e-01  2.21e-01  1.10e-03  2.57e-01  1.06e-04  5.43e-03  9.59e-01  
  8  +4.9718e-01  +7.0665e-01  2.09e-01  1.06e-04  2.48e-02  1.52e-03  3.34e-04  9.40e-01  
  9  +4.9544e-01  +6.8887e-01  1.93e-01  7.68e-05  1.80e-02  1.67e-03  2.41e-04  3.26e-01  
 10  +4.9607e-01  +6.6269e-01  1.67e-01  6.57e-05  1.54e-02  5.83e-04  2.04e-04  5.93e-01  
 11  +4.9520e-01  +6.4323e-01  1.48e-01  5.53e-05  1.30e-02  2.18e-04  1.72e-04  6.14e-01  
 12  +4.9382e-01  +6.3463e-01  1.41e-01  4.71e-05  1.10e-02  1.79e-04  1.47e-04  3.15e-01  
 13  +4.8935e-01  +6.0687e-01  1.18e-01  3.59e-05  8.40e-03  4.19e-05  1.14e-04  7.20e-01  
 14  +4.8168e-01  +5.7117e-01  8.95e-02  2.32e-05  5.42e-03  2.91e-05  7.60e-05  4.25e-01  
 15  +4.7500e-01  +5.4188e-01  6.69e-02  1.59e-05  3.72e-03  1.83e-05  5.38e-05  3.89e-01  
 16  +4.7241e-01  +5.3082e-01  5.84e-02  1.33e-05  3.12e-03  1.19e-05  4.55e-05  3.79e-01  
 17  +4.7002e-01  +5.2043e-01  5.04e-02  1.11e-05  2.59e-03  5.07e-06  3.81e-05  6.60e-01  
 18  +4.6300e-01  +4.9176e-01  2.88e-02  5.98e-06  1.40e-03  2.57e-06  2.13e-05  5.22e-01  
 19  +4.5583e-01  +4.6273e-01  6.90e-03  1.37e-06  3.19e-04  5.14e-07  5.08e-06  8.26e-01  
 20  +4.5502e-01  +4.5970e-01  4.68e-03  9.11e-07  2.13e-04  3.24e-07  3.42e-06  5.08e-01  
 21  +4.5497e-01  +4.5952e-01  4.55e-03  8.85e-07  2.07e-04  3.13e-07  3.33e-06  6.19e-02  
 22  +4.5389e-01  +4.5547e-01  1.58e-03  3.02e-07  7.05e-05  9.99e-08  1.15e-06  7.98e-01  
 23  +4.5331e-01  +4.5335e-01  3.56e-05  6.75e-09  1.58e-06  2.14e-09  2.61e-08  9.86e-01  
 24  +4.5330e-01  +4.5330e-01  3.57e-07  6.76e-11  1.58e-08  2.14e-11  2.61e-10  9.90e-01  
 25  +4.5330e-01  +4.5330e-01  3.57e-09  6.76e-13  1.58e-10  2.18e-13  2.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.5223ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:01 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:01 PM: Optimal value: 4.533e-01
(CVXPY) Aug 30 12:20:01 PM: Compilation took 3.297e-02 seconds
(CVXPY) Aug 30 12:20:01 PM: Solver (including time spent in interface) took 1.349e-01 seconds
Iteration: 13, Objective: 0.4533
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:01 PM: Your problem has 5147 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:02 PM: Finished problem compilation (took 3.273e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5147
  constraints   = 10147
  nnz(P)        = 0
  nnz(A)        = 85949
  cones (total) = 1
    : Nonnegative = 1,  numel = 10147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8359e-01  +1.0701e+03  1.07e+03  4.21e-01  7.36e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3431e-01  +1.2546e+02  1.25e+02  1.63e-01  3.61e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0921e-01  +3.2486e+01  3.20e+01  1.22e-01  2.69e+01  4.00e-05  2.51e-01  2.24e-01  
  4  +5.0087e-01  +2.7022e+00  2.20e+00  1.50e-02  3.42e+00  5.50e-06  1.60e-01  6.52e-01  
  5  +5.0011e-01  +9.1051e-01  4.10e-01  2.77e-03  6.42e-01  3.02e-05  8.10e-02  9.90e-01  
  6  +5.0005e-01  +7.6438e-01  2.64e-01  1.78e-03  4.12e-01  2.90e-05  3.71e-02  6.05e-01  
  7  +4.9990e-01  +7.4862e-01  2.49e-01  1.23e-03  2.86e-01  1.11e-04  6.00e-03  9.41e-01  
  8  +4.9724e-01  +7.3161e-01  2.34e-01  1.23e-04  2.89e-02  1.49e-03  3.89e-04  9.36e-01  
  9  +4.9458e-01  +6.9461e-01  2.00e-01  7.65e-05  1.79e-02  1.56e-03  2.41e-04  4.59e-01  
 10  +4.9490e-01  +6.8242e-01  1.88e-01  7.27e-05  1.70e-02  1.09e-03  2.28e-04  2.49e-01  
 11  +4.9151e-01  +6.5314e-01  1.62e-01  4.93e-05  1.16e-02  9.59e-04  1.55e-04  4.37e-01  
 12  +4.9050e-01  +6.4397e-01  1.53e-01  4.44e-05  1.04e-02  7.89e-04  1.40e-04  2.20e-01  
 13  +4.8864e-01  +6.2107e-01  1.32e-01  4.18e-05  9.79e-03  2.94e-04  1.34e-04  3.93e-01  
 14  +4.8111e-01  +5.8187e-01  1.01e-01  2.63e-05  6.16e-03  2.17e-04  8.65e-05  4.22e-01  
 15  +4.7803e-01  +5.6558e-01  8.75e-02  2.21e-05  5.16e-03  1.48e-04  7.34e-05  2.96e-01  
 16  +4.7365e-01  +5.4445e-01  7.08e-02  1.69e-05  3.95e-03  1.02e-04  5.72e-05  3.15e-01  
 17  +4.7015e-01  +5.2824e-01  5.81e-02  1.33e-05  3.10e-03  7.54e-05  4.55e-05  2.73e-01  
 18  +4.6706e-01  +5.1307e-01  4.60e-02  1.00e-05  2.34e-03  3.30e-05  3.47e-05  5.66e-01  
 19  +4.6082e-01  +4.8611e-01  2.53e-02  5.24e-06  1.22e-03  1.19e-05  1.87e-05  6.39e-01  
 20  +4.5743e-01  +4.7190e-01  1.45e-02  2.92e-06  6.82e-04  5.24e-06  1.06e-05  5.75e-01  
 21  +4.5530e-01  +4.6330e-01  8.00e-03  1.59e-06  3.72e-04  2.71e-06  5.86e-06  4.86e-01  
 22  +4.5486e-01  +4.6131e-01  6.45e-03  1.27e-06  2.96e-04  1.30e-06  4.68e-06  5.99e-01  
 23  +4.5385e-01  +4.5727e-01  3.42e-03  6.65e-07  1.55e-04  2.11e-07  2.48e-06  9.90e-01  
 24  +4.5306e-01  +4.5439e-01  1.33e-03  2.56e-07  5.99e-05  7.85e-08  9.65e-07  7.82e-01  
 25  +4.5266e-01  +4.5295e-01  2.91e-04  5.60e-08  1.31e-05  1.61e-08  2.12e-07  9.90e-01  
 26  +4.5255e-01  +4.5256e-01  3.86e-06  7.40e-10  1.73e-07  2.13e-10  2.81e-09  9.88e-01  
 27  +4.5255e-01  +4.5255e-01  3.87e-08  7.44e-12  1.74e-09  2.14e-12  2.82e-11  9.90e-01  
 28  +4.5255e-01  +4.5255e-01  3.87e-10  7.44e-14  1.74e-11  2.18e-14  2.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.7476ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:02 PM: Optimal value: 4.526e-01
(CVXPY) Aug 30 12:20:02 PM: Compilation took 3.273e-02 seconds
(CVXPY) Aug 30 12:20:02 PM: Solver (including time spent in interface) took 1.502e-01 seconds
Iteration: 14, Objective: 0.4526
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:02 PM: Your problem has 5157 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:02 PM: Finished problem compilation (took 3.296e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5157
  constraints   = 10157
  nnz(P)        = 0
  nnz(A)        = 86803
  cones (total) = 1
    : Nonnegative = 1,  numel = 10157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8356e-01  +1.0700e+03  1.07e+03  4.21e-01  7.36e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3428e-01  +1.2537e+02  1.25e+02  1.63e-01  3.60e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0920e-01  +3.2460e+01  3.20e+01  1.22e-01  2.68e+01  4.00e-05  2.50e-01  2.25e-01  
  4  +5.0087e-01  +2.7001e+00  2.20e+00  1.50e-02  3.41e+00  5.51e-06  1.59e-01  6.53e-01  
  5  +5.0011e-01  +9.1523e-01  4.15e-01  2.81e-03  6.49e-01  3.04e-05  8.03e-02  9.90e-01  
  6  +5.0005e-01  +7.6866e-01  2.69e-01  1.80e-03  4.18e-01  3.05e-05  3.49e-02  6.43e-01  
  7  +4.9979e-01  +7.4675e-01  2.47e-01  9.66e-04  2.25e-01  1.72e-04  3.97e-03  9.50e-01  
  8  +4.9667e-01  +7.2774e-01  2.31e-01  1.10e-04  2.57e-02  1.74e-03  3.47e-04  9.14e-01  
  9  +4.9423e-01  +6.9251e-01  1.98e-01  7.60e-05  1.78e-02  1.54e-03  2.40e-04  4.19e-01  
 10  +4.9480e-01  +6.7681e-01  1.82e-01  6.59e-05  1.54e-02  8.24e-04  2.05e-04  4.96e-01  
 11  +4.9438e-01  +6.6942e-01  1.75e-01  6.29e-05  1.47e-02  6.71e-04  1.96e-04  1.70e-01  
 12  +4.9202e-01  +6.5341e-01  1.61e-01  5.03e-05  1.18e-02  6.10e-04  1.58e-04  2.81e-01  
 13  +4.9146e-01  +6.4907e-01  1.58e-01  5.00e-05  1.17e-02  5.59e-04  1.58e-04  3.55e-02  
 14  +4.8186e-01  +5.9417e-01  1.12e-01  2.81e-05  6.58e-03  3.80e-04  9.18e-05  5.10e-01  
 15  +4.7642e-01  +5.6467e-01  8.82e-02  2.15e-05  5.03e-03  1.93e-04  7.21e-05  4.16e-01  
 16  +4.7220e-01  +5.4422e-01  7.20e-02  1.69e-05  3.95e-03  1.37e-04  5.76e-05  2.84e-01  
 17  +4.6509e-01  +5.1045e-01  4.54e-02  9.96e-06  2.33e-03  5.04e-05  3.48e-05  6.14e-01  
 18  +4.6276e-01  +5.0014e-01  3.74e-02  8.03e-06  1.88e-03  3.69e-05  2.84e-05  2.75e-01  
 19  +4.5883e-01  +4.8257e-01  2.37e-02  4.92e-06  1.15e-03  1.30e-05  1.76e-05  6.64e-01  
 20  +4.5392e-01  +4.6200e-01  8.09e-03  1.63e-06  3.81e-04  2.00e-06  6.01e-06  8.64e-01  
 21  +4.5280e-01  +4.5753e-01  4.73e-03  9.40e-07  2.19e-04  1.03e-06  3.48e-06  5.22e-01  
 22  +4.5275e-01  +4.5727e-01  4.52e-03  9.16e-07  2.14e-04  8.32e-07  3.41e-06  1.92e-01  
 23  +4.5268e-01  +4.5698e-01  4.31e-03  8.70e-07  2.03e-04  7.46e-07  3.24e-06  1.31e-01  
 24  +4.5227e-01  +4.5537e-01  3.09e-03  6.16e-07  1.44e-04  3.73e-07  2.28e-06  6.33e-01  
 25  +4.5133e-01  +4.5181e-01  4.86e-04  9.67e-08  2.26e-05  2.60e-08  3.62e-07  9.88e-01  
 26  +4.5115e-01  +4.5117e-01  1.37e-05  2.72e-09  6.36e-07  7.41e-10  1.02e-08  9.74e-01  
 27  +4.5115e-01  +4.5115e-01  1.38e-07  2.73e-11  6.38e-09  7.44e-12  1.02e-10  9.90e-01  
 28  +4.5115e-01  +4.5115e-01  1.65e-09  3.27e-13  7.63e-11  8.95e-14  1.23e-12  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138.8025ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:02 PM: Optimal value: 4.512e-01
(CVXPY) Aug 30 12:20:02 PM: Compilation took 3.296e-02 seconds
(CVXPY) Aug 30 12:20:02 PM: Solver (including time spent in interface) took 1.471e-01 seconds
Iteration: 15, Objective: 0.4512
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:02 PM: Your problem has 5167 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:02 PM: Finished problem compilation (took 3.622e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5167
  constraints   = 10167
  nnz(P)        = 0
  nnz(A)        = 87586
  cones (total) = 1
    : Nonnegative = 1,  numel = 10167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8350e-01  +1.0700e+03  1.07e+03  4.21e-01  7.35e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3430e-01  +1.2544e+02  1.25e+02  1.63e-01  3.60e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0920e-01  +3.2473e+01  3.20e+01  1.22e-01  2.68e+01  4.00e-05  2.50e-01  2.25e-01  
  4  +5.0087e-01  +2.6991e+00  2.20e+00  1.50e-02  3.41e+00  5.52e-06  1.59e-01  6.53e-01  
  5  +5.0011e-01  +9.1761e-01  4.17e-01  2.82e-03  6.53e-01  3.05e-05  8.01e-02  9.90e-01  
  6  +5.0005e-01  +7.7596e-01  2.76e-01  1.85e-03  4.30e-01  3.15e-05  3.47e-02  6.46e-01  
  7  +4.9981e-01  +7.7809e-01  2.78e-01  1.09e-03  2.55e-01  1.64e-04  4.51e-03  9.70e-01  
  8  +4.9691e-01  +7.5729e-01  2.60e-01  1.27e-04  2.97e-02  1.62e-03  4.01e-04  9.11e-01  
  9  +4.9456e-01  +7.1237e-01  2.18e-01  8.85e-05  2.07e-02  1.36e-03  2.80e-04  4.07e-01  
 10  +4.9398e-01  +6.8963e-01  1.96e-01  6.88e-05  1.61e-02  9.38e-04  2.15e-04  4.71e-01  
 11  +4.9390e-01  +6.7746e-01  1.84e-01  6.52e-05  1.53e-02  6.33e-04  2.04e-04  2.64e-01  
 12  +4.9306e-01  +6.6636e-01  1.73e-01  5.95e-05  1.39e-02  4.91e-04  1.86e-04  2.41e-01  
 13  +4.9181e-01  +6.5423e-01  1.62e-01  5.46e-05  1.28e-02  3.55e-04  1.72e-04  2.54e-01  
 14  +4.8330e-01  +6.0512e-01  1.22e-01  3.19e-05  7.46e-03  2.81e-04  1.04e-04  4.59e-01  
 15  +4.7810e-01  +5.7740e-01  9.93e-02  2.49e-05  5.83e-03  1.95e-04  8.29e-05  2.78e-01  
 16  +4.7048e-01  +5.3898e-01  6.85e-02  1.61e-05  3.76e-03  1.06e-04  5.53e-05  4.32e-01  
 17  +4.6793e-01  +5.2583e-01  5.79e-02  1.31e-05  3.05e-03  6.15e-05  4.52e-05  4.29e-01  
 18  +4.6259e-01  +5.0149e-01  3.89e-02  8.32e-06  1.94e-03  3.13e-05  2.94e-05  5.02e-01  
 19  +4.6205e-01  +4.9886e-01  3.68e-02  7.83e-06  1.83e-03  2.60e-05  2.77e-05  1.77e-01  
 20  +4.5999e-01  +4.8985e-01  2.99e-02  6.25e-06  1.46e-03  1.73e-05  2.23e-05  3.43e-01  
 21  +4.5482e-01  +4.6827e-01  1.35e-02  2.74e-06  6.39e-04  6.61e-06  1.01e-05  6.11e-01  
 22  +4.5265e-01  +4.5926e-01  6.61e-03  1.33e-06  3.11e-04  3.02e-06  4.99e-06  5.42e-01  
 23  +4.5198e-01  +4.5618e-01  4.19e-03  8.39e-07  1.96e-04  7.14e-07  3.15e-06  8.27e-01  
 24  +4.5059e-01  +4.5083e-01  2.41e-04  4.81e-08  1.12e-05  3.37e-08  1.83e-07  9.56e-01  
 25  +4.5050e-01  +4.5050e-01  2.45e-06  4.89e-10  1.14e-07  3.41e-10  1.86e-09  9.90e-01  
 26  +4.5050e-01  +4.5050e-01  2.46e-08  4.91e-12  1.15e-09  3.42e-12  1.87e-11  9.90e-01  
 27  +4.5050e-01  +4.5050e-01  2.58e-10  5.16e-14  1.20e-11  3.60e-14  1.97e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.991ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:02 PM: Optimal value: 4.505e-01
(CVXPY) Aug 30 12:20:02 PM: Compilation took 3.622e-02 seconds
(CVXPY) Aug 30 12:20:02 PM: Solver (including time spent in interface) took 1.501e-01 seconds
Iteration: 16, Objective: 0.4505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:02 PM: Your problem has 5177 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:02 PM: Finished problem compilation (took 3.247e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5177
  constraints   = 10177
  nnz(P)        = 0
  nnz(A)        = 88309
  cones (total) = 1
    : Nonnegative = 1,  numel = 10177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8347e-01  +1.0701e+03  1.07e+03  4.22e-01  7.35e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3428e-01  +1.2543e+02  1.25e+02  1.63e-01  3.59e+01  1.48e-02  2.64e-01  9.07e-01  
  3  +5.0920e-01  +3.2468e+01  3.20e+01  1.22e-01  2.68e+01  4.00e-05  2.50e-01  2.25e-01  
  4  +5.0087e-01  +2.7011e+00  2.20e+00  1.51e-02  3.41e+00  5.52e-06  1.59e-01  6.53e-01  
  5  +5.0011e-01  +9.1990e-01  4.20e-01  2.84e-03  6.57e-01  3.06e-05  8.00e-02  9.90e-01  
  6  +5.0005e-01  +7.6917e-01  2.69e-01  1.81e-03  4.19e-01  3.22e-05  3.24e-02  6.80e-01  
  7  +4.9981e-01  +7.8017e-01  2.80e-01  1.13e-03  2.63e-01  1.65e-04  4.71e-03  9.33e-01  
  8  +4.9668e-01  +7.5945e-01  2.63e-01  1.24e-04  2.89e-02  1.75e-03  3.91e-04  9.18e-01  
  9  +4.9420e-01  +7.1913e-01  2.25e-01  8.63e-05  2.02e-02  1.60e-03  2.73e-04  3.85e-01  
 10  +4.9365e-01  +7.0308e-01  2.09e-01  7.62e-05  1.78e-02  1.29e-03  2.40e-04  2.52e-01  
 11  +4.9496e-01  +6.8716e-01  1.92e-01  7.00e-05  1.64e-02  5.78e-04  2.17e-04  4.88e-01  
 12  +4.9373e-01  +6.6942e-01  1.76e-01  6.03e-05  1.41e-02  3.41e-04  1.89e-04  4.26e-01  
 13  +4.8864e-01  +6.2711e-01  1.38e-01  4.33e-05  1.01e-02  9.48e-05  1.38e-04  6.80e-01  
 14  +4.8040e-01  +5.8515e-01  1.05e-01  2.80e-05  6.54e-03  6.07e-05  9.22e-05  4.49e-01  
 15  +4.7575e-01  +5.6288e-01  8.71e-02  2.21e-05  5.16e-03  3.61e-05  7.43e-05  3.87e-01  
 16  +4.6965e-01  +5.3506e-01  6.54e-02  1.55e-05  3.63e-03  2.36e-05  5.36e-05  3.55e-01  
 17  +4.6483e-01  +5.1359e-01  4.88e-02  1.09e-05  2.54e-03  1.35e-05  3.82e-05  4.60e-01  
 18  +4.6406e-01  +5.1018e-01  4.61e-02  1.02e-05  2.38e-03  1.14e-05  3.59e-05  1.80e-01  
 19  +4.5752e-01  +4.8258e-01  2.51e-02  5.24e-06  1.22e-03  4.73e-06  1.90e-05  6.05e-01  
 20  +4.5532e-01  +4.7344e-01  1.81e-02  3.73e-06  8.71e-04  3.26e-06  1.37e-05  3.22e-01  
 21  +4.5306e-01  +4.6347e-01  1.04e-02  2.06e-06  4.81e-04  6.38e-07  7.68e-06  9.90e-01  
 22  +4.5010e-01  +4.5229e-01  2.19e-03  4.27e-07  9.97e-05  1.33e-07  1.64e-06  8.14e-01  
 23  +4.4936e-01  +4.4953e-01  1.67e-04  3.24e-08  7.56e-06  9.10e-09  1.25e-07  9.90e-01  
 24  +4.4930e-01  +4.4930e-01  1.82e-06  3.55e-10  8.27e-08  9.95e-11  1.37e-09  9.89e-01  
 25  +4.4930e-01  +4.4930e-01  1.82e-08  3.55e-12  8.28e-10  9.96e-13  1.37e-11  9.90e-01  
 26  +4.4930e-01  +4.4930e-01  1.87e-10  3.63e-14  8.48e-12  1.03e-14  1.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.8184ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:03 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:03 PM: Optimal value: 4.493e-01
(CVXPY) Aug 30 12:20:03 PM: Compilation took 3.247e-02 seconds
(CVXPY) Aug 30 12:20:03 PM: Solver (including time spent in interface) took 1.414e-01 seconds
Iteration: 17, Objective: 0.4493
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:03 PM: Your problem has 5187 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:03 PM: Finished problem compilation (took 3.410e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5187
  constraints   = 10187
  nnz(P)        = 0
  nnz(A)        = 89159
  cones (total) = 1
    : Nonnegative = 1,  numel = 10187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8343e-01  +1.0700e+03  1.07e+03  4.22e-01  7.35e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3427e-01  +1.2541e+02  1.25e+02  1.63e-01  3.58e+01  1.48e-02  2.64e-01  9.07e-01  
  3  +5.0920e-01  +3.2459e+01  3.19e+01  1.22e-01  2.67e+01  4.00e-05  2.50e-01  2.26e-01  
  4  +5.0087e-01  +2.6988e+00  2.20e+00  1.51e-02  3.41e+00  5.53e-06  1.59e-01  6.54e-01  
  5  +5.0013e-01  +9.7107e-01  4.71e-01  3.19e-03  7.37e-01  2.99e-05  8.51e-02  9.21e-01  
  6  +5.0006e-01  +7.7998e-01  2.80e-01  1.88e-03  4.36e-01  2.89e-05  3.60e-02  6.42e-01  
  7  +4.9982e-01  +7.6907e-01  2.69e-01  1.09e-03  2.53e-01  1.59e-04  4.53e-03  9.29e-01  
  8  +4.9678e-01  +7.5084e-01  2.54e-01  1.19e-04  2.79e-02  1.70e-03  3.76e-04  9.18e-01  
  9  +4.9446e-01  +7.1298e-01  2.19e-01  8.23e-05  1.93e-02  1.53e-03  2.59e-04  4.26e-01  
 10  +4.9258e-01  +6.8486e-01  1.92e-01  6.23e-05  1.46e-02  1.11e-03  1.96e-04  4.40e-01  
 11  +4.9225e-01  +6.7593e-01  1.84e-01  5.97e-05  1.40e-02  8.62e-04  1.88e-04  1.86e-01  
 12  +4.9112e-01  +6.6360e-01  1.72e-01  5.62e-05  1.32e-02  6.58e-04  1.78e-04  1.85e-01  
 13  +4.8032e-01  +5.9570e-01  1.15e-01  2.91e-05  6.81e-03  3.43e-04  9.56e-05  6.32e-01  
 14  +4.7589e-01  +5.7298e-01  9.71e-02  2.37e-05  5.54e-03  2.47e-04  7.94e-05  2.56e-01  
 15  +4.7070e-01  +5.4618e-01  7.55e-02  1.78e-05  4.15e-03  1.17e-04  6.09e-05  4.75e-01  
 16  +4.6415e-01  +5.1586e-01  5.17e-02  1.15e-05  2.69e-03  6.87e-05  4.07e-05  4.09e-01  
 17  +4.6110e-01  +5.0205e-01  4.10e-02  8.82e-06  2.06e-03  4.32e-05  3.15e-05  3.83e-01  
 18  +4.5631e-01  +4.8065e-01  2.43e-02  5.03e-06  1.17e-03  1.19e-05  1.84e-05  7.33e-01  
 19  +4.5049e-01  +4.5671e-01  6.22e-03  1.25e-06  2.91e-04  2.66e-06  4.78e-06  7.67e-01  
 20  +4.4940e-01  +4.5230e-01  2.90e-03  5.77e-07  1.35e-04  1.01e-06  2.24e-06  6.30e-01  
 21  +4.4893e-01  +4.5037e-01  1.43e-03  2.83e-07  6.59e-05  1.46e-07  1.11e-06  9.22e-01  
 22  +4.4845e-01  +4.4859e-01  1.39e-04  2.73e-08  6.37e-06  7.96e-09  1.08e-07  9.90e-01  
 23  +4.4840e-01  +4.4840e-01  1.46e-06  2.86e-10  6.67e-08  8.32e-11  1.13e-09  9.90e-01  
 24  +4.4840e-01  +4.4840e-01  1.46e-08  2.87e-12  6.70e-10  8.35e-13  1.14e-11  9.90e-01  
 25  +4.4840e-01  +4.4840e-01  1.59e-10  3.13e-14  7.29e-12  9.41e-15  1.28e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.2121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:03 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:03 PM: Optimal value: 4.484e-01
(CVXPY) Aug 30 12:20:03 PM: Compilation took 3.410e-02 seconds
(CVXPY) Aug 30 12:20:03 PM: Solver (including time spent in interface) took 1.364e-01 seconds
Iteration: 18, Objective: 0.4484
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:03 PM: Your problem has 5193 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:03 PM: Finished problem compilation (took 3.705e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5193
  constraints   = 10193
  nnz(P)        = 0
  nnz(A)        = 89626
  cones (total) = 1
    : Nonnegative = 1,  numel = 10193

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8346e-01  +1.0699e+03  1.07e+03  4.22e-01  7.34e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3426e-01  +1.2536e+02  1.25e+02  1.63e-01  3.58e+01  1.48e-02  2.63e-01  9.07e-01  
  3  +5.0919e-01  +3.2437e+01  3.19e+01  1.22e-01  2.67e+01  4.00e-05  2.50e-01  2.26e-01  
  4  +5.0087e-01  +2.6942e+00  2.19e+00  1.50e-02  3.40e+00  5.52e-06  1.59e-01  6.55e-01  
  5  +5.0013e-01  +9.6914e-01  4.69e-01  3.18e-03  7.34e-01  3.00e-05  8.42e-02  9.27e-01  
  6  +5.0005e-01  +7.5740e-01  2.57e-01  1.73e-03  4.00e-01  3.00e-05  3.04e-02  7.16e-01  
  7  +4.9952e-01  +8.1567e-01  3.16e-01  7.17e-04  1.68e-01  3.34e-04  2.50e-03  9.80e-01  
  8  +4.9561e-01  +7.8464e-01  2.89e-01  1.07e-04  2.51e-02  2.14e-03  3.36e-04  8.68e-01  
  9  +4.9397e-01  +7.3140e-01  2.37e-01  8.42e-05  1.97e-02  1.26e-03  2.65e-04  4.06e-01  
 10  +4.9253e-01  +6.9931e-01  2.07e-01  6.56e-05  1.54e-02  8.24e-04  2.06e-04  4.42e-01  
 11  +4.9175e-01  +6.8366e-01  1.92e-01  6.43e-05  1.51e-02  5.91e-04  2.04e-04  1.48e-01  
 12  +4.8250e-01  +6.1755e-01  1.35e-01  3.62e-05  8.45e-03  3.45e-04  1.18e-04  5.64e-01  
 13  +4.7396e-01  +5.6857e-01  9.46e-02  2.38e-05  5.56e-03  1.67e-04  8.13e-05  4.52e-01  
 14  +4.6890e-01  +5.4219e-01  7.33e-02  1.76e-05  4.10e-03  9.30e-05  6.12e-05  4.26e-01  
 15  +4.6418e-01  +5.1959e-01  5.54e-02  1.26e-05  2.95e-03  5.82e-05  4.50e-05  3.81e-01  
 16  +4.6169e-01  +5.0779e-01  4.61e-02  1.02e-05  2.38e-03  3.73e-05  3.69e-05  3.65e-01  
 17  +4.5867e-01  +4.9422e-01  3.56e-02  7.65e-06  1.78e-03  2.47e-05  2.81e-05  3.48e-01  
 18  +4.5514e-01  +4.7703e-01  2.19e-02  4.52e-06  1.05e-03  1.53e-06  1.70e-05  9.90e-01  
 19  +4.5110e-01  +4.6082e-01  9.71e-03  1.98e-06  4.62e-04  6.11e-07  7.70e-06  7.13e-01  
 20  +4.4901e-01  +4.5254e-01  3.53e-03  7.15e-07  1.67e-04  2.17e-07  2.85e-06  6.63e-01  
 21  +4.4791e-01  +4.4821e-01  3.01e-04  6.07e-08  1.41e-05  1.53e-08  2.46e-07  9.90e-01  
 22  +4.4780e-01  +4.4780e-01  3.54e-06  7.13e-10  1.66e-07  1.79e-10  2.90e-09  9.89e-01  
 23  +4.4780e-01  +4.4780e-01  3.55e-08  7.14e-12  1.66e-09  1.80e-12  2.90e-11  9.90e-01  
 24  +4.4780e-01  +4.4780e-01  3.65e-10  7.33e-14  1.71e-11  1.87e-14  3.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 130.5967ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:03 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:03 PM: Optimal value: 4.478e-01
(CVXPY) Aug 30 12:20:03 PM: Compilation took 3.705e-02 seconds
(CVXPY) Aug 30 12:20:03 PM: Solver (including time spent in interface) took 1.396e-01 seconds
Iteration: 19, Objective: 0.4478
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:03 PM: Your problem has 5199 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:03 PM: Finished problem compilation (took 3.209e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5199
  constraints   = 10199
  nnz(P)        = 0
  nnz(A)        = 90481
  cones (total) = 1
    : Nonnegative = 1,  numel = 10199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8346e-01  +1.0699e+03  1.07e+03  4.22e-01  7.34e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3424e-01  +1.2532e+02  1.25e+02  1.63e-01  3.58e+01  1.48e-02  2.64e-01  9.07e-01  
  3  +5.0918e-01  +3.2422e+01  3.19e+01  1.22e-01  2.67e+01  4.00e-05  2.50e-01  2.26e-01  
  4  +5.0087e-01  +2.6948e+00  2.19e+00  1.50e-02  3.41e+00  5.52e-06  1.59e-01  6.55e-01  
  5  +5.0013e-01  +9.6519e-01  4.65e-01  3.15e-03  7.28e-01  3.02e-05  8.34e-02  9.36e-01  
  6  +5.0005e-01  +7.5792e-01  2.58e-01  1.73e-03  4.01e-01  3.15e-05  2.89e-02  7.36e-01  
  7  +4.9939e-01  +8.3458e-01  3.35e-01  6.40e-04  1.50e-01  4.11e-04  2.18e-03  9.87e-01  
  8  +4.9514e-01  +7.9698e-01  3.02e-01  1.04e-04  2.45e-02  2.30e-03  3.29e-04  8.53e-01  
  9  +4.9195e-01  +7.2641e-01  2.34e-01  7.70e-05  1.80e-02  1.27e-03  2.45e-04  4.25e-01  
 10  +4.9216e-01  +7.1376e-01  2.22e-01  7.45e-05  1.74e-02  9.72e-04  2.37e-04  1.66e-01  
 11  +4.9153e-01  +6.9439e-01  2.03e-01  6.88e-05  1.61e-02  6.67e-04  2.19e-04  2.46e-01  
 12  +4.8665e-01  +6.4931e-01  1.63e-01  5.00e-05  1.17e-02  3.78e-04  1.63e-04  4.50e-01  
 13  +4.8053e-01  +6.1199e-01  1.31e-01  3.66e-05  8.56e-03  2.87e-04  1.22e-04  2.91e-01  
 14  +4.7434e-01  +5.7383e-01  9.95e-02  2.59e-05  6.04e-03  1.45e-04  8.87e-05  4.62e-01  
 15  +4.6999e-01  +5.4946e-01  7.95e-02  1.95e-05  4.54e-03  7.43e-05  6.78e-05  4.76e-01  
 16  +4.6470e-01  +5.2350e-01  5.88e-02  1.36e-05  3.18e-03  4.32e-05  4.87e-05  4.19e-01  
 17  +4.6233e-01  +5.1238e-01  5.00e-02  1.13e-05  2.65e-03  3.34e-05  4.10e-05  2.30e-01  
 18  +4.5449e-01  +4.7572e-01  2.12e-02  4.52e-06  1.05e-03  5.80e-06  1.71e-05  8.24e-01  
 19  +4.5283e-01  +4.6753e-01  1.47e-02  3.06e-06  7.14e-04  9.01e-07  1.17e-05  9.90e-01  
 20  +4.4908e-01  +4.5268e-01  3.61e-03  7.37e-07  1.72e-04  2.16e-07  2.92e-06  7.87e-01  
 21  +4.4861e-01  +4.5088e-01  2.27e-03  4.63e-07  1.08e-04  1.30e-07  1.85e-06  5.06e-01  
 22  +4.4787e-01  +4.4806e-01  1.96e-04  3.94e-08  9.19e-06  1.08e-08  1.60e-07  9.23e-01  
 23  +4.4780e-01  +4.4780e-01  2.04e-06  4.11e-10  9.59e-08  1.13e-10  1.67e-09  9.90e-01  
 24  +4.4780e-01  +4.4780e-01  2.04e-08  4.12e-12  9.60e-10  1.13e-12  1.67e-11  9.90e-01  
 25  +4.4780e-01  +4.4780e-01  2.14e-10  4.30e-14  1.00e-11  1.21e-14  1.78e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 128.4482ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:03 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:03 PM: Optimal value: 4.478e-01
(CVXPY) Aug 30 12:20:03 PM: Compilation took 3.209e-02 seconds
(CVXPY) Aug 30 12:20:03 PM: Solver (including time spent in interface) took 1.373e-01 seconds
Iteration: 20, Objective: 0.4478
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:04 PM: Your problem has 5209 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:04 PM: Finished problem compilation (took 3.677e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5209
  constraints   = 10209
  nnz(P)        = 0
  nnz(A)        = 91203
  cones (total) = 1
    : Nonnegative = 1,  numel = 10209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8341e-01  +1.0700e+03  1.07e+03  4.22e-01  7.34e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3421e-01  +1.2529e+02  1.25e+02  1.63e-01  3.57e+01  1.48e-02  2.63e-01  9.07e-01  
  3  +5.0918e-01  +3.2418e+01  3.19e+01  1.22e-01  2.66e+01  4.01e-05  2.50e-01  2.27e-01  
  4  +5.0087e-01  +2.6997e+00  2.20e+00  1.51e-02  3.41e+00  5.53e-06  1.58e-01  6.55e-01  
  5  +5.0015e-01  +1.0074e+00  5.07e-01  3.44e-03  7.95e-01  2.98e-05  8.75e-02  8.85e-01  
  6  +5.0006e-01  +7.7451e-01  2.74e-01  1.85e-03  4.28e-01  2.88e-05  3.33e-02  6.92e-01  
  7  +4.9970e-01  +8.4105e-01  3.41e-01  9.65e-04  2.25e-01  2.41e-04  3.51e-03  9.86e-01  
  8  +4.9638e-01  +8.1481e-01  3.18e-01  1.29e-04  3.02e-02  1.84e-03  4.05e-04  8.85e-01  
  9  +4.9285e-01  +7.3649e-01  2.44e-01  8.46e-05  1.98e-02  1.26e-03  2.68e-04  4.67e-01  
 10  +4.9174e-01  +7.2038e-01  2.29e-01  7.22e-05  1.69e-02  1.11e-03  2.29e-04  2.47e-01  
 11  +4.9147e-01  +7.0075e-01  2.09e-01  7.08e-05  1.66e-02  7.44e-04  2.25e-04  1.70e-01  
 12  +4.8799e-01  +6.5919e-01  1.71e-01  5.54e-05  1.30e-02  3.57e-04  1.79e-04  4.60e-01  
 13  +4.8172e-01  +6.2058e-01  1.39e-01  3.97e-05  9.27e-03  2.75e-04  1.32e-04  3.18e-01  
 14  +4.8158e-01  +6.1611e-01  1.35e-01  3.85e-05  9.00e-03  2.04e-04  1.28e-04  2.08e-01  
 15  +4.7187e-01  +5.6293e-01  9.11e-02  2.32e-05  5.41e-03  1.20e-04  8.03e-05  4.32e-01  
 16  +4.6696e-01  +5.3665e-01  6.97e-02  1.66e-05  3.88e-03  5.91e-05  5.88e-05  5.05e-01  
 17  +4.6353e-01  +5.1996e-01  5.64e-02  1.30e-05  3.02e-03  3.80e-05  4.66e-05  3.62e-01  
 18  +4.5870e-01  +4.9628e-01  3.76e-02  8.21e-06  1.92e-03  1.00e-05  3.02e-05  7.50e-01  
 19  +4.5512e-01  +4.8067e-01  2.56e-02  5.47e-06  1.28e-03  5.91e-06  2.06e-05  4.23e-01  
 20  +4.4916e-01  +4.5506e-01  5.90e-03  1.22e-06  2.86e-04  7.49e-07  4.85e-06  8.90e-01  
 21  +4.4756e-01  +4.4859e-01  1.02e-03  2.10e-07  4.90e-05  6.03e-08  8.60e-07  9.74e-01  
 22  +4.4721e-01  +4.4722e-01  1.45e-05  2.97e-09  6.93e-07  8.01e-10  1.23e-08  9.88e-01  
 23  +4.4720e-01  +4.4720e-01  1.46e-07  2.99e-11  6.97e-09  8.05e-12  1.24e-10  9.90e-01  
 24  +4.4720e-01  +4.4720e-01  1.55e-09  3.18e-13  7.41e-11  8.79e-14  1.35e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 137.1409ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:04 PM: Optimal value: 4.472e-01
(CVXPY) Aug 30 12:20:04 PM: Compilation took 3.677e-02 seconds
(CVXPY) Aug 30 12:20:04 PM: Solver (including time spent in interface) took 1.455e-01 seconds
Iteration: 21, Objective: 0.4472
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:04 PM: Your problem has 5219 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:04 PM: Finished problem compilation (took 3.662e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5219
  constraints   = 10219
  nnz(P)        = 0
  nnz(A)        = 92239
  cones (total) = 1
    : Nonnegative = 1,  numel = 10219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8339e-01  +1.0700e+03  1.07e+03  4.22e-01  7.33e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3417e-01  +1.2518e+02  1.25e+02  1.63e-01  3.56e+01  1.48e-02  2.63e-01  9.08e-01  
  3  +5.0917e-01  +3.2382e+01  3.19e+01  1.21e-01  2.66e+01  4.01e-05  2.49e-01  2.28e-01  
  4  +5.0087e-01  +2.6989e+00  2.20e+00  1.51e-02  3.41e+00  5.53e-06  1.58e-01  6.56e-01  
  5  +5.0020e-01  +1.1175e+00  6.17e-01  4.20e-03  9.67e-01  2.86e-05  9.62e-02  7.69e-01  
  6  +5.0007e-01  +7.9683e-01  2.97e-01  2.00e-03  4.63e-01  2.56e-05  3.85e-02  6.62e-01  
  7  +4.9993e-01  +8.3958e-01  3.40e-01  1.56e-03  3.63e-01  1.13e-04  7.02e-03  9.18e-01  
  8  +4.9769e-01  +8.1904e-01  3.21e-01  1.75e-04  4.10e-02  1.25e-03  5.54e-04  9.22e-01  
  9  +4.9524e-01  +7.6188e-01  2.67e-01  1.10e-04  2.58e-02  1.19e-03  3.48e-04  4.69e-01  
 10  +4.9289e-01  +7.2079e-01  2.28e-01  8.06e-05  1.89e-02  9.05e-04  2.55e-04  4.19e-01  
 11  +4.9370e-01  +7.0101e-01  2.07e-01  7.38e-05  1.73e-02  3.92e-04  2.32e-04  4.81e-01  
 12  +4.9306e-01  +6.9329e-01  2.00e-01  7.30e-05  1.71e-02  3.32e-04  2.30e-04  8.44e-02  
 13  +4.8757e-01  +6.5338e-01  1.66e-01  5.03e-05  1.18e-02  2.40e-04  1.62e-04  4.49e-01  
 14  +4.7755e-01  +5.9239e-01  1.15e-01  3.09e-05  7.22e-03  9.71e-05  1.04e-04  5.60e-01  
 15  +4.7151e-01  +5.6179e-01  9.03e-02  2.29e-05  5.35e-03  6.75e-05  7.94e-05  3.00e-01  
 16  +4.6679e-01  +5.3808e-01  7.13e-02  1.72e-05  4.02e-03  3.83e-05  6.11e-05  4.24e-01  
 17  +4.6330e-01  +5.2123e-01  5.79e-02  1.35e-05  3.16e-03  2.49e-05  4.88e-05  3.56e-01  
 18  +4.5705e-01  +4.9120e-01  3.42e-02  7.45e-06  1.74e-03  3.75e-06  2.77e-05  8.85e-01  
 19  +4.5552e-01  +4.8388e-01  2.84e-02  6.08e-06  1.42e-03  2.01e-06  2.27e-05  7.27e-01  
 20  +4.5056e-01  +4.6305e-01  1.25e-02  2.58e-06  6.02e-04  7.43e-07  1.00e-05  8.57e-01  
 21  +4.5056e-01  +4.6301e-01  1.25e-02  2.58e-06  6.01e-04  7.39e-07  9.99e-06  1.09e-02  
 22  +4.5020e-01  +4.6149e-01  1.13e-02  2.38e-06  5.54e-04  6.22e-07  9.41e-06  2.61e-01  
 23  +4.4949e-01  +4.5846e-01  8.97e-03  1.88e-06  4.39e-04  4.86e-07  7.49e-06  3.75e-01  
 24  +4.4881e-01  +4.5583e-01  7.02e-03  1.44e-06  3.36e-04  3.81e-07  5.70e-06  5.04e-01  
 25  +4.4673e-01  +4.4766e-01  9.31e-04  1.90e-07  4.43e-05  4.65e-08  7.75e-07  9.65e-01  
 26  +4.4642e-01  +4.4646e-01  4.43e-05  9.02e-09  2.10e-06  2.17e-09  3.71e-08  9.65e-01  
 27  +4.4640e-01  +4.4640e-01  4.44e-07  9.04e-11  2.11e-08  2.18e-11  3.72e-10  9.90e-01  
 28  +4.4640e-01  +4.4640e-01  4.44e-09  9.05e-13  2.11e-10  2.18e-13  3.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 154.7526ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:04 PM: Optimal value: 4.464e-01
(CVXPY) Aug 30 12:20:04 PM: Compilation took 3.662e-02 seconds
(CVXPY) Aug 30 12:20:04 PM: Solver (including time spent in interface) took 1.634e-01 seconds
Iteration: 22, Objective: 0.4464
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:04 PM: Your problem has 5227 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:04 PM: Finished problem compilation (took 4.002e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5227
  constraints   = 10227
  nnz(P)        = 0
  nnz(A)        = 92807
  cones (total) = 1
    : Nonnegative = 1,  numel = 10227

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8339e-01  +1.0700e+03  1.07e+03  4.22e-01  7.33e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3416e-01  +1.2517e+02  1.25e+02  1.63e-01  3.56e+01  1.48e-02  2.63e-01  9.08e-01  
  3  +5.0917e-01  +3.2374e+01  3.19e+01  1.21e-01  2.66e+01  4.01e-05  2.49e-01  2.28e-01  
  4  +5.0087e-01  +2.6980e+00  2.20e+00  1.51e-02  3.41e+00  5.54e-06  1.58e-01  6.56e-01  
  5  +5.0020e-01  +1.1209e+00  6.21e-01  4.22e-03  9.73e-01  2.86e-05  9.62e-02  7.67e-01  
  6  +5.0007e-01  +7.9807e-01  2.98e-01  2.01e-03  4.65e-01  2.58e-05  3.83e-02  6.68e-01  
  7  +4.9994e-01  +8.7340e-01  3.73e-01  1.64e-03  3.82e-01  1.16e-04  7.14e-03  9.54e-01  
  8  +4.9779e-01  +8.5044e-01  3.53e-01  1.89e-04  4.44e-02  1.20e-03  5.99e-04  9.17e-01  
  9  +4.9454e-01  +7.5101e-01  2.56e-01  9.91e-05  2.32e-02  9.89e-04  3.14e-04  6.13e-01  
 10  +4.9329e-01  +7.2379e-01  2.31e-01  8.26e-05  1.93e-02  7.35e-04  2.61e-04  3.29e-01  
 11  +4.9250e-01  +7.0218e-01  2.10e-01  6.92e-05  1.62e-02  4.67e-04  2.18e-04  4.20e-01  
 12  +4.9150e-01  +6.9056e-01  1.99e-01  6.79e-05  1.59e-02  3.79e-04  2.16e-04  9.40e-02  
 13  +4.8648e-01  +6.5122e-01  1.65e-01  5.05e-05  1.18e-02  2.43e-04  1.64e-04  4.04e-01  
 14  +4.7733e-01  +5.9404e-01  1.17e-01  3.15e-05  7.36e-03  9.81e-05  1.06e-04  5.78e-01  
 15  +4.7132e-01  +5.6296e-01  9.16e-02  2.32e-05  5.41e-03  6.15e-05  8.02e-05  3.67e-01  
 16  +4.6519e-01  +5.3275e-01  6.76e-02  1.59e-05  3.72e-03  3.13e-05  5.68e-05  4.90e-01  
 17  +4.6113e-01  +5.1358e-01  5.24e-02  1.19e-05  2.77e-03  1.76e-05  4.32e-05  4.46e-01  
 18  +4.5307e-01  +4.7636e-01  2.33e-02  4.93e-06  1.15e-03  8.59e-07  1.88e-05  9.90e-01  
 19  +4.4945e-01  +4.6144e-01  1.20e-02  2.48e-06  5.77e-04  4.80e-07  9.68e-06  5.92e-01  
 20  +4.4893e-01  +4.5937e-01  1.04e-02  2.18e-06  5.08e-04  4.28e-07  8.74e-06  4.04e-01  
 21  +4.4839e-01  +4.5697e-01  8.58e-03  1.79e-06  4.16e-04  3.72e-07  7.18e-06  3.93e-01  
 22  +4.4754e-01  +4.5354e-01  5.99e-03  1.24e-06  2.89e-04  2.73e-07  4.99e-06  5.08e-01  
 23  +4.4676e-01  +4.5066e-01  3.90e-03  7.90e-07  1.84e-04  1.84e-07  3.18e-06  4.89e-01  
 24  +4.4544e-01  +4.4556e-01  1.19e-04  2.41e-08  5.61e-06  5.45e-09  9.86e-08  9.74e-01  
 25  +4.4540e-01  +4.4540e-01  1.20e-06  2.42e-10  5.65e-08  5.48e-11  9.94e-10  9.90e-01  
 26  +4.4540e-01  +4.4540e-01  1.20e-08  2.42e-12  5.65e-10  5.48e-13  9.94e-12  9.90e-01  
 27  +4.4540e-01  +4.4540e-01  1.20e-10  2.43e-14  5.65e-12  5.52e-15  1.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.8975ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:04 PM: Optimal value: 4.454e-01
(CVXPY) Aug 30 12:20:04 PM: Compilation took 4.002e-02 seconds
(CVXPY) Aug 30 12:20:04 PM: Solver (including time spent in interface) took 1.578e-01 seconds
Iteration: 23, Objective: 0.4454
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:04 PM: Your problem has 5237 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:04 PM: Finished problem compilation (took 4.289e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5237
  constraints   = 10237
  nnz(P)        = 0
  nnz(A)        = 93558
  cones (total) = 1
    : Nonnegative = 1,  numel = 10237

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8349e-01  +1.0696e+03  1.07e+03  4.22e-01  7.32e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3414e-01  +1.2508e+02  1.25e+02  1.63e-01  3.55e+01  1.48e-02  2.63e-01  9.08e-01  
  3  +5.0916e-01  +3.2348e+01  3.18e+01  1.21e-01  2.65e+01  4.00e-05  2.49e-01  2.28e-01  
  4  +5.0087e-01  +2.6926e+00  2.19e+00  1.51e-02  3.40e+00  5.53e-06  1.58e-01  6.57e-01  
  5  +5.0020e-01  +1.1229e+00  6.23e-01  4.24e-03  9.76e-01  2.84e-05  9.62e-02  7.64e-01  
  6  +5.0008e-01  +8.1233e-01  3.12e-01  2.11e-03  4.88e-01  2.58e-05  4.03e-02  6.42e-01  
  7  +4.9996e-01  +8.6147e-01  3.62e-01  1.74e-03  4.05e-01  9.87e-05  8.17e-03  9.29e-01  
  8  +4.9794e-01  +8.3981e-01  3.42e-01  1.93e-04  4.51e-02  1.13e-03  6.11e-04  9.26e-01  
  9  +4.9465e-01  +7.4885e-01  2.54e-01  9.64e-05  2.26e-02  1.07e-03  3.06e-04  6.27e-01  
 10  +4.9332e-01  +7.2178e-01  2.28e-01  8.08e-05  1.89e-02  7.81e-04  2.55e-04  3.32e-01  
 11  +4.9233e-01  +7.0144e-01  2.09e-01  6.79e-05  1.59e-02  5.25e-04  2.14e-04  3.94e-01  
 12  +4.9078e-01  +6.7926e-01  1.88e-01  6.38e-05  1.49e-02  2.91e-04  2.04e-04  3.01e-01  
 13  +4.8588e-01  +6.4639e-01  1.61e-01  4.88e-05  1.14e-02  2.28e-04  1.59e-04  3.00e-01  
 14  +4.7831e-01  +6.0031e-01  1.22e-01  3.33e-05  7.78e-03  1.17e-04  1.12e-04  4.81e-01  
 15  +4.7234e-01  +5.6890e-01  9.66e-02  2.47e-05  5.75e-03  7.36e-05  8.50e-05  3.66e-01  
 16  +4.6691e-01  +5.4133e-01  7.44e-02  1.79e-05  4.18e-03  3.82e-05  6.34e-05  4.66e-01  
 17  +4.6191e-01  +5.1821e-01  5.63e-02  1.30e-05  3.02e-03  2.66e-05  4.70e-05  3.05e-01  
 18  +4.5858e-01  +5.0033e-01  4.17e-02  9.09e-06  2.12e-03  4.10e-06  3.34e-05  8.98e-01  
 19  +4.5228e-01  +4.7376e-01  2.15e-02  4.54e-06  1.06e-03  1.89e-06  1.74e-05  5.63e-01  
 20  +4.5119e-01  +4.6869e-01  1.75e-02  3.60e-06  8.39e-04  1.25e-06  1.38e-05  6.08e-01  
 21  +4.5115e-01  +4.6855e-01  1.74e-02  3.59e-06  8.36e-04  1.23e-06  1.38e-05  2.50e-02  
 22  +4.4873e-01  +4.5883e-01  1.01e-02  2.07e-06  4.83e-04  5.89e-07  8.13e-06  7.44e-01  
 23  +4.4608e-01  +4.4834e-01  2.26e-03  4.56e-07  1.06e-04  1.31e-07  1.84e-06  7.89e-01  
 24  +4.4538e-01  +4.4559e-01  2.14e-04  4.30e-08  1.00e-05  1.08e-08  1.75e-07  9.90e-01  
 25  +4.4530e-01  +4.4530e-01  2.16e-06  4.36e-10  1.02e-07  1.09e-10  1.78e-09  9.90e-01  
 26  +4.4530e-01  +4.4530e-01  2.17e-08  4.36e-12  1.02e-09  1.09e-12  1.78e-11  9.90e-01  
 27  +4.4530e-01  +4.4530e-01  2.17e-10  4.37e-14  1.02e-11  1.10e-14  1.79e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 150.3889ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:05 PM: Optimal value: 4.453e-01
(CVXPY) Aug 30 12:20:05 PM: Compilation took 4.289e-02 seconds
(CVXPY) Aug 30 12:20:05 PM: Solver (including time spent in interface) took 1.593e-01 seconds
Iteration: 24, Objective: 0.4453
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:05 PM: Your problem has 5243 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:05 PM: Finished problem compilation (took 3.662e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5243
  constraints   = 10243
  nnz(P)        = 0
  nnz(A)        = 93960
  cones (total) = 1
    : Nonnegative = 1,  numel = 10243

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8345e-01  +1.0696e+03  1.07e+03  4.22e-01  7.32e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3415e-01  +1.2511e+02  1.25e+02  1.63e-01  3.55e+01  1.48e-02  2.63e-01  9.08e-01  
  3  +5.0916e-01  +3.2351e+01  3.18e+01  1.21e-01  2.65e+01  4.00e-05  2.49e-01  2.28e-01  
  4  +5.0087e-01  +2.6930e+00  2.19e+00  1.51e-02  3.40e+00  5.53e-06  1.58e-01  6.57e-01  
  5  +5.0020e-01  +1.1264e+00  6.26e-01  4.26e-03  9.81e-01  2.84e-05  9.64e-02  7.62e-01  
  6  +5.0008e-01  +8.2019e-01  3.20e-01  2.16e-03  5.00e-01  2.58e-05  4.15e-02  6.25e-01  
  7  +4.9997e-01  +8.4404e-01  3.44e-01  1.76e-03  4.08e-01  9.05e-05  8.74e-03  8.97e-01  
  8  +4.9795e-01  +8.2431e-01  3.26e-01  1.89e-04  4.44e-02  1.13e-03  6.02e-04  9.33e-01  
  9  +4.9483e-01  +7.5104e-01  2.56e-01  9.76e-05  2.29e-02  1.19e-03  3.09e-04  5.96e-01  
 10  +4.9321e-01  +7.2265e-01  2.29e-01  8.03e-05  1.88e-02  9.08e-04  2.53e-04  3.29e-01  
 11  +4.9255e-01  +7.0458e-01  2.12e-01  6.90e-05  1.61e-02  6.15e-04  2.17e-04  3.75e-01  
 12  +4.9117e-01  +6.9073e-01  2.00e-01  6.77e-05  1.58e-02  5.04e-04  2.16e-04  6.16e-02  
 13  +4.8805e-01  +6.6713e-01  1.79e-01  5.68e-05  1.33e-02  4.15e-04  1.84e-04  2.23e-01  
 14  +4.8490e-01  +6.4309e-01  1.58e-01  4.79e-05  1.12e-02  2.74e-04  1.56e-04  3.23e-01  
 15  +4.8224e-01  +6.1585e-01  1.34e-01  3.99e-05  9.32e-03  2.73e-06  1.32e-04  8.04e-01  
 16  +4.7412e-01  +5.7505e-01  1.01e-01  2.66e-05  6.21e-03  2.18e-06  9.15e-05  3.46e-01  
 17  +4.6825e-01  +5.4653e-01  7.83e-02  1.93e-05  4.50e-03  2.07e-06  6.80e-05  4.55e-01  
 18  +4.6105e-01  +5.1362e-01  5.26e-02  1.21e-05  2.82e-03  1.44e-06  4.40e-05  4.08e-01  
 19  +4.5810e-01  +5.0020e-01  4.21e-02  9.30e-06  2.17e-03  1.35e-06  3.43e-05  4.04e-01  
 20  +4.5717e-01  +4.9529e-01  3.81e-02  8.27e-06  1.93e-03  1.48e-06  3.06e-05  4.60e-01  
 21  +4.5197e-01  +4.7345e-01  2.15e-02  4.52e-06  1.05e-03  8.53e-07  1.73e-05  5.17e-01  
 22  +4.4655e-01  +4.5089e-01  4.34e-03  8.90e-07  2.07e-04  1.85e-07  3.55e-06  8.82e-01  
 23  +4.4516e-01  +4.4533e-01  1.72e-04  3.50e-08  8.16e-06  7.62e-09  1.42e-07  9.76e-01  
 24  +4.4510e-01  +4.4510e-01  1.77e-06  3.60e-10  8.39e-08  7.84e-11  1.46e-09  9.90e-01  
 25  +4.4510e-01  +4.4510e-01  1.77e-08  3.60e-12  8.40e-10  7.84e-13  1.46e-11  9.90e-01  
 26  +4.4510e-01  +4.4510e-01  1.77e-10  3.61e-14  8.40e-12  7.89e-15  1.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 139.7057ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:05 PM: Optimal value: 4.451e-01
(CVXPY) Aug 30 12:20:05 PM: Compilation took 3.662e-02 seconds
(CVXPY) Aug 30 12:20:05 PM: Solver (including time spent in interface) took 1.480e-01 seconds
Iteration: 25, Objective: 0.4451
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:05 PM: Your problem has 5246 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:05 PM: Finished problem compilation (took 3.592e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5246
  constraints   = 10246
  nnz(P)        = 0
  nnz(A)        = 94066
  cones (total) = 1
    : Nonnegative = 1,  numel = 10246

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8345e-01  +1.0696e+03  1.07e+03  4.22e-01  7.32e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3415e-01  +1.2511e+02  1.25e+02  1.63e-01  3.55e+01  1.48e-02  2.63e-01  9.08e-01  
  3  +5.0916e-01  +3.2347e+01  3.18e+01  1.21e-01  2.65e+01  4.00e-05  2.49e-01  2.28e-01  
  4  +5.0087e-01  +2.6926e+00  2.19e+00  1.51e-02  3.40e+00  5.53e-06  1.58e-01  6.57e-01  
  5  +5.0020e-01  +1.1229e+00  6.23e-01  4.24e-03  9.76e-01  2.85e-05  9.60e-02  7.66e-01  
  6  +5.0008e-01  +8.2004e-01  3.20e-01  2.16e-03  5.00e-01  2.60e-05  4.12e-02  6.26e-01  
  7  +4.9997e-01  +8.4573e-01  3.46e-01  1.75e-03  4.06e-01  9.28e-05  8.58e-03  9.00e-01  
  8  +4.9795e-01  +8.2365e-01  3.26e-01  1.89e-04  4.44e-02  1.13e-03  6.02e-04  9.32e-01  
  9  +4.9478e-01  +7.4798e-01  2.53e-01  9.66e-05  2.26e-02  1.17e-03  3.06e-04  6.06e-01  
 10  +4.9306e-01  +7.1934e-01  2.26e-01  7.75e-05  1.82e-02  8.91e-04  2.45e-04  3.61e-01  
 11  +4.9139e-01  +7.0270e-01  2.11e-01  6.50e-05  1.52e-02  7.66e-04  2.05e-04  2.75e-01  
 12  +4.9004e-01  +6.8910e-01  1.99e-01  6.40e-05  1.50e-02  6.48e-04  2.05e-04  3.60e-02  
 13  +4.8500e-01  +6.5022e-01  1.65e-01  4.88e-05  1.14e-02  4.30e-04  1.59e-04  3.59e-01  
 14  +4.8447e-01  +6.4027e-01  1.56e-01  4.67e-05  1.09e-02  2.46e-04  1.53e-04  3.20e-01  
 15  +4.7488e-01  +5.8615e-01  1.11e-01  2.90e-05  6.76e-03  1.61e-04  9.89e-05  4.08e-01  
 16  +4.6993e-01  +5.5919e-01  8.93e-02  2.21e-05  5.16e-03  9.04e-05  7.70e-05  4.16e-01  
 17  +4.6256e-01  +5.2278e-01  6.02e-02  1.39e-05  3.25e-03  4.76e-05  5.01e-05  4.70e-01  
 18  +4.5958e-01  +5.0862e-01  4.90e-02  1.10e-05  2.55e-03  3.21e-05  3.99e-05  3.44e-01  
 19  +4.5896e-01  +5.0560e-01  4.66e-02  1.03e-05  2.41e-03  2.83e-05  3.77e-05  1.26e-01  
 20  +4.5884e-01  +5.0348e-01  4.46e-02  9.66e-06  2.25e-03  1.63e-05  3.51e-05  4.78e-01  
 21  +4.5380e-01  +4.8183e-01  2.80e-02  5.93e-06  1.38e-03  9.31e-06  2.22e-05  4.20e-01  
 22  +4.5013e-01  +4.6518e-01  1.51e-02  3.09e-06  7.20e-04  1.41e-06  1.18e-05  9.35e-01  
 23  +4.4894e-01  +4.6045e-01  1.15e-02  2.35e-06  5.46e-04  1.05e-06  9.07e-06  2.85e-01  
 24  +4.4885e-01  +4.6007e-01  1.12e-02  2.29e-06  5.32e-04  9.79e-07  8.84e-06  1.26e-01  
 25  +4.4723e-01  +4.5361e-01  6.38e-03  1.30e-06  3.03e-04  4.57e-07  5.09e-06  6.70e-01  
 26  +4.4541e-01  +4.4659e-01  1.18e-03  2.39e-07  5.56e-05  8.24e-08  9.51e-07  8.30e-01  
 27  +4.4500e-01  +4.4502e-01  1.38e-05  2.79e-09  6.51e-07  9.57e-10  1.12e-08  9.88e-01  
 28  +4.4500e-01  +4.4500e-01  1.39e-07  2.80e-11  6.52e-09  9.59e-12  1.12e-10  9.90e-01  
 29  +4.4500e-01  +4.4500e-01  1.39e-09  2.80e-13  6.52e-11  9.62e-14  1.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.618ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:05 PM: Optimal value: 4.450e-01
(CVXPY) Aug 30 12:20:05 PM: Compilation took 3.592e-02 seconds
(CVXPY) Aug 30 12:20:05 PM: Solver (including time spent in interface) took 1.703e-01 seconds
FULL MODEL:
  Accruacy: 0.5285
  Our objective: 0.05700000000000005

IF 
    (x1 = 1 AND x6 = 1 AND x0 = 0 AND x3 = 0)                                             <-- (term's our objective: 0.011999999999999997)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.007000000000000032)
 OR (x4 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0)            <-- (term's our objective: 0.002600000000000007)
 OR (x0 = 1 AND x2 = 1 AND x6 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.0035999999999999643)
 OR (x1 = 1 AND x3 = 1 AND x5 = 1 AND x0 = 0 AND x2 = 0 AND x4 = 0 AND x7 = 0)            <-- (term's our objective: 0.0038000000000000533)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.003599999999999986)
 OR (x0 = 1 AND x1 = 1 AND x6 = 1 AND x7 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.004000000000000008)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x6 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0015999999999999825)
 OR (x2 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.0004000000000000262)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x2 = 0 AND x6 = 0) <-- (term's our objective: 0.0011999999999999823)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x7 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0008000000000000255)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x1 = 0 AND x6 = 0) <-- (term's our objective: 0.0012000000000000036)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0012000000000000036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0029999999999999615)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.0010000000000000265)
 OR (x2 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0008000000000000034)
 OR (x0 = 1 AND x1 = 1 AND x6 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0006000000000000037)
 OR (x0 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.0010000000000000477)
 OR (x2 = 1 AND x4 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0006000000000000267)
 OR (x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0010000000000000265)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x0 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0019999999999999597)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0025999999999999825)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0) <-- (term's our objective: 0.0005999999999999595)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0007999999999999817)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.011999999999999997
    Its accruacy: 0.506
    Its hamming distance: 8
  Shortest hamming distance: 1
    Its our objective: 0.007000000000000032
  Highest accruacy: 0.506
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

