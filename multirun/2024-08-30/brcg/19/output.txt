Command:
python test_script.py -s smallest_subclass -d 1 -n 500 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.624
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 1.

Computed total variation: 0.624
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:00:53 PM: Your problem has 253 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:00:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:00:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:00:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:00:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:00:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:00:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:00:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:00:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:00:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:00:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:00:53 PM: Finished problem compilation (took 4.967e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:00:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 253
  constraints   = 503
  nnz(P)        = 0
  nnz(A)        = 1003
  cones (total) = 1
    : Nonnegative = 1,  numel = 503

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9589e-01  +2.5195e+02  2.51e+02  9.23e-01  1.37e+01  1.00e+00  1.02e+00   ------   
  1  +6.5762e-01  +4.0692e+01  4.00e+01  2.08e-01  5.55e+00  4.89e-03  3.32e-01  7.62e-01  
  2  +5.3441e-01  +5.5288e+00  4.99e+00  6.97e-02  2.08e+00  5.08e-03  1.41e-01  7.44e-01  
  3  +5.2785e-01  +5.9865e+00  5.46e+00  3.11e-02  9.74e-01  1.39e-02  6.09e-02  5.86e-01  
  4  +5.0972e-01  +5.2480e+00  4.74e+00  2.84e-02  8.88e-01  9.73e-03  5.64e-02  2.17e-01  
  5  +4.6075e-01  +4.2724e+00  3.81e+00  1.12e-02  3.57e-01  1.46e-02  2.27e-02  6.05e-01  
  6  +3.2952e-01  +1.4102e+00  1.08e+00  5.69e-03  1.70e-01  6.46e-05  1.46e-02  7.68e-01  
  7  +2.2864e-01  +4.4342e-01  2.15e-01  1.17e-03  3.31e-02  5.32e-05  4.29e-03  7.72e-01  
  8  +1.9053e-01  +2.0755e-01  1.70e-02  9.84e-05  2.71e-03  1.74e-05  5.94e-04  9.53e-01  
  9  +1.8813e-01  +1.8835e-01  2.21e-04  1.28e-06  3.52e-05  2.03e-07  8.27e-06  9.86e-01  
 10  +1.8810e-01  +1.8810e-01  2.21e-06  1.28e-08  3.52e-07  2.03e-09  8.27e-08  9.90e-01  
 11  +1.8810e-01  +1.8810e-01  2.21e-08  1.28e-10  3.52e-09  2.03e-11  8.27e-10  9.90e-01  
 12  +1.8810e-01  +1.8810e-01  2.21e-10  1.28e-12  3.52e-11  2.03e-13  8.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 982.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:00:53 PM: Problem status: optimal
(CVXPY) Aug 30 12:00:53 PM: Optimal value: 1.881e-01
(CVXPY) Aug 30 12:00:53 PM: Compilation took 4.967e-03 seconds
(CVXPY) Aug 30 12:00:53 PM: Solver (including time spent in interface) took 1.030e-03 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.812
  Our objective: 0.624

IF 
    (x0 = 0) <-- (term's our objective: 0.624)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.624
    Its accruacy: 0.812
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.624
  Highest accruacy: 0.812
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

