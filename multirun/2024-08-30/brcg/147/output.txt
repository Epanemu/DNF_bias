Command:
python test_script.py -s smallest_subclass -d 4 -n 5000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.07719999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.08479999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:45 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:45 PM: Finished problem compilation (took 1.029e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5007e+03  2.50e+03  9.78e-01  6.03e+01  1.00e+00  1.00e+00   ------   
  1  +6.0815e-01  +4.8463e+02  4.84e+02  3.36e-01  3.35e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5088e-01  +7.5530e+01  7.50e+01  1.37e-01  1.67e+01  8.23e-03  2.27e-01  7.26e-01  
  3  +5.1011e-01  +1.5801e+01  1.53e+01  9.64e-02  1.14e+01  1.70e-05  2.24e-01  7.39e-02  
  4  +5.0003e-01  +9.8654e-01  4.87e-01  4.62e-03  5.58e-01  6.02e-06  1.47e-01  8.22e-01  
  5  +4.9998e-01  +5.9448e-01  9.45e-02  8.95e-04  1.09e-01  1.55e-06  2.80e-02  8.26e-01  
  6  +4.9951e-01  +6.5486e-01  1.55e-01  1.13e-03  1.38e-01  1.04e-05  5.91e-03  8.55e-01  
  7  +4.8992e-01  +5.8880e-01  9.89e-02  6.89e-05  8.43e-03  1.58e-04  2.20e-04  9.63e-01  
  8  +4.7613e-01  +5.0165e-01  2.55e-02  1.20e-05  1.46e-03  3.43e-05  4.14e-05  8.94e-01  
  9  +4.6783e-01  +4.7106e-01  3.23e-03  1.32e-06  1.61e-04  2.50e-06  5.39e-06  9.04e-01  
 10  +4.6671e-01  +4.6676e-01  4.24e-05  1.72e-08  2.10e-06  2.47e-08  7.14e-08  9.90e-01  
 11  +4.6670e-01  +4.6670e-01  4.24e-07  1.72e-10  2.10e-08  2.47e-10  7.14e-10  9.90e-01  
 12  +4.6670e-01  +4.6670e-01  4.24e-09  1.72e-12  2.10e-10  2.49e-12  7.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.6079ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:45 PM: Optimal value: 4.667e-01
(CVXPY) Aug 30 12:04:45 PM: Compilation took 1.029e-02 seconds
(CVXPY) Aug 30 12:04:45 PM: Solver (including time spent in interface) took 2.101e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4667
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:45 PM: Your problem has 2517 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:45 PM: Finished problem compilation (took 5.299e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2517
  constraints   = 5017
  nnz(P)        = 0
  nnz(A)        = 21439
  cones (total) = 1
    : Nonnegative = 1,  numel = 5017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5015e+03  2.50e+03  9.78e-01  6.37e+01  1.00e+00  1.00e+00   ------   
  1  +6.0783e-01  +4.8555e+02  4.85e+02  3.37e-01  3.54e+01  4.09e-03  4.75e-01  6.66e-01  
  2  +5.5054e-01  +7.5232e+01  7.47e+01  1.37e-01  1.76e+01  8.33e-03  2.28e-01  7.29e-01  
  3  +5.0999e-01  +1.5693e+01  1.52e+01  9.62e-02  1.19e+01  1.71e-05  2.25e-01  7.72e-02  
  4  +5.0073e-01  +2.0440e+00  1.54e+00  1.47e-02  1.83e+00  7.05e-06  1.92e-01  3.35e-01  
  5  +5.0007e-01  +7.1457e-01  2.14e-01  2.04e-03  2.60e-01  1.45e-06  5.83e-02  7.85e-01  
  6  +5.0000e-01  +6.2672e-01  1.27e-01  1.19e-03  1.52e-01  1.53e-06  1.86e-02  7.82e-01  
  7  +4.9794e-01  +7.0839e-01  2.10e-01  3.68e-04  4.75e-02  3.27e-05  1.16e-03  9.90e-01  
  8  +4.9498e-01  +6.5960e-01  1.65e-01  1.52e-04  1.96e-02  4.90e-05  4.66e-04  6.41e-01  
  9  +4.9461e-01  +6.3446e-01  1.40e-01  1.04e-04  1.35e-02  3.68e-05  3.16e-04  5.46e-01  
 10  +4.9297e-01  +6.1880e-01  1.26e-01  8.03e-05  1.04e-02  3.39e-05  2.43e-04  3.19e-01  
 11  +4.9087e-01  +5.7541e-01  8.45e-02  4.61e-05  5.95e-03  4.16e-06  1.39e-04  9.90e-01  
 12  +4.8946e-01  +5.6927e-01  7.98e-02  4.17e-05  5.38e-03  4.54e-06  1.25e-04  2.60e-01  
 13  +4.7982e-01  +5.2730e-01  4.75e-02  1.94e-05  2.51e-03  3.34e-06  5.89e-05  5.91e-01  
 14  +4.7802e-01  +5.2108e-01  4.31e-02  1.61e-05  2.07e-03  3.31e-06  4.85e-05  2.11e-01  
 15  +4.7546e-01  +5.1212e-01  3.67e-02  1.50e-05  1.93e-03  2.58e-06  4.81e-05  1.26e-01  
 16  +4.7546e-01  +5.1254e-01  3.71e-02  1.49e-05  1.92e-03  2.88e-06  4.72e-05  1.40e-01  
 17  +4.6886e-01  +4.8675e-01  1.79e-02  6.24e-06  8.04e-04  1.91e-06  1.92e-05  7.39e-01  
 18  +4.6767e-01  +4.8301e-01  1.53e-02  5.12e-06  6.60e-04  1.94e-06  1.57e-05  5.72e-01  
 19  +4.6557e-01  +4.7593e-01  1.04e-02  3.23e-06  4.16e-04  1.63e-06  9.86e-06  9.90e-01  
 20  +4.6357e-01  +4.6952e-01  5.94e-03  1.87e-06  2.41e-04  9.19e-07  5.77e-06  7.58e-01  
 21  +4.6153e-01  +4.6296e-01  1.42e-03  4.35e-07  5.61e-05  2.23e-07  1.35e-06  7.79e-01  
 22  +4.6091e-01  +4.6093e-01  1.82e-05  5.56e-09  7.17e-07  2.77e-09  1.74e-08  9.87e-01  
 23  +4.6090e-01  +4.6090e-01  1.82e-07  5.56e-11  7.17e-09  2.77e-11  1.74e-10  9.90e-01  
 24  +4.6090e-01  +4.6090e-01  1.82e-09  5.56e-13  7.17e-11  2.78e-13  1.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.0811ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:45 PM: Optimal value: 4.609e-01
(CVXPY) Aug 30 12:04:45 PM: Compilation took 5.299e-03 seconds
(CVXPY) Aug 30 12:04:45 PM: Solver (including time spent in interface) took 4.024e-02 seconds
Iteration: 2, Objective: 0.4609
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:45 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:45 PM: Finished problem compilation (took 9.760e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 23896
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5012e+03  2.50e+03  9.78e-01  6.55e+01  1.00e+00  1.00e+00   ------   
  1  +6.0747e-01  +4.8638e+02  4.86e+02  3.38e-01  3.64e+01  4.09e-03  4.77e-01  6.65e-01  
  2  +5.5024e-01  +7.4951e+01  7.44e+01  1.37e-01  1.80e+01  8.40e-03  2.28e-01  7.32e-01  
  3  +5.0999e-01  +1.5723e+01  1.52e+01  9.64e-02  1.23e+01  1.74e-05  2.25e-01  7.84e-02  
  4  +5.0056e-01  +1.7780e+00  1.28e+00  1.22e-02  1.57e+00  6.90e-06  1.86e-01  4.04e-01  
  5  +5.0007e-01  +6.8946e-01  1.89e-01  1.80e-03  2.36e-01  1.27e-06  5.13e-02  7.83e-01  
  6  +5.0001e-01  +6.5478e-01  1.55e-01  1.44e-03  1.90e-01  1.78e-06  1.80e-02  8.22e-01  
  7  +4.9879e-01  +6.4776e-01  1.49e-01  3.62e-04  4.80e-02  2.02e-05  1.16e-03  9.90e-01  
  8  +4.9698e-01  +6.3165e-01  1.35e-01  1.58e-04  2.09e-02  3.83e-05  4.79e-04  6.36e-01  
  9  +4.9542e-01  +6.1000e-01  1.15e-01  8.84e-05  1.17e-02  3.58e-05  2.64e-04  7.11e-01  
 10  +4.9476e-01  +6.0487e-01  1.10e-01  7.58e-05  1.01e-02  3.11e-05  2.26e-04  3.34e-01  
 11  +4.9457e-01  +6.0018e-01  1.06e-01  7.07e-05  9.39e-03  1.98e-05  2.11e-04  4.26e-01  
 12  +4.8890e-01  +5.7507e-01  8.62e-02  4.19e-05  5.56e-03  2.02e-05  1.26e-04  4.64e-01  
 13  +4.8330e-01  +5.5233e-01  6.90e-02  2.99e-05  3.97e-03  1.42e-05  9.10e-05  4.24e-01  
 14  +4.7699e-01  +5.2752e-01  5.05e-02  2.03e-05  2.69e-03  8.08e-06  6.29e-05  5.32e-01  
 15  +4.6366e-01  +4.7759e-01  1.39e-02  4.92e-06  6.52e-04  1.78e-06  1.59e-05  7.95e-01  
 16  +4.6228e-01  +4.7269e-01  1.04e-02  3.49e-06  4.62e-04  1.43e-06  1.12e-05  4.91e-01  
 17  +4.6211e-01  +4.7210e-01  9.99e-03  3.44e-06  4.55e-04  1.33e-06  1.11e-05  7.98e-02  
 18  +4.6080e-01  +4.6766e-01  6.86e-03  2.22e-06  2.93e-04  9.99e-07  7.09e-06  6.26e-01  
 19  +4.5922e-01  +4.6245e-01  3.23e-03  1.06e-06  1.40e-04  4.58e-07  3.44e-06  9.80e-01  
 20  +4.5805e-01  +4.5855e-01  5.03e-04  1.62e-07  2.14e-05  7.62e-08  5.28e-07  8.57e-01  
 21  +4.5780e-01  +4.5781e-01  7.81e-06  2.50e-09  3.30e-07  1.09e-09  8.15e-09  9.88e-01  
 22  +4.5780e-01  +4.5780e-01  7.84e-08  2.50e-11  3.31e-09  1.09e-11  8.17e-11  9.90e-01  
 23  +4.5780e-01  +4.5780e-01  7.85e-10  2.51e-13  3.32e-11  1.16e-13  8.66e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.1373ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:45 PM: Optimal value: 4.578e-01
(CVXPY) Aug 30 12:04:45 PM: Compilation took 9.760e-03 seconds
(CVXPY) Aug 30 12:04:45 PM: Solver (including time spent in interface) took 4.381e-02 seconds
FULL MODEL:
  Accruacy: 0.5424
  Our objective: 0.08480000000000004

IF 
    (x2 = 1 AND x0 = 0 AND x3 = 0)            <-- (term's our objective: 0.007600000000000051)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.07719999999999999)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.07719999999999999
    Its accruacy: 0.5386
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.07719999999999999
  Highest accruacy: 0.5386
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

