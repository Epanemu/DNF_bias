Command:
python test_script.py -s smallest_subclass -d 6 -n 1000 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 6.

Computed total variation: 0.20399999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:18 PM: Your problem has 513 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:18 PM: Finished problem compilation (took 1.574e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 513
  constraints   = 1013
  nnz(P)        = 0
  nnz(A)        = 4513
  cones (total) = 1
    : Nonnegative = 1,  numel = 1013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9989e-01  +5.0070e+02  5.00e+02  9.53e-01  3.06e+01  1.00e+00  1.00e+00   ------   
  1  +5.9282e-01  +1.0326e+02  1.03e+02  3.72e-01  1.83e+01  3.92e-03  5.27e-01  6.27e-01  
  2  +5.4053e-01  +1.3794e+01  1.33e+01  1.30e-01  8.03e+00  1.16e-02  2.40e-01  8.39e-01  
  3  +5.0622e-01  +3.0081e+00  2.50e+00  5.09e-02  3.00e+00  2.33e-05  2.26e-01  2.62e-01  
  4  +5.0031e-01  +6.8557e-01  1.85e-01  4.04e-03  2.50e-01  8.54e-06  5.83e-02  9.13e-01  
  5  +4.9989e-01  +6.0397e-01  1.04e-01  2.15e-03  1.33e-01  1.06e-05  1.56e-02  8.10e-01  
  6  +4.9385e-01  +5.8384e-01  9.00e-02  3.06e-04  1.93e-02  1.18e-04  9.80e-04  9.52e-01  
  7  +4.8558e-01  +5.3383e-01  4.83e-02  1.31e-04  8.23e-03  5.49e-05  4.43e-04  6.32e-01  
  8  +4.7826e-01  +4.9723e-01  1.90e-02  4.46e-05  2.80e-03  2.52e-06  1.69e-04  9.90e-01  
  9  +4.7282e-01  +4.7488e-01  2.07e-03  4.25e-06  2.67e-04  3.40e-07  1.78e-05  9.11e-01  
 10  +4.7211e-01  +4.7213e-01  2.29e-05  4.62e-08  2.91e-06  4.31e-09  1.98e-07  9.90e-01  
 11  +4.7210e-01  +4.7210e-01  2.29e-07  4.62e-10  2.90e-08  4.31e-11  1.98e-09  9.90e-01  
 12  +4.7210e-01  +4.7210e-01  2.29e-09  4.62e-12  2.90e-10  4.33e-13  1.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.0208ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:18 PM: Optimal value: 4.721e-01
(CVXPY) Aug 30 12:09:18 PM: Compilation took 1.574e-02 seconds
(CVXPY) Aug 30 12:09:18 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4721
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:18 PM: Your problem has 523 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:18 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 1023
  nnz(P)        = 0
  nnz(A)        = 5359
  cones (total) = 1
    : Nonnegative = 1,  numel = 1023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9976e-01  +5.0090e+02  5.00e+02  9.54e-01  3.17e+01  1.00e+00  1.01e+00   ------   
  1  +5.9191e-01  +1.0358e+02  1.03e+02  3.75e-01  1.89e+01  3.91e-03  5.32e-01  6.25e-01  
  2  +5.3948e-01  +1.3599e+01  1.31e+01  1.30e-01  8.17e+00  1.19e-02  2.40e-01  8.49e-01  
  3  +5.0599e-01  +2.9681e+00  2.46e+00  5.06e-02  3.06e+00  2.40e-05  2.24e-01  2.86e-01  
  4  +5.0085e-01  +8.9795e-01  3.97e-01  8.73e-03  5.52e-01  9.81e-06  9.68e-02  6.86e-01  
  5  +5.0008e-01  +6.3004e-01  1.30e-01  2.81e-03  1.79e-01  6.20e-06  2.58e-02  7.98e-01  
  6  +4.9571e-01  +7.1277e-01  2.17e-01  9.91e-04  6.46e-02  6.85e-05  3.19e-03  9.66e-01  
  7  +4.8989e-01  +6.1001e-01  1.20e-01  4.55e-04  2.97e-02  3.77e-05  1.48e-03  6.16e-01  
  8  +4.8687e-01  +5.8558e-01  9.87e-02  2.92e-04  1.90e-02  3.74e-05  9.27e-04  4.69e-01  
  9  +4.8775e-01  +5.8320e-01  9.55e-02  2.64e-04  1.72e-02  3.71e-05  8.26e-04  3.91e-01  
 10  +4.8634e-01  +5.6830e-01  8.20e-02  1.88e-04  1.23e-02  3.57e-05  5.88e-04  6.22e-01  
 11  +4.8181e-01  +5.4153e-01  5.97e-02  1.32e-04  8.61e-03  2.56e-05  4.17e-04  6.44e-01  
 12  +4.7358e-01  +5.0381e-01  3.02e-02  6.01e-05  3.93e-03  1.32e-05  1.97e-04  7.94e-01  
 13  +4.6550e-01  +4.7157e-01  6.06e-03  1.10e-05  7.19e-04  2.56e-06  3.80e-05  8.59e-01  
 14  +4.6325e-01  +4.6337e-01  1.18e-04  2.07e-07  1.36e-05  4.26e-08  7.47e-07  9.83e-01  
 15  +4.6320e-01  +4.6320e-01  1.18e-06  2.07e-09  1.37e-07  4.26e-10  7.49e-09  9.90e-01  
 16  +4.6320e-01  +4.6320e-01  1.18e-08  2.08e-11  1.37e-09  4.27e-12  7.50e-11  9.90e-01  
 17  +4.6320e-01  +4.6320e-01  1.18e-10  2.08e-13  1.37e-11  4.28e-14  7.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.3273ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:18 PM: Optimal value: 4.632e-01
(CVXPY) Aug 30 12:09:18 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:18 PM: Solver (including time spent in interface) took 1.513e-02 seconds
Iteration: 2, Objective: 0.4632
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:18 PM: Your problem has 533 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:18 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 1033
  nnz(P)        = 0
  nnz(A)        = 5895
  cones (total) = 1
    : Nonnegative = 1,  numel = 1033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9966e-01  +5.0115e+02  5.01e+02  9.54e-01  3.21e+01  1.00e+00  1.01e+00   ------   
  1  +5.9051e-01  +1.0392e+02  1.03e+02  3.79e-01  1.92e+01  3.90e-03  5.35e-01  6.23e-01  
  2  +5.3840e-01  +1.3395e+01  1.29e+01  1.29e-01  8.14e+00  1.22e-02  2.39e-01  8.61e-01  
  3  +5.0582e-01  +2.9434e+00  2.44e+00  5.03e-02  3.08e+00  2.49e-05  2.21e-01  3.10e-01  
  4  +5.0103e-01  +9.8220e-01  4.81e-01  1.06e-02  6.79e-01  1.06e-05  1.03e-01  6.31e-01  
  5  +5.0042e-01  +8.6521e-01  3.65e-01  7.64e-03  4.91e-01  1.49e-05  4.66e-02  7.55e-01  
  6  +4.9546e-01  +7.9628e-01  3.01e-01  1.66e-03  1.09e-01  7.08e-05  5.88e-03  9.36e-01  
  7  +4.8614e-01  +6.1129e-01  1.25e-01  5.41e-04  3.56e-02  3.29e-05  1.88e-03  7.80e-01  
  8  +4.8489e-01  +6.0949e-01  1.25e-01  4.45e-04  2.92e-02  3.85e-05  1.45e-03  4.16e-01  
  9  +4.8232e-01  +6.0762e-01  1.25e-01  3.10e-04  2.04e-02  5.28e-05  9.91e-04  4.75e-01  
 10  +4.7870e-01  +5.8212e-01  1.03e-01  2.93e-04  1.92e-02  3.54e-05  9.62e-04  1.64e-01  
 11  +4.7555e-01  +5.6278e-01  8.72e-02  2.38e-04  1.56e-02  2.96e-05  7.92e-04  2.98e-01  
 12  +4.7647e-01  +5.7071e-01  9.42e-02  2.33e-04  1.53e-02  3.64e-05  7.63e-04  3.55e-01  
 13  +4.6787e-01  +5.2775e-01  5.99e-02  1.33e-04  8.74e-03  2.30e-05  4.46e-04  4.64e-01  
 14  +4.6032e-01  +4.9184e-01  3.15e-02  6.29e-05  4.13e-03  1.40e-05  2.14e-04  7.19e-01  
 15  +4.5861e-01  +4.8481e-01  2.62e-02  5.05e-05  3.32e-03  1.21e-05  1.72e-04  2.63e-01  
 16  +4.5591e-01  +4.7358e-01  1.77e-02  3.28e-05  2.15e-03  8.73e-06  1.13e-04  4.69e-01  
 17  +4.5202e-01  +4.5756e-01  5.55e-03  1.01e-05  6.62e-04  3.49e-06  3.51e-05  9.90e-01  
 18  +4.4993e-01  +4.5012e-01  1.94e-04  3.51e-07  2.30e-05  1.16e-07  1.24e-06  9.90e-01  
 19  +4.4985e-01  +4.4985e-01  1.96e-06  3.53e-09  2.32e-07  1.16e-09  1.24e-08  9.90e-01  
 20  +4.4985e-01  +4.4985e-01  1.96e-08  3.53e-11  2.32e-09  1.17e-11  1.24e-10  9.90e-01  
 21  +4.4985e-01  +4.4985e-01  1.96e-10  3.53e-13  2.32e-11  1.17e-13  1.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.1345ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:18 PM: Optimal value: 4.499e-01
(CVXPY) Aug 30 12:09:18 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:18 PM: Solver (including time spent in interface) took 1.647e-02 seconds
Iteration: 3, Objective: 0.4499
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:19 PM: Your problem has 542 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Finished problem compilation (took 6.644e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 542
  constraints   = 1042
  nnz(P)        = 0
  nnz(A)        = 6195
  cones (total) = 1
    : Nonnegative = 1,  numel = 1042

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0130e+02  5.01e+02  9.54e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8949e-01  +1.0398e+02  1.03e+02  3.80e-01  1.91e+01  3.90e-03  5.36e-01  6.22e-01  
  2  +5.3794e-01  +1.3304e+01  1.28e+01  1.28e-01  8.02e+00  1.22e-02  2.36e-01  8.67e-01  
  3  +5.0565e-01  +2.9152e+00  2.41e+00  4.98e-02  3.05e+00  2.51e-05  2.18e-01  3.27e-01  
  4  +5.0095e-01  +9.6361e-01  4.63e-01  1.02e-02  6.55e-01  1.05e-05  9.45e-02  6.57e-01  
  5  +5.0032e-01  +8.6872e-01  3.68e-01  7.65e-03  4.94e-01  1.42e-05  4.44e-02  6.19e-01  
  6  +4.9499e-01  +8.4230e-01  3.47e-01  1.86e-03  1.23e-01  7.28e-05  6.06e-03  9.78e-01  
  7  +4.8593e-01  +6.7360e-01  1.88e-01  7.21e-04  4.75e-02  5.26e-05  2.32e-03  7.19e-01  
  8  +4.8306e-01  +6.6756e-01  1.84e-01  4.70e-04  3.11e-02  7.84e-05  1.46e-03  5.75e-01  
  9  +4.7766e-01  +6.1634e-01  1.39e-01  4.01e-04  2.65e-02  4.44e-05  1.29e-03  4.70e-01  
 10  +4.6822e-01  +5.7214e-01  1.04e-01  2.50e-04  1.65e-02  3.72e-05  8.16e-04  4.42e-01  
 11  +4.5237e-01  +4.9226e-01  3.99e-02  8.18e-05  5.38e-03  1.79e-05  2.78e-04  9.90e-01  
 12  +4.4820e-01  +4.7571e-01  2.75e-02  5.27e-05  3.46e-03  1.33e-05  1.80e-04  4.24e-01  
 13  +4.4533e-01  +4.6473e-01  1.94e-02  3.66e-05  2.41e-03  9.73e-06  1.26e-04  4.59e-01  
 14  +4.3962e-01  +4.4284e-01  3.23e-03  5.89e-06  3.87e-04  1.70e-06  2.09e-05  9.25e-01  
 15  +4.3860e-01  +4.3908e-01  4.79e-04  8.68e-07  5.69e-05  2.55e-07  3.14e-06  8.72e-01  
 16  +4.3843e-01  +4.3850e-01  6.73e-05  1.20e-07  7.83e-06  4.13e-08  4.38e-07  9.75e-01  
 17  +4.3840e-01  +4.3840e-01  6.82e-07  1.21e-09  7.93e-08  4.18e-10  4.44e-09  9.90e-01  
 18  +4.3840e-01  +4.3840e-01  6.83e-09  1.21e-11  7.94e-10  4.19e-12  4.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.3359ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:19 PM: Optimal value: 4.384e-01
(CVXPY) Aug 30 12:09:19 PM: Compilation took 6.644e-03 seconds
(CVXPY) Aug 30 12:09:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.4384
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:19 PM: Your problem has 552 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 552
  constraints   = 1052
  nnz(P)        = 0
  nnz(A)        = 6553
  cones (total) = 1
    : Nonnegative = 1,  numel = 1052

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0133e+02  5.01e+02  9.55e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8855e-01  +1.0403e+02  1.03e+02  3.81e-01  1.91e+01  3.90e-03  5.35e-01  6.22e-01  
  2  +5.3734e-01  +1.3172e+01  1.26e+01  1.26e-01  7.90e+00  1.23e-02  2.34e-01  8.74e-01  
  3  +5.0547e-01  +2.8819e+00  2.38e+00  4.92e-02  3.02e+00  2.54e-05  2.14e-01  3.46e-01  
  4  +5.0114e-01  +1.0656e+00  5.64e-01  1.25e-02  7.98e-01  1.14e-05  1.02e-01  5.98e-01  
  5  +5.0002e-01  +1.1001e+00  6.00e-01  9.81e-03  6.38e-01  3.00e-05  3.84e-02  8.34e-01  
  6  +4.9264e-01  +8.8008e-01  3.87e-01  1.84e-03  1.22e-01  8.96e-05  5.94e-03  9.41e-01  
  7  +4.8463e-01  +7.6254e-01  2.78e-01  1.08e-03  7.14e-02  7.12e-05  3.57e-03  4.91e-01  
  8  +4.8049e-01  +7.3088e-01  2.50e-01  7.23e-04  4.78e-02  8.38e-05  2.29e-03  5.46e-01  
  9  +4.7651e-01  +6.8636e-01  2.10e-01  5.43e-04  3.59e-02  7.61e-05  1.73e-03  5.09e-01  
 10  +4.7369e-01  +6.5303e-01  1.79e-01  4.88e-04  3.22e-02  6.27e-05  1.56e-03  4.35e-01  
 11  +4.5914e-01  +5.7776e-01  1.19e-01  2.58e-04  1.70e-02  4.68e-05  8.50e-04  5.01e-01  
 12  +4.4375e-01  +4.9736e-01  5.36e-02  1.11e-04  7.31e-03  2.01e-05  3.88e-04  6.37e-01  
 13  +4.3952e-01  +4.7645e-01  3.69e-02  6.99e-05  4.60e-03  1.91e-05  2.46e-04  7.83e-01  
 14  +4.3702e-01  +4.6668e-01  2.97e-02  5.49e-05  3.61e-03  1.56e-05  1.95e-04  2.54e-01  
 15  +4.3089e-01  +4.4158e-01  1.07e-02  1.94e-05  1.27e-03  6.54e-06  7.12e-05  9.90e-01  
 16  +4.2679e-01  +4.2724e-01  4.54e-04  8.11e-07  5.32e-05  2.51e-07  3.06e-06  9.90e-01  
 17  +4.2660e-01  +4.2661e-01  4.58e-06  8.18e-09  5.37e-07  2.54e-09  3.09e-08  9.90e-01  
 18  +4.2660e-01  +4.2660e-01  4.58e-08  8.18e-11  5.37e-09  2.54e-11  3.09e-10  9.90e-01  
 19  +4.2660e-01  +4.2660e-01  4.58e-10  8.18e-13  5.37e-11  2.54e-13  3.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1053ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:19 PM: Optimal value: 4.266e-01
(CVXPY) Aug 30 12:09:19 PM: Compilation took 1.564e-02 seconds
(CVXPY) Aug 30 12:09:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.4266
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:19 PM: Your problem has 562 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 562
  constraints   = 1062
  nnz(P)        = 0
  nnz(A)        = 6817
  cones (total) = 1
    : Nonnegative = 1,  numel = 1062

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +5.0150e+02  5.01e+02  9.55e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8790e-01  +1.0406e+02  1.03e+02  3.82e-01  1.90e+01  3.90e-03  5.36e-01  6.22e-01  
  2  +5.3682e-01  +1.3063e+01  1.25e+01  1.25e-01  7.75e+00  1.24e-02  2.32e-01  8.79e-01  
  3  +5.0524e-01  +2.8354e+00  2.33e+00  4.85e-02  2.97e+00  2.55e-05  2.10e-01  3.69e-01  
  4  +5.0088e-01  +9.8362e-01  4.83e-01  1.07e-02  6.84e-01  1.08e-05  8.47e-02  6.68e-01  
  5  +4.9921e-01  +1.3334e+00  8.34e-01  9.42e-03  6.16e-01  4.85e-05  3.15e-02  8.13e-01  
  6  +4.8777e-01  +9.7943e-01  4.92e-01  1.84e-03  1.22e-01  1.04e-04  5.85e-03  8.21e-01  
  7  +4.8436e-01  +9.3660e-01  4.52e-01  1.51e-03  1.00e-01  1.09e-04  4.74e-03  2.81e-01  
  8  +4.8003e-01  +8.4127e-01  3.61e-01  1.12e-03  7.40e-02  1.03e-04  3.51e-03  5.90e-01  
  9  +4.6687e-01  +7.2670e-01  2.60e-01  6.60e-04  4.35e-02  8.43e-05  2.14e-03  4.86e-01  
 10  +4.6336e-01  +6.7403e-01  2.11e-01  5.80e-04  3.81e-02  6.94e-05  1.93e-03  4.74e-01  
 11  +4.4716e-01  +5.7395e-01  1.27e-01  3.00e-04  1.97e-02  4.48e-05  1.04e-03  6.04e-01  
 12  +4.3445e-01  +5.0254e-01  6.81e-02  1.53e-04  1.00e-02  2.60e-05  5.61e-04  6.79e-01  
 13  +4.2585e-01  +4.5889e-01  3.30e-02  7.02e-05  4.59e-03  1.55e-05  2.64e-04  8.80e-01  
 14  +4.2301e-01  +4.4718e-01  2.42e-02  4.88e-05  3.19e-03  1.20e-05  1.85e-04  3.65e-01  
 15  +4.2072e-01  +4.3646e-01  1.57e-02  3.20e-05  2.09e-03  8.21e-06  1.24e-04  9.90e-01  
 16  +4.1717e-01  +4.2346e-01  6.30e-03  1.23e-05  8.04e-04  3.31e-06  4.90e-05  6.49e-01  
 17  +4.1496e-01  +4.1513e-01  1.66e-04  3.21e-07  2.10e-05  8.48e-08  1.31e-06  9.75e-01  
 18  +4.1490e-01  +4.1490e-01  1.67e-06  3.21e-09  2.10e-07  8.50e-10  1.31e-08  9.90e-01  
 19  +4.1490e-01  +4.1490e-01  1.67e-08  3.21e-11  2.10e-09  8.50e-12  1.31e-10  9.90e-01  
 20  +4.1490e-01  +4.1490e-01  1.67e-10  3.21e-13  2.10e-11  8.52e-14  1.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1053ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:19 PM: Optimal value: 4.149e-01
(CVXPY) Aug 30 12:09:19 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:19 PM: Solver (including time spent in interface) took 1.587e-02 seconds
Iteration: 6, Objective: 0.4149
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:19 PM: Your problem has 570 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Finished problem compilation (took 1.555e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 570
  constraints   = 1070
  nnz(P)        = 0
  nnz(A)        = 7062
  cones (total) = 1
    : Nonnegative = 1,  numel = 1070

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0158e+02  5.01e+02  9.55e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8646e-01  +1.0425e+02  1.04e+02  3.84e-01  1.90e+01  3.90e-03  5.36e-01  6.21e-01  
  2  +5.3616e-01  +1.2939e+01  1.24e+01  1.24e-01  7.64e+00  1.25e-02  2.29e-01  8.88e-01  
  3  +5.0507e-01  +2.8112e+00  2.31e+00  4.80e-02  2.94e+00  2.60e-05  2.05e-01  3.93e-01  
  4  +5.0113e-01  +1.1262e+00  6.25e-01  1.37e-02  8.79e-01  1.23e-05  9.47e-02  5.92e-01  
  5  +4.9548e-01  +1.5008e+00  1.01e+00  6.06e-03  4.01e-01  9.37e-05  1.85e-02  9.90e-01  
  6  +4.8119e-01  +1.0219e+00  5.41e-01  1.86e-03  1.23e-01  9.75e-05  5.80e-03  7.30e-01  
  7  +4.7037e-01  +9.0777e-01  4.37e-01  1.16e-03  7.71e-02  1.05e-04  3.67e-03  4.65e-01  
  8  +4.6192e-01  +7.5659e-01  2.95e-01  8.17e-04  5.39e-02  7.82e-05  2.70e-03  5.19e-01  
  9  +4.3922e-01  +5.7653e-01  1.37e-01  3.40e-04  2.23e-02  3.69e-05  1.22e-03  6.59e-01  
 10  +4.3050e-01  +5.2327e-01  9.28e-02  2.21e-04  1.45e-02  2.66e-05  8.20e-04  4.03e-01  
 11  +4.2126e-01  +4.6740e-01  4.61e-02  1.07e-04  6.98e-03  1.57e-05  4.16e-04  6.49e-01  
 12  +4.1936e-01  +4.5613e-01  3.68e-02  8.10e-05  5.30e-03  1.44e-05  3.15e-04  4.66e-01  
 13  +4.1779e-01  +4.4844e-01  3.06e-02  6.55e-05  4.29e-03  1.26e-05  2.58e-04  2.69e-01  
 14  +4.1506e-01  +4.3300e-01  1.79e-02  3.86e-05  2.53e-03  8.76e-06  1.56e-04  9.90e-01  
 15  +4.0971e-01  +4.1165e-01  1.94e-03  4.06e-06  2.66e-04  6.85e-07  1.75e-05  9.89e-01  
 16  +4.0911e-01  +4.0914e-01  2.86e-05  5.94e-08  3.88e-06  9.88e-09  2.61e-07  9.86e-01  
 17  +4.0910e-01  +4.0910e-01  2.86e-07  5.94e-10  3.88e-08  9.89e-11  2.61e-09  9.90e-01  
 18  +4.0910e-01  +4.0910e-01  2.86e-09  5.94e-12  3.88e-10  9.92e-13  2.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.3723ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:19 PM: Optimal value: 4.091e-01
(CVXPY) Aug 30 12:09:19 PM: Compilation took 1.555e-02 seconds
(CVXPY) Aug 30 12:09:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.4091
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:19 PM: Your problem has 580 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Finished problem compilation (took 1.550e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 580
  constraints   = 1080
  nnz(P)        = 0
  nnz(A)        = 7330
  cones (total) = 1
    : Nonnegative = 1,  numel = 1080

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0158e+02  5.01e+02  9.55e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8652e-01  +1.0426e+02  1.04e+02  3.85e-01  1.89e+01  3.91e-03  5.36e-01  6.21e-01  
  2  +5.3596e-01  +1.2888e+01  1.24e+01  1.23e-01  7.55e+00  1.25e-02  2.28e-01  8.89e-01  
  3  +5.0501e-01  +2.7955e+00  2.29e+00  4.78e-02  2.93e+00  2.60e-05  2.04e-01  3.99e-01  
  4  +5.0116e-01  +1.1505e+00  6.49e-01  1.43e-02  9.13e-01  1.25e-05  9.61e-02  5.80e-01  
  5  +4.9666e-01  +1.2620e+00  7.65e-01  6.14e-03  4.05e-01  6.52e-05  1.93e-02  9.42e-01  
  6  +4.8366e-01  +1.0109e+00  5.27e-01  1.91e-03  1.27e-01  1.07e-04  5.94e-03  7.28e-01  
  7  +4.7302e-01  +8.9134e-01  4.18e-01  1.22e-03  8.10e-02  1.03e-04  3.89e-03  4.46e-01  
  8  +4.6249e-01  +7.6663e-01  3.04e-01  8.49e-04  5.60e-02  8.04e-05  2.82e-03  4.69e-01  
  9  +4.4355e-01  +6.1823e-01  1.75e-01  4.45e-04  2.93e-02  4.57e-05  1.60e-03  5.32e-01  
 10  +4.2997e-01  +5.3307e-01  1.03e-01  2.48e-04  1.63e-02  2.92e-05  9.48e-04  5.33e-01  
 11  +4.1906e-01  +4.6976e-01  5.07e-02  1.18e-04  7.69e-03  1.58e-05  4.77e-04  6.04e-01  
 12  +4.1473e-01  +4.4767e-01  3.29e-02  7.38e-05  4.82e-03  1.09e-05  3.08e-04  4.29e-01  
 13  +4.0856e-01  +4.1620e-01  7.65e-03  1.69e-05  1.10e-03  3.25e-06  7.44e-05  9.71e-01  
 14  +4.0713e-01  +4.1016e-01  3.03e-03  6.58e-06  4.30e-04  1.33e-06  2.93e-05  7.05e-01  
 15  +4.0696e-01  +4.0944e-01  2.48e-03  5.47e-06  3.57e-04  1.00e-06  2.52e-05  2.66e-01  
 16  +4.0695e-01  +4.0942e-01  2.46e-03  5.42e-06  3.54e-04  9.97e-07  2.49e-05  4.40e-02  
 17  +4.0688e-01  +4.0923e-01  2.35e-03  5.01e-06  3.27e-04  1.00e-06  2.24e-05  3.38e-01  
 18  +4.0615e-01  +4.0627e-01  1.29e-04  2.75e-07  1.79e-05  5.38e-08  1.25e-06  9.90e-01  
 19  +4.0610e-01  +4.0610e-01  1.31e-06  2.80e-09  1.83e-07  5.47e-10  1.27e-08  9.90e-01  
 20  +4.0610e-01  +4.0610e-01  1.31e-08  2.80e-11  1.83e-09  5.47e-12  1.27e-10  9.90e-01  
 21  +4.0610e-01  +4.0610e-01  1.31e-10  2.80e-13  1.83e-11  5.47e-14  1.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.7635ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:19 PM: Optimal value: 4.061e-01
(CVXPY) Aug 30 12:09:19 PM: Compilation took 1.550e-02 seconds
(CVXPY) Aug 30 12:09:19 PM: Solver (including time spent in interface) took 7.642e-03 seconds
Iteration: 8, Objective: 0.4061
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:19 PM: Your problem has 582 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 582
  constraints   = 1082
  nnz(P)        = 0
  nnz(A)        = 7386
  cones (total) = 1
    : Nonnegative = 1,  numel = 1082

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0158e+02  5.01e+02  9.55e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8627e-01  +1.0427e+02  1.04e+02  3.85e-01  1.89e+01  3.91e-03  5.36e-01  6.21e-01  
  2  +5.3587e-01  +1.2871e+01  1.23e+01  1.23e-01  7.53e+00  1.26e-02  2.28e-01  8.90e-01  
  3  +5.0499e-01  +2.7939e+00  2.29e+00  4.78e-02  2.92e+00  2.61e-05  2.03e-01  4.02e-01  
  4  +5.0120e-01  +1.1685e+00  6.67e-01  1.47e-02  9.37e-01  1.27e-05  9.73e-02  5.71e-01  
  5  +4.9580e-01  +1.2925e+00  7.97e-01  5.53e-03  3.66e-01  7.73e-05  1.71e-02  9.86e-01  
  6  +4.8725e-01  +1.1097e+00  6.22e-01  2.65e-03  1.76e-01  9.82e-05  8.25e-03  5.70e-01  
  7  +4.7593e-01  +9.6558e-01  4.90e-01  1.54e-03  1.02e-01  1.01e-04  4.91e-03  4.58e-01  
  8  +4.6736e-01  +8.2114e-01  3.54e-01  1.04e-03  6.89e-02  8.56e-05  3.42e-03  5.19e-01  
  9  +4.5654e-01  +7.2120e-01  2.65e-01  7.29e-04  4.80e-02  6.79e-05  2.49e-03  3.97e-01  
 10  +4.3966e-01  +5.9735e-01  1.58e-01  3.97e-04  2.61e-02  4.07e-05  1.45e-03  4.87e-01  
 11  +4.2476e-01  +5.0165e-01  7.69e-02  1.84e-04  1.20e-02  2.21e-05  7.22e-04  6.48e-01  
 12  +4.1684e-01  +4.5785e-01  4.10e-02  9.42e-05  6.16e-03  1.31e-05  3.86e-04  5.78e-01  
 13  +4.1428e-01  +4.4523e-01  3.10e-02  6.94e-05  4.54e-03  1.03e-05  2.90e-04  3.23e-01  
 14  +4.0822e-01  +4.1524e-01  7.02e-03  1.55e-05  1.01e-03  2.61e-06  6.85e-05  8.71e-01  
 15  +4.0697e-01  +4.0969e-01  2.71e-03  5.88e-06  3.84e-04  1.07e-06  2.62e-05  6.90e-01  
 16  +4.0662e-01  +4.0808e-01  1.47e-03  3.23e-06  2.11e-04  5.15e-07  1.50e-05  6.87e-01  
 17  +4.0659e-01  +4.0802e-01  1.43e-03  3.14e-06  2.05e-04  5.32e-07  1.42e-05  2.68e-01  
 18  +4.0629e-01  +4.0688e-01  5.86e-04  1.25e-06  8.17e-05  2.32e-07  5.66e-06  7.07e-01  
 19  +4.0610e-01  +4.0611e-01  8.67e-06  1.85e-08  1.21e-06  3.39e-09  8.41e-08  9.85e-01  
 20  +4.0610e-01  +4.0610e-01  8.67e-08  1.85e-10  1.21e-08  3.39e-11  8.41e-10  9.90e-01  
 21  +4.0610e-01  +4.0610e-01  8.67e-10  1.85e-12  1.21e-10  3.39e-13  8.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.1806ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:19 PM: Optimal value: 4.061e-01
(CVXPY) Aug 30 12:09:19 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.4061
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:19 PM: Your problem has 584 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:19 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 584
  constraints   = 1084
  nnz(P)        = 0
  nnz(A)        = 7422
  cones (total) = 1
    : Nonnegative = 1,  numel = 1084

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0158e+02  5.01e+02  9.55e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8640e-01  +1.0426e+02  1.04e+02  3.85e-01  1.88e+01  3.91e-03  5.36e-01  6.21e-01  
  2  +5.3588e-01  +1.2870e+01  1.23e+01  1.23e-01  7.51e+00  1.25e-02  2.28e-01  8.90e-01  
  3  +5.0497e-01  +2.7874e+00  2.28e+00  4.77e-02  2.91e+00  2.60e-05  2.04e-01  4.03e-01  
  4  +5.0119e-01  +1.1665e+00  6.65e-01  1.47e-02  9.34e-01  1.27e-05  9.72e-02  5.72e-01  
  5  +4.9593e-01  +1.2844e+00  7.88e-01  5.61e-03  3.71e-01  7.47e-05  1.75e-02  9.79e-01  
  6  +4.8806e-01  +1.1176e+00  6.30e-01  2.80e-03  1.86e-01  9.50e-05  8.71e-03  5.52e-01  
  7  +4.7676e-01  +9.7483e-01  4.98e-01  1.61e-03  1.06e-01  9.96e-05  5.11e-03  4.59e-01  
  8  +4.6876e-01  +8.3562e-01  3.67e-01  1.09e-03  7.21e-02  8.84e-05  3.56e-03  5.22e-01  
  9  +4.5991e-01  +7.4737e-01  2.87e-01  8.10e-04  5.33e-02  7.36e-05  2.73e-03  3.71e-01  
 10  +4.4221e-01  +6.1096e-01  1.69e-01  4.31e-04  2.83e-02  4.37e-05  1.56e-03  5.21e-01  
 11  +4.2869e-01  +5.2651e-01  9.78e-02  2.36e-04  1.55e-02  2.66e-05  9.08e-04  5.14e-01  
 12  +4.1869e-01  +4.6929e-01  5.06e-02  1.17e-04  7.67e-03  1.43e-05  4.76e-04  5.26e-01  
 13  +4.1467e-01  +4.4813e-01  3.35e-02  7.52e-05  4.91e-03  1.03e-05  3.13e-04  4.26e-01  
 14  +4.0851e-01  +4.1586e-01  7.34e-03  1.62e-05  1.06e-03  3.17e-06  7.14e-05  9.90e-01  
 15  +4.0716e-01  +4.1023e-01  3.08e-03  6.67e-06  4.35e-04  1.37e-06  2.96e-05  6.90e-01  
 16  +4.0706e-01  +4.0982e-01  2.76e-03  6.08e-06  3.97e-04  1.16e-06  2.76e-05  2.13e-01  
 17  +4.0699e-01  +4.0963e-01  2.64e-03  5.68e-06  3.71e-04  1.15e-06  2.54e-05  1.94e-01  
 18  +4.0633e-01  +4.0701e-01  6.77e-04  1.45e-06  9.44e-05  2.92e-07  6.54e-06  7.67e-01  
 19  +4.0632e-01  +4.0697e-01  6.53e-04  1.40e-06  9.12e-05  2.81e-07  6.33e-06  1.17e-01  
 20  +4.0610e-01  +4.0611e-01  8.45e-06  1.81e-08  1.18e-06  3.55e-09  8.21e-08  9.88e-01  
 21  +4.0610e-01  +4.0610e-01  8.46e-08  1.81e-10  1.18e-08  3.55e-11  8.22e-10  9.90e-01  
 22  +4.0610e-01  +4.0610e-01  8.46e-10  1.81e-12  1.18e-10  3.56e-13  8.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.3839ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:19 PM: Optimal value: 4.061e-01
(CVXPY) Aug 30 12:09:19 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:19 PM: Solver (including time spent in interface) took 1.562e-02 seconds
FULL MODEL:
  Accruacy: 0.579
  Our objective: 0.15800000000000003

IF 
    (x4 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.018000000000000033)
 OR (x1 = 1 AND x4 = 1 AND x5 = 1 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.02000000000000003)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0)            <-- (term's our objective: 0.01400000000000003)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.030000000000000037)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.01600000000000002)
 OR (x0 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.01600000000000002)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0) <-- (term's our objective: 0.014000000000000023)
 OR (x0 = 1 AND x1 = 1 AND x5 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.010000000000000016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x4 = 0) <-- (term's our objective: 0.006000000000000014)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.004000000000000014)
 OR (x1 = 1 AND x2 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.010000000000000016)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.030000000000000037
    Its accruacy: 0.515
    Its hamming distance: 5
  Shortest hamming distance: 0
    Its our objective: 0.004000000000000014
  Highest accruacy: 0.515
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

