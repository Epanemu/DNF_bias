Command:
python test_script.py -s smallest_subclass -d 6 -n 1000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.014
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 6.

Computed total variation: 0.206
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:04 PM: Your problem has 513 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:04 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 513
  constraints   = 1013
  nnz(P)        = 0
  nnz(A)        = 4513
  cones (total) = 1
    : Nonnegative = 1,  numel = 1013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9989e-01  +5.0071e+02  5.00e+02  9.53e-01  3.06e+01  1.00e+00  1.00e+00   ------   
  1  +5.9282e-01  +1.0326e+02  1.03e+02  3.71e-01  1.83e+01  3.92e-03  5.27e-01  6.27e-01  
  2  +5.4054e-01  +1.3795e+01  1.33e+01  1.30e-01  8.03e+00  1.16e-02  2.40e-01  8.39e-01  
  3  +5.0624e-01  +3.0119e+00  2.51e+00  5.09e-02  3.00e+00  2.34e-05  2.26e-01  2.62e-01  
  4  +5.0032e-01  +6.8874e-01  1.88e-01  4.11e-03  2.54e-01  8.58e-06  5.93e-02  9.08e-01  
  5  +4.9994e-01  +5.9765e-01  9.77e-02  2.05e-03  1.27e-01  8.99e-06  1.66e-02  7.88e-01  
  6  +4.9609e-01  +5.7830e-01  8.22e-02  3.98e-04  2.51e-02  7.78e-05  1.29e-03  9.35e-01  
  7  +4.8639e-01  +5.2259e-01  3.62e-02  9.10e-05  5.73e-03  7.37e-05  2.99e-04  8.13e-01  
  8  +4.8008e-01  +4.9430e-01  1.42e-02  3.54e-05  2.23e-03  9.91e-06  1.26e-04  7.99e-01  
  9  +4.7639e-01  +4.7749e-01  1.10e-03  2.56e-06  1.61e-04  7.04e-07  9.45e-06  9.31e-01  
 10  +4.7610e-01  +4.7611e-01  1.14e-05  2.64e-08  1.66e-06  7.19e-09  9.78e-08  9.90e-01  
 11  +4.7610e-01  +4.7610e-01  1.14e-07  2.64e-10  1.66e-08  7.19e-11  9.78e-10  9.90e-01  
 12  +4.7610e-01  +4.7610e-01  1.14e-09  2.64e-12  1.66e-10  7.20e-13  9.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.0996ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:04 PM: Optimal value: 4.761e-01
(CVXPY) Aug 30 12:09:04 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:04 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4761
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:05 PM: Your problem has 523 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 1023
  nnz(P)        = 0
  nnz(A)        = 5211
  cones (total) = 1
    : Nonnegative = 1,  numel = 1023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9982e-01  +5.0111e+02  5.01e+02  9.54e-01  3.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.9170e-01  +1.0344e+02  1.03e+02  3.74e-01  1.87e+01  3.91e-03  5.29e-01  6.26e-01  
  2  +5.3949e-01  +1.3582e+01  1.30e+01  1.29e-01  8.03e+00  1.18e-02  2.37e-01  8.50e-01  
  3  +5.0583e-01  +2.9326e+00  2.43e+00  4.96e-02  2.98e+00  2.36e-05  2.21e-01  2.94e-01  
  4  +5.0093e-01  +9.4110e-01  4.40e-01  9.62e-03  6.03e-01  1.00e-05  9.85e-02  6.58e-01  
  5  +5.0001e-01  +7.1910e-01  2.19e-01  4.50e-03  2.84e-01  1.13e-05  2.92e-02  7.91e-01  
  6  +4.9148e-01  +7.9019e-01  2.99e-01  1.03e-03  6.67e-02  1.15e-04  3.32e-03  9.57e-01  
  7  +4.7985e-01  +6.5315e-01  1.73e-01  5.00e-04  3.22e-02  6.29e-05  1.70e-03  5.81e-01  
  8  +4.7411e-01  +5.8843e-01  1.14e-01  3.11e-04  2.00e-02  3.83e-05  1.09e-03  7.59e-01  
  9  +4.6852e-01  +5.5625e-01  8.77e-02  2.19e-04  1.41e-02  2.99e-05  7.90e-04  3.08e-01  
 10  +4.6568e-01  +5.3041e-01  6.47e-02  1.60e-04  1.03e-02  2.61e-05  5.81e-04  9.90e-01  
 11  +4.5328e-01  +4.6989e-01  1.66e-02  3.69e-05  2.36e-03  6.87e-06  1.40e-04  7.81e-01  
 12  +4.5238e-01  +4.6753e-01  1.52e-02  2.66e-05  1.71e-03  8.16e-06  9.30e-05  4.03e-01  
 13  +4.5224e-01  +4.6701e-01  1.48e-02  2.65e-05  1.70e-03  7.76e-06  9.30e-05  8.46e-03  
 14  +4.4994e-01  +4.5882e-01  8.88e-03  1.96e-05  1.25e-03  2.46e-06  7.73e-05  4.97e-01  
 15  +4.4717e-01  +4.4897e-01  1.80e-03  3.08e-06  1.98e-04  1.23e-06  1.11e-05  9.28e-01  
 16  +4.4631e-01  +4.4633e-01  2.30e-05  3.92e-08  2.51e-06  1.41e-08  1.41e-07  9.90e-01  
 17  +4.4630e-01  +4.4630e-01  2.30e-07  3.92e-10  2.51e-08  1.41e-10  1.41e-09  9.90e-01  
 18  +4.4630e-01  +4.4630e-01  2.30e-09  3.92e-12  2.51e-10  1.42e-12  1.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.9952ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:05 PM: Optimal value: 4.463e-01
(CVXPY) Aug 30 12:09:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4463
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:05 PM: Your problem has 533 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 1033
  nnz(P)        = 0
  nnz(A)        = 5626
  cones (total) = 1
    : Nonnegative = 1,  numel = 1033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9976e-01  +5.0122e+02  5.01e+02  9.54e-01  3.15e+01  1.00e+00  1.01e+00   ------   
  1  +5.9075e-01  +1.0365e+02  1.03e+02  3.76e-01  1.87e+01  3.91e-03  5.31e-01  6.25e-01  
  2  +5.3862e-01  +1.3413e+01  1.29e+01  1.28e-01  7.94e+00  1.20e-02  2.35e-01  8.59e-01  
  3  +5.0555e-01  +2.8827e+00  2.38e+00  4.88e-02  2.95e+00  2.40e-05  2.17e-01  3.22e-01  
  4  +5.0113e-01  +1.0435e+00  5.42e-01  1.19e-02  7.44e-01  1.07e-05  1.05e-01  5.99e-01  
  5  +4.9981e-01  +7.6365e-01  2.64e-01  5.14e-03  3.27e-01  1.42e-05  2.69e-02  8.28e-01  
  6  +4.8831e-01  +8.0174e-01  3.13e-01  9.83e-04  6.39e-02  1.31e-04  3.03e-03  9.52e-01  
  7  +4.7481e-01  +6.7763e-01  2.03e-01  5.56e-04  3.60e-02  7.75e-05  1.83e-03  4.97e-01  
  8  +4.6252e-01  +5.9012e-01  1.28e-01  3.12e-04  2.01e-02  4.85e-05  1.06e-03  5.45e-01  
  9  +4.5446e-01  +5.4742e-01  9.30e-02  1.94e-04  1.25e-02  4.01e-05  6.62e-04  4.30e-01  
 10  +4.5409e-01  +5.4478e-01  9.07e-02  1.92e-04  1.24e-02  3.88e-05  6.58e-04  4.15e-02  
 11  +4.4426e-01  +4.9320e-01  4.89e-02  1.09e-04  7.03e-03  1.69e-05  4.07e-04  7.73e-01  
 12  +4.3271e-01  +4.4360e-01  1.09e-02  2.09e-05  1.35e-03  5.50e-06  7.85e-05  8.68e-01  
 13  +4.2943e-01  +4.3161e-01  2.19e-03  4.13e-06  2.67e-04  1.11e-06  1.61e-05  8.38e-01  
 14  +4.2861e-01  +4.2864e-01  2.80e-05  5.29e-08  3.42e-06  1.38e-08  2.08e-07  9.88e-01  
 15  +4.2860e-01  +4.2860e-01  2.80e-07  5.29e-10  3.42e-08  1.38e-10  2.08e-09  9.90e-01  
 16  +4.2860e-01  +4.2860e-01  2.80e-09  5.29e-12  3.42e-10  1.38e-12  2.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5175ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:05 PM: Optimal value: 4.286e-01
(CVXPY) Aug 30 12:09:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:05 PM: Solver (including time spent in interface) took 1.565e-02 seconds
Iteration: 3, Objective: 0.4286
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:05 PM: Your problem has 543 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 543
  constraints   = 1043
  nnz(P)        = 0
  nnz(A)        = 5855
  cones (total) = 1
    : Nonnegative = 1,  numel = 1043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9968e-01  +5.0119e+02  5.01e+02  9.54e-01  3.14e+01  1.00e+00  1.01e+00   ------   
  1  +5.8909e-01  +1.0382e+02  1.03e+02  3.78e-01  1.86e+01  3.91e-03  5.32e-01  6.24e-01  
  2  +5.3761e-01  +1.3210e+01  1.27e+01  1.25e-01  7.76e+00  1.22e-02  2.31e-01  8.72e-01  
  3  +5.0528e-01  +2.8385e+00  2.33e+00  4.80e-02  2.90e+00  2.47e-05  2.11e-01  3.54e-01  
  4  +5.0099e-01  +1.0198e+00  5.19e-01  1.14e-02  7.12e-01  1.08e-05  9.16e-02  6.37e-01  
  5  +4.9888e-01  +1.0720e+00  5.73e-01  7.09e-03  4.55e-01  3.89e-05  2.40e-02  8.84e-01  
  6  +4.8623e-01  +8.8380e-01  3.98e-01  1.33e-03  8.62e-02  1.23e-04  4.02e-03  8.37e-01  
  7  +4.7703e-01  +8.0083e-01  3.24e-01  8.93e-04  5.79e-02  1.14e-04  2.72e-03  4.11e-01  
  8  +4.7064e-01  +7.4531e-01  2.75e-01  6.72e-04  4.35e-02  1.05e-04  2.06e-03  3.75e-01  
  9  +4.6374e-01  +6.8287e-01  2.19e-01  5.98e-04  3.86e-02  6.64e-05  2.04e-03  1.77e-01  
 10  +4.4595e-01  +5.5917e-01  1.13e-01  2.68e-04  1.72e-02  4.00e-05  9.31e-04  7.30e-01  
 11  +4.2376e-01  +4.6230e-01  3.85e-02  7.89e-05  5.06e-03  1.37e-05  2.96e-04  7.93e-01  
 12  +4.1962e-01  +4.4579e-01  2.62e-02  5.22e-05  3.34e-03  9.92e-06  2.01e-04  4.11e-01  
 13  +4.1304e-01  +4.1941e-01  6.37e-03  1.23e-05  7.90e-04  2.87e-06  4.95e-05  8.87e-01  
 14  +4.1157e-01  +4.1367e-01  2.10e-03  4.04e-06  2.59e-04  1.02e-06  1.64e-05  8.14e-01  
 15  +4.1081e-01  +4.1083e-01  2.16e-05  4.16e-08  2.66e-06  1.05e-08  1.70e-07  9.90e-01  
 16  +4.1080e-01  +4.1080e-01  2.16e-07  4.16e-10  2.66e-08  1.05e-10  1.70e-09  9.90e-01  
 17  +4.1080e-01  +4.1080e-01  2.16e-09  4.16e-12  2.66e-10  1.05e-12  1.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1503ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:05 PM: Optimal value: 4.108e-01
(CVXPY) Aug 30 12:09:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.4108
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:05 PM: Your problem has 553 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 553
  constraints   = 1053
  nnz(P)        = 0
  nnz(A)        = 6088
  cones (total) = 1
    : Nonnegative = 1,  numel = 1053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0128e+02  5.01e+02  9.54e-01  3.14e+01  1.00e+00  1.01e+00   ------   
  1  +5.8794e-01  +1.0390e+02  1.03e+02  3.80e-01  1.85e+01  3.91e-03  5.34e-01  6.23e-01  
  2  +5.3693e-01  +1.3077e+01  1.25e+01  1.24e-01  7.59e+00  1.23e-02  2.29e-01  8.80e-01  
  3  +5.0496e-01  +2.7789e+00  2.27e+00  4.70e-02  2.82e+00  2.49e-05  2.06e-01  3.86e-01  
  4  +5.0133e-01  +1.2328e+00  7.31e-01  1.59e-02  9.87e-01  1.29e-05  1.06e-01  5.34e-01  
  5  +4.9893e-01  +1.8290e+00  1.33e+00  1.28e-02  8.14e-01  7.20e-05  3.92e-02  8.80e-01  
  6  +4.8552e-01  +1.1546e+00  6.69e-01  2.49e-03  1.62e-01  1.13e-04  7.68e-03  8.08e-01  
  7  +4.7460e-01  +9.3549e-01  4.61e-01  1.48e-03  9.56e-02  1.12e-04  4.68e-03  5.67e-01  
  8  +4.6458e-01  +8.2528e-01  3.61e-01  9.42e-04  6.07e-02  1.10e-04  2.97e-03  4.79e-01  
  9  +4.6101e-01  +7.9977e-01  3.39e-01  8.12e-04  5.23e-02  1.12e-04  2.56e-03  1.89e-01  
 10  +4.5643e-01  +6.9572e-01  2.39e-01  6.74e-04  4.32e-02  7.86e-05  2.28e-03  6.66e-01  
 11  +4.3080e-01  +5.4145e-01  1.11e-01  2.44e-04  1.56e-02  4.40e-05  8.86e-04  7.14e-01  
 12  +4.1326e-01  +4.5680e-01  4.35e-02  9.26e-05  5.90e-03  1.65e-05  3.73e-04  6.40e-01  
 13  +4.0343e-01  +4.1148e-01  8.04e-03  1.68e-05  1.07e-03  3.19e-06  7.29e-05  8.70e-01  
 14  +4.0104e-01  +4.0115e-01  1.14e-04  2.36e-07  1.50e-05  4.33e-08  1.05e-06  9.87e-01  
 15  +4.0100e-01  +4.0100e-01  1.14e-06  2.36e-09  1.50e-07  4.33e-10  1.05e-08  9.90e-01  
 16  +4.0100e-01  +4.0100e-01  1.14e-08  2.36e-11  1.50e-09  4.33e-12  1.05e-10  9.90e-01  
 17  +4.0100e-01  +4.0100e-01  1.14e-10  2.36e-13  1.50e-11  4.33e-14  1.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0357ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:05 PM: Optimal value: 4.010e-01
(CVXPY) Aug 30 12:09:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.4010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:05 PM: Your problem has 558 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 558
  constraints   = 1058
  nnz(P)        = 0
  nnz(A)        = 6205
  cones (total) = 1
    : Nonnegative = 1,  numel = 1058

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0128e+02  5.01e+02  9.55e-01  3.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.8738e-01  +1.0395e+02  1.03e+02  3.81e-01  1.85e+01  3.91e-03  5.34e-01  6.23e-01  
  2  +5.3645e-01  +1.2977e+01  1.24e+01  1.23e-01  7.52e+00  1.24e-02  2.27e-01  8.85e-01  
  3  +5.0486e-01  +2.7609e+00  2.26e+00  4.67e-02  2.80e+00  2.52e-05  2.04e-01  4.00e-01  
  4  +5.0130e-01  +1.2499e+00  7.49e-01  1.62e-02  1.01e+00  1.33e-05  1.03e-01  5.35e-01  
  5  +4.9699e-01  +2.0938e+00  1.60e+00  1.07e-02  6.87e-01  1.05e-04  3.13e-02  9.49e-01  
  6  +4.8432e-01  +1.3314e+00  8.47e-01  3.29e-03  2.13e-01  9.78e-05  1.00e-02  6.83e-01  
  7  +4.7026e-01  +9.0929e-01  4.39e-01  1.49e-03  9.55e-02  8.19e-05  4.80e-03  6.42e-01  
  8  +4.6296e-01  +8.2862e-01  3.66e-01  9.65e-04  6.21e-02  1.01e-04  3.04e-03  5.53e-01  
  9  +4.5928e-01  +7.6441e-01  3.05e-01  7.77e-04  4.99e-02  9.75e-05  2.48e-03  4.63e-01  
 10  +4.4219e-01  +6.3415e-01  1.92e-01  4.52e-04  2.90e-02  6.49e-05  1.55e-03  5.29e-01  
 11  +4.2088e-01  +4.9877e-01  7.79e-02  1.73e-04  1.10e-02  2.68e-05  6.56e-04  6.91e-01  
 12  +4.1122e-01  +4.5011e-01  3.89e-02  8.27e-05  5.26e-03  1.40e-05  3.35e-04  5.64e-01  
 13  +4.0292e-01  +4.0926e-01  6.34e-03  1.33e-05  8.44e-04  2.53e-06  5.76e-05  9.09e-01  
 14  +4.0104e-01  +4.0115e-01  1.13e-04  2.35e-07  1.49e-05  4.21e-08  1.04e-06  9.83e-01  
 15  +4.0100e-01  +4.0100e-01  1.13e-06  2.35e-09  1.49e-07  4.21e-10  1.04e-08  9.90e-01  
 16  +4.0100e-01  +4.0100e-01  1.13e-08  2.35e-11  1.49e-09  4.21e-12  1.04e-10  9.90e-01  
 17  +4.0100e-01  +4.0100e-01  1.13e-10  2.35e-13  1.49e-11  4.21e-14  1.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8367ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:05 PM: Optimal value: 4.010e-01
(CVXPY) Aug 30 12:09:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:05 PM: Solver (including time spent in interface) took 1.560e-02 seconds
Iteration: 6, Objective: 0.4010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:05 PM: Your problem has 560 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 560
  constraints   = 1060
  nnz(P)        = 0
  nnz(A)        = 6268
  cones (total) = 1
    : Nonnegative = 1,  numel = 1060

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0127e+02  5.01e+02  9.55e-01  3.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.8718e-01  +1.0401e+02  1.03e+02  3.82e-01  1.85e+01  3.90e-03  5.35e-01  6.22e-01  
  2  +5.3629e-01  +1.2945e+01  1.24e+01  1.23e-01  7.51e+00  1.24e-02  2.27e-01  8.86e-01  
  3  +5.0485e-01  +2.7612e+00  2.26e+00  4.67e-02  2.81e+00  2.53e-05  2.03e-01  4.04e-01  
  4  +5.0121e-01  +1.2146e+00  7.13e-01  1.55e-02  9.62e-01  1.31e-05  9.91e-02  5.56e-01  
  5  +4.9638e-01  +2.5838e+00  2.09e+00  1.10e-02  7.09e-01  1.38e-04  3.16e-02  9.66e-01  
  6  +4.8372e-01  +1.4678e+00  9.84e-01  3.69e-03  2.38e-01  9.27e-05  1.12e-02  6.48e-01  
  7  +4.6922e-01  +9.1878e-01  4.50e-01  1.50e-03  9.66e-02  8.21e-05  4.86e-03  6.92e-01  
  8  +4.6740e-01  +8.8358e-01  4.16e-01  1.23e-03  7.92e-02  1.01e-04  3.87e-03  4.02e-01  
  9  +4.5992e-01  +8.2200e-01  3.62e-01  9.05e-04  5.82e-02  1.03e-04  2.87e-03  3.26e-01  
 10  +4.5603e-01  +6.9864e-01  2.43e-01  7.12e-04  4.56e-02  8.29e-05  2.43e-03  7.80e-01  
 11  +4.4274e-01  +6.1905e-01  1.76e-01  4.52e-04  2.89e-02  6.39e-05  1.59e-03  4.15e-01  
 12  +4.1961e-01  +4.9085e-01  7.12e-02  1.60e-04  1.02e-02  2.46e-05  6.17e-04  6.59e-01  
 13  +4.1247e-01  +4.5489e-01  4.24e-02  9.13e-05  5.81e-03  1.59e-05  3.64e-04  5.03e-01  
 14  +4.0685e-01  +4.2478e-01  1.79e-02  3.80e-05  2.42e-03  8.66e-06  1.57e-04  9.90e-01  
 15  +4.0213e-01  +4.0555e-01  3.42e-03  7.19e-06  4.57e-04  1.63e-06  3.09e-05  8.41e-01  
 16  +4.0146e-01  +4.0282e-01  1.35e-03  2.84e-06  1.81e-04  6.20e-07  1.23e-05  7.73e-01  
 17  +4.0102e-01  +4.0108e-01  5.90e-05  1.23e-07  7.85e-06  2.73e-08  5.36e-07  9.59e-01  
 18  +4.0100e-01  +4.0100e-01  5.92e-07  1.24e-09  7.87e-08  2.73e-10  5.37e-09  9.90e-01  
 19  +4.0100e-01  +4.0100e-01  5.92e-09  1.24e-11  7.87e-10  2.74e-12  5.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.2941ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:05 PM: Optimal value: 4.010e-01
(CVXPY) Aug 30 12:09:05 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:09:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.4010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:05 PM: Your problem has 570 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 570
  constraints   = 1070
  nnz(P)        = 0
  nnz(A)        = 6519
  cones (total) = 1
    : Nonnegative = 1,  numel = 1070

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0127e+02  5.01e+02  9.55e-01  3.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.8728e-01  +1.0406e+02  1.03e+02  3.83e-01  1.84e+01  3.90e-03  5.35e-01  6.22e-01  
  2  +5.3613e-01  +1.2910e+01  1.24e+01  1.23e-01  7.43e+00  1.25e-02  2.28e-01  8.87e-01  
  3  +5.0484e-01  +2.7585e+00  2.25e+00  4.69e-02  2.80e+00  2.55e-05  2.03e-01  4.06e-01  
  4  +5.0117e-01  +1.1990e+00  6.98e-01  1.52e-02  9.43e-01  1.30e-05  9.75e-02  5.64e-01  
  5  +4.9709e-01  +2.7194e+00  2.22e+00  1.19e-02  7.61e-01  1.41e-04  3.39e-02  9.63e-01  
  6  +4.8414e-01  +1.4575e+00  9.73e-01  3.61e-03  2.33e-01  9.33e-05  1.09e-02  6.79e-01  
  7  +4.7116e-01  +9.6232e-01  4.91e-01  1.60e-03  1.03e-01  9.80e-05  5.12e-03  6.92e-01  
  8  +4.6306e-01  +8.6376e-01  4.01e-01  1.09e-03  7.01e-02  1.02e-04  3.47e-03  4.33e-01  
  9  +4.5701e-01  +8.0911e-01  3.52e-01  8.55e-04  5.49e-02  1.02e-04  2.74e-03  2.90e-01  
 10  +4.5430e-01  +7.0121e-01  2.47e-01  6.71e-04  4.29e-02  9.42e-05  2.25e-03  7.66e-01  
 11  +4.3002e-01  +5.5353e-01  1.24e-01  2.79e-04  1.78e-02  4.87e-05  1.01e-03  5.97e-01  
 12  +4.1782e-01  +4.8569e-01  6.79e-02  1.48e-04  9.44e-03  2.76e-05  5.73e-04  5.11e-01  
 13  +4.1277e-01  +4.6040e-01  4.76e-02  1.01e-04  6.41e-03  2.01e-05  3.99e-04  3.72e-01  
 14  +4.0593e-01  +4.2340e-01  1.75e-02  3.65e-05  2.32e-03  8.83e-06  1.51e-04  9.90e-01  
 15  +4.0047e-01  +4.0128e-01  8.09e-04  1.68e-06  1.06e-04  3.71e-07  7.24e-06  9.67e-01  
 16  +4.0020e-01  +4.0021e-01  8.14e-06  1.69e-08  1.07e-06  3.73e-09  7.29e-08  9.90e-01  
 17  +4.0020e-01  +4.0020e-01  8.14e-08  1.69e-10  1.07e-08  3.73e-11  7.30e-10  9.90e-01  
 18  +4.0020e-01  +4.0020e-01  8.14e-10  1.69e-12  1.07e-10  3.73e-13  7.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.362ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:05 PM: Optimal value: 4.002e-01
(CVXPY) Aug 30 12:09:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:05 PM: Solver (including time spent in interface) took 1.559e-02 seconds
Iteration: 8, Objective: 0.4002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:05 PM: Your problem has 572 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 572
  constraints   = 1072
  nnz(P)        = 0
  nnz(A)        = 6558
  cones (total) = 1
    : Nonnegative = 1,  numel = 1072

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0127e+02  5.01e+02  9.55e-01  3.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.8708e-01  +1.0413e+02  1.04e+02  3.84e-01  1.84e+01  3.90e-03  5.36e-01  6.22e-01  
  2  +5.3602e-01  +1.2891e+01  1.24e+01  1.23e-01  7.41e+00  1.25e-02  2.28e-01  8.89e-01  
  3  +5.0484e-01  +2.7606e+00  2.26e+00  4.69e-02  2.80e+00  2.56e-05  2.03e-01  4.09e-01  
  4  +5.0115e-01  +1.1907e+00  6.90e-01  1.50e-02  9.32e-01  1.30e-05  9.63e-02  5.70e-01  
  5  +4.9738e-01  +2.7611e+00  2.26e+00  1.22e-02  7.80e-01  1.41e-04  3.48e-02  9.60e-01  
  6  +4.8462e-01  +1.4729e+00  9.88e-01  3.70e-03  2.39e-01  9.37e-05  1.12e-02  6.80e-01  
  7  +4.7310e-01  +1.0367e+00  5.64e-01  1.84e-03  1.18e-01  1.04e-04  5.80e-03  6.36e-01  
  8  +4.6018e-01  +8.6293e-01  4.03e-01  1.03e-03  6.62e-02  1.03e-04  3.29e-03  5.27e-01  
  9  +4.5547e-01  +8.0917e-01  3.54e-01  8.46e-04  5.42e-02  1.03e-04  2.72e-03  2.83e-01  
 10  +4.5173e-01  +6.8607e-01  2.34e-01  6.10e-04  3.91e-02  1.01e-04  2.06e-03  8.70e-01  
 11  +4.2647e-01  +5.3180e-01  1.05e-01  2.37e-04  1.51e-02  4.28e-05  8.78e-04  6.28e-01  
 12  +4.1764e-01  +4.8500e-01  6.74e-02  1.46e-04  9.31e-03  2.85e-05  5.65e-04  4.29e-01  
 13  +4.1055e-01  +4.4959e-01  3.90e-02  8.23e-05  5.23e-03  1.70e-05  3.30e-04  4.79e-01  
 14  +4.0245e-01  +4.0960e-01  7.15e-03  1.49e-05  9.44e-04  3.37e-06  6.33e-05  9.49e-01  
 15  +4.0097e-01  +4.0354e-01  2.57e-03  5.32e-06  3.38e-04  1.20e-06  2.31e-05  7.67e-01  
 16  +4.0013e-01  +4.0023e-01  9.92e-05  2.05e-07  1.30e-05  4.51e-08  9.00e-07  9.66e-01  
 17  +4.0010e-01  +4.0010e-01  9.93e-07  2.05e-09  1.30e-07  4.51e-10  9.01e-09  9.90e-01  
 18  +4.0010e-01  +4.0010e-01  9.93e-09  2.05e-11  1.30e-09  4.51e-12  9.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8621ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:05 PM: Optimal value: 4.001e-01
(CVXPY) Aug 30 12:09:05 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:09:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:05 PM: Your problem has 575 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 575
  constraints   = 1075
  nnz(P)        = 0
  nnz(A)        = 6604
  cones (total) = 1
    : Nonnegative = 1,  numel = 1075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0130e+02  5.01e+02  9.55e-01  3.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.8700e-01  +1.0412e+02  1.04e+02  3.84e-01  1.84e+01  3.91e-03  5.35e-01  6.22e-01  
  2  +5.3586e-01  +1.2856e+01  1.23e+01  1.23e-01  7.36e+00  1.25e-02  2.27e-01  8.90e-01  
  3  +5.0478e-01  +2.7470e+00  2.24e+00  4.67e-02  2.78e+00  2.57e-05  2.02e-01  4.17e-01  
  4  +5.0110e-01  +1.1813e+00  6.80e-01  1.48e-02  9.18e-01  1.30e-05  9.34e-02  5.79e-01  
  5  +4.9702e-01  +2.6814e+00  2.18e+00  1.17e-02  7.45e-01  1.39e-04  3.31e-02  9.58e-01  
  6  +4.8452e-01  +1.4986e+00  1.01e+00  3.85e-03  2.48e-01  9.22e-05  1.16e-02  6.51e-01  
  7  +4.7325e-01  +1.0903e+00  6.17e-01  2.08e-03  1.34e-01  9.05e-05  6.56e-03  5.35e-01  
  8  +4.6446e-01  +9.5270e-01  4.88e-01  1.35e-03  8.69e-02  1.00e-04  4.29e-03  4.42e-01  
  9  +4.5347e-01  +8.3990e-01  3.86e-01  8.97e-04  5.75e-02  9.54e-05  2.89e-03  3.69e-01  
 10  +4.5497e-01  +7.2278e-01  2.68e-01  7.52e-04  4.81e-02  9.41e-05  2.58e-03  6.31e-01  
 11  +4.4314e-01  +6.3601e-01  1.93e-01  4.98e-04  3.18e-02  6.96e-05  1.75e-03  4.12e-01  
 12  +4.1784e-01  +4.8274e-01  6.49e-02  1.45e-04  9.18e-03  2.30e-05  5.58e-04  7.43e-01  
 13  +4.1166e-01  +4.5288e-01  4.12e-02  8.74e-05  5.55e-03  1.64e-05  3.48e-04  5.48e-01  
 14  +4.0312e-01  +4.1256e-01  9.44e-03  1.97e-05  1.25e-03  4.19e-06  8.35e-05  9.15e-01  
 15  +4.0094e-01  +4.0346e-01  2.51e-03  5.22e-06  3.31e-04  1.13e-06  2.26e-05  8.28e-01  
 16  +4.0014e-01  +4.0024e-01  1.06e-04  2.18e-07  1.38e-05  4.62e-08  9.60e-07  9.63e-01  
 17  +4.0010e-01  +4.0010e-01  1.06e-06  2.19e-09  1.39e-07  4.63e-10  9.61e-09  9.90e-01  
 18  +4.0010e-01  +4.0010e-01  1.06e-08  2.19e-11  1.39e-09  4.63e-12  9.61e-11  9.90e-01  
 19  +4.0010e-01  +4.0010e-01  1.06e-10  2.19e-13  1.39e-11  4.64e-14  9.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8896ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:05 PM: Optimal value: 4.001e-01
(CVXPY) Aug 30 12:09:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:05 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 10, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:05 PM: Your problem has 582 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 582
  constraints   = 1082
  nnz(P)        = 0
  nnz(A)        = 6803
  cones (total) = 1
    : Nonnegative = 1,  numel = 1082

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0122e+02  5.01e+02  9.55e-01  3.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.8673e-01  +1.0414e+02  1.04e+02  3.85e-01  1.83e+01  3.90e-03  5.35e-01  6.22e-01  
  2  +5.3577e-01  +1.2841e+01  1.23e+01  1.23e-01  7.29e+00  1.26e-02  2.26e-01  8.92e-01  
  3  +5.0478e-01  +2.7470e+00  2.24e+00  4.68e-02  2.78e+00  2.58e-05  2.01e-01  4.20e-01  
  4  +5.0107e-01  +1.1680e+00  6.67e-01  1.45e-02  9.01e-01  1.29e-05  9.16e-02  5.87e-01  
  5  +4.9718e-01  +2.7735e+00  2.28e+00  1.19e-02  7.58e-01  1.43e-04  3.37e-02  9.53e-01  
  6  +4.8446e-01  +1.5160e+00  1.03e+00  3.80e-03  2.45e-01  9.51e-05  1.14e-02  6.63e-01  
  7  +4.6879e-01  +9.6068e-01  4.92e-01  1.59e-03  1.02e-01  7.67e-05  5.09e-03  6.44e-01  
  8  +4.6277e-01  +9.0690e-01  4.44e-01  1.17e-03  7.49e-02  9.78e-05  3.67e-03  3.98e-01  
  9  +4.5951e-01  +8.7100e-01  4.11e-01  1.00e-03  6.44e-02  1.05e-04  3.17e-03  2.27e-01  
 10  +4.5873e-01  +7.5561e-01  2.97e-01  8.62e-04  5.51e-02  1.00e-04  2.89e-03  6.21e-01  
 11  +4.4278e-01  +6.3825e-01  1.95e-01  5.02e-04  3.20e-02  6.83e-05  1.75e-03  4.66e-01  
 12  +4.1682e-01  +4.7992e-01  6.31e-02  1.42e-04  9.03e-03  2.08e-05  5.49e-04  7.54e-01  
 13  +4.1463e-01  +4.6977e-01  5.51e-02  1.20e-04  7.64e-03  1.98e-05  4.66e-04  2.91e-01  
 14  +4.0747e-01  +4.3689e-01  2.94e-02  6.23e-05  3.95e-03  1.09e-05  2.52e-04  5.34e-01  
 15  +4.0092e-01  +4.0662e-01  5.70e-03  1.19e-05  7.56e-04  2.20e-06  5.08e-05  8.44e-01  
 16  +3.9972e-01  +4.0137e-01  1.65e-03  3.44e-06  2.18e-04  6.55e-07  1.49e-05  7.61e-01  
 17  +3.9921e-01  +3.9926e-01  4.48e-05  9.32e-08  5.91e-06  1.77e-08  4.08e-07  9.77e-01  
 18  +3.9920e-01  +3.9920e-01  4.48e-07  9.32e-10  5.91e-08  1.77e-10  4.08e-09  9.90e-01  
 19  +3.9920e-01  +3.9920e-01  4.48e-09  9.32e-12  5.91e-10  1.77e-12  4.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.6898ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:05 PM: Optimal value: 3.992e-01
(CVXPY) Aug 30 12:09:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:09:05 PM: Solver (including time spent in interface) took 1.561e-02 seconds
FULL MODEL:
  Accruacy: 0.569
  Our objective: 0.13799999999999996

IF 
    (x3 = 1 AND x5 = 1 AND x2 = 0)                                  <-- (term's our objective: 0.020000000000000018)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.05199999999999996)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x1 = 0 AND x5 = 0) <-- (term's our objective: 0.012000000000000021)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.01600000000000002)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x3 = 0) <-- (term's our objective: 0.012000000000000014)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x5 = 0) <-- (term's our objective: 0.014000000000000014)
 OR (x1 = 1 AND x3 = 1 AND x0 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.012000000000000023)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.05199999999999996
    Its accruacy: 0.526
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.05199999999999996
  Highest accruacy: 0.526
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

