Command:
python test_script.py -s smallest_subclass -d 6 -n 10 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 6.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:07 PM: Your problem has 18 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:07 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 18
  constraints   = 23
  nnz(P)        = 0
  nnz(A)        = 58
  cones (total) = 1
    : Nonnegative = 1,  numel = 23

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5270e-01  +5.9561e+00  5.50e+00  7.45e-01  2.54e+00  1.00e+00  1.29e+00   ------   
  1  +5.1073e-01  +1.3348e+00  8.24e-01  2.86e-01  1.19e+00  3.70e-03  6.33e-01  6.80e-01  
  2  +3.6612e-01  +5.1227e-01  1.46e-01  5.23e-02  2.47e-01  1.17e-02  1.81e-01  8.67e-01  
  3  +3.0659e-01  +3.2919e-01  2.26e-02  6.79e-03  3.35e-02  1.64e-03  3.17e-02  9.00e-01  
  4  +3.0022e-01  +3.0055e-01  3.34e-04  1.00e-04  4.97e-04  2.36e-05  4.89e-04  9.85e-01  
  5  +3.0011e-01  +3.0013e-01  2.34e-05  6.81e-06  3.38e-05  1.29e-06  3.65e-05  9.34e-01  
  6  +3.0010e-01  +3.0010e-01  2.48e-07  7.05e-08  3.52e-07  1.31e-08  3.94e-07  9.90e-01  
  7  +3.0010e-01  +3.0010e-01  2.48e-09  7.04e-10  3.52e-09  1.31e-10  3.94e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 111.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:07 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:07 PM: Optimal value: 3.001e-01
(CVXPY) Aug 30 12:08:07 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:07 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:07 PM: Your problem has 28 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:07 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 28
  constraints   = 33
  nnz(P)        = 0
  nnz(A)        = 92
  cones (total) = 1
    : Nonnegative = 1,  numel = 33

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.5133e-01  +6.1034e+00  5.75e+00  7.85e-01  2.76e+00  1.00e+00  1.31e+00   ------   
  1  +2.4587e-01  +1.1018e+00  8.56e-01  3.01e-01  1.14e+00  4.07e-03  5.76e-01  6.99e-01  
  2  +1.4156e-01  +2.8297e-01  1.41e-01  5.51e-02  2.46e-01  9.99e-03  1.56e-01  8.54e-01  
  3  +1.0403e-01  +1.2032e-01  1.63e-02  5.84e-03  2.76e-02  1.22e-03  1.91e-02  8.88e-01  
  4  +1.0028e-01  +1.0066e-01  3.74e-04  1.37e-04  6.42e-04  2.46e-05  4.55e-04  9.76e-01  
  5  +1.0021e-01  +1.0029e-01  7.94e-05  3.06e-05  1.38e-04  4.50e-06  1.08e-04  8.07e-01  
  6  +1.0020e-01  +1.0020e-01  1.15e-06  4.48e-07  2.01e-06  6.13e-08  1.59e-06  9.87e-01  
  7  +1.0020e-01  +1.0020e-01  1.15e-08  4.48e-09  2.01e-08  6.13e-10  1.59e-08  9.90e-01  
  8  +1.0020e-01  +1.0020e-01  1.15e-10  4.48e-11  2.01e-10  6.13e-12  1.59e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:07 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:07 PM: Optimal value: 1.002e-01
(CVXPY) Aug 30 12:08:07 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:07 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:07 PM: Your problem has 35 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:07 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 35
  constraints   = 40
  nnz(P)        = 0
  nnz(A)        = 112
  cones (total) = 1
    : Nonnegative = 1,  numel = 40

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.7721e-01  +6.1977e+00  5.92e+00  8.02e-01  2.79e+00  1.00e+00  1.29e+00   ------   
  1  +8.9027e-02  +1.0095e+00  9.21e-01  3.24e-01  1.17e+00  4.18e-03  5.75e-01  6.84e-01  
  2  +1.8599e-02  +1.3774e-01  1.19e-01  5.06e-02  2.18e-01  1.07e-02  1.30e-01  9.16e-01  
  3  +1.0725e-03  +5.5741e-03  4.50e-03  1.92e-03  8.48e-03  4.01e-04  5.41e-03  9.64e-01  
  4  +2.3839e-04  +3.3767e-04  9.93e-05  4.60e-05  1.99e-04  3.94e-06  1.30e-04  9.76e-01  
  5  +2.0302e-04  +2.0977e-04  6.75e-06  3.62e-06  1.37e-05  2.64e-07  1.16e-05  9.38e-01  
  6  +2.0003e-04  +2.0011e-04  7.35e-08  3.94e-08  1.49e-07  2.86e-09  1.30e-07  9.89e-01  
  7  +2.0000e-04  +2.0000e-04  7.35e-10  3.93e-10  1.49e-09  2.86e-11  1.30e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 99.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:07 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:07 PM: Optimal value: 2.000e-04
(CVXPY) Aug 30 12:08:07 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:07 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x2 = 1 AND x4 = 0)                       <-- (term's our objective: 0.4)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

