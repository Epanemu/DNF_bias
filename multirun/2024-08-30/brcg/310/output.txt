Command:
python test_script.py -s smallest_subclass -d 8 -n 10000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0048
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 8.

Computed total variation: 0.1222
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:16 PM: Your problem has 5017 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:16 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:16 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:16 PM: Finished problem compilation (took 1.922e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5017
  constraints   = 10017
  nnz(P)        = 0
  nnz(A)        = 55017
  cones (total) = 1
    : Nonnegative = 1,  numel = 10017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.11e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +1.0695e+03  1.07e+03  4.19e-01  7.07e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3486e-01  +1.2656e+02  1.26e+02  1.63e-01  3.53e+01  1.47e-02  2.66e-01  9.00e-01  
  3  +5.0935e-01  +3.2821e+01  3.23e+01  1.22e-01  2.62e+01  3.96e-05  2.53e-01  2.13e-01  
  4  +5.0088e-01  +2.7239e+00  2.22e+00  1.51e-02  3.28e+00  5.38e-06  1.65e-01  6.34e-01  
  5  +5.0009e-01  +8.3961e-01  3.40e-01  2.28e-03  5.05e-01  2.83e-05  9.08e-02  9.90e-01  
  6  +5.0001e-01  +5.4478e-01  4.48e-02  2.99e-04  6.65e-02  5.59e-06  1.54e-02  8.45e-01  
  7  +5.0000e-01  +5.4101e-01  4.10e-02  2.73e-04  6.06e-02  7.81e-06  6.98e-03  6.54e-01  
  8  +4.9988e-01  +5.3272e-01  3.28e-02  1.14e-04  2.55e-02  7.30e-05  4.59e-04  9.57e-01  
  9  +4.9805e-01  +5.2860e-01  3.05e-02  9.10e-06  2.03e-03  1.02e-03  2.87e-05  9.38e-01  
 10  +4.9661e-01  +5.1979e-01  2.32e-02  6.87e-06  1.53e-03  5.70e-04  2.23e-05  3.43e-01  
 11  +4.9399e-01  +5.0588e-01  1.19e-02  3.15e-06  7.05e-04  9.07e-06  1.10e-05  8.42e-01  
 12  +4.9173e-01  +4.9674e-01  5.01e-03  1.12e-06  2.50e-04  2.30e-06  4.21e-06  7.54e-01  
 13  +4.9055e-01  +4.9211e-01  1.56e-03  3.21e-07  7.17e-05  7.61e-08  1.27e-06  9.90e-01  
 14  +4.9001e-01  +4.9005e-01  3.52e-05  7.05e-09  1.57e-06  1.66e-09  2.87e-08  9.83e-01  
 15  +4.9000e-01  +4.9000e-01  3.52e-07  7.04e-11  1.57e-08  1.66e-11  2.87e-10  9.90e-01  
 16  +4.9000e-01  +4.9000e-01  3.53e-09  7.06e-13  1.58e-10  1.79e-13  3.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.6038ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:16 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:16 PM: Optimal value: 4.900e-01
(CVXPY) Aug 30 12:19:16 PM: Compilation took 1.922e-02 seconds
(CVXPY) Aug 30 12:19:16 PM: Solver (including time spent in interface) took 5.713e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4900
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:16 PM: Your problem has 5027 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:16 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:16 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:16 PM: Finished problem compilation (took 1.926e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5027
  constraints   = 10027
  nnz(P)        = 0
  nnz(A)        = 59058
  cones (total) = 1
    : Nonnegative = 1,  numel = 10027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.12e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +1.0697e+03  1.07e+03  4.19e-01  7.12e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3479e-01  +1.2642e+02  1.26e+02  1.63e-01  3.55e+01  1.47e-02  2.66e-01  9.00e-01  
  3  +5.0933e-01  +3.2771e+01  3.23e+01  1.22e-01  2.64e+01  3.96e-05  2.53e-01  2.14e-01  
  4  +5.0088e-01  +2.7159e+00  2.22e+00  1.50e-02  3.30e+00  5.40e-06  1.64e-01  6.38e-01  
  5  +5.0009e-01  +8.4846e-01  3.48e-01  2.34e-03  5.22e-01  2.84e-05  8.91e-02  9.90e-01  
  6  +5.0003e-01  +6.4802e-01  1.48e-01  9.90e-04  2.21e-01  1.39e-05  4.17e-02  5.75e-01  
  7  +5.0002e-01  +5.9108e-01  9.11e-02  6.08e-04  1.36e-01  1.08e-05  1.84e-02  6.53e-01  
  8  +5.0000e-01  +5.8270e-01  8.27e-02  5.41e-04  1.21e-01  1.84e-05  7.67e-03  6.09e-01  
  9  +4.9908e-01  +5.6648e-01  6.74e-02  5.43e-05  1.22e-02  5.20e-04  1.83e-04  9.88e-01  
 10  +4.9767e-01  +5.5994e-01  6.23e-02  2.47e-05  5.56e-03  9.69e-04  8.18e-05  5.72e-01  
 11  +4.9772e-01  +5.5982e-01  6.21e-02  2.47e-05  5.56e-03  9.38e-04  8.18e-05  2.41e-02  
 12  +4.9530e-01  +5.4276e-01  4.75e-02  1.50e-05  3.37e-03  7.35e-04  5.07e-05  4.69e-01  
 13  +4.9487e-01  +5.3959e-01  4.47e-02  1.37e-05  3.09e-03  6.19e-04  4.65e-05  1.67e-01  
 14  +4.9384e-01  +5.2973e-01  3.59e-02  1.06e-05  2.39e-03  1.02e-04  3.66e-05  7.03e-01  
 15  +4.9335e-01  +5.2698e-01  3.36e-02  1.03e-05  2.31e-03  5.98e-05  3.57e-05  2.87e-01  
 16  +4.8951e-01  +5.0651e-01  1.70e-02  4.46e-06  1.00e-03  1.71e-05  1.61e-05  7.11e-01  
 17  +4.8833e-01  +5.0046e-01  1.21e-02  2.87e-06  6.46e-04  6.54e-07  1.03e-05  9.90e-01  
 18  +4.8578e-01  +4.8811e-01  2.33e-03  5.18e-07  1.16e-04  1.32e-07  1.85e-06  8.87e-01  
 19  +4.8565e-01  +4.8779e-01  2.14e-03  3.63e-07  8.16e-05  1.60e-07  1.17e-06  4.42e-01  
 20  +4.8550e-01  +4.8729e-01  1.79e-03  3.53e-07  7.93e-05  1.08e-07  1.17e-06  2.29e-02  
 21  +4.8510e-01  +4.8609e-01  9.93e-04  1.65e-07  3.72e-05  6.66e-08  5.40e-07  5.72e-01  
 22  +4.8473e-01  +4.8479e-01  6.22e-05  1.02e-08  2.29e-06  4.31e-09  3.37e-08  9.73e-01  
 23  +4.8470e-01  +4.8470e-01  6.34e-07  1.03e-10  2.33e-08  4.39e-11  3.43e-10  9.90e-01  
 24  +4.8470e-01  +4.8470e-01  6.34e-09  1.03e-12  2.33e-10  4.39e-13  3.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 83.7723ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:16 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:16 PM: Optimal value: 4.847e-01
(CVXPY) Aug 30 12:19:16 PM: Compilation took 1.926e-02 seconds
(CVXPY) Aug 30 12:19:16 PM: Solver (including time spent in interface) took 8.954e-02 seconds
Iteration: 2, Objective: 0.4847
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:16 PM: Your problem has 5037 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:16 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:16 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:16 PM: Finished problem compilation (took 2.137e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5037
  constraints   = 10037
  nnz(P)        = 0
  nnz(A)        = 63163
  cones (total) = 1
    : Nonnegative = 1,  numel = 10037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.12e+02  1.00e+00  1.00e+00   ------   
  1  +5.8407e-01  +1.0698e+03  1.07e+03  4.19e-01  7.17e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3474e-01  +1.2632e+02  1.26e+02  1.63e-01  3.57e+01  1.47e-02  2.65e-01  9.01e-01  
  3  +5.0932e-01  +3.2742e+01  3.22e+01  1.22e-01  2.65e+01  3.97e-05  2.53e-01  2.15e-01  
  4  +5.0088e-01  +2.7153e+00  2.21e+00  1.50e-02  3.32e+00  5.41e-06  1.64e-01  6.39e-01  
  5  +5.0009e-01  +8.5393e-01  3.54e-01  2.38e-03  5.34e-01  2.85e-05  8.84e-02  9.90e-01  
  6  +5.0002e-01  +6.1646e-01  1.16e-01  7.79e-04  1.75e-01  1.23e-05  3.08e-02  7.11e-01  
  7  +5.0001e-01  +6.0020e-01  1.00e-01  6.65e-04  1.50e-01  1.80e-05  1.28e-02  6.57e-01  
  8  +4.9968e-01  +5.9278e-01  9.31e-02  2.26e-04  5.11e-02  1.95e-04  8.25e-04  9.90e-01  
  9  +4.9722e-01  +5.8309e-01  8.59e-02  3.14e-05  7.12e-03  1.40e-03  1.01e-04  8.78e-01  
 10  +4.9613e-01  +5.6244e-01  6.63e-02  2.53e-05  5.73e-03  4.53e-04  8.13e-05  5.28e-01  
 11  +4.9614e-01  +5.6205e-01  6.59e-02  2.51e-05  5.70e-03  4.28e-04  8.08e-05  4.64e-02  
 12  +4.9641e-01  +5.6009e-01  6.37e-02  2.37e-05  5.36e-03  2.04e-04  7.53e-05  4.75e-01  
 13  +4.9527e-01  +5.5374e-01  5.85e-02  1.84e-05  4.17e-03  1.82e-04  5.85e-05  3.33e-01  
 14  +4.9504e-01  +5.5261e-01  5.76e-02  1.83e-05  4.15e-03  1.65e-04  5.82e-05  6.02e-02  
 15  +4.9347e-01  +5.4526e-01  5.18e-02  1.43e-05  3.25e-03  1.49e-04  4.58e-05  2.73e-01  
 16  +4.9313e-01  +5.4336e-01  5.02e-02  1.40e-05  3.17e-03  1.11e-04  4.48e-05  1.90e-01  
 17  +4.8775e-01  +5.1992e-01  3.22e-02  6.94e-06  1.57e-03  6.86e-05  2.27e-05  5.78e-01  
 18  +4.8692e-01  +5.1577e-01  2.88e-02  6.25e-06  1.42e-03  2.92e-05  2.05e-05  4.88e-01  
 19  +4.8448e-01  +5.0539e-01  2.09e-02  4.17e-06  9.44e-04  3.13e-07  1.39e-05  9.54e-01  
 20  +4.7836e-01  +4.8234e-01  3.98e-03  7.28e-07  1.65e-04  1.23e-07  2.54e-06  8.92e-01  
 21  +4.7681e-01  +4.7709e-01  2.74e-04  4.83e-08  1.09e-05  1.08e-08  1.73e-07  9.54e-01  
 22  +4.7670e-01  +4.7670e-01  2.82e-06  4.97e-10  1.12e-07  1.12e-10  1.78e-09  9.90e-01  
 23  +4.7670e-01  +4.7670e-01  2.82e-08  4.97e-12  1.12e-09  1.12e-12  1.78e-11  9.90e-01  
 24  +4.7670e-01  +4.7670e-01  2.82e-10  4.98e-14  1.13e-11  1.14e-14  1.82e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 92.1493ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:16 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:16 PM: Optimal value: 4.767e-01
(CVXPY) Aug 30 12:19:16 PM: Compilation took 2.137e-02 seconds
(CVXPY) Aug 30 12:19:16 PM: Solver (including time spent in interface) took 9.818e-02 seconds
Iteration: 3, Objective: 0.4767
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:17 PM: Your problem has 5047 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:17 PM: Finished problem compilation (took 2.523e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5047
  constraints   = 10047
  nnz(P)        = 0
  nnz(A)        = 65953
  cones (total) = 1
    : Nonnegative = 1,  numel = 10047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8397e-01  +1.0700e+03  1.07e+03  4.20e-01  7.19e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3465e-01  +1.2614e+02  1.26e+02  1.63e-01  3.57e+01  1.48e-02  2.65e-01  9.02e-01  
  3  +5.0929e-01  +3.2689e+01  3.22e+01  1.22e-01  2.65e+01  3.97e-05  2.52e-01  2.17e-01  
  4  +5.0087e-01  +2.7100e+00  2.21e+00  1.50e-02  3.32e+00  5.43e-06  1.63e-01  6.42e-01  
  5  +5.0010e-01  +8.6732e-01  3.67e-01  2.47e-03  5.56e-01  2.89e-05  8.65e-02  9.90e-01  
  6  +5.0002e-01  +6.2605e-01  1.26e-01  8.43e-04  1.91e-01  1.48e-05  2.83e-02  7.21e-01  
  7  +5.0001e-01  +6.6550e-01  1.65e-01  1.07e-03  2.41e-01  3.17e-05  1.15e-02  8.25e-01  
  8  +4.9925e-01  +6.1801e-01  1.19e-01  1.46e-04  3.33e-02  4.37e-04  4.88e-04  9.63e-01  
  9  +4.9613e-01  +6.0122e-01  1.05e-01  3.27e-05  7.44e-03  1.67e-03  1.04e-04  7.97e-01  
 10  +4.9540e-01  +5.9184e-01  9.64e-02  3.07e-05  7.00e-03  1.26e-03  9.71e-05  1.79e-01  
 11  +4.9427e-01  +5.8204e-01  8.78e-02  2.64e-05  6.01e-03  9.86e-04  8.30e-05  2.63e-01  
 12  +4.9409e-01  +5.7841e-01  8.43e-02  2.57e-05  5.85e-03  7.48e-04  8.09e-05  1.78e-01  
 13  +4.9302e-01  +5.6915e-01  7.61e-02  2.25e-05  5.12e-03  3.82e-04  7.14e-05  4.26e-01  
 14  +4.9225e-01  +5.5939e-01  6.71e-02  1.92e-05  4.37e-03  3.96e-06  6.10e-05  8.25e-01  
 15  +4.8957e-01  +5.4725e-01  5.77e-02  1.46e-05  3.32e-03  3.47e-06  4.69e-05  2.97e-01  
 16  +4.8827e-01  +5.4100e-01  5.27e-02  1.38e-05  3.13e-03  2.49e-06  4.47e-05  4.09e-01  
 17  +4.8020e-01  +5.0608e-01  2.59e-02  5.51e-06  1.25e-03  1.27e-06  1.86e-05  6.32e-01  
 18  +4.7677e-01  +4.9057e-01  1.38e-02  2.76e-06  6.28e-04  7.25e-07  9.52e-06  9.90e-01  
 19  +4.7288e-01  +4.7564e-01  2.77e-03  5.37e-07  1.22e-04  1.36e-07  1.94e-06  8.27e-01  
 20  +4.7189e-01  +4.7212e-01  2.27e-04  4.25e-08  9.66e-06  1.23e-08  1.61e-07  9.90e-01  
 21  +4.7180e-01  +4.7180e-01  2.30e-06  4.30e-10  9.77e-08  1.25e-10  1.64e-09  9.90e-01  
 22  +4.7180e-01  +4.7180e-01  2.30e-08  4.30e-12  9.77e-10  1.25e-12  1.64e-11  9.90e-01  
 23  +4.7180e-01  +4.7180e-01  2.30e-10  4.30e-14  9.79e-12  1.34e-14  1.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 85.6874ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:17 PM: Optimal value: 4.718e-01
(CVXPY) Aug 30 12:19:17 PM: Compilation took 2.523e-02 seconds
(CVXPY) Aug 30 12:19:17 PM: Solver (including time spent in interface) took 9.186e-02 seconds
Iteration: 4, Objective: 0.4718
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:17 PM: Your problem has 5057 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:17 PM: Finished problem compilation (took 2.268e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5057
  constraints   = 10057
  nnz(P)        = 0
  nnz(A)        = 67745
  cones (total) = 1
    : Nonnegative = 1,  numel = 10057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8393e-01  +1.0700e+03  1.07e+03  4.20e-01  7.20e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3461e-01  +1.2607e+02  1.26e+02  1.63e-01  3.57e+01  1.48e-02  2.65e-01  9.02e-01  
  3  +5.0928e-01  +3.2668e+01  3.22e+01  1.22e-01  2.65e+01  3.98e-05  2.52e-01  2.18e-01  
  4  +5.0087e-01  +2.7100e+00  2.21e+00  1.50e-02  3.33e+00  5.44e-06  1.63e-01  6.43e-01  
  5  +5.0010e-01  +8.7075e-01  3.71e-01  2.49e-03  5.62e-01  2.90e-05  8.60e-02  9.90e-01  
  6  +5.0003e-01  +6.4424e-01  1.44e-01  9.65e-04  2.18e-01  1.62e-05  3.11e-02  7.01e-01  
  7  +4.9999e-01  +6.3885e-01  1.39e-01  8.90e-04  2.01e-01  3.63e-05  9.18e-03  8.03e-01  
  8  +4.9844e-01  +6.1832e-01  1.20e-01  8.73e-05  1.99e-02  8.80e-04  2.81e-04  9.77e-01  
  9  +4.9591e-01  +6.0200e-01  1.06e-01  3.87e-05  8.82e-03  1.54e-03  1.22e-04  5.97e-01  
 10  +4.9536e-01  +5.9316e-01  9.78e-02  3.37e-05  7.69e-03  1.08e-03  1.05e-04  3.44e-01  
 11  +4.9502e-01  +5.8600e-01  9.10e-02  3.00e-05  6.84e-03  6.28e-04  9.35e-05  4.16e-01  
 12  +4.9486e-01  +5.8440e-01  8.95e-02  2.97e-05  6.77e-03  5.53e-04  9.26e-05  9.04e-02  
 13  +4.9278e-01  +5.6797e-01  7.52e-02  2.21e-05  5.04e-03  6.21e-06  6.96e-05  9.06e-01  
 14  +4.9052e-01  +5.5742e-01  6.69e-02  1.82e-05  4.15e-03  4.98e-06  5.80e-05  3.14e-01  
 15  +4.8692e-01  +5.3905e-01  5.21e-02  1.37e-05  3.12e-03  1.28e-06  4.45e-05  9.90e-01  
 16  +4.7722e-01  +4.9908e-01  2.19e-02  4.65e-06  1.06e-03  7.97e-07  1.58e-05  8.83e-01  
 17  +4.7262e-01  +4.8157e-01  8.94e-03  1.75e-06  3.99e-04  3.76e-07  6.28e-06  7.48e-01  
 18  +4.7036e-01  +4.7312e-01  2.75e-03  5.19e-07  1.18e-04  1.56e-07  1.92e-06  9.90e-01  
 19  +4.6933e-01  +4.6941e-01  7.73e-05  1.44e-08  3.28e-06  4.24e-09  5.45e-08  9.76e-01  
 20  +4.6930e-01  +4.6930e-01  7.76e-07  1.45e-10  3.29e-08  4.25e-11  5.47e-10  9.90e-01  
 21  +4.6930e-01  +4.6930e-01  7.76e-09  1.45e-12  3.29e-10  4.25e-13  5.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 86.7896ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:17 PM: Optimal value: 4.693e-01
(CVXPY) Aug 30 12:19:17 PM: Compilation took 2.268e-02 seconds
(CVXPY) Aug 30 12:19:17 PM: Solver (including time spent in interface) took 9.439e-02 seconds
Iteration: 5, Objective: 0.4693
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:17 PM: Your problem has 5067 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:17 PM: Finished problem compilation (took 2.508e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5067
  constraints   = 10067
  nnz(P)        = 0
  nnz(A)        = 69364
  cones (total) = 1
    : Nonnegative = 1,  numel = 10067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8384e-01  +1.0702e+03  1.07e+03  4.20e-01  7.20e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3454e-01  +1.2593e+02  1.25e+02  1.63e-01  3.57e+01  1.48e-02  2.65e-01  9.03e-01  
  3  +5.0927e-01  +3.2632e+01  3.21e+01  1.22e-01  2.65e+01  3.98e-05  2.52e-01  2.19e-01  
  4  +5.0088e-01  +2.7122e+00  2.21e+00  1.51e-02  3.33e+00  5.45e-06  1.62e-01  6.44e-01  
  5  +5.0010e-01  +8.7857e-01  3.78e-01  2.55e-03  5.75e-01  2.93e-05  8.52e-02  9.90e-01  
  6  +5.0004e-01  +6.8056e-01  1.81e-01  1.21e-03  2.74e-01  1.94e-05  3.62e-02  6.24e-01  
  7  +5.0000e-01  +6.6779e-01  1.68e-01  1.07e-03  2.42e-01  3.86e-05  1.05e-02  8.57e-01  
  8  +4.9940e-01  +6.5432e-01  1.55e-01  2.61e-04  5.96e-02  3.63e-04  8.84e-04  9.19e-01  
  9  +4.9597e-01  +6.3455e-01  1.39e-01  4.60e-05  1.05e-02  1.86e-03  1.45e-04  8.41e-01  
 10  +4.9519e-01  +6.2189e-01  1.27e-01  4.12e-05  9.41e-03  1.38e-03  1.29e-04  2.47e-01  
 11  +4.9374e-01  +6.0171e-01  1.08e-01  3.33e-05  7.60e-03  7.73e-04  1.05e-04  4.22e-01  
 12  +4.9345e-01  +5.9797e-01  1.05e-01  3.22e-05  7.35e-03  6.65e-04  1.01e-04  1.17e-01  
 13  +4.9156e-01  +5.8284e-01  9.13e-02  2.56e-05  5.83e-03  4.04e-04  8.08e-05  4.32e-01  
 14  +4.9129e-01  +5.8124e-01  8.99e-02  2.55e-05  5.82e-03  3.87e-04  8.08e-05  1.17e-02  
 15  +4.8726e-01  +5.5574e-01  6.85e-02  1.82e-05  4.15e-03  7.82e-05  5.88e-05  6.88e-01  
 16  +4.8268e-01  +5.3473e-01  5.20e-02  1.26e-05  2.87e-03  5.42e-05  4.15e-05  3.50e-01  
 17  +4.7740e-01  +5.1038e-01  3.30e-02  7.24e-06  1.65e-03  1.74e-05  2.45e-05  6.64e-01  
 18  +4.7473e-01  +4.9804e-01  2.33e-02  4.75e-06  1.08e-03  8.63e-07  1.65e-05  9.83e-01  
 19  +4.7018e-01  +4.8040e-01  1.02e-02  1.99e-06  4.54e-04  3.90e-07  7.21e-06  6.12e-01  
 20  +4.6832e-01  +4.7310e-01  4.78e-03  9.13e-07  2.08e-04  2.71e-07  3.37e-06  9.90e-01  
 21  +4.6662e-01  +4.6695e-01  3.22e-04  6.07e-08  1.38e-05  1.76e-08  2.31e-07  9.41e-01  
 22  +4.6650e-01  +4.6650e-01  3.41e-06  6.41e-10  1.46e-07  1.85e-10  2.45e-09  9.90e-01  
 23  +4.6650e-01  +4.6650e-01  3.41e-08  6.41e-12  1.46e-09  1.85e-12  2.45e-11  9.90e-01  
 24  +4.6650e-01  +4.6650e-01  3.41e-10  6.41e-14  1.46e-11  1.89e-14  2.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97.5286ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:17 PM: Optimal value: 4.665e-01
(CVXPY) Aug 30 12:19:17 PM: Compilation took 2.508e-02 seconds
(CVXPY) Aug 30 12:19:17 PM: Solver (including time spent in interface) took 1.042e-01 seconds
Iteration: 6, Objective: 0.4665
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:17 PM: Your problem has 5077 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:17 PM: Finished problem compilation (took 2.452e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5077
  constraints   = 10077
  nnz(P)        = 0
  nnz(A)        = 70768
  cones (total) = 1
    : Nonnegative = 1,  numel = 10077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8380e-01  +1.0701e+03  1.07e+03  4.20e-01  7.20e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3450e-01  +1.2584e+02  1.25e+02  1.63e-01  3.56e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0926e-01  +3.2603e+01  3.21e+01  1.22e-01  2.65e+01  3.99e-05  2.52e-01  2.20e-01  
  4  +5.0087e-01  +2.7071e+00  2.21e+00  1.50e-02  3.33e+00  5.46e-06  1.61e-01  6.47e-01  
  5  +5.0010e-01  +8.8557e-01  3.85e-01  2.59e-03  5.86e-01  2.94e-05  8.40e-02  9.90e-01  
  6  +5.0004e-01  +6.8252e-01  1.82e-01  1.22e-03  2.77e-01  2.04e-05  3.17e-02  7.39e-01  
  7  +4.9997e-01  +6.8441e-01  1.84e-01  1.10e-03  2.50e-01  5.95e-05  7.85e-03  8.37e-01  
  8  +4.9769e-01  +6.6706e-01  1.69e-01  9.33e-05  2.13e-02  1.28e-03  2.99e-04  9.64e-01  
  9  +4.9416e-01  +6.2867e-01  1.35e-01  4.48e-05  1.02e-02  1.54e-03  1.43e-04  6.04e-01  
 10  +4.9347e-01  +6.1631e-01  1.23e-01  4.04e-05  9.21e-03  1.07e-03  1.28e-04  2.84e-01  
 11  +4.9257e-01  +6.0645e-01  1.14e-01  3.51e-05  8.01e-03  7.88e-04  1.10e-04  3.10e-01  
 12  +4.9141e-01  +5.9599e-01  1.05e-01  2.96e-05  6.76e-03  5.10e-04  9.30e-05  3.97e-01  
 13  +4.9103e-01  +5.9399e-01  1.03e-01  2.95e-05  6.74e-03  4.88e-04  9.30e-05  1.20e-02  
 14  +4.8487e-01  +5.6035e-01  7.55e-02  1.86e-05  4.25e-03  2.65e-04  6.01e-05  5.15e-01  
 15  +4.8081e-01  +5.3903e-01  5.82e-02  1.36e-05  3.10e-03  1.44e-04  4.47e-05  4.29e-01  
 16  +4.7801e-01  +5.2231e-01  4.43e-02  9.76e-06  2.22e-03  1.51e-06  3.25e-05  9.06e-01  
 17  +4.7259e-01  +4.9980e-01  2.72e-02  5.63e-06  1.28e-03  1.07e-06  1.93e-05  6.20e-01  
 18  +4.6751e-01  +4.7934e-01  1.18e-02  2.32e-06  5.30e-04  4.85e-07  8.20e-06  6.41e-01  
 19  +4.6532e-01  +4.7081e-01  5.49e-03  1.04e-06  2.38e-04  2.54e-07  3.74e-06  6.83e-01  
 20  +4.6362e-01  +4.6441e-01  7.97e-04  1.48e-07  3.36e-05  4.22e-08  5.40e-07  9.25e-01  
 21  +4.6331e-01  +4.6332e-01  1.33e-05  2.45e-09  5.58e-07  7.06e-10  9.03e-09  9.85e-01  
 22  +4.6330e-01  +4.6330e-01  1.34e-07  2.45e-11  5.58e-09  7.06e-12  9.03e-11  9.90e-01  
 23  +4.6330e-01  +4.6330e-01  1.34e-09  2.45e-13  5.58e-11  7.38e-14  9.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 101.2881ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:17 PM: Optimal value: 4.633e-01
(CVXPY) Aug 30 12:19:17 PM: Compilation took 2.452e-02 seconds
(CVXPY) Aug 30 12:19:17 PM: Solver (including time spent in interface) took 1.085e-01 seconds
Iteration: 7, Objective: 0.4633
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:17 PM: Your problem has 5087 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:17 PM: Finished problem compilation (took 2.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5087
  constraints   = 10087
  nnz(P)        = 0
  nnz(A)        = 72286
  cones (total) = 1
    : Nonnegative = 1,  numel = 10087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8376e-01  +1.0702e+03  1.07e+03  4.20e-01  7.20e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3446e-01  +1.2576e+02  1.25e+02  1.63e-01  3.56e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0924e-01  +3.2577e+01  3.21e+01  1.22e-01  2.64e+01  3.99e-05  2.51e-01  2.21e-01  
  4  +5.0087e-01  +2.7076e+00  2.21e+00  1.50e-02  3.33e+00  5.47e-06  1.61e-01  6.47e-01  
  5  +5.0011e-01  +9.0480e-01  4.05e-01  2.73e-03  6.16e-01  2.95e-05  8.53e-02  9.68e-01  
  6  +5.0004e-01  +7.0580e-01  2.06e-01  1.38e-03  3.12e-01  2.18e-05  3.40e-02  7.29e-01  
  7  +4.9998e-01  +6.9822e-01  1.98e-01  1.19e-03  2.69e-01  5.76e-05  8.47e-03  8.47e-01  
  8  +4.9779e-01  +6.7732e-01  1.80e-01  1.00e-04  2.29e-02  1.23e-03  3.19e-04  9.65e-01  
  9  +4.9442e-01  +6.4175e-01  1.47e-01  4.91e-05  1.12e-02  1.57e-03  1.56e-04  5.91e-01  
 10  +4.9345e-01  +6.2980e-01  1.36e-01  4.38e-05  1.00e-02  1.22e-03  1.38e-04  2.42e-01  
 11  +4.9163e-01  +6.1387e-01  1.22e-01  3.49e-05  7.97e-03  8.74e-04  1.10e-04  3.89e-01  
 12  +4.9054e-01  +6.0261e-01  1.12e-01  3.19e-05  7.28e-03  5.02e-04  1.01e-04  3.48e-01  
 13  +4.8297e-01  +5.5901e-01  7.60e-02  1.94e-05  4.41e-03  2.13e-04  6.33e-05  5.49e-01  
 14  +4.7865e-01  +5.3747e-01  5.88e-02  1.43e-05  3.25e-03  1.50e-04  4.75e-05  2.93e-01  
 15  +4.7222e-01  +5.0344e-01  3.12e-02  6.93e-06  1.58e-03  1.60e-06  2.37e-05  9.32e-01  
 16  +4.6904e-01  +4.8953e-01  2.05e-02  4.32e-06  9.83e-04  1.06e-06  1.50e-05  8.27e-01  
 17  +4.6660e-01  +4.7935e-01  1.27e-02  2.60e-06  5.92e-04  6.85e-07  9.16e-06  6.80e-01  
 18  +4.6340e-01  +4.6667e-01  3.28e-03  6.38e-07  1.45e-04  1.78e-07  2.34e-06  8.00e-01  
 19  +4.6243e-01  +4.6305e-01  6.17e-04  1.18e-07  2.68e-05  3.32e-08  4.45e-07  8.23e-01  
 20  +4.6220e-01  +4.6222e-01  1.29e-05  2.44e-09  5.56e-07  6.99e-10  9.33e-09  9.90e-01  
 21  +4.6220e-01  +4.6220e-01  1.29e-07  2.44e-11  5.56e-09  6.99e-12  9.34e-11  9.90e-01  
 22  +4.6220e-01  +4.6220e-01  1.29e-09  2.45e-13  5.57e-11  7.45e-14  9.92e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 94.0268ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:18 PM: Optimal value: 4.622e-01
(CVXPY) Aug 30 12:19:18 PM: Compilation took 2.688e-02 seconds
(CVXPY) Aug 30 12:19:18 PM: Solver (including time spent in interface) took 1.010e-01 seconds
Iteration: 8, Objective: 0.4622
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:18 PM: Your problem has 5097 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:18 PM: Finished problem compilation (took 2.723e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5097
  constraints   = 10097
  nnz(P)        = 0
  nnz(A)        = 73592
  cones (total) = 1
    : Nonnegative = 1,  numel = 10097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8370e-01  +1.0702e+03  1.07e+03  4.21e-01  7.20e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3442e-01  +1.2568e+02  1.25e+02  1.63e-01  3.55e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0924e-01  +3.2558e+01  3.20e+01  1.22e-01  2.64e+01  3.99e-05  2.51e-01  2.22e-01  
  4  +5.0087e-01  +2.7094e+00  2.21e+00  1.51e-02  3.34e+00  5.48e-06  1.61e-01  6.48e-01  
  5  +5.0011e-01  +9.1534e-01  4.15e-01  2.80e-03  6.32e-01  2.95e-05  8.56e-02  9.58e-01  
  6  +5.0005e-01  +7.3885e-01  2.39e-01  1.60e-03  3.63e-01  2.32e-05  3.92e-02  6.60e-01  
  7  +4.9996e-01  +6.7816e-01  1.78e-01  1.04e-03  2.37e-01  6.37e-05  6.91e-03  8.93e-01  
  8  +4.9761e-01  +6.6936e-01  1.72e-01  9.33e-05  2.13e-02  1.31e-03  2.95e-04  9.60e-01  
  9  +4.9408e-01  +6.3923e-01  1.45e-01  4.69e-05  1.07e-02  1.73e-03  1.48e-04  5.74e-01  
 10  +4.9368e-01  +6.3420e-01  1.41e-01  4.46e-05  1.02e-02  1.50e-03  1.40e-04  1.43e-01  
 11  +4.9264e-01  +6.2711e-01  1.34e-01  3.98e-05  9.10e-03  1.35e-03  1.25e-04  1.83e-01  
 12  +4.9203e-01  +6.1535e-01  1.23e-01  3.77e-05  8.61e-03  6.60e-04  1.19e-04  3.78e-01  
 13  +4.8906e-01  +5.9467e-01  1.06e-01  3.14e-05  7.18e-03  2.75e-04  1.01e-04  4.88e-01  
 14  +4.8022e-01  +5.4968e-01  6.95e-02  1.75e-05  3.99e-03  1.36e-04  5.83e-05  5.53e-01  
 15  +4.7752e-01  +5.3645e-01  5.89e-02  1.44e-05  3.27e-03  9.45e-05  4.85e-05  2.94e-01  
 16  +4.7064e-01  +5.0279e-01  3.21e-02  7.24e-06  1.65e-03  9.91e-07  2.53e-05  9.31e-01  
 17  +4.6817e-01  +4.9206e-01  2.39e-02  5.27e-06  1.20e-03  7.53e-07  1.86e-05  2.95e-01  
 18  +4.6694e-01  +4.8601e-01  1.91e-02  4.08e-06  9.31e-04  9.78e-07  1.46e-05  9.90e-01  
 19  +4.6293e-01  +4.6927e-01  6.35e-03  1.34e-06  3.05e-04  3.29e-07  4.92e-06  7.38e-01  
 20  +4.6104e-01  +4.6146e-01  4.22e-04  8.89e-08  2.02e-05  2.15e-08  3.33e-07  9.90e-01  
 21  +4.6090e-01  +4.6091e-01  5.43e-06  1.14e-09  2.61e-07  2.76e-10  4.29e-09  9.88e-01  
 22  +4.6090e-01  +4.6090e-01  5.43e-08  1.14e-11  2.61e-09  2.77e-12  4.30e-11  9.90e-01  
 23  +4.6090e-01  +4.6090e-01  5.47e-10  1.15e-13  2.63e-11  2.78e-14  4.32e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 99.9819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:18 PM: Optimal value: 4.609e-01
(CVXPY) Aug 30 12:19:18 PM: Compilation took 2.723e-02 seconds
(CVXPY) Aug 30 12:19:18 PM: Solver (including time spent in interface) took 1.083e-01 seconds
Iteration: 9, Objective: 0.4609
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:18 PM: Your problem has 5107 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:18 PM: Finished problem compilation (took 2.710e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5107
  constraints   = 10107
  nnz(P)        = 0
  nnz(A)        = 74866
  cones (total) = 1
    : Nonnegative = 1,  numel = 10107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8366e-01  +1.0702e+03  1.07e+03  4.21e-01  7.20e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3438e-01  +1.2559e+02  1.25e+02  1.63e-01  3.55e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0923e-01  +3.2533e+01  3.20e+01  1.22e-01  2.64e+01  3.99e-05  2.51e-01  2.22e-01  
  4  +5.0087e-01  +2.7089e+00  2.21e+00  1.51e-02  3.34e+00  5.48e-06  1.61e-01  6.49e-01  
  5  +5.0011e-01  +8.9901e-01  3.99e-01  2.69e-03  6.08e-01  2.99e-05  8.26e-02  9.90e-01  
  6  +5.0004e-01  +7.1899e-01  2.19e-01  1.47e-03  3.32e-01  2.50e-05  3.21e-02  7.38e-01  
  7  +4.9992e-01  +7.1394e-01  2.14e-01  1.14e-03  2.60e-01  9.04e-05  6.27e-03  8.71e-01  
  8  +4.9722e-01  +6.9846e-01  2.01e-01  1.02e-04  2.33e-02  1.52e-03  3.23e-04  9.49e-01  
  9  +4.9464e-01  +6.6753e-01  1.73e-01  6.44e-05  1.47e-02  1.60e-03  2.04e-04  4.40e-01  
 10  +4.9334e-01  +6.5018e-01  1.57e-01  4.94e-05  1.13e-02  1.24e-03  1.56e-04  4.29e-01  
 11  +4.9294e-01  +6.4052e-01  1.48e-01  4.71e-05  1.08e-02  9.03e-04  1.48e-04  2.11e-01  
 12  +4.9033e-01  +6.1720e-01  1.27e-01  3.87e-05  8.84e-03  5.02e-04  1.24e-04  4.07e-01  
 13  +4.7926e-01  +5.5332e-01  7.41e-02  1.82e-05  4.15e-03  1.82e-04  6.05e-05  6.89e-01  
 14  +4.7262e-01  +5.2071e-01  4.81e-02  1.10e-05  2.51e-03  7.48e-05  3.78e-05  5.63e-01  
 15  +4.7044e-01  +5.1072e-01  4.03e-02  8.95e-06  2.04e-03  4.83e-05  3.09e-05  3.62e-01  
 16  +4.6711e-01  +4.9578e-01  2.87e-02  6.13e-06  1.40e-03  2.63e-05  2.16e-05  4.67e-01  
 17  +4.6541e-01  +4.8738e-01  2.20e-02  4.50e-06  1.03e-03  1.51e-06  1.60e-05  9.90e-01  
 18  +4.6173e-01  +4.7274e-01  1.10e-02  2.19e-06  4.98e-04  7.44e-07  8.04e-06  5.49e-01  
 19  +4.6074e-01  +4.6862e-01  7.88e-03  1.56e-06  3.55e-04  4.70e-07  5.77e-06  7.54e-01  
 20  +4.5841e-01  +4.5980e-01  1.39e-03  2.69e-07  6.13e-05  8.16e-08  1.03e-06  8.37e-01  
 21  +4.5791e-01  +4.5793e-01  2.03e-05  3.89e-09  8.86e-07  1.13e-09  1.51e-08  9.90e-01  
 22  +4.5790e-01  +4.5790e-01  2.03e-07  3.89e-11  8.86e-09  1.13e-11  1.51e-10  9.90e-01  
 23  +4.5790e-01  +4.5790e-01  2.03e-09  3.89e-13  8.87e-11  1.16e-13  1.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 103.1339ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:18 PM: Optimal value: 4.579e-01
(CVXPY) Aug 30 12:19:18 PM: Compilation took 2.710e-02 seconds
(CVXPY) Aug 30 12:19:18 PM: Solver (including time spent in interface) took 1.101e-01 seconds
Iteration: 10, Objective: 0.4579
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:18 PM: Your problem has 5117 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:18 PM: Finished problem compilation (took 2.762e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5117
  constraints   = 10117
  nnz(P)        = 0
  nnz(A)        = 75803
  cones (total) = 1
    : Nonnegative = 1,  numel = 10117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8363e-01  +1.0703e+03  1.07e+03  4.21e-01  7.20e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3433e-01  +1.2549e+02  1.25e+02  1.63e-01  3.54e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0922e-01  +3.2509e+01  3.20e+01  1.22e-01  2.63e+01  4.00e-05  2.51e-01  2.23e-01  
  4  +5.0087e-01  +2.7113e+00  2.21e+00  1.51e-02  3.34e+00  5.48e-06  1.60e-01  6.49e-01  
  5  +5.0011e-01  +9.1255e-01  4.12e-01  2.78e-03  6.29e-01  3.00e-05  8.34e-02  9.76e-01  
  6  +5.0005e-01  +7.3624e-01  2.36e-01  1.58e-03  3.59e-01  2.57e-05  3.48e-02  6.86e-01  
  7  +4.9989e-01  +7.1699e-01  2.17e-01  1.08e-03  2.45e-01  1.06e-04  5.33e-03  9.24e-01  
  8  +4.9709e-01  +7.0218e-01  2.05e-01  9.96e-05  2.28e-02  1.57e-03  3.15e-04  9.41e-01  
  9  +4.9329e-01  +6.5863e-01  1.65e-01  5.36e-05  1.22e-02  1.67e-03  1.69e-04  5.57e-01  
 10  +4.9286e-01  +6.4926e-01  1.56e-01  4.93e-05  1.13e-02  1.28e-03  1.55e-04  2.44e-01  
 11  +4.9254e-01  +6.3803e-01  1.45e-01  4.75e-05  1.09e-02  7.54e-04  1.51e-04  2.80e-01  
 12  +4.9072e-01  +6.2207e-01  1.31e-01  4.23e-05  9.66e-03  4.54e-04  1.35e-04  3.38e-01  
 13  +4.8096e-01  +5.6772e-01  8.68e-02  2.21e-05  5.05e-03  2.76e-04  7.36e-05  5.45e-01  
 14  +4.7603e-01  +5.4291e-01  6.69e-02  1.62e-05  3.70e-03  1.42e-04  5.55e-05  4.44e-01  
 15  +4.7217e-01  +5.2484e-01  5.27e-02  1.22e-05  2.78e-03  8.74e-05  4.25e-05  3.77e-01  
 16  +4.6885e-01  +5.0778e-01  3.89e-02  8.57e-06  1.95e-03  9.06e-07  3.04e-05  9.57e-01  
 17  +4.6322e-01  +4.8423e-01  2.10e-02  4.44e-06  1.01e-03  5.61e-07  1.64e-05  5.38e-01  
 18  +4.5878e-01  +4.6546e-01  6.68e-03  1.37e-06  3.12e-04  3.39e-07  5.23e-06  9.90e-01  
 19  +4.5664e-01  +4.5705e-01  4.04e-04  8.23e-08  1.88e-05  1.96e-08  3.23e-07  9.52e-01  
 20  +4.5650e-01  +4.5651e-01  4.16e-06  8.46e-10  1.93e-07  2.01e-10  3.33e-09  9.90e-01  
 21  +4.5650e-01  +4.5650e-01  4.18e-08  8.50e-12  1.94e-09  2.02e-12  3.35e-11  9.90e-01  
 22  +4.5650e-01  +4.5650e-01  4.32e-10  8.79e-14  2.00e-11  2.11e-14  3.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 102.2505ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:18 PM: Optimal value: 4.565e-01
(CVXPY) Aug 30 12:19:18 PM: Compilation took 2.762e-02 seconds
(CVXPY) Aug 30 12:19:18 PM: Solver (including time spent in interface) took 1.099e-01 seconds
Iteration: 11, Objective: 0.4565
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:18 PM: Your problem has 5127 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:18 PM: Finished problem compilation (took 2.856e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5127
  constraints   = 10127
  nnz(P)        = 0
  nnz(A)        = 76799
  cones (total) = 1
    : Nonnegative = 1,  numel = 10127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8361e-01  +1.0704e+03  1.07e+03  4.21e-01  7.19e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3430e-01  +1.2546e+02  1.25e+02  1.63e-01  3.53e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0921e-01  +3.2487e+01  3.20e+01  1.22e-01  2.63e+01  4.00e-05  2.51e-01  2.24e-01  
  4  +5.0087e-01  +2.7100e+00  2.21e+00  1.51e-02  3.34e+00  5.49e-06  1.60e-01  6.50e-01  
  5  +5.0011e-01  +9.0561e-01  4.06e-01  2.74e-03  6.18e-01  3.01e-05  8.18e-02  9.90e-01  
  6  +5.0005e-01  +7.4151e-01  2.41e-01  1.62e-03  3.66e-01  2.67e-05  3.37e-02  7.15e-01  
  7  +4.9992e-01  +7.3084e-01  2.31e-01  1.20e-03  2.73e-01  9.44e-05  6.29e-03  8.98e-01  
  8  +4.9719e-01  +7.1422e-01  2.17e-01  1.07e-04  2.43e-02  1.53e-03  3.36e-04  9.48e-01  
  9  +4.9366e-01  +6.7349e-01  1.80e-01  5.80e-05  1.33e-02  1.75e-03  1.82e-04  5.37e-01  
 10  +4.9249e-01  +6.5293e-01  1.60e-01  4.91e-05  1.12e-02  1.13e-03  1.54e-04  3.69e-01  
 11  +4.9182e-01  +6.4425e-01  1.52e-01  4.77e-05  1.09e-02  8.93e-04  1.51e-04  1.29e-01  
 12  +4.8713e-01  +6.1140e-01  1.24e-01  3.55e-05  8.11e-03  5.77e-04  1.15e-04  3.82e-01  
 13  +4.7702e-01  +5.5499e-01  7.80e-02  1.94e-05  4.42e-03  3.00e-04  6.54e-05  4.98e-01  
 14  +4.7339e-01  +5.3491e-01  6.15e-02  1.46e-05  3.32e-03  1.44e-04  5.01e-05  4.95e-01  
 15  +4.7074e-01  +5.2218e-01  5.14e-02  1.19e-05  2.70e-03  1.07e-04  4.13e-05  2.56e-01  
 16  +4.6452e-01  +4.9270e-01  2.82e-02  6.16e-06  1.40e-03  3.66e-05  2.22e-05  6.40e-01  
 17  +4.6058e-01  +4.7491e-01  1.43e-02  3.04e-06  6.92e-04  1.51e-05  1.12e-05  5.91e-01  
 18  +4.5839e-01  +4.6511e-01  6.71e-03  1.38e-06  3.13e-04  2.92e-06  5.14e-06  8.40e-01  
 19  +4.5833e-01  +4.6486e-01  6.52e-03  1.32e-06  3.00e-04  2.44e-06  4.90e-06  2.14e-01  
 20  +4.5831e-01  +4.6476e-01  6.45e-03  1.30e-06  2.97e-04  2.31e-06  4.86e-06  5.25e-02  
 21  +4.5775e-01  +4.6250e-01  4.75e-03  9.72e-07  2.21e-04  9.93e-07  3.66e-06  5.87e-01  
 22  +4.5659e-01  +4.5797e-01  1.38e-03  2.75e-07  6.26e-05  2.72e-07  1.05e-06  7.44e-01  
 23  +4.5614e-01  +4.5624e-01  1.01e-04  1.99e-08  4.52e-06  1.38e-08  7.74e-08  9.56e-01  
 24  +4.5610e-01  +4.5610e-01  1.11e-06  2.17e-10  4.93e-08  1.47e-10  8.47e-10  9.89e-01  
 25  +4.5610e-01  +4.5610e-01  1.11e-08  2.17e-12  4.94e-10  1.48e-12  8.49e-12  9.90e-01  
 26  +4.5610e-01  +4.5610e-01  1.71e-10  3.36e-14  7.65e-12  2.48e-14  1.42e-13  9.85e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.7508ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:19 PM: Optimal value: 4.561e-01
(CVXPY) Aug 30 12:19:19 PM: Compilation took 2.856e-02 seconds
(CVXPY) Aug 30 12:19:19 PM: Solver (including time spent in interface) took 1.285e-01 seconds
Iteration: 12, Objective: 0.4561
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:19 PM: Your problem has 5137 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:19 PM: Finished problem compilation (took 2.830e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5137
  constraints   = 10137
  nnz(P)        = 0
  nnz(A)        = 77933
  cones (total) = 1
    : Nonnegative = 1,  numel = 10137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8359e-01  +1.0703e+03  1.07e+03  4.21e-01  7.19e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3429e-01  +1.2541e+02  1.25e+02  1.63e-01  3.53e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0920e-01  +3.2472e+01  3.20e+01  1.22e-01  2.63e+01  4.00e-05  2.51e-01  2.24e-01  
  4  +5.0087e-01  +2.7086e+00  2.21e+00  1.51e-02  3.34e+00  5.49e-06  1.60e-01  6.51e-01  
  5  +5.0013e-01  +9.5436e-01  4.54e-01  3.07e-03  6.93e-01  2.96e-05  8.68e-02  9.24e-01  
  6  +5.0006e-01  +7.5263e-01  2.53e-01  1.70e-03  3.84e-01  2.50e-05  3.59e-02  7.18e-01  
  7  +4.9994e-01  +7.3829e-01  2.38e-01  1.28e-03  2.91e-01  8.34e-05  6.97e-03  8.89e-01  
  8  +4.9750e-01  +7.2188e-01  2.24e-01  1.16e-04  2.66e-02  1.37e-03  3.66e-04  9.49e-01  
  9  +4.9567e-01  +6.9864e-01  2.03e-01  8.15e-05  1.86e-02  1.47e-03  2.56e-04  3.56e-01  
 10  +4.9321e-01  +6.7087e-01  1.78e-01  5.83e-05  1.33e-02  1.30e-03  1.84e-04  3.93e-01  
 11  +4.9271e-01  +6.5832e-01  1.66e-01  5.34e-05  1.22e-02  9.56e-04  1.68e-04  2.54e-01  
 12  +4.9230e-01  +6.5265e-01  1.60e-01  5.24e-05  1.20e-02  8.21e-04  1.65e-04  8.81e-02  
 13  +4.9067e-01  +6.3355e-01  1.43e-01  4.59e-05  1.05e-02  4.62e-04  1.46e-04  3.74e-01  
 14  +4.7859e-01  +5.6300e-01  8.44e-02  2.06e-05  4.70e-03  2.29e-04  6.85e-05  6.53e-01  
 15  +4.7450e-01  +5.4145e-01  6.69e-02  1.58e-05  3.61e-03  1.06e-04  5.37e-05  4.94e-01  
 16  +4.7206e-01  +5.2993e-01  5.79e-02  1.33e-05  3.02e-03  8.01e-05  4.56e-05  2.52e-01  
 17  +4.6836e-01  +5.1203e-01  4.37e-02  9.56e-06  2.18e-03  2.74e-05  3.34e-05  6.52e-01  
 18  +4.6348e-01  +4.9021e-01  2.67e-02  5.62e-06  1.28e-03  7.53e-06  2.02e-05  7.42e-01  
 19  +4.5949e-01  +4.7331e-01  1.38e-02  2.80e-06  6.38e-04  1.94e-06  1.04e-05  8.06e-01  
 20  +4.5659e-01  +4.6165e-01  5.06e-03  1.00e-06  2.28e-04  4.29e-07  3.82e-06  8.73e-01  
 21  +4.5624e-01  +4.6022e-01  3.99e-03  7.87e-07  1.79e-04  2.92e-07  3.02e-06  5.05e-01  
 22  +4.5493e-01  +4.5530e-01  3.67e-04  7.17e-08  1.63e-05  2.40e-08  2.80e-07  9.39e-01  
 23  +4.5480e-01  +4.5481e-01  3.84e-06  7.50e-10  1.71e-07  2.50e-10  2.94e-09  9.90e-01  
 24  +4.5480e-01  +4.5480e-01  3.84e-08  7.50e-12  1.71e-09  2.50e-12  2.94e-11  9.90e-01  
 25  +4.5480e-01  +4.5480e-01  3.84e-10  7.51e-14  1.71e-11  2.54e-14  2.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 111.5287ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:19 PM: Optimal value: 4.548e-01
(CVXPY) Aug 30 12:19:19 PM: Compilation took 2.830e-02 seconds
(CVXPY) Aug 30 12:19:19 PM: Solver (including time spent in interface) took 1.195e-01 seconds
Iteration: 13, Objective: 0.4548
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:19 PM: Your problem has 5146 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:19 PM: Finished problem compilation (took 3.045e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5146
  constraints   = 10146
  nnz(P)        = 0
  nnz(A)        = 78805
  cones (total) = 1
    : Nonnegative = 1,  numel = 10146

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8354e-01  +1.0704e+03  1.07e+03  4.21e-01  7.19e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3425e-01  +1.2533e+02  1.25e+02  1.63e-01  3.52e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0919e-01  +3.2459e+01  3.19e+01  1.22e-01  2.62e+01  4.00e-05  2.51e-01  2.25e-01  
  4  +5.0088e-01  +2.7121e+00  2.21e+00  1.51e-02  3.35e+00  5.50e-06  1.60e-01  6.51e-01  
  5  +5.0014e-01  +9.7240e-01  4.72e-01  3.19e-03  7.21e-01  2.96e-05  8.80e-02  9.05e-01  
  6  +5.0006e-01  +7.5134e-01  2.51e-01  1.69e-03  3.82e-01  2.51e-05  3.59e-02  6.84e-01  
  7  +4.9995e-01  +7.5477e-01  2.55e-01  1.35e-03  3.07e-01  8.62e-05  7.23e-03  9.00e-01  
  8  +4.9756e-01  +7.3610e-01  2.39e-01  1.27e-04  2.89e-02  1.33e-03  3.99e-04  9.46e-01  
  9  +4.9490e-01  +6.9644e-01  2.02e-01  7.62e-05  1.74e-02  1.42e-03  2.40e-04  4.80e-01  
 10  +4.9402e-01  +6.8014e-01  1.86e-01  6.37e-05  1.46e-02  1.13e-03  1.99e-04  3.23e-01  
 11  +4.9321e-01  +6.6494e-01  1.72e-01  5.58e-05  1.28e-02  8.36e-04  1.75e-04  2.99e-01  
 12  +4.9251e-01  +6.5520e-01  1.63e-01  5.21e-05  1.19e-02  6.57e-04  1.63e-04  1.99e-01  
 13  +4.8893e-01  +6.1370e-01  1.25e-01  4.06e-05  9.27e-03  6.35e-06  1.30e-04  7.82e-01  
 14  +4.7795e-01  +5.5788e-01  7.99e-02  2.04e-05  4.65e-03  4.16e-06  6.81e-05  5.82e-01  
 15  +4.7523e-01  +5.4549e-01  7.03e-02  1.71e-05  3.89e-03  3.36e-06  5.77e-05  4.45e-01  
 16  +4.7146e-01  +5.2866e-01  5.72e-02  1.32e-05  3.02e-03  2.68e-06  4.57e-05  3.01e-01  
 17  +4.6696e-01  +5.0824e-01  4.13e-02  9.06e-06  2.06e-03  1.89e-06  3.19e-05  8.10e-01  
 18  +4.6221e-01  +4.8794e-01  2.57e-02  5.47e-06  1.25e-03  1.17e-06  1.99e-05  4.50e-01  
 19  +4.5690e-01  +4.6498e-01  8.08e-03  1.65e-06  3.76e-04  4.15e-07  6.21e-06  9.90e-01  
 20  +4.5554e-01  +4.5965e-01  4.11e-03  8.29e-07  1.89e-04  2.13e-07  3.17e-06  5.72e-01  
 21  +4.5428e-01  +4.5476e-01  4.87e-04  9.69e-08  2.21e-05  2.56e-08  3.78e-07  9.70e-01  
 22  +4.5410e-01  +4.5411e-01  7.03e-06  1.40e-09  3.18e-07  3.68e-10  5.46e-09  9.86e-01  
 23  +4.5410e-01  +4.5410e-01  7.04e-08  1.40e-11  3.18e-09  3.68e-12  5.47e-11  9.90e-01  
 24  +4.5410e-01  +4.5410e-01  7.04e-10  1.40e-13  3.18e-11  3.71e-14  5.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 114.8967ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:19 PM: Optimal value: 4.541e-01
(CVXPY) Aug 30 12:19:19 PM: Compilation took 3.045e-02 seconds
(CVXPY) Aug 30 12:19:19 PM: Solver (including time spent in interface) took 1.246e-01 seconds
Iteration: 14, Objective: 0.4541
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:19 PM: Your problem has 5156 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:19 PM: Finished problem compilation (took 2.901e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5156
  constraints   = 10156
  nnz(P)        = 0
  nnz(A)        = 79560
  cones (total) = 1
    : Nonnegative = 1,  numel = 10156

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8348e-01  +1.0706e+03  1.07e+03  4.22e-01  7.18e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3421e-01  +1.2528e+02  1.25e+02  1.63e-01  3.52e+01  1.48e-02  2.64e-01  9.07e-01  
  3  +5.0919e-01  +3.2450e+01  3.19e+01  1.22e-01  2.62e+01  4.01e-05  2.51e-01  2.26e-01  
  4  +5.0088e-01  +2.7171e+00  2.22e+00  1.52e-02  3.35e+00  5.50e-06  1.60e-01  6.50e-01  
  5  +5.0015e-01  +9.9607e-01  4.96e-01  3.36e-03  7.57e-01  2.96e-05  8.98e-02  8.81e-01  
  6  +5.0006e-01  +7.7716e-01  2.77e-01  1.86e-03  4.21e-01  2.56e-05  3.94e-02  6.57e-01  
  7  +4.9992e-01  +7.6598e-01  2.66e-01  1.28e-03  2.90e-01  1.01e-04  6.06e-03  9.64e-01  
  8  +4.9759e-01  +7.4849e-01  2.51e-01  1.30e-04  2.98e-02  1.30e-03  4.12e-04  9.33e-01  
  9  +4.9532e-01  +7.0912e-01  2.14e-01  8.64e-05  1.97e-02  1.25e-03  2.73e-04  4.26e-01  
 10  +4.9344e-01  +6.8564e-01  1.92e-01  6.54e-05  1.50e-02  1.08e-03  2.07e-04  3.65e-01  
 11  +4.9315e-01  +6.7375e-01  1.81e-01  5.98e-05  1.37e-02  8.14e-04  1.88e-04  2.58e-01  
 12  +4.9168e-01  +6.5496e-01  1.63e-01  5.24e-05  1.20e-02  5.35e-04  1.66e-04  3.22e-01  
 13  +4.8679e-01  +6.2020e-01  1.33e-01  3.93e-05  8.96e-03  3.24e-04  1.27e-04  4.01e-01  
 14  +4.7724e-01  +5.6546e-01  8.82e-02  2.27e-05  5.18e-03  1.62e-04  7.70e-05  5.07e-01  
 15  +4.7353e-01  +5.4616e-01  7.26e-02  1.78e-05  4.05e-03  1.02e-04  6.11e-05  3.71e-01  
 16  +4.6769e-01  +5.1836e-01  5.07e-02  1.15e-05  2.62e-03  5.96e-05  4.07e-05  4.30e-01  
 17  +4.6554e-01  +5.0726e-01  4.17e-02  9.25e-06  2.11e-03  2.56e-05  3.32e-05  5.53e-01  
 18  +4.5886e-01  +4.7832e-01  1.95e-02  4.05e-06  9.22e-04  9.03e-06  1.52e-05  6.55e-01  
 19  +4.5580e-01  +4.6547e-01  9.67e-03  1.96e-06  4.45e-04  3.78e-06  7.53e-06  5.95e-01  
 20  +4.5572e-01  +4.6476e-01  9.04e-03  1.84e-06  4.19e-04  2.36e-06  7.17e-06  3.97e-01  
 21  +4.5544e-01  +4.6353e-01  8.09e-03  1.64e-06  3.73e-04  1.64e-06  6.37e-06  3.73e-01  
 22  +4.5480e-01  +4.6106e-01  6.26e-03  1.25e-06  2.85e-04  1.13e-06  4.87e-06  3.65e-01  
 23  +4.5298e-01  +4.5401e-01  1.03e-03  2.05e-07  4.67e-05  6.17e-08  8.17e-07  9.90e-01  
 24  +4.5261e-01  +4.5262e-01  1.43e-05  2.84e-09  6.46e-07  8.37e-10  1.14e-08  9.87e-01  
 25  +4.5260e-01  +4.5260e-01  1.43e-07  2.84e-11  6.46e-09  8.37e-12  1.14e-10  9.90e-01  
 26  +4.5260e-01  +4.5260e-01  1.43e-09  2.84e-13  6.46e-11  8.44e-14  1.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.7205ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:19 PM: Optimal value: 4.526e-01
(CVXPY) Aug 30 12:19:19 PM: Compilation took 2.901e-02 seconds
(CVXPY) Aug 30 12:19:19 PM: Solver (including time spent in interface) took 1.313e-01 seconds
Iteration: 15, Objective: 0.4526
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:20 PM: Your problem has 5166 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:20 PM: Finished problem compilation (took 2.917e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5166
  constraints   = 10166
  nnz(P)        = 0
  nnz(A)        = 80186
  cones (total) = 1
    : Nonnegative = 1,  numel = 10166

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8345e-01  +1.0707e+03  1.07e+03  4.22e-01  7.18e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3418e-01  +1.2522e+02  1.25e+02  1.63e-01  3.51e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0918e-01  +3.2439e+01  3.19e+01  1.22e-01  2.62e+01  4.01e-05  2.50e-01  2.26e-01  
  4  +5.0088e-01  +2.7205e+00  2.22e+00  1.52e-02  3.36e+00  5.51e-06  1.60e-01  6.50e-01  
  5  +5.0012e-01  +9.3379e-01  4.34e-01  2.93e-03  6.62e-01  3.07e-05  8.26e-02  9.70e-01  
  6  +5.0006e-01  +7.8505e-01  2.85e-01  1.91e-03  4.32e-01  3.01e-05  3.48e-02  7.41e-01  
  7  +4.9986e-01  +7.5367e-01  2.54e-01  1.08e-03  2.46e-01  1.34e-04  4.70e-03  9.45e-01  
  8  +4.9713e-01  +7.3689e-01  2.40e-01  1.16e-04  2.66e-02  1.52e-03  3.68e-04  9.22e-01  
  9  +4.9489e-01  +7.0276e-01  2.08e-01  8.28e-05  1.89e-02  1.39e-03  2.62e-04  3.74e-01  
 10  +4.9397e-01  +6.8026e-01  1.86e-01  6.42e-05  1.47e-02  9.69e-04  2.02e-04  4.70e-01  
 11  +4.9375e-01  +6.7417e-01  1.80e-01  6.23e-05  1.42e-02  8.26e-04  1.96e-04  1.22e-01  
 12  +4.9232e-01  +6.6144e-01  1.69e-01  5.41e-05  1.23e-02  6.95e-04  1.71e-04  2.46e-01  
 13  +4.8917e-01  +6.3052e-01  1.41e-01  4.53e-05  1.03e-02  2.54e-04  1.46e-04  4.97e-01  
 14  +4.7977e-01  +5.7810e-01  9.83e-02  2.60e-05  5.92e-03  1.47e-04  8.68e-05  5.22e-01  
 15  +4.7634e-01  +5.6101e-01  8.47e-02  2.14e-05  4.87e-03  1.04e-04  7.27e-05  2.87e-01  
 16  +4.6964e-01  +5.2897e-01  5.93e-02  1.38e-05  3.14e-03  4.82e-05  4.83e-05  5.29e-01  
 17  +4.6845e-01  +5.2348e-01  5.50e-02  1.25e-05  2.85e-03  3.89e-05  4.42e-05  2.04e-01  
 18  +4.6308e-01  +4.9879e-01  3.57e-02  7.67e-06  1.75e-03  8.85e-06  2.78e-05  7.70e-01  
 19  +4.5594e-01  +4.6883e-01  1.29e-02  2.64e-06  6.00e-04  2.25e-06  1.00e-05  7.52e-01  
 20  +4.5550e-01  +4.6704e-01  1.15e-02  2.34e-06  5.31e-04  1.97e-06  8.91e-06  1.56e-01  
 21  +4.5526e-01  +4.6561e-01  1.04e-02  2.10e-06  4.77e-04  1.03e-06  8.10e-06  6.23e-01  
 22  +4.5463e-01  +4.6302e-01  8.39e-03  1.69e-06  3.85e-04  6.86e-07  6.55e-06  5.10e-01  
 23  +4.5357e-01  +4.5900e-01  5.43e-03  1.08e-06  2.46e-04  4.16e-07  4.21e-06  5.08e-01  
 24  +4.5185e-01  +4.5253e-01  6.78e-04  1.34e-07  3.05e-05  3.41e-08  5.32e-07  9.90e-01  
 25  +4.5161e-01  +4.5162e-01  1.57e-05  3.09e-09  7.03e-07  7.89e-10  1.23e-08  9.78e-01  
 26  +4.5160e-01  +4.5160e-01  1.57e-07  3.09e-11  7.04e-09  7.90e-12  1.23e-10  9.90e-01  
 27  +4.5160e-01  +4.5160e-01  1.57e-09  3.09e-13  7.04e-11  8.01e-14  1.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 134.9067ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:20 PM: Optimal value: 4.516e-01
(CVXPY) Aug 30 12:19:20 PM: Compilation took 2.917e-02 seconds
(CVXPY) Aug 30 12:19:20 PM: Solver (including time spent in interface) took 1.424e-01 seconds
Iteration: 16, Objective: 0.4516
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:20 PM: Your problem has 5176 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:20 PM: Finished problem compilation (took 2.926e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5176
  constraints   = 10176
  nnz(P)        = 0
  nnz(A)        = 81345
  cones (total) = 1
    : Nonnegative = 1,  numel = 10176

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8337e-01  +1.0709e+03  1.07e+03  4.22e-01  7.18e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3416e-01  +1.2520e+02  1.25e+02  1.63e-01  3.51e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0918e-01  +3.2434e+01  3.19e+01  1.22e-01  2.61e+01  4.02e-05  2.50e-01  2.27e-01  
  4  +5.0088e-01  +2.7229e+00  2.22e+00  1.52e-02  3.36e+00  5.51e-06  1.59e-01  6.50e-01  
  5  +5.0012e-01  +9.4161e-01  4.41e-01  2.99e-03  6.74e-01  3.08e-05  8.29e-02  9.64e-01  
  6  +5.0007e-01  +8.1144e-01  3.11e-01  2.09e-03  4.73e-01  3.09e-05  3.86e-02  6.85e-01  
  7  +5.0002e-01  +8.3166e-01  3.32e-01  1.84e-03  4.18e-01  6.22e-05  1.04e-02  9.90e-01  
  8  +4.9832e-01  +7.9499e-01  2.97e-01  1.70e-04  3.89e-02  9.47e-04  5.36e-04  9.50e-01  
  9  +4.9531e-01  +7.1281e-01  2.18e-01  8.18e-05  1.87e-02  9.17e-04  2.57e-04  6.52e-01  
 10  +4.9413e-01  +6.9481e-01  2.01e-01  6.50e-05  1.49e-02  7.34e-04  2.03e-04  3.87e-01  
 11  +4.9378e-01  +6.8346e-01  1.90e-01  6.29e-05  1.44e-02  5.42e-04  1.97e-04  1.82e-01  
 12  +4.8928e-01  +6.3931e-01  1.50e-01  4.47e-05  1.02e-02  2.06e-04  1.43e-04  6.17e-01  
 13  +4.8161e-01  +5.9344e-01  1.12e-01  3.04e-05  6.92e-03  1.09e-04  1.01e-04  4.48e-01  
 14  +4.7691e-01  +5.6885e-01  9.19e-02  2.35e-05  5.36e-03  6.52e-05  7.98e-05  3.83e-01  
 15  +4.7197e-01  +5.4460e-01  7.26e-02  1.75e-05  3.98e-03  3.66e-05  6.09e-05  4.27e-01  
 16  +4.6503e-01  +5.1195e-01  4.69e-02  1.06e-05  2.41e-03  1.67e-05  3.83e-05  5.30e-01  
 17  +4.5858e-01  +4.8140e-01  2.28e-02  4.84e-06  1.10e-03  8.60e-07  1.81e-05  9.90e-01  
 18  +4.5390e-01  +4.6205e-01  8.15e-03  1.69e-06  3.84e-04  3.22e-07  6.53e-06  6.92e-01  
 19  +4.5387e-01  +4.6185e-01  7.98e-03  1.66e-06  3.79e-04  3.09e-07  6.53e-06  9.47e-03  
 20  +4.5387e-01  +4.6186e-01  7.99e-03  1.66e-06  3.79e-04  3.11e-07  6.51e-06  1.77e-02  
 21  +4.5385e-01  +4.6188e-01  8.03e-03  1.65e-06  3.76e-04  3.24e-07  6.40e-06  7.15e-02  
 22  +4.5265e-01  +4.5702e-01  4.37e-03  8.87e-07  2.02e-04  2.16e-07  3.49e-06  9.34e-01  
 23  +4.5124e-01  +4.5163e-01  3.91e-04  7.86e-08  1.79e-05  1.89e-08  3.16e-07  9.41e-01  
 24  +4.5110e-01  +4.5111e-01  4.42e-06  8.88e-10  2.02e-07  2.14e-10  3.58e-09  9.89e-01  
 25  +4.5110e-01  +4.5110e-01  4.43e-08  8.89e-12  2.02e-09  2.14e-12  3.58e-11  9.90e-01  
 26  +4.5110e-01  +4.5110e-01  4.43e-10  8.89e-14  2.02e-11  2.18e-14  3.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.7733ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:20 PM: Optimal value: 4.511e-01
(CVXPY) Aug 30 12:19:20 PM: Compilation took 2.926e-02 seconds
(CVXPY) Aug 30 12:19:20 PM: Solver (including time spent in interface) took 1.340e-01 seconds
Iteration: 17, Objective: 0.4511
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:20 PM: Your problem has 5186 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:20 PM: Finished problem compilation (took 3.488e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5186
  constraints   = 10186
  nnz(P)        = 0
  nnz(A)        = 81901
  cones (total) = 1
    : Nonnegative = 1,  numel = 10186

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8335e-01  +1.0709e+03  1.07e+03  4.22e-01  7.17e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3414e-01  +1.2516e+02  1.25e+02  1.63e-01  3.50e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0917e-01  +3.2420e+01  3.19e+01  1.22e-01  2.61e+01  4.02e-05  2.50e-01  2.27e-01  
  4  +5.0088e-01  +2.7241e+00  2.22e+00  1.52e-02  3.37e+00  5.52e-06  1.59e-01  6.51e-01  
  5  +5.0013e-01  +9.5311e-01  4.53e-01  3.07e-03  6.92e-01  3.08e-05  8.36e-02  9.52e-01  
  6  +5.0006e-01  +8.0655e-01  3.06e-01  2.06e-03  4.64e-01  3.22e-05  3.47e-02  7.59e-01  
  7  +4.9977e-01  +7.6606e-01  2.66e-01  9.14e-04  2.08e-01  1.84e-04  3.57e-03  9.73e-01  
  8  +4.9681e-01  +7.4687e-01  2.50e-01  1.13e-04  2.57e-02  1.63e-03  3.57e-04  9.01e-01  
  9  +4.9476e-01  +7.1398e-01  2.19e-01  8.81e-05  2.01e-02  1.38e-03  2.80e-04  3.04e-01  
 10  +4.9262e-01  +6.8892e-01  1.96e-01  6.52e-05  1.49e-02  1.17e-03  2.07e-04  3.98e-01  
 11  +4.9261e-01  +6.8025e-01  1.88e-01  6.34e-05  1.45e-02  8.88e-04  2.01e-04  1.84e-01  
 12  +4.9094e-01  +6.6084e-01  1.70e-01  5.39e-05  1.23e-02  5.68e-04  1.72e-04  3.77e-01  
 13  +4.8627e-01  +6.2682e-01  1.41e-01  4.17e-05  9.52e-03  3.21e-04  1.36e-04  4.08e-01  
 14  +4.7954e-01  +5.8883e-01  1.09e-01  2.93e-05  6.68e-03  2.12e-04  9.87e-05  3.65e-01  
 15  +4.7516e-01  +5.6496e-01  8.98e-02  2.27e-05  5.17e-03  1.02e-04  7.81e-05  4.79e-01  
 16  +4.6718e-01  +5.2570e-01  5.85e-02  1.36e-05  3.09e-03  2.81e-05  4.85e-05  6.80e-01  
 17  +4.6210e-01  +5.0284e-01  4.07e-02  9.03e-06  2.06e-03  1.70e-05  3.31e-05  4.00e-01  
 18  +4.6113e-01  +4.9854e-01  3.74e-02  8.17e-06  1.86e-03  1.47e-05  3.01e-05  1.48e-01  
 19  +4.5845e-01  +4.8532e-01  2.69e-02  5.65e-06  1.29e-03  3.59e-06  2.11e-05  8.32e-01  
 20  +4.5519e-01  +4.7185e-01  1.67e-02  3.45e-06  7.86e-04  1.88e-06  1.32e-05  5.30e-01  
 21  +4.5459e-01  +4.6925e-01  1.47e-02  3.03e-06  6.90e-04  1.33e-06  1.17e-05  4.27e-01  
 22  +4.5460e-01  +4.6931e-01  1.47e-02  3.02e-06  6.87e-04  1.31e-06  1.16e-05  8.25e-02  
 23  +4.5119e-01  +4.5577e-01  4.58e-03  9.30e-07  2.11e-04  3.78e-07  3.70e-06  7.24e-01  
 24  +4.4991e-01  +4.5076e-01  8.46e-04  1.70e-07  3.86e-05  4.43e-08  6.88e-07  9.90e-01  
 25  +4.4960e-01  +4.4961e-01  1.08e-05  2.16e-09  4.92e-07  5.60e-10  8.82e-09  9.88e-01  
 26  +4.4960e-01  +4.4960e-01  1.09e-07  2.18e-11  4.95e-09  5.63e-12  8.86e-11  9.90e-01  
 27  +4.4960e-01  +4.4960e-01  1.09e-09  2.18e-13  4.95e-11  5.68e-14  8.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138.7508ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:20 PM: Optimal value: 4.496e-01
(CVXPY) Aug 30 12:19:20 PM: Compilation took 3.488e-02 seconds
(CVXPY) Aug 30 12:19:20 PM: Solver (including time spent in interface) took 1.495e-01 seconds
Iteration: 18, Objective: 0.4496
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:20 PM: Your problem has 5196 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:20 PM: Finished problem compilation (took 3.119e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5196
  constraints   = 10196
  nnz(P)        = 0
  nnz(A)        = 82367
  cones (total) = 1
    : Nonnegative = 1,  numel = 10196

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8334e-01  +1.0709e+03  1.07e+03  4.23e-01  7.17e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3410e-01  +1.2508e+02  1.25e+02  1.63e-01  3.49e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0917e-01  +3.2405e+01  3.19e+01  1.22e-01  2.60e+01  4.02e-05  2.50e-01  2.28e-01  
  4  +5.0088e-01  +2.7259e+00  2.23e+00  1.52e-02  3.37e+00  5.52e-06  1.59e-01  6.51e-01  
  5  +5.0013e-01  +9.5403e-01  4.54e-01  3.08e-03  6.93e-01  3.10e-05  8.32e-02  9.56e-01  
  6  +5.0006e-01  +8.0355e-01  3.03e-01  2.03e-03  4.59e-01  3.33e-05  3.31e-02  7.67e-01  
  7  +4.9967e-01  +7.7637e-01  2.77e-01  7.76e-04  1.77e-01  2.43e-04  2.84e-03  9.90e-01  
  8  +4.9636e-01  +7.5437e-01  2.58e-01  1.07e-04  2.44e-02  1.81e-03  3.38e-04  8.82e-01  
  9  +4.9387e-01  +7.1251e-01  2.19e-01  8.21e-05  1.87e-02  1.35e-03  2.61e-04  3.44e-01  
 10  +4.9212e-01  +6.9510e-01  2.03e-01  6.40e-05  1.46e-02  1.24e-03  2.04e-04  3.32e-01  
 11  +4.9155e-01  +6.8215e-01  1.91e-01  6.28e-05  1.43e-02  9.37e-04  2.01e-04  1.33e-01  
 12  +4.8741e-01  +6.4515e-01  1.58e-01  4.88e-05  1.11e-02  5.40e-04  1.59e-04  4.02e-01  
 13  +4.8305e-01  +6.1739e-01  1.34e-01  3.86e-05  8.79e-03  4.02e-04  1.28e-04  2.79e-01  
 14  +4.7954e-01  +5.9481e-01  1.15e-01  3.15e-05  7.19e-03  2.41e-04  1.07e-04  3.68e-01  
 15  +4.7156e-01  +5.5286e-01  8.13e-02  2.01e-05  4.57e-03  1.34e-04  7.06e-05  4.51e-01  
 16  +4.6637e-01  +5.2525e-01  5.89e-02  1.37e-05  3.12e-03  3.80e-05  4.96e-05  6.71e-01  
 17  +4.5944e-01  +4.9356e-01  3.41e-02  7.50e-06  1.71e-03  1.79e-05  2.81e-05  5.30e-01  
 18  +4.5894e-01  +4.9133e-01  3.24e-02  7.04e-06  1.60e-03  1.51e-05  2.64e-05  1.73e-01  
 19  +4.5771e-01  +4.8589e-01  2.82e-02  6.04e-06  1.37e-03  1.13e-05  2.28e-05  2.70e-01  
 20  +4.5406e-01  +4.7038e-01  1.63e-02  3.41e-06  7.76e-04  5.75e-06  1.32e-05  4.92e-01  
 21  +4.5139e-01  +4.5850e-01  7.12e-03  1.45e-06  3.31e-04  4.59e-07  5.78e-06  9.90e-01  
 22  +4.4906e-01  +4.4950e-01  4.42e-04  8.99e-08  2.04e-05  2.28e-08  3.68e-07  9.82e-01  
 23  +4.4890e-01  +4.4891e-01  4.81e-06  9.75e-10  2.22e-07  2.45e-10  4.01e-09  9.90e-01  
 24  +4.4890e-01  +4.4890e-01  4.81e-08  9.77e-12  2.22e-09  2.45e-12  4.02e-11  9.90e-01  
 25  +4.4890e-01  +4.4890e-01  4.81e-10  9.77e-14  2.22e-11  2.48e-14  4.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 124.9294ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:21 PM: Optimal value: 4.489e-01
(CVXPY) Aug 30 12:19:21 PM: Compilation took 3.119e-02 seconds
(CVXPY) Aug 30 12:19:21 PM: Solver (including time spent in interface) took 1.334e-01 seconds
Iteration: 19, Objective: 0.4489
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:21 PM: Your problem has 5204 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:21 PM: Finished problem compilation (took 3.128e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5204
  constraints   = 10204
  nnz(P)        = 0
  nnz(A)        = 83045
  cones (total) = 1
    : Nonnegative = 1,  numel = 10204

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8332e-01  +1.0709e+03  1.07e+03  4.23e-01  7.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3410e-01  +1.2508e+02  1.25e+02  1.63e-01  3.49e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0917e-01  +3.2401e+01  3.19e+01  1.22e-01  2.60e+01  4.02e-05  2.50e-01  2.28e-01  
  4  +5.0088e-01  +2.7247e+00  2.22e+00  1.52e-02  3.37e+00  5.52e-06  1.59e-01  6.51e-01  
  5  +5.0012e-01  +9.4830e-01  4.48e-01  3.04e-03  6.85e-01  3.11e-05  8.24e-02  9.64e-01  
  6  +5.0006e-01  +8.0494e-01  3.05e-01  2.04e-03  4.61e-01  3.39e-05  3.27e-02  7.71e-01  
  7  +4.9972e-01  +7.7964e-01  2.80e-01  8.80e-04  2.00e-01  2.13e-04  3.32e-03  9.70e-01  
  8  +4.9649e-01  +7.5879e-01  2.62e-01  1.12e-04  2.56e-02  1.77e-03  3.55e-04  8.94e-01  
  9  +4.9400e-01  +7.1629e-01  2.22e-01  8.44e-05  1.93e-02  1.38e-03  2.69e-04  3.52e-01  
 10  +4.9227e-01  +6.9706e-01  2.05e-01  6.57e-05  1.50e-02  1.23e-03  2.09e-04  3.45e-01  
 11  +4.9139e-01  +6.7922e-01  1.88e-01  6.14e-05  1.40e-02  8.26e-04  1.96e-04  2.42e-01  
 12  +4.8737e-01  +6.4242e-01  1.55e-01  4.89e-05  1.12e-02  4.38e-04  1.60e-04  4.00e-01  
 13  +4.7960e-01  +5.9436e-01  1.15e-01  3.16e-05  7.20e-03  2.36e-04  1.07e-04  4.89e-01  
 14  +4.7638e-01  +5.7586e-01  9.95e-02  2.61e-05  5.95e-03  1.34e-04  8.96e-05  4.04e-01  
 15  +4.7248e-01  +5.5678e-01  8.43e-02  2.11e-05  4.80e-03  1.06e-04  7.38e-05  2.21e-01  
 16  +4.6478e-01  +5.1925e-01  5.45e-02  1.26e-05  2.86e-03  4.64e-05  4.56e-05  5.48e-01  
 17  +4.6008e-01  +4.9652e-01  3.64e-02  7.89e-06  1.79e-03  1.63e-05  2.92e-05  6.74e-01  
 18  +4.5938e-01  +4.9329e-01  3.39e-02  7.34e-06  1.67e-03  1.19e-05  2.76e-05  2.58e-01  
 19  +4.5773e-01  +4.8611e-01  2.84e-02  6.07e-06  1.38e-03  8.98e-06  2.30e-05  2.59e-01  
 20  +4.5559e-01  +4.7607e-01  2.05e-02  4.23e-06  9.62e-04  1.37e-06  1.61e-05  9.90e-01  
 21  +4.5350e-01  +4.6787e-01  1.44e-02  2.94e-06  6.69e-04  9.21e-07  1.14e-05  4.07e-01  
 22  +4.5045e-01  +4.5570e-01  5.24e-03  1.06e-06  2.41e-04  2.73e-07  4.21e-06  9.90e-01  
 23  +4.4875e-01  +4.4915e-01  4.01e-04  8.07e-08  1.83e-05  2.01e-08  3.28e-07  9.59e-01  
 24  +4.4860e-01  +4.4861e-01  4.12e-06  8.29e-10  1.89e-07  2.06e-10  3.38e-09  9.90e-01  
 25  +4.4860e-01  +4.4860e-01  4.12e-08  8.30e-12  1.89e-09  2.06e-12  3.38e-11  9.90e-01  
 26  +4.4860e-01  +4.4860e-01  4.12e-10  8.31e-14  1.89e-11  2.08e-14  3.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 130.6676ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:21 PM: Optimal value: 4.486e-01
(CVXPY) Aug 30 12:19:21 PM: Compilation took 3.128e-02 seconds
(CVXPY) Aug 30 12:19:21 PM: Solver (including time spent in interface) took 1.398e-01 seconds
Iteration: 20, Objective: 0.4486
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:21 PM: Your problem has 5205 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:21 PM: Finished problem compilation (took 3.357e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5205
  constraints   = 10205
  nnz(P)        = 0
  nnz(A)        = 83355
  cones (total) = 1
    : Nonnegative = 1,  numel = 10205

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8332e-01  +1.0709e+03  1.07e+03  4.23e-01  7.17e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3410e-01  +1.2507e+02  1.25e+02  1.63e-01  3.49e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0917e-01  +3.2400e+01  3.19e+01  1.22e-01  2.60e+01  4.02e-05  2.50e-01  2.28e-01  
  4  +5.0088e-01  +2.7248e+00  2.22e+00  1.52e-02  3.37e+00  5.52e-06  1.59e-01  6.51e-01  
  5  +5.0012e-01  +9.5291e-01  4.53e-01  3.07e-03  6.92e-01  3.11e-05  8.28e-02  9.59e-01  
  6  +5.0006e-01  +7.9692e-01  2.97e-01  1.99e-03  4.49e-01  3.36e-05  3.22e-02  7.59e-01  
  7  +4.9964e-01  +7.8659e-01  2.87e-01  7.79e-04  1.77e-01  2.57e-04  2.83e-03  9.90e-01  
  8  +4.9621e-01  +7.6294e-01  2.67e-01  1.08e-04  2.47e-02  1.88e-03  3.42e-04  8.80e-01  
  9  +4.9325e-01  +7.0933e-01  2.16e-01  7.92e-05  1.81e-02  1.27e-03  2.53e-04  4.00e-01  
 10  +4.9282e-01  +6.9193e-01  1.99e-01  6.79e-05  1.55e-02  8.82e-04  2.16e-04  3.66e-01  
 11  +4.9227e-01  +6.7706e-01  1.85e-01  6.55e-05  1.50e-02  5.63e-04  2.10e-04  2.39e-01  
 12  +4.8807e-01  +6.4345e-01  1.55e-01  5.03e-05  1.15e-02  3.65e-04  1.64e-04  3.86e-01  
 13  +4.8158e-01  +6.0431e-01  1.23e-01  3.50e-05  7.98e-03  2.35e-04  1.17e-04  4.10e-01  
 14  +4.7688e-01  +5.7828e-01  1.01e-01  2.71e-05  6.16e-03  1.38e-04  9.26e-05  3.98e-01  
 15  +4.7275e-01  +5.5764e-01  8.49e-02  2.14e-05  4.88e-03  9.90e-05  7.48e-05  2.89e-01  
 16  +4.6570e-01  +5.2335e-01  5.76e-02  1.34e-05  3.06e-03  4.47e-05  4.85e-05  5.36e-01  
 17  +4.5899e-01  +4.9199e-01  3.30e-02  7.18e-06  1.63e-03  1.57e-05  2.68e-05  6.57e-01  
 18  +4.5855e-01  +4.9011e-01  3.16e-02  6.81e-06  1.55e-03  1.35e-05  2.54e-05  1.52e-01  
 19  +4.5698e-01  +4.8344e-01  2.65e-02  5.62e-06  1.28e-03  1.02e-05  2.12e-05  2.57e-01  
 20  +4.5402e-01  +4.7095e-01  1.69e-02  3.52e-06  8.01e-04  5.84e-06  1.36e-05  4.32e-01  
 21  +4.5091e-01  +4.5747e-01  6.56e-03  1.33e-06  3.02e-04  4.07e-07  5.25e-06  9.90e-01  
 22  +4.4886e-01  +4.4958e-01  7.18e-04  1.45e-07  3.29e-05  4.09e-08  5.87e-07  9.24e-01  
 23  +4.4860e-01  +4.4861e-01  7.76e-06  1.56e-09  3.55e-07  4.36e-10  6.37e-09  9.90e-01  
 24  +4.4860e-01  +4.4860e-01  7.78e-08  1.57e-11  3.56e-09  4.37e-12  6.38e-11  9.90e-01  
 25  +4.4860e-01  +4.4860e-01  7.78e-10  1.57e-13  3.56e-11  4.42e-14  6.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 125.3608ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:21 PM: Optimal value: 4.486e-01
(CVXPY) Aug 30 12:19:21 PM: Compilation took 3.357e-02 seconds
(CVXPY) Aug 30 12:19:21 PM: Solver (including time spent in interface) took 1.329e-01 seconds
Iteration: 21, Objective: 0.4486
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:21 PM: Your problem has 5208 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:21 PM: Finished problem compilation (took 3.021e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5208
  constraints   = 10208
  nnz(P)        = 0
  nnz(A)        = 83633
  cones (total) = 1
    : Nonnegative = 1,  numel = 10208

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8333e-01  +1.0709e+03  1.07e+03  4.23e-01  7.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3408e-01  +1.2503e+02  1.24e+02  1.63e-01  3.49e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0916e-01  +3.2391e+01  3.19e+01  1.22e-01  2.60e+01  4.02e-05  2.50e-01  2.28e-01  
  4  +5.0088e-01  +2.7251e+00  2.22e+00  1.52e-02  3.37e+00  5.52e-06  1.59e-01  6.51e-01  
  5  +5.0012e-01  +9.5090e-01  4.51e-01  3.06e-03  6.89e-01  3.12e-05  8.25e-02  9.63e-01  
  6  +5.0006e-01  +8.0147e-01  3.01e-01  2.02e-03  4.56e-01  3.44e-05  3.23e-02  7.55e-01  
  7  +4.9968e-01  +7.8893e-01  2.89e-01  8.44e-04  1.92e-01  2.40e-04  3.13e-03  9.74e-01  
  8  +4.9629e-01  +7.6595e-01  2.70e-01  1.13e-04  2.57e-02  1.85e-03  3.58e-04  8.86e-01  
  9  +4.9391e-01  +7.2504e-01  2.31e-01  8.71e-05  1.99e-02  1.46e-03  2.78e-04  3.24e-01  
 10  +4.9181e-01  +6.9709e-01  2.05e-01  6.43e-05  1.47e-02  1.17e-03  2.05e-04  4.26e-01  
 11  +4.9104e-01  +6.8609e-01  1.95e-01  6.34e-05  1.45e-02  9.78e-04  2.05e-04  6.35e-02  
 12  +4.8827e-01  +6.5584e-01  1.68e-01  5.52e-05  1.26e-02  5.71e-04  1.81e-04  3.02e-01  
 13  +4.7974e-01  +6.0022e-01  1.20e-01  3.34e-05  7.60e-03  3.25e-04  1.13e-04  5.07e-01  
 14  +4.7546e-01  +5.7519e-01  9.97e-02  2.62e-05  5.96e-03  1.98e-04  9.06e-05  3.72e-01  
 15  +4.7193e-01  +5.5672e-01  8.48e-02  2.13e-05  4.84e-03  1.43e-04  7.48e-05  2.81e-01  
 16  +4.6537e-01  +5.2373e-01  5.84e-02  1.37e-05  3.11e-03  7.12e-05  4.96e-05  4.91e-01  
 17  +4.5872e-01  +4.9183e-01  3.31e-02  7.25e-06  1.65e-03  2.54e-05  2.72e-05  6.46e-01  
 18  +4.5828e-01  +4.8985e-01  3.16e-02  6.84e-06  1.56e-03  2.17e-05  2.56e-05  1.61e-01  
 19  +4.5620e-01  +4.8078e-01  2.46e-02  5.23e-06  1.19e-03  1.48e-05  1.99e-05  3.24e-01  
 20  +4.5420e-01  +4.7198e-01  1.78e-02  3.73e-06  8.48e-04  9.16e-06  1.44e-05  3.90e-01  
 21  +4.5120e-01  +4.5865e-01  7.45e-03  1.53e-06  3.47e-04  5.21e-07  6.00e-06  9.90e-01  
 22  +4.4936e-01  +4.5151e-01  2.15e-03  4.37e-07  9.94e-05  1.46e-07  1.75e-06  7.35e-01  
 23  +4.4865e-01  +4.4879e-01  1.36e-04  2.74e-08  6.23e-06  7.67e-09  1.12e-07  9.75e-01  
 24  +4.4860e-01  +4.4860e-01  1.44e-06  2.90e-10  6.60e-08  8.13e-11  1.18e-09  9.89e-01  
 25  +4.4860e-01  +4.4860e-01  1.44e-08  2.90e-12  6.60e-10  8.13e-13  1.18e-11  9.90e-01  
 26  +4.4860e-01  +4.4860e-01  1.44e-10  2.90e-14  6.60e-12  8.34e-15  1.21e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.3286ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:21 PM: Optimal value: 4.486e-01
(CVXPY) Aug 30 12:19:21 PM: Compilation took 3.021e-02 seconds
(CVXPY) Aug 30 12:19:21 PM: Solver (including time spent in interface) took 1.445e-01 seconds
Iteration: 22, Objective: 0.4486
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:21 PM: Your problem has 5209 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:22 PM: Finished problem compilation (took 3.173e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:22 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5209
  constraints   = 10209
  nnz(P)        = 0
  nnz(A)        = 83659
  cones (total) = 1
    : Nonnegative = 1,  numel = 10209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8333e-01  +1.0709e+03  1.07e+03  4.23e-01  7.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3408e-01  +1.2503e+02  1.24e+02  1.63e-01  3.49e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0916e-01  +3.2391e+01  3.19e+01  1.22e-01  2.60e+01  4.02e-05  2.50e-01  2.28e-01  
  4  +5.0088e-01  +2.7256e+00  2.22e+00  1.53e-02  3.37e+00  5.52e-06  1.59e-01  6.51e-01  
  5  +5.0012e-01  +9.5213e-01  4.52e-01  3.07e-03  6.91e-01  3.12e-05  8.26e-02  9.62e-01  
  6  +5.0006e-01  +8.0752e-01  3.07e-01  2.06e-03  4.66e-01  3.43e-05  3.31e-02  7.49e-01  
  7  +4.9971e-01  +7.8719e-01  2.87e-01  8.87e-04  2.02e-01  2.21e-04  3.34e-03  9.73e-01  
  8  +4.9644e-01  +7.6545e-01  2.69e-01  1.15e-04  2.63e-02  1.80e-03  3.65e-04  8.91e-01  
  9  +4.9398e-01  +7.2425e-01  2.30e-01  8.74e-05  2.00e-02  1.45e-03  2.79e-04  3.34e-01  
 10  +4.9199e-01  +6.9632e-01  2.04e-01  6.44e-05  1.47e-02  1.13e-03  2.05e-04  4.44e-01  
 11  +4.9122e-01  +6.8519e-01  1.94e-01  6.35e-05  1.45e-02  9.33e-04  2.05e-04  6.94e-02  
 12  +4.8858e-01  +6.5708e-01  1.68e-01  5.56e-05  1.27e-02  5.67e-04  1.82e-04  2.89e-01  
 13  +4.8004e-01  +6.0160e-01  1.22e-01  3.37e-05  7.68e-03  3.28e-04  1.14e-04  5.02e-01  
 14  +4.7539e-01  +5.7478e-01  9.94e-02  2.60e-05  5.93e-03  2.03e-04  9.01e-05  3.66e-01  
 15  +4.7194e-01  +5.5672e-01  8.48e-02  2.12e-05  4.83e-03  1.47e-04  7.47e-05  2.76e-01  
 16  +4.6568e-01  +5.2519e-01  5.95e-02  1.40e-05  3.17e-03  7.42e-05  5.06e-05  4.85e-01  
 17  +4.5880e-01  +4.9217e-01  3.34e-02  7.32e-06  1.66e-03  2.58e-05  2.74e-05  6.52e-01  
 18  +4.5841e-01  +4.9045e-01  3.20e-02  6.93e-06  1.58e-03  2.23e-05  2.59e-05  1.60e-01  
 19  +4.5620e-01  +4.8060e-01  2.44e-02  5.18e-06  1.18e-03  1.36e-05  1.97e-05  4.01e-01  
 20  +4.5416e-01  +4.7173e-01  1.76e-02  3.67e-06  8.35e-04  8.44e-06  1.41e-05  3.87e-01  
 21  +4.5138e-01  +4.5936e-01  7.98e-03  1.63e-06  3.71e-04  5.50e-07  6.41e-06  9.90e-01  
 22  +4.4926e-01  +4.5111e-01  1.85e-03  3.77e-07  8.56e-05  1.22e-07  1.51e-06  8.00e-01  
 23  +4.4864e-01  +4.4874e-01  1.00e-04  2.01e-08  4.58e-06  5.32e-09  8.20e-08  9.87e-01  
 24  +4.4860e-01  +4.4860e-01  1.03e-06  2.07e-10  4.71e-08  5.47e-11  8.44e-10  9.90e-01  
 25  +4.4860e-01  +4.4860e-01  1.03e-08  2.07e-12  4.71e-10  5.47e-13  8.44e-12  9.90e-01  
 26  +4.4860e-01  +4.4860e-01  1.03e-10  2.07e-14  4.71e-12  5.58e-15  8.60e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 130.2694ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:22 PM: Optimal value: 4.486e-01
(CVXPY) Aug 30 12:19:22 PM: Compilation took 3.173e-02 seconds
(CVXPY) Aug 30 12:19:22 PM: Solver (including time spent in interface) took 1.377e-01 seconds
Iteration: 23, Objective: 0.4486
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:22 PM: Your problem has 5210 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:22 PM: Finished problem compilation (took 3.109e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5210
  constraints   = 10210
  nnz(P)        = 0
  nnz(A)        = 83688
  cones (total) = 1
    : Nonnegative = 1,  numel = 10210

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8333e-01  +1.0709e+03  1.07e+03  4.23e-01  7.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3408e-01  +1.2501e+02  1.24e+02  1.63e-01  3.49e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0916e-01  +3.2390e+01  3.19e+01  1.22e-01  2.60e+01  4.02e-05  2.50e-01  2.28e-01  
  4  +5.0088e-01  +2.7260e+00  2.23e+00  1.53e-02  3.37e+00  5.52e-06  1.59e-01  6.51e-01  
  5  +5.0012e-01  +9.4818e-01  4.48e-01  3.04e-03  6.85e-01  3.12e-05  8.21e-02  9.67e-01  
  6  +5.0006e-01  +8.1108e-01  3.11e-01  2.08e-03  4.70e-01  3.54e-05  3.13e-02  8.08e-01  
  7  +4.9965e-01  +7.7724e-01  2.78e-01  7.58e-04  1.73e-01  2.53e-04  2.76e-03  9.73e-01  
  8  +4.9625e-01  +7.5489e-01  2.59e-01  1.05e-04  2.41e-02  1.85e-03  3.35e-04  8.80e-01  
  9  +4.9370e-01  +7.1424e-01  2.21e-01  8.13e-05  1.86e-02  1.41e-03  2.59e-04  3.41e-01  
 10  +4.9258e-01  +6.9348e-01  2.01e-01  6.59e-05  1.51e-02  1.03e-03  2.10e-04  3.95e-01  
 11  +4.9191e-01  +6.8341e-01  1.91e-01  6.48e-05  1.48e-02  8.39e-04  2.08e-04  9.40e-02  
 12  +4.8940e-01  +6.5782e-01  1.68e-01  5.69e-05  1.30e-02  5.25e-04  1.85e-04  2.90e-01  
 13  +4.8276e-01  +6.1616e-01  1.33e-01  3.87e-05  8.83e-03  3.80e-04  1.30e-04  3.83e-01  
 14  +4.7866e-01  +5.9227e-01  1.14e-01  3.13e-05  7.12e-03  2.74e-04  1.07e-04  2.77e-01  
 15  +4.7326e-01  +5.6281e-01  8.95e-02  2.29e-05  5.21e-03  1.62e-04  8.02e-05  4.03e-01  
 16  +4.6879e-01  +5.4018e-01  7.14e-02  1.73e-05  3.94e-03  1.03e-04  6.19e-05  3.64e-01  
 17  +4.6366e-01  +5.1538e-01  5.17e-02  1.19e-05  2.71e-03  6.21e-05  4.37e-05  3.95e-01  
 18  +4.5914e-01  +4.9409e-01  3.49e-02  7.63e-06  1.74e-03  3.34e-05  2.85e-05  4.85e-01  
 19  +4.5866e-01  +4.9148e-01  3.28e-02  7.19e-06  1.64e-03  2.54e-05  2.71e-05  2.19e-01  
 20  +4.5515e-01  +4.7602e-01  2.09e-02  4.45e-06  1.01e-03  1.40e-05  1.71e-05  4.56e-01  
 21  +4.5340e-01  +4.6860e-01  1.52e-02  3.17e-06  7.22e-04  9.04e-06  1.23e-05  3.75e-01  
 22  +4.5113e-01  +4.5836e-01  7.23e-03  1.48e-06  3.36e-04  5.37e-07  5.81e-06  9.90e-01  
 23  +4.4922e-01  +4.5097e-01  1.75e-03  3.55e-07  8.08e-05  1.24e-07  1.43e-06  7.86e-01  
 24  +4.4863e-01  +4.4870e-01  7.26e-05  1.46e-08  3.33e-06  4.34e-09  5.96e-08  9.79e-01  
 25  +4.4860e-01  +4.4860e-01  7.41e-07  1.49e-10  3.39e-08  4.42e-11  6.08e-10  9.90e-01  
 26  +4.4860e-01  +4.4860e-01  7.41e-09  1.49e-12  3.39e-10  4.42e-13  6.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.2437ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:22 PM: Optimal value: 4.486e-01
(CVXPY) Aug 30 12:19:22 PM: Compilation took 3.109e-02 seconds
(CVXPY) Aug 30 12:19:22 PM: Solver (including time spent in interface) took 1.387e-01 seconds
FULL MODEL:
  Accruacy: 0.5261
  Our objective: 0.05219999999999997

IF 
    (x3 = 1 AND x1 = 0 AND x6 = 0 AND x7 = 0)                                             <-- (term's our objective: 0.010600000000000012)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x1 = 0 AND x4 = 0 AND x7 = 0)            <-- (term's our objective: 0.0032000000000000526)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.0044000000000000315)
 OR (x1 = 1 AND x4 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.004399999999999964)
 OR (x0 = 1 AND x2 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.003800000000000031)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x6 = 1 AND x7 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.004399999999999964)
 OR (x0 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0014000000000000267)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x5 = 0) <-- (term's our objective: 0.0006000000000000484)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0008000000000000034)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0008000000000000485)
 OR (x0 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0015999999999999825)
 OR (x4 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x7 = 0) <-- (term's our objective: 0.0010000000000000044)
 OR (x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x6 = 0) <-- (term's our objective: 0.0012000000000000266)
 OR (x1 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0012000000000000036)
 OR (x1 = 1 AND x3 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0012000000000000044)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x7 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0013999999999999603)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0020000000000000052)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.004800000000000028)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0014000000000000267)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0014000000000000267)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x7 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0006000000000000493)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.010600000000000012
    Its accruacy: 0.5053
    Its hamming distance: 6
  Shortest hamming distance: 0
    Its our objective: 0.004800000000000028
  Highest accruacy: 0.5053
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

