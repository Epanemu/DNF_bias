Command:
python test_script.py -s smallest_subclass -d 6 -n 500 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.008
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 6.

Computed total variation: 0.28400000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:55 PM: Your problem has 263 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 263
  constraints   = 513
  nnz(P)        = 0
  nnz(A)        = 2263
  cones (total) = 1
    : Nonnegative = 1,  numel = 513

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +2.5081e+02  2.50e+02  9.35e-01  2.14e+01  1.00e+00  1.01e+00   ------   
  1  +5.9238e-01  +5.1847e+01  5.13e+01  3.64e-01  1.27e+01  3.91e-03  5.29e-01  6.27e-01  
  2  +5.3877e-01  +6.9646e+00  6.43e+00  1.18e-01  5.10e+00  1.18e-02  2.33e-01  8.57e-01  
  3  +5.0124e-01  +1.2769e+00  7.76e-01  2.32e-02  9.79e-01  1.32e-04  1.93e-01  6.47e-01  
  4  +5.0007e-01  +6.5201e-01  1.52e-01  4.59e-03  2.00e-01  3.23e-05  4.25e-02  8.19e-01  
  5  +4.9591e-01  +6.7452e-01  1.79e-01  2.51e-03  1.11e-01  1.45e-04  8.63e-03  8.70e-01  
  6  +4.8163e-01  +5.6738e-01  8.57e-02  4.65e-04  2.06e-02  2.51e-04  1.52e-03  8.31e-01  
  7  +4.7121e-01  +5.1477e-01  4.36e-02  2.07e-04  9.17e-03  1.04e-04  7.39e-04  6.28e-01  
  8  +4.6517e-01  +4.8138e-01  1.62e-02  7.39e-05  3.27e-03  1.44e-05  2.93e-04  9.80e-01  
  9  +4.6037e-01  +4.6111e-01  7.46e-04  3.09e-06  1.37e-04  5.64e-07  1.37e-05  9.62e-01  
 10  +4.6010e-01  +4.6011e-01  7.65e-06  3.14e-08  1.39e-06  5.77e-09  1.40e-07  9.90e-01  
 11  +4.6010e-01  +4.6010e-01  7.65e-08  3.14e-10  1.39e-08  5.77e-11  1.40e-09  9.90e-01  
 12  +4.6010e-01  +4.6010e-01  7.65e-10  3.14e-12  1.39e-10  5.79e-13  1.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4697ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:56 PM: Optimal value: 4.601e-01
(CVXPY) Aug 30 12:08:56 PM: Compilation took 1.564e-02 seconds
(CVXPY) Aug 30 12:08:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:56 PM: Your problem has 273 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 273
  constraints   = 523
  nnz(P)        = 0
  nnz(A)        = 2703
  cones (total) = 1
    : Nonnegative = 1,  numel = 523

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +2.5135e+02  2.51e+02  9.36e-01  2.21e+01  1.00e+00  1.01e+00   ------   
  1  +5.8939e-01  +5.2131e+01  5.15e+01  3.69e-01  1.31e+01  3.91e-03  5.35e-01  6.24e-01  
  2  +5.3622e-01  +6.7122e+00  6.18e+00  1.14e-01  5.07e+00  1.23e-02  2.28e-01  8.85e-01  
  3  +5.0243e-01  +1.5341e+00  1.03e+00  3.14e-02  1.36e+00  9.09e-04  1.88e-01  5.82e-01  
  4  +4.9979e-01  +8.3135e-01  3.32e-01  9.92e-03  4.43e-01  4.43e-04  5.82e-02  7.37e-01  
  5  +4.8403e-01  +9.5353e-01  4.69e-01  3.59e-03  1.65e-01  2.63e-03  1.14e-02  8.75e-01  
  6  +4.8328e-01  +8.8438e-01  4.01e-01  2.78e-03  1.28e-01  1.46e-03  8.85e-03  5.00e-01  
  7  +4.6455e-01  +7.0600e-01  2.41e-01  1.27e-03  5.83e-02  8.33e-04  4.29e-03  6.04e-01  
  8  +4.4070e-01  +5.1852e-01  7.78e-02  3.85e-04  1.76e-02  7.96e-06  1.45e-03  8.96e-01  
  9  +4.3067e-01  +4.6162e-01  3.09e-02  1.44e-04  6.59e-03  5.86e-06  5.55e-04  6.59e-01  
 10  +4.2960e-01  +4.5780e-01  2.82e-02  1.11e-04  5.11e-03  1.03e-05  4.01e-04  4.20e-01  
 11  +4.2705e-01  +4.4727e-01  2.02e-02  9.42e-05  4.29e-03  1.01e-05  3.79e-04  3.66e-01  
 12  +4.2294e-01  +4.2997e-01  7.03e-03  2.69e-05  1.24e-03  6.16e-06  1.02e-04  8.32e-01  
 13  +4.2060e-01  +4.2134e-01  7.36e-04  2.79e-06  1.29e-04  6.63e-07  1.08e-05  9.12e-01  
 14  +4.2031e-01  +4.2033e-01  1.81e-05  6.77e-08  3.12e-06  1.80e-08  2.67e-07  9.86e-01  
 15  +4.2030e-01  +4.2030e-01  1.81e-07  6.77e-10  3.12e-08  1.80e-10  2.68e-09  9.90e-01  
 16  +4.2030e-01  +4.2030e-01  1.81e-09  6.77e-12  3.12e-10  1.80e-12  2.68e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9905ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:56 PM: Optimal value: 4.203e-01
(CVXPY) Aug 30 12:08:56 PM: Compilation took 1.564e-02 seconds
(CVXPY) Aug 30 12:08:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:56 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 2964
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9920e-01  +2.5142e+02  2.51e+02  9.36e-01  2.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8696e-01  +5.2281e+01  5.17e+01  3.73e-01  1.31e+01  3.90e-03  5.38e-01  6.22e-01  
  2  +5.3463e-01  +6.5536e+00  6.02e+00  1.12e-01  4.93e+00  1.26e-02  2.23e-01  9.03e-01  
  3  +5.0186e-01  +1.4917e+00  9.90e-01  3.04e-02  1.33e+00  9.56e-04  1.76e-01  6.69e-01  
  4  +4.9879e-01  +8.6348e-01  3.65e-01  1.04e-02  4.68e-01  6.30e-04  4.99e-02  7.63e-01  
  5  +4.8452e-01  +8.3104e-01  3.47e-01  3.34e-03  1.54e-01  2.28e-03  1.05e-02  8.30e-01  
  6  +4.8510e-01  +8.5065e-01  3.66e-01  3.03e-03  1.41e-01  2.07e-03  9.28e-03  3.44e-01  
  7  +4.6385e-01  +7.2523e-01  2.61e-01  1.29e-03  5.99e-02  2.25e-03  4.06e-03  5.92e-01  
  8  +4.3906e-01  +5.7483e-01  1.36e-01  6.39e-04  2.94e-02  1.31e-04  2.19e-03  7.79e-01  
  9  +4.2878e-01  +5.3150e-01  1.03e-01  4.55e-04  2.10e-02  9.79e-05  1.60e-03  3.03e-01  
 10  +4.1495e-01  +4.7262e-01  5.77e-02  2.40e-04  1.11e-02  5.36e-05  8.90e-04  5.23e-01  
 11  +4.0381e-01  +4.2459e-01  2.08e-02  8.29e-05  3.83e-03  2.20e-05  3.20e-04  9.90e-01  
 12  +3.9687e-01  +3.9791e-01  1.04e-03  4.11e-06  1.89e-04  1.00e-06  1.64e-05  9.64e-01  
 13  +3.9656e-01  +3.9671e-01  1.52e-04  6.01e-07  2.77e-05  1.52e-07  2.45e-06  9.90e-01  
 14  +3.9650e-01  +3.9650e-01  2.51e-06  9.97e-09  4.60e-07  2.45e-09  4.09e-08  9.84e-01  
 15  +3.9650e-01  +3.9650e-01  2.52e-08  1.00e-10  4.61e-09  2.46e-11  4.10e-10  9.90e-01  
 16  +3.9650e-01  +3.9650e-01  2.52e-10  1.00e-12  4.61e-11  2.46e-13  4.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2514ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:56 PM: Optimal value: 3.965e-01
(CVXPY) Aug 30 12:08:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3965
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:56 PM: Your problem has 293 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 293
  constraints   = 543
  nnz(P)        = 0
  nnz(A)        = 3109
  cones (total) = 1
    : Nonnegative = 1,  numel = 543

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9911e-01  +2.5141e+02  2.51e+02  9.37e-01  2.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8458e-01  +5.2391e+01  5.18e+01  3.76e-01  1.30e+01  3.90e-03  5.39e-01  6.21e-01  
  2  +5.3307e-01  +6.3918e+00  5.86e+00  1.08e-01  4.75e+00  1.29e-02  2.17e-01  9.20e-01  
  3  +5.0182e-01  +1.5172e+00  1.02e+00  3.15e-02  1.36e+00  1.12e-03  1.65e-01  7.08e-01  
  4  +4.9819e-01  +8.9223e-01  3.94e-01  1.07e-02  4.81e-01  8.45e-04  4.46e-02  7.82e-01  
  5  +4.6899e-01  +8.4697e-01  3.78e-01  2.07e-03  9.62e-02  4.67e-03  6.15e-03  9.11e-01  
  6  +4.5989e-01  +7.9843e-01  3.39e-01  1.64e-03  7.61e-02  4.26e-03  4.91e-03  2.37e-01  
  7  +4.3569e-01  +6.1729e-01  1.82e-01  8.57e-04  3.94e-02  4.06e-05  2.80e-03  8.06e-01  
  8  +4.1945e-01  +5.4225e-01  1.23e-01  5.41e-04  2.49e-02  3.24e-05  1.85e-03  3.76e-01  
  9  +3.9663e-01  +4.4160e-01  4.50e-02  1.81e-04  8.33e-03  3.06e-05  6.67e-04  8.27e-01  
 10  +3.9522e-01  +4.3396e-01  3.87e-02  1.60e-04  7.36e-03  2.69e-05  6.14e-04  2.32e-01  
 11  +3.9492e-01  +4.3267e-01  3.78e-02  1.55e-04  7.17e-03  2.69e-05  5.97e-04  7.08e-02  
 12  +3.9385e-01  +4.3043e-01  3.66e-02  1.44e-04  6.63e-03  3.22e-05  5.35e-04  3.98e-01  
 13  +3.8203e-01  +3.8535e-01  3.32e-03  1.29e-05  5.94e-04  3.04e-06  5.06e-05  9.45e-01  
 14  +3.8081e-01  +3.8085e-01  3.47e-05  1.35e-07  6.21e-06  3.16e-08  5.33e-07  9.90e-01  
 15  +3.8080e-01  +3.8080e-01  3.47e-07  1.35e-09  6.21e-08  3.16e-10  5.33e-09  9.90e-01  
 16  +3.8080e-01  +3.8080e-01  3.47e-09  1.35e-11  6.21e-10  3.16e-12  5.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4468ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:56 PM: Optimal value: 3.808e-01
(CVXPY) Aug 30 12:08:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:56 PM: Solver (including time spent in interface) took 1.560e-02 seconds
Iteration: 4, Objective: 0.3808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:56 PM: Your problem has 303 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 303
  constraints   = 553
  nnz(P)        = 0
  nnz(A)        = 3263
  cones (total) = 1
    : Nonnegative = 1,  numel = 553

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9863e-01  +2.5140e+02  2.51e+02  9.38e-01  2.21e+01  1.00e+00  1.02e+00   ------   
  1  +5.7886e-01  +5.2704e+01  5.21e+01  3.82e-01  1.29e+01  3.90e-03  5.44e-01  6.17e-01  
  2  +5.2867e-01  +5.9405e+00  5.41e+00  9.95e-02  4.39e+00  1.37e-02  2.03e-01  9.69e-01  
  3  +5.0193e-01  +1.7390e+00  1.24e+00  3.68e-02  1.60e+00  2.58e-03  1.36e-01  7.72e-01  
  4  +4.9059e-01  +1.1150e+00  6.24e-01  9.39e-03  4.31e-01  3.92e-03  2.75e-02  8.41e-01  
  5  +4.7195e-01  +9.4854e-01  4.77e-01  3.84e-03  1.77e-01  4.94e-03  1.12e-02  6.54e-01  
  6  +4.5422e-01  +8.2985e-01  3.76e-01  2.21e-03  1.02e-01  3.78e-03  6.59e-03  5.53e-01  
  7  +4.3468e-01  +7.1264e-01  2.78e-01  1.42e-03  6.49e-02  1.90e-03  4.46e-03  5.21e-01  
  8  +3.9975e-01  +4.9841e-01  9.87e-02  4.77e-04  2.15e-02  1.76e-05  1.72e-03  8.54e-01  
  9  +3.8867e-01  +4.4627e-01  5.76e-02  2.67e-04  1.20e-02  1.29e-05  1.02e-03  4.44e-01  
 10  +3.7959e-01  +4.0224e-01  2.27e-02  1.02e-04  4.59e-03  2.09e-05  4.11e-04  9.90e-01  
 11  +3.7314e-01  +3.7421e-01  1.07e-03  4.78e-06  2.14e-04  8.68e-07  2.02e-05  9.59e-01  
 12  +3.7287e-01  +3.7306e-01  1.98e-04  8.71e-07  3.89e-05  1.61e-07  3.86e-06  8.80e-01  
 13  +3.7280e-01  +3.7281e-01  5.51e-06  2.41e-08  1.08e-06  4.46e-09  1.08e-07  9.90e-01  
 14  +3.7280e-01  +3.7280e-01  5.52e-08  2.42e-10  1.08e-08  4.48e-11  1.09e-09  9.90e-01  
 15  +3.7280e-01  +3.7280e-01  5.67e-10  2.48e-12  1.11e-10  4.61e-13  1.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6194ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:56 PM: Optimal value: 3.728e-01
(CVXPY) Aug 30 12:08:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.3728
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:56 PM: Your problem has 313 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 313
  constraints   = 563
  nnz(P)        = 0
  nnz(A)        = 3389
  cones (total) = 1
    : Nonnegative = 1,  numel = 563

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9857e-01  +2.5132e+02  2.51e+02  9.38e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.7763e-01  +5.2814e+01  5.22e+01  3.84e-01  1.28e+01  3.90e-03  5.46e-01  6.16e-01  
  2  +5.2737e-01  +5.8032e+00  5.28e+00  9.72e-02  4.25e+00  1.39e-02  2.00e-01  9.83e-01  
  3  +5.0014e-01  +1.4633e+00  9.63e-01  2.89e-02  1.26e+00  1.98e-03  1.12e-01  9.66e-01  
  4  +4.7904e-01  +1.0917e+00  6.13e-01  5.94e-03  2.73e-01  5.32e-03  1.70e-02  8.95e-01  
  5  +4.6156e-01  +1.0113e+00  5.50e-01  3.37e-03  1.55e-01  5.69e-03  9.64e-03  5.65e-01  
  6  +4.4114e-01  +8.4344e-01  4.02e-01  2.08e-03  9.49e-02  3.94e-03  6.28e-03  4.06e-01  
  7  +4.0647e-01  +5.6499e-01  1.59e-01  7.90e-04  3.55e-02  3.62e-04  2.72e-03  7.87e-01  
  8  +3.9386e-01  +4.9831e-01  1.04e-01  4.99e-04  2.23e-02  2.13e-04  1.81e-03  4.54e-01  
  9  +3.8125e-01  +4.3447e-01  5.32e-02  2.43e-04  1.08e-02  9.83e-05  9.34e-04  5.72e-01  
 10  +3.7308e-01  +3.9297e-01  1.99e-02  8.92e-05  3.98e-03  2.03e-05  3.59e-04  9.90e-01  
 11  +3.6748e-01  +3.6925e-01  1.77e-03  7.86e-06  3.50e-04  1.68e-06  3.31e-05  9.19e-01  
 12  +3.6693e-01  +3.6702e-01  9.18e-05  4.04e-07  1.80e-05  7.83e-08  1.74e-06  9.87e-01  
 13  +3.6690e-01  +3.6690e-01  9.53e-07  4.19e-09  1.87e-07  8.11e-10  1.81e-08  9.90e-01  
 14  +3.6690e-01  +3.6690e-01  9.55e-09  4.20e-11  1.87e-09  8.12e-12  1.81e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.526ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:56 PM: Optimal value: 3.669e-01
(CVXPY) Aug 30 12:08:56 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:08:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.3669
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:56 PM: Your problem has 321 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 321
  constraints   = 571
  nnz(P)        = 0
  nnz(A)        = 3491
  cones (total) = 1
    : Nonnegative = 1,  numel = 571

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9857e-01  +2.5133e+02  2.51e+02  9.39e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.7730e-01  +5.2797e+01  5.22e+01  3.86e-01  1.27e+01  3.90e-03  5.46e-01  6.16e-01  
  2  +5.2682e-01  +5.7363e+00  5.21e+00  9.61e-02  4.15e+00  1.39e-02  1.98e-01  9.88e-01  
  3  +5.0027e-01  +1.4979e+00  9.98e-01  2.96e-02  1.29e+00  2.19e-03  1.09e-01  9.54e-01  
  4  +4.8022e-01  +1.1843e+00  7.04e-01  6.86e-03  3.13e-01  5.64e-03  1.96e-02  8.76e-01  
  5  +4.6135e-01  +1.0574e+00  5.96e-01  3.80e-03  1.74e-01  5.79e-03  1.10e-02  5.31e-01  
  6  +4.4222e-01  +9.0108e-01  4.59e-01  2.39e-03  1.08e-01  4.34e-03  7.22e-03  4.16e-01  
  7  +4.1546e-01  +6.5079e-01  2.35e-01  1.24e-03  5.54e-02  4.19e-04  4.19e-03  7.43e-01  
  8  +3.8480e-01  +4.6040e-01  7.56e-02  3.71e-04  1.64e-02  9.55e-05  1.42e-03  7.13e-01  
  9  +3.8053e-01  +4.3875e-01  5.82e-02  2.78e-04  1.23e-02  7.10e-05  1.08e-03  3.41e-01  
 10  +3.7324e-01  +4.0306e-01  2.98e-02  1.39e-04  6.14e-03  2.92e-05  5.60e-04  8.79e-01  
 11  +3.6636e-01  +3.7128e-01  4.91e-03  2.26e-05  9.98e-04  4.64e-06  9.54e-05  8.49e-01  
 12  +3.6565e-01  +3.6807e-01  2.42e-03  1.10e-05  4.85e-04  2.24e-06  4.68e-05  6.71e-01  
 13  +3.6499e-01  +3.6526e-01  2.72e-04  1.22e-06  5.37e-05  2.52e-07  5.25e-06  9.07e-01  
 14  +3.6490e-01  +3.6491e-01  7.38e-06  3.29e-08  1.45e-06  6.59e-09  1.43e-07  9.81e-01  
 15  +3.6490e-01  +3.6490e-01  7.38e-08  3.29e-10  1.45e-08  6.60e-11  1.43e-09  9.90e-01  
 16  +3.6490e-01  +3.6490e-01  7.43e-10  3.31e-12  1.46e-10  6.65e-13  1.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.9675ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:56 PM: Optimal value: 3.649e-01
(CVXPY) Aug 30 12:08:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.3649
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:56 PM: Your problem has 327 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:56 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 327
  constraints   = 577
  nnz(P)        = 0
  nnz(A)        = 3573
  cones (total) = 1
    : Nonnegative = 1,  numel = 577

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9854e-01  +2.5130e+02  2.51e+02  9.39e-01  2.18e+01  1.00e+00  1.02e+00   ------   
  1  +5.7619e-01  +5.2843e+01  5.23e+01  3.87e-01  1.26e+01  3.89e-03  5.47e-01  6.15e-01  
  2  +5.2585e-01  +5.7282e+00  5.20e+00  9.57e-02  4.10e+00  1.40e-02  1.98e-01  9.90e-01  
  3  +5.0090e-01  +1.4781e+00  9.77e-01  2.80e-02  1.23e+00  2.03e-03  9.27e-02  9.37e-01  
  4  +4.8502e-01  +1.3683e+00  8.83e-01  9.16e-03  4.17e-01  4.75e-03  2.58e-02  7.80e-01  
  5  +4.6741e-01  +1.1400e+00  6.73e-01  5.04e-03  2.29e-01  4.07e-03  1.45e-02  5.07e-01  
  6  +4.4403e-01  +9.1950e-01  4.75e-01  2.59e-03  1.17e-01  2.92e-03  7.82e-03  5.67e-01  
  7  +4.2462e-01  +7.1817e-01  2.94e-01  1.70e-03  7.59e-02  5.80e-04  5.66e-03  5.48e-01  
  8  +3.8702e-01  +4.8775e-01  1.01e-01  4.93e-04  2.18e-02  1.15e-04  1.87e-03  8.18e-01  
  9  +3.8245e-01  +4.6664e-01  8.42e-02  4.01e-04  1.77e-02  9.54e-05  1.55e-03  2.38e-01  
 10  +3.6806e-01  +3.9431e-01  2.62e-02  1.22e-04  5.37e-03  2.64e-05  5.16e-04  7.85e-01  
 11  +3.6252e-01  +3.6780e-01  5.28e-03  2.43e-05  1.07e-03  5.25e-06  1.07e-04  8.12e-01  
 12  +3.6230e-01  +3.6675e-01  4.45e-03  2.01e-05  8.84e-04  4.28e-06  8.85e-05  4.05e-01  
 13  +3.6130e-01  +3.6252e-01  1.22e-03  5.34e-06  2.35e-04  1.19e-06  2.40e-05  7.50e-01  
 14  +3.6095e-01  +3.6110e-01  1.50e-04  6.47e-07  2.84e-05  1.44e-07  2.95e-06  8.84e-01  
 15  +3.6090e-01  +3.6090e-01  2.95e-06  1.27e-08  5.57e-07  2.66e-09  5.80e-08  9.90e-01  
 16  +3.6090e-01  +3.6090e-01  2.95e-08  1.27e-10  5.57e-09  2.66e-11  5.81e-10  9.90e-01  
 17  +3.6090e-01  +3.6090e-01  2.95e-10  1.27e-12  5.57e-11  2.67e-13  5.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3007ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:56 PM: Optimal value: 3.609e-01
(CVXPY) Aug 30 12:08:56 PM: Compilation took 1.564e-02 seconds
(CVXPY) Aug 30 12:08:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.626
  Our objective: 0.252

IF 
    (x0 = 1 AND x5 = 1 AND x1 = 0 AND x4 = 0)                       <-- (term's our objective: 0.031999999999999945)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.05999999999999997)
 OR (x1 = 1 AND x0 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.036000000000000046)
 OR (x2 = 1 AND x4 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0)            <-- (term's our objective: 0.02400000000000004)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 1 AND x3 = 0)            <-- (term's our objective: 0.028000000000000042)
 OR (x1 = 1 AND x5 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.020000000000000035)
 OR (x3 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.016000000000000018)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.016000000000000025)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0 AND x5 = 0) <-- (term's our objective: 0.020000000000000025)
 OR (x1 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.012000000000000018)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.05999999999999997
    Its accruacy: 0.53
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.05999999999999997
  Highest accruacy: 0.53
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

