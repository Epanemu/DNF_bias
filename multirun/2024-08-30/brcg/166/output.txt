Command:
python test_script.py -s smallest_subclass -d 5 -n 50 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.08
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.6799999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:38 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:38 PM: Finished problem compilation (took 6.136e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9334e-01  +2.5904e+01  2.54e+01  8.19e-01  5.77e+00  1.00e+00  1.07e+00   ------   
  1  +5.8858e-01  +5.4239e+00  4.84e+00  3.04e-01  3.08e+00  3.95e-03  5.35e-01  6.49e-01  
  2  +5.1253e-01  +9.9602e-01  4.83e-01  5.33e-02  6.37e-01  1.25e-02  1.51e-01  9.90e-01  
  3  +4.8514e-01  +8.8823e-01  4.03e-01  2.47e-02  3.07e-01  1.47e-02  7.78e-02  5.70e-01  
  4  +4.4570e-01  +6.3860e-01  1.93e-01  8.78e-03  1.10e-01  7.51e-03  3.22e-02  6.08e-01  
  5  +4.0810e-01  +4.3071e-01  2.26e-02  9.82e-04  1.22e-02  2.17e-04  4.69e-03  9.32e-01  
  6  +4.0025e-01  +4.0068e-01  4.32e-04  1.83e-05  2.26e-04  3.39e-06  9.35e-05  9.83e-01  
  7  +4.0010e-01  +4.0011e-01  4.32e-06  1.83e-07  2.26e-06  3.38e-08  9.35e-07  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  4.32e-08  1.83e-09  2.26e-08  3.38e-10  9.35e-09  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  4.32e-10  1.83e-11  2.26e-10  3.38e-12  9.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 214.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:38 PM: Optimal value: 4.001e-01
(CVXPY) Aug 30 12:05:38 PM: Compilation took 6.136e-03 seconds
(CVXPY) Aug 30 12:05:38 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:38 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:38 PM: Finished problem compilation (took 6.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 289
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8185e-01  +2.6620e+01  2.61e+01  8.33e-01  6.08e+00  1.00e+00  1.11e+00   ------   
  1  +5.3522e-01  +5.6425e+00  5.11e+00  3.28e-01  3.23e+00  3.95e-03  5.69e-01  6.33e-01  
  2  +4.5471e-01  +1.2351e+00  7.80e-01  7.13e-02  8.84e-01  1.53e-02  1.94e-01  9.00e-01  
  3  +3.8990e-01  +8.5199e-01  4.62e-01  2.90e-02  3.65e-01  1.04e-02  8.97e-02  6.34e-01  
  4  +3.1548e-01  +5.8641e-01  2.71e-01  1.07e-02  1.37e-01  7.32e-03  3.71e-02  6.89e-01  
  5  +2.5074e-01  +2.7866e-01  2.79e-02  1.08e-03  1.36e-02  6.68e-05  4.29e-03  9.48e-01  
  6  +2.4055e-01  +2.4113e-01  5.86e-04  2.28e-05  2.86e-04  2.31e-06  9.35e-05  9.83e-01  
  7  +2.4032e-01  +2.4034e-01  2.86e-05  1.16e-06  1.43e-05  2.54e-08  5.30e-06  9.44e-01  
  8  +2.4030e-01  +2.4030e-01  2.96e-07  1.21e-08  1.49e-07  3.53e-10  5.80e-08  9.89e-01  
  9  +2.4030e-01  +2.4030e-01  2.96e-09  1.20e-10  1.49e-09  3.53e-12  5.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 191.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:38 PM: Optimal value: 2.403e-01
(CVXPY) Aug 30 12:05:38 PM: Compilation took 6.006e-03 seconds
(CVXPY) Aug 30 12:05:38 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:38 PM: Your problem has 53 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:38 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 53
  constraints   = 78
  nnz(P)        = 0
  nnz(A)        = 314
  cones (total) = 1
    : Nonnegative = 1,  numel = 78

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7693e-01  +2.6684e+01  2.62e+01  8.40e-01  5.92e+00  1.00e+00  1.11e+00   ------   
  1  +4.9921e-01  +5.6759e+00  5.18e+00  3.32e-01  3.09e+00  4.02e-03  5.66e-01  6.30e-01  
  2  +4.0726e-01  +1.1855e+00  7.78e-01  6.17e-02  7.49e-01  1.66e-02  1.64e-01  9.32e-01  
  3  +2.7217e-01  +6.3829e-01  3.66e-01  1.64e-02  2.03e-01  1.11e-02  5.15e-02  7.67e-01  
  4  +2.1359e-01  +3.8980e-01  1.76e-01  7.27e-03  9.03e-02  4.43e-03  2.48e-02  6.20e-01  
  5  +1.6714e-01  +1.8759e-01  2.05e-02  8.13e-04  9.98e-03  3.80e-04  3.02e-03  8.93e-01  
  6  +1.6085e-01  +1.6154e-01  6.96e-04  2.81e-05  3.43e-04  9.71e-06  1.07e-04  9.65e-01  
  7  +1.6063e-01  +1.6069e-01  6.01e-05  2.62e-06  3.12e-05  4.94e-07  1.09e-05  9.58e-01  
  8  +1.6060e-01  +1.6060e-01  6.84e-07  3.01e-08  3.58e-07  5.18e-09  1.27e-07  9.88e-01  
  9  +1.6060e-01  +1.6060e-01  6.84e-09  3.01e-10  3.58e-09  5.18e-11  1.27e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 235.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:38 PM: Optimal value: 1.606e-01
(CVXPY) Aug 30 12:05:38 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:05:38 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.6799999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.16000000000000003)
 OR (x1 = 1 AND x3 = 1 AND x0 = 0 AND x4 = 0) <-- (term's our objective: 0.19999999999999996)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x2 = 0) <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x2 = 1 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x2 = 1 AND x1 = 0 AND x4 = 0) <-- (term's our objective: 0.07999999999999996)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.07999999999999996)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 5
  Shortest hamming distance: 1
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

