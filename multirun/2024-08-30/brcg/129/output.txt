Command:
python test_script.py -s smallest_subclass -d 4 -n 50 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.48
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:59 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:59 PM: Finished problem compilation (took 1.720e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9216e-01  +2.6085e+01  2.56e+01  8.13e-01  5.39e+00  1.00e+00  1.08e+00   ------   
  1  +5.9251e-01  +5.2628e+00  4.67e+00  2.79e-01  2.73e+00  4.05e-03  5.05e-01  6.75e-01  
  2  +5.0726e-01  +1.1036e+00  5.96e-01  5.70e-02  6.47e-01  1.05e-02  1.55e-01  8.94e-01  
  3  +4.5738e-01  +8.5006e-01  3.93e-01  2.19e-02  2.59e-01  9.67e-03  6.72e-02  6.41e-01  
  4  +4.1432e-01  +4.8915e-01  7.48e-02  4.35e-03  5.03e-02  8.92e-04  1.66e-02  8.06e-01  
  5  +4.0137e-01  +4.0746e-01  6.09e-03  3.58e-04  4.11e-03  6.68e-05  1.49e-03  9.18e-01  
  6  +4.0022e-01  +4.0061e-01  3.93e-04  2.29e-05  2.63e-04  4.60e-06  9.57e-05  9.37e-01  
  7  +4.0019e-01  +4.0050e-01  3.11e-04  1.43e-05  1.65e-04  3.96e-06  6.10e-05  5.50e-01  
  8  +4.0010e-01  +4.0011e-01  5.39e-06  2.47e-07  2.86e-06  5.69e-08  1.06e-06  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  5.40e-08  2.47e-09  2.87e-08  5.70e-10  1.06e-08  9.90e-01  
 10  +4.0010e-01  +4.0010e-01  5.40e-10  2.47e-11  2.87e-10  5.72e-12  1.06e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9106ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:59 PM: Optimal value: 4.001e-01
(CVXPY) Aug 30 12:03:59 PM: Compilation took 1.720e-02 seconds
(CVXPY) Aug 30 12:03:59 PM: Solver (including time spent in interface) took 3.999e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:59 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:59 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 258
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7254e-01  +2.6643e+01  2.62e+01  8.32e-01  5.69e+00  1.00e+00  1.13e+00   ------   
  1  +5.2935e-01  +5.3876e+00  4.86e+00  3.04e-01  2.84e+00  4.00e-03  5.43e-01  6.64e-01  
  2  +4.3232e-01  +1.3411e+00  9.09e-01  7.06e-02  8.17e-01  1.21e-02  1.91e-01  8.16e-01  
  3  +3.6581e-01  +6.5838e-01  2.93e-01  2.02e-02  2.35e-01  3.90e-03  6.63e-02  7.30e-01  
  4  +3.4028e-01  +5.5841e-01  2.18e-01  9.43e-03  1.17e-01  3.81e-03  3.18e-02  7.82e-01  
  5  +3.0740e-01  +4.0940e-01  1.02e-01  3.97e-03  5.30e-02  1.77e-03  1.40e-02  6.47e-01  
  6  +2.7910e-01  +3.2200e-01  4.29e-02  1.43e-03  2.07e-02  4.52e-04  5.39e-03  9.55e-01  
  7  +2.6168e-01  +2.6430e-01  2.62e-03  8.41e-05  1.21e-03  2.26e-05  3.32e-04  9.47e-01  
  8  +2.6043e-01  +2.6048e-01  5.06e-05  1.66e-06  2.37e-05  2.23e-07  6.63e-06  9.80e-01  
  9  +2.6040e-01  +2.6040e-01  6.19e-07  2.08e-08  2.91e-07  2.88e-09  8.42e-08  9.87e-01  
 10  +2.6040e-01  +2.6040e-01  6.19e-09  2.08e-10  2.91e-09  2.88e-11  8.42e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 228.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:59 PM: Optimal value: 2.604e-01
(CVXPY) Aug 30 12:03:59 PM: Compilation took 2.999e-03 seconds
(CVXPY) Aug 30 12:03:59 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Iteration: 2, Objective: 0.2604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:59 PM: Your problem has 45 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:59 PM: Finished problem compilation (took 2.977e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 45
  constraints   = 70
  nnz(P)        = 0
  nnz(A)        = 261
  cones (total) = 1
    : Nonnegative = 1,  numel = 70

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7256e-01  +2.6644e+01  2.62e+01  8.33e-01  5.67e+00  1.00e+00  1.13e+00   ------   
  1  +5.2854e-01  +5.3684e+00  4.84e+00  3.04e-01  2.82e+00  3.99e-03  5.42e-01  6.65e-01  
  2  +4.3186e-01  +1.3653e+00  9.33e-01  7.09e-02  8.19e-01  1.20e-02  1.91e-01  8.09e-01  
  3  +3.6572e-01  +6.9117e-01  3.25e-01  2.16e-02  2.52e-01  4.39e-03  6.95e-02  7.06e-01  
  4  +3.2992e-01  +4.8786e-01  1.58e-01  7.04e-03  8.67e-02  3.23e-03  2.40e-02  7.44e-01  
  5  +3.0806e-01  +4.1369e-01  1.06e-01  4.14e-03  5.63e-02  2.21e-03  1.42e-02  5.46e-01  
  6  +2.7536e-01  +3.1063e-01  3.53e-02  1.23e-03  1.77e-02  3.95e-04  4.59e-03  8.66e-01  
  7  +2.6128e-01  +2.6328e-01  1.99e-03  6.64e-05  9.65e-04  1.95e-05  2.57e-04  9.46e-01  
  8  +2.6064e-01  +2.6107e-01  4.35e-04  1.46e-05  2.08e-04  4.85e-06  5.74e-05  8.48e-01  
  9  +2.6041e-01  +2.6044e-01  2.50e-05  8.37e-07  1.17e-05  2.75e-07  3.39e-06  9.67e-01  
 10  +2.6040e-01  +2.6040e-01  2.60e-07  8.75e-09  1.21e-07  2.80e-09  3.56e-08  9.90e-01  
 11  +2.6040e-01  +2.6040e-01  2.60e-09  8.75e-11  1.21e-09  2.80e-11  3.56e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 621.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:59 PM: Optimal value: 2.604e-01
(CVXPY) Aug 30 12:03:59 PM: Compilation took 2.977e-03 seconds
(CVXPY) Aug 30 12:03:59 PM: Solver (including time spent in interface) took 1.043e-03 seconds
FULL MODEL:
  Accruacy: 0.74
  Our objective: 0.48

IF 
    (x0 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.15999999999999995)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.2)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.24)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.19999999999999996)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.24
    Its accruacy: 0.62
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.2
  Highest accruacy: 0.62
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

