Command:
python test_script.py -s smallest_subclass -d 8 -n 10000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0046
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 8.

Computed total variation: 0.14479999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:29 PM: Your problem has 5017 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:29 PM: Finished problem compilation (took 1.780e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5017
  constraints   = 10017
  nnz(P)        = 0
  nnz(A)        = 55017
  cones (total) = 1
    : Nonnegative = 1,  numel = 10017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.11e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +1.0695e+03  1.07e+03  4.19e-01  7.07e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3486e-01  +1.2656e+02  1.26e+02  1.63e-01  3.53e+01  1.47e-02  2.66e-01  9.00e-01  
  3  +5.0935e-01  +3.2823e+01  3.23e+01  1.22e-01  2.62e+01  3.96e-05  2.53e-01  2.13e-01  
  4  +5.0088e-01  +2.7276e+00  2.23e+00  1.51e-02  3.29e+00  5.38e-06  1.65e-01  6.33e-01  
  5  +5.0008e-01  +8.3771e-01  3.38e-01  2.26e-03  5.02e-01  2.83e-05  9.12e-02  9.90e-01  
  6  +5.0001e-01  +5.4153e-01  4.15e-02  2.77e-04  6.16e-02  4.94e-06  1.49e-02  8.53e-01  
  7  +5.0000e-01  +5.3188e-01  3.19e-02  2.12e-04  4.71e-02  5.81e-06  5.51e-03  7.78e-01  
  8  +5.0000e-01  +5.3579e-01  3.58e-02  2.33e-04  5.18e-02  7.37e-06  3.16e-03  6.96e-01  
  9  +4.9975e-01  +5.2460e-01  2.48e-02  2.92e-05  6.52e-03  1.40e-04  9.63e-05  9.73e-01  
 10  +4.9865e-01  +5.2153e-01  2.29e-02  6.05e-06  1.35e-03  6.04e-04  1.91e-05  8.08e-01  
 11  +4.9707e-01  +5.1201e-01  1.49e-02  4.81e-06  1.08e-03  1.42e-04  1.58e-05  3.72e-01  
 12  +4.9602e-01  +5.0682e-01  1.08e-02  3.06e-06  6.85e-04  1.41e-05  1.03e-05  8.25e-01  
 13  +4.9393e-01  +4.9753e-01  3.61e-03  8.78e-07  1.96e-04  1.57e-06  3.04e-06  8.69e-01  
 14  +4.9317e-01  +4.9428e-01  1.11e-03  2.55e-07  5.69e-05  2.66e-07  8.99e-07  8.47e-01  
 15  +4.9287e-01  +4.9303e-01  1.68e-04  3.57e-08  7.98e-06  1.10e-08  1.36e-07  9.89e-01  
 16  +4.9280e-01  +4.9280e-01  2.95e-06  5.86e-10  1.31e-07  1.88e-10  2.37e-09  9.85e-01  
 17  +4.9280e-01  +4.9280e-01  2.95e-08  5.85e-12  1.31e-09  1.88e-12  2.37e-11  9.90e-01  
 18  +4.9280e-01  +4.9280e-01  3.02e-10  6.00e-14  1.34e-11  4.31e-14  5.19e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.2748ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:29 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:29 PM: Optimal value: 4.928e-01
(CVXPY) Aug 30 12:19:29 PM: Compilation took 1.780e-02 seconds
(CVXPY) Aug 30 12:19:29 PM: Solver (including time spent in interface) took 6.986e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4928
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:29 PM: Your problem has 5027 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:29 PM: Finished problem compilation (took 2.241e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5027
  constraints   = 10027
  nnz(P)        = 0
  nnz(A)        = 60785
  cones (total) = 1
    : Nonnegative = 1,  numel = 10027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.12e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +1.0696e+03  1.07e+03  4.19e-01  7.18e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3480e-01  +1.2644e+02  1.26e+02  1.63e-01  3.58e+01  1.47e-02  2.66e-01  9.00e-01  
  3  +5.0933e-01  +3.2779e+01  3.23e+01  1.22e-01  2.66e+01  3.96e-05  2.53e-01  2.14e-01  
  4  +5.0088e-01  +2.7187e+00  2.22e+00  1.51e-02  3.33e+00  5.40e-06  1.65e-01  6.37e-01  
  5  +5.0009e-01  +8.4627e-01  3.46e-01  2.32e-03  5.23e-01  2.83e-05  8.95e-02  9.90e-01  
  6  +5.0002e-01  +6.0939e-01  1.09e-01  7.31e-04  1.65e-01  1.09e-05  3.25e-02  6.80e-01  
  7  +5.0002e-01  +5.8568e-01  8.57e-02  5.71e-04  1.29e-01  9.49e-06  1.54e-02  7.40e-01  
  8  +5.0000e-01  +5.7856e-01  7.86e-02  5.13e-04  1.16e-01  1.48e-05  7.00e-03  5.86e-01  
  9  +4.9953e-01  +5.5361e-01  5.41e-02  6.47e-05  1.47e-02  2.68e-04  2.17e-04  9.76e-01  
 10  +4.9775e-01  +5.4636e-01  4.86e-02  1.56e-05  3.53e-03  9.63e-04  5.00e-05  7.81e-01  
 11  +4.9613e-01  +5.3341e-01  3.73e-02  1.26e-05  2.87e-03  4.45e-04  4.13e-05  3.56e-01  
 12  +4.9607e-01  +5.3273e-01  3.67e-02  1.23e-05  2.79e-03  3.64e-04  4.00e-05  1.71e-01  
 13  +4.9482e-01  +5.2587e-01  3.11e-02  9.05e-06  2.06e-03  3.01e-04  2.95e-05  3.25e-01  
 14  +4.9442e-01  +5.2281e-01  2.84e-02  7.04e-06  1.60e-03  5.02e-05  2.24e-05  8.35e-01  
 15  +4.9386e-01  +5.1974e-01  2.59e-02  6.43e-06  1.46e-03  1.54e-05  2.02e-05  5.85e-01  
 16  +4.9216e-01  +5.1210e-01  1.99e-02  4.35e-06  9.87e-04  1.06e-05  1.36e-05  4.41e-01  
 17  +4.8931e-01  +4.9876e-01  9.45e-03  1.71e-06  3.89e-04  7.36e-07  5.30e-06  9.90e-01  
 18  +4.8865e-01  +4.9672e-01  8.07e-03  1.36e-06  3.08e-04  6.30e-07  4.20e-06  3.20e-01  
 19  +4.8820e-01  +4.9523e-01  7.03e-03  1.32e-06  3.01e-04  4.66e-07  4.18e-06  9.74e-02  
 20  +4.8614e-01  +4.8825e-01  2.11e-03  3.35e-07  7.61e-05  1.64e-07  1.07e-06  7.80e-01  
 21  +4.8532e-01  +4.8536e-01  4.36e-05  6.86e-09  1.56e-06  3.22e-09  2.19e-08  9.83e-01  
 22  +4.8530e-01  +4.8530e-01  4.36e-07  6.86e-11  1.56e-08  3.22e-11  2.19e-10  9.90e-01  
 23  +4.8530e-01  +4.8530e-01  4.36e-09  6.86e-13  1.56e-10  3.33e-13  2.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.1566ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:29 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:29 PM: Optimal value: 4.853e-01
(CVXPY) Aug 30 12:19:29 PM: Compilation took 2.241e-02 seconds
(CVXPY) Aug 30 12:19:29 PM: Solver (including time spent in interface) took 1.001e-01 seconds
Iteration: 2, Objective: 0.4853
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:30 PM: Your problem has 5037 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:30 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:30 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:30 PM: Finished problem compilation (took 2.406e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5037
  constraints   = 10037
  nnz(P)        = 0
  nnz(A)        = 64290
  cones (total) = 1
    : Nonnegative = 1,  numel = 10037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8409e-01  +1.0697e+03  1.07e+03  4.19e-01  7.22e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3475e-01  +1.2635e+02  1.26e+02  1.63e-01  3.59e+01  1.47e-02  2.65e-01  9.01e-01  
  3  +5.0932e-01  +3.2740e+01  3.22e+01  1.22e-01  2.67e+01  3.97e-05  2.53e-01  2.15e-01  
  4  +5.0087e-01  +2.7046e+00  2.20e+00  1.50e-02  3.33e+00  5.42e-06  1.64e-01  6.41e-01  
  5  +5.0009e-01  +8.5689e-01  3.57e-01  2.40e-03  5.42e-01  2.84e-05  8.74e-02  9.90e-01  
  6  +5.0004e-01  +6.7478e-01  1.75e-01  1.17e-03  2.65e-01  1.58e-05  4.33e-02  6.13e-01  
  7  +5.0002e-01  +6.1084e-01  1.11e-01  7.38e-04  1.67e-01  1.38e-05  1.66e-02  7.48e-01  
  8  +4.9989e-01  +5.8467e-01  8.48e-02  3.59e-04  8.15e-02  7.99e-05  1.59e-03  9.40e-01  
  9  +4.9789e-01  +5.7847e-01  8.06e-02  3.22e-05  7.35e-03  1.13e-03  1.02e-04  9.36e-01  
 10  +4.9558e-01  +5.6015e-01  6.46e-02  2.20e-05  5.01e-03  8.28e-04  7.08e-05  4.32e-01  
 11  +4.9565e-01  +5.5931e-01  6.37e-02  2.10e-05  4.79e-03  6.18e-04  6.72e-05  2.62e-01  
 12  +4.9445e-01  +5.5182e-01  5.74e-02  1.70e-05  3.89e-03  4.79e-04  5.46e-05  3.26e-01  
 13  +4.9393e-01  +5.4820e-01  5.43e-02  1.69e-05  3.85e-03  3.59e-04  5.41e-05  1.35e-01  
 14  +4.9105e-01  +5.3054e-01  3.95e-02  1.12e-05  2.55e-03  1.08e-04  3.58e-05  6.61e-01  
 15  +4.8639e-01  +5.0887e-01  2.25e-02  4.66e-06  1.06e-03  1.85e-05  1.46e-05  9.46e-01  
 16  +4.8477e-01  +5.0368e-01  1.89e-02  3.54e-06  8.09e-04  1.32e-05  1.11e-05  3.74e-01  
 17  +4.8465e-01  +5.0321e-01  1.86e-02  3.53e-06  8.06e-04  1.23e-05  1.11e-05  3.81e-02  
 18  +4.8088e-01  +4.8862e-01  7.74e-03  1.43e-06  3.27e-04  1.24e-07  4.59e-06  9.34e-01  
 19  +4.7809e-01  +4.7868e-01  5.92e-04  1.01e-07  2.30e-05  1.18e-08  3.32e-07  9.34e-01  
 20  +4.7785e-01  +4.7786e-01  8.54e-06  1.44e-09  3.29e-07  1.78e-10  4.78e-09  9.86e-01  
 21  +4.7785e-01  +4.7785e-01  8.54e-08  1.44e-11  3.29e-09  1.78e-12  4.78e-11  9.90e-01  
 22  +4.7785e-01  +4.7785e-01  8.55e-10  1.44e-13  3.30e-11  1.90e-14  5.08e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.0494ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:30 PM: Optimal value: 4.779e-01
(CVXPY) Aug 30 12:19:30 PM: Compilation took 2.406e-02 seconds
(CVXPY) Aug 30 12:19:30 PM: Solver (including time spent in interface) took 1.043e-01 seconds
Iteration: 3, Objective: 0.4779
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:30 PM: Your problem has 5047 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:30 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:30 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:30 PM: Finished problem compilation (took 2.269e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5047
  constraints   = 10047
  nnz(P)        = 0
  nnz(A)        = 69748
  cones (total) = 1
    : Nonnegative = 1,  numel = 10047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8404e-01  +1.0698e+03  1.07e+03  4.19e-01  7.32e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3469e-01  +1.2623e+02  1.26e+02  1.63e-01  3.64e+01  1.47e-02  2.65e-01  9.01e-01  
  3  +5.0930e-01  +3.2701e+01  3.22e+01  1.22e-01  2.70e+01  3.97e-05  2.52e-01  2.16e-01  
  4  +5.0087e-01  +2.6989e+00  2.20e+00  1.49e-02  3.37e+00  5.43e-06  1.63e-01  6.44e-01  
  5  +5.0010e-01  +8.6605e-01  3.66e-01  2.46e-03  5.64e-01  2.86e-05  8.60e-02  9.90e-01  
  6  +5.0003e-01  +6.5541e-01  1.55e-01  1.04e-03  2.39e-01  1.60e-05  3.42e-02  6.99e-01  
  7  +5.0001e-01  +6.4027e-01  1.40e-01  9.23e-04  2.12e-01  2.57e-05  1.36e-02  6.80e-01  
  8  +4.9964e-01  +6.2670e-01  1.27e-01  3.13e-04  7.24e-02  2.24e-04  1.15e-03  9.29e-01  
  9  +4.9654e-01  +6.1273e-01  1.16e-01  4.00e-05  9.28e-03  1.73e-03  1.30e-04  8.88e-01  
 10  +4.9442e-01  +5.8669e-01  9.23e-02  3.25e-05  7.53e-03  1.01e-03  1.05e-04  3.10e-01  
 11  +4.9474e-01  +5.8319e-01  8.84e-02  3.10e-05  7.18e-03  6.85e-04  9.90e-05  2.94e-01  
 12  +4.9277e-01  +5.6844e-01  7.57e-02  2.24e-05  5.18e-03  4.96e-04  7.06e-05  4.57e-01  
 13  +4.9118e-01  +5.5913e-01  6.79e-02  1.77e-05  4.09e-03  3.96e-04  5.55e-05  3.42e-01  
 14  +4.9062e-01  +5.5621e-01  6.56e-02  1.73e-05  4.01e-03  3.22e-04  5.47e-05  1.20e-01  
 15  +4.8967e-01  +5.5081e-01  6.11e-02  1.57e-05  3.64e-03  2.48e-04  4.97e-05  2.24e-01  
 16  +4.8959e-01  +5.4897e-01  5.94e-02  1.53e-05  3.54e-03  1.71e-04  4.84e-05  2.53e-01  
 17  +4.8124e-01  +5.0986e-01  2.86e-02  6.08e-06  1.41e-03  6.09e-05  1.97e-05  6.94e-01  
 18  +4.7660e-01  +4.8809e-01  1.15e-02  2.25e-06  5.20e-04  1.28e-05  7.40e-06  8.13e-01  
 19  +4.7649e-01  +4.8739e-01  1.09e-02  2.20e-06  5.09e-04  1.13e-05  7.39e-06  1.92e-02  
 20  +4.7605e-01  +4.8607e-01  1.00e-02  1.89e-06  4.38e-04  8.17e-06  6.25e-06  4.02e-01  
 21  +4.7387e-01  +4.7785e-01  3.98e-03  7.18e-07  1.66e-04  1.41e-06  2.45e-06  8.47e-01  
 22  +4.7243e-01  +4.7273e-01  3.02e-04  5.27e-08  1.22e-05  2.84e-08  1.86e-07  9.90e-01  
 23  +4.7230e-01  +4.7230e-01  3.08e-06  5.35e-10  1.24e-07  2.88e-10  1.90e-09  9.90e-01  
 24  +4.7230e-01  +4.7230e-01  3.08e-08  5.35e-12  1.24e-09  2.88e-12  1.90e-11  9.90e-01  
 25  +4.7230e-01  +4.7230e-01  3.08e-10  5.36e-14  1.24e-11  3.09e-14  2.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.5532ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:30 PM: Optimal value: 4.723e-01
(CVXPY) Aug 30 12:19:30 PM: Compilation took 2.269e-02 seconds
(CVXPY) Aug 30 12:19:30 PM: Solver (including time spent in interface) took 1.064e-01 seconds
Iteration: 4, Objective: 0.4723
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:30 PM: Your problem has 5057 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:30 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:30 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:30 PM: Finished problem compilation (took 2.480e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5057
  constraints   = 10057
  nnz(P)        = 0
  nnz(A)        = 72368
  cones (total) = 1
    : Nonnegative = 1,  numel = 10057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8394e-01  +1.0700e+03  1.07e+03  4.20e-01  7.34e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3460e-01  +1.2605e+02  1.26e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.02e-01  
  3  +5.0928e-01  +3.2652e+01  3.21e+01  1.22e-01  2.70e+01  3.98e-05  2.52e-01  2.18e-01  
  4  +5.0087e-01  +2.6970e+00  2.20e+00  1.49e-02  3.37e+00  5.45e-06  1.62e-01  6.47e-01  
  5  +5.0010e-01  +8.8068e-01  3.81e-01  2.56e-03  5.89e-01  2.90e-05  8.46e-02  9.87e-01  
  6  +5.0004e-01  +6.7465e-01  1.75e-01  1.17e-03  2.70e-01  1.86e-05  3.43e-02  6.53e-01  
  7  +4.9998e-01  +6.3094e-01  1.31e-01  8.34e-04  1.92e-01  3.98e-05  7.93e-03  8.27e-01  
  8  +4.9812e-01  +6.2329e-01  1.25e-01  8.10e-05  1.88e-02  1.05e-03  2.54e-04  9.74e-01  
  9  +4.9571e-01  +6.0129e-01  1.06e-01  4.01e-05  9.32e-03  1.28e-03  1.24e-04  6.53e-01  
 10  +4.9561e-01  +6.0011e-01  1.05e-01  3.92e-05  9.11e-03  1.19e-03  1.22e-04  7.87e-02  
 11  +4.9549e-01  +5.9637e-01  1.01e-01  3.51e-05  8.15e-03  7.32e-04  1.09e-04  4.30e-01  
 12  +4.9534e-01  +5.9476e-01  9.94e-02  3.50e-05  8.12e-03  6.68e-04  1.08e-04  5.78e-02  
 13  +4.9284e-01  +5.7902e-01  8.62e-02  2.53e-05  5.87e-03  3.40e-04  7.91e-05  6.13e-01  
 14  +4.9118e-01  +5.7065e-01  7.95e-02  2.18e-05  5.07e-03  2.41e-04  6.87e-05  3.18e-01  
 15  +4.8846e-01  +5.5694e-01  6.85e-02  1.83e-05  4.24e-03  1.25e-04  5.81e-05  4.12e-01  
 16  +4.7831e-01  +5.1113e-01  3.28e-02  7.23e-06  1.68e-03  3.61e-06  2.39e-05  9.07e-01  
 17  +4.7380e-01  +4.9319e-01  1.94e-02  3.87e-06  8.97e-04  1.86e-06  1.30e-05  6.06e-01  
 18  +4.7353e-01  +4.9238e-01  1.88e-02  3.70e-06  8.57e-04  1.67e-06  1.24e-05  2.31e-01  
 19  +4.7322e-01  +4.9133e-01  1.81e-02  3.53e-06  8.19e-04  1.53e-06  1.19e-05  1.53e-01  
 20  +4.6989e-01  +4.7944e-01  9.55e-03  1.75e-06  4.05e-04  7.81e-07  6.02e-06  5.59e-01  
 21  +4.6982e-01  +4.7916e-01  9.34e-03  1.70e-06  3.95e-04  7.61e-07  5.89e-06  4.15e-02  
 22  +4.6740e-01  +4.7030e-01  2.90e-03  5.13e-07  1.19e-04  1.80e-07  1.80e-06  9.90e-01  
 23  +4.6624e-01  +4.6634e-01  1.02e-04  1.79e-08  4.14e-06  6.26e-09  6.34e-08  9.67e-01  
 24  +4.6620e-01  +4.6620e-01  1.03e-06  1.79e-10  4.16e-08  6.29e-11  6.38e-10  9.90e-01  
 25  +4.6620e-01  +4.6620e-01  1.03e-08  1.80e-12  4.16e-10  6.40e-13  6.48e-12  9.90e-01  
 26  +4.6620e-01  +4.6620e-01  1.03e-10  1.79e-14  4.16e-12  6.51e-15  6.59e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 109.4985ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:30 PM: Optimal value: 4.662e-01
(CVXPY) Aug 30 12:19:30 PM: Compilation took 2.480e-02 seconds
(CVXPY) Aug 30 12:19:30 PM: Solver (including time spent in interface) took 1.176e-01 seconds
Iteration: 5, Objective: 0.4662
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:30 PM: Your problem has 5067 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:30 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:30 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:30 PM: Finished problem compilation (took 2.636e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5067
  constraints   = 10067
  nnz(P)        = 0
  nnz(A)        = 75832
  cones (total) = 1
    : Nonnegative = 1,  numel = 10067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8391e-01  +1.0700e+03  1.07e+03  4.20e-01  7.37e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3456e-01  +1.2598e+02  1.25e+02  1.63e-01  3.65e+01  1.48e-02  2.65e-01  9.03e-01  
  3  +5.0926e-01  +3.2625e+01  3.21e+01  1.22e-01  2.71e+01  3.98e-05  2.52e-01  2.19e-01  
  4  +5.0087e-01  +2.6883e+00  2.19e+00  1.49e-02  3.38e+00  5.47e-06  1.61e-01  6.50e-01  
  5  +5.0011e-01  +9.0026e-01  4.00e-01  2.69e-03  6.22e-01  2.89e-05  8.46e-02  9.69e-01  
  6  +5.0005e-01  +7.1324e-01  2.13e-01  1.43e-03  3.31e-01  2.13e-05  3.82e-02  6.14e-01  
  7  +4.9999e-01  +6.6903e-01  1.69e-01  1.08e-03  2.50e-01  4.18e-05  1.05e-02  7.76e-01  
  8  +4.9807e-01  +6.4919e-01  1.51e-01  9.98e-05  2.33e-02  1.08e-03  3.16e-04  9.74e-01  
  9  +4.9542e-01  +6.2924e-01  1.34e-01  5.10e-05  1.19e-02  1.58e-03  1.60e-04  5.44e-01  
 10  +4.9514e-01  +6.2359e-01  1.28e-01  4.82e-05  1.13e-02  1.29e-03  1.51e-04  1.79e-01  
 11  +4.9571e-01  +6.2063e-01  1.25e-01  4.60e-05  1.08e-02  7.87e-04  1.42e-04  3.76e-01  
 12  +4.9457e-01  +6.1058e-01  1.16e-01  3.84e-05  8.98e-03  5.93e-04  1.19e-04  3.60e-01  
 13  +4.9339e-01  +5.9918e-01  1.06e-01  3.50e-05  8.17e-03  2.65e-04  1.09e-04  4.57e-01  
 14  +4.8958e-01  +5.7919e-01  8.96e-02  2.49e-05  5.82e-03  1.63e-04  7.87e-05  5.15e-01  
 15  +4.8274e-01  +5.4520e-01  6.25e-02  1.57e-05  3.66e-03  4.36e-05  5.10e-05  6.66e-01  
 16  +4.7459e-01  +5.0857e-01  3.40e-02  7.60e-06  1.77e-03  1.76e-05  2.56e-05  5.96e-01  
 17  +4.6931e-01  +4.8630e-01  1.70e-02  3.42e-06  7.97e-04  6.52e-06  1.18e-05  6.85e-01  
 18  +4.6929e-01  +4.8626e-01  1.70e-02  3.40e-06  7.92e-04  6.39e-06  1.17e-05  2.99e-02  
 19  +4.6891e-01  +4.8500e-01  1.61e-02  3.20e-06  7.45e-04  4.91e-06  1.10e-05  2.54e-01  
 20  +4.6603e-01  +4.7471e-01  8.68e-03  1.61e-06  3.75e-04  1.66e-06  5.69e-06  7.20e-01  
 21  +4.6369e-01  +4.6602e-01  2.33e-03  4.21e-07  9.81e-05  3.64e-07  1.52e-06  8.01e-01  
 22  +4.6293e-01  +4.6324e-01  3.07e-04  5.50e-08  1.28e-05  2.10e-08  2.00e-07  9.90e-01  
 23  +4.6280e-01  +4.6280e-01  3.21e-06  5.74e-10  1.34e-07  2.19e-10  2.09e-09  9.90e-01  
 24  +4.6280e-01  +4.6280e-01  3.21e-08  5.74e-12  1.34e-09  2.19e-12  2.09e-11  9.90e-01  
 25  +4.6280e-01  +4.6280e-01  3.21e-10  5.74e-14  1.34e-11  2.23e-14  2.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 115.0321ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:30 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:30 PM: Optimal value: 4.628e-01
(CVXPY) Aug 30 12:19:30 PM: Compilation took 2.636e-02 seconds
(CVXPY) Aug 30 12:19:30 PM: Solver (including time spent in interface) took 1.247e-01 seconds
Iteration: 6, Objective: 0.4628
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:31 PM: Your problem has 5077 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:31 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:31 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:31 PM: Finished problem compilation (took 3.100e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5077
  constraints   = 10077
  nnz(P)        = 0
  nnz(A)        = 77697
  cones (total) = 1
    : Nonnegative = 1,  numel = 10077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8384e-01  +1.0701e+03  1.07e+03  4.20e-01  7.38e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3450e-01  +1.2587e+02  1.25e+02  1.63e-01  3.65e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0925e-01  +3.2595e+01  3.21e+01  1.22e-01  2.71e+01  3.99e-05  2.52e-01  2.20e-01  
  4  +5.0087e-01  +2.6875e+00  2.19e+00  1.49e-02  3.38e+00  5.48e-06  1.61e-01  6.52e-01  
  5  +5.0014e-01  +9.7598e-01  4.76e-01  3.21e-03  7.41e-01  2.84e-05  9.10e-02  8.76e-01  
  6  +5.0005e-01  +7.1745e-01  2.17e-01  1.46e-03  3.38e-01  2.00e-05  3.75e-02  6.38e-01  
  7  +4.9997e-01  +6.8678e-01  1.87e-01  1.10e-03  2.54e-01  5.53e-05  7.15e-03  9.32e-01  
  8  +4.9812e-01  +6.7286e-01  1.75e-01  1.03e-04  2.40e-02  1.05e-03  3.19e-04  9.57e-01  
  9  +4.9632e-01  +6.5321e-01  1.57e-01  6.62e-05  1.55e-02  1.20e-03  2.06e-04  4.22e-01  
 10  +4.9703e-01  +6.4407e-01  1.47e-01  6.10e-05  1.43e-02  6.00e-04  1.87e-04  4.75e-01  
 11  +4.9595e-01  +6.3121e-01  1.35e-01  5.08e-05  1.19e-02  4.60e-04  1.56e-04  3.55e-01  
 12  +4.9468e-01  +6.2083e-01  1.26e-01  4.45e-05  1.04e-02  3.46e-04  1.38e-04  2.94e-01  
 13  +4.9225e-01  +6.0635e-01  1.14e-01  3.50e-05  8.18e-03  2.82e-04  1.09e-04  3.41e-01  
 14  +4.9155e-01  +6.0172e-01  1.10e-01  3.36e-05  7.86e-03  2.30e-04  1.05e-04  1.55e-01  
 15  +4.8898e-01  +5.8403e-01  9.50e-02  2.89e-05  6.75e-03  2.97e-05  9.15e-05  7.03e-01  
 16  +4.8161e-01  +5.4950e-01  6.79e-02  1.72e-05  4.01e-03  1.67e-05  5.61e-05  5.44e-01  
 17  +4.7214e-01  +5.0655e-01  3.44e-02  7.77e-06  1.81e-03  6.39e-06  2.66e-05  6.12e-01  
 18  +4.6754e-01  +4.8625e-01  1.87e-02  3.98e-06  9.28e-04  2.64e-06  1.39e-05  6.35e-01  
 19  +4.6468e-01  +4.7415e-01  9.48e-03  1.89e-06  4.40e-04  1.08e-06  6.66e-06  7.08e-01  
 20  +4.6356e-01  +4.7012e-01  6.57e-03  1.26e-06  2.94e-04  7.03e-07  4.51e-06  4.12e-01  
 21  +4.6157e-01  +4.6279e-01  1.23e-03  2.24e-07  5.23e-05  7.25e-08  8.24e-07  9.90e-01  
 22  +4.6112e-01  +4.6116e-01  4.42e-05  8.04e-09  1.87e-06  2.61e-09  2.97e-08  9.90e-01  
 23  +4.6110e-01  +4.6110e-01  4.43e-07  8.05e-11  1.88e-08  2.62e-11  2.98e-10  9.90e-01  
 24  +4.6110e-01  +4.6110e-01  4.44e-09  8.06e-13  1.88e-10  2.72e-13  3.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 103.334ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:31 PM: Optimal value: 4.611e-01
(CVXPY) Aug 30 12:19:31 PM: Compilation took 3.100e-02 seconds
(CVXPY) Aug 30 12:19:31 PM: Solver (including time spent in interface) took 1.102e-01 seconds
Iteration: 7, Objective: 0.4611
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:31 PM: Your problem has 5087 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:31 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:31 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:31 PM: Finished problem compilation (took 2.638e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5087
  constraints   = 10087
  nnz(P)        = 0
  nnz(A)        = 79368
  cones (total) = 1
    : Nonnegative = 1,  numel = 10087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8383e-01  +1.0701e+03  1.07e+03  4.20e-01  7.38e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3449e-01  +1.2584e+02  1.25e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0925e-01  +3.2587e+01  3.21e+01  1.22e-01  2.71e+01  3.99e-05  2.52e-01  2.21e-01  
  4  +5.0087e-01  +2.6871e+00  2.19e+00  1.49e-02  3.38e+00  5.48e-06  1.61e-01  6.52e-01  
  5  +5.0014e-01  +9.8732e-01  4.87e-01  3.28e-03  7.59e-01  2.83e-05  9.18e-02  8.64e-01  
  6  +5.0005e-01  +7.1536e-01  2.15e-01  1.44e-03  3.35e-01  1.99e-05  3.66e-02  6.53e-01  
  7  +4.9997e-01  +6.8923e-01  1.89e-01  1.09e-03  2.52e-01  5.84e-05  6.69e-03  9.46e-01  
  8  +4.9808e-01  +6.7563e-01  1.78e-01  1.01e-04  2.36e-02  1.07e-03  3.12e-04  9.55e-01  
  9  +4.9576e-01  +6.5070e-01  1.55e-01  5.88e-05  1.38e-02  1.27e-03  1.81e-04  4.97e-01  
 10  +4.9528e-01  +6.4391e-01  1.49e-01  5.21e-05  1.22e-02  1.09e-03  1.60e-04  2.48e-01  
 11  +4.9487e-01  +6.3186e-01  1.37e-01  4.80e-05  1.12e-02  6.43e-04  1.48e-04  3.50e-01  
 12  +4.9298e-01  +6.1815e-01  1.25e-01  3.92e-05  9.19e-03  5.08e-04  1.22e-04  3.26e-01  
 13  +4.9198e-01  +6.1157e-01  1.20e-01  3.62e-05  8.46e-03  4.28e-04  1.13e-04  1.78e-01  
 14  +4.9047e-01  +5.9806e-01  1.08e-01  3.35e-05  7.83e-03  1.77e-04  1.05e-04  4.36e-01  
 15  +4.8493e-01  +5.6790e-01  8.30e-02  2.25e-05  5.26e-03  1.99e-06  7.25e-05  8.92e-01  
 16  +4.7599e-01  +5.2841e-01  5.24e-02  1.23e-05  2.86e-03  1.38e-06  4.13e-05  5.15e-01  
 17  +4.6521e-01  +4.8366e-01  1.84e-02  3.72e-06  8.68e-04  7.71e-07  1.34e-05  9.35e-01  
 18  +4.6492e-01  +4.8255e-01  1.76e-02  3.53e-06  8.23e-04  7.66e-07  1.28e-05  1.66e-01  
 19  +4.6258e-01  +4.7376e-01  1.12e-02  2.18e-06  5.09e-04  5.05e-07  8.07e-06  4.72e-01  
 20  +4.5929e-01  +4.6138e-01  2.09e-03  3.99e-07  9.30e-05  1.04e-07  1.52e-06  9.16e-01  
 21  +4.5852e-01  +4.5856e-01  4.14e-05  7.84e-09  1.83e-06  2.03e-09  3.03e-08  9.82e-01  
 22  +4.5850e-01  +4.5850e-01  4.14e-07  7.85e-11  1.83e-08  2.04e-11  3.03e-10  9.90e-01  
 23  +4.5850e-01  +4.5850e-01  4.14e-09  7.85e-13  1.83e-10  2.06e-13  3.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 99.6892ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:31 PM: Optimal value: 4.585e-01
(CVXPY) Aug 30 12:19:31 PM: Compilation took 2.638e-02 seconds
(CVXPY) Aug 30 12:19:31 PM: Solver (including time spent in interface) took 1.068e-01 seconds
Iteration: 8, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:31 PM: Your problem has 5097 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:31 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:31 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:31 PM: Finished problem compilation (took 3.073e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5097
  constraints   = 10097
  nnz(P)        = 0
  nnz(A)        = 81486
  cones (total) = 1
    : Nonnegative = 1,  numel = 10097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8382e-01  +1.0701e+03  1.07e+03  4.20e-01  7.38e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3448e-01  +1.2581e+02  1.25e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0924e-01  +3.2571e+01  3.21e+01  1.22e-01  2.71e+01  3.99e-05  2.52e-01  2.21e-01  
  4  +5.0086e-01  +2.6834e+00  2.18e+00  1.49e-02  3.38e+00  5.49e-06  1.60e-01  6.54e-01  
  5  +5.0015e-01  +9.9029e-01  4.90e-01  3.31e-03  7.65e-01  2.84e-05  9.09e-02  8.67e-01  
  6  +5.0006e-01  +7.3378e-01  2.34e-01  1.57e-03  3.64e-01  2.10e-05  3.80e-02  6.43e-01  
  7  +5.0000e-01  +7.1119e-01  2.11e-01  1.31e-03  3.04e-01  4.55e-05  1.03e-02  8.39e-01  
  8  +4.9824e-01  +6.8016e-01  1.82e-01  1.14e-04  2.68e-02  9.90e-04  3.54e-04  9.71e-01  
  9  +4.9576e-01  +6.5606e-01  1.60e-01  6.04e-05  1.42e-02  1.36e-03  1.86e-04  5.41e-01  
 10  +4.9436e-01  +6.4181e-01  1.47e-01  4.84e-05  1.13e-02  1.14e-03  1.49e-04  3.46e-01  
 11  +4.9370e-01  +6.3318e-01  1.39e-01  4.50e-05  1.06e-02  8.55e-04  1.39e-04  2.31e-01  
 12  +4.9216e-01  +6.2352e-01  1.31e-01  3.95e-05  9.25e-03  7.47e-04  1.22e-04  2.04e-01  
 13  +4.8939e-01  +5.9615e-01  1.07e-01  3.39e-05  7.93e-03  7.73e-05  1.07e-04  6.68e-01  
 14  +4.7935e-01  +5.4768e-01  6.83e-02  1.68e-05  3.93e-03  3.56e-05  5.49e-05  6.69e-01  
 15  +4.7333e-01  +5.2008e-01  4.67e-02  1.07e-05  2.51e-03  1.72e-05  3.61e-05  5.07e-01  
 16  +4.7142e-01  +5.1180e-01  4.04e-02  9.05e-06  2.11e-03  1.36e-05  3.08e-05  2.21e-01  
 17  +4.6845e-01  +4.9796e-01  2.95e-02  6.15e-06  1.44e-03  1.40e-06  2.13e-05  9.90e-01  
 18  +4.6268e-01  +4.7450e-01  1.18e-02  2.36e-06  5.52e-04  5.96e-07  8.53e-06  7.92e-01  
 19  +4.5975e-01  +4.6316e-01  3.41e-03  6.58e-07  1.54e-04  1.78e-07  2.48e-06  8.32e-01  
 20  +4.5860e-01  +4.5887e-01  2.73e-04  5.19e-08  1.21e-05  1.41e-08  2.00e-07  9.26e-01  
 21  +4.5850e-01  +4.5850e-01  2.76e-06  5.24e-10  1.22e-07  1.43e-10  2.02e-09  9.90e-01  
 22  +4.5850e-01  +4.5850e-01  2.76e-08  5.24e-12  1.22e-09  1.43e-12  2.02e-11  9.90e-01  
 23  +4.5850e-01  +4.5850e-01  2.77e-10  5.24e-14  1.22e-11  1.47e-14  2.08e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.7798ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:31 PM: Optimal value: 4.585e-01
(CVXPY) Aug 30 12:19:31 PM: Compilation took 3.073e-02 seconds
(CVXPY) Aug 30 12:19:31 PM: Solver (including time spent in interface) took 1.175e-01 seconds
Iteration: 9, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:31 PM: Your problem has 5107 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:31 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:31 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:31 PM: Finished problem compilation (took 3.016e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5107
  constraints   = 10107
  nnz(P)        = 0
  nnz(A)        = 82630
  cones (total) = 1
    : Nonnegative = 1,  numel = 10107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8377e-01  +1.0700e+03  1.07e+03  4.21e-01  7.38e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3445e-01  +1.2574e+02  1.25e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0923e-01  +3.2547e+01  3.20e+01  1.22e-01  2.70e+01  3.99e-05  2.51e-01  2.22e-01  
  4  +5.0086e-01  +2.6764e+00  2.18e+00  1.48e-02  3.37e+00  5.50e-06  1.60e-01  6.56e-01  
  5  +5.0014e-01  +9.8618e-01  4.86e-01  3.28e-03  7.59e-01  2.87e-05  8.84e-02  8.85e-01  
  6  +5.0006e-01  +7.6718e-01  2.67e-01  1.79e-03  4.15e-01  2.36e-05  3.99e-02  6.14e-01  
  7  +4.9998e-01  +7.1323e-01  2.13e-01  1.25e-03  2.89e-01  6.02e-05  7.87e-03  8.99e-01  
  8  +4.9792e-01  +6.9999e-01  2.02e-01  1.14e-04  2.67e-02  1.16e-03  3.50e-04  9.59e-01  
  9  +4.9491e-01  +6.7239e-01  1.77e-01  5.94e-05  1.39e-02  1.60e-03  1.82e-04  5.47e-01  
 10  +4.9323e-01  +6.5274e-01  1.60e-01  5.06e-05  1.19e-02  1.11e-03  1.56e-04  3.23e-01  
 11  +4.9144e-01  +6.3622e-01  1.45e-01  4.40e-05  1.03e-02  7.97e-04  1.37e-04  2.88e-01  
 12  +4.9032e-01  +6.2681e-01  1.36e-01  4.18e-05  9.79e-03  6.14e-04  1.30e-04  1.70e-01  
 13  +4.8481e-01  +5.9505e-01  1.10e-01  3.01e-05  7.04e-03  4.57e-04  9.59e-05  3.30e-01  
 14  +4.7933e-01  +5.6461e-01  8.53e-02  2.18e-05  5.10e-03  2.58e-04  7.11e-05  4.10e-01  
 15  +4.7646e-01  +5.4559e-01  6.91e-02  1.68e-05  3.93e-03  2.67e-06  5.57e-05  8.75e-01  
 16  +4.6652e-01  +5.0104e-01  3.45e-02  7.58e-06  1.77e-03  1.32e-06  2.63e-05  6.55e-01  
 17  +4.6354e-01  +4.8798e-01  2.44e-02  5.13e-06  1.20e-03  1.11e-06  1.80e-05  6.82e-01  
 18  +4.5802e-01  +4.6541e-01  7.39e-03  1.49e-06  3.48e-04  3.54e-07  5.43e-06  8.13e-01  
 19  +4.5620e-01  +4.5828e-01  2.08e-03  4.06e-07  9.48e-05  1.14e-07  1.53e-06  9.73e-01  
 20  +4.5542e-01  +4.5547e-01  4.78e-05  9.09e-09  2.12e-06  2.60e-09  3.52e-08  9.83e-01  
 21  +4.5540e-01  +4.5540e-01  4.78e-07  9.09e-11  2.12e-08  2.61e-11  3.52e-10  9.90e-01  
 22  +4.5540e-01  +4.5540e-01  4.78e-09  9.09e-13  2.12e-10  2.61e-13  3.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.1402ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:31 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:31 PM: Optimal value: 4.554e-01
(CVXPY) Aug 30 12:19:31 PM: Compilation took 3.016e-02 seconds
(CVXPY) Aug 30 12:19:31 PM: Solver (including time spent in interface) took 1.145e-01 seconds
Iteration: 10, Objective: 0.4554
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:32 PM: Your problem has 5117 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:32 PM: Finished problem compilation (took 2.937e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5117
  constraints   = 10117
  nnz(P)        = 0
  nnz(A)        = 83776
  cones (total) = 1
    : Nonnegative = 1,  numel = 10117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8374e-01  +1.0700e+03  1.07e+03  4.21e-01  7.38e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3442e-01  +1.2568e+02  1.25e+02  1.63e-01  3.63e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0922e-01  +3.2528e+01  3.20e+01  1.22e-01  2.70e+01  3.99e-05  2.51e-01  2.22e-01  
  4  +5.0086e-01  +2.6771e+00  2.18e+00  1.49e-02  3.38e+00  5.50e-06  1.59e-01  6.57e-01  
  5  +5.0014e-01  +9.7885e-01  4.79e-01  3.23e-03  7.48e-01  2.91e-05  8.68e-02  9.00e-01  
  6  +5.0005e-01  +7.2461e-01  2.25e-01  1.51e-03  3.49e-01  2.36e-05  3.10e-02  7.17e-01  
  7  +4.9993e-01  +7.1516e-01  2.15e-01  1.13e-03  2.64e-01  8.70e-05  5.87e-03  8.72e-01  
  8  +4.9757e-01  +6.9951e-01  2.02e-01  1.08e-04  2.55e-02  1.32e-03  3.33e-04  9.48e-01  
  9  +4.9535e-01  +6.7677e-01  1.81e-01  7.04e-05  1.65e-02  1.50e-03  2.16e-04  4.19e-01  
 10  +4.9496e-01  +6.5230e-01  1.57e-01  5.98e-05  1.40e-02  5.27e-04  1.84e-04  5.83e-01  
 11  +4.9402e-01  +6.4314e-01  1.49e-01  5.36e-05  1.26e-02  4.12e-04  1.65e-04  2.70e-01  
 12  +4.9298e-01  +6.3167e-01  1.39e-01  4.84e-05  1.13e-02  1.91e-04  1.49e-04  4.86e-01  
 13  +4.9095e-01  +6.1959e-01  1.29e-01  4.29e-05  1.01e-02  1.29e-04  1.33e-04  3.22e-01  
 14  +4.8556e-01  +5.9164e-01  1.06e-01  3.04e-05  7.11e-03  1.06e-04  9.64e-05  3.25e-01  
 15  +4.8101e-01  +5.6858e-01  8.76e-02  2.32e-05  5.42e-03  4.54e-05  7.48e-05  5.41e-01  
 16  +4.7855e-01  +5.5667e-01  7.81e-02  1.97e-05  4.62e-03  1.34e-05  6.45e-05  6.55e-01  
 17  +4.6865e-01  +5.1297e-01  4.43e-02  9.89e-06  2.31e-03  6.70e-06  3.38e-05  5.28e-01  
 18  +4.6740e-01  +5.0733e-01  3.99e-02  8.57e-06  2.00e-03  3.66e-06  2.96e-05  6.16e-01  
 19  +4.6174e-01  +4.8450e-01  2.28e-02  4.63e-06  1.08e-03  1.80e-06  1.66e-05  5.86e-01  
 20  +4.5774e-01  +4.6876e-01  1.10e-02  2.17e-06  5.06e-04  8.42e-07  8.05e-06  5.49e-01  
 21  +4.5467e-01  +4.5673e-01  2.06e-03  3.95e-07  9.22e-05  1.25e-07  1.51e-06  9.41e-01  
 22  +4.5401e-01  +4.5430e-01  2.83e-04  5.40e-08  1.26e-05  1.57e-08  2.09e-07  9.90e-01  
 23  +4.5390e-01  +4.5390e-01  2.96e-06  5.64e-10  1.32e-07  1.64e-10  2.19e-09  9.90e-01  
 24  +4.5390e-01  +4.5390e-01  2.96e-08  5.64e-12  1.32e-09  1.64e-12  2.19e-11  9.90e-01  
 25  +4.5390e-01  +4.5390e-01  2.96e-10  5.63e-14  1.32e-11  1.65e-14  2.21e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.2919ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:32 PM: Optimal value: 4.539e-01
(CVXPY) Aug 30 12:19:32 PM: Compilation took 2.937e-02 seconds
(CVXPY) Aug 30 12:19:32 PM: Solver (including time spent in interface) took 1.308e-01 seconds
Iteration: 11, Objective: 0.4539
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:32 PM: Your problem has 5127 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:32 PM: Finished problem compilation (took 3.254e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5127
  constraints   = 10127
  nnz(P)        = 0
  nnz(A)        = 85232
  cones (total) = 1
    : Nonnegative = 1,  numel = 10127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8373e-01  +1.0698e+03  1.07e+03  4.21e-01  7.38e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3441e-01  +1.2565e+02  1.25e+02  1.63e-01  3.62e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0922e-01  +3.2506e+01  3.20e+01  1.22e-01  2.70e+01  3.98e-05  2.51e-01  2.22e-01  
  4  +5.0086e-01  +2.6700e+00  2.17e+00  1.48e-02  3.37e+00  5.51e-06  1.59e-01  6.58e-01  
  5  +5.0019e-01  +1.0905e+00  5.90e-01  3.99e-03  9.23e-01  2.75e-05  9.68e-02  7.70e-01  
  6  +5.0007e-01  +7.6624e-01  2.66e-01  1.79e-03  4.15e-01  2.17e-05  3.98e-02  6.39e-01  
  7  +4.9999e-01  +7.3865e-01  2.39e-01  1.43e-03  3.31e-01  5.64e-05  9.52e-03  8.33e-01  
  8  +4.9809e-01  +7.2038e-01  2.22e-01  1.35e-04  3.16e-02  1.07e-03  4.15e-04  9.61e-01  
  9  +4.9442e-01  +6.8152e-01  1.87e-01  5.97e-05  1.40e-02  1.62e-03  1.83e-04  6.38e-01  
 10  +4.9381e-01  +6.7294e-01  1.79e-01  5.38e-05  1.26e-02  1.26e-03  1.65e-04  2.77e-01  
 11  +4.9157e-01  +6.5257e-01  1.61e-01  4.68e-05  1.10e-02  8.78e-04  1.45e-04  2.83e-01  
 12  +4.8981e-01  +6.3521e-01  1.45e-01  4.46e-05  1.05e-02  5.19e-04  1.39e-04  2.51e-01  
 13  +4.7868e-01  +5.7194e-01  9.33e-02  2.32e-05  5.42e-03  2.73e-04  7.55e-05  5.69e-01  
 14  +4.7405e-01  +5.4868e-01  7.46e-02  1.75e-05  4.10e-03  1.07e-04  5.84e-05  5.61e-01  
 15  +4.6943e-01  +5.2563e-01  5.62e-02  1.26e-05  2.94e-03  2.43e-05  4.27e-05  7.28e-01  
 16  +4.6503e-01  +5.0506e-01  4.00e-02  8.54e-06  2.00e-03  1.09e-06  2.96e-05  9.90e-01  
 17  +4.5778e-01  +4.7488e-01  1.71e-02  3.50e-06  8.17e-04  6.88e-07  1.26e-05  7.94e-01  
 18  +4.5421e-01  +4.6047e-01  6.26e-03  1.25e-06  2.92e-04  2.64e-07  4.66e-06  6.86e-01  
 19  +4.5417e-01  +4.6026e-01  6.09e-03  1.23e-06  2.87e-04  2.52e-07  4.64e-06  3.00e-02  
 20  +4.5416e-01  +4.6020e-01  6.04e-03  1.22e-06  2.85e-04  2.53e-07  4.60e-06  4.42e-02  
 21  +4.5407e-01  +4.5990e-01  5.83e-03  1.17e-06  2.72e-04  2.55e-07  4.37e-06  1.46e-01  
 22  +4.5288e-01  +4.5534e-01  2.46e-03  4.84e-07  1.13e-04  1.14e-07  1.86e-06  7.28e-01  
 23  +4.5208e-01  +4.5230e-01  2.23e-04  4.33e-08  1.01e-05  1.03e-08  1.70e-07  9.13e-01  
 24  +4.5200e-01  +4.5201e-01  8.00e-06  1.55e-09  3.62e-07  4.06e-10  6.12e-09  9.90e-01  
 25  +4.5200e-01  +4.5200e-01  8.02e-08  1.55e-11  3.63e-09  4.06e-12  6.14e-11  9.90e-01  
 26  +4.5200e-01  +4.5200e-01  8.03e-10  1.56e-13  3.63e-11  4.24e-14  6.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 131.0229ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:32 PM: Optimal value: 4.520e-01
(CVXPY) Aug 30 12:19:32 PM: Compilation took 3.254e-02 seconds
(CVXPY) Aug 30 12:19:32 PM: Solver (including time spent in interface) took 1.400e-01 seconds
Iteration: 12, Objective: 0.4520
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:32 PM: Your problem has 5137 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:32 PM: Finished problem compilation (took 3.106e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5137
  constraints   = 10137
  nnz(P)        = 0
  nnz(A)        = 86173
  cones (total) = 1
    : Nonnegative = 1,  numel = 10137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8371e-01  +1.0698e+03  1.07e+03  4.21e-01  7.37e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3437e-01  +1.2554e+02  1.25e+02  1.63e-01  3.62e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0921e-01  +3.2475e+01  3.20e+01  1.22e-01  2.69e+01  3.99e-05  2.51e-01  2.23e-01  
  4  +5.0086e-01  +2.6714e+00  2.17e+00  1.48e-02  3.37e+00  5.51e-06  1.59e-01  6.58e-01  
  5  +5.0020e-01  +1.1191e+00  6.19e-01  4.19e-03  9.68e-01  2.74e-05  9.81e-02  7.49e-01  
  6  +5.0008e-01  +8.1274e-01  3.13e-01  2.10e-03  4.87e-01  2.30e-05  4.51e-02  6.14e-01  
  7  +5.0000e-01  +7.5009e-01  2.50e-01  1.48e-03  3.43e-01  5.50e-05  9.56e-03  8.82e-01  
  8  +4.9821e-01  +7.3332e-01  2.35e-01  1.42e-04  3.34e-02  1.01e-03  4.38e-04  9.59e-01  
  9  +4.9485e-01  +6.9339e-01  1.99e-01  6.63e-05  1.56e-02  1.44e-03  2.03e-04  6.23e-01  
 10  +4.9435e-01  +6.8427e-01  1.90e-01  6.35e-05  1.49e-02  1.19e-03  1.94e-04  1.43e-01  
 11  +4.9383e-01  +6.7095e-01  1.77e-01  5.78e-05  1.36e-02  6.75e-04  1.77e-04  3.95e-01  
 12  +4.9185e-01  +6.5369e-01  1.62e-01  5.07e-05  1.19e-02  4.62e-04  1.57e-04  3.10e-01  
 13  +4.8437e-01  +6.0140e-01  1.17e-01  3.37e-05  7.89e-03  6.44e-05  1.08e-04  7.51e-01  
 14  +4.7936e-01  +5.7697e-01  9.76e-02  2.59e-05  6.07e-03  4.90e-05  8.44e-05  2.79e-01  
 15  +4.7491e-01  +5.5459e-01  7.97e-02  1.97e-05  4.62e-03  5.42e-07  6.54e-05  9.10e-01  
 16  +4.7187e-01  +5.4145e-01  6.96e-02  1.65e-05  3.87e-03  9.18e-07  5.55e-05  2.84e-01  
 17  +4.6425e-01  +5.0835e-01  4.41e-02  9.58e-06  2.24e-03  1.43e-06  3.32e-05  7.28e-01  
 18  +4.6254e-01  +5.0100e-01  3.85e-02  8.20e-06  1.92e-03  1.45e-06  2.86e-05  3.80e-01  
 19  +4.5712e-01  +4.7874e-01  2.16e-02  4.43e-06  1.04e-03  8.79e-07  1.59e-05  5.72e-01  
 20  +4.5364e-01  +4.6467e-01  1.10e-02  2.21e-06  5.16e-04  4.71e-07  8.11e-06  5.72e-01  
 21  +4.5272e-01  +4.6038e-01  7.66e-03  1.51e-06  3.54e-04  4.22e-07  5.59e-06  9.90e-01  
 22  +4.5092e-01  +4.5367e-01  2.76e-03  5.42e-07  1.27e-04  1.52e-07  2.03e-06  6.59e-01  
 23  +4.4992e-01  +4.4996e-01  4.06e-05  7.97e-09  1.86e-06  2.21e-09  3.01e-08  9.88e-01  
 24  +4.4990e-01  +4.4990e-01  4.06e-07  7.97e-11  1.86e-08  2.21e-11  3.01e-10  9.90e-01  
 25  +4.4990e-01  +4.4990e-01  4.06e-09  7.97e-13  1.86e-10  2.21e-13  3.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 118.4184ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:32 PM: Optimal value: 4.499e-01
(CVXPY) Aug 30 12:19:32 PM: Compilation took 3.106e-02 seconds
(CVXPY) Aug 30 12:19:32 PM: Solver (including time spent in interface) took 1.262e-01 seconds
Iteration: 13, Objective: 0.4499
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:32 PM: Your problem has 5147 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:32 PM: Finished problem compilation (took 3.246e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5147
  constraints   = 10147
  nnz(P)        = 0
  nnz(A)        = 87161
  cones (total) = 1
    : Nonnegative = 1,  numel = 10147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8368e-01  +1.0697e+03  1.07e+03  4.21e-01  7.37e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3438e-01  +1.2556e+02  1.25e+02  1.63e-01  3.61e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0921e-01  +3.2476e+01  3.20e+01  1.22e-01  2.69e+01  3.99e-05  2.51e-01  2.23e-01  
  4  +5.0086e-01  +2.6683e+00  2.17e+00  1.48e-02  3.37e+00  5.52e-06  1.59e-01  6.59e-01  
  5  +5.0020e-01  +1.1222e+00  6.22e-01  4.21e-03  9.73e-01  2.73e-05  9.81e-02  7.45e-01  
  6  +5.0008e-01  +8.1249e-01  3.12e-01  2.10e-03  4.87e-01  2.29e-05  4.48e-02  6.17e-01  
  7  +5.0000e-01  +7.5251e-01  2.53e-01  1.52e-03  3.52e-01  5.37e-05  1.02e-02  8.49e-01  
  8  +4.9821e-01  +7.3435e-01  2.36e-01  1.46e-04  3.43e-02  1.01e-03  4.51e-04  9.61e-01  
  9  +4.9472e-01  +6.9259e-01  1.98e-01  6.57e-05  1.54e-02  1.48e-03  2.01e-04  6.40e-01  
 10  +4.9364e-01  +6.7429e-01  1.81e-01  5.71e-05  1.34e-02  9.30e-04  1.75e-04  3.84e-01  
 11  +4.9225e-01  +6.6302e-01  1.71e-01  5.21e-05  1.22e-02  7.67e-04  1.60e-04  1.94e-01  
 12  +4.9001e-01  +6.4273e-01  1.53e-01  4.73e-05  1.11e-02  4.21e-04  1.47e-04  3.37e-01  
 13  +4.7917e-01  +5.8230e-01  1.03e-01  2.58e-05  6.04e-03  2.40e-04  8.34e-05  5.51e-01  
 14  +4.7723e-01  +5.7241e-01  9.52e-02  2.35e-05  5.51e-03  1.72e-04  7.68e-05  2.44e-01  
 15  +4.7074e-01  +5.4166e-01  7.09e-02  1.65e-05  3.86e-03  1.03e-04  5.54e-05  3.87e-01  
 16  +4.6724e-01  +5.2578e-01  5.85e-02  1.31e-05  3.07e-03  7.16e-05  4.48e-05  3.07e-01  
 17  +4.6081e-01  +4.9738e-01  3.66e-02  7.78e-06  1.82e-03  3.29e-05  2.74e-05  5.32e-01  
 18  +4.5530e-01  +4.7278e-01  1.75e-02  3.53e-06  8.25e-04  1.06e-06  1.28e-05  9.90e-01  
 19  +4.5319e-01  +4.6455e-01  1.14e-02  2.27e-06  5.31e-04  6.85e-07  8.34e-06  3.68e-01  
 20  +4.5215e-01  +4.6008e-01  7.93e-03  1.58e-06  3.68e-04  4.42e-07  5.82e-06  9.90e-01  
 21  +4.5034e-01  +4.5331e-01  2.97e-03  5.89e-07  1.38e-04  1.66e-07  2.21e-06  6.42e-01  
 22  +4.4927e-01  +4.4932e-01  5.08e-05  1.00e-08  2.34e-06  2.78e-09  3.80e-08  9.87e-01  
 23  +4.4925e-01  +4.4925e-01  5.08e-07  1.00e-10  2.34e-08  2.78e-11  3.80e-10  9.90e-01  
 24  +4.4925e-01  +4.4925e-01  5.08e-09  1.00e-12  2.34e-10  2.79e-13  3.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 120.296ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:33 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:33 PM: Optimal value: 4.493e-01
(CVXPY) Aug 30 12:19:33 PM: Compilation took 3.246e-02 seconds
(CVXPY) Aug 30 12:19:33 PM: Solver (including time spent in interface) took 1.283e-01 seconds
Iteration: 14, Objective: 0.4493
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:33 PM: Your problem has 5157 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:33 PM: Finished problem compilation (took 3.736e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5157
  constraints   = 10157
  nnz(P)        = 0
  nnz(A)        = 88027
  cones (total) = 1
    : Nonnegative = 1,  numel = 10157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8366e-01  +1.0696e+03  1.07e+03  4.21e-01  7.36e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3436e-01  +1.2552e+02  1.25e+02  1.63e-01  3.60e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0920e-01  +3.2465e+01  3.20e+01  1.22e-01  2.68e+01  3.99e-05  2.50e-01  2.24e-01  
  4  +5.0086e-01  +2.6667e+00  2.17e+00  1.48e-02  3.36e+00  5.52e-06  1.58e-01  6.60e-01  
  5  +5.0018e-01  +1.0740e+00  5.74e-01  3.89e-03  8.97e-01  2.80e-05  9.33e-02  8.00e-01  
  6  +5.0007e-01  +7.7656e-01  2.76e-01  1.86e-03  4.30e-01  2.38e-05  3.62e-02  7.35e-01  
  7  +4.9995e-01  +7.5344e-01  2.53e-01  1.33e-03  3.10e-01  8.10e-05  6.81e-03  8.82e-01  
  8  +4.9781e-01  +7.3953e-01  2.42e-01  1.31e-04  3.08e-02  1.20e-03  4.02e-04  9.42e-01  
  9  +4.9497e-01  +7.0137e-01  2.06e-01  7.59e-05  1.78e-02  1.36e-03  2.32e-04  5.13e-01  
 10  +4.9375e-01  +6.7856e-01  1.85e-01  5.95e-05  1.40e-02  8.66e-04  1.82e-04  4.92e-01  
 11  +4.9228e-01  +6.6570e-01  1.73e-01  5.30e-05  1.24e-02  7.16e-04  1.63e-04  2.19e-01  
 12  +4.9030e-01  +6.4726e-01  1.57e-01  4.89e-05  1.15e-02  4.47e-04  1.52e-04  2.72e-01  
 13  +4.8502e-01  +6.1662e-01  1.32e-01  3.68e-05  8.61e-03  3.38e-04  1.16e-04  3.20e-01  
 14  +4.7803e-01  +5.7500e-01  9.70e-02  2.54e-05  5.95e-03  5.01e-05  8.30e-05  7.21e-01  
 15  +4.7126e-01  +5.4257e-01  7.13e-02  1.71e-05  3.99e-03  1.63e-05  5.71e-05  6.54e-01  
 16  +4.6677e-01  +5.2188e-01  5.51e-02  1.25e-05  2.91e-03  5.53e-06  4.23e-05  7.15e-01  
 17  +4.6011e-01  +4.9358e-01  3.35e-02  7.17e-06  1.68e-03  2.93e-06  2.51e-05  5.21e-01  
 18  +4.5559e-01  +4.7399e-01  1.84e-02  3.76e-06  8.78e-04  9.84e-07  1.35e-05  9.90e-01  
 19  +4.5341e-01  +4.6543e-01  1.20e-02  2.42e-06  5.66e-04  6.45e-07  8.81e-06  3.81e-01  
 20  +4.5238e-01  +4.6106e-01  8.67e-03  1.74e-06  4.06e-04  4.82e-07  6.36e-06  9.90e-01  
 21  +4.5050e-01  +4.5396e-01  3.46e-03  6.86e-07  1.60e-04  1.92e-07  2.56e-06  6.24e-01  
 22  +4.4930e-01  +4.4945e-01  1.46e-04  2.89e-08  6.76e-06  8.00e-09  1.09e-07  9.68e-01  
 23  +4.4925e-01  +4.4925e-01  1.47e-06  2.90e-10  6.77e-08  8.02e-11  1.10e-09  9.90e-01  
 24  +4.4925e-01  +4.4925e-01  1.47e-08  2.90e-12  6.77e-10  8.02e-13  1.10e-11  9.90e-01  
 25  +4.4925e-01  +4.4925e-01  1.47e-10  2.90e-14  6.77e-12  8.07e-15  1.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 131.5755ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:33 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:33 PM: Optimal value: 4.493e-01
(CVXPY) Aug 30 12:19:33 PM: Compilation took 3.736e-02 seconds
(CVXPY) Aug 30 12:19:33 PM: Solver (including time spent in interface) took 1.419e-01 seconds
Iteration: 15, Objective: 0.4493
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:33 PM: Your problem has 5167 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:33 PM: Finished problem compilation (took 4.085e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5167
  constraints   = 10167
  nnz(P)        = 0
  nnz(A)        = 88733
  cones (total) = 1
    : Nonnegative = 1,  numel = 10167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8360e-01  +1.0697e+03  1.07e+03  4.21e-01  7.36e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3432e-01  +1.2544e+02  1.25e+02  1.63e-01  3.59e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0920e-01  +3.2451e+01  3.19e+01  1.22e-01  2.68e+01  3.99e-05  2.50e-01  2.24e-01  
  4  +5.0086e-01  +2.6696e+00  2.17e+00  1.48e-02  3.37e+00  5.53e-06  1.58e-01  6.60e-01  
  5  +5.0020e-01  +1.1212e+00  6.21e-01  4.21e-03  9.71e-01  2.76e-05  9.65e-02  7.57e-01  
  6  +5.0008e-01  +8.0489e-01  3.05e-01  2.05e-03  4.75e-01  2.41e-05  4.04e-02  6.89e-01  
  7  +5.0000e-01  +7.7111e-01  2.71e-01  1.59e-03  3.68e-01  6.22e-05  9.85e-03  8.13e-01  
  8  +4.9810e-01  +7.5306e-01  2.55e-01  1.57e-04  3.69e-02  1.07e-03  4.84e-04  9.53e-01  
  9  +4.9494e-01  +7.0562e-01  2.11e-01  7.89e-05  1.85e-02  1.32e-03  2.42e-04  5.95e-01  
 10  +4.9446e-01  +6.9591e-01  2.01e-01  6.89e-05  1.62e-02  1.03e-03  2.10e-04  3.26e-01  
 11  +4.9289e-01  +6.7891e-01  1.86e-01  5.90e-05  1.38e-02  7.95e-04  1.81e-04  2.94e-01  
 12  +4.9136e-01  +6.5987e-01  1.69e-01  5.31e-05  1.25e-02  4.60e-04  1.64e-04  3.52e-01  
 13  +4.8840e-01  +6.3128e-01  1.43e-01  4.65e-05  1.09e-02  8.56e-05  1.46e-04  6.21e-01  
 14  +4.8140e-01  +5.9537e-01  1.14e-01  3.12e-05  7.30e-03  5.17e-05  1.00e-04  5.06e-01  
 15  +4.7672e-01  +5.7265e-01  9.59e-02  2.47e-05  5.79e-03  3.63e-05  8.10e-05  3.06e-01  
 16  +4.7232e-01  +5.5008e-01  7.78e-02  1.90e-05  4.45e-03  8.77e-06  6.34e-05  7.25e-01  
 17  +4.6159e-01  +5.0263e-01  4.10e-02  9.14e-06  2.14e-03  3.90e-06  3.18e-05  5.72e-01  
 18  +4.5978e-01  +4.9436e-01  3.46e-02  7.48e-06  1.75e-03  2.61e-06  2.61e-05  5.31e-01  
 19  +4.5367e-01  +4.6888e-01  1.52e-02  3.16e-06  7.39e-04  1.11e-06  1.14e-05  5.97e-01  
 20  +4.5299e-01  +4.6582e-01  1.28e-02  2.63e-06  6.14e-04  8.55e-07  9.44e-06  4.65e-01  
 21  +4.5295e-01  +4.6564e-01  1.27e-02  2.60e-06  6.07e-04  8.35e-07  9.33e-06  7.84e-02  
 22  +4.5117e-01  +4.5852e-01  7.35e-03  1.49e-06  3.47e-04  4.60e-07  5.39e-06  5.90e-01  
 23  +4.4896e-01  +4.4991e-01  9.50e-04  1.89e-07  4.41e-05  5.80e-08  6.98e-07  8.94e-01  
 24  +4.4864e-01  +4.4866e-01  1.80e-05  3.58e-09  8.35e-07  1.07e-09  1.32e-08  9.85e-01  
 25  +4.4863e-01  +4.4863e-01  1.81e-07  3.59e-11  8.38e-09  1.07e-11  1.33e-10  9.90e-01  
 26  +4.4863e-01  +4.4863e-01  2.18e-09  4.34e-13  1.01e-10  1.31e-13  1.62e-12  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 137.7095ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:33 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:33 PM: Optimal value: 4.486e-01
(CVXPY) Aug 30 12:19:33 PM: Compilation took 4.085e-02 seconds
(CVXPY) Aug 30 12:19:33 PM: Solver (including time spent in interface) took 1.471e-01 seconds
Iteration: 16, Objective: 0.4486
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:33 PM: Your problem has 5177 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:33 PM: Finished problem compilation (took 3.274e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5177
  constraints   = 10177
  nnz(P)        = 0
  nnz(A)        = 89702
  cones (total) = 1
    : Nonnegative = 1,  numel = 10177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8359e-01  +1.0696e+03  1.07e+03  4.21e-01  7.35e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3429e-01  +1.2538e+02  1.25e+02  1.63e-01  3.59e+01  1.48e-02  2.63e-01  9.06e-01  
  3  +5.0919e-01  +3.2425e+01  3.19e+01  1.22e-01  2.67e+01  3.99e-05  2.50e-01  2.25e-01  
  4  +5.0086e-01  +2.6656e+00  2.16e+00  1.48e-02  3.36e+00  5.53e-06  1.58e-01  6.62e-01  
  5  +5.0021e-01  +1.1380e+00  6.38e-01  4.32e-03  9.98e-01  2.76e-05  9.65e-02  7.48e-01  
  6  +5.0007e-01  +7.9031e-01  2.90e-01  1.95e-03  4.52e-01  2.49e-05  3.61e-02  7.35e-01  
  7  +4.9997e-01  +7.7961e-01  2.80e-01  1.55e-03  3.60e-01  7.55e-05  8.60e-03  8.09e-01  
  8  +4.9796e-01  +7.5950e-01  2.62e-01  1.57e-04  3.69e-02  1.13e-03  4.84e-04  9.49e-01  
  9  +4.9462e-01  +7.0623e-01  2.12e-01  8.19e-05  1.92e-02  1.26e-03  2.51e-04  5.89e-01  
 10  +4.9425e-01  +6.9512e-01  2.01e-01  6.76e-05  1.59e-02  7.98e-04  2.06e-04  5.01e-01  
 11  +4.9297e-01  +6.8076e-01  1.88e-01  6.02e-05  1.41e-02  5.86e-04  1.84e-04  2.94e-01  
 12  +4.8839e-01  +6.4510e-01  1.57e-01  4.68e-05  1.10e-02  2.78e-04  1.46e-04  5.04e-01  
 13  +4.8366e-01  +6.1863e-01  1.35e-01  3.75e-05  8.78e-03  2.08e-04  1.19e-04  2.77e-01  
 14  +4.7679e-01  +5.8042e-01  1.04e-01  2.69e-05  6.30e-03  6.83e-05  8.79e-05  5.90e-01  
 15  +4.7256e-01  +5.5764e-01  8.51e-02  2.12e-05  4.95e-03  1.19e-05  7.03e-05  7.47e-01  
 16  +4.6310e-01  +5.1496e-01  5.19e-02  1.19e-05  2.77e-03  6.32e-06  4.08e-05  4.84e-01  
 17  +4.5962e-01  +4.9958e-01  4.00e-02  8.85e-06  2.07e-03  4.52e-06  3.09e-05  3.26e-01  
 18  +4.5655e-01  +4.8551e-01  2.90e-02  6.16e-06  1.44e-03  2.43e-06  2.17e-05  6.30e-01  
 19  +4.5284e-01  +4.6916e-01  1.63e-02  3.36e-06  7.84e-04  9.06e-07  1.20e-05  9.90e-01  
 20  +4.5183e-01  +4.6513e-01  1.33e-02  2.72e-06  6.35e-04  7.41e-07  9.75e-06  2.68e-01  
 21  +4.4970e-01  +4.5654e-01  6.84e-03  1.38e-06  3.23e-04  3.83e-07  5.03e-06  9.90e-01  
 22  +4.4908e-01  +4.5412e-01  5.05e-03  1.02e-06  2.38e-04  2.82e-07  3.72e-06  3.37e-01  
 23  +4.4805e-01  +4.5012e-01  2.08e-03  4.18e-07  9.76e-05  1.14e-07  1.54e-06  8.93e-01  
 24  +4.4758e-01  +4.4835e-01  7.72e-04  1.55e-07  3.62e-05  4.20e-08  5.74e-07  9.90e-01  
 25  +4.4731e-01  +4.4732e-01  1.65e-05  3.32e-09  7.75e-07  8.92e-10  1.23e-08  9.83e-01  
 26  +4.4730e-01  +4.4730e-01  1.66e-07  3.33e-11  7.79e-09  8.96e-12  1.24e-10  9.90e-01  
 27  +4.4730e-01  +4.4730e-01  1.81e-09  3.63e-13  8.48e-11  9.81e-14  1.35e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.5058ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:33 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:33 PM: Optimal value: 4.473e-01
(CVXPY) Aug 30 12:19:33 PM: Compilation took 3.274e-02 seconds
(CVXPY) Aug 30 12:19:33 PM: Solver (including time spent in interface) took 1.626e-01 seconds
Iteration: 17, Objective: 0.4473
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:34 PM: Your problem has 5187 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:34 PM: Finished problem compilation (took 3.522e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5187
  constraints   = 10187
  nnz(P)        = 0
  nnz(A)        = 90870
  cones (total) = 1
    : Nonnegative = 1,  numel = 10187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8350e-01  +1.0697e+03  1.07e+03  4.21e-01  7.35e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3424e-01  +1.2529e+02  1.25e+02  1.63e-01  3.58e+01  1.48e-02  2.63e-01  9.07e-01  
  3  +5.0918e-01  +3.2404e+01  3.19e+01  1.21e-01  2.67e+01  4.00e-05  2.50e-01  2.26e-01  
  4  +5.0086e-01  +2.6681e+00  2.17e+00  1.48e-02  3.37e+00  5.55e-06  1.57e-01  6.62e-01  
  5  +5.0018e-01  +1.0693e+00  5.69e-01  3.86e-03  8.91e-01  2.91e-05  8.87e-02  8.35e-01  
  6  +5.0006e-01  +7.9077e-01  2.91e-01  1.94e-03  4.50e-01  2.98e-05  2.97e-02  7.92e-01  
  7  +4.9979e-01  +8.4174e-01  3.42e-01  1.05e-03  2.45e-01  1.91e-04  3.78e-03  9.90e-01  
  8  +4.9711e-01  +8.2013e-01  3.23e-01  1.42e-04  3.33e-02  1.49e-03  4.32e-04  8.86e-01  
  9  +4.9398e-01  +7.4585e-01  2.52e-01  9.72e-05  2.28e-02  1.02e-03  2.99e-04  4.41e-01  
 10  +4.9342e-01  +7.3245e-01  2.39e-01  8.33e-05  1.96e-02  8.76e-04  2.56e-04  2.80e-01  
 11  +4.9347e-01  +6.9481e-01  2.01e-01  7.31e-05  1.72e-02  1.67e-04  2.25e-04  6.41e-01  
 12  +4.9173e-01  +6.7954e-01  1.88e-01  6.70e-05  1.57e-02  1.28e-04  2.07e-04  2.19e-01  
 13  +4.8540e-01  +6.4214e-01  1.57e-01  4.60e-05  1.08e-02  1.14e-04  1.45e-04  3.36e-01  
 14  +4.8030e-01  +6.1057e-01  1.30e-01  3.66e-05  8.56e-03  4.34e-05  1.18e-04  5.38e-01  
 15  +4.7174e-01  +5.6759e-01  9.59e-02  2.42e-05  5.66e-03  2.28e-05  8.05e-05  4.90e-01  
 16  +4.6382e-01  +5.2854e-01  6.47e-02  1.51e-05  3.52e-03  3.58e-06  5.17e-05  8.56e-01  
 17  +4.5698e-01  +4.9853e-01  4.16e-02  9.20e-06  2.15e-03  2.18e-06  3.25e-05  4.72e-01  
 18  +4.5229e-01  +4.7756e-01  2.53e-02  5.36e-06  1.25e-03  1.27e-06  1.94e-05  8.91e-01  
 19  +4.4958e-01  +4.6618e-01  1.66e-02  3.48e-06  8.13e-04  8.50e-07  1.28e-05  5.17e-01  
 20  +4.4717e-01  +4.5636e-01  9.19e-03  1.91e-06  4.45e-04  4.74e-07  7.13e-06  5.34e-01  
 21  +4.4476e-01  +4.4667e-01  1.91e-03  3.89e-07  9.09e-05  9.89e-08  1.49e-06  8.55e-01  
 22  +4.4420e-01  +4.4449e-01  2.88e-04  5.81e-08  1.36e-05  1.49e-08  2.25e-07  8.89e-01  
 23  +4.4412e-01  +4.4417e-01  5.04e-05  1.02e-08  2.37e-06  2.59e-09  3.95e-08  9.68e-01  
 24  +4.4410e-01  +4.4410e-01  5.20e-07  1.05e-10  2.45e-08  2.67e-11  4.07e-10  9.90e-01  
 25  +4.4410e-01  +4.4410e-01  5.21e-09  1.05e-12  2.45e-10  2.68e-13  4.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 133.99ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:34 PM: Optimal value: 4.441e-01
(CVXPY) Aug 30 12:19:34 PM: Compilation took 3.522e-02 seconds
(CVXPY) Aug 30 12:19:34 PM: Solver (including time spent in interface) took 1.429e-01 seconds
Iteration: 18, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:34 PM: Your problem has 5197 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:34 PM: Finished problem compilation (took 3.390e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5197
  constraints   = 10197
  nnz(P)        = 0
  nnz(A)        = 91448
  cones (total) = 1
    : Nonnegative = 1,  numel = 10197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8346e-01  +1.0698e+03  1.07e+03  4.22e-01  7.35e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3421e-01  +1.2524e+02  1.25e+02  1.63e-01  3.58e+01  1.48e-02  2.63e-01  9.07e-01  
  3  +5.0917e-01  +3.2396e+01  3.19e+01  1.21e-01  2.67e+01  4.00e-05  2.50e-01  2.27e-01  
  4  +5.0086e-01  +2.6718e+00  2.17e+00  1.49e-02  3.37e+00  5.55e-06  1.57e-01  6.62e-01  
  5  +5.0021e-01  +1.1393e+00  6.39e-01  4.34e-03  1.00e+00  2.82e-05  9.44e-02  7.64e-01  
  6  +5.0009e-01  +8.4694e-01  3.47e-01  2.34e-03  5.41e-01  2.67e-05  4.20e-02  5.95e-01  
  7  +4.9996e-01  +8.0526e-01  3.05e-01  1.55e-03  3.61e-01  9.10e-05  7.51e-03  8.85e-01  
  8  +4.9782e-01  +7.8972e-01  2.92e-01  1.63e-04  3.84e-02  1.20e-03  5.01e-04  9.36e-01  
  9  +4.9485e-01  +7.4499e-01  2.50e-01  9.18e-05  2.16e-02  1.43e-03  2.81e-04  5.25e-01  
 10  +4.9392e-01  +7.2600e-01  2.32e-01  7.81e-05  1.83e-02  1.08e-03  2.39e-04  3.39e-01  
 11  +4.9330e-01  +7.0771e-01  2.14e-01  7.47e-05  1.75e-02  6.73e-04  2.29e-04  2.66e-01  
 12  +4.8888e-01  +6.7492e-01  1.86e-01  5.64e-05  1.32e-02  5.39e-04  1.75e-04  3.46e-01  
 13  +4.8581e-01  +6.5168e-01  1.66e-01  4.94e-05  1.16e-02  3.48e-04  1.56e-04  2.94e-01  
 14  +4.7846e-01  +6.0469e-01  1.26e-01  3.49e-05  8.18e-03  1.04e-04  1.14e-04  6.10e-01  
 15  +4.7233e-01  +5.7327e-01  1.01e-01  2.59e-05  6.06e-03  5.25e-05  8.63e-05  4.76e-01  
 16  +4.6650e-01  +5.4468e-01  7.82e-02  1.89e-05  4.43e-03  1.92e-05  6.45e-05  6.06e-01  
 17  +4.5812e-01  +5.0663e-01  4.85e-02  1.10e-05  2.57e-03  1.00e-05  3.88e-05  4.83e-01  
 18  +4.5620e-01  +4.9805e-01  4.18e-02  9.33e-06  2.18e-03  8.07e-06  3.32e-05  2.15e-01  
 19  +4.5201e-01  +4.7805e-01  2.60e-02  5.52e-06  1.29e-03  1.40e-06  2.00e-05  9.90e-01  
 20  +4.4853e-01  +4.6364e-01  1.51e-02  3.16e-06  7.38e-04  8.13e-07  1.17e-05  7.21e-01  
 21  +4.4611e-01  +4.5369e-01  7.58e-03  1.57e-06  3.66e-04  4.06e-07  5.90e-06  9.14e-01  
 22  +4.4391e-01  +4.4507e-01  1.16e-03  2.37e-07  5.54e-05  6.19e-08  9.17e-07  8.88e-01  
 23  +4.4357e-01  +4.4377e-01  2.01e-04  4.09e-08  9.55e-06  1.07e-08  1.59e-07  8.40e-01  
 24  +4.4351e-01  +4.4354e-01  2.77e-05  5.61e-09  1.31e-06  1.41e-09  2.19e-08  9.90e-01  
 25  +4.4350e-01  +4.4350e-01  2.82e-07  5.72e-11  1.34e-08  1.44e-11  2.23e-10  9.90e-01  
 26  +4.4350e-01  +4.4350e-01  4.20e-09  8.52e-13  1.99e-10  2.17e-13  3.36e-12  9.85e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 139.6586ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:34 PM: Optimal value: 4.435e-01
(CVXPY) Aug 30 12:19:34 PM: Compilation took 3.390e-02 seconds
(CVXPY) Aug 30 12:19:34 PM: Solver (including time spent in interface) took 1.480e-01 seconds
Iteration: 19, Objective: 0.4435
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:34 PM: Your problem has 5206 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:34 PM: Finished problem compilation (took 3.333e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5206
  constraints   = 10206
  nnz(P)        = 0
  nnz(A)        = 91906
  cones (total) = 1
    : Nonnegative = 1,  numel = 10206

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8346e-01  +1.0698e+03  1.07e+03  4.22e-01  7.34e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3419e-01  +1.2519e+02  1.25e+02  1.63e-01  3.57e+01  1.48e-02  2.63e-01  9.07e-01  
  3  +5.0917e-01  +3.2383e+01  3.19e+01  1.21e-01  2.66e+01  4.00e-05  2.49e-01  2.27e-01  
  4  +5.0086e-01  +2.6709e+00  2.17e+00  1.49e-02  3.37e+00  5.55e-06  1.57e-01  6.63e-01  
  5  +5.0020e-01  +1.1251e+00  6.25e-01  4.24e-03  9.79e-01  2.86e-05  9.27e-02  7.82e-01  
  6  +5.0009e-01  +8.4209e-01  3.42e-01  2.30e-03  5.32e-01  2.79e-05  3.93e-02  6.37e-01  
  7  +4.9991e-01  +8.0876e-01  3.09e-01  1.36e-03  3.16e-01  1.19e-04  5.76e-03  9.20e-01  
  8  +4.9755e-01  +7.9349e-01  2.96e-01  1.52e-04  3.57e-02  1.32e-03  4.65e-04  9.20e-01  
  9  +4.9439e-01  +7.4334e-01  2.49e-01  9.02e-05  2.12e-02  1.38e-03  2.76e-04  5.05e-01  
 10  +4.9361e-01  +7.2937e-01  2.36e-01  7.81e-05  1.83e-02  1.14e-03  2.38e-04  2.90e-01  
 11  +4.9291e-01  +7.0376e-01  2.11e-01  7.30e-05  1.71e-02  5.34e-04  2.24e-04  3.91e-01  
 12  +4.8964e-01  +6.7619e-01  1.87e-01  6.07e-05  1.42e-02  3.55e-04  1.88e-04  3.52e-01  
 13  +4.8547e-01  +6.4678e-01  1.61e-01  4.95e-05  1.16e-02  1.73e-04  1.56e-04  4.67e-01  
 14  +4.7703e-01  +6.0219e-01  1.25e-01  3.36e-05  7.85e-03  1.30e-04  1.10e-04  3.36e-01  
 15  +4.6889e-01  +5.6017e-01  9.13e-02  2.28e-05  5.33e-03  4.70e-05  7.74e-05  5.76e-01  
 16  +4.6160e-01  +5.2576e-01  6.42e-02  1.51e-05  3.53e-03  2.61e-05  5.29e-05  4.34e-01  
 17  +4.5349e-01  +4.8840e-01  3.49e-02  7.69e-06  1.79e-03  9.15e-06  2.79e-05  6.61e-01  
 18  +4.5302e-01  +4.8608e-01  3.31e-02  7.24e-06  1.69e-03  7.49e-06  2.64e-05  2.12e-01  
 19  +4.5147e-01  +4.7936e-01  2.79e-02  6.00e-06  1.40e-03  5.55e-06  2.21e-05  3.00e-01  
 20  +4.5096e-01  +4.7684e-01  2.59e-02  5.48e-06  1.28e-03  3.86e-06  2.02e-05  4.13e-01  
 21  +4.4586e-01  +4.5566e-01  9.79e-03  2.01e-06  4.68e-04  7.08e-07  7.72e-06  9.24e-01  
 22  +4.4410e-01  +4.4871e-01  4.61e-03  9.32e-07  2.18e-04  3.15e-07  3.67e-06  6.20e-01  
 23  +4.4330e-01  +4.4546e-01  2.16e-03  4.34e-07  1.01e-04  1.12e-07  1.73e-06  9.90e-01  
 24  +4.4254e-01  +4.4265e-01  1.10e-04  2.19e-08  5.12e-06  5.65e-09  8.85e-08  9.53e-01  
 25  +4.4250e-01  +4.4250e-01  1.10e-06  2.20e-10  5.13e-08  5.67e-11  8.89e-10  9.90e-01  
 26  +4.4250e-01  +4.4250e-01  1.10e-08  2.20e-12  5.14e-10  5.67e-13  8.90e-12  9.90e-01  
 27  +4.4250e-01  +4.4250e-01  1.10e-10  2.20e-14  5.14e-12  5.77e-15  9.05e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.0091ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:34 PM: Optimal value: 4.425e-01
(CVXPY) Aug 30 12:19:34 PM: Compilation took 3.333e-02 seconds
(CVXPY) Aug 30 12:19:34 PM: Solver (including time spent in interface) took 1.531e-01 seconds
Iteration: 20, Objective: 0.4425
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:34 PM: Your problem has 5209 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:34 PM: Finished problem compilation (took 3.505e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5209
  constraints   = 10209
  nnz(P)        = 0
  nnz(A)        = 92191
  cones (total) = 1
    : Nonnegative = 1,  numel = 10209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8346e-01  +1.0697e+03  1.07e+03  4.22e-01  7.34e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3419e-01  +1.2519e+02  1.25e+02  1.63e-01  3.57e+01  1.48e-02  2.63e-01  9.07e-01  
  3  +5.0916e-01  +3.2379e+01  3.19e+01  1.21e-01  2.66e+01  4.00e-05  2.49e-01  2.27e-01  
  4  +5.0086e-01  +2.6710e+00  2.17e+00  1.49e-02  3.37e+00  5.56e-06  1.57e-01  6.63e-01  
  5  +5.0020e-01  +1.1360e+00  6.36e-01  4.32e-03  9.96e-01  2.84e-05  9.35e-02  7.72e-01  
  6  +5.0009e-01  +8.4713e-01  3.47e-01  2.34e-03  5.40e-01  2.76e-05  4.02e-02  6.31e-01  
  7  +4.9994e-01  +8.1613e-01  3.16e-01  1.52e-03  3.53e-01  1.03e-04  6.90e-03  8.90e-01  
  8  +4.9770e-01  +7.9784e-01  3.00e-01  1.62e-04  3.80e-02  1.25e-03  4.96e-04  9.32e-01  
  9  +4.9454e-01  +7.4785e-01  2.53e-01  9.13e-05  2.14e-02  1.42e-03  2.79e-04  5.29e-01  
 10  +4.9354e-01  +7.2943e-01  2.36e-01  7.80e-05  1.83e-02  1.11e-03  2.38e-04  3.17e-01  
 11  +4.9299e-01  +7.1262e-01  2.20e-01  7.49e-05  1.76e-02  7.33e-04  2.30e-04  2.39e-01  
 12  +4.8952e-01  +6.8189e-01  1.92e-01  6.03e-05  1.42e-02  4.84e-04  1.87e-04  3.84e-01  
 13  +4.8726e-01  +6.6023e-01  1.73e-01  5.46e-05  1.28e-02  2.16e-04  1.71e-04  4.31e-01  
 14  +4.7721e-01  +6.0500e-01  1.28e-01  3.37e-05  7.89e-03  1.40e-04  1.10e-04  4.58e-01  
 15  +4.6976e-01  +5.6679e-01  9.70e-02  2.42e-05  5.65e-03  5.66e-05  8.17e-05  5.30e-01  
 16  +4.5958e-01  +5.1902e-01  5.94e-02  1.37e-05  3.21e-03  2.40e-05  4.87e-05  5.43e-01  
 17  +4.5301e-01  +4.8932e-01  3.63e-02  7.96e-06  1.86e-03  1.05e-05  2.92e-05  5.78e-01  
 18  +4.5240e-01  +4.8662e-01  3.42e-02  7.40e-06  1.73e-03  8.97e-06  2.72e-05  1.76e-01  
 19  +4.5085e-01  +4.7979e-01  2.89e-02  6.15e-06  1.44e-03  6.45e-06  2.28e-05  3.23e-01  
 20  +4.4639e-01  +4.6050e-01  1.41e-02  2.89e-06  6.74e-04  8.36e-07  1.11e-05  9.90e-01  
 21  +4.4331e-01  +4.4852e-01  5.20e-03  1.05e-06  2.44e-04  3.03e-07  4.15e-06  6.61e-01  
 22  +4.4204e-01  +4.4348e-01  1.45e-03  2.89e-07  6.75e-05  7.43e-08  1.16e-06  9.90e-01  
 23  +4.4151e-01  +4.4153e-01  2.30e-05  4.58e-09  1.07e-06  1.17e-09  1.85e-08  9.86e-01  
 24  +4.4150e-01  +4.4150e-01  2.30e-07  4.58e-11  1.07e-08  1.17e-11  1.86e-10  9.90e-01  
 25  +4.4150e-01  +4.4150e-01  2.30e-09  4.58e-13  1.07e-10  1.19e-13  1.88e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 140.301ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:35 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:35 PM: Optimal value: 4.415e-01
(CVXPY) Aug 30 12:19:35 PM: Compilation took 3.505e-02 seconds
(CVXPY) Aug 30 12:19:35 PM: Solver (including time spent in interface) took 1.498e-01 seconds
Iteration: 21, Objective: 0.4415
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:35 PM: Your problem has 5217 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:35 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:35 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:35 PM: Finished problem compilation (took 4.143e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5217
  constraints   = 10217
  nnz(P)        = 0
  nnz(A)        = 92842
  cones (total) = 1
    : Nonnegative = 1,  numel = 10217

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8346e-01  +1.0696e+03  1.07e+03  4.22e-01  7.34e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3417e-01  +1.2512e+02  1.25e+02  1.62e-01  3.56e+01  1.48e-02  2.63e-01  9.08e-01  
  3  +5.0916e-01  +3.2354e+01  3.18e+01  1.21e-01  2.66e+01  4.00e-05  2.49e-01  2.28e-01  
  4  +5.0086e-01  +2.6673e+00  2.17e+00  1.49e-02  3.37e+00  5.56e-06  1.57e-01  6.64e-01  
  5  +5.0021e-01  +1.1501e+00  6.50e-01  4.42e-03  1.02e+00  2.83e-05  9.39e-02  7.63e-01  
  6  +5.0010e-01  +8.7443e-01  3.74e-01  2.52e-03  5.83e-01  2.83e-05  4.25e-02  6.12e-01  
  7  +4.9995e-01  +8.4026e-01  3.40e-01  1.62e-03  3.78e-01  1.02e-04  7.35e-03  9.02e-01  
  8  +4.9788e-01  +8.2271e-01  3.25e-01  1.84e-04  4.32e-02  1.16e-03  5.67e-04  9.25e-01  
  9  +4.9499e-01  +7.6107e-01  2.66e-01  1.07e-04  2.52e-02  1.16e-03  3.31e-04  5.23e-01  
 10  +4.9434e-01  +7.4042e-01  2.46e-01  8.76e-05  2.06e-02  8.60e-04  2.67e-04  4.08e-01  
 11  +4.9412e-01  +7.3475e-01  2.41e-01  8.58e-05  2.01e-02  7.73e-04  2.62e-04  8.43e-02  
 12  +4.9221e-01  +7.0921e-01  2.17e-01  7.05e-05  1.65e-02  5.12e-04  2.17e-04  4.10e-01  
 13  +4.8797e-01  +6.7141e-01  1.83e-01  5.74e-05  1.35e-02  2.55e-04  1.80e-04  4.39e-01  
 14  +4.7912e-01  +6.1452e-01  1.35e-01  3.77e-05  8.83e-03  5.83e-05  1.23e-04  7.03e-01  
 15  +4.7157e-01  +5.7728e-01  1.06e-01  2.71e-05  6.34e-03  3.59e-05  9.11e-05  3.88e-01  
 16  +4.6176e-01  +5.3055e-01  6.88e-02  1.62e-05  3.78e-03  1.15e-05  5.68e-05  6.58e-01  
 17  +4.5409e-01  +4.9640e-01  4.23e-02  9.43e-06  2.20e-03  6.10e-06  3.44e-05  4.79e-01  
 18  +4.5359e-01  +4.9401e-01  4.04e-02  8.85e-06  2.06e-03  5.27e-06  3.23e-05  2.09e-01  
 19  +4.5207e-01  +4.8683e-01  3.48e-02  7.41e-06  1.73e-03  3.28e-06  2.72e-05  5.50e-01  
 20  +4.4734e-01  +4.6725e-01  1.99e-02  4.11e-06  9.60e-04  1.55e-06  1.56e-05  6.43e-01  
 21  +4.4276e-01  +4.4884e-01  6.08e-03  1.22e-06  2.86e-04  4.61e-07  4.82e-06  7.05e-01  
 22  +4.4135e-01  +4.4312e-01  1.76e-03  3.51e-07  8.19e-05  9.24e-08  1.41e-06  9.90e-01  
 23  +4.4072e-01  +4.4076e-01  4.16e-05  8.25e-09  1.93e-06  2.17e-09  3.33e-08  9.77e-01  
 24  +4.4070e-01  +4.4070e-01  4.16e-07  8.26e-11  1.93e-08  2.17e-11  3.33e-10  9.90e-01  
 25  +4.4070e-01  +4.4070e-01  4.16e-09  8.26e-13  1.93e-10  2.19e-13  3.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 142.3712ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:35 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:35 PM: Optimal value: 4.407e-01
(CVXPY) Aug 30 12:19:35 PM: Compilation took 4.143e-02 seconds
(CVXPY) Aug 30 12:19:35 PM: Solver (including time spent in interface) took 1.530e-01 seconds
Iteration: 22, Objective: 0.4407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:35 PM: Your problem has 5222 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:35 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:35 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:35 PM: Finished problem compilation (took 3.410e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:35 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5222
  constraints   = 10222
  nnz(P)        = 0
  nnz(A)        = 93423
  cones (total) = 1
    : Nonnegative = 1,  numel = 10222

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8344e-01  +1.0697e+03  1.07e+03  4.22e-01  7.33e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3415e-01  +1.2509e+02  1.25e+02  1.63e-01  3.56e+01  1.48e-02  2.63e-01  9.08e-01  
  3  +5.0915e-01  +3.2352e+01  3.18e+01  1.21e-01  2.66e+01  4.00e-05  2.49e-01  2.28e-01  
  4  +5.0086e-01  +2.6699e+00  2.17e+00  1.49e-02  3.37e+00  5.56e-06  1.57e-01  6.63e-01  
  5  +5.0021e-01  +1.1568e+00  6.57e-01  4.46e-03  1.03e+00  2.84e-05  9.43e-02  7.58e-01  
  6  +5.0010e-01  +8.8092e-01  3.81e-01  2.57e-03  5.93e-01  2.84e-05  4.32e-02  6.09e-01  
  7  +4.9995e-01  +8.4041e-01  3.40e-01  1.59e-03  3.70e-01  1.05e-04  7.07e-03  9.13e-01  
  8  +4.9788e-01  +8.2314e-01  3.25e-01  1.83e-04  4.31e-02  1.16e-03  5.66e-04  9.22e-01  
  9  +4.9522e-01  +7.6558e-01  2.70e-01  1.13e-04  2.64e-02  1.13e-03  3.47e-04  4.90e-01  
 10  +4.9424e-01  +7.4216e-01  2.48e-01  9.10e-05  2.14e-02  8.73e-04  2.79e-04  3.83e-01  
 11  +4.9367e-01  +7.1676e-01  2.23e-01  7.82e-05  1.84e-02  4.31e-04  2.40e-04  5.01e-01  
 12  +4.8956e-01  +6.8012e-01  1.91e-01  6.08e-05  1.43e-02  2.40e-04  1.89e-04  4.76e-01  
 13  +4.8235e-01  +6.3726e-01  1.55e-01  4.35e-05  1.02e-02  1.71e-04  1.39e-04  3.64e-01  
 14  +4.7236e-01  +5.8430e-01  1.12e-01  2.85e-05  6.65e-03  9.39e-05  9.49e-05  4.38e-01  
 15  +4.6560e-01  +5.4969e-01  8.41e-02  2.02e-05  4.72e-03  1.45e-05  6.96e-05  7.69e-01  
 16  +4.5659e-01  +5.0935e-01  5.28e-02  1.19e-05  2.78e-03  7.81e-06  4.29e-05  4.58e-01  
 17  +4.5311e-01  +4.9373e-01  4.06e-02  8.78e-06  2.05e-03  4.82e-06  3.22e-05  4.74e-01  
 18  +4.5273e-01  +4.9176e-01  3.90e-02  8.38e-06  1.96e-03  4.12e-06  3.08e-05  2.33e-01  
 19  +4.4939e-01  +4.7789e-01  2.85e-02  5.99e-06  1.40e-03  2.91e-06  2.25e-05  3.08e-01  
 20  +4.4430e-01  +4.5630e-01  1.20e-02  2.43e-06  5.67e-04  6.46e-07  9.42e-06  9.90e-01  
 21  +4.4098e-01  +4.4347e-01  2.48e-03  4.97e-07  1.16e-04  1.31e-07  1.99e-06  8.28e-01  
 22  +4.4012e-01  +4.4019e-01  6.42e-05  1.28e-08  2.98e-06  3.25e-09  5.19e-08  9.87e-01  
 23  +4.4010e-01  +4.4010e-01  6.43e-07  1.28e-10  2.99e-08  3.26e-11  5.20e-10  9.90e-01  
 24  +4.4010e-01  +4.4010e-01  6.43e-09  1.28e-12  2.99e-10  3.26e-13  5.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 131.0065ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:35 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:35 PM: Optimal value: 4.401e-01
(CVXPY) Aug 30 12:19:35 PM: Compilation took 3.410e-02 seconds
(CVXPY) Aug 30 12:19:35 PM: Solver (including time spent in interface) took 1.401e-01 seconds
Iteration: 23, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:35 PM: Your problem has 5232 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:35 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:35 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:35 PM: Finished problem compilation (took 3.581e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5232
  constraints   = 10232
  nnz(P)        = 0
  nnz(A)        = 93932
  cones (total) = 1
    : Nonnegative = 1,  numel = 10232

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8339e-01  +1.0698e+03  1.07e+03  4.22e-01  7.33e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3409e-01  +1.2499e+02  1.24e+02  1.63e-01  3.55e+01  1.48e-02  2.63e-01  9.08e-01  
  3  +5.0914e-01  +3.2332e+01  3.18e+01  1.21e-01  2.65e+01  4.01e-05  2.49e-01  2.29e-01  
  4  +5.0086e-01  +2.6763e+00  2.18e+00  1.49e-02  3.38e+00  5.56e-06  1.56e-01  6.63e-01  
  5  +5.0022e-01  +1.1764e+00  6.76e-01  4.60e-03  1.06e+00  2.85e-05  9.49e-02  7.48e-01  
  6  +5.0010e-01  +8.8800e-01  3.88e-01  2.61e-03  6.04e-01  2.91e-05  4.26e-02  6.27e-01  
  7  +4.9993e-01  +8.5015e-01  3.50e-01  1.54e-03  3.58e-01  1.17e-04  6.50e-03  9.22e-01  
  8  +4.9784e-01  +8.3051e-01  3.33e-01  1.87e-04  4.39e-02  1.16e-03  5.77e-04  9.14e-01  
  9  +4.9509e-01  +7.6633e-01  2.71e-01  1.17e-04  2.75e-02  1.04e-03  3.62e-04  4.88e-01  
 10  +4.9469e-01  +7.5040e-01  2.56e-01  1.03e-04  2.42e-02  8.19e-04  3.17e-04  2.92e-01  
 11  +4.9339e-01  +7.3672e-01  2.43e-01  8.51e-05  2.00e-02  7.72e-04  2.61e-04  2.73e-01  
 12  +4.9301e-01  +7.2411e-01  2.31e-01  8.34e-05  1.96e-02  5.66e-04  2.57e-04  1.75e-01  
 13  +4.9102e-01  +7.0787e-01  2.17e-01  7.07e-05  1.66e-02  4.97e-04  2.19e-04  2.48e-01  
 14  +4.8659e-01  +6.6712e-01  1.81e-01  5.67e-05  1.33e-02  2.08e-04  1.79e-04  5.02e-01  
 15  +4.8237e-01  +6.4022e-01  1.58e-01  4.67e-05  1.09e-02  1.15e-04  1.50e-04  4.16e-01  
 16  +4.7347e-01  +5.9354e-01  1.20e-01  3.12e-05  7.29e-03  7.56e-05  1.04e-04  3.99e-01  
 17  +4.6653e-01  +5.5874e-01  9.22e-02  2.24e-05  5.23e-03  3.05e-05  7.67e-05  5.60e-01  
 18  +4.5369e-01  +5.0043e-01  4.67e-02  1.03e-05  2.41e-03  1.17e-05  3.77e-05  5.90e-01  
 19  +4.5280e-01  +4.9590e-01  4.31e-02  9.30e-06  2.17e-03  8.99e-06  3.40e-05  3.00e-01  
 20  +4.5212e-01  +4.9238e-01  4.03e-02  8.60e-06  2.01e-03  6.66e-06  3.15e-05  3.29e-01  
 21  +4.4676e-01  +4.7023e-01  2.35e-02  4.87e-06  1.14e-03  3.63e-06  1.85e-05  4.58e-01  
 22  +4.4040e-01  +4.4409e-01  3.70e-03  7.46e-07  1.74e-04  4.03e-07  2.95e-06  9.01e-01  
 23  +4.3946e-01  +4.4048e-01  1.02e-03  2.02e-07  4.72e-05  1.00e-07  8.12e-07  7.78e-01  
 24  +4.3916e-01  +4.3933e-01  1.66e-04  3.30e-08  7.69e-06  9.94e-09  1.33e-07  9.68e-01  
 25  +4.3910e-01  +4.3910e-01  2.04e-06  4.05e-10  9.44e-08  1.18e-10  1.63e-09  9.90e-01  
 26  +4.3910e-01  +4.3910e-01  2.04e-08  4.05e-12  9.45e-10  1.18e-12  1.63e-11  9.90e-01  
 27  +4.3910e-01  +4.3910e-01  2.09e-10  4.15e-14  9.66e-12  1.23e-14  1.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.4852ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:36 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:36 PM: Optimal value: 4.391e-01
(CVXPY) Aug 30 12:19:36 PM: Compilation took 3.581e-02 seconds
(CVXPY) Aug 30 12:19:36 PM: Solver (including time spent in interface) took 1.539e-01 seconds
Iteration: 24, Objective: 0.4391
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:36 PM: Your problem has 5242 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:36 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:36 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:36 PM: Finished problem compilation (took 4.050e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5242
  constraints   = 10242
  nnz(P)        = 0
  nnz(A)        = 94953
  cones (total) = 1
    : Nonnegative = 1,  numel = 10242

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8334e-01  +1.0698e+03  1.07e+03  4.22e-01  7.33e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3408e-01  +1.2496e+02  1.24e+02  1.62e-01  3.55e+01  1.48e-02  2.63e-01  9.09e-01  
  3  +5.0914e-01  +3.2328e+01  3.18e+01  1.21e-01  2.65e+01  4.01e-05  2.49e-01  2.29e-01  
  4  +5.0086e-01  +2.6761e+00  2.18e+00  1.49e-02  3.38e+00  5.57e-06  1.56e-01  6.63e-01  
  5  +5.0022e-01  +1.1807e+00  6.80e-01  4.63e-03  1.07e+00  2.84e-05  9.50e-02  7.44e-01  
  6  +5.0010e-01  +8.8193e-01  3.82e-01  2.57e-03  5.95e-01  2.88e-05  4.20e-02  6.27e-01  
  7  +4.9991e-01  +8.5002e-01  3.50e-01  1.47e-03  3.42e-01  1.25e-04  6.02e-03  9.33e-01  
  8  +4.9775e-01  +8.3051e-01  3.33e-01  1.80e-04  4.23e-02  1.21e-03  5.54e-04  9.10e-01  
  9  +4.9464e-01  +7.6147e-01  2.67e-01  1.08e-04  2.53e-02  1.09e-03  3.32e-04  5.24e-01  
 10  +4.9401e-01  +7.4394e-01  2.50e-01  9.16e-05  2.15e-02  8.42e-04  2.80e-04  3.40e-01  
 11  +4.9388e-01  +7.4044e-01  2.47e-01  9.11e-05  2.14e-02  7.89e-04  2.79e-04  3.90e-02  
 12  +4.9400e-01  +7.3296e-01  2.39e-01  8.94e-05  2.10e-02  6.08e-04  2.73e-04  1.81e-01  
 13  +4.9154e-01  +7.1507e-01  2.24e-01  7.19e-05  1.69e-02  5.89e-04  2.22e-04  2.50e-01  
 14  +4.8969e-01  +6.9361e-01  2.04e-01  6.73e-05  1.58e-02  3.73e-04  2.09e-04  2.58e-01  
 15  +4.8424e-01  +6.5983e-01  1.76e-01  5.12e-05  1.20e-02  3.10e-04  1.62e-04  2.84e-01  
 16  +4.7859e-01  +6.2238e-01  1.44e-01  3.99e-05  9.34e-03  1.17e-04  1.30e-04  5.31e-01  
 17  +4.7085e-01  +5.8322e-01  1.12e-01  2.86e-05  6.68e-03  7.40e-05  9.59e-05  3.77e-01  
 18  +4.6058e-01  +5.3395e-01  7.34e-02  1.72e-05  4.00e-03  3.63e-05  6.02e-05  4.89e-01  
 19  +4.5365e-01  +5.0217e-01  4.85e-02  1.07e-05  2.51e-03  1.82e-05  3.90e-05  5.01e-01  
 20  +4.5175e-01  +4.9327e-01  4.15e-02  8.85e-06  2.06e-03  1.16e-05  3.23e-05  4.26e-01  
 21  +4.5148e-01  +4.9182e-01  4.03e-02  8.56e-06  2.00e-03  9.94e-06  3.12e-05  1.75e-01  
 22  +4.4680e-01  +4.7259e-01  2.58e-02  5.29e-06  1.23e-03  5.82e-06  1.99e-05  4.27e-01  
 23  +4.4063e-01  +4.4715e-01  6.51e-03  1.29e-06  3.00e-04  4.44e-07  5.03e-06  9.76e-01  
 24  +4.3858e-01  +4.3931e-01  7.30e-04  1.43e-07  3.34e-05  3.93e-08  5.71e-07  9.90e-01  
 25  +4.3830e-01  +4.3831e-01  7.73e-06  1.52e-09  3.54e-07  4.16e-10  6.06e-09  9.89e-01  
 26  +4.3830e-01  +4.3830e-01  7.74e-08  1.52e-11  3.54e-09  4.16e-12  6.06e-11  9.90e-01  
 27  +4.3830e-01  +4.3830e-01  7.78e-10  1.53e-13  3.57e-11  4.20e-14  6.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 148.2394ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:36 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:36 PM: Optimal value: 4.383e-01
(CVXPY) Aug 30 12:19:36 PM: Compilation took 4.050e-02 seconds
(CVXPY) Aug 30 12:19:36 PM: Solver (including time spent in interface) took 1.568e-01 seconds
Iteration: 25, Objective: 0.4383
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:36 PM: Your problem has 5252 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:36 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:36 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:36 PM: Finished problem compilation (took 3.959e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5252
  constraints   = 10252
  nnz(P)        = 0
  nnz(A)        = 95783
  cones (total) = 1
    : Nonnegative = 1,  numel = 10252

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8325e-01  +1.0699e+03  1.07e+03  4.22e-01  7.32e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3404e-01  +1.2490e+02  1.24e+02  1.62e-01  3.54e+01  1.49e-02  2.63e-01  9.09e-01  
  3  +5.0914e-01  +3.2320e+01  3.18e+01  1.21e-01  2.64e+01  4.01e-05  2.49e-01  2.30e-01  
  4  +5.0086e-01  +2.6808e+00  2.18e+00  1.50e-02  3.39e+00  5.58e-06  1.56e-01  6.63e-01  
  5  +5.0023e-01  +1.2108e+00  7.11e-01  4.84e-03  1.11e+00  2.85e-05  9.62e-02  7.27e-01  
  6  +5.0010e-01  +8.8343e-01  3.83e-01  2.58e-03  5.97e-01  2.92e-05  4.12e-02  6.31e-01  
  7  +4.9988e-01  +8.7282e-01  3.73e-01  1.41e-03  3.29e-01  1.45e-04  5.48e-03  9.51e-01  
  8  +4.9770e-01  +8.5109e-01  3.53e-01  1.89e-04  4.44e-02  1.21e-03  5.81e-04  8.96e-01  
  9  +4.9502e-01  +7.8157e-01  2.87e-01  1.26e-04  2.95e-02  9.80e-04  3.89e-04  4.53e-01  
 10  +4.9387e-01  +7.5742e-01  2.64e-01  1.02e-04  2.40e-02  7.90e-04  3.15e-04  3.49e-01  
 11  +4.9429e-01  +7.3537e-01  2.41e-01  9.55e-05  2.24e-02  3.77e-04  2.92e-04  4.27e-01  
 12  +4.9207e-01  +7.1549e-01  2.23e-01  7.52e-05  1.76e-02  3.28e-04  2.32e-04  3.45e-01  
 13  +4.9036e-01  +6.9709e-01  2.07e-01  7.27e-05  1.70e-02  2.13e-04  2.26e-04  2.24e-01  
 14  +4.8454e-01  +6.6148e-01  1.77e-01  5.28e-05  1.24e-02  1.87e-04  1.67e-04  3.05e-01  
 15  +4.8139e-01  +6.3884e-01  1.57e-01  4.64e-05  1.09e-02  6.85e-05  1.49e-04  5.16e-01  
 16  +4.7164e-01  +5.8945e-01  1.18e-01  3.02e-05  7.06e-03  4.74e-05  1.01e-04  3.82e-01  
 17  +4.6402e-01  +5.5138e-01  8.74e-02  2.10e-05  4.91e-03  1.49e-05  7.29e-05  6.47e-01  
 18  +4.5549e-01  +5.1313e-01  5.76e-02  1.31e-05  3.05e-03  8.80e-06  4.72e-05  4.03e-01  
 19  +4.4879e-01  +4.8283e-01  3.40e-02  7.29e-06  1.70e-03  3.53e-06  2.72e-05  6.78e-01  
 20  +4.4747e-01  +4.7692e-01  2.95e-02  6.25e-06  1.46e-03  2.61e-06  2.35e-05  3.74e-01  
 21  +4.4545e-01  +4.6827e-01  2.28e-02  4.79e-06  1.12e-03  1.86e-06  1.82e-05  3.77e-01  
 22  +4.4546e-01  +4.6805e-01  2.26e-02  4.68e-06  1.09e-03  1.70e-06  1.77e-05  2.74e-01  
 23  +4.3925e-01  +4.4302e-01  3.77e-03  7.66e-07  1.79e-04  2.53e-07  3.03e-06  8.77e-01  
 24  +4.3871e-01  +4.4097e-01  2.26e-03  4.49e-07  1.05e-04  1.45e-07  1.78e-06  5.50e-01  
 25  +4.3829e-01  +4.3931e-01  1.03e-03  2.04e-07  4.75e-05  5.61e-08  8.12e-07  8.68e-01  
 26  +4.3791e-01  +4.3794e-01  3.23e-05  6.38e-09  1.49e-06  1.73e-09  2.56e-08  9.74e-01  
 27  +4.3790e-01  +4.3790e-01  3.26e-07  6.43e-11  1.50e-08  1.74e-11  2.58e-10  9.90e-01  
 28  +4.3790e-01  +4.3790e-01  3.37e-09  6.65e-13  1.55e-10  1.84e-13  2.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 159.7064ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:36 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:36 PM: Optimal value: 4.379e-01
(CVXPY) Aug 30 12:19:36 PM: Compilation took 3.959e-02 seconds
(CVXPY) Aug 30 12:19:36 PM: Solver (including time spent in interface) took 1.692e-01 seconds
Iteration: 26, Objective: 0.4379
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:36 PM: Your problem has 5262 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:36 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:36 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:36 PM: Finished problem compilation (took 3.998e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5262
  constraints   = 10262
  nnz(P)        = 0
  nnz(A)        = 96360
  cones (total) = 1
    : Nonnegative = 1,  numel = 10262

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8326e-01  +1.0699e+03  1.07e+03  4.22e-01  7.32e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3400e-01  +1.2479e+02  1.24e+02  1.62e-01  3.53e+01  1.49e-02  2.63e-01  9.09e-01  
  3  +5.0913e-01  +3.2292e+01  3.18e+01  1.21e-01  2.64e+01  4.02e-05  2.49e-01  2.30e-01  
  4  +5.0086e-01  +2.6810e+00  2.18e+00  1.50e-02  3.39e+00  5.58e-06  1.56e-01  6.64e-01  
  5  +5.0023e-01  +1.1990e+00  6.99e-01  4.76e-03  1.09e+00  2.90e-05  9.42e-02  7.46e-01  
  6  +5.0011e-01  +9.1541e-01  4.15e-01  2.79e-03  6.44e-01  3.21e-05  4.03e-02  6.88e-01  
  7  +4.9981e-01  +8.5762e-01  3.58e-01  1.17e-03  2.72e-01  1.79e-04  4.30e-03  9.52e-01  
  8  +4.9744e-01  +8.3727e-01  3.40e-01  1.72e-04  4.05e-02  1.31e-03  5.32e-04  8.77e-01  
  9  +4.9547e-01  +7.9307e-01  2.98e-01  1.35e-04  3.18e-02  1.09e-03  4.20e-04  3.02e-01  
 10  +4.9429e-01  +7.7223e-01  2.78e-01  1.13e-04  2.66e-02  9.70e-04  3.50e-04  2.70e-01  
 11  +4.9388e-01  +7.3964e-01  2.46e-01  9.60e-05  2.25e-02  4.40e-04  2.95e-04  5.22e-01  
 12  +4.9238e-01  +7.1838e-01  2.26e-01  7.71e-05  1.81e-02  2.85e-04  2.37e-04  4.83e-01  
 13  +4.9103e-01  +7.0672e-01  2.16e-01  7.45e-05  1.75e-02  2.28e-04  2.30e-04  1.47e-01  
 14  +4.8490e-01  +6.6752e-01  1.83e-01  5.40e-05  1.26e-02  1.75e-04  1.71e-04  3.70e-01  
 15  +4.7996e-01  +6.3573e-01  1.56e-01  4.48e-05  1.05e-02  7.21e-05  1.45e-04  4.86e-01  
 16  +4.7056e-01  +5.8814e-01  1.18e-01  3.02e-05  7.04e-03  4.84e-05  1.02e-04  3.69e-01  
 17  +4.6342e-01  +5.5287e-01  8.95e-02  2.16e-05  5.05e-03  1.88e-05  7.55e-05  5.78e-01  
 18  +4.5520e-01  +5.1552e-01  6.03e-02  1.38e-05  3.22e-03  1.13e-05  5.01e-05  3.94e-01  
 19  +4.5086e-01  +4.9588e-01  4.50e-02  9.95e-06  2.32e-03  7.27e-06  3.69e-05  3.86e-01  
 20  +4.5006e-01  +4.9209e-01  4.20e-02  9.16e-06  2.14e-03  6.26e-06  3.41e-05  1.86e-01  
 21  +4.4657e-01  +4.7526e-01  2.87e-02  6.03e-06  1.41e-03  1.69e-06  2.27e-05  9.51e-01  
 22  +4.4163e-01  +4.5532e-01  1.37e-02  2.83e-06  6.60e-04  7.87e-07  1.10e-05  6.14e-01  
 23  +4.3817e-01  +4.4147e-01  3.30e-03  6.75e-07  1.57e-04  1.90e-07  2.69e-06  7.70e-01  
 24  +4.3764e-01  +4.3948e-01  1.83e-03  3.67e-07  8.54e-05  1.04e-07  1.47e-06  5.43e-01  
 25  +4.3724e-01  +4.3790e-01  6.55e-04  1.31e-07  3.05e-05  3.37e-08  5.26e-07  9.29e-01  
 26  +4.3701e-01  +4.3703e-01  1.89e-05  3.77e-09  8.78e-07  9.63e-10  1.52e-08  9.75e-01  
 27  +4.3700e-01  +4.3700e-01  1.90e-07  3.79e-11  8.83e-09  9.69e-12  1.53e-10  9.90e-01  
 28  +4.3700e-01  +4.3700e-01  1.98e-09  3.93e-13  9.16e-11  1.03e-13  1.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.587ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:36 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:36 PM: Optimal value: 4.370e-01
(CVXPY) Aug 30 12:19:36 PM: Compilation took 3.998e-02 seconds
(CVXPY) Aug 30 12:19:36 PM: Solver (including time spent in interface) took 1.632e-01 seconds
Iteration: 27, Objective: 0.4370
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:37 PM: Your problem has 5263 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:37 PM: Finished problem compilation (took 3.767e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5263
  constraints   = 10263
  nnz(P)        = 0
  nnz(A)        = 96445
  cones (total) = 1
    : Nonnegative = 1,  numel = 10263

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8326e-01  +1.0699e+03  1.07e+03  4.22e-01  7.32e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3400e-01  +1.2479e+02  1.24e+02  1.62e-01  3.53e+01  1.49e-02  2.63e-01  9.09e-01  
  3  +5.0913e-01  +3.2292e+01  3.18e+01  1.21e-01  2.64e+01  4.02e-05  2.49e-01  2.30e-01  
  4  +5.0086e-01  +2.6811e+00  2.18e+00  1.50e-02  3.39e+00  5.58e-06  1.56e-01  6.64e-01  
  5  +5.0023e-01  +1.1995e+00  6.99e-01  4.76e-03  1.10e+00  2.90e-05  9.42e-02  7.46e-01  
  6  +5.0011e-01  +9.1536e-01  4.15e-01  2.79e-03  6.44e-01  3.21e-05  4.03e-02  6.89e-01  
  7  +4.9981e-01  +8.5791e-01  3.58e-01  1.17e-03  2.72e-01  1.80e-04  4.30e-03  9.51e-01  
  8  +4.9744e-01  +8.3751e-01  3.40e-01  1.73e-04  4.05e-02  1.31e-03  5.32e-04  8.77e-01  
  9  +4.9548e-01  +7.9335e-01  2.98e-01  1.36e-04  3.18e-02  1.09e-03  4.20e-04  3.02e-01  
 10  +4.9429e-01  +7.7244e-01  2.78e-01  1.13e-04  2.66e-02  9.71e-04  3.50e-04  2.71e-01  
 11  +4.9398e-01  +7.3997e-01  2.46e-01  9.67e-05  2.27e-02  4.28e-04  2.97e-04  5.25e-01  
 12  +4.9239e-01  +7.1894e-01  2.27e-01  7.72e-05  1.81e-02  2.90e-04  2.38e-04  4.71e-01  
 13  +4.9078e-01  +7.0482e-01  2.14e-01  7.35e-05  1.72e-02  2.18e-04  2.28e-04  1.92e-01  
 14  +4.8467e-01  +6.6614e-01  1.81e-01  5.36e-05  1.25e-02  1.68e-04  1.70e-04  3.61e-01  
 15  +4.7977e-01  +6.3559e-01  1.56e-01  4.45e-05  1.04e-02  7.97e-05  1.44e-04  4.46e-01  
 16  +4.7104e-01  +5.9130e-01  1.20e-01  3.10e-05  7.24e-03  5.35e-05  1.04e-04  3.54e-01  
 17  +4.6188e-01  +5.4649e-01  8.46e-02  2.03e-05  4.73e-03  2.10e-05  7.12e-05  5.71e-01  
 18  +4.5481e-01  +5.1444e-01  5.96e-02  1.36e-05  3.18e-03  1.34e-05  4.97e-05  3.56e-01  
 19  +4.5036e-01  +4.9449e-01  4.41e-02  9.74e-06  2.27e-03  8.75e-06  3.63e-05  3.65e-01  
 20  +4.4968e-01  +4.9126e-01  4.16e-02  9.07e-06  2.11e-03  7.67e-06  3.39e-05  1.59e-01  
 21  +4.4641e-01  +4.7571e-01  2.93e-02  6.16e-06  1.44e-03  2.71e-06  2.34e-05  7.91e-01  
 22  +4.4258e-01  +4.5956e-01  1.70e-02  3.50e-06  8.16e-04  9.65e-07  1.36e-05  9.49e-01  
 23  +4.3821e-01  +4.4235e-01  4.14e-03  8.46e-07  1.97e-04  2.29e-07  3.42e-06  7.75e-01  
 24  +4.3686e-01  +4.3703e-01  1.71e-04  3.48e-08  8.11e-06  8.58e-09  1.43e-07  9.84e-01  
 25  +4.3680e-01  +4.3680e-01  1.75e-06  3.56e-10  8.29e-08  8.76e-11  1.47e-09  9.90e-01  
 26  +4.3680e-01  +4.3680e-01  1.75e-08  3.56e-12  8.29e-10  8.76e-13  1.47e-11  9.90e-01  
 27  +4.3680e-01  +4.3680e-01  1.79e-10  3.63e-14  8.47e-12  9.05e-15  1.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.1944ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:37 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:37 PM: Optimal value: 4.368e-01
(CVXPY) Aug 30 12:19:37 PM: Compilation took 3.767e-02 seconds
(CVXPY) Aug 30 12:19:37 PM: Solver (including time spent in interface) took 1.577e-01 seconds
Iteration: 28, Objective: 0.4368
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:37 PM: Your problem has 5264 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:37 PM: Finished problem compilation (took 3.805e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5264
  constraints   = 10264
  nnz(P)        = 0
  nnz(A)        = 96488
  cones (total) = 1
    : Nonnegative = 1,  numel = 10264

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8326e-01  +1.0699e+03  1.07e+03  4.22e-01  7.31e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3400e-01  +1.2479e+02  1.24e+02  1.62e-01  3.53e+01  1.49e-02  2.63e-01  9.09e-01  
  3  +5.0913e-01  +3.2290e+01  3.18e+01  1.21e-01  2.64e+01  4.02e-05  2.49e-01  2.31e-01  
  4  +5.0086e-01  +2.6805e+00  2.18e+00  1.50e-02  3.39e+00  5.58e-06  1.56e-01  6.64e-01  
  5  +5.0023e-01  +1.2053e+00  7.05e-01  4.80e-03  1.10e+00  2.89e-05  9.46e-02  7.41e-01  
  6  +5.0011e-01  +9.1110e-01  4.11e-01  2.76e-03  6.38e-01  3.20e-05  4.00e-02  6.92e-01  
  7  +4.9981e-01  +8.6198e-01  3.62e-01  1.15e-03  2.68e-01  1.86e-04  4.20e-03  9.54e-01  
  8  +4.9742e-01  +8.4080e-01  3.43e-01  1.73e-04  4.07e-02  1.31e-03  5.34e-04  8.74e-01  
  9  +4.9549e-01  +7.9623e-01  3.01e-01  1.37e-04  3.22e-02  1.09e-03  4.25e-04  2.95e-01  
 10  +4.9428e-01  +7.7450e-01  2.80e-01  1.14e-04  2.68e-02  9.64e-04  3.53e-04  2.75e-01  
 11  +4.9405e-01  +7.4155e-01  2.47e-01  9.83e-05  2.31e-02  4.18e-04  3.02e-04  5.20e-01  
 12  +4.9257e-01  +7.2257e-01  2.30e-01  7.92e-05  1.86e-02  3.08e-04  2.44e-04  4.25e-01  
 13  +4.8993e-01  +6.9830e-01  2.08e-01  6.99e-05  1.64e-02  1.81e-04  2.17e-04  3.75e-01  
 14  +4.8338e-01  +6.5818e-01  1.75e-01  5.08e-05  1.19e-02  1.40e-04  1.62e-04  3.48e-01  
 15  +4.7776e-01  +6.2616e-01  1.48e-01  4.08e-05  9.54e-03  8.58e-05  1.33e-04  3.56e-01  
 16  +4.6934e-01  +5.8347e-01  1.14e-01  2.89e-05  6.74e-03  5.38e-05  9.79e-05  3.70e-01  
 17  +4.6023e-01  +5.3924e-01  7.90e-02  1.87e-05  4.35e-03  2.32e-05  6.62e-05  5.36e-01  
 18  +4.5291e-01  +5.0621e-01  5.33e-02  1.20e-05  2.80e-03  1.41e-05  4.42e-05  3.83e-01  
 19  +4.5083e-01  +4.9664e-01  4.58e-02  1.01e-05  2.35e-03  1.08e-05  3.76e-05  2.60e-01  
 20  +4.4957e-01  +4.9087e-01  4.13e-02  8.98e-06  2.09e-03  8.97e-06  3.36e-05  1.98e-01  
 21  +4.4598e-01  +4.7444e-01  2.85e-02  6.00e-06  1.40e-03  3.96e-06  2.29e-05  6.44e-01  
 22  +4.4230e-01  +4.5831e-01  1.60e-02  3.30e-06  7.69e-04  8.92e-07  1.29e-05  9.90e-01  
 23  +4.3784e-01  +4.4084e-01  3.00e-03  6.13e-07  1.43e-04  1.61e-07  2.49e-06  8.42e-01  
 24  +4.3686e-01  +4.3702e-01  1.63e-04  3.32e-08  7.73e-06  8.13e-09  1.37e-07  9.80e-01  
 25  +4.3680e-01  +4.3680e-01  1.66e-06  3.38e-10  7.88e-08  8.29e-11  1.39e-09  9.90e-01  
 26  +4.3680e-01  +4.3680e-01  1.66e-08  3.39e-12  7.89e-10  8.30e-13  1.40e-11  9.90e-01  
 27  +4.3680e-01  +4.3680e-01  1.69e-10  3.44e-14  8.02e-12  8.52e-15  1.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 159.6228ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:37 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:37 PM: Optimal value: 4.368e-01
(CVXPY) Aug 30 12:19:37 PM: Compilation took 3.805e-02 seconds
(CVXPY) Aug 30 12:19:37 PM: Solver (including time spent in interface) took 1.682e-01 seconds
Iteration: 29, Objective: 0.4368
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:19:37 PM: Your problem has 5265 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:19:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:19:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:19:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:19:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:19:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:19:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:19:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:19:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:19:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:19:37 PM: Finished problem compilation (took 3.956e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5265
  constraints   = 10265
  nnz(P)        = 0
  nnz(A)        = 96530
  cones (total) = 1
    : Nonnegative = 1,  numel = 10265

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8326e-01  +1.0699e+03  1.07e+03  4.22e-01  7.31e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3400e-01  +1.2478e+02  1.24e+02  1.62e-01  3.53e+01  1.49e-02  2.63e-01  9.09e-01  
  3  +5.0912e-01  +3.2289e+01  3.18e+01  1.21e-01  2.64e+01  4.02e-05  2.49e-01  2.31e-01  
  4  +5.0086e-01  +2.6804e+00  2.18e+00  1.50e-02  3.39e+00  5.58e-06  1.56e-01  6.64e-01  
  5  +5.0023e-01  +1.2043e+00  7.04e-01  4.80e-03  1.10e+00  2.89e-05  9.45e-02  7.42e-01  
  6  +5.0011e-01  +9.0903e-01  4.09e-01  2.75e-03  6.34e-01  3.20e-05  3.96e-02  6.93e-01  
  7  +4.9981e-01  +8.7759e-01  3.78e-01  1.16e-03  2.71e-01  1.89e-04  4.19e-03  9.74e-01  
  8  +4.9747e-01  +8.5519e-01  3.58e-01  1.79e-04  4.21e-02  1.28e-03  5.53e-04  8.69e-01  
  9  +4.9537e-01  +8.0083e-01  3.05e-01  1.40e-04  3.29e-02  1.00e-03  4.34e-04  3.17e-01  
 10  +4.9425e-01  +7.7776e-01  2.84e-01  1.17e-04  2.74e-02  8.62e-04  3.61e-04  2.85e-01  
 11  +4.9419e-01  +7.4153e-01  2.47e-01  9.96e-05  2.34e-02  3.26e-04  3.06e-04  5.61e-01  
 12  +4.9278e-01  +7.2256e-01  2.30e-01  7.99e-05  1.87e-02  2.35e-04  2.46e-04  4.44e-01  
 13  +4.9038e-01  +7.0111e-01  2.11e-01  7.19e-05  1.68e-02  1.51e-04  2.23e-04  3.25e-01  
 14  +4.8397e-01  +6.6140e-01  1.77e-01  5.20e-05  1.22e-02  1.17e-04  1.65e-04  3.56e-01  
 15  +4.7836e-01  +6.2876e-01  1.50e-01  4.18e-05  9.78e-03  6.64e-05  1.36e-04  3.93e-01  
 16  +4.6966e-01  +5.8467e-01  1.15e-01  2.92e-05  6.82e-03  4.18e-05  9.90e-05  3.76e-01  
 17  +4.6009e-01  +5.3848e-01  7.84e-02  1.85e-05  4.32e-03  1.78e-05  6.57e-05  5.45e-01  
 18  +4.5303e-01  +5.0667e-01  5.36e-02  1.21e-05  2.82e-03  1.11e-05  4.46e-05  3.70e-01  
 19  +4.5081e-01  +4.9655e-01  4.57e-02  1.01e-05  2.35e-03  8.57e-06  3.76e-05  2.60e-01  
 20  +4.4961e-01  +4.9101e-01  4.14e-02  9.01e-06  2.10e-03  7.16e-06  3.37e-05  1.99e-01  
 21  +4.4610e-01  +4.7484e-01  2.87e-02  6.06e-06  1.41e-03  3.24e-06  2.31e-05  6.57e-01  
 22  +4.4259e-01  +4.5946e-01  1.69e-02  3.48e-06  8.12e-04  9.19e-07  1.36e-05  9.90e-01  
 23  +4.3842e-01  +4.4315e-01  4.72e-03  9.66e-07  2.25e-04  2.52e-07  3.90e-06  7.53e-01  
 24  +4.3689e-01  +4.3712e-01  2.39e-04  4.87e-08  1.13e-05  1.20e-08  2.00e-07  9.73e-01  
 25  +4.3680e-01  +4.3680e-01  2.54e-06  5.18e-10  1.21e-07  1.27e-10  2.14e-09  9.90e-01  
 26  +4.3680e-01  +4.3680e-01  2.54e-08  5.18e-12  1.21e-09  1.27e-12  2.14e-11  9.90e-01  
 27  +4.3680e-01  +4.3680e-01  2.60e-10  5.29e-14  1.23e-11  1.31e-14  2.21e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.9163ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:19:37 PM: Problem status: optimal
(CVXPY) Aug 30 12:19:37 PM: Optimal value: 4.368e-01
(CVXPY) Aug 30 12:19:37 PM: Compilation took 3.956e-02 seconds
(CVXPY) Aug 30 12:19:37 PM: Solver (including time spent in interface) took 1.535e-01 seconds
FULL MODEL:
  Accruacy: 0.5233
  Our objective: 0.0466

IF 
    (x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0)                                             <-- (term's our objective: 0.013400000000000037)
 OR (x2 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.004200000000000052)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x4 = 0) <-- (term's our objective: 0.0014000000000000045)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0) <-- (term's our objective: 0.0010000000000000035)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0029999999999999823)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0012000000000000036)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x7 = 0) <-- (term's our objective: 0.0014000000000000037)
 OR (x0 = 1 AND x5 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0014000000000000045)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0010000000000000035)
 OR (x3 = 1 AND x4 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0009999999999999597)
 OR (x0 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x7 = 0) <-- (term's our objective: 0.0013999999999999594)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0014000000000000267)
 OR (x2 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0035999999999999826)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x2 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0014000000000000267)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.004600000000000005)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0017999999999999817)
 OR (x3 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0016000000000000046)
 OR (x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.0017999999999999605)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.013400000000000037
    Its accruacy: 0.5067
    Its hamming distance: 10
  Shortest hamming distance: 0
    Its our objective: 0.004600000000000005
  Highest accruacy: 0.5067
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

