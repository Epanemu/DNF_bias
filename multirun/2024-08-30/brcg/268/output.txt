Command:
python test_script.py -s smallest_subclass -d 7 -n 5000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.008799999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 7.

Computed total variation: 0.13
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:45 PM: Your problem has 2515 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:45 PM: Finished problem compilation (took 1.680e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2515
  constraints   = 5015
  nnz(P)        = 0
  nnz(A)        = 25015
  cones (total) = 1
    : Nonnegative = 1,  numel = 5015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.79e-01  7.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2570e+02  5.25e+02  4.01e-01  4.61e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3802e-01  +6.5555e+01  6.50e+01  1.52e-01  2.23e+01  1.31e-02  2.54e-01  8.66e-01  
  3  +5.0953e-01  +1.6650e+01  1.61e+01  1.05e-01  1.50e+01  3.38e-05  2.45e-01  1.74e-01  
  4  +5.0036e-01  +1.0471e+00  5.47e-01  5.28e-03  7.80e-01  6.40e-06  1.12e-01  9.90e-01  
  5  +5.0002e-01  +5.6987e-01  6.98e-02  6.60e-04  9.83e-02  2.44e-06  2.29e-02  8.67e-01  
  6  +4.9999e-01  +5.6634e-01  6.64e-02  6.12e-04  9.11e-02  5.11e-06  7.49e-03  7.51e-01  
  7  +4.9804e-01  +5.5964e-01  6.16e-02  6.45e-05  9.67e-03  1.48e-04  2.05e-04  9.80e-01  
  8  +4.9305e-01  +5.3113e-01  3.81e-02  1.94e-05  2.91e-03  2.00e-04  6.21e-05  7.28e-01  
  9  +4.8721e-01  +5.0123e-01  1.40e-02  6.92e-06  1.04e-03  8.30e-06  2.40e-05  8.35e-01  
 10  +4.8371e-01  +4.8578e-01  2.07e-03  9.03e-07  1.35e-04  1.03e-07  3.44e-06  9.90e-01  
 11  +4.8293e-01  +4.8300e-01  7.59e-05  3.06e-08  4.58e-06  6.30e-09  1.27e-07  9.90e-01  
 12  +4.8290e-01  +4.8290e-01  7.61e-07  3.06e-10  4.59e-08  6.31e-11  1.27e-09  9.90e-01  
 13  +4.8290e-01  +4.8290e-01  7.61e-09  3.07e-12  4.59e-10  6.57e-13  1.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.7925ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:45 PM: Optimal value: 4.829e-01
(CVXPY) Aug 30 12:13:45 PM: Compilation took 1.680e-02 seconds
(CVXPY) Aug 30 12:13:45 PM: Solver (including time spent in interface) took 3.033e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4829
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:45 PM: Your problem has 2525 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:45 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2525
  constraints   = 5025
  nnz(P)        = 0
  nnz(A)        = 28700
  cones (total) = 1
    : Nonnegative = 1,  numel = 5025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.79e-01  7.60e+01  1.00e+00  1.00e+00   ------   
  1  +5.8801e-01  +5.2588e+02  5.25e+02  4.01e-01  4.73e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3786e-01  +6.5397e+01  6.49e+01  1.52e-01  2.28e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0949e-01  +1.6599e+01  1.61e+01  1.05e-01  1.53e+01  3.39e-05  2.45e-01  1.77e-01  
  4  +5.0042e-01  +1.1512e+00  6.51e-01  6.29e-03  9.53e-01  6.62e-06  1.22e-01  9.11e-01  
  5  +5.0010e-01  +6.9289e-01  1.93e-01  1.83e-03  2.80e-01  3.49e-06  5.35e-02  6.20e-01  
  6  +5.0006e-01  +6.4304e-01  1.43e-01  1.35e-03  2.07e-01  3.40e-06  2.68e-02  6.07e-01  
  7  +4.9982e-01  +6.2461e-01  1.25e-01  7.14e-04  1.09e-01  1.71e-05  3.14e-03  9.59e-01  
  8  +4.9668e-01  +6.0300e-01  1.06e-01  7.02e-05  1.08e-02  1.81e-04  2.36e-04  9.25e-01  
  9  +4.9128e-01  +5.6018e-01  6.89e-02  4.29e-05  6.61e-03  6.54e-05  1.54e-04  5.06e-01  
 10  +4.9111e-01  +5.5790e-01  6.68e-02  4.06e-05  6.25e-03  5.21e-05  1.46e-04  2.10e-01  
 11  +4.8958e-01  +5.4536e-01  5.58e-02  3.26e-05  5.02e-03  1.42e-05  1.20e-04  6.47e-01  
 12  +4.8589e-01  +5.2460e-01  3.87e-02  2.15e-05  3.31e-03  4.78e-06  8.21e-05  6.39e-01  
 13  +4.8207e-01  +5.0532e-01  2.33e-02  1.19e-05  1.83e-03  2.58e-06  4.75e-05  5.02e-01  
 14  +4.7832e-01  +4.8621e-01  7.90e-03  3.76e-06  5.78e-04  5.52e-07  1.59e-05  9.90e-01  
 15  +4.7639e-01  +4.7703e-01  6.38e-04  3.03e-07  4.65e-05  3.09e-08  1.40e-06  9.34e-01  
 16  +4.7620e-01  +4.7621e-01  9.27e-06  4.40e-09  6.76e-07  3.91e-10  2.15e-08  9.86e-01  
 17  +4.7620e-01  +4.7620e-01  9.26e-08  4.39e-11  6.75e-09  3.91e-12  2.15e-10  9.90e-01  
 18  +4.7620e-01  +4.7620e-01  9.26e-10  4.39e-13  6.75e-11  3.92e-14  2.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 32.8382ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:45 PM: Optimal value: 4.762e-01
(CVXPY) Aug 30 12:13:45 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:45 PM: Solver (including time spent in interface) took 3.127e-02 seconds
Iteration: 2, Objective: 0.4762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:45 PM: Your problem has 2535 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:45 PM: Finished problem compilation (took 1.655e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2535
  constraints   = 5035
  nnz(P)        = 0
  nnz(A)        = 30571
  cones (total) = 1
    : Nonnegative = 1,  numel = 5035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.79e-01  7.65e+01  1.00e+00  1.00e+00   ------   
  1  +5.8789e-01  +5.2610e+02  5.26e+02  4.02e-01  4.76e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3772e-01  +6.5275e+01  6.47e+01  1.52e-01  2.29e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0944e-01  +1.6554e+01  1.60e+01  1.05e-01  1.54e+01  3.40e-05  2.45e-01  1.79e-01  
  4  +5.0057e-01  +1.4147e+00  9.14e-01  8.85e-03  1.34e+00  7.15e-06  1.42e-01  7.55e-01  
  5  +5.0013e-01  +7.8368e-01  2.84e-01  2.70e-03  4.14e-01  4.08e-06  7.19e-02  5.70e-01  
  6  +5.0007e-01  +6.9342e-01  1.93e-01  1.83e-03  2.81e-01  3.48e-06  3.64e-02  6.14e-01  
  7  +4.9992e-01  +6.2501e-01  1.25e-01  1.05e-03  1.60e-01  7.59e-06  6.98e-03  8.49e-01  
  8  +4.9645e-01  +6.0890e-01  1.12e-01  9.12e-05  1.42e-02  1.46e-04  2.95e-04  9.65e-01  
  9  +4.9388e-01  +5.8937e-01  9.55e-02  6.93e-05  1.07e-02  1.22e-04  2.26e-04  2.86e-01  
 10  +4.9167e-01  +5.7232e-01  8.07e-02  5.36e-05  8.31e-03  6.79e-05  1.75e-04  4.70e-01  
 11  +4.8930e-01  +5.5542e-01  6.61e-02  3.76e-05  5.82e-03  1.66e-05  1.21e-04  7.96e-01  
 12  +4.8877e-01  +5.5323e-01  6.45e-02  3.49e-05  5.40e-03  1.53e-05  1.12e-04  1.65e-01  
 13  +4.8603e-01  +5.3998e-01  5.39e-02  2.59e-05  4.01e-03  2.88e-06  8.37e-05  9.90e-01  
 14  +4.7908e-01  +5.1221e-01  3.31e-02  1.26e-05  1.96e-03  2.28e-06  4.23e-05  6.07e-01  
 15  +4.7898e-01  +5.1183e-01  3.28e-02  1.26e-05  1.95e-03  2.26e-06  4.22e-05  1.02e-02  
 16  +4.7632e-01  +5.0041e-01  2.41e-02  9.39e-06  1.45e-03  1.97e-06  3.18e-05  5.30e-01  
 17  +4.7410e-01  +4.9146e-01  1.74e-02  6.50e-06  1.01e-03  1.60e-06  2.23e-05  5.14e-01  
 18  +4.6902e-01  +4.7231e-01  3.29e-03  1.15e-06  1.78e-04  3.73e-07  4.07e-06  9.90e-01  
 19  +4.6773e-01  +4.6781e-01  7.85e-05  2.74e-08  4.24e-06  9.28e-09  9.78e-08  9.90e-01  
 20  +4.6770e-01  +4.6770e-01  7.85e-07  2.74e-10  4.23e-08  9.28e-11  9.79e-10  9.90e-01  
 21  +4.6770e-01  +4.6770e-01  7.85e-09  2.74e-12  4.24e-10  9.32e-13  9.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.1798ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:45 PM: Optimal value: 4.677e-01
(CVXPY) Aug 30 12:13:45 PM: Compilation took 1.655e-02 seconds
(CVXPY) Aug 30 12:13:45 PM: Solver (including time spent in interface) took 4.683e-02 seconds
Iteration: 3, Objective: 0.4677
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:45 PM: Your problem has 2545 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:45 PM: Finished problem compilation (took 7.471e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2545
  constraints   = 5045
  nnz(P)        = 0
  nnz(A)        = 32054
  cones (total) = 1
    : Nonnegative = 1,  numel = 5045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.79e-01  7.68e+01  1.00e+00  1.00e+00   ------   
  1  +5.8779e-01  +5.2627e+02  5.26e+02  4.02e-01  4.77e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3760e-01  +6.5178e+01  6.46e+01  1.52e-01  2.29e+01  1.32e-02  2.54e-01  8.71e-01  
  3  +5.0941e-01  +1.6515e+01  1.60e+01  1.05e-01  1.54e+01  3.41e-05  2.45e-01  1.82e-01  
  4  +5.0068e-01  +1.5939e+00  1.09e+00  1.06e-02  1.61e+00  7.50e-06  1.53e-01  6.76e-01  
  5  +5.0013e-01  +8.0394e-01  3.04e-01  2.90e-03  4.45e-01  4.18e-06  7.65e-02  5.91e-01  
  6  +5.0008e-01  +7.2473e-01  2.25e-01  2.14e-03  3.28e-01  3.74e-06  4.58e-02  4.57e-01  
  7  +4.9996e-01  +6.5510e-01  1.55e-01  1.38e-03  2.12e-01  6.11e-06  1.14e-02  8.55e-01  
  8  +4.9627e-01  +6.2920e-01  1.33e-01  1.19e-04  1.86e-02  1.33e-04  3.83e-04  9.82e-01  
  9  +4.9438e-01  +6.1544e-01  1.21e-01  9.18e-05  1.43e-02  1.30e-04  2.93e-04  2.86e-01  
 10  +4.9440e-01  +6.0959e-01  1.15e-01  8.67e-05  1.35e-02  8.71e-05  2.74e-04  3.00e-01  
 11  +4.9068e-01  +5.8488e-01  9.42e-02  5.71e-05  8.87e-03  6.81e-05  1.81e-04  4.71e-01  
 12  +4.8771e-01  +5.7028e-01  8.26e-02  4.24e-05  6.59e-03  5.60e-05  1.35e-04  3.74e-01  
 13  +4.8598e-01  +5.5911e-01  7.31e-02  3.66e-05  5.68e-03  1.39e-05  1.18e-04  6.80e-01  
 14  +4.8054e-01  +5.3702e-01  5.65e-02  2.36e-05  3.67e-03  1.03e-05  7.72e-05  4.79e-01  
 15  +4.7865e-01  +5.2886e-01  5.02e-02  2.26e-05  3.50e-03  7.34e-06  7.55e-05  1.94e-01  
 16  +4.6758e-01  +4.8560e-01  1.80e-02  6.75e-06  1.05e-03  2.53e-06  2.37e-05  7.39e-01  
 17  +4.6583e-01  +4.7820e-01  1.24e-02  4.54e-06  7.04e-04  1.67e-06  1.61e-05  5.46e-01  
 18  +4.6155e-01  +4.6219e-01  6.37e-04  2.29e-07  3.55e-05  7.17e-08  8.39e-07  9.54e-01  
 19  +4.6130e-01  +4.6131e-01  6.95e-06  2.50e-09  3.87e-07  7.59e-10  9.20e-09  9.90e-01  
 20  +4.6130e-01  +4.6130e-01  6.95e-08  2.50e-11  3.87e-09  7.59e-12  9.20e-11  9.90e-01  
 21  +4.6130e-01  +4.6130e-01  6.95e-10  2.50e-13  3.87e-11  7.63e-14  9.25e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.6582ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:46 PM: Optimal value: 4.613e-01
(CVXPY) Aug 30 12:13:46 PM: Compilation took 7.471e-03 seconds
(CVXPY) Aug 30 12:13:46 PM: Solver (including time spent in interface) took 3.997e-02 seconds
Iteration: 4, Objective: 0.4613
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:46 PM: Your problem has 2555 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Finished problem compilation (took 1.558e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2555
  constraints   = 5055
  nnz(P)        = 0
  nnz(A)        = 32996
  cones (total) = 1
    : Nonnegative = 1,  numel = 5055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.79e-01  7.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.8747e-01  +5.2661e+02  5.26e+02  4.03e-01  4.77e+01  3.86e-03  5.48e-01  6.10e-01  
  2  +5.3746e-01  +6.5084e+01  6.45e+01  1.52e-01  2.28e+01  1.33e-02  2.54e-01  8.73e-01  
  3  +5.0937e-01  +1.6486e+01  1.60e+01  1.05e-01  1.53e+01  3.43e-05  2.44e-01  1.84e-01  
  4  +5.0071e-01  +1.6437e+00  1.14e+00  1.11e-02  1.68e+00  7.64e-06  1.54e-01  6.60e-01  
  5  +5.0016e-01  +8.5278e-01  3.53e-01  3.37e-03  5.17e-01  4.49e-06  8.26e-02  5.50e-01  
  6  +5.0011e-01  +7.9341e-01  2.93e-01  2.79e-03  4.29e-01  4.41e-06  5.12e-02  5.20e-01  
  7  +4.9998e-01  +7.2831e-01  2.28e-01  2.05e-03  3.15e-01  7.01e-06  1.76e-02  6.99e-01  
  8  +4.9626e-01  +6.6899e-01  1.73e-01  1.76e-04  2.74e-02  1.30e-04  5.76e-04  9.90e-01  
  9  +4.9144e-01  +6.2796e-01  1.37e-01  9.67e-05  1.50e-02  1.33e-04  3.15e-04  5.08e-01  
 10  +4.9226e-01  +6.3328e-01  1.41e-01  9.85e-05  1.53e-02  1.39e-04  3.15e-04  1.52e-02  
 11  +4.9068e-01  +6.2755e-01  1.37e-01  7.97e-05  1.24e-02  1.48e-04  2.54e-04  2.43e-01  
 12  +4.8833e-01  +6.0757e-01  1.19e-01  7.58e-05  1.18e-02  8.58e-05  2.50e-04  1.85e-01  
 13  +4.7873e-01  +5.6067e-01  8.19e-02  3.85e-05  5.98e-03  5.69e-05  1.29e-04  6.13e-01  
 14  +4.7694e-01  +5.5274e-01  7.58e-02  3.45e-05  5.36e-03  5.09e-05  1.16e-04  1.32e-01  
 15  +4.7560e-01  +5.4611e-01  7.05e-02  3.28e-05  5.08e-03  4.07e-05  1.16e-04  7.01e-02  
 16  +4.7247e-01  +5.3037e-01  5.79e-02  2.63e-05  4.08e-03  2.85e-05  9.45e-05  3.00e-01  
 17  +4.6709e-01  +5.0570e-01  3.86e-02  1.66e-05  2.57e-03  1.21e-05  5.97e-05  6.47e-01  
 18  +4.6127e-01  +4.8369e-01  2.24e-02  8.97e-06  1.39e-03  6.31e-06  3.31e-05  5.27e-01  
 19  +4.5962e-01  +4.7696e-01  1.73e-02  6.84e-06  1.06e-03  4.67e-06  2.56e-05  2.84e-01  
 20  +4.5516e-01  +4.5878e-01  3.62e-03  1.39e-06  2.16e-04  4.18e-07  5.39e-06  9.90e-01  
 21  +4.5384e-01  +4.5395e-01  1.09e-04  4.19e-08  6.50e-06  1.18e-08  1.65e-07  9.75e-01  
 22  +4.5380e-01  +4.5380e-01  1.09e-06  4.20e-10  6.50e-08  1.18e-10  1.66e-09  9.90e-01  
 23  +4.5380e-01  +4.5380e-01  1.09e-08  4.20e-12  6.50e-10  1.18e-12  1.66e-11  9.90e-01  
 24  +4.5380e-01  +4.5380e-01  1.09e-10  4.20e-14  6.50e-12  1.18e-14  1.66e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.0324ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:46 PM: Optimal value: 4.538e-01
(CVXPY) Aug 30 12:13:46 PM: Compilation took 1.558e-02 seconds
(CVXPY) Aug 30 12:13:46 PM: Solver (including time spent in interface) took 4.747e-02 seconds
Iteration: 5, Objective: 0.4538
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:46 PM: Your problem has 2565 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Finished problem compilation (took 6.594e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2565
  constraints   = 5065
  nnz(P)        = 0
  nnz(A)        = 34157
  cones (total) = 1
    : Nonnegative = 1,  numel = 5065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.79e-01  7.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.8734e-01  +5.2681e+02  5.26e+02  4.04e-01  4.78e+01  3.85e-03  5.48e-01  6.09e-01  
  2  +5.3736e-01  +6.4996e+01  6.45e+01  1.52e-01  2.27e+01  1.33e-02  2.54e-01  8.74e-01  
  3  +5.0935e-01  +1.6469e+01  1.60e+01  1.05e-01  1.53e+01  3.44e-05  2.44e-01  1.86e-01  
  4  +5.0075e-01  +1.7164e+00  1.22e+00  1.18e-02  1.79e+00  7.79e-06  1.57e-01  6.35e-01  
  5  +5.0014e-01  +8.5003e-01  3.50e-01  3.35e-03  5.14e-01  4.56e-06  8.15e-02  5.75e-01  
  6  +5.0008e-01  +7.7815e-01  2.78e-01  2.64e-03  4.06e-01  4.85e-06  4.23e-02  6.07e-01  
  7  +4.9971e-01  +7.5238e-01  2.53e-01  1.60e-03  2.47e-01  1.65e-05  7.05e-03  9.62e-01  
  8  +4.9414e-01  +6.8993e-01  1.96e-01  1.44e-04  2.24e-02  1.75e-04  4.61e-04  9.36e-01  
  9  +4.9182e-01  +6.6576e-01  1.74e-01  1.13e-04  1.76e-02  1.33e-04  3.61e-04  3.69e-01  
 10  +4.9062e-01  +6.5141e-01  1.61e-01  1.10e-04  1.72e-02  1.09e-04  3.60e-04  3.27e-02  
 11  +4.8904e-01  +6.3671e-01  1.48e-01  8.46e-05  1.32e-02  7.04e-05  2.72e-04  5.43e-01  
 12  +4.8868e-01  +6.3401e-01  1.45e-01  8.42e-05  1.31e-02  6.66e-05  2.71e-04  2.64e-02  
 13  +4.8644e-01  +6.1459e-01  1.28e-01  7.25e-05  1.13e-02  3.53e-05  2.36e-04  4.39e-01  
 14  +4.7421e-01  +5.5138e-01  7.72e-02  3.49e-05  5.42e-03  2.09e-05  1.18e-04  5.53e-01  
 15  +4.7327e-01  +5.4714e-01  7.39e-02  3.27e-05  5.08e-03  1.94e-05  1.11e-04  1.11e-01  
 16  +4.6988e-01  +5.2458e-01  5.47e-02  2.39e-05  3.72e-03  3.82e-06  8.40e-05  9.90e-01  
 17  +4.6046e-01  +4.8649e-01  2.60e-02  1.07e-05  1.66e-03  1.79e-06  3.96e-05  5.83e-01  
 18  +4.5831e-01  +4.7782e-01  1.95e-02  7.87e-06  1.22e-03  1.38e-06  2.96e-05  2.90e-01  
 19  +4.5656e-01  +4.6994e-01  1.34e-02  5.29e-06  8.21e-04  1.44e-06  2.01e-05  9.90e-01  
 20  +4.5374e-01  +4.5936e-01  5.63e-03  2.20e-06  3.42e-04  6.05e-07  8.61e-06  6.08e-01  
 21  +4.5177e-01  +4.5195e-01  1.82e-04  7.13e-08  1.11e-05  1.82e-08  2.86e-07  9.69e-01  
 22  +4.5170e-01  +4.5170e-01  1.83e-06  7.14e-10  1.11e-07  1.82e-10  2.87e-09  9.90e-01  
 23  +4.5170e-01  +4.5170e-01  1.83e-08  7.14e-12  1.11e-09  1.82e-12  2.87e-11  9.90e-01  
 24  +4.5170e-01  +4.5170e-01  1.83e-10  7.15e-14  1.11e-11  1.82e-14  2.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.5318ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:46 PM: Optimal value: 4.517e-01
(CVXPY) Aug 30 12:13:46 PM: Compilation took 6.594e-03 seconds
(CVXPY) Aug 30 12:13:46 PM: Solver (including time spent in interface) took 5.694e-02 seconds
Iteration: 6, Objective: 0.4517
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:46 PM: Your problem has 2575 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2575
  constraints   = 5075
  nnz(P)        = 0
  nnz(A)        = 35393
  cones (total) = 1
    : Nonnegative = 1,  numel = 5075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8722e-01  +5.2691e+02  5.26e+02  4.04e-01  4.79e+01  3.85e-03  5.49e-01  6.09e-01  
  2  +5.3731e-01  +6.4965e+01  6.44e+01  1.52e-01  2.27e+01  1.34e-02  2.54e-01  8.75e-01  
  3  +5.0934e-01  +1.6458e+01  1.59e+01  1.05e-01  1.53e+01  3.45e-05  2.44e-01  1.87e-01  
  4  +5.0073e-01  +1.6935e+00  1.19e+00  1.16e-02  1.76e+00  7.76e-06  1.56e-01  6.45e-01  
  5  +5.0015e-01  +8.4934e-01  3.49e-01  3.35e-03  5.15e-01  4.59e-06  8.02e-02  5.75e-01  
  6  +5.0006e-01  +7.6034e-01  2.60e-01  2.47e-03  3.80e-01  5.11e-06  3.56e-02  6.83e-01  
  7  +4.9975e-01  +8.0568e-01  3.06e-01  1.82e-03  2.83e-01  1.69e-05  7.66e-03  9.90e-01  
  8  +4.9458e-01  +7.3146e-01  2.37e-01  1.69e-04  2.64e-02  1.65e-04  5.35e-04  9.31e-01  
  9  +4.9314e-01  +6.9011e-01  1.97e-01  1.31e-04  2.04e-02  8.65e-05  4.10e-04  4.99e-01  
 10  +4.9247e-01  +6.6571e-01  1.73e-01  1.13e-04  1.77e-02  4.70e-05  3.55e-04  4.36e-01  
 11  +4.8972e-01  +6.4618e-01  1.56e-01  9.12e-05  1.42e-02  4.18e-05  2.89e-04  2.61e-01  
 12  +4.8808e-01  +6.2530e-01  1.37e-01  8.38e-05  1.31e-02  1.98e-05  2.69e-04  4.47e-01  
 13  +4.7667e-01  +5.6465e-01  8.80e-02  4.13e-05  6.43e-03  1.18e-05  1.37e-04  6.70e-01  
 14  +4.7469e-01  +5.5565e-01  8.10e-02  3.68e-05  5.73e-03  1.06e-05  1.23e-04  1.78e-01  
 15  +4.7134e-01  +5.3609e-01  6.47e-02  2.90e-05  4.52e-03  5.32e-06  9.92e-05  9.90e-01  
 16  +4.6113e-01  +4.9398e-01  3.29e-02  1.36e-05  2.11e-03  2.68e-06  4.82e-05  5.80e-01  
 17  +4.5834e-01  +4.8292e-01  2.46e-02  9.94e-06  1.55e-03  2.09e-06  3.57e-05  3.62e-01  
 18  +4.5257e-01  +4.6008e-01  7.51e-03  2.92e-06  4.54e-04  8.14e-07  1.08e-05  9.90e-01  
 19  +4.5031e-01  +4.5164e-01  1.33e-03  5.16e-07  8.02e-05  1.43e-07  1.95e-06  8.40e-01  
 20  +4.4985e-01  +4.4999e-01  1.36e-04  5.17e-08  8.04e-06  1.47e-08  2.01e-07  9.90e-01  
 21  +4.4980e-01  +4.4980e-01  1.48e-06  5.61e-10  8.72e-08  1.59e-10  2.19e-09  9.89e-01  
 22  +4.4980e-01  +4.4980e-01  1.48e-08  5.61e-12  8.72e-10  1.59e-12  2.19e-11  9.90e-01  
 23  +4.4980e-01  +4.4980e-01  1.48e-10  5.61e-14  8.73e-12  1.68e-14  2.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.0362ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:46 PM: Optimal value: 4.498e-01
(CVXPY) Aug 30 12:13:46 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:13:46 PM: Solver (including time spent in interface) took 5.494e-02 seconds
Iteration: 7, Objective: 0.4498
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:46 PM: Your problem has 2585 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Finished problem compilation (took 1.556e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2585
  constraints   = 5085
  nnz(P)        = 0
  nnz(A)        = 36183
  cones (total) = 1
    : Nonnegative = 1,  numel = 5085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8720e-01  +5.2692e+02  5.26e+02  4.05e-01  4.79e+01  3.85e-03  5.49e-01  6.09e-01  
  2  +5.3723e-01  +6.4871e+01  6.43e+01  1.52e-01  2.27e+01  1.34e-02  2.54e-01  8.75e-01  
  3  +5.0932e-01  +1.6428e+01  1.59e+01  1.04e-01  1.53e+01  3.45e-05  2.44e-01  1.89e-01  
  4  +5.0073e-01  +1.6869e+00  1.19e+00  1.15e-02  1.75e+00  7.76e-06  1.55e-01  6.49e-01  
  5  +5.0013e-01  +8.2467e-01  3.25e-01  3.11e-03  4.79e-01  4.56e-06  7.49e-02  6.09e-01  
  6  +5.0003e-01  +7.9282e-01  2.93e-01  2.72e-03  4.20e-01  6.95e-06  2.89e-02  7.97e-01  
  7  +4.9896e-01  +7.4507e-01  2.46e-01  8.67e-04  1.35e-01  4.15e-05  3.11e-03  9.10e-01  
  8  +4.9385e-01  +6.9355e-01  2.00e-01  1.77e-04  2.76e-02  1.63e-04  5.72e-04  8.26e-01  
  9  +4.9219e-01  +6.7725e-01  1.85e-01  1.36e-04  2.13e-02  1.39e-04  4.37e-04  4.09e-01  
 10  +4.9058e-01  +6.5768e-01  1.67e-01  1.12e-04  1.75e-02  8.80e-05  3.59e-04  4.48e-01  
 11  +4.8271e-01  +5.9824e-01  1.16e-01  6.62e-05  1.03e-02  1.26e-05  2.20e-04  8.50e-01  
 12  +4.8139e-01  +5.9181e-01  1.10e-01  6.26e-05  9.76e-03  1.13e-05  2.09e-04  1.66e-01  
 13  +4.8195e-01  +5.9485e-01  1.13e-01  6.27e-05  9.78e-03  1.12e-05  2.07e-04  1.58e-01  
 14  +4.7281e-01  +5.5206e-01  7.92e-02  3.81e-05  5.93e-03  7.84e-06  1.30e-04  4.28e-01  
 15  +4.7039e-01  +5.4266e-01  7.23e-02  3.44e-05  5.36e-03  6.54e-06  1.21e-04  3.15e-01  
 16  +4.6686e-01  +5.2698e-01  6.01e-02  2.74e-05  4.27e-03  5.43e-06  9.71e-05  3.40e-01  
 17  +4.5838e-01  +4.9125e-01  3.29e-02  1.35e-05  2.10e-03  3.13e-06  4.89e-05  8.38e-01  
 18  +4.5119e-01  +4.6265e-01  1.15e-02  4.47e-06  6.95e-04  1.20e-06  1.70e-05  9.90e-01  
 19  +4.4747e-01  +4.4876e-01  1.28e-03  4.93e-07  7.66e-05  1.31e-07  1.93e-06  9.06e-01  
 20  +4.4701e-01  +4.4704e-01  2.80e-05  1.07e-08  1.67e-06  2.94e-09  4.23e-08  9.90e-01  
 21  +4.4700e-01  +4.4700e-01  2.80e-07  1.07e-10  1.67e-08  2.95e-11  4.23e-10  9.90e-01  
 22  +4.4700e-01  +4.4700e-01  2.81e-09  1.07e-12  1.67e-10  2.95e-13  4.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.3612ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:46 PM: Optimal value: 4.470e-01
(CVXPY) Aug 30 12:13:46 PM: Compilation took 1.556e-02 seconds
(CVXPY) Aug 30 12:13:46 PM: Solver (including time spent in interface) took 6.257e-02 seconds
Iteration: 8, Objective: 0.4470
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:46 PM: Your problem has 2595 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2595
  constraints   = 5095
  nnz(P)        = 0
  nnz(A)        = 36910
  cones (total) = 1
    : Nonnegative = 1,  numel = 5095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8712e-01  +5.2688e+02  5.26e+02  4.05e-01  4.78e+01  3.85e-03  5.48e-01  6.09e-01  
  2  +5.3713e-01  +6.4741e+01  6.42e+01  1.52e-01  2.26e+01  1.34e-02  2.54e-01  8.76e-01  
  3  +5.0930e-01  +1.6406e+01  1.59e+01  1.04e-01  1.53e+01  3.45e-05  2.43e-01  1.90e-01  
  4  +5.0074e-01  +1.7066e+00  1.21e+00  1.17e-02  1.78e+00  7.82e-06  1.55e-01  6.43e-01  
  5  +5.0011e-01  +7.9688e-01  2.97e-01  2.85e-03  4.39e-01  4.50e-06  6.93e-02  6.52e-01  
  6  +5.0002e-01  +8.2990e-01  3.30e-01  3.03e-03  4.68e-01  8.39e-06  2.85e-02  7.81e-01  
  7  +4.9845e-01  +7.4087e-01  2.42e-01  6.72e-04  1.05e-01  5.72e-05  2.31e-03  9.34e-01  
  8  +4.9308e-01  +6.9371e-01  2.01e-01  1.73e-04  2.71e-02  1.73e-04  5.58e-04  7.68e-01  
  9  +4.9329e-01  +6.9003e-01  1.97e-01  1.59e-04  2.49e-02  1.40e-04  5.07e-04  2.85e-01  
 10  +4.9084e-01  +6.6694e-01  1.76e-01  1.23e-04  1.92e-02  1.04e-04  3.93e-04  4.30e-01  
 11  +4.8531e-01  +6.2920e-01  1.44e-01  8.67e-05  1.35e-02  6.67e-05  2.83e-04  4.71e-01  
 12  +4.8295e-01  +6.1636e-01  1.33e-01  7.60e-05  1.19e-02  5.55e-05  2.49e-04  2.20e-01  
 13  +4.7937e-01  +5.8998e-01  1.11e-01  6.16e-05  9.60e-03  5.53e-07  2.08e-04  9.16e-01  
 14  +4.7012e-01  +5.4718e-01  7.71e-02  3.78e-05  5.89e-03  2.34e-06  1.31e-04  5.69e-01  
 15  +4.6644e-01  +5.3190e-01  6.55e-02  3.07e-05  4.79e-03  2.39e-06  1.08e-04  2.59e-01  
 16  +4.5367e-01  +4.7801e-01  2.43e-02  1.01e-05  1.58e-03  2.13e-06  3.78e-05  9.74e-01  
 17  +4.4745e-01  +4.5289e-01  5.44e-03  2.19e-06  3.41e-04  4.84e-07  8.53e-06  8.29e-01  
 18  +4.4571e-01  +4.4625e-01  5.44e-04  2.15e-07  3.34e-05  5.32e-08  8.61e-07  9.88e-01  
 19  +4.4550e-01  +4.4552e-01  1.20e-05  4.70e-09  7.32e-07  1.17e-09  1.90e-08  9.78e-01  
 20  +4.4550e-01  +4.4550e-01  1.20e-07  4.71e-11  7.33e-09  1.17e-11  1.90e-10  9.90e-01  
 21  +4.4550e-01  +4.4550e-01  1.20e-09  4.71e-13  7.33e-11  1.19e-13  1.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.4582ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:46 PM: Optimal value: 4.455e-01
(CVXPY) Aug 30 12:13:46 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:46 PM: Solver (including time spent in interface) took 6.261e-02 seconds
Iteration: 9, Objective: 0.4455
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:46 PM: Your problem has 2605 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:46 PM: Finished problem compilation (took 1.559e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2605
  constraints   = 5105
  nnz(P)        = 0
  nnz(A)        = 37662
  cones (total) = 1
    : Nonnegative = 1,  numel = 5105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8703e-01  +5.2696e+02  5.26e+02  4.05e-01  4.78e+01  3.85e-03  5.48e-01  6.09e-01  
  2  +5.3704e-01  +6.4648e+01  6.41e+01  1.52e-01  2.25e+01  1.34e-02  2.53e-01  8.77e-01  
  3  +5.0927e-01  +1.6378e+01  1.59e+01  1.04e-01  1.52e+01  3.46e-05  2.43e-01  1.92e-01  
  4  +5.0073e-01  +1.6879e+00  1.19e+00  1.16e-02  1.76e+00  7.82e-06  1.53e-01  6.53e-01  
  5  +5.0018e-01  +9.1031e-01  4.10e-01  3.94e-03  6.07e-01  5.07e-06  8.37e-02  5.28e-01  
  6  +5.0008e-01  +8.4539e-01  3.45e-01  3.25e-03  5.01e-01  6.94e-06  3.68e-02  6.86e-01  
  7  +4.9860e-01  +8.2446e-01  3.26e-01  8.81e-04  1.38e-01  5.57e-05  3.03e-03  9.90e-01  
  8  +4.9388e-01  +7.5538e-01  2.62e-01  2.52e-04  3.94e-02  1.42e-04  8.21e-04  7.33e-01  
  9  +4.9265e-01  +7.2653e-01  2.34e-01  1.90e-04  2.97e-02  1.02e-04  6.06e-04  4.92e-01  
 10  +4.9180e-01  +7.1542e-01  2.24e-01  1.65e-04  2.57e-02  9.24e-05  5.23e-04  2.46e-01  
 11  +4.9188e-01  +6.9967e-01  2.08e-01  1.49e-04  2.33e-02  5.63e-05  4.70e-04  4.03e-01  
 12  +4.9020e-01  +6.7270e-01  1.82e-01  1.32e-04  2.07e-02  2.43e-05  4.22e-04  5.37e-01  
 13  +4.8424e-01  +6.3919e-01  1.55e-01  9.09e-05  1.42e-02  2.29e-05  2.95e-04  3.42e-01  
 14  +4.8108e-01  +6.2115e-01  1.40e-01  7.78e-05  1.22e-02  1.80e-05  2.56e-04  3.11e-01  
 15  +4.7340e-01  +5.7542e-01  1.02e-01  5.35e-05  8.34e-03  5.34e-06  1.83e-04  9.66e-01  
 16  +4.5930e-01  +5.1169e-01  5.24e-02  2.38e-05  3.70e-03  2.76e-06  8.61e-05  5.78e-01  
 17  +4.5458e-01  +4.9097e-01  3.64e-02  1.60e-05  2.50e-03  1.95e-06  5.96e-05  3.38e-01  
 18  +4.4696e-01  +4.5733e-01  1.04e-02  4.32e-06  6.72e-04  9.87e-07  1.68e-05  9.90e-01  
 19  +4.4484e-01  +4.4903e-01  4.19e-03  1.72e-06  2.67e-04  4.01e-07  6.84e-06  6.45e-01  
 20  +4.4396e-01  +4.4551e-01  1.55e-03  6.32e-07  9.83e-05  1.53e-07  2.56e-06  9.07e-01  
 21  +4.4341e-01  +4.4345e-01  3.66e-05  1.48e-08  2.31e-06  3.57e-09  6.07e-08  9.77e-01  
 22  +4.4340e-01  +4.4340e-01  3.66e-07  1.48e-10  2.31e-08  3.57e-11  6.07e-10  9.90e-01  
 23  +4.4340e-01  +4.4340e-01  3.66e-09  1.48e-12  2.31e-10  3.61e-13  6.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 50.1222ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:46 PM: Optimal value: 4.434e-01
(CVXPY) Aug 30 12:13:46 PM: Compilation took 1.559e-02 seconds
(CVXPY) Aug 30 12:13:46 PM: Solver (including time spent in interface) took 6.246e-02 seconds
Iteration: 10, Objective: 0.4434
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:47 PM: Your problem has 2615 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:47 PM: Finished problem compilation (took 1.568e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2615
  constraints   = 5115
  nnz(P)        = 0
  nnz(A)        = 38340
  cones (total) = 1
    : Nonnegative = 1,  numel = 5115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8693e-01  +5.2707e+02  5.26e+02  4.06e-01  4.78e+01  3.85e-03  5.48e-01  6.09e-01  
  2  +5.3690e-01  +6.4491e+01  6.40e+01  1.52e-01  2.24e+01  1.34e-02  2.53e-01  8.79e-01  
  3  +5.0925e-01  +1.6352e+01  1.58e+01  1.04e-01  1.52e+01  3.47e-05  2.42e-01  1.93e-01  
  4  +5.0076e-01  +1.7438e+00  1.24e+00  1.21e-02  1.84e+00  7.92e-06  1.55e-01  6.35e-01  
  5  +5.0020e-01  +9.4057e-01  4.40e-01  4.24e-03  6.53e-01  5.23e-06  8.73e-02  5.13e-01  
  6  +5.0011e-01  +9.2226e-01  4.22e-01  3.95e-03  6.09e-01  7.80e-06  4.05e-02  7.22e-01  
  7  +4.9817e-01  +7.7651e-01  2.78e-01  6.40e-04  1.00e-01  6.64e-05  2.19e-03  9.88e-01  
  8  +4.9287e-01  +7.1368e-01  2.21e-01  2.00e-04  3.13e-02  1.43e-04  6.59e-04  7.36e-01  
  9  +4.9148e-01  +7.0157e-01  2.10e-01  1.63e-04  2.55e-02  1.11e-04  5.27e-04  4.33e-01  
 10  +4.9081e-01  +6.9276e-01  2.02e-01  1.55e-04  2.42e-02  8.74e-05  4.97e-04  2.17e-01  
 11  +4.8910e-01  +6.8268e-01  1.94e-01  1.32e-04  2.07e-02  8.34e-05  4.24e-04  2.24e-01  
 12  +4.8896e-01  +6.8156e-01  1.93e-01  1.31e-04  2.04e-02  7.48e-05  4.20e-04  1.06e-01  
 13  +4.8237e-01  +6.4594e-01  1.64e-01  9.14e-05  1.43e-02  5.29e-05  3.00e-04  4.89e-01  
 14  +4.7554e-01  +6.0985e-01  1.34e-01  6.93e-05  1.08e-02  3.97e-05  2.35e-04  2.76e-01  
 15  +4.6351e-01  +5.4270e-01  7.92e-02  3.83e-05  5.97e-03  1.55e-06  1.39e-04  9.46e-01  
 16  +4.4989e-01  +4.8135e-01  3.15e-02  1.39e-05  2.17e-03  1.11e-06  5.45e-05  7.10e-01  
 17  +4.4593e-01  +4.6448e-01  1.86e-02  8.00e-06  1.25e-03  7.52e-07  3.24e-05  4.64e-01  
 18  +4.4230e-01  +4.4880e-01  6.49e-03  2.72e-06  4.23e-04  5.97e-07  1.14e-05  9.90e-01  
 19  +4.4023e-01  +4.4060e-01  3.71e-04  1.55e-07  2.41e-05  3.43e-08  6.64e-07  9.90e-01  
 20  +4.4010e-01  +4.4011e-01  3.74e-06  1.56e-09  2.43e-07  3.46e-10  6.70e-09  9.90e-01  
 21  +4.4010e-01  +4.4010e-01  3.74e-08  1.56e-11  2.43e-09  3.46e-12  6.70e-11  9.90e-01  
 22  +4.4010e-01  +4.4010e-01  3.74e-10  1.56e-13  2.43e-11  3.46e-14  6.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.3034ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:47 PM: Optimal value: 4.401e-01
(CVXPY) Aug 30 12:13:47 PM: Compilation took 1.568e-02 seconds
(CVXPY) Aug 30 12:13:47 PM: Solver (including time spent in interface) took 6.244e-02 seconds
Iteration: 11, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:47 PM: Your problem has 2621 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:47 PM: Finished problem compilation (took 1.664e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2621
  constraints   = 5121
  nnz(P)        = 0
  nnz(A)        = 38631
  cones (total) = 1
    : Nonnegative = 1,  numel = 5121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8697e-01  +5.2702e+02  5.26e+02  4.06e-01  4.77e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3690e-01  +6.4482e+01  6.39e+01  1.52e-01  2.24e+01  1.34e-02  2.53e-01  8.78e-01  
  3  +5.0924e-01  +1.6346e+01  1.58e+01  1.04e-01  1.52e+01  3.46e-05  2.42e-01  1.93e-01  
  4  +5.0077e-01  +1.7530e+00  1.25e+00  1.22e-02  1.85e+00  7.94e-06  1.55e-01  6.32e-01  
  5  +5.0019e-01  +9.3831e-01  4.38e-01  4.22e-03  6.49e-01  5.22e-06  8.71e-02  5.17e-01  
  6  +5.0010e-01  +9.1912e-01  4.19e-01  3.93e-03  6.05e-01  7.80e-06  4.04e-02  7.15e-01  
  7  +4.9843e-01  +8.0231e-01  3.04e-01  7.97e-04  1.24e-01  5.81e-05  2.76e-03  9.75e-01  
  8  +4.9327e-01  +7.3457e-01  2.41e-01  2.28e-04  3.56e-02  1.43e-04  7.50e-04  7.49e-01  
  9  +4.9127e-01  +7.1380e-01  2.23e-01  1.79e-04  2.80e-02  1.19e-04  5.79e-04  3.95e-01  
 10  +4.8965e-01  +7.0140e-01  2.12e-01  1.50e-04  2.35e-02  1.10e-04  4.85e-04  2.63e-01  
 11  +4.8871e-01  +6.8959e-01  2.01e-01  1.30e-04  2.03e-02  7.67e-05  4.18e-04  3.99e-01  
 12  +4.8703e-01  +6.7626e-01  1.89e-01  1.26e-04  1.97e-02  5.80e-05  4.11e-04  1.59e-01  
 13  +4.7604e-01  +6.1365e-01  1.38e-01  7.01e-05  1.09e-02  4.33e-05  2.37e-04  5.10e-01  
 14  +4.7342e-01  +5.9610e-01  1.23e-01  6.32e-05  9.86e-03  2.53e-05  2.18e-04  3.87e-01  
 15  +4.6551e-01  +5.5747e-01  9.20e-02  4.46e-05  6.95e-03  1.67e-05  1.60e-04  3.43e-01  
 16  +4.5640e-01  +5.1155e-01  5.51e-02  2.50e-05  3.89e-03  4.71e-06  9.46e-05  8.85e-01  
 17  +4.4344e-01  +4.5485e-01  1.14e-02  4.90e-06  7.62e-04  7.67e-07  2.03e-05  8.19e-01  
 18  +4.4024e-01  +4.4159e-01  1.35e-03  5.71e-07  8.88e-05  9.14e-08  2.46e-06  8.94e-01  
 19  +4.3980e-01  +4.3982e-01  1.41e-05  5.93e-09  9.22e-07  9.43e-10  2.57e-08  9.90e-01  
 20  +4.3980e-01  +4.3980e-01  1.41e-07  5.93e-11  9.22e-09  9.43e-12  2.57e-10  9.90e-01  
 21  +4.3980e-01  +4.3980e-01  1.41e-09  5.93e-13  9.22e-11  9.47e-14  2.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.5381ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:47 PM: Optimal value: 4.398e-01
(CVXPY) Aug 30 12:13:47 PM: Compilation took 1.664e-02 seconds
(CVXPY) Aug 30 12:13:47 PM: Solver (including time spent in interface) took 4.690e-02 seconds
Iteration: 12, Objective: 0.4398
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:47 PM: Your problem has 2624 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:47 PM: Finished problem compilation (took 1.667e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2624
  constraints   = 5124
  nnz(P)        = 0
  nnz(A)        = 38786
  cones (total) = 1
    : Nonnegative = 1,  numel = 5124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8699e-01  +5.2695e+02  5.26e+02  4.06e-01  4.77e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3688e-01  +6.4460e+01  6.39e+01  1.52e-01  2.24e+01  1.34e-02  2.53e-01  8.78e-01  
  3  +5.0924e-01  +1.6340e+01  1.58e+01  1.04e-01  1.52e+01  3.46e-05  2.42e-01  1.93e-01  
  4  +5.0076e-01  +1.7377e+00  1.24e+00  1.21e-02  1.83e+00  7.91e-06  1.55e-01  6.37e-01  
  5  +5.0020e-01  +9.4048e-01  4.40e-01  4.24e-03  6.53e-01  5.24e-06  8.71e-02  5.12e-01  
  6  +5.0010e-01  +9.2092e-01  4.21e-01  3.94e-03  6.06e-01  7.90e-06  3.97e-02  7.29e-01  
  7  +4.9856e-01  +8.1275e-01  3.14e-01  8.72e-04  1.36e-01  5.48e-05  3.03e-03  9.61e-01  
  8  +4.9349e-01  +7.4384e-01  2.50e-01  2.39e-04  3.74e-02  1.43e-04  7.88e-04  7.57e-01  
  9  +4.9129e-01  +7.1854e-01  2.27e-01  1.83e-04  2.87e-02  1.17e-04  5.95e-04  4.14e-01  
 10  +4.8968e-01  +7.0485e-01  2.15e-01  1.54e-04  2.40e-02  1.06e-04  4.96e-04  2.77e-01  
 11  +4.8888e-01  +6.9192e-01  2.03e-01  1.33e-04  2.07e-02  7.01e-05  4.26e-04  4.27e-01  
 12  +4.8744e-01  +6.8062e-01  1.93e-01  1.30e-04  2.02e-02  5.58e-05  4.20e-04  1.35e-01  
 13  +4.7670e-01  +6.1850e-01  1.42e-01  7.25e-05  1.13e-02  4.20e-05  2.45e-04  5.10e-01  
 14  +4.7434e-01  +6.0365e-01  1.29e-01  6.67e-05  1.04e-02  3.07e-05  2.29e-04  2.35e-01  
 15  +4.6634e-01  +5.6293e-01  9.66e-02  4.70e-05  7.33e-03  1.94e-05  1.68e-04  3.66e-01  
 16  +4.6627e-01  +5.6189e-01  9.56e-02  4.65e-05  7.25e-03  1.80e-05  1.66e-04  1.02e-01  
 17  +4.5303e-01  +4.9872e-01  4.57e-02  2.06e-05  3.20e-03  6.96e-06  7.92e-05  5.85e-01  
 18  +4.4404e-01  +4.5805e-01  1.40e-02  6.02e-06  9.37e-04  1.81e-06  2.49e-05  7.41e-01  
 19  +4.4056e-01  +4.4283e-01  2.28e-03  9.61e-07  1.49e-04  2.29e-07  4.12e-06  9.57e-01  
 20  +4.3981e-01  +4.3983e-01  2.57e-05  1.08e-08  1.68e-06  2.53e-09  4.69e-08  9.89e-01  
 21  +4.3980e-01  +4.3980e-01  2.57e-07  1.08e-10  1.68e-08  2.53e-11  4.69e-10  9.90e-01  
 22  +4.3980e-01  +4.3980e-01  2.57e-09  1.08e-12  1.68e-10  2.53e-13  4.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.2412ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:47 PM: Optimal value: 4.398e-01
(CVXPY) Aug 30 12:13:47 PM: Compilation took 1.667e-02 seconds
(CVXPY) Aug 30 12:13:47 PM: Solver (including time spent in interface) took 6.205e-02 seconds
Iteration: 13, Objective: 0.4398
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:47 PM: Your problem has 2631 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:47 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2631
  constraints   = 5131
  nnz(P)        = 0
  nnz(A)        = 39242
  cones (total) = 1
    : Nonnegative = 1,  numel = 5131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8697e-01  +5.2692e+02  5.26e+02  4.06e-01  4.77e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3687e-01  +6.4447e+01  6.39e+01  1.52e-01  2.23e+01  1.34e-02  2.53e-01  8.78e-01  
  3  +5.0924e-01  +1.6334e+01  1.58e+01  1.04e-01  1.51e+01  3.46e-05  2.42e-01  1.93e-01  
  4  +5.0073e-01  +1.6878e+00  1.19e+00  1.16e-02  1.76e+00  7.83e-06  1.52e-01  6.56e-01  
  5  +5.0020e-01  +9.3731e-01  4.37e-01  4.22e-03  6.49e-01  5.28e-06  8.54e-02  5.09e-01  
  6  +5.0010e-01  +9.2529e-01  4.25e-01  3.96e-03  6.10e-01  8.37e-06  3.78e-02  7.38e-01  
  7  +4.9808e-01  +8.0174e-01  3.04e-01  6.54e-04  1.02e-01  7.23e-05  2.22e-03  9.80e-01  
  8  +4.9184e-01  +7.2227e-01  2.30e-01  1.90e-04  2.96e-02  1.60e-04  6.25e-04  7.37e-01  
  9  +4.9230e-01  +7.2628e-01  2.34e-01  1.83e-04  2.86e-02  1.43e-04  5.90e-04  2.02e-01  
 10  +4.8953e-01  +7.0378e-01  2.14e-01  1.42e-04  2.22e-02  1.27e-04  4.54e-04  3.48e-01  
 11  +4.8843e-01  +6.9297e-01  2.05e-01  1.26e-04  1.98e-02  9.69e-05  4.05e-04  3.06e-01  
 12  +4.8640e-01  +6.7618e-01  1.90e-01  1.22e-04  1.90e-02  6.80e-05  3.96e-04  1.89e-01  
 13  +4.7596e-01  +6.1642e-01  1.40e-01  7.13e-05  1.11e-02  5.10e-05  2.40e-04  4.64e-01  
 14  +4.7314e-01  +5.9694e-01  1.24e-01  6.39e-05  9.96e-03  2.80e-05  2.20e-04  4.03e-01  
 15  +4.6761e-01  +5.6925e-01  1.02e-01  5.02e-05  7.82e-03  2.04e-05  1.77e-04  2.83e-01  
 16  +4.6499e-01  +5.5353e-01  8.85e-02  4.26e-05  6.64e-03  1.17e-05  1.53e-04  5.71e-01  
 17  +4.5083e-01  +4.8762e-01  3.68e-02  1.63e-05  2.54e-03  3.44e-06  6.36e-05  7.40e-01  
 18  +4.4210e-01  +4.4938e-01  7.28e-03  3.11e-06  4.83e-04  5.97e-07  1.30e-05  8.33e-01  
 19  +4.4007e-01  +4.4087e-01  7.96e-04  3.35e-07  5.22e-05  7.07e-08  1.45e-06  9.90e-01  
 20  +4.3980e-01  +4.3981e-01  8.38e-06  3.53e-09  5.49e-07  7.38e-10  1.53e-08  9.89e-01  
 21  +4.3980e-01  +4.3980e-01  8.38e-08  3.53e-11  5.49e-09  7.38e-12  1.53e-10  9.90e-01  
 22  +4.3980e-01  +4.3980e-01  8.38e-10  3.53e-13  5.49e-11  7.40e-14  1.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.5066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:47 PM: Optimal value: 4.398e-01
(CVXPY) Aug 30 12:13:47 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:13:47 PM: Solver (including time spent in interface) took 4.684e-02 seconds
Iteration: 14, Objective: 0.4398
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:47 PM: Your problem has 2633 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:47 PM: Finished problem compilation (took 1.574e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2633
  constraints   = 5133
  nnz(P)        = 0
  nnz(A)        = 39339
  cones (total) = 1
    : Nonnegative = 1,  numel = 5133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8698e-01  +5.2691e+02  5.26e+02  4.06e-01  4.76e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3687e-01  +6.4439e+01  6.39e+01  1.52e-01  2.23e+01  1.34e-02  2.53e-01  8.78e-01  
  3  +5.0924e-01  +1.6333e+01  1.58e+01  1.04e-01  1.51e+01  3.46e-05  2.42e-01  1.93e-01  
  4  +5.0073e-01  +1.6891e+00  1.19e+00  1.16e-02  1.76e+00  7.83e-06  1.52e-01  6.55e-01  
  5  +5.0020e-01  +9.3781e-01  4.38e-01  4.22e-03  6.49e-01  5.28e-06  8.55e-02  5.09e-01  
  6  +5.0010e-01  +9.2772e-01  4.28e-01  3.98e-03  6.13e-01  8.40e-06  3.78e-02  7.42e-01  
  7  +4.9820e-01  +8.0639e-01  3.08e-01  6.98e-04  1.09e-01  6.84e-05  2.38e-03  9.75e-01  
  8  +4.9170e-01  +7.2247e-01  2.31e-01  1.85e-04  2.89e-02  1.66e-04  6.08e-04  7.59e-01  
  9  +4.9228e-01  +7.2768e-01  2.35e-01  1.82e-04  2.85e-02  1.53e-04  5.90e-04  1.48e-01  
 10  +4.8964e-01  +7.0571e-01  2.16e-01  1.41e-04  2.21e-02  1.29e-04  4.52e-04  3.87e-01  
 11  +4.8836e-01  +6.9116e-01  2.03e-01  1.27e-04  1.98e-02  9.16e-05  4.06e-04  3.15e-01  
 12  +4.8642e-01  +6.7650e-01  1.90e-01  1.22e-04  1.91e-02  6.75e-05  3.99e-04  1.66e-01  
 13  +4.7605e-01  +6.1783e-01  1.42e-01  7.19e-05  1.12e-02  5.29e-05  2.42e-04  4.49e-01  
 14  +4.7345e-01  +5.9937e-01  1.26e-01  6.50e-05  1.01e-02  2.99e-05  2.23e-04  3.85e-01  
 15  +4.6865e-01  +5.7502e-01  1.06e-01  5.29e-05  8.24e-03  2.25e-05  1.86e-04  2.59e-01  
 16  +4.6786e-01  +5.6897e-01  1.01e-01  4.99e-05  7.77e-03  1.66e-05  1.76e-04  3.45e-01  
 17  +4.5566e-01  +5.0986e-01  5.42e-02  2.47e-05  3.84e-03  5.41e-06  9.33e-05  7.50e-01  
 18  +4.4314e-01  +4.5360e-01  1.05e-02  4.48e-06  6.96e-04  7.76e-07  1.84e-05  8.99e-01  
 19  +4.4020e-01  +4.4138e-01  1.18e-03  4.99e-07  7.76e-05  9.85e-08  2.15e-06  9.61e-01  
 20  +4.3981e-01  +4.3982e-01  1.56e-05  6.58e-09  1.02e-06  1.28e-09  2.86e-08  9.87e-01  
 21  +4.3980e-01  +4.3980e-01  1.56e-07  6.60e-11  1.03e-08  1.28e-11  2.86e-10  9.90e-01  
 22  +4.3980e-01  +4.3980e-01  1.56e-09  6.60e-13  1.03e-10  1.28e-13  2.87e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.545ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:47 PM: Optimal value: 4.398e-01
(CVXPY) Aug 30 12:13:47 PM: Compilation took 1.574e-02 seconds
(CVXPY) Aug 30 12:13:47 PM: Solver (including time spent in interface) took 6.266e-02 seconds
FULL MODEL:
  Accruacy: 0.5306
  Our objective: 0.06120000000000003

IF 
    (x0 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0)                       <-- (term's our objective: 0.013600000000000011)
 OR (x1 = 1 AND x3 = 1 AND x0 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.008399999999999973)
 OR (x2 = 1 AND x4 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.00680000000000004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.010799999999999949)
 OR (x2 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.0015999999999999634)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x2 = 0) <-- (term's our objective: 0.0024000000000000297)
 OR (x5 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.0044000000000000315)
 OR (x0 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.001999999999999986)
 OR (x2 = 1 AND x3 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.001599999999999986)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0012000000000000084)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x6 = 0) <-- (term's our objective: 0.0011999999999999632)
 OR (x1 = 1 AND x2 = 1 AND x5 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.00039999999999998457)
 OR (x1 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.002799999999999963)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.004000000000000032)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.013600000000000011
    Its accruacy: 0.5068
    Its hamming distance: 6
  Shortest hamming distance: 1
    Its our objective: 0.010799999999999949
  Highest accruacy: 0.5068
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

