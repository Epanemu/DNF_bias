Command:
python test_script.py -s smallest_subclass -d 6 -n 100 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.02
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 6.

Computed total variation: 0.52
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:33 PM: Your problem has 63 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:33 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 63
  constraints   = 113
  nnz(P)        = 0
  nnz(A)        = 463
  cones (total) = 1
    : Nonnegative = 1,  numel = 113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9723e-01  +5.0819e+01  5.03e+01  8.65e-01  9.05e+00  1.00e+00  1.04e+00   ------   
  1  +5.8916e-01  +1.0705e+01  1.01e+01  3.39e-01  5.15e+00  3.90e-03  5.44e-01  6.27e-01  
  2  +5.2569e-01  +1.5232e+00  9.97e-01  7.21e-02  1.33e+00  1.32e-02  1.86e-01  9.90e-01  
  3  +4.9963e-01  +7.0746e-01  2.08e-01  1.58e-02  2.94e-01  4.83e-03  5.70e-02  9.25e-01  
  4  +4.8345e-01  +6.8943e-01  2.06e-01  6.12e-03  1.18e-01  9.55e-03  2.16e-02  6.84e-01  
  5  +4.5980e-01  +5.2577e-01  6.60e-02  1.64e-03  3.16e-02  1.01e-03  6.63e-03  8.08e-01  
  6  +4.4361e-01  +4.5446e-01  1.09e-02  2.36e-04  4.54e-03  9.54e-05  1.13e-03  8.68e-01  
  7  +4.4017e-01  +4.4037e-01  1.99e-04  4.24e-06  8.16e-05  1.31e-06  2.13e-05  9.86e-01  
  8  +4.4010e-01  +4.4010e-01  1.99e-06  4.24e-08  8.15e-07  1.31e-08  2.13e-07  9.90e-01  
  9  +4.4010e-01  +4.4010e-01  1.99e-08  4.24e-10  8.15e-09  1.31e-10  2.13e-09  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  1.99e-10  4.24e-12  8.15e-11  1.31e-12  2.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 329.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:33 PM: Optimal value: 4.401e-01
(CVXPY) Aug 30 12:08:33 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:33 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:33 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:33 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 587
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9307e-01  +5.1340e+01  5.08e+01  8.72e-01  9.39e+00  1.00e+00  1.06e+00   ------   
  1  +5.6856e-01  +1.0881e+01  1.03e+01  3.53e-01  5.27e+00  3.89e-03  5.62e-01  6.21e-01  
  2  +5.1018e-01  +1.8422e+00  1.33e+00  8.59e-02  1.63e+00  1.49e-02  2.15e-01  9.23e-01  
  3  +4.7199e-01  +1.3117e+00  8.40e-01  3.46e-02  6.76e-01  1.30e-02  1.01e-01  6.49e-01  
  4  +4.3040e-01  +7.6331e-01  3.33e-01  1.10e-02  2.15e-01  4.99e-03  3.94e-02  6.42e-01  
  5  +4.0802e-01  +5.3959e-01  1.32e-01  3.92e-03  7.61e-02  2.10e-03  1.49e-02  7.39e-01  
  6  +3.9627e-01  +4.9768e-01  1.01e-01  2.28e-03  4.47e-02  1.88e-03  8.88e-03  4.44e-01  
  7  +3.7674e-01  +3.9724e-01  2.05e-02  4.45e-04  8.65e-03  1.76e-05  1.95e-03  9.51e-01  
  8  +3.7043e-01  +3.7108e-01  6.56e-04  1.40e-05  2.73e-04  1.17e-06  6.51e-05  9.76e-01  
  9  +3.7022e-01  +3.7026e-01  4.30e-05  9.22e-07  1.79e-05  6.61e-08  4.51e-06  9.36e-01  
 10  +3.7020e-01  +3.7020e-01  4.61e-07  9.86e-09  1.91e-07  7.38e-10  4.93e-08  9.90e-01  
 11  +3.7020e-01  +3.7020e-01  4.61e-09  9.86e-11  1.91e-09  7.38e-12  4.93e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 429.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:33 PM: Optimal value: 3.702e-01
(CVXPY) Aug 30 12:08:33 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:33 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3702
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:33 PM: Your problem has 83 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:33 PM: Finished problem compilation (took 1.593e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 83
  constraints   = 133
  nnz(P)        = 0
  nnz(A)        = 669
  cones (total) = 1
    : Nonnegative = 1,  numel = 133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9157e-01  +5.1277e+01  5.08e+01  8.77e-01  9.31e+00  1.00e+00  1.06e+00   ------   
  1  +5.5830e-01  +1.0927e+01  1.04e+01  3.65e-01  5.16e+00  3.89e-03  5.66e-01  6.17e-01  
  2  +4.9940e-01  +1.7547e+00  1.26e+00  7.64e-02  1.43e+00  1.60e-02  1.99e-01  9.67e-01  
  3  +4.4950e-01  +1.2756e+00  8.26e-01  2.91e-02  5.61e-01  1.47e-02  8.68e-02  6.81e-01  
  4  +4.0431e-01  +8.6282e-01  4.59e-01  1.24e-02  2.40e-01  8.24e-03  4.10e-02  6.35e-01  
  5  +3.5537e-01  +4.5887e-01  1.03e-01  2.74e-03  5.18e-02  3.46e-04  1.13e-02  8.30e-01  
  6  +3.3428e-01  +3.4956e-01  1.53e-02  3.96e-04  7.41e-03  5.39e-05  1.86e-03  9.54e-01  
  7  +3.3052e-01  +3.3098e-01  4.54e-04  1.18e-05  2.20e-04  1.39e-06  5.71e-05  9.70e-01  
  8  +3.3042e-01  +3.3048e-01  6.14e-05  1.60e-06  2.98e-05  1.92e-07  8.09e-06  9.24e-01  
  9  +3.3040e-01  +3.3040e-01  7.27e-07  1.90e-08  3.53e-07  2.24e-09  9.66e-08  9.88e-01  
 10  +3.3040e-01  +3.3040e-01  7.27e-09  1.90e-10  3.53e-09  2.24e-11  9.66e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 418.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:33 PM: Optimal value: 3.304e-01
(CVXPY) Aug 30 12:08:33 PM: Compilation took 1.593e-02 seconds
(CVXPY) Aug 30 12:08:33 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3304
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:33 PM: Your problem has 93 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:33 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 93
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 722
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9045e-01  +5.1297e+01  5.08e+01  8.81e-01  9.11e+00  1.00e+00  1.05e+00   ------   
  1  +5.4651e-01  +1.0975e+01  1.04e+01  3.71e-01  4.98e+00  3.91e-03  5.64e-01  6.15e-01  
  2  +4.8871e-01  +1.7047e+00  1.22e+00  7.26e-02  1.35e+00  1.66e-02  1.88e-01  9.90e-01  
  3  +4.2960e-01  +1.1060e+00  6.76e-01  2.28e-02  4.35e-01  1.37e-02  6.70e-02  7.49e-01  
  4  +3.8822e-01  +8.1903e-01  4.31e-01  1.15e-02  2.18e-01  8.37e-03  3.67e-02  5.40e-01  
  5  +3.4127e-01  +4.8786e-01  1.47e-01  3.67e-03  6.81e-02  1.90e-03  1.38e-02  6.90e-01  
  6  +3.2019e-01  +3.9026e-01  7.01e-02  1.69e-03  3.14e-02  7.42e-04  6.95e-03  6.39e-01  
  7  +3.0232e-01  +3.0783e-01  5.52e-03  1.31e-04  2.42e-03  4.32e-05  5.95e-04  9.22e-01  
  8  +3.0064e-01  +3.0076e-01  1.23e-04  2.92e-06  5.41e-05  7.72e-07  1.36e-05  9.77e-01  
  9  +3.0060e-01  +3.0060e-01  1.77e-06  4.20e-08  7.79e-07  1.10e-08  1.97e-07  9.86e-01  
 10  +3.0060e-01  +3.0060e-01  1.77e-08  4.20e-10  7.79e-09  1.10e-10  1.97e-09  9.90e-01  
 11  +3.0060e-01  +3.0060e-01  1.77e-10  4.20e-12  7.79e-11  1.10e-12  1.97e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 467.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:33 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:33 PM: Optimal value: 3.006e-01
(CVXPY) Aug 30 12:08:33 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:33 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.3006
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:34 PM: Your problem has 103 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:34 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 103
  constraints   = 153
  nnz(P)        = 0
  nnz(A)        = 762
  cones (total) = 1
    : Nonnegative = 1,  numel = 153

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8953e-01  +5.1347e+01  5.09e+01  8.85e-01  8.89e+00  1.00e+00  1.05e+00   ------   
  1  +5.3305e-01  +1.1071e+01  1.05e+01  3.76e-01  4.82e+00  3.95e-03  5.64e-01  6.11e-01  
  2  +4.7496e-01  +1.8408e+00  1.37e+00  7.62e-02  1.37e+00  1.72e-02  1.97e-01  9.61e-01  
  3  +4.0977e-01  +1.1691e+00  7.59e-01  2.53e-02  4.67e-01  1.30e-02  7.33e-02  7.68e-01  
  4  +3.5831e-01  +7.5539e-01  3.97e-01  1.06e-02  1.95e-01  7.15e-03  3.38e-02  5.71e-01  
  5  +3.1365e-01  +4.0537e-01  9.17e-02  2.43e-03  4.36e-02  1.02e-03  8.99e-03  7.99e-01  
  6  +2.9735e-01  +3.2317e-01  2.58e-02  6.73e-04  1.20e-02  1.87e-04  2.70e-03  8.60e-01  
  7  +2.9106e-01  +2.9230e-01  1.24e-03  3.23e-05  5.76e-04  7.24e-06  1.35e-04  9.51e-01  
  8  +2.9074e-01  +2.9087e-01  1.27e-04  3.37e-06  5.95e-05  5.22e-07  1.52e-05  9.33e-01  
  9  +2.9070e-01  +2.9070e-01  2.26e-06  5.99e-08  1.06e-06  8.69e-09  2.75e-07  9.90e-01  
 10  +2.9070e-01  +2.9070e-01  2.26e-08  5.99e-10  1.06e-08  8.68e-11  2.75e-09  9.90e-01  
 11  +2.9070e-01  +2.9070e-01  2.26e-10  5.99e-12  1.06e-10  8.69e-13  2.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 537.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:34 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:34 PM: Optimal value: 2.907e-01
(CVXPY) Aug 30 12:08:34 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:34 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.2907
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:34 PM: Your problem has 113 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:34 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 113
  constraints   = 163
  nnz(P)        = 0
  nnz(A)        = 808
  cones (total) = 1
    : Nonnegative = 1,  numel = 163

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8887e-01  +5.1341e+01  5.09e+01  8.88e-01  8.72e+00  1.00e+00  1.05e+00   ------   
  1  +5.2473e-01  +1.1171e+01  1.06e+01  3.84e-01  4.74e+00  3.94e-03  5.71e-01  6.04e-01  
  2  +4.6631e-01  +1.9512e+00  1.48e+00  8.15e-02  1.41e+00  1.77e-02  2.13e-01  9.37e-01  
  3  +3.9025e-01  +1.1672e+00  7.77e-01  2.49e-02  4.45e-01  1.32e-02  7.39e-02  8.09e-01  
  4  +3.3802e-01  +6.8395e-01  3.46e-01  9.71e-03  1.72e-01  4.96e-03  3.22e-02  6.02e-01  
  5  +2.9465e-01  +3.5283e-01  5.82e-02  1.63e-03  2.82e-02  5.06e-04  6.37e-03  8.41e-01  
  6  +2.8205e-01  +2.8681e-01  4.76e-03  1.35e-04  2.31e-03  1.82e-05  5.63e-04  9.79e-01  
  7  +2.8105e-01  +2.8212e-01  1.07e-03  3.05e-05  5.21e-04  3.69e-06  1.35e-04  7.81e-01  
  8  +2.8083e-01  +2.8121e-01  3.85e-04  1.07e-05  1.82e-04  1.30e-06  5.15e-05  7.87e-01  
  9  +2.8071e-01  +2.8074e-01  2.72e-05  7.35e-07  1.26e-05  8.47e-08  3.76e-06  9.36e-01  
 10  +2.8070e-01  +2.8070e-01  3.01e-07  8.12e-09  1.39e-07  9.35e-10  4.18e-08  9.89e-01  
 11  +2.8070e-01  +2.8070e-01  3.02e-09  8.14e-11  1.39e-09  9.38e-12  4.20e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 588.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:34 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:34 PM: Optimal value: 2.807e-01
(CVXPY) Aug 30 12:08:34 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:34 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.2807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:34 PM: Your problem has 115 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:34 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 165
  nnz(P)        = 0
  nnz(A)        = 826
  cones (total) = 1
    : Nonnegative = 1,  numel = 165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8847e-01  +5.1411e+01  5.09e+01  8.89e-01  8.73e+00  1.00e+00  1.06e+00   ------   
  1  +5.2140e-01  +1.1235e+01  1.07e+01  3.87e-01  4.75e+00  3.95e-03  5.75e-01  6.01e-01  
  2  +4.6124e-01  +1.8970e+00  1.44e+00  7.92e-02  1.37e+00  1.79e-02  2.12e-01  9.52e-01  
  3  +3.8108e-01  +1.1300e+00  7.49e-01  2.39e-02  4.24e-01  1.31e-02  7.23e-02  8.30e-01  
  4  +3.2948e-01  +6.1887e-01  2.89e-01  8.26e-03  1.45e-01  3.62e-03  2.85e-02  6.66e-01  
  5  +2.9140e-01  +3.3987e-01  4.85e-02  1.39e-03  2.39e-02  4.16e-04  5.57e-03  8.41e-01  
  6  +2.8133e-01  +2.8346e-01  2.13e-03  6.19e-05  1.06e-03  6.56e-06  2.64e-04  9.86e-01  
  7  +2.8080e-01  +2.8112e-01  3.18e-04  9.35e-06  1.59e-04  8.68e-07  4.45e-05  9.60e-01  
  8  +2.8071e-01  +2.8075e-01  3.90e-05  1.14e-06  1.94e-05  1.04e-07  5.68e-06  8.84e-01  
  9  +2.8070e-01  +2.8070e-01  4.92e-07  1.44e-08  2.44e-07  1.33e-09  7.20e-08  9.88e-01  
 10  +2.8070e-01  +2.8070e-01  4.94e-09  1.44e-10  2.45e-09  1.33e-11  7.22e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 534.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:34 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:34 PM: Optimal value: 2.807e-01
(CVXPY) Aug 30 12:08:34 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:34 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.72
  Our objective: 0.44

IF 
    (x0 = 1 AND x4 = 1 AND x5 = 0)                                  <-- (term's our objective: 0.07999999999999996)
 OR (x1 = 1 AND x5 = 1 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.059999999999999956)
 OR (x0 = 1 AND x3 = 1 AND x5 = 1 AND x2 = 0)                       <-- (term's our objective: 0.059999999999999956)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 0)                       <-- (term's our objective: 0.07999999999999997)
 OR (x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.020000000000000018)
 OR (x1 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0 AND x5 = 0)            <-- (term's our objective: 0.06000000000000005)
 OR (x1 = 1 AND x3 = 1 AND x0 = 0 AND x2 = 0 AND x5 = 0)            <-- (term's our objective: 0.020000000000000018)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.06000000000000005)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.07999999999999997
    Its accruacy: 0.54
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.07999999999999997
  Highest accruacy: 0.54
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

