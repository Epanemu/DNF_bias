Command:
python test_script.py -s smallest_subclass -d 5 -n 100 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.02
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.44
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:48 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Finished problem compilation (took 1.016e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9701e-01  +5.0766e+01  5.03e+01  8.62e-01  8.45e+00  1.00e+00  1.03e+00   ------   
  1  +5.9505e-01  +1.0434e+01  9.84e+00  3.19e-01  4.65e+00  3.98e-03  5.19e-01  6.46e-01  
  2  +5.2932e-01  +1.5623e+00  1.03e+00  6.98e-02  1.22e+00  1.13e-02  1.76e-01  9.42e-01  
  3  +4.9821e-01  +6.9372e-01  1.96e-01  1.39e-02  2.44e-01  5.28e-03  4.98e-02  9.90e-01  
  4  +4.8167e-01  +6.4333e-01  1.62e-01  4.73e-03  8.59e-02  9.41e-03  1.61e-02  7.11e-01  
  5  +4.6702e-01  +5.3263e-01  6.56e-02  1.76e-03  3.17e-02  2.08e-03  6.55e-03  7.06e-01  
  6  +4.5295e-01  +4.6385e-01  1.09e-02  2.56e-04  4.63e-03  2.67e-04  1.03e-03  8.55e-01  
  7  +4.5014e-01  +4.5028e-01  1.38e-04  3.24e-06  5.84e-05  2.65e-06  1.32e-05  9.88e-01  
  8  +4.5010e-01  +4.5010e-01  1.38e-06  3.24e-08  5.84e-07  2.65e-08  1.32e-07  9.90e-01  
  9  +4.5010e-01  +4.5010e-01  1.38e-08  3.24e-10  5.84e-09  2.65e-10  1.32e-09  9.90e-01  
 10  +4.5010e-01  +4.5010e-01  1.38e-10  3.24e-12  5.84e-11  2.65e-12  1.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 309µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:48 PM: Optimal value: 4.501e-01
(CVXPY) Aug 30 12:05:48 PM: Compilation took 1.016e-02 seconds
(CVXPY) Aug 30 12:05:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:48 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 507
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9330e-01  +5.1229e+01  5.07e+01  8.69e-01  8.57e+00  1.00e+00  1.05e+00   ------   
  1  +5.7415e-01  +1.0540e+01  9.97e+00  3.30e-01  4.60e+00  3.97e-03  5.30e-01  6.43e-01  
  2  +5.1075e-01  +1.5080e+00  9.97e-01  6.03e-02  1.08e+00  1.28e-02  1.54e-01  9.90e-01  
  3  +4.7959e-01  +1.2629e+00  7.83e-01  2.83e-02  5.23e-01  1.40e-02  7.66e-02  6.01e-01  
  4  +4.3798e-01  +7.9615e-01  3.58e-01  1.04e-02  1.93e-01  6.48e-03  3.17e-02  6.13e-01  
  5  +4.1130e-01  +5.7826e-01  1.67e-01  4.51e-03  8.20e-02  2.90e-03  1.48e-02  5.79e-01  
  6  +3.9529e-01  +4.8567e-01  9.04e-02  2.18e-03  3.91e-02  1.56e-03  7.73e-03  5.32e-01  
  7  +3.7597e-01  +3.9413e-01  1.82e-02  3.58e-04  6.42e-03  3.12e-04  1.49e-03  8.41e-01  
  8  +3.7051e-01  +3.7113e-01  6.23e-04  1.21e-05  2.17e-04  9.12e-06  5.23e-05  9.66e-01  
  9  +3.7032e-01  +3.7037e-01  4.91e-05  9.65e-07  1.72e-05  4.08e-07  4.26e-06  9.66e-01  
 10  +3.7030e-01  +3.7030e-01  5.15e-07  1.01e-08  1.81e-07  4.24e-09  4.47e-08  9.90e-01  
 11  +3.7030e-01  +3.7030e-01  5.16e-09  1.01e-10  1.81e-09  4.25e-11  4.48e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 373.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:48 PM: Optimal value: 3.703e-01
(CVXPY) Aug 30 12:05:48 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:05:48 PM: Solver (including time spent in interface) took 5.132e-03 seconds
Iteration: 2, Objective: 0.3703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:48 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 581
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8922e-01  +5.1588e+01  5.11e+01  8.75e-01  8.52e+00  1.00e+00  1.07e+00   ------   
  1  +5.5112e-01  +1.0725e+01  1.02e+01  3.45e-01  4.57e+00  3.95e-03  5.50e-01  6.34e-01  
  2  +4.9124e-01  +2.0427e+00  1.55e+00  8.17e-02  1.41e+00  1.41e-02  2.01e-01  8.76e-01  
  3  +4.2522e-01  +1.3288e+00  9.04e-01  2.95e-02  5.25e-01  1.11e-02  8.41e-02  6.93e-01  
  4  +3.7708e-01  +8.3328e-01  4.56e-01  1.23e-02  2.17e-01  5.87e-03  4.03e-02  5.86e-01  
  5  +3.2992e-01  +4.5472e-01  1.25e-01  3.29e-03  5.67e-02  1.09e-03  1.33e-02  7.42e-01  
  6  +3.0942e-01  +3.4895e-01  3.95e-02  9.91e-04  1.69e-02  2.95e-04  4.63e-03  7.20e-01  
  7  +3.0087e-01  +3.0240e-01  1.52e-03  3.80e-05  6.48e-04  9.03e-06  1.92e-04  9.61e-01  
  8  +3.0055e-01  +3.0072e-01  1.71e-04  4.30e-06  7.32e-05  8.48e-07  2.26e-05  8.94e-01  
  9  +3.0050e-01  +3.0050e-01  3.17e-06  8.00e-08  1.36e-06  1.25e-08  4.28e-07  9.90e-01  
 10  +3.0050e-01  +3.0050e-01  3.17e-08  7.99e-10  1.36e-08  1.25e-10  4.28e-09  9.90e-01  
 11  +3.0050e-01  +3.0050e-01  3.18e-10  8.00e-12  1.36e-10  1.25e-12  4.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 467.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:48 PM: Optimal value: 3.005e-01
(CVXPY) Aug 30 12:05:48 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:05:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:48 PM: Your problem has 91 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Finished problem compilation (took 5.130e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 91
  constraints   = 141
  nnz(P)        = 0
  nnz(A)        = 642
  cones (total) = 1
    : Nonnegative = 1,  numel = 141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8828e-01  +5.1542e+01  5.11e+01  8.79e-01  8.39e+00  1.00e+00  1.07e+00   ------   
  1  +5.3864e-01  +1.0831e+01  1.03e+01  3.55e-01  4.51e+00  3.94e-03  5.58e-01  6.27e-01  
  2  +4.7626e-01  +2.2413e+00  1.77e+00  8.63e-02  1.45e+00  1.50e-02  2.15e-01  8.49e-01  
  3  +3.9902e-01  +1.1667e+00  7.68e-01  2.46e-02  4.26e-01  9.12e-03  7.27e-02  7.83e-01  
  4  +3.4959e-01  +6.7832e-01  3.29e-01  9.68e-03  1.65e-01  3.40e-03  3.26e-02  6.33e-01  
  5  +3.2666e-01  +5.2982e-01  2.03e-01  5.44e-03  9.20e-02  1.96e-03  2.03e-02  5.31e-01  
  6  +3.1005e-01  +4.3684e-01  1.27e-01  3.13e-03  5.27e-02  1.20e-03  1.27e-02  4.32e-01  
  7  +2.8665e-01  +3.0543e-01  1.88e-02  4.51e-04  7.53e-03  6.64e-05  2.15e-03  9.90e-01  
  8  +2.8086e-01  +2.8135e-01  4.91e-04  1.17e-05  1.94e-04  1.37e-06  5.87e-05  9.74e-01  
  9  +2.8071e-01  +2.8073e-01  1.90e-05  4.53e-07  7.54e-06  5.05e-08  2.34e-06  9.69e-01  
 10  +2.8070e-01  +2.8070e-01  1.90e-07  4.53e-09  7.55e-08  5.04e-10  2.34e-08  9.90e-01  
 11  +2.8070e-01  +2.8070e-01  1.90e-09  4.53e-11  7.55e-10  5.04e-12  2.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 456.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:48 PM: Optimal value: 2.807e-01
(CVXPY) Aug 30 12:05:48 PM: Compilation took 5.130e-03 seconds
(CVXPY) Aug 30 12:05:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:48 PM: Your problem has 94 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 94
  constraints   = 144
  nnz(P)        = 0
  nnz(A)        = 655
  cones (total) = 1
    : Nonnegative = 1,  numel = 144

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8791e-01  +5.1514e+01  5.10e+01  8.81e-01  8.33e+00  1.00e+00  1.07e+00   ------   
  1  +5.3432e-01  +1.0831e+01  1.03e+01  3.57e-01  4.46e+00  3.94e-03  5.59e-01  6.26e-01  
  2  +4.6901e-01  +2.1320e+00  1.66e+00  7.89e-02  1.32e+00  1.54e-02  2.01e-01  8.81e-01  
  3  +3.8885e-01  +1.0256e+00  6.37e-01  1.99e-02  3.42e-01  8.53e-03  5.95e-02  7.76e-01  
  4  +3.4467e-01  +6.4180e-01  2.97e-01  8.77e-03  1.48e-01  3.46e-03  2.96e-02  5.70e-01  
  5  +3.2263e-01  +5.1671e-01  1.94e-01  5.13e-03  8.59e-02  2.15e-03  1.90e-02  4.63e-01  
  6  +2.9560e-01  +3.6046e-01  6.49e-02  1.66e-03  2.75e-02  5.68e-04  7.04e-03  6.90e-01  
  7  +2.8163e-01  +2.8485e-01  3.22e-03  8.24e-05  1.36e-03  1.83e-05  3.83e-04  9.53e-01  
  8  +2.8081e-01  +2.8113e-01  3.16e-04  8.06e-06  1.32e-04  1.15e-06  3.97e-05  9.56e-01  
  9  +2.8070e-01  +2.8071e-01  9.37e-06  2.36e-07  3.88e-06  2.97e-08  1.22e-06  9.77e-01  
 10  +2.8070e-01  +2.8070e-01  9.37e-08  2.36e-09  3.88e-08  2.97e-10  1.22e-08  9.90e-01  
 11  +2.8070e-01  +2.8070e-01  9.38e-10  2.36e-11  3.88e-10  2.98e-12  1.22e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 432.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:48 PM: Optimal value: 2.807e-01
(CVXPY) Aug 30 12:05:48 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:05:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.2807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:48 PM: Your problem has 99 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:48 PM: Finished problem compilation (took 3.673e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 99
  constraints   = 149
  nnz(P)        = 0
  nnz(A)        = 688
  cones (total) = 1
    : Nonnegative = 1,  numel = 149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8757e-01  +5.1531e+01  5.10e+01  8.83e-01  8.30e+00  1.00e+00  1.07e+00   ------   
  1  +5.3121e-01  +1.0926e+01  1.04e+01  3.65e-01  4.46e+00  3.93e-03  5.68e-01  6.20e-01  
  2  +4.6306e-01  +2.2940e+00  1.83e+00  8.72e-02  1.42e+00  1.58e-02  2.25e-01  8.47e-01  
  3  +3.9050e-01  +1.0462e+00  6.56e-01  2.18e-02  3.69e-01  8.45e-03  6.65e-02  7.59e-01  
  4  +3.4697e-01  +6.5021e-01  3.03e-01  9.37e-03  1.56e-01  3.19e-03  3.21e-02  5.98e-01  
  5  +3.2709e-01  +5.4402e-01  2.17e-01  5.98e-03  9.91e-02  2.08e-03  2.22e-02  4.47e-01  
  6  +2.9331e-01  +3.4598e-01  5.27e-02  1.40e-03  2.29e-02  2.78e-04  6.06e-03  8.21e-01  
  7  +2.8176e-01  +2.8559e-01  3.83e-03  1.01e-04  1.65e-03  1.67e-05  4.73e-04  9.26e-01  
  8  +2.8092e-01  +2.8160e-01  6.75e-04  1.79e-05  2.91e-04  2.36e-06  8.78e-05  9.37e-01  
  9  +2.8072e-01  +2.8076e-01  4.59e-05  1.21e-06  1.97e-05  1.44e-07  6.19e-06  9.44e-01  
 10  +2.8070e-01  +2.8070e-01  4.76e-07  1.25e-08  2.04e-07  1.48e-09  6.45e-08  9.90e-01  
 11  +2.8070e-01  +2.8070e-01  4.76e-09  1.25e-10  2.04e-09  1.48e-11  6.46e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 531.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:48 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:48 PM: Optimal value: 2.807e-01
(CVXPY) Aug 30 12:05:48 PM: Compilation took 3.673e-03 seconds
(CVXPY) Aug 30 12:05:48 PM: Solver (including time spent in interface) took 2.241e-04 seconds
FULL MODEL:
  Accruacy: 0.71
  Our objective: 0.42000000000000004

IF 
    (x1 = 0 AND x3 = 0)                                  <-- (term's our objective: 0.09999999999999998)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x2 = 0)            <-- (term's our objective: 0.07999999999999997)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1)            <-- (term's our objective: 0.07999999999999997)
 OR (x3 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0)            <-- (term's our objective: 0.04000000000000005)
 OR (x1 = 1 AND x2 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.07999999999999996)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0) <-- (term's our objective: 0.04000000000000005)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.09999999999999998
    Its accruacy: 0.55
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.09999999999999998
  Highest accruacy: 0.55
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

