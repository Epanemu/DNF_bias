Command:
python test_script.py -s smallest_subclass -d 8 -n 10 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 8.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:16:55 PM: Your problem has 22 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:16:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:16:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:16:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:16:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:16:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:16:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:16:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:16:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:16:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:16:55 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 22
  constraints   = 27
  nnz(P)        = 0
  nnz(A)        = 72
  cones (total) = 1
    : Nonnegative = 1,  numel = 27

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7572e-01  +6.0130e+00  5.54e+00  7.59e-01  2.62e+00  1.00e+00  1.24e+00   ------   
  1  +4.8949e-01  +1.3412e+00  8.52e-01  3.04e-01  1.24e+00  3.74e-03  6.20e-01  6.68e-01  
  2  +3.1682e-01  +4.4424e-01  1.27e-01  4.28e-02  2.01e-01  1.33e-02  1.41e-01  9.40e-01  
  3  +3.0058e-01  +3.1372e-01  1.31e-02  4.55e-03  2.14e-02  1.41e-03  1.67e-02  8.96e-01  
  4  +3.0019e-01  +3.0054e-01  3.49e-04  1.22e-04  5.74e-04  3.57e-05  4.53e-04  9.73e-01  
  5  +3.0016e-01  +3.0027e-01  1.10e-04  3.81e-05  1.79e-04  1.05e-05  1.47e-04  7.08e-01  
  6  +3.0012e-01  +3.0019e-01  6.14e-05  1.65e-05  8.34e-05  4.37e-06  8.03e-05  7.61e-01  
  7  +3.0010e-01  +3.0010e-01  1.34e-06  3.36e-07  1.72e-06  9.06e-08  1.77e-06  9.80e-01  
  8  +3.0010e-01  +3.0010e-01  1.34e-08  3.36e-09  1.72e-08  9.08e-10  1.77e-08  9.90e-01  
  9  +3.0010e-01  +3.0010e-01  1.34e-10  3.36e-11  1.72e-10  9.08e-12  1.77e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:16:55 PM: Optimal value: 3.001e-01
(CVXPY) Aug 30 12:16:55 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:16:55 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:16:55 PM: Your problem has 32 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:16:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:16:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:16:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:16:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:16:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:16:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:16:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:16:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:16:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:16:55 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 37
  nnz(P)        = 0
  nnz(A)        = 102
  cones (total) = 1
    : Nonnegative = 1,  numel = 37

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.0917e-01  +6.1318e+00  5.72e+00  7.93e-01  2.70e+00  1.00e+00  1.26e+00   ------   
  1  +2.9116e-01  +1.1844e+00  8.93e-01  3.22e-01  1.17e+00  4.06e-03  5.85e-01  6.75e-01  
  2  +1.3070e-01  +3.0955e-01  1.79e-01  6.43e-02  2.73e-01  1.08e-02  1.77e-01  8.15e-01  
  3  +1.0284e-01  +1.2903e-01  2.62e-02  9.49e-03  4.15e-02  1.95e-03  2.94e-02  8.66e-01  
  4  +1.0028e-01  +1.0064e-01  3.52e-04  1.30e-04  5.67e-04  2.44e-05  4.09e-04  9.86e-01  
  5  +1.0024e-01  +1.0030e-01  5.82e-05  2.30e-05  9.59e-05  3.23e-06  7.66e-05  8.19e-01  
  6  +1.0021e-01  +1.0023e-01  2.07e-05  6.40e-06  2.90e-05  1.09e-06  2.76e-05  7.88e-01  
  7  +1.0020e-01  +1.0020e-01  4.06e-07  1.26e-07  5.70e-07  1.95e-08  5.64e-07  9.80e-01  
  8  +1.0020e-01  +1.0020e-01  4.06e-09  1.26e-09  5.70e-09  1.95e-10  5.65e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 120.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:16:55 PM: Optimal value: 1.002e-01
(CVXPY) Aug 30 12:16:55 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:16:55 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:16:55 PM: Your problem has 41 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:16:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:16:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:16:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:16:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:16:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:16:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:16:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:16:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:16:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:16:55 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 41
  constraints   = 46
  nnz(P)        = 0
  nnz(A)        = 128
  cones (total) = 1
    : Nonnegative = 1,  numel = 46

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3411e-01  +6.2142e+00  5.88e+00  8.13e-01  2.75e+00  1.00e+00  1.27e+00   ------   
  1  +8.6973e-02  +1.1474e+00  1.06e+00  3.67e-01  1.22e+00  4.60e-03  5.97e-01  6.20e-01  
  2  +1.7423e-02  +1.5217e-01  1.35e-01  5.89e-02  2.25e-01  1.43e-02  1.43e-01  9.32e-01  
  3  +1.2194e-03  +5.9029e-03  4.68e-03  2.03e-03  7.89e-03  5.59e-04  5.51e-03  9.70e-01  
  4  +2.7917e-04  +3.9103e-04  1.12e-04  5.24e-05  2.00e-04  7.89e-06  1.43e-04  9.74e-01  
  5  +2.5331e-04  +2.6114e-04  7.83e-06  4.23e-06  1.47e-05  4.86e-07  1.22e-05  9.18e-01  
  6  +2.5004e-04  +2.5014e-04  1.05e-07  5.78e-08  1.99e-07  6.13e-09  1.67e-07  9.87e-01  
  7  +2.5000e-04  +2.5000e-04  1.05e-09  5.78e-10  1.99e-09  6.13e-11  1.67e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:16:55 PM: Optimal value: 2.500e-04
(CVXPY) Aug 30 12:16:55 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:16:55 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x7 = 1 AND x5 = 0)                                  <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x4 = 1)                                  <-- (term's our objective: 0.4)
 OR (x1 = 1 AND x3 = 1 AND x0 = 0 AND x2 = 0 AND x7 = 0) <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.4
    Its accruacy: 0.7
    Its hamming distance: 8
  Shortest hamming distance: 7
    Its our objective: 0.4
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

