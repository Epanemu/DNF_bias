Command:
python test_script.py -s smallest_subclass -d 6 -n 10 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 6.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:03 PM: Your problem has 18 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:03 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 18
  constraints   = 23
  nnz(P)        = 0
  nnz(A)        = 58
  cones (total) = 1
    : Nonnegative = 1,  numel = 23

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4712e-01  +6.0906e+00  5.64e+00  7.45e-01  2.54e+00  1.00e+00  1.33e+00   ------   
  1  +4.4101e-01  +1.2047e+00  7.64e-01  2.54e-01  1.05e+00  3.72e-03  5.83e-01  7.36e-01  
  2  +2.7915e-01  +3.8747e-01  1.08e-01  4.02e-02  1.75e-01  6.90e-03  1.31e-01  8.73e-01  
  3  +2.5337e-01  +2.6943e-01  1.61e-02  5.76e-03  2.53e-02  1.10e-03  2.29e-02  8.59e-01  
  4  +2.5019e-01  +2.5038e-01  1.92e-04  6.99e-05  3.07e-04  1.32e-05  2.85e-04  9.88e-01  
  5  +2.5015e-01  +2.5015e-01  1.92e-06  6.99e-07  3.07e-06  1.32e-07  2.85e-06  9.90e-01  
  6  +2.5015e-01  +2.5015e-01  1.92e-08  6.99e-09  3.07e-08  1.32e-09  2.85e-08  9.90e-01  
  7  +2.5015e-01  +2.5015e-01  1.92e-10  6.99e-11  3.07e-10  1.32e-11  2.85e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:03 PM: Optimal value: 2.502e-01
(CVXPY) Aug 30 12:08:03 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:03 PM: Your problem has 28 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:03 PM: Finished problem compilation (took 1.578e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 28
  constraints   = 33
  nnz(P)        = 0
  nnz(A)        = 93
  cones (total) = 1
    : Nonnegative = 1,  numel = 33

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.7252e-01  +6.3651e+00  5.99e+00  7.85e-01  2.80e+00  1.00e+00  1.37e+00   ------   
  1  +2.5918e-01  +1.0917e+00  8.32e-01  2.85e-01  1.11e+00  3.89e-03  5.83e-01  7.31e-01  
  2  +1.1810e-01  +3.4939e-01  2.31e-01  8.16e-02  3.62e-01  1.05e-02  2.49e-01  7.14e-01  
  3  +1.0439e-01  +1.1753e-01  1.31e-02  4.43e-03  2.10e-02  1.30e-03  1.74e-02  9.55e-01  
  4  +1.0026e-01  +1.0042e-01  1.69e-04  5.85e-05  2.77e-04  1.37e-05  2.34e-04  9.87e-01  
  5  +1.0020e-01  +1.0021e-01  5.49e-06  2.09e-06  9.62e-06  1.27e-07  8.92e-06  9.62e-01  
  6  +1.0020e-01  +1.0020e-01  5.58e-08  2.13e-08  9.79e-08  1.35e-09  9.25e-08  9.90e-01  
  7  +1.0020e-01  +1.0020e-01  5.58e-10  2.13e-10  9.78e-10  1.35e-11  9.25e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 94.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:03 PM: Optimal value: 1.002e-01
(CVXPY) Aug 30 12:08:03 PM: Compilation took 1.578e-02 seconds
(CVXPY) Aug 30 12:08:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:03 PM: Your problem has 38 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:03 PM: Finished problem compilation (took 1.560e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 43
  nnz(P)        = 0
  nnz(A)        = 122
  cones (total) = 1
    : Nonnegative = 1,  numel = 43

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3235e-01  +5.9329e+00  5.60e+00  8.11e-01  2.79e+00  1.00e+00  1.27e+00   ------   
  1  +1.3574e-01  +1.0682e+00  9.32e-01  3.46e-01  1.18e+00  4.44e-03  5.78e-01  6.51e-01  
  2  +1.0520e-01  +2.2213e-01  1.17e-01  5.46e-02  2.22e-01  1.25e-02  1.41e-01  9.25e-01  
  3  +1.0038e-01  +1.0214e-01  1.76e-03  8.18e-04  3.32e-03  3.09e-04  2.30e-03  9.86e-01  
  4  +1.0025e-01  +1.0055e-01  2.99e-04  1.47e-04  5.79e-04  4.58e-05  4.21e-04  8.25e-01  
  5  +1.0020e-01  +1.0024e-01  3.44e-05  1.68e-05  6.73e-05  1.85e-06  5.95e-05  9.58e-01  
  6  +1.0020e-01  +1.0020e-01  4.37e-07  2.17e-07  8.62e-07  2.13e-08  7.84e-07  9.87e-01  
  7  +1.0020e-01  +1.0020e-01  4.37e-09  2.17e-09  8.61e-09  2.13e-10  7.84e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:03 PM: Optimal value: 1.002e-01
(CVXPY) Aug 30 12:08:03 PM: Compilation took 1.560e-02 seconds
(CVXPY) Aug 30 12:08:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:03 PM: Your problem has 40 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:03 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 45
  nnz(P)        = 0
  nnz(A)        = 126
  cones (total) = 1
    : Nonnegative = 1,  numel = 45

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.0643e-01  +5.9816e+00  5.68e+00  8.13e-01  2.78e+00  1.00e+00  1.27e+00   ------   
  1  +6.6325e-02  +1.0366e+00  9.70e-01  3.50e-01  1.18e+00  4.52e-03  5.78e-01  6.41e-01  
  2  +1.5212e-02  +1.3619e-01  1.21e-01  5.23e-02  2.10e-01  1.29e-02  1.37e-01  9.29e-01  
  3  +9.8682e-04  +5.8130e-03  4.83e-03  2.05e-03  8.37e-03  5.82e-04  6.01e-03  9.61e-01  
  4  +3.1425e-04  +4.1045e-04  9.62e-05  4.48e-05  1.80e-04  5.73e-06  1.32e-04  9.78e-01  
  5  +3.0009e-04  +3.0693e-04  6.84e-06  3.57e-06  1.33e-05  4.41e-07  1.09e-05  9.20e-01  
  6  +3.0000e-04  +3.0007e-04  7.01e-08  3.68e-08  1.37e-07  4.53e-09  1.13e-07  9.90e-01  
  7  +3.0000e-04  +3.0000e-04  7.01e-10  3.68e-10  1.37e-09  4.53e-11  1.13e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:03 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:03 PM: Optimal value: 3.000e-04
(CVXPY) Aug 30 12:08:03 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x4 = 1 AND x5 = 1)                       <-- (term's our objective: 0.19999999999999996)
 OR (x3 = 1 AND x4 = 1 AND x2 = 0)            <-- (term's our objective: 0.19999999999999996)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

