Command:
python test_script.py -s smallest_subclass -d 3 -n 50000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15208
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 3.

Computed total variation: 0.15208
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:31 PM: Your problem has 25007 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:31 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:32 PM: Finished problem compilation (took 6.492e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25007
  constraints   = 50007
  nnz(P)        = 0
  nnz(A)        = 150007
  cones (total) = 1
    : Nonnegative = 1,  numel = 50007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.76e+02  1.00e+00  1.00e+00   ------   
  1  +6.2016e-01  +4.6339e+03  4.63e+03  3.09e-01  9.19e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5598e-01  +7.9406e+02  7.93e+02  1.40e-01  4.97e+01  6.67e-03  2.21e-01  6.61e-01  
  3  +5.1052e-01  +1.4927e+02  1.49e+02  1.26e-01  4.45e+01  1.26e-05  2.20e-01  4.40e-02  
  4  +5.0007e-01  +1.7436e+00  1.24e+00  3.71e-03  1.30e+00  9.99e-07  1.63e-01  9.90e-01  
  5  +5.0001e-01  +7.4060e-01  2.41e-01  7.17e-04  2.53e-01  4.33e-07  5.79e-02  7.31e-01  
  6  +4.9997e-01  +6.9104e-01  1.91e-01  5.59e-04  1.98e-01  1.43e-06  9.32e-03  9.05e-01  
  7  +4.9696e-01  +7.0009e-01  2.03e-01  4.27e-05  1.52e-02  1.02e-04  1.28e-04  9.88e-01  
  8  +4.8356e-01  +6.1398e-01  1.30e-01  6.59e-06  2.34e-03  3.58e-04  1.98e-05  8.49e-01  
  9  +4.6481e-01  +5.0658e-01  4.18e-02  2.16e-06  7.65e-04  3.06e-06  7.42e-06  8.02e-01  
 10  +4.5492e-01  +4.5980e-01  4.89e-03  2.23e-07  7.89e-05  2.34e-07  8.59e-07  8.96e-01  
 11  +4.5313e-01  +4.5323e-01  9.87e-05  4.13e-09  1.46e-06  3.22e-09  1.74e-08  9.87e-01  
 12  +4.5310e-01  +4.5310e-01  9.87e-07  4.13e-11  1.46e-08  3.22e-11  1.74e-10  9.90e-01  
 13  +4.5310e-01  +4.5310e-01  9.92e-09  4.15e-13  1.47e-10  4.09e-13  2.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.761ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:32 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:32 PM: Optimal value: 4.531e-01
(CVXPY) Aug 30 12:03:32 PM: Compilation took 6.492e-02 seconds
(CVXPY) Aug 30 12:03:32 PM: Solver (including time spent in interface) took 1.859e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4531
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:32 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:32 PM: Finished problem compilation (took 6.163e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 178744
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.88e+02  1.00e+00  1.00e+00   ------   
  1  +6.2013e-01  +4.6354e+03  4.63e+03  3.09e-01  9.79e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5592e-01  +7.9350e+02  7.93e+02  1.40e-01  5.30e+01  6.68e-03  2.21e-01  6.62e-01  
  3  +5.1049e-01  +1.4892e+02  1.48e+02  1.26e-01  4.74e+01  1.26e-05  2.20e-01  4.45e-02  
  4  +5.0024e-01  +4.2296e+00  3.73e+00  1.11e-02  4.10e+00  1.26e-06  1.97e-01  4.00e-01  
  5  +5.0005e-01  +1.6147e+00  1.11e+00  3.32e-03  1.24e+00  8.46e-07  1.57e-01  3.18e-01  
  6  +5.0002e-01  +1.0564e+00  5.56e-01  1.66e-03  6.23e-01  4.90e-07  9.61e-02  4.77e-01  
  7  +5.0001e-01  +7.6858e-01  2.69e-01  8.00e-04  3.01e-01  3.60e-07  3.68e-02  6.52e-01  
  8  +4.9997e-01  +7.5845e-01  2.58e-01  7.39e-04  2.78e-01  1.14e-06  7.90e-03  8.66e-01  
  9  +4.9747e-01  +7.2501e-01  2.28e-01  4.70e-05  1.79e-02  5.53e-05  1.31e-04  9.85e-01  
 10  +4.9605e-01  +7.0493e-01  2.09e-01  2.63e-05  9.98e-03  7.06e-05  7.18e-05  6.06e-01  
 11  +4.9768e-01  +6.9136e-01  1.94e-01  2.33e-05  8.86e-03  2.15e-05  6.28e-05  7.20e-01  
 12  +4.9756e-01  +6.8988e-01  1.92e-01  2.11e-05  8.01e-03  2.05e-05  5.66e-05  2.19e-01  
 13  +4.9698e-01  +6.8035e-01  1.83e-01  1.35e-05  5.12e-03  9.83e-06  3.58e-05  9.90e-01  
 14  +4.9678e-01  +6.7980e-01  1.83e-01  1.30e-05  4.93e-03  8.91e-06  3.45e-05  1.71e-01  
 15  +4.9216e-01  +6.6140e-01  1.69e-01  7.38e-06  2.80e-03  1.10e-05  1.97e-05  6.02e-01  
 16  +4.8946e-01  +6.5106e-01  1.62e-01  6.82e-06  2.59e-03  9.78e-06  1.83e-05  1.48e-01  
 17  +4.7866e-01  +6.0981e-01  1.31e-01  5.73e-06  2.17e-03  9.98e-07  1.60e-05  7.97e-01  
 18  +4.5885e-01  +5.3949e-01  8.06e-02  2.87e-06  1.09e-03  6.88e-07  8.34e-06  5.44e-01  
 19  +4.2718e-01  +4.3272e-01  5.54e-03  1.76e-07  6.65e-05  1.07e-08  5.54e-07  9.90e-01  
 20  +4.2409e-01  +4.2415e-01  5.91e-05  1.86e-09  7.03e-07  1.13e-10  5.93e-09  9.89e-01  
 21  +4.2406e-01  +4.2406e-01  5.91e-07  1.86e-11  7.03e-09  1.13e-12  5.93e-11  9.90e-01  
 22  +4.2406e-01  +4.2406e-01  5.91e-09  1.87e-13  7.04e-11  1.18e-14  6.17e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 351.8756ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:32 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:32 PM: Optimal value: 4.241e-01
(CVXPY) Aug 30 12:03:32 PM: Compilation took 6.163e-02 seconds
(CVXPY) Aug 30 12:03:32 PM: Solver (including time spent in interface) took 3.719e-01 seconds
FULL MODEL:
  Accruacy: 0.57604
  Our objective: 0.15208

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.15208)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.15208
    Its accruacy: 0.57604
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15208
  Highest accruacy: 0.57604
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

