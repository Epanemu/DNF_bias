Command:
python test_script.py -s smallest_subclass -d 3 -n 5000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16519999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 3.

Computed total variation: 0.16519999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:15 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:15 PM: Finished problem compilation (took 7.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 15007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5008e+03  2.50e+03  9.77e-01  5.52e+01  1.00e+00  1.00e+00   ------   
  1  +6.2006e-01  +4.6378e+02  4.63e+02  3.04e-01  2.87e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5564e-01  +7.9480e+01  7.89e+01  1.33e-01  1.50e+01  6.69e-03  2.20e-01  6.64e-01  
  3  +5.0825e-01  +1.2773e+01  1.23e+01  8.47e-02  9.12e+00  1.05e-05  2.18e-01  6.66e-02  
  4  +5.0002e-01  +1.1053e+00  6.05e-01  5.73e-03  6.32e-01  5.37e-06  1.60e-01  6.32e-01  
  5  +4.9991e-01  +6.5342e-01  1.54e-01  1.45e-03  1.61e-01  2.54e-06  3.16e-02  8.32e-01  
  6  +4.8939e-01  +9.9387e-01  5.04e-01  5.98e-04  6.72e-02  1.27e-04  1.86e-03  9.75e-01  
  7  +4.6790e-01  +6.2700e-01  1.59e-01  8.17e-05  9.17e-03  1.46e-04  2.59e-04  8.68e-01  
  8  +4.5304e-01  +4.7184e-01  1.88e-02  9.56e-06  1.07e-03  1.05e-05  3.34e-05  9.19e-01  
  9  +4.4852e-01  +4.5158e-01  3.06e-03  1.43e-06  1.60e-04  1.31e-06  5.55e-06  8.79e-01  
 10  +4.4753e-01  +4.4763e-01  1.02e-04  4.29e-08  4.80e-06  3.27e-08  1.86e-07  9.77e-01  
 11  +4.4750e-01  +4.4750e-01  1.02e-06  4.29e-10  4.80e-08  3.27e-10  1.86e-09  9.90e-01  
 12  +4.4750e-01  +4.4750e-01  1.02e-08  4.29e-12  4.80e-10  3.38e-12  1.92e-11  9.90e-01  
 13  +4.4750e-01  +4.4750e-01  1.02e-10  4.30e-14  4.81e-12  3.49e-14  1.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.4254ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:15 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:15 PM: Optimal value: 4.475e-01
(CVXPY) Aug 30 12:03:15 PM: Compilation took 7.507e-03 seconds
(CVXPY) Aug 30 12:03:15 PM: Solver (including time spent in interface) took 1.501e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4475
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:03:15 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:03:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:03:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:03:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:03:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:03:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:03:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:03:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:03:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:03:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:03:15 PM: Finished problem compilation (took 9.267e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 17957
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0000e-01  +2.5012e+03  2.50e+03  9.77e-01  5.90e+01  1.00e+00  1.01e+00   ------   
  1  +6.1971e-01  +4.6517e+02  4.65e+02  3.06e-01  3.07e+01  4.24e-03  4.41e-01  6.92e-01  
  2  +5.5524e-01  +7.9143e+01  7.86e+01  1.33e-01  1.59e+01  6.81e-03  2.22e-01  6.69e-01  
  3  +5.0800e-01  +1.2516e+01  1.20e+01  8.40e-02  9.61e+00  1.05e-05  2.19e-01  7.22e-02  
  4  +5.0090e-01  +2.3934e+00  1.89e+00  1.79e-02  2.06e+00  6.24e-06  1.95e-01  2.47e-01  
  5  +5.0004e-01  +7.0344e-01  2.03e-01  1.93e-03  2.28e-01  1.35e-06  4.55e-02  8.58e-01  
  6  +4.9999e-01  +7.9128e-01  2.91e-01  2.70e-03  3.19e-01  2.76e-06  2.78e-02  5.90e-01  
  7  +4.9959e-01  +8.5850e-01  3.59e-01  2.03e-03  2.43e-01  8.23e-06  7.39e-03  9.90e-01  
  8  +4.9754e-01  +8.3681e-01  3.39e-01  6.16e-04  7.40e-02  2.97e-05  1.77e-03  7.61e-01  
  9  +4.9339e-01  +7.0119e-01  2.08e-01  1.51e-04  1.82e-02  4.87e-05  4.13e-04  9.90e-01  
 10  +4.9097e-01  +6.9249e-01  2.02e-01  1.19e-04  1.43e-02  5.38e-05  3.24e-04  2.89e-01  
 11  +4.8616e-01  +6.6694e-01  1.81e-01  9.05e-05  1.09e-02  3.19e-05  2.49e-04  6.90e-01  
 12  +4.7425e-01  +6.1920e-01  1.45e-01  5.94e-05  7.12e-03  2.43e-05  1.67e-04  5.52e-01  
 13  +4.5188e-01  +5.3327e-01  8.14e-02  2.83e-05  3.38e-03  1.28e-05  8.31e-05  5.60e-01  
 14  +4.4567e-01  +5.1047e-01  6.48e-02  2.29e-05  2.73e-03  7.76e-06  7.49e-05  8.34e-01  
 15  +4.3407e-01  +4.6400e-01  2.99e-02  1.05e-05  1.25e-03  3.53e-06  3.53e-05  5.85e-01  
 16  +4.3170e-01  +4.6703e-01  3.53e-02  1.13e-05  1.35e-03  4.83e-06  3.50e-05  6.48e-02  
 17  +4.1836e-01  +4.2035e-01  1.99e-03  6.28e-07  7.47e-05  2.10e-07  2.02e-06  9.50e-01  
 18  +4.1751e-01  +4.1753e-01  2.00e-05  6.31e-09  7.51e-07  2.10e-09  2.04e-08  9.90e-01  
 19  +4.1750e-01  +4.1750e-01  2.00e-07  6.31e-11  7.51e-09  2.10e-11  2.04e-10  9.90e-01  
 20  +4.1750e-01  +4.1750e-01  2.00e-09  6.31e-13  7.51e-11  2.10e-13  2.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.855ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:03:15 PM: Problem status: optimal
(CVXPY) Aug 30 12:03:15 PM: Optimal value: 4.175e-01
(CVXPY) Aug 30 12:03:15 PM: Compilation took 9.267e-03 seconds
(CVXPY) Aug 30 12:03:15 PM: Solver (including time spent in interface) took 2.578e-02 seconds
FULL MODEL:
  Accruacy: 0.5826
  Our objective: 0.16519999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.16519999999999996)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.16519999999999996
    Its accruacy: 0.5826
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16519999999999996
  Highest accruacy: 0.5826
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

