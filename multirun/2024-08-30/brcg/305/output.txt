Command:
python test_script.py -s smallest_subclass -d 8 -n 5000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 8.

Computed total variation: 0.1864
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:19 PM: Your problem has 2517 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:19 PM: Finished problem compilation (took 1.165e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2517
  constraints   = 5017
  nnz(P)        = 0
  nnz(A)        = 27517
  cones (total) = 1
    : Nonnegative = 1,  numel = 5017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3495e+02  5.34e+02  4.16e-01  4.97e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3471e-01  +6.3379e+01  6.28e+01  1.59e-01  2.42e+01  1.47e-02  2.65e-01  9.01e-01  
  3  +5.0902e-01  +1.6342e+01  1.58e+01  1.06e-01  1.58e+01  3.91e-05  2.51e-01  2.27e-01  
  4  +5.0052e-01  +1.1641e+00  6.64e-01  6.44e-03  1.00e+00  6.13e-06  1.15e-01  9.29e-01  
  5  +5.0005e-01  +5.6828e-01  6.82e-02  6.45e-04  1.01e-01  5.64e-06  2.32e-02  9.84e-01  
  6  +5.0004e-01  +5.6095e-01  6.09e-02  5.72e-04  8.96e-02  7.13e-06  1.03e-02  7.20e-01  
  7  +5.0005e-01  +5.6789e-01  6.78e-02  6.29e-04  9.87e-02  5.64e-06  8.42e-03  5.63e-01  
  8  +4.9992e-01  +5.3968e-01  3.98e-02  8.92e-05  1.41e-02  6.93e-05  3.07e-04  9.73e-01  
  9  +4.9945e-01  +5.3885e-01  3.94e-02  2.21e-05  3.49e-03  2.87e-04  7.17e-05  7.76e-01  
 10  +4.9755e-01  +5.3122e-01  3.37e-02  1.94e-05  3.06e-03  1.74e-04  6.51e-05  2.62e-01  
 11  +4.9380e-01  +5.1656e-01  2.28e-02  1.20e-05  1.90e-03  5.32e-05  4.34e-05  5.77e-01  
 12  +4.9261e-01  +5.1232e-01  1.97e-02  1.00e-05  1.58e-03  2.02e-05  3.70e-05  5.44e-01  
 13  +4.8973e-01  +5.0115e-01  1.14e-02  5.14e-06  8.11e-04  9.02e-06  1.98e-05  5.69e-01  
 14  +4.8851e-01  +4.9647e-01  7.97e-03  3.33e-06  5.26e-04  5.59e-07  1.30e-05  9.90e-01  
 15  +4.8634e-01  +4.8813e-01  1.80e-03  7.22e-07  1.14e-04  1.24e-07  2.93e-06  7.95e-01  
 16  +4.8588e-01  +4.8638e-01  4.96e-04  1.98e-07  3.13e-05  4.86e-08  8.11e-07  9.90e-01  
 17  +4.8570e-01  +4.8571e-01  5.34e-06  2.13e-09  3.37e-07  5.18e-10  8.76e-09  9.90e-01  
 18  +4.8570e-01  +4.8570e-01  5.34e-08  2.13e-11  3.37e-09  5.18e-12  8.76e-11  9.90e-01  
 19  +4.8570e-01  +4.8570e-01  5.34e-10  2.13e-13  3.37e-11  5.20e-14  8.79e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.9029ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:19 PM: Optimal value: 4.857e-01
(CVXPY) Aug 30 12:18:19 PM: Compilation took 1.165e-02 seconds
(CVXPY) Aug 30 12:18:19 PM: Solver (including time spent in interface) took 4.422e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4857
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:19 PM: Your problem has 2527 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:19 PM: Finished problem compilation (took 1.203e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2527
  constraints   = 5027
  nnz(P)        = 0
  nnz(A)        = 31455
  cones (total) = 1
    : Nonnegative = 1,  numel = 5027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.80e-01  8.02e+01  1.00e+00  1.00e+00   ------   
  1  +5.8401e-01  +5.3516e+02  5.35e+02  4.16e-01  5.11e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3450e-01  +6.3175e+01  6.26e+01  1.59e-01  2.48e+01  1.48e-02  2.65e-01  9.03e-01  
  3  +5.0896e-01  +1.6275e+01  1.58e+01  1.06e-01  1.62e+01  3.93e-05  2.51e-01  2.31e-01  
  4  +5.0052e-01  +1.1601e+00  6.60e-01  6.41e-03  1.02e+00  6.17e-06  1.13e-01  9.35e-01  
  5  +5.0017e-01  +7.1846e-01  2.18e-01  2.08e-03  3.35e-01  5.93e-06  5.48e-02  6.19e-01  
  6  +5.0007e-01  +5.9794e-01  9.79e-02  9.27e-04  1.49e-01  4.20e-06  1.82e-02  7.83e-01  
  7  +5.0008e-01  +6.3060e-01  1.31e-01  8.97e-04  1.45e-01  1.54e-05  4.23e-03  9.69e-01  
  8  +4.9988e-01  +6.2501e-01  1.25e-01  1.41e-04  2.29e-02  1.25e-04  4.51e-04  8.94e-01  
  9  +4.9955e-01  +6.0978e-01  1.10e-01  1.27e-04  2.07e-02  8.95e-05  4.10e-04  2.25e-01  
 10  +4.9810e-01  +5.8296e-01  8.49e-02  7.66e-05  1.24e-02  7.37e-05  2.46e-04  5.21e-01  
 11  +4.9774e-01  +5.7664e-01  7.89e-02  7.04e-05  1.14e-02  5.63e-05  2.27e-04  2.14e-01  
 12  +4.9524e-01  +5.4781e-01  5.26e-02  3.98e-05  6.46e-03  1.40e-05  1.31e-04  7.60e-01  
 13  +4.9513e-01  +5.4698e-01  5.19e-02  3.97e-05  6.45e-03  1.31e-05  1.30e-04  4.36e-02  
 14  +4.9354e-01  +5.3754e-01  4.40e-02  2.89e-05  4.69e-03  1.13e-05  9.41e-05  3.46e-01  
 15  +4.9288e-01  +5.3333e-01  4.04e-02  2.36e-05  3.83e-03  7.47e-06  7.55e-05  5.15e-01  
 16  +4.9192e-01  +5.2880e-01  3.69e-02  1.90e-05  3.08e-03  6.94e-06  6.05e-05  2.71e-01  
 17  +4.9152e-01  +5.2695e-01  3.54e-02  1.75e-05  2.84e-03  4.88e-06  5.62e-05  4.37e-01  
 18  +4.8899e-01  +5.1624e-01  2.73e-02  1.12e-05  1.81e-03  3.53e-06  3.60e-05  5.94e-01  
 19  +4.8442e-01  +4.9591e-01  1.15e-02  4.41e-06  7.15e-04  1.02e-06  1.47e-05  9.69e-01  
 20  +4.8089e-01  +4.8258e-01  1.69e-03  6.14e-07  9.96e-05  1.72e-07  2.14e-06  9.90e-01  
 21  +4.8023e-01  +4.8031e-01  7.39e-05  2.66e-08  4.31e-06  6.12e-09  9.70e-08  9.62e-01  
 22  +4.8020e-01  +4.8020e-01  7.42e-07  2.67e-10  4.32e-08  6.12e-11  9.82e-10  9.90e-01  
 23  +4.8020e-01  +4.8020e-01  7.42e-09  2.67e-12  4.32e-10  6.12e-13  9.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.1916ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:20 PM: Optimal value: 4.802e-01
(CVXPY) Aug 30 12:18:20 PM: Compilation took 1.203e-02 seconds
(CVXPY) Aug 30 12:18:20 PM: Solver (including time spent in interface) took 5.625e-02 seconds
Iteration: 2, Objective: 0.4802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:20 PM: Your problem has 2537 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:20 PM: Finished problem compilation (took 1.155e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2537
  constraints   = 5037
  nnz(P)        = 0
  nnz(A)        = 34953
  cones (total) = 1
    : Nonnegative = 1,  numel = 5037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.80e-01  8.19e+01  1.00e+00  1.00e+00   ------   
  1  +5.8395e-01  +5.3531e+02  5.35e+02  4.17e-01  5.21e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3437e-01  +6.3061e+01  6.25e+01  1.59e-01  2.53e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0893e-01  +1.6240e+01  1.57e+01  1.06e-01  1.65e+01  3.94e-05  2.51e-01  2.34e-01  
  4  +5.0052e-01  +1.1625e+00  6.62e-01  6.45e-03  1.05e+00  6.18e-06  1.13e-01  9.36e-01  
  5  +5.0017e-01  +7.2382e-01  2.24e-01  2.14e-03  3.51e-01  6.02e-06  5.40e-02  6.20e-01  
  6  +5.0011e-01  +6.4230e-01  1.42e-01  1.35e-03  2.22e-01  5.32e-06  2.49e-02  6.37e-01  
  7  +5.0012e-01  +6.6704e-01  1.67e-01  1.38e-03  2.27e-01  8.95e-06  8.38e-03  9.90e-01  
  8  +4.9994e-01  +6.3800e-01  1.38e-01  1.62e-04  2.68e-02  1.01e-04  5.16e-04  9.42e-01  
  9  +4.9967e-01  +6.2301e-01  1.23e-01  1.37e-04  2.27e-02  7.92e-05  4.37e-04  3.05e-01  
 10  +4.9859e-01  +6.0583e-01  1.07e-01  8.05e-05  1.33e-02  9.42e-05  2.55e-04  5.07e-01  
 11  +4.9781e-01  +5.9527e-01  9.75e-02  7.39e-05  1.23e-02  6.84e-05  2.34e-04  2.22e-01  
 12  +4.9747e-01  +5.8898e-01  9.15e-02  6.69e-05  1.11e-02  5.07e-05  2.11e-04  2.93e-01  
 13  +4.9695e-01  +5.8456e-01  8.76e-02  5.79e-05  9.61e-03  4.60e-05  1.82e-04  2.50e-01  
 14  +4.9613e-01  +5.7549e-01  7.94e-02  5.00e-05  8.29e-03  2.50e-05  1.57e-04  4.87e-01  
 15  +4.9534e-01  +5.6979e-01  7.45e-02  4.72e-05  7.82e-03  1.67e-05  1.49e-04  3.15e-01  
 16  +4.9187e-01  +5.5402e-01  6.21e-02  3.15e-05  5.22e-03  1.50e-05  1.01e-04  4.06e-01  
 17  +4.9068e-01  +5.4740e-01  5.67e-02  2.92e-05  4.84e-03  9.51e-06  9.39e-05  3.60e-01  
 18  +4.8188e-01  +5.0994e-01  2.81e-02  1.18e-05  1.95e-03  4.15e-06  3.91e-05  6.80e-01  
 19  +4.7870e-01  +4.9649e-01  1.78e-02  7.16e-06  1.18e-03  2.31e-06  2.41e-05  5.98e-01  
 20  +4.7786e-01  +4.9284e-01  1.50e-02  5.92e-06  9.80e-04  1.88e-06  2.01e-05  4.50e-01  
 21  +4.7349e-01  +4.7569e-01  2.20e-03  8.45e-07  1.40e-04  2.32e-07  2.96e-06  9.62e-01  
 22  +4.7272e-01  +4.7276e-01  4.55e-05  1.75e-08  2.90e-06  4.61e-09  6.22e-08  9.82e-01  
 23  +4.7270e-01  +4.7270e-01  4.56e-07  1.76e-10  2.91e-08  4.62e-11  6.23e-10  9.90e-01  
 24  +4.7270e-01  +4.7270e-01  4.56e-09  1.76e-12  2.91e-10  4.62e-13  6.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.3703ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:20 PM: Optimal value: 4.727e-01
(CVXPY) Aug 30 12:18:20 PM: Compilation took 1.155e-02 seconds
(CVXPY) Aug 30 12:18:20 PM: Solver (including time spent in interface) took 6.131e-02 seconds
Iteration: 3, Objective: 0.4727
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:20 PM: Your problem has 2547 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:20 PM: Finished problem compilation (took 1.279e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2547
  constraints   = 5047
  nnz(P)        = 0
  nnz(A)        = 36190
  cones (total) = 1
    : Nonnegative = 1,  numel = 5047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.80e-01  8.20e+01  1.00e+00  1.00e+00   ------   
  1  +5.8377e-01  +5.3542e+02  5.35e+02  4.17e-01  5.21e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3425e-01  +6.2948e+01  6.24e+01  1.58e-01  2.52e+01  1.48e-02  2.65e-01  9.06e-01  
  3  +5.0889e-01  +1.6206e+01  1.57e+01  1.05e-01  1.65e+01  3.95e-05  2.50e-01  2.37e-01  
  4  +5.0056e-01  +1.2377e+00  7.37e-01  7.19e-03  1.17e+00  6.42e-06  1.18e-01  8.92e-01  
  5  +5.0018e-01  +7.5976e-01  2.60e-01  2.48e-03  4.07e-01  6.50e-06  5.66e-02  6.37e-01  
  6  +5.0011e-01  +6.9062e-01  1.91e-01  1.80e-03  2.95e-01  7.83e-06  2.36e-02  6.62e-01  
  7  +4.9991e-01  +6.8565e-01  1.86e-01  7.70e-04  1.28e-01  4.70e-05  2.78e-03  9.47e-01  
  8  +4.9817e-01  +6.7108e-01  1.73e-01  1.23e-04  2.04e-02  3.00e-04  3.83e-04  8.64e-01  
  9  +4.9512e-01  +6.3697e-01  1.42e-01  9.10e-05  1.51e-02  2.17e-04  2.86e-04  3.71e-01  
 10  +4.9358e-01  +6.2357e-01  1.30e-01  7.60e-05  1.26e-02  1.69e-04  2.40e-04  3.19e-01  
 11  +4.9315e-01  +6.1778e-01  1.25e-01  7.33e-05  1.22e-02  1.33e-04  2.32e-04  1.68e-01  
 12  +4.9120e-01  +6.0117e-01  1.10e-01  6.60e-05  1.10e-02  7.19e-05  2.13e-04  3.38e-01  
 13  +4.8920e-01  +5.8814e-01  9.89e-02  5.76e-05  9.57e-03  5.10e-05  1.87e-04  2.83e-01  
 14  +4.7825e-01  +5.3243e-01  5.42e-02  2.49e-05  4.12e-03  1.36e-05  8.36e-05  8.05e-01  
 15  +4.7494e-01  +5.1875e-01  4.38e-02  1.92e-05  3.18e-03  1.04e-05  6.56e-05  2.72e-01  
 16  +4.7052e-01  +5.0008e-01  2.96e-02  1.20e-05  2.00e-03  2.71e-06  4.22e-05  9.90e-01  
 17  +4.6343e-01  +4.7224e-01  8.81e-03  3.41e-06  5.65e-04  8.19e-07  1.24e-05  7.71e-01  
 18  +4.6324e-01  +4.7159e-01  8.35e-03  3.15e-06  5.22e-04  8.08e-07  1.14e-05  1.47e-01  
 19  +4.6272e-01  +4.6940e-01  6.68e-03  2.46e-06  4.07e-04  7.71e-07  8.88e-06  9.32e-01  
 20  +4.6224e-01  +4.6785e-01  5.60e-03  2.09e-06  3.46e-04  6.42e-07  7.60e-06  6.87e-01  
 21  +4.6071e-01  +4.6235e-01  1.65e-03  5.94e-07  9.84e-05  2.05e-07  2.16e-06  7.58e-01  
 22  +4.6008e-01  +4.6025e-01  1.70e-04  6.08e-08  1.01e-05  1.80e-08  2.22e-07  9.85e-01  
 23  +4.6000e-01  +4.6000e-01  2.01e-06  7.17e-10  1.19e-07  2.12e-10  2.62e-09  9.88e-01  
 24  +4.6000e-01  +4.6000e-01  2.01e-08  7.17e-12  1.19e-09  2.12e-12  2.62e-11  9.90e-01  
 25  +4.6000e-01  +4.6000e-01  2.02e-10  7.19e-14  1.19e-11  2.31e-14  2.84e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 61.9176ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:20 PM: Optimal value: 4.600e-01
(CVXPY) Aug 30 12:18:20 PM: Compilation took 1.279e-02 seconds
(CVXPY) Aug 30 12:18:20 PM: Solver (including time spent in interface) took 6.554e-02 seconds
Iteration: 4, Objective: 0.4600
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:20 PM: Your problem has 2557 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:20 PM: Finished problem compilation (took 1.644e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2557
  constraints   = 5057
  nnz(P)        = 0
  nnz(A)        = 37208
  cones (total) = 1
    : Nonnegative = 1,  numel = 5057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.80e-01  8.20e+01  1.00e+00  1.00e+00   ------   
  1  +5.8368e-01  +5.3547e+02  5.35e+02  4.18e-01  5.21e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3417e-01  +6.2872e+01  6.23e+01  1.58e-01  2.51e+01  1.49e-02  2.65e-01  9.07e-01  
  3  +5.0887e-01  +1.6184e+01  1.57e+01  1.05e-01  1.64e+01  3.96e-05  2.50e-01  2.39e-01  
  4  +5.0057e-01  +1.2557e+00  7.55e-01  7.37e-03  1.20e+00  6.49e-06  1.19e-01  8.83e-01  
  5  +5.0014e-01  +7.2047e-01  2.20e-01  2.10e-03  3.46e-01  6.67e-06  4.80e-02  7.35e-01  
  6  +5.0009e-01  +6.8779e-01  1.88e-01  1.75e-03  2.89e-01  9.98e-06  2.01e-02  6.34e-01  
  7  +4.9955e-01  +6.8447e-01  1.85e-01  4.51e-04  7.49e-02  1.00e-04  1.47e-03  9.90e-01  
  8  +4.9693e-01  +6.6354e-01  1.67e-01  1.08e-04  1.79e-02  3.74e-04  3.30e-04  7.82e-01  
  9  +4.9372e-01  +6.3659e-01  1.43e-01  8.08e-05  1.34e-02  2.95e-04  2.50e-04  3.54e-01  
 10  +4.9310e-01  +6.3006e-01  1.37e-01  7.66e-05  1.27e-02  2.47e-04  2.38e-04  1.51e-01  
 11  +4.9112e-01  +6.0792e-01  1.17e-01  6.88e-05  1.14e-02  8.36e-05  2.16e-04  4.82e-01  
 12  +4.8388e-01  +5.7249e-01  8.86e-02  4.34e-05  7.20e-03  6.43e-05  1.40e-04  3.97e-01  
 13  +4.7706e-01  +5.3975e-01  6.27e-02  2.87e-05  4.77e-03  3.14e-05  9.59e-05  4.79e-01  
 14  +4.6662e-01  +4.9285e-01  2.62e-02  1.07e-05  1.78e-03  3.34e-07  3.77e-05  9.83e-01  
 15  +4.6266e-01  +4.7765e-01  1.50e-02  5.84e-06  9.69e-04  8.71e-07  2.10e-05  6.99e-01  
 16  +4.6008e-01  +4.6792e-01  7.85e-03  2.95e-06  4.89e-04  5.48e-07  1.07e-05  5.79e-01  
 17  +4.5982e-01  +4.6675e-01  6.93e-03  2.66e-06  4.41e-04  6.30e-07  9.88e-06  5.50e-01  
 18  +4.5955e-01  +4.6572e-01  6.16e-03  2.36e-06  3.91e-04  6.00e-07  8.72e-06  3.30e-01  
 19  +4.5894e-01  +4.6362e-01  4.69e-03  1.75e-06  2.89e-04  4.99e-07  6.38e-06  4.88e-01  
 20  +4.5724e-01  +4.5758e-01  3.42e-04  1.27e-07  2.10e-05  3.96e-08  4.69e-07  9.90e-01  
 21  +4.5710e-01  +4.5710e-01  3.43e-06  1.27e-09  2.10e-07  3.98e-10  4.71e-09  9.90e-01  
 22  +4.5710e-01  +4.5710e-01  3.43e-08  1.27e-11  2.10e-09  3.98e-12  4.71e-11  9.90e-01  
 23  +4.5710e-01  +4.5710e-01  3.43e-10  1.27e-13  2.10e-11  3.99e-14  4.73e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 66.1196ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:20 PM: Optimal value: 4.571e-01
(CVXPY) Aug 30 12:18:20 PM: Compilation took 1.644e-02 seconds
(CVXPY) Aug 30 12:18:20 PM: Solver (including time spent in interface) took 6.923e-02 seconds
Iteration: 5, Objective: 0.4571
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:20 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:20 PM: Finished problem compilation (took 1.278e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 38644
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.80e-01  8.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.8361e-01  +5.3542e+02  5.35e+02  4.18e-01  5.22e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3407e-01  +6.2762e+01  6.22e+01  1.58e-01  2.51e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0883e-01  +1.6137e+01  1.56e+01  1.05e-01  1.64e+01  3.96e-05  2.49e-01  2.41e-01  
  4  +5.0064e-01  +1.3836e+00  8.83e-01  8.62e-03  1.40e+00  6.85e-06  1.28e-01  8.17e-01  
  5  +5.0015e-01  +7.7745e-01  2.77e-01  2.65e-03  4.36e-01  6.40e-06  5.74e-02  6.49e-01  
  6  +5.0004e-01  +7.0395e-01  2.04e-01  1.85e-03  3.05e-01  1.11e-05  1.60e-02  8.01e-01  
  7  +4.9762e-01  +6.9150e-01  1.94e-01  2.07e-04  3.46e-02  2.19e-04  6.41e-04  9.79e-01  
  8  +4.9455e-01  +6.6097e-01  1.66e-01  1.28e-04  2.13e-02  2.37e-04  3.93e-04  4.52e-01  
  9  +4.9501e-01  +6.6041e-01  1.65e-01  1.24e-04  2.07e-02  1.91e-04  3.81e-04  2.11e-01  
 10  +4.9173e-01  +6.4019e-01  1.48e-01  8.85e-05  1.47e-02  1.91e-04  2.73e-04  3.40e-01  
 11  +4.8834e-01  +6.1339e-01  1.25e-01  7.44e-05  1.24e-02  8.30e-05  2.33e-04  4.60e-01  
 12  +4.8292e-01  +5.8497e-01  1.02e-01  5.46e-05  9.09e-03  6.33e-05  1.75e-04  3.13e-01  
 13  +4.7559e-01  +5.4459e-01  6.90e-02  3.38e-05  5.62e-03  6.70e-07  1.12e-04  9.24e-01  
 14  +4.6096e-01  +4.7836e-01  1.74e-02  7.46e-06  1.24e-03  5.73e-07  2.61e-05  8.33e-01  
 15  +4.5773e-01  +4.6513e-01  7.40e-03  3.05e-06  5.07e-04  3.93e-07  1.09e-05  6.94e-01  
 16  +4.5757e-01  +4.6448e-01  6.91e-03  2.82e-06  4.69e-04  4.67e-07  1.01e-05  3.12e-01  
 17  +4.5573e-01  +4.5725e-01  1.51e-03  6.06e-07  1.01e-04  1.64e-07  2.22e-06  9.90e-01  
 18  +4.5521e-01  +4.5524e-01  2.71e-05  1.09e-08  1.80e-06  2.90e-09  4.00e-08  9.84e-01  
 19  +4.5520e-01  +4.5520e-01  2.72e-07  1.09e-10  1.80e-08  2.90e-11  4.00e-10  9.90e-01  
 20  +4.5520e-01  +4.5520e-01  2.72e-09  1.09e-12  1.80e-10  2.90e-13  4.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.7026ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:20 PM: Optimal value: 4.552e-01
(CVXPY) Aug 30 12:18:20 PM: Compilation took 1.278e-02 seconds
(CVXPY) Aug 30 12:18:20 PM: Solver (including time spent in interface) took 5.851e-02 seconds
Iteration: 6, Objective: 0.4552
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:20 PM: Your problem has 2577 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:20 PM: Finished problem compilation (took 1.908e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2577
  constraints   = 5077
  nnz(P)        = 0
  nnz(A)        = 39510
  cones (total) = 1
    : Nonnegative = 1,  numel = 5077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5012e+03  2.50e+03  9.80e-01  8.23e+01  1.00e+00  1.00e+00   ------   
  1  +5.8336e-01  +5.3552e+02  5.35e+02  4.18e-01  5.21e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3389e-01  +6.2587e+01  6.21e+01  1.58e-01  2.50e+01  1.49e-02  2.64e-01  9.10e-01  
  3  +5.0880e-01  +1.6096e+01  1.56e+01  1.05e-01  1.63e+01  3.97e-05  2.48e-01  2.45e-01  
  4  +5.0067e-01  +1.4413e+00  9.41e-01  9.19e-03  1.50e+00  7.04e-06  1.30e-01  7.93e-01  
  5  +5.0017e-01  +8.2436e-01  3.24e-01  3.10e-03  5.10e-01  6.80e-06  6.18e-02  6.38e-01  
  6  +5.0003e-01  +7.1975e-01  2.20e-01  1.99e-03  3.27e-01  1.16e-05  1.61e-02  8.05e-01  
  7  +4.9711e-01  +7.0494e-01  2.08e-01  2.21e-04  3.70e-02  2.23e-04  6.72e-04  9.68e-01  
  8  +4.9467e-01  +6.8281e-01  1.88e-01  1.52e-04  2.55e-02  2.33e-04  4.63e-04  3.92e-01  
  9  +4.9231e-01  +6.6580e-01  1.73e-01  1.17e-04  1.95e-02  2.10e-04  3.57e-04  3.57e-01  
 10  +4.8728e-01  +6.3096e-01  1.44e-01  8.28e-05  1.38e-02  1.31e-04  2.58e-04  4.90e-01  
 11  +4.8650e-01  +6.2471e-01  1.38e-01  8.14e-05  1.36e-02  1.09e-04  2.55e-04  1.04e-01  
 12  +4.7121e-01  +5.4055e-01  6.93e-02  3.30e-05  5.48e-03  5.83e-06  1.09e-04  9.12e-01  
 13  +4.6170e-01  +4.9643e-01  3.47e-02  1.56e-05  2.59e-03  2.87e-06  5.39e-05  7.30e-01  
 14  +4.5419e-01  +4.6303e-01  8.83e-03  3.79e-06  6.30e-04  7.37e-07  1.37e-05  8.17e-01  
 15  +4.5373e-01  +4.6116e-01  7.43e-03  3.15e-06  5.24e-04  6.42e-07  1.14e-05  2.66e-01  
 16  +4.5237e-01  +4.5568e-01  3.32e-03  1.37e-06  2.27e-04  3.25e-07  5.03e-06  8.00e-01  
 17  +4.5143e-01  +4.5194e-01  5.12e-04  2.09e-07  3.48e-05  5.07e-08  7.82e-07  8.72e-01  
 18  +4.5127e-01  +4.5132e-01  4.99e-05  2.03e-08  3.38e-06  5.02e-09  7.64e-08  9.26e-01  
 19  +4.5125e-01  +4.5125e-01  5.04e-07  2.05e-10  3.41e-08  5.06e-11  7.70e-10  9.90e-01  
 20  +4.5125e-01  +4.5125e-01  5.04e-09  2.05e-12  3.41e-10  5.11e-13  7.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.0207ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:20 PM: Optimal value: 4.513e-01
(CVXPY) Aug 30 12:18:20 PM: Compilation took 1.908e-02 seconds
(CVXPY) Aug 30 12:18:20 PM: Solver (including time spent in interface) took 6.453e-02 seconds
Iteration: 7, Objective: 0.4513
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:21 PM: Your problem has 2587 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:21 PM: Finished problem compilation (took 1.419e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2587
  constraints   = 5087
  nnz(P)        = 0
  nnz(A)        = 40051
  cones (total) = 1
    : Nonnegative = 1,  numel = 5087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5012e+03  2.50e+03  9.80e-01  8.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.8330e-01  +5.3557e+02  5.35e+02  4.18e-01  5.21e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3381e-01  +6.2490e+01  6.20e+01  1.58e-01  2.49e+01  1.49e-02  2.63e-01  9.11e-01  
  3  +5.0877e-01  +1.6071e+01  1.56e+01  1.05e-01  1.63e+01  3.98e-05  2.48e-01  2.47e-01  
  4  +5.0070e-01  +1.5065e+00  1.01e+00  9.83e-03  1.60e+00  7.19e-06  1.34e-01  7.65e-01  
  5  +5.0014e-01  +8.0309e-01  3.03e-01  2.90e-03  4.76e-01  6.58e-06  5.93e-02  6.58e-01  
  6  +4.9999e-01  +7.5089e-01  2.51e-01  2.20e-03  3.62e-01  1.42e-05  1.53e-02  8.30e-01  
  7  +4.9686e-01  +7.2297e-01  2.26e-01  2.64e-04  4.41e-02  2.07e-04  8.12e-04  9.52e-01  
  8  +4.9554e-01  +7.0506e-01  2.10e-01  2.02e-04  3.37e-02  1.92e-04  6.18e-04  3.74e-01  
  9  +4.9194e-01  +6.7324e-01  1.81e-01  1.30e-04  2.16e-02  1.75e-04  4.00e-04  5.03e-01  
 10  +4.8798e-01  +6.4696e-01  1.59e-01  9.89e-05  1.65e-02  1.40e-04  3.09e-04  3.45e-01  
 11  +4.8513e-01  +6.2793e-01  1.43e-01  8.32e-05  1.39e-02  9.61e-05  2.63e-04  3.37e-01  
 12  +4.7767e-01  +5.7885e-01  1.01e-01  5.62e-05  9.35e-03  9.74e-07  1.84e-04  8.63e-01  
 13  +4.6259e-01  +5.0576e-01  4.32e-02  2.03e-05  3.37e-03  1.38e-06  7.04e-05  7.32e-01  
 14  +4.5644e-01  +4.7811e-01  2.17e-02  9.62e-06  1.60e-03  8.06e-07  3.43e-05  5.54e-01  
 15  +4.5481e-01  +4.7093e-01  1.61e-02  6.93e-06  1.15e-03  9.60e-07  2.49e-05  5.23e-01  
 16  +4.5403e-01  +4.6724e-01  1.32e-02  5.59e-06  9.29e-04  1.14e-06  2.02e-05  6.68e-01  
 17  +4.5121e-01  +4.5543e-01  4.22e-03  1.76e-06  2.92e-04  3.99e-07  6.48e-06  8.24e-01  
 18  +4.5030e-01  +4.5169e-01  1.38e-03  5.71e-07  9.50e-05  1.35e-07  2.13e-06  7.46e-01  
 19  +4.5006e-01  +4.5076e-01  7.07e-04  2.80e-07  4.65e-05  7.25e-08  1.07e-06  7.78e-01  
 20  +4.4982e-01  +4.4987e-01  4.74e-05  1.83e-08  3.04e-06  4.97e-09  7.16e-08  9.42e-01  
 21  +4.4980e-01  +4.4980e-01  4.85e-07  1.86e-10  3.10e-08  5.09e-11  7.32e-10  9.90e-01  
 22  +4.4980e-01  +4.4980e-01  4.85e-09  1.86e-12  3.10e-10  5.09e-13  7.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.4733ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:21 PM: Optimal value: 4.498e-01
(CVXPY) Aug 30 12:18:21 PM: Compilation took 1.419e-02 seconds
(CVXPY) Aug 30 12:18:21 PM: Solver (including time spent in interface) took 7.322e-02 seconds
Iteration: 8, Objective: 0.4498
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:21 PM: Your problem has 2597 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:21 PM: Finished problem compilation (took 1.367e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2597
  constraints   = 5097
  nnz(P)        = 0
  nnz(A)        = 40721
  cones (total) = 1
    : Nonnegative = 1,  numel = 5097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5012e+03  2.50e+03  9.80e-01  8.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.8330e-01  +5.3557e+02  5.35e+02  4.19e-01  5.20e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3378e-01  +6.2467e+01  6.19e+01  1.58e-01  2.48e+01  1.49e-02  2.63e-01  9.11e-01  
  3  +5.0877e-01  +1.6062e+01  1.56e+01  1.05e-01  1.63e+01  3.98e-05  2.48e-01  2.48e-01  
  4  +5.0072e-01  +1.5434e+00  1.04e+00  1.02e-02  1.66e+00  7.28e-06  1.36e-01  7.49e-01  
  5  +5.0013e-01  +7.9814e-01  2.98e-01  2.85e-03  4.68e-01  6.54e-06  5.92e-02  6.71e-01  
  6  +4.9995e-01  +7.4108e-01  2.41e-01  2.08e-03  3.42e-01  1.53e-05  1.38e-02  8.40e-01  
  7  +4.9679e-01  +7.2091e-01  2.24e-01  2.85e-04  4.75e-02  1.96e-04  8.81e-04  9.41e-01  
  8  +4.9588e-01  +7.0186e-01  2.06e-01  2.10e-04  3.50e-02  1.55e-04  6.45e-04  5.23e-01  
  9  +4.9175e-01  +6.7069e-01  1.79e-01  1.23e-04  2.06e-02  1.59e-04  3.81e-04  5.61e-01  
 10  +4.8866e-01  +6.5168e-01  1.63e-01  1.01e-04  1.68e-02  1.27e-04  3.15e-04  3.10e-01  
 11  +4.8431e-01  +6.1968e-01  1.35e-01  8.41e-05  1.40e-02  2.37e-05  2.69e-04  6.72e-01  
 12  +4.6951e-01  +5.4752e-01  7.80e-02  3.79e-05  6.30e-03  1.19e-05  1.28e-04  6.57e-01  
 13  +4.5510e-01  +4.8076e-01  2.57e-02  1.14e-05  1.90e-03  2.94e-06  4.14e-05  7.28e-01  
 14  +4.5205e-01  +4.6832e-01  1.63e-02  6.85e-06  1.14e-03  1.86e-06  2.54e-05  5.34e-01  
 15  +4.5180e-01  +4.6719e-01  1.54e-02  6.47e-06  1.07e-03  1.70e-06  2.40e-05  3.06e-01  
 16  +4.4962e-01  +4.5870e-01  9.08e-03  3.65e-06  6.06e-04  9.54e-07  1.39e-05  9.64e-01  
 17  +4.4701e-01  +4.4842e-01  1.41e-03  5.56e-07  9.24e-05  1.48e-07  2.20e-06  9.06e-01  
 18  +4.4651e-01  +4.4655e-01  3.91e-05  1.53e-08  2.54e-06  4.04e-09  6.11e-08  9.90e-01  
 19  +4.4650e-01  +4.4650e-01  3.91e-07  1.53e-10  2.54e-08  4.04e-11  6.11e-10  9.90e-01  
 20  +4.4650e-01  +4.4650e-01  3.91e-09  1.53e-12  2.54e-10  4.09e-13  6.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.3078ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:21 PM: Optimal value: 4.465e-01
(CVXPY) Aug 30 12:18:21 PM: Compilation took 1.367e-02 seconds
(CVXPY) Aug 30 12:18:21 PM: Solver (including time spent in interface) took 6.699e-02 seconds
Iteration: 9, Objective: 0.4465
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:21 PM: Your problem has 2607 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:21 PM: Finished problem compilation (took 1.822e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2607
  constraints   = 5107
  nnz(P)        = 0
  nnz(A)        = 41421
  cones (total) = 1
    : Nonnegative = 1,  numel = 5107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.8304e-01  +5.3582e+02  5.35e+02  4.19e-01  5.20e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3362e-01  +6.2332e+01  6.18e+01  1.58e-01  2.47e+01  1.50e-02  2.63e-01  9.14e-01  
  3  +5.0874e-01  +1.6036e+01  1.55e+01  1.04e-01  1.62e+01  4.00e-05  2.47e-01  2.51e-01  
  4  +5.0073e-01  +1.5463e+00  1.05e+00  1.02e-02  1.66e+00  7.32e-06  1.35e-01  7.52e-01  
  5  +5.0016e-01  +8.4126e-01  3.41e-01  3.27e-03  5.37e-01  6.85e-06  6.22e-02  6.32e-01  
  6  +5.0009e-01  +8.5282e-01  3.53e-01  3.24e-03  5.31e-01  1.22e-05  2.72e-02  6.67e-01  
  7  +4.9856e-01  +8.0705e-01  3.08e-01  6.60e-04  1.10e-01  9.93e-05  2.12e-03  9.90e-01  
  8  +4.9396e-01  +7.4584e-01  2.52e-01  2.16e-04  3.61e-02  2.19e-04  6.74e-04  6.94e-01  
  9  +4.9289e-01  +7.2870e-01  2.36e-01  1.75e-04  2.92e-02  1.69e-04  5.38e-04  4.10e-01  
 10  +4.9073e-01  +6.9792e-01  2.07e-01  1.39e-04  2.32e-02  1.00e-04  4.28e-04  4.85e-01  
 11  +4.8863e-01  +6.8008e-01  1.91e-01  1.17e-04  1.95e-02  7.27e-05  3.63e-04  3.67e-01  
 12  +4.8351e-01  +6.3467e-01  1.51e-01  9.40e-05  1.56e-02  9.36e-06  3.00e-04  7.63e-01  
 13  +4.6880e-01  +5.6220e-01  9.34e-02  4.44e-05  7.38e-03  6.68e-06  1.48e-04  5.48e-01  
 14  +4.6327e-01  +5.3594e-01  7.27e-02  3.33e-05  5.53e-03  5.59e-06  1.14e-04  4.96e-01  
 15  +4.5360e-01  +4.9226e-01  3.87e-02  1.68e-05  2.78e-03  2.86e-06  6.02e-05  5.07e-01  
 16  +4.4556e-01  +4.5683e-01  1.13e-02  4.68e-06  7.76e-04  8.71e-07  1.76e-05  7.82e-01  
 17  +4.4514e-01  +4.5475e-01  9.61e-03  3.89e-06  6.45e-04  8.84e-07  1.46e-05  5.69e-01  
 18  +4.4365e-01  +4.4853e-01  4.88e-03  1.94e-06  3.22e-04  5.28e-07  7.39e-06  9.90e-01  
 19  +4.4266e-01  +4.4498e-01  2.31e-03  8.91e-07  1.48e-04  2.53e-07  3.44e-06  6.14e-01  
 20  +4.4197e-01  +4.4239e-01  4.23e-04  1.62e-07  2.68e-05  4.55e-08  6.30e-07  9.90e-01  
 21  +4.4180e-01  +4.4181e-01  4.76e-06  1.81e-09  3.00e-07  5.08e-10  7.08e-09  9.89e-01  
 22  +4.4180e-01  +4.4180e-01  4.76e-08  1.81e-11  3.00e-09  5.08e-12  7.08e-11  9.90e-01  
 23  +4.4180e-01  +4.4180e-01  4.76e-10  1.81e-13  3.00e-11  5.20e-14  7.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.5967ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:21 PM: Optimal value: 4.418e-01
(CVXPY) Aug 30 12:18:21 PM: Compilation took 1.822e-02 seconds
(CVXPY) Aug 30 12:18:21 PM: Solver (including time spent in interface) took 6.683e-02 seconds
Iteration: 10, Objective: 0.4418
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:21 PM: Your problem has 2617 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:21 PM: Finished problem compilation (took 1.475e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2617
  constraints   = 5117
  nnz(P)        = 0
  nnz(A)        = 42343
  cones (total) = 1
    : Nonnegative = 1,  numel = 5117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.8289e-01  +5.3597e+02  5.35e+02  4.20e-01  5.20e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3347e-01  +6.2187e+01  6.17e+01  1.57e-01  2.46e+01  1.50e-02  2.63e-01  9.15e-01  
  3  +5.0871e-01  +1.6004e+01  1.55e+01  1.04e-01  1.62e+01  4.02e-05  2.47e-01  2.54e-01  
  4  +5.0075e-01  +1.5843e+00  1.08e+00  1.06e-02  1.72e+00  7.43e-06  1.36e-01  7.39e-01  
  5  +5.0017e-01  +8.5922e-01  3.59e-01  3.45e-03  5.66e-01  7.10e-06  6.30e-02  6.39e-01  
  6  +5.0005e-01  +8.7581e-01  3.76e-01  3.33e-03  5.48e-01  1.44e-05  2.31e-02  7.62e-01  
  7  +4.9740e-01  +7.7657e-01  2.79e-01  3.96e-04  6.61e-02  1.53e-04  1.22e-03  9.90e-01  
  8  +4.9316e-01  +7.2370e-01  2.31e-01  2.04e-04  3.40e-02  1.84e-04  6.27e-04  5.58e-01  
  9  +4.9253e-01  +7.1652e-01  2.24e-01  1.60e-04  2.68e-02  1.41e-04  4.89e-04  5.14e-01  
 10  +4.9099e-01  +7.0131e-01  2.10e-01  1.44e-04  2.41e-02  1.09e-04  4.41e-04  2.67e-01  
 11  +4.8383e-01  +6.5375e-01  1.70e-01  9.44e-05  1.57e-02  5.64e-05  2.96e-04  6.46e-01  
 12  +4.6893e-01  +5.7127e-01  1.02e-01  5.10e-05  8.48e-03  2.25e-05  1.71e-04  5.64e-01  
 13  +4.5313e-01  +4.9390e-01  4.08e-02  1.86e-05  3.09e-03  6.79e-06  6.69e-05  6.55e-01  
 14  +4.4885e-01  +4.7463e-01  2.58e-02  1.12e-05  1.86e-03  3.72e-06  4.11e-05  6.05e-01  
 15  +4.4393e-01  +4.5399e-01  1.01e-02  4.06e-06  6.73e-04  1.32e-06  1.54e-05  8.18e-01  
 16  +4.4240e-01  +4.4829e-01  5.90e-03  2.30e-06  3.82e-04  7.61e-07  8.87e-06  4.87e-01  
 17  +4.4052e-01  +4.4111e-01  5.89e-04  2.27e-07  3.76e-05  6.86e-08  8.90e-07  9.45e-01  
 18  +4.4031e-01  +4.4034e-01  2.64e-05  1.01e-08  1.68e-06  2.89e-09  3.99e-08  9.86e-01  
 19  +4.4030e-01  +4.4030e-01  2.65e-07  1.01e-10  1.68e-08  2.90e-11  4.00e-10  9.90e-01  
 20  +4.4030e-01  +4.4030e-01  2.65e-09  1.01e-12  1.68e-10  2.92e-13  4.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 61.5397ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:21 PM: Optimal value: 4.403e-01
(CVXPY) Aug 30 12:18:21 PM: Compilation took 1.475e-02 seconds
(CVXPY) Aug 30 12:18:21 PM: Solver (including time spent in interface) took 6.558e-02 seconds
Iteration: 11, Objective: 0.4403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:21 PM: Your problem has 2627 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:21 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:21 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:21 PM: Finished problem compilation (took 1.646e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2627
  constraints   = 5127
  nnz(P)        = 0
  nnz(A)        = 42777
  cones (total) = 1
    : Nonnegative = 1,  numel = 5127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.8271e-01  +5.3616e+02  5.36e+02  4.21e-01  5.19e+01  3.81e-03  5.63e-01  5.96e-01  
  2  +5.3343e-01  +6.2199e+01  6.17e+01  1.58e-01  2.45e+01  1.51e-02  2.63e-01  9.16e-01  
  3  +5.0870e-01  +1.6006e+01  1.55e+01  1.04e-01  1.61e+01  4.03e-05  2.46e-01  2.56e-01  
  4  +5.0074e-01  +1.5736e+00  1.07e+00  1.05e-02  1.71e+00  7.42e-06  1.35e-01  7.45e-01  
  5  +5.0020e-01  +8.9599e-01  3.96e-01  3.81e-03  6.24e-01  7.28e-06  6.67e-02  6.04e-01  
  6  +5.0007e-01  +8.6628e-01  3.66e-01  3.29e-03  5.40e-01  1.35e-05  2.38e-02  7.43e-01  
  7  +4.9793e-01  +8.0300e-01  3.05e-01  5.00e-04  8.34e-02  1.30e-04  1.55e-03  9.90e-01  
  8  +4.9444e-01  +7.5593e-01  2.61e-01  2.57e-04  4.28e-02  1.77e-04  7.88e-04  5.36e-01  
  9  +4.9282e-01  +7.3699e-01  2.44e-01  1.90e-04  3.17e-02  1.55e-04  5.79e-04  4.54e-01  
 10  +4.9046e-01  +7.1197e-01  2.22e-01  1.46e-04  2.43e-02  1.16e-04  4.47e-04  4.55e-01  
 11  +4.8851e-01  +6.9397e-01  2.05e-01  1.37e-04  2.29e-02  8.33e-05  4.27e-04  2.11e-01  
 12  +4.7730e-01  +6.2243e-01  1.45e-01  7.79e-05  1.29e-02  3.72e-05  2.51e-04  6.82e-01  
 13  +4.7409e-01  +6.0316e-01  1.29e-01  6.93e-05  1.15e-02  2.06e-05  2.28e-04  4.48e-01  
 14  +4.5769e-01  +5.2168e-01  6.40e-02  3.03e-05  5.03e-03  8.15e-06  1.07e-04  5.98e-01  
 15  +4.4845e-01  +4.7953e-01  3.11e-02  1.38e-05  2.29e-03  3.51e-06  5.10e-05  6.57e-01  
 16  +4.4567e-01  +4.6740e-01  2.17e-02  9.44e-06  1.56e-03  2.40e-06  3.55e-05  4.17e-01  
 17  +4.4218e-01  +4.5230e-01  1.01e-02  4.21e-06  6.97e-04  1.04e-06  1.62e-05  9.90e-01  
 18  +4.3933e-01  +4.4090e-01  1.57e-03  6.44e-07  1.07e-04  1.59e-07  2.56e-06  8.54e-01  
 19  +4.3883e-01  +4.3892e-01  8.87e-05  3.64e-08  6.03e-06  8.80e-09  1.45e-07  9.90e-01  
 20  +4.3880e-01  +4.3880e-01  9.25e-07  3.80e-10  6.28e-08  9.18e-11  1.52e-09  9.90e-01  
 21  +4.3880e-01  +4.3880e-01  9.25e-09  3.80e-12  6.28e-10  9.22e-13  1.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.1529ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:21 PM: Optimal value: 4.388e-01
(CVXPY) Aug 30 12:18:21 PM: Compilation took 1.646e-02 seconds
(CVXPY) Aug 30 12:18:21 PM: Solver (including time spent in interface) took 6.715e-02 seconds
Iteration: 12, Objective: 0.4388
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:22 PM: Your problem has 2637 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:22 PM: Finished problem compilation (took 2.015e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2637
  constraints   = 5137
  nnz(P)        = 0
  nnz(A)        = 43232
  cones (total) = 1
    : Nonnegative = 1,  numel = 5137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.21e+01  1.00e+00  1.00e+00   ------   
  1  +5.8271e-01  +5.3606e+02  5.35e+02  4.21e-01  5.18e+01  3.81e-03  5.63e-01  5.96e-01  
  2  +5.3342e-01  +6.2180e+01  6.16e+01  1.58e-01  2.44e+01  1.50e-02  2.63e-01  9.16e-01  
  3  +5.0869e-01  +1.5985e+01  1.55e+01  1.04e-01  1.61e+01  4.03e-05  2.46e-01  2.57e-01  
  4  +5.0075e-01  +1.5869e+00  1.09e+00  1.07e-02  1.73e+00  7.46e-06  1.36e-01  7.39e-01  
  5  +5.0021e-01  +9.1588e-01  4.16e-01  4.01e-03  6.56e-01  7.34e-06  6.89e-02  5.89e-01  
  6  +5.0007e-01  +8.7677e-01  3.77e-01  3.37e-03  5.53e-01  1.37e-05  2.36e-02  7.60e-01  
  7  +4.9756e-01  +8.0397e-01  3.06e-01  4.48e-04  7.47e-02  1.45e-04  1.38e-03  9.90e-01  
  8  +4.9442e-01  +7.6207e-01  2.68e-01  2.69e-04  4.48e-02  1.70e-04  8.27e-04  4.52e-01  
  9  +4.9185e-01  +7.3675e-01  2.45e-01  1.88e-04  3.13e-02  1.58e-04  5.78e-04  4.53e-01  
 10  +4.8981e-01  +7.0396e-01  2.14e-01  1.43e-04  2.38e-02  7.54e-05  4.39e-04  6.36e-01  
 11  +4.8831e-01  +6.9109e-01  2.03e-01  1.38e-04  2.30e-02  5.72e-05  4.29e-04  1.78e-01  
 12  +4.8333e-01  +6.6174e-01  1.78e-01  1.08e-04  1.80e-02  4.53e-05  3.42e-04  3.32e-01  
 13  +4.6500e-01  +5.5771e-01  9.27e-02  4.53e-05  7.51e-03  2.17e-06  1.54e-04  9.90e-01  
 14  +4.5049e-01  +4.9058e-01  4.01e-02  1.82e-05  3.01e-03  1.11e-06  6.66e-05  6.13e-01  
 15  +4.4671e-01  +4.7410e-01  2.74e-02  1.21e-05  1.99e-03  1.18e-06  4.50e-05  4.75e-01  
 16  +4.4494e-01  +4.6644e-01  2.15e-02  9.21e-06  1.52e-03  1.36e-06  3.48e-05  5.04e-01  
 17  +4.4379e-01  +4.6118e-01  1.74e-02  7.37e-06  1.22e-03  1.50e-06  2.81e-05  6.85e-01  
 18  +4.4002e-01  +4.4583e-01  5.81e-03  2.42e-06  4.00e-04  5.10e-07  9.55e-06  7.05e-01  
 19  +4.3869e-01  +4.4041e-01  1.72e-03  7.12e-07  1.18e-04  1.63e-07  2.86e-06  8.94e-01  
 20  +4.3815e-01  +4.3829e-01  1.40e-04  5.80e-08  9.58e-06  1.35e-08  2.35e-07  9.90e-01  
 21  +4.3810e-01  +4.3810e-01  1.44e-06  5.97e-10  9.87e-08  1.39e-10  2.42e-09  9.90e-01  
 22  +4.3810e-01  +4.3810e-01  1.45e-08  5.99e-12  9.90e-10  1.39e-12  2.43e-11  9.90e-01  
 23  +4.3810e-01  +4.3810e-01  1.46e-10  6.02e-14  9.96e-12  1.40e-14  2.45e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.0336ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:22 PM: Optimal value: 4.381e-01
(CVXPY) Aug 30 12:18:22 PM: Compilation took 2.015e-02 seconds
(CVXPY) Aug 30 12:18:22 PM: Solver (including time spent in interface) took 7.399e-02 seconds
Iteration: 13, Objective: 0.4381
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:22 PM: Your problem has 2647 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:22 PM: Finished problem compilation (took 1.667e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2647
  constraints   = 5147
  nnz(P)        = 0
  nnz(A)        = 43648
  cones (total) = 1
    : Nonnegative = 1,  numel = 5147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.21e+01  1.00e+00  1.00e+00   ------   
  1  +5.8257e-01  +5.3618e+02  5.36e+02  4.21e-01  5.18e+01  3.81e-03  5.64e-01  5.96e-01  
  2  +5.3332e-01  +6.2080e+01  6.15e+01  1.57e-01  2.44e+01  1.51e-02  2.62e-01  9.18e-01  
  3  +5.0867e-01  +1.5967e+01  1.55e+01  1.04e-01  1.61e+01  4.04e-05  2.46e-01  2.59e-01  
  4  +5.0077e-01  +1.6320e+00  1.13e+00  1.11e-02  1.80e+00  7.58e-06  1.37e-01  7.24e-01  
  5  +5.0022e-01  +9.3863e-01  4.38e-01  4.23e-03  6.92e-01  7.42e-06  7.11e-02  5.78e-01  
  6  +5.0005e-01  +9.4453e-01  4.44e-01  3.69e-03  6.06e-01  1.69e-05  2.04e-02  9.01e-01  
  7  +4.9706e-01  +8.3610e-01  3.39e-01  4.37e-04  7.29e-02  1.58e-04  1.33e-03  9.41e-01  
  8  +4.9484e-01  +7.9750e-01  3.03e-01  3.17e-04  5.28e-02  1.52e-04  9.66e-04  3.53e-01  
  9  +4.9244e-01  +7.5941e-01  2.67e-01  2.17e-04  3.61e-02  1.26e-04  6.61e-04  5.08e-01  
 10  +4.9146e-01  +7.3197e-01  2.41e-01  1.74e-04  2.90e-02  7.39e-05  5.33e-04  5.23e-01  
 11  +4.8909e-01  +7.0916e-01  2.20e-01  1.48e-04  2.46e-02  5.50e-05  4.54e-04  3.56e-01  
 12  +4.8267e-01  +6.5549e-01  1.73e-01  1.08e-04  1.79e-02  1.32e-05  3.41e-04  7.97e-01  
 13  +4.6452e-01  +5.6052e-01  9.60e-02  4.73e-05  7.84e-03  7.08e-06  1.60e-04  7.34e-01  
 14  +4.5104e-01  +4.9691e-01  4.59e-02  2.12e-05  3.51e-03  3.09e-06  7.70e-05  5.79e-01  
 15  +4.4834e-01  +4.8478e-01  3.64e-02  1.65e-05  2.73e-03  2.56e-06  6.10e-05  2.94e-01  
 16  +4.4280e-01  +4.5892e-01  1.61e-02  7.01e-06  1.16e-03  1.56e-06  2.67e-05  9.90e-01  
 17  +4.3975e-01  +4.4573e-01  5.98e-03  2.59e-06  4.28e-04  5.86e-07  1.01e-05  7.63e-01  
 18  +4.3866e-01  +4.4122e-01  2.56e-03  1.09e-06  1.81e-04  2.53e-07  4.33e-06  7.31e-01  
 19  +4.3792e-01  +4.3828e-01  3.54e-04  1.48e-07  2.45e-05  3.54e-08  5.96e-07  9.00e-01  
 20  +4.3781e-01  +4.3784e-01  3.03e-05  1.27e-08  2.09e-06  3.02e-09  5.10e-08  9.17e-01  
 21  +4.3780e-01  +4.3780e-01  4.60e-07  1.92e-10  3.18e-08  4.54e-11  7.74e-10  9.89e-01  
 22  +4.3780e-01  +4.3780e-01  4.60e-09  1.92e-12  3.18e-10  4.54e-13  7.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 65.5561ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:22 PM: Optimal value: 4.378e-01
(CVXPY) Aug 30 12:18:22 PM: Compilation took 1.667e-02 seconds
(CVXPY) Aug 30 12:18:22 PM: Solver (including time spent in interface) took 7.106e-02 seconds
Iteration: 14, Objective: 0.4378
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:22 PM: Your problem has 2657 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:22 PM: Finished problem compilation (took 2.135e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2657
  constraints   = 5157
  nnz(P)        = 0
  nnz(A)        = 43957
  cones (total) = 1
    : Nonnegative = 1,  numel = 5157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.20e+01  1.00e+00  1.00e+00   ------   
  1  +5.8241e-01  +5.3626e+02  5.36e+02  4.21e-01  5.17e+01  3.81e-03  5.64e-01  5.96e-01  
  2  +5.3319e-01  +6.1949e+01  6.14e+01  1.57e-01  2.43e+01  1.51e-02  2.62e-01  9.19e-01  
  3  +5.0865e-01  +1.5942e+01  1.54e+01  1.04e-01  1.60e+01  4.05e-05  2.45e-01  2.61e-01  
  4  +5.0079e-01  +1.6512e+00  1.15e+00  1.13e-02  1.83e+00  7.65e-06  1.37e-01  7.19e-01  
  5  +5.0024e-01  +9.8299e-01  4.83e-01  4.67e-03  7.62e-01  7.68e-06  7.44e-02  5.53e-01  
  6  +5.0007e-01  +9.4134e-01  4.41e-01  3.81e-03  6.24e-01  1.54e-05  2.29e-02  8.36e-01  
  7  +4.9745e-01  +8.6071e-01  3.63e-01  5.54e-04  9.24e-02  1.38e-04  1.70e-03  9.33e-01  
  8  +4.9444e-01  +7.9903e-01  3.05e-01  3.22e-04  5.36e-02  1.41e-04  9.85e-04  5.37e-01  
  9  +4.9150e-01  +7.4716e-01  2.56e-01  1.99e-04  3.31e-02  8.94e-05  6.07e-04  7.06e-01  
 10  +4.8931e-01  +7.2375e-01  2.34e-01  1.64e-04  2.73e-02  6.62e-05  5.03e-04  3.95e-01  
 11  +4.8790e-01  +7.1098e-01  2.23e-01  1.60e-04  2.67e-02  5.22e-05  4.96e-04  1.49e-01  
 12  +4.8115e-01  +6.7082e-01  1.90e-01  1.15e-04  1.90e-02  4.64e-05  3.63e-04  3.12e-01  
 13  +4.6723e-01  +5.8698e-01  1.20e-01  6.36e-05  1.05e-02  8.96e-06  2.14e-04  8.25e-01  
 14  +4.5068e-01  +5.0505e-01  5.44e-02  2.58e-05  4.26e-03  3.67e-06  9.35e-05  6.71e-01  
 15  +4.4702e-01  +4.8813e-01  4.11e-02  1.89e-05  3.12e-03  2.99e-06  6.99e-05  4.06e-01  
 16  +4.4029e-01  +4.5685e-01  1.66e-02  7.30e-06  1.20e-03  1.40e-06  2.80e-05  8.18e-01  
 17  +4.3789e-01  +4.4614e-01  8.25e-03  3.56e-06  5.88e-04  7.91e-07  1.39e-05  9.16e-01  
 18  +4.3590e-01  +4.3780e-01  1.90e-03  8.17e-07  1.35e-04  1.84e-07  3.24e-06  9.67e-01  
 19  +4.3564e-01  +4.3679e-01  1.15e-03  4.85e-07  8.01e-05  1.11e-07  1.95e-06  6.65e-01  
 20  +4.3553e-01  +4.3633e-01  8.02e-04  3.39e-07  5.59e-05  7.69e-08  1.36e-06  5.57e-01  
 21  +4.3526e-01  +4.3530e-01  3.48e-05  1.46e-08  2.41e-06  3.36e-09  5.91e-08  9.60e-01  
 22  +4.3525e-01  +4.3525e-01  3.53e-07  1.48e-10  2.44e-08  3.41e-11  6.00e-10  9.90e-01  
 23  +4.3525e-01  +4.3525e-01  3.53e-09  1.48e-12  2.44e-10  3.41e-13  6.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.4972ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:22 PM: Optimal value: 4.353e-01
(CVXPY) Aug 30 12:18:22 PM: Compilation took 2.135e-02 seconds
(CVXPY) Aug 30 12:18:22 PM: Solver (including time spent in interface) took 7.656e-02 seconds
Iteration: 15, Objective: 0.4353
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:22 PM: Your problem has 2667 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:22 PM: Finished problem compilation (took 1.751e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2667
  constraints   = 5167
  nnz(P)        = 0
  nnz(A)        = 44409
  cones (total) = 1
    : Nonnegative = 1,  numel = 5167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.20e+01  1.00e+00  1.00e+00   ------   
  1  +5.8228e-01  +5.3634e+02  5.36e+02  4.22e-01  5.16e+01  3.82e-03  5.64e-01  5.96e-01  
  2  +5.3310e-01  +6.1860e+01  6.13e+01  1.57e-01  2.42e+01  1.51e-02  2.61e-01  9.20e-01  
  3  +5.0863e-01  +1.5924e+01  1.54e+01  1.04e-01  1.60e+01  4.06e-05  2.45e-01  2.63e-01  
  4  +5.0079e-01  +1.6534e+00  1.15e+00  1.14e-02  1.83e+00  7.67e-06  1.37e-01  7.20e-01  
  5  +5.0025e-01  +9.9204e-01  4.92e-01  4.76e-03  7.76e-01  7.87e-06  7.35e-02  5.59e-01  
  6  +4.9999e-01  +9.1872e-01  4.19e-01  3.41e-03  5.59e-01  1.82e-05  1.78e-02  8.89e-01  
  7  +4.9671e-01  +8.5539e-01  3.59e-01  4.56e-04  7.60e-02  1.70e-04  1.38e-03  9.31e-01  
  8  +4.9393e-01  +8.0880e-01  3.15e-01  3.08e-04  5.13e-02  1.63e-04  9.31e-04  4.31e-01  
  9  +4.8820e-01  +7.4391e-01  2.56e-01  1.74e-04  2.90e-02  1.42e-04  5.35e-04  5.78e-01  
 10  +4.8776e-01  +7.3035e-01  2.43e-01  1.66e-04  2.76e-02  1.00e-04  5.08e-04  2.66e-01  
 11  +4.8602e-01  +7.0724e-01  2.21e-01  1.57e-04  2.60e-02  5.29e-05  4.86e-04  3.69e-01  
 12  +4.7875e-01  +6.6536e-01  1.87e-01  1.11e-04  1.83e-02  4.44e-05  3.51e-04  3.61e-01  
 13  +4.6294e-01  +5.7504e-01  1.12e-01  5.67e-05  9.38e-03  1.24e-05  1.92e-04  7.63e-01  
 14  +4.4607e-01  +4.9136e-01  4.53e-02  2.07e-05  3.41e-03  3.06e-06  7.59e-05  9.90e-01  
 15  +4.4003e-01  +4.6597e-01  2.59e-02  1.12e-05  1.86e-03  1.91e-06  4.33e-05  5.64e-01  
 16  +4.3848e-01  +4.5900e-01  2.05e-02  8.78e-06  1.45e-03  1.74e-06  3.43e-05  5.63e-01  
 17  +4.3296e-01  +4.3643e-01  3.48e-03  1.45e-06  2.39e-04  2.90e-07  5.99e-06  8.58e-01  
 18  +4.3183e-01  +4.3192e-01  9.20e-05  3.81e-08  6.28e-06  7.72e-09  1.60e-07  9.80e-01  
 19  +4.3180e-01  +4.3180e-01  9.21e-07  3.81e-10  6.29e-08  7.73e-11  1.60e-09  9.90e-01  
 20  +4.3180e-01  +4.3180e-01  9.24e-09  3.82e-12  6.31e-10  7.78e-13  1.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 58.4404ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:22 PM: Optimal value: 4.318e-01
(CVXPY) Aug 30 12:18:22 PM: Compilation took 1.751e-02 seconds
(CVXPY) Aug 30 12:18:22 PM: Solver (including time spent in interface) took 6.263e-02 seconds
Iteration: 16, Objective: 0.4318
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:22 PM: Your problem has 2677 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:22 PM: Finished problem compilation (took 1.797e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2677
  constraints   = 5177
  nnz(P)        = 0
  nnz(A)        = 44814
  cones (total) = 1
    : Nonnegative = 1,  numel = 5177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.19e+01  1.00e+00  1.00e+00   ------   
  1  +5.8211e-01  +5.3622e+02  5.36e+02  4.22e-01  5.15e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3301e-01  +6.1758e+01  6.12e+01  1.57e-01  2.40e+01  1.51e-02  2.61e-01  9.21e-01  
  3  +5.0861e-01  +1.5896e+01  1.54e+01  1.04e-01  1.59e+01  4.07e-05  2.44e-01  2.65e-01  
  4  +5.0078e-01  +1.6376e+00  1.14e+00  1.12e-02  1.81e+00  7.68e-06  1.35e-01  7.28e-01  
  5  +5.0022e-01  +9.5750e-01  4.57e-01  4.43e-03  7.22e-01  8.09e-06  6.58e-02  6.06e-01  
  6  +4.9982e-01  +9.9375e-01  4.94e-01  3.16e-03  5.20e-01  3.12e-05  1.26e-02  9.24e-01  
  7  +4.9496e-01  +8.9222e-01  3.97e-01  3.77e-04  6.28e-02  2.41e-04  1.13e-03  9.16e-01  
  8  +4.9288e-01  +8.4587e-01  3.53e-01  2.82e-04  4.69e-02  1.75e-04  8.41e-04  4.63e-01  
  9  +4.8831e-01  +7.9023e-01  3.02e-01  1.87e-04  3.12e-02  1.47e-04  5.67e-04  4.77e-01  
 10  +4.8348e-01  +7.2175e-01  2.38e-01  1.56e-04  2.59e-02  4.64e-05  4.84e-04  5.17e-01  
 11  +4.7713e-01  +6.7718e-01  2.00e-01  1.20e-04  1.99e-02  3.35e-05  3.83e-04  3.47e-01  
 12  +4.6673e-01  +6.1374e-01  1.47e-01  7.96e-05  1.32e-02  1.87e-05  2.65e-04  5.15e-01  
 13  +4.5297e-01  +5.3956e-01  8.66e-02  4.26e-05  7.04e-03  9.54e-06  1.51e-04  5.15e-01  
 14  +4.4313e-01  +4.9030e-01  4.72e-02  2.17e-05  3.58e-03  4.81e-06  8.08e-05  5.87e-01  
 15  +4.3975e-01  +4.7404e-01  3.43e-02  1.52e-05  2.51e-03  3.43e-06  5.81e-05  5.16e-01  
 16  +4.3618e-01  +4.5725e-01  2.11e-02  9.12e-06  1.50e-03  2.07e-06  3.59e-05  7.54e-01  
 17  +4.3218e-01  +4.4028e-01  8.10e-03  3.44e-06  5.68e-04  7.81e-07  1.42e-05  6.91e-01  
 18  +4.3004e-01  +4.3132e-01  1.28e-03  5.37e-07  8.86e-05  1.20e-07  2.28e-06  9.90e-01  
 19  +4.2961e-01  +4.2962e-01  1.51e-05  6.33e-09  1.04e-06  1.40e-09  2.70e-08  9.88e-01  
 20  +4.2960e-01  +4.2960e-01  1.51e-07  6.34e-11  1.04e-08  1.40e-11  2.70e-10  9.90e-01  
 21  +4.2960e-01  +4.2960e-01  1.65e-09  6.91e-13  1.14e-10  1.53e-13  2.96e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.9199ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:22 PM: Optimal value: 4.296e-01
(CVXPY) Aug 30 12:18:22 PM: Compilation took 1.797e-02 seconds
(CVXPY) Aug 30 12:18:22 PM: Solver (including time spent in interface) took 6.658e-02 seconds
Iteration: 17, Objective: 0.4296
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:23 PM: Your problem has 2687 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:23 PM: Finished problem compilation (took 1.702e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2687
  constraints   = 5187
  nnz(P)        = 0
  nnz(A)        = 45232
  cones (total) = 1
    : Nonnegative = 1,  numel = 5187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.18e+01  1.00e+00  1.00e+00   ------   
  1  +5.8208e-01  +5.3625e+02  5.36e+02  4.22e-01  5.15e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3293e-01  +6.1665e+01  6.11e+01  1.56e-01  2.40e+01  1.51e-02  2.61e-01  9.22e-01  
  3  +5.0859e-01  +1.5875e+01  1.54e+01  1.04e-01  1.59e+01  4.07e-05  2.43e-01  2.67e-01  
  4  +5.0076e-01  +1.6006e+00  1.10e+00  1.09e-02  1.75e+00  7.60e-06  1.32e-01  7.43e-01  
  5  +5.0024e-01  +9.8119e-01  4.81e-01  4.66e-03  7.59e-01  8.47e-06  6.55e-02  5.98e-01  
  6  +4.9972e-01  +9.7671e-01  4.77e-01  2.68e-03  4.42e-01  3.77e-05  9.93e-03  9.46e-01  
  7  +4.9481e-01  +8.8882e-01  3.94e-01  3.64e-04  6.07e-02  2.51e-04  1.09e-03  8.92e-01  
  8  +4.9261e-01  +8.5612e-01  3.64e-01  2.89e-04  4.82e-02  2.16e-04  8.65e-04  3.32e-01  
  9  +4.9053e-01  +8.1216e-01  3.22e-01  2.13e-04  3.54e-02  1.39e-04  6.39e-04  5.42e-01  
 10  +4.8672e-01  +7.6068e-01  2.74e-01  1.76e-04  2.93e-02  8.02e-05  5.37e-04  4.01e-01  
 11  +4.7623e-01  +6.6597e-01  1.90e-01  1.14e-04  1.88e-02  1.45e-05  3.64e-04  7.78e-01  
 12  +4.6644e-01  +6.1141e-01  1.45e-01  7.86e-05  1.30e-02  1.04e-05  2.63e-04  5.11e-01  
 13  +4.5582e-01  +5.5571e-01  9.99e-02  5.02e-05  8.28e-03  7.01e-06  1.75e-04  4.68e-01  
 14  +4.4636e-01  +5.0873e-01  6.24e-02  2.94e-05  4.84e-03  4.48e-06  1.07e-04  5.26e-01  
 15  +4.4048e-01  +4.8071e-01  4.02e-02  1.82e-05  3.00e-03  3.09e-06  6.79e-05  5.27e-01  
 16  +4.3438e-01  +4.5271e-01  1.83e-02  8.03e-06  1.32e-03  1.47e-06  3.11e-05  6.46e-01  
 17  +4.3089e-01  +4.3745e-01  6.56e-03  2.81e-06  4.62e-04  5.44e-07  1.13e-05  7.30e-01  
 18  +4.2962e-01  +4.3199e-01  2.37e-03  9.97e-07  1.64e-04  2.22e-07  4.15e-06  9.90e-01  
 19  +4.2882e-01  +4.2889e-01  6.85e-05  2.86e-08  4.72e-06  6.21e-09  1.22e-07  9.73e-01  
 20  +4.2880e-01  +4.2880e-01  6.85e-07  2.86e-10  4.72e-08  6.21e-11  1.22e-09  9.90e-01  
 21  +4.2880e-01  +4.2880e-01  6.85e-09  2.86e-12  4.72e-10  6.21e-13  1.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.9233ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:23 PM: Optimal value: 4.288e-01
(CVXPY) Aug 30 12:18:23 PM: Compilation took 1.702e-02 seconds
(CVXPY) Aug 30 12:18:23 PM: Solver (including time spent in interface) took 6.856e-02 seconds
Iteration: 18, Objective: 0.4288
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:23 PM: Your problem has 2697 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:23 PM: Finished problem compilation (took 1.842e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2697
  constraints   = 5197
  nnz(P)        = 0
  nnz(A)        = 45776
  cones (total) = 1
    : Nonnegative = 1,  numel = 5197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.18e+01  1.00e+00  1.00e+00   ------   
  1  +5.8196e-01  +5.3635e+02  5.36e+02  4.22e-01  5.14e+01  3.82e-03  5.64e-01  5.96e-01  
  2  +5.3285e-01  +6.1598e+01  6.11e+01  1.56e-01  2.39e+01  1.52e-02  2.60e-01  9.23e-01  
  3  +5.0858e-01  +1.5857e+01  1.53e+01  1.04e-01  1.58e+01  4.08e-05  2.43e-01  2.69e-01  
  4  +5.0075e-01  +1.5956e+00  1.09e+00  1.08e-02  1.74e+00  7.61e-06  1.31e-01  7.47e-01  
  5  +5.0027e-01  +1.0115e+00  5.11e-01  4.97e-03  8.07e-01  8.53e-06  6.74e-02  5.70e-01  
  6  +4.9991e-01  +9.5920e-01  4.59e-01  3.21e-03  5.27e-01  2.68e-05  1.35e-02  8.78e-01  
  7  +4.9573e-01  +8.8781e-01  3.92e-01  4.04e-04  6.73e-02  2.24e-04  1.21e-03  9.14e-01  
  8  +4.9250e-01  +8.4153e-01  3.49e-01  2.86e-04  4.76e-02  2.05e-04  8.54e-04  4.03e-01  
  9  +4.9099e-01  +8.0181e-01  3.11e-01  2.25e-04  3.75e-02  1.12e-04  6.78e-04  5.45e-01  
 10  +4.8487e-01  +7.3685e-01  2.52e-01  1.63e-04  2.70e-02  6.26e-05  5.00e-04  5.29e-01  
 11  +4.6976e-01  +6.3212e-01  1.62e-01  8.92e-05  1.48e-02  2.47e-05  2.92e-04  6.48e-01  
 12  +4.6755e-01  +6.1911e-01  1.52e-01  8.31e-05  1.37e-02  2.00e-05  2.76e-04  2.30e-01  
 13  +4.6740e-01  +6.1923e-01  1.52e-01  8.25e-05  1.36e-02  1.93e-05  2.73e-04  1.00e-01  
 14  +4.5741e-01  +5.6709e-01  1.10e-01  5.54e-05  9.14e-03  1.31e-05  1.91e-04  3.55e-01  
 15  +4.5166e-01  +5.3829e-01  8.66e-02  4.21e-05  6.94e-03  9.95e-06  1.49e-04  2.83e-01  
 16  +4.4357e-01  +4.9756e-01  5.40e-02  2.46e-05  4.05e-03  5.46e-06  8.95e-05  7.06e-01  
 17  +4.3642e-01  +4.6409e-01  2.77e-02  1.20e-05  1.98e-03  2.73e-06  4.55e-05  7.51e-01  
 18  +4.3111e-01  +4.4083e-01  9.72e-03  4.12e-06  6.79e-04  9.55e-07  1.62e-05  7.88e-01  
 19  +4.2908e-01  +4.3220e-01  3.12e-03  1.31e-06  2.15e-04  3.06e-07  5.25e-06  9.90e-01  
 20  +4.2803e-01  +4.2812e-01  8.76e-05  3.66e-08  6.02e-06  8.44e-09  1.49e-07  9.78e-01  
 21  +4.2800e-01  +4.2800e-01  8.78e-07  3.67e-10  6.03e-08  8.46e-11  1.49e-09  9.90e-01  
 22  +4.2800e-01  +4.2800e-01  8.79e-09  3.67e-12  6.04e-10  8.47e-13  1.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 70.4149ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:23 PM: Optimal value: 4.280e-01
(CVXPY) Aug 30 12:18:23 PM: Compilation took 1.842e-02 seconds
(CVXPY) Aug 30 12:18:23 PM: Solver (including time spent in interface) took 7.560e-02 seconds
Iteration: 19, Objective: 0.4280
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:23 PM: Your problem has 2707 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:23 PM: Finished problem compilation (took 1.751e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2707
  constraints   = 5207
  nnz(P)        = 0
  nnz(A)        = 46143
  cones (total) = 1
    : Nonnegative = 1,  numel = 5207

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.18e+01  1.00e+00  1.00e+00   ------   
  1  +5.8205e-01  +5.3613e+02  5.36e+02  4.22e-01  5.13e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3281e-01  +6.1517e+01  6.10e+01  1.56e-01  2.38e+01  1.51e-02  2.60e-01  9.23e-01  
  3  +5.0856e-01  +1.5827e+01  1.53e+01  1.03e-01  1.58e+01  4.07e-05  2.43e-01  2.69e-01  
  4  +5.0072e-01  +1.5393e+00  1.04e+00  1.03e-02  1.66e+00  7.48e-06  1.28e-01  7.69e-01  
  5  +5.0027e-01  +1.0007e+00  5.00e-01  4.86e-03  7.91e-01  8.76e-06  6.32e-02  5.85e-01  
  6  +4.9977e-01  +1.0272e+00  5.27e-01  2.70e-03  4.46e-01  4.12e-05  9.55e-03  9.59e-01  
  7  +4.9554e-01  +9.3747e-01  4.42e-01  4.18e-04  6.96e-02  2.33e-04  1.24e-03  8.71e-01  
  8  +4.9196e-01  +8.7506e-01  3.83e-01  3.02e-04  5.03e-02  1.93e-04  9.03e-04  3.89e-01  
  9  +4.8876e-01  +8.1928e-01  3.31e-01  2.22e-04  3.68e-02  1.37e-04  6.71e-04  4.54e-01  
 10  +4.8712e-01  +7.7326e-01  2.86e-01  1.94e-04  3.22e-02  6.68e-05  5.90e-04  4.48e-01  
 11  +4.7603e-01  +6.7721e-01  2.01e-01  1.18e-04  1.95e-02  2.48e-05  3.76e-04  6.99e-01  
 12  +4.7159e-01  +6.5157e-01  1.80e-01  1.01e-04  1.67e-02  2.13e-05  3.27e-04  1.89e-01  
 13  +4.6322e-01  +6.0234e-01  1.39e-01  7.32e-05  1.21e-02  1.33e-05  2.46e-04  5.09e-01  
 14  +4.5197e-01  +5.4310e-01  9.11e-02  4.45e-05  7.34e-03  7.95e-06  1.57e-04  5.06e-01  
 15  +4.4073e-01  +4.8612e-01  4.54e-02  2.05e-05  3.38e-03  3.91e-06  7.60e-05  8.91e-01  
 16  +4.3823e-01  +4.7469e-01  3.65e-02  1.62e-05  2.66e-03  3.24e-06  6.07e-05  3.71e-01  
 17  +4.3149e-01  +4.4488e-01  1.34e-02  5.77e-06  9.49e-04  1.23e-06  2.26e-05  7.85e-01  
 18  +4.2934e-01  +4.3550e-01  6.16e-03  2.61e-06  4.30e-04  5.93e-07  1.04e-05  8.41e-01  
 19  +4.2802e-01  +4.3010e-01  2.08e-03  8.78e-07  1.44e-04  2.01e-07  3.54e-06  9.34e-01  
 20  +4.2732e-01  +4.2737e-01  4.88e-05  2.06e-08  3.38e-06  4.65e-09  8.34e-08  9.77e-01  
 21  +4.2730e-01  +4.2730e-01  4.90e-07  2.07e-10  3.40e-08  4.67e-11  8.38e-10  9.90e-01  
 22  +4.2730e-01  +4.2730e-01  5.02e-09  2.12e-12  3.48e-10  4.80e-13  8.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 65.4081ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:23 PM: Optimal value: 4.273e-01
(CVXPY) Aug 30 12:18:23 PM: Compilation took 1.751e-02 seconds
(CVXPY) Aug 30 12:18:23 PM: Solver (including time spent in interface) took 6.956e-02 seconds
Iteration: 20, Objective: 0.4273
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:23 PM: Your problem has 2717 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:23 PM: Finished problem compilation (took 2.128e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2717
  constraints   = 5217
  nnz(P)        = 0
  nnz(A)        = 46428
  cones (total) = 1
    : Nonnegative = 1,  numel = 5217

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.17e+01  1.00e+00  1.00e+00   ------   
  1  +5.8201e-01  +5.3613e+02  5.36e+02  4.22e-01  5.12e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3276e-01  +6.1463e+01  6.09e+01  1.56e-01  2.37e+01  1.51e-02  2.60e-01  9.24e-01  
  3  +5.0855e-01  +1.5812e+01  1.53e+01  1.03e-01  1.57e+01  4.07e-05  2.42e-01  2.70e-01  
  4  +5.0073e-01  +1.5528e+00  1.05e+00  1.04e-02  1.68e+00  7.52e-06  1.28e-01  7.64e-01  
  5  +5.0028e-01  +1.0198e+00  5.20e-01  5.06e-03  8.21e-01  8.72e-06  6.53e-02  5.67e-01  
  6  +4.9998e-01  +1.0203e+00  5.20e-01  3.53e-03  5.80e-01  2.75e-05  1.44e-02  8.87e-01  
  7  +4.9637e-01  +9.4034e-01  4.44e-01  4.73e-04  7.87e-02  2.06e-04  1.41e-03  9.05e-01  
  8  +4.9216e-01  +8.5781e-01  3.66e-01  3.18e-04  5.29e-02  1.66e-04  9.56e-04  4.29e-01  
  9  +4.8921e-01  +8.0655e-01  3.17e-01  2.27e-04  3.77e-02  1.20e-04  6.88e-04  4.98e-01  
 10  +4.8812e-01  +7.8981e-01  3.02e-01  2.14e-04  3.55e-02  1.02e-04  6.49e-04  1.52e-01  
 11  +4.7883e-01  +7.0026e-01  2.21e-01  1.33e-04  2.21e-02  4.07e-05  4.19e-04  6.87e-01  
 12  +4.7267e-01  +6.6242e-01  1.90e-01  1.07e-04  1.78e-02  3.16e-05  3.47e-04  2.63e-01  
 13  +4.6491e-01  +6.1563e-01  1.51e-01  8.07e-05  1.33e-02  1.85e-05  2.70e-04  4.88e-01  
 14  +4.5098e-01  +5.4103e-01  9.01e-02  4.40e-05  7.25e-03  9.33e-06  1.56e-04  5.51e-01  
 15  +4.4338e-01  +5.0255e-01  5.92e-02  2.74e-05  4.51e-03  5.81e-06  1.00e-04  5.49e-01  
 16  +4.3809e-01  +4.7712e-01  3.90e-02  1.74e-05  2.86e-03  3.82e-06  6.49e-05  5.34e-01  
 17  +4.3437e-01  +4.5922e-01  2.48e-02  1.06e-05  1.75e-03  2.48e-06  4.04e-05  8.37e-01  
 18  +4.2915e-01  +4.3750e-01  8.35e-03  3.47e-06  5.70e-04  8.40e-07  1.37e-05  8.00e-01  
 19  +4.2667e-01  +4.2767e-01  1.01e-03  4.06e-07  6.67e-05  1.03e-07  1.66e-06  9.22e-01  
 20  +4.2631e-01  +4.2632e-01  1.82e-05  7.27e-09  1.19e-06  1.80e-09  2.99e-08  9.90e-01  
 21  +4.2630e-01  +4.2630e-01  1.82e-07  7.27e-11  1.19e-08  1.80e-11  2.99e-10  9.90e-01  
 22  +4.2630e-01  +4.2630e-01  1.82e-09  7.27e-13  1.20e-10  1.83e-13  3.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.8591ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:23 PM: Optimal value: 4.263e-01
(CVXPY) Aug 30 12:18:23 PM: Compilation took 2.128e-02 seconds
(CVXPY) Aug 30 12:18:23 PM: Solver (including time spent in interface) took 7.572e-02 seconds
Iteration: 21, Objective: 0.4263
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:23 PM: Your problem has 2727 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:23 PM: Finished problem compilation (took 1.854e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2727
  constraints   = 5227
  nnz(P)        = 0
  nnz(A)        = 46850
  cones (total) = 1
    : Nonnegative = 1,  numel = 5227

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.16e+01  1.00e+00  1.00e+00   ------   
  1  +5.8190e-01  +5.3619e+02  5.36e+02  4.23e-01  5.11e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3270e-01  +6.1413e+01  6.09e+01  1.56e-01  2.36e+01  1.52e-02  2.60e-01  9.24e-01  
  3  +5.0854e-01  +1.5800e+01  1.53e+01  1.03e-01  1.57e+01  4.08e-05  2.42e-01  2.72e-01  
  4  +5.0076e-01  +1.6109e+00  1.11e+00  1.10e-02  1.77e+00  7.68e-06  1.31e-01  7.43e-01  
  5  +5.0027e-01  +1.0320e+00  5.32e-01  5.18e-03  8.40e-01  8.68e-06  6.74e-02  5.67e-01  
  6  +4.9992e-01  +1.0443e+00  5.44e-01  3.56e-03  5.84e-01  2.90e-05  1.41e-02  9.11e-01  
  7  +4.9559e-01  +9.5324e-01  4.58e-01  4.43e-04  7.38e-02  2.25e-04  1.31e-03  9.10e-01  
  8  +4.9072e-01  +8.6740e-01  3.77e-01  2.74e-04  4.56e-02  1.83e-04  8.21e-04  5.31e-01  
  9  +4.8700e-01  +8.2347e-01  3.36e-01  2.13e-04  3.53e-02  1.53e-04  6.45e-04  3.35e-01  
 10  +4.8073e-01  +7.1879e-01  2.38e-01  1.67e-04  2.77e-02  4.64e-06  5.29e-04  7.25e-01  
 11  +4.6675e-01  +6.3371e-01  1.67e-01  9.32e-05  1.54e-02  4.92e-06  3.09e-04  5.11e-01  
 12  +4.6365e-01  +6.1550e-01  1.52e-01  8.26e-05  1.36e-02  7.18e-06  2.78e-04  4.13e-01  
 13  +4.5646e-01  +5.7887e-01  1.22e-01  6.21e-05  1.02e-02  7.35e-06  2.15e-04  5.22e-01  
 14  +4.3935e-01  +4.9296e-01  5.36e-02  2.48e-05  4.07e-03  3.42e-06  9.21e-05  7.34e-01  
 15  +4.3242e-01  +4.6093e-01  2.85e-02  1.27e-05  2.08e-03  2.01e-06  4.86e-05  5.93e-01  
 16  +4.2980e-01  +4.4892e-01  1.91e-02  8.24e-06  1.35e-03  1.58e-06  3.22e-05  6.28e-01  
 17  +4.2721e-01  +4.3821e-01  1.10e-02  4.63e-06  7.61e-04  9.24e-07  1.85e-05  4.70e-01  
 18  +4.2468e-01  +4.2793e-01  3.25e-03  1.34e-06  2.20e-04  2.76e-07  5.50e-06  7.31e-01  
 19  +4.2367e-01  +4.2386e-01  1.90e-04  7.74e-08  1.27e-05  1.77e-08  3.23e-07  9.90e-01  
 20  +4.2360e-01  +4.2360e-01  2.00e-06  8.14e-10  1.34e-07  1.86e-10  3.40e-09  9.89e-01  
 21  +4.2360e-01  +4.2360e-01  2.00e-08  8.14e-12  1.34e-09  1.86e-12  3.40e-11  9.90e-01  
 22  +4.2360e-01  +4.2360e-01  2.00e-10  8.15e-14  1.34e-11  1.87e-14  3.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 70.9698ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:23 PM: Optimal value: 4.236e-01
(CVXPY) Aug 30 12:18:23 PM: Compilation took 1.854e-02 seconds
(CVXPY) Aug 30 12:18:23 PM: Solver (including time spent in interface) took 7.538e-02 seconds
Iteration: 22, Objective: 0.4236
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:24 PM: Your problem has 2737 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:24 PM: Finished problem compilation (took 1.840e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2737
  constraints   = 5237
  nnz(P)        = 0
  nnz(A)        = 47309
  cones (total) = 1
    : Nonnegative = 1,  numel = 5237

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.16e+01  1.00e+00  1.00e+00   ------   
  1  +5.8182e-01  +5.3610e+02  5.36e+02  4.23e-01  5.10e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3271e-01  +6.1412e+01  6.09e+01  1.56e-01  2.35e+01  1.51e-02  2.59e-01  9.24e-01  
  3  +5.0854e-01  +1.5801e+01  1.53e+01  1.03e-01  1.56e+01  4.08e-05  2.42e-01  2.72e-01  
  4  +5.0076e-01  +1.6137e+00  1.11e+00  1.10e-02  1.77e+00  7.70e-06  1.31e-01  7.42e-01  
  5  +5.0028e-01  +1.0356e+00  5.35e-01  5.22e-03  8.45e-01  8.70e-06  6.75e-02  5.66e-01  
  6  +4.9991e-01  +1.0530e+00  5.53e-01  3.52e-03  5.77e-01  3.01e-05  1.37e-02  9.20e-01  
  7  +4.9548e-01  +9.5895e-01  4.63e-01  4.43e-04  7.36e-02  2.27e-04  1.31e-03  9.08e-01  
  8  +4.9166e-01  +8.9903e-01  4.07e-01  3.08e-04  5.11e-02  2.09e-04  9.16e-04  4.04e-01  
  9  +4.8737e-01  +8.4474e-01  3.57e-01  2.25e-04  3.73e-02  1.77e-04  6.80e-04  3.75e-01  
 10  +4.8239e-01  +7.6622e-01  2.84e-01  1.90e-04  3.15e-02  7.72e-05  5.94e-04  3.72e-01  
 11  +4.8059e-01  +7.5134e-01  2.71e-01  1.77e-04  2.93e-02  7.02e-05  5.57e-04  1.10e-01  
 12  +4.7964e-01  +7.3032e-01  2.51e-01  1.65e-04  2.72e-02  3.94e-05  5.21e-04  4.26e-01  
 13  +4.6917e-01  +6.6376e-01  1.95e-01  1.11e-04  1.83e-02  3.02e-05  3.65e-04  3.40e-01  
 14  +4.6076e-01  +6.1171e-01  1.51e-01  8.04e-05  1.32e-02  1.75e-05  2.74e-04  5.13e-01  
 15  +4.4634e-01  +5.3354e-01  8.72e-02  4.26e-05  7.00e-03  8.41e-06  1.54e-04  5.84e-01  
 16  +4.3576e-01  +4.8080e-01  4.50e-02  2.08e-05  3.42e-03  4.12e-06  7.94e-05  5.74e-01  
 17  +4.3398e-01  +4.7217e-01  3.82e-02  1.74e-05  2.85e-03  3.52e-06  6.67e-05  2.55e-01  
 18  +4.3052e-01  +4.5474e-01  2.42e-02  1.07e-05  1.75e-03  2.30e-06  4.17e-05  7.93e-01  
 19  +4.2615e-01  +4.3613e-01  9.97e-03  4.27e-06  7.01e-04  9.55e-07  1.73e-05  6.80e-01  
 20  +4.2403e-01  +4.2744e-01  3.41e-03  1.43e-06  2.35e-04  3.23e-07  5.98e-06  7.46e-01  
 21  +4.2296e-01  +4.2312e-01  1.60e-04  6.67e-08  1.10e-05  1.44e-08  2.83e-07  9.90e-01  
 22  +4.2290e-01  +4.2290e-01  1.62e-06  6.73e-10  1.11e-07  1.45e-10  2.87e-09  9.90e-01  
 23  +4.2290e-01  +4.2290e-01  1.62e-08  6.73e-12  1.11e-09  1.45e-12  2.87e-11  9.90e-01  
 24  +4.2290e-01  +4.2290e-01  1.62e-10  6.71e-14  1.11e-11  1.46e-14  2.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 77.2064ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:24 PM: Optimal value: 4.229e-01
(CVXPY) Aug 30 12:18:24 PM: Compilation took 1.840e-02 seconds
(CVXPY) Aug 30 12:18:24 PM: Solver (including time spent in interface) took 8.167e-02 seconds
Iteration: 23, Objective: 0.4229
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:24 PM: Your problem has 2745 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:24 PM: Finished problem compilation (took 2.031e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2745
  constraints   = 5245
  nnz(P)        = 0
  nnz(A)        = 47664
  cones (total) = 1
    : Nonnegative = 1,  numel = 5245

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.16e+01  1.00e+00  1.00e+00   ------   
  1  +5.8175e-01  +5.3614e+02  5.36e+02  4.23e-01  5.10e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3263e-01  +6.1332e+01  6.08e+01  1.56e-01  2.35e+01  1.52e-02  2.59e-01  9.25e-01  
  3  +5.0852e-01  +1.5781e+01  1.53e+01  1.03e-01  1.56e+01  4.09e-05  2.42e-01  2.73e-01  
  4  +5.0075e-01  +1.5875e+00  1.09e+00  1.08e-02  1.73e+00  7.64e-06  1.29e-01  7.53e-01  
  5  +5.0026e-01  +1.0162e+00  5.16e-01  5.03e-03  8.15e-01  8.97e-06  6.30e-02  5.94e-01  
  6  +4.9981e-01  +1.0722e+00  5.72e-01  3.16e-03  5.20e-01  3.81e-05  1.14e-02  9.24e-01  
  7  +4.9517e-01  +9.7078e-01  4.76e-01  4.42e-04  7.34e-02  2.40e-04  1.30e-03  8.88e-01  
  8  +4.9182e-01  +9.2227e-01  4.30e-01  3.17e-04  5.26e-02  2.28e-04  9.40e-04  3.81e-01  
  9  +4.8843e-01  +8.5545e-01  3.67e-01  2.34e-04  3.88e-02  1.55e-04  7.05e-04  4.56e-01  
 10  +4.8236e-01  +7.6361e-01  2.81e-01  1.90e-04  3.14e-02  5.84e-05  5.92e-04  4.39e-01  
 11  +4.6615e-01  +6.4771e-01  1.82e-01  9.86e-05  1.63e-02  3.20e-05  3.26e-04  5.82e-01  
 12  +4.5977e-01  +6.1033e-01  1.51e-01  7.88e-05  1.30e-02  1.96e-05  2.69e-04  4.56e-01  
 13  +4.5657e-01  +5.9210e-01  1.36e-01  6.92e-05  1.14e-02  1.56e-05  2.39e-04  3.48e-01  
 14  +4.4403e-01  +5.2721e-01  8.32e-02  3.97e-05  6.51e-03  8.72e-06  1.45e-04  4.73e-01  
 15  +4.3656e-01  +4.9063e-01  5.41e-02  2.47e-05  4.06e-03  5.48e-06  9.37e-05  4.39e-01  
 16  +4.3111e-01  +4.6491e-01  3.38e-02  1.49e-05  2.44e-03  3.39e-06  5.81e-05  4.77e-01  
 17  +4.2694e-01  +4.4556e-01  1.86e-02  7.97e-06  1.31e-03  1.83e-06  3.20e-05  6.77e-01  
 18  +4.2257e-01  +4.2668e-01  4.11e-03  1.73e-06  2.83e-04  3.92e-07  7.22e-06  9.18e-01  
 19  +4.2130e-01  +4.2158e-01  2.84e-04  1.19e-07  1.95e-05  2.63e-08  5.04e-07  9.90e-01  
 20  +4.2120e-01  +4.2120e-01  2.87e-06  1.20e-09  1.97e-07  2.65e-10  5.10e-09  9.90e-01  
 21  +4.2120e-01  +4.2120e-01  2.87e-08  1.20e-11  1.97e-09  2.65e-12  5.10e-11  9.90e-01  
 22  +4.2120e-01  +4.2120e-01  2.87e-10  1.20e-13  1.97e-11  2.66e-14  5.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.7189ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:24 PM: Optimal value: 4.212e-01
(CVXPY) Aug 30 12:18:24 PM: Compilation took 2.031e-02 seconds
(CVXPY) Aug 30 12:18:24 PM: Solver (including time spent in interface) took 8.048e-02 seconds
Iteration: 24, Objective: 0.4212
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:24 PM: Your problem has 2754 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:24 PM: Finished problem compilation (took 2.005e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2754
  constraints   = 5254
  nnz(P)        = 0
  nnz(A)        = 47951
  cones (total) = 1
    : Nonnegative = 1,  numel = 5254

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.15e+01  1.00e+00  1.00e+00   ------   
  1  +5.8181e-01  +5.3598e+02  5.35e+02  4.23e-01  5.09e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3261e-01  +6.1279e+01  6.07e+01  1.56e-01  2.34e+01  1.51e-02  2.59e-01  9.25e-01  
  3  +5.0851e-01  +1.5757e+01  1.52e+01  1.03e-01  1.56e+01  4.08e-05  2.41e-01  2.74e-01  
  4  +5.0075e-01  +1.5869e+00  1.09e+00  1.08e-02  1.73e+00  7.65e-06  1.29e-01  7.53e-01  
  5  +5.0028e-01  +1.0397e+00  5.39e-01  5.26e-03  8.52e-01  9.09e-06  6.44e-02  5.81e-01  
  6  +4.9989e-01  +1.0859e+00  5.86e-01  3.52e-03  5.78e-01  3.38e-05  1.32e-02  9.00e-01  
  7  +4.9554e-01  +9.8265e-01  4.87e-01  4.73e-04  7.87e-02  2.27e-04  1.40e-03  8.99e-01  
  8  +4.9216e-01  +9.1137e-01  4.19e-01  3.28e-04  5.44e-02  1.78e-04  9.78e-04  4.76e-01  
  9  +4.8847e-01  +8.5021e-01  3.62e-01  2.37e-04  3.94e-02  1.31e-04  7.18e-04  4.59e-01  
 10  +4.8384e-01  +7.7896e-01  2.95e-01  2.06e-04  3.40e-02  6.31e-05  6.39e-04  3.55e-01  
 11  +4.6916e-01  +6.6637e-01  1.97e-01  1.13e-04  1.86e-02  3.24e-05  3.71e-04  5.96e-01  
 12  +4.6601e-01  +6.4860e-01  1.83e-01  1.01e-04  1.67e-02  2.82e-05  3.38e-04  1.64e-01  
 13  +4.5798e-01  +6.0209e-01  1.44e-01  7.56e-05  1.24e-02  1.78e-05  2.61e-04  4.49e-01  
 14  +4.4626e-01  +5.3955e-01  9.33e-02  4.56e-05  7.48e-03  9.34e-06  1.66e-04  5.88e-01  
 15  +4.3873e-01  +5.0282e-01  6.41e-02  2.99e-05  4.91e-03  6.19e-06  1.13e-04  4.28e-01  
 16  +4.3047e-01  +4.6420e-01  3.37e-02  1.50e-05  2.46e-03  3.17e-06  5.94e-05  5.76e-01  
 17  +4.2804e-01  +4.5266e-01  2.46e-02  1.08e-05  1.77e-03  2.32e-06  4.33e-05  4.91e-01  
 18  +4.2286e-01  +4.2968e-01  6.82e-03  2.93e-06  4.80e-04  6.33e-07  1.23e-05  9.90e-01  
 19  +4.2068e-01  +4.2091e-01  2.30e-04  9.83e-08  1.61e-05  2.01e-08  4.23e-07  9.71e-01  
 20  +4.2060e-01  +4.2060e-01  2.33e-06  9.97e-10  1.63e-07  2.04e-10  4.30e-09  9.90e-01  
 21  +4.2060e-01  +4.2060e-01  2.38e-08  1.02e-11  1.67e-09  2.08e-12  4.38e-11  9.90e-01  
 22  +4.2060e-01  +4.2060e-01  2.55e-10  1.09e-13  1.78e-11  2.23e-14  4.71e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.8858ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:24 PM: Optimal value: 4.206e-01
(CVXPY) Aug 30 12:18:24 PM: Compilation took 2.005e-02 seconds
(CVXPY) Aug 30 12:18:24 PM: Solver (including time spent in interface) took 8.077e-02 seconds
Iteration: 25, Objective: 0.4206
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:24 PM: Your problem has 2760 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:24 PM: Finished problem compilation (took 1.811e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2760
  constraints   = 5260
  nnz(P)        = 0
  nnz(A)        = 48256
  cones (total) = 1
    : Nonnegative = 1,  numel = 5260

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.15e+01  1.00e+00  1.00e+00   ------   
  1  +5.8184e-01  +5.3599e+02  5.35e+02  4.23e-01  5.08e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3258e-01  +6.1246e+01  6.07e+01  1.56e-01  2.34e+01  1.51e-02  2.59e-01  9.25e-01  
  3  +5.0850e-01  +1.5751e+01  1.52e+01  1.03e-01  1.55e+01  4.08e-05  2.41e-01  2.74e-01  
  4  +5.0075e-01  +1.6000e+00  1.10e+00  1.09e-02  1.75e+00  7.68e-06  1.29e-01  7.48e-01  
  5  +5.0027e-01  +1.0342e+00  5.34e-01  5.21e-03  8.43e-01  9.06e-06  6.42e-02  5.87e-01  
  6  +4.9985e-01  +1.0827e+00  5.83e-01  3.42e-03  5.61e-01  3.51e-05  1.27e-02  9.05e-01  
  7  +4.9533e-01  +9.7692e-01  4.82e-01  4.63e-04  7.70e-02  2.30e-04  1.38e-03  8.96e-01  
  8  +4.9252e-01  +9.1857e-01  4.26e-01  3.31e-04  5.49e-02  1.85e-04  9.84e-04  4.65e-01  
  9  +4.8890e-01  +8.5568e-01  3.67e-01  2.39e-04  3.96e-02  1.34e-04  7.22e-04  4.66e-01  
 10  +4.8389e-01  +7.7890e-01  2.95e-01  2.05e-04  3.39e-02  6.08e-05  6.36e-04  3.76e-01  
 11  +4.7021e-01  +6.7304e-01  2.03e-01  1.18e-04  1.94e-02  3.17e-05  3.86e-04  5.81e-01  
 12  +4.6634e-01  +6.5088e-01  1.85e-01  1.03e-04  1.70e-02  2.73e-05  3.44e-04  1.75e-01  
 13  +4.5823e-01  +6.0376e-01  1.46e-01  7.66e-05  1.26e-02  1.74e-05  2.65e-04  4.43e-01  
 14  +4.5092e-01  +5.6463e-01  1.14e-01  5.71e-05  9.38e-03  1.23e-05  2.04e-04  3.74e-01  
 15  +4.3933e-01  +5.0611e-01  6.68e-02  3.13e-05  5.14e-03  6.57e-06  1.18e-04  5.52e-01  
 16  +4.3086e-01  +4.6682e-01  3.60e-02  1.60e-05  2.61e-03  3.43e-06  6.29e-05  5.86e-01  
 17  +4.2653e-01  +4.4655e-01  2.00e-02  8.64e-06  1.41e-03  1.88e-06  3.51e-05  8.29e-01  
 18  +4.2273e-01  +4.3055e-01  7.82e-03  3.33e-06  5.45e-04  7.33e-07  1.40e-05  7.26e-01  
 19  +4.2035e-01  +4.2082e-01  4.68e-04  1.98e-07  3.24e-05  4.26e-08  8.52e-07  9.44e-01  
 20  +4.2020e-01  +4.2021e-01  4.74e-06  2.00e-09  3.28e-07  4.31e-10  8.64e-09  9.90e-01  
 21  +4.2020e-01  +4.2020e-01  4.75e-08  2.00e-11  3.28e-09  4.32e-12  8.65e-11  9.90e-01  
 22  +4.2020e-01  +4.2020e-01  4.75e-10  2.00e-13  3.28e-11  4.33e-14  8.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 77.611ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:24 PM: Optimal value: 4.202e-01
(CVXPY) Aug 30 12:18:24 PM: Compilation took 1.811e-02 seconds
(CVXPY) Aug 30 12:18:24 PM: Solver (including time spent in interface) took 8.302e-02 seconds
Iteration: 26, Objective: 0.4202
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:24 PM: Your problem has 2768 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:24 PM: Finished problem compilation (took 1.905e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2768
  constraints   = 5268
  nnz(P)        = 0
  nnz(A)        = 48722
  cones (total) = 1
    : Nonnegative = 1,  numel = 5268

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.14e+01  1.00e+00  1.00e+00   ------   
  1  +5.8186e-01  +5.3592e+02  5.35e+02  4.23e-01  5.08e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3256e-01  +6.1217e+01  6.07e+01  1.56e-01  2.33e+01  1.51e-02  2.59e-01  9.25e-01  
  3  +5.0849e-01  +1.5737e+01  1.52e+01  1.03e-01  1.55e+01  4.08e-05  2.41e-01  2.75e-01  
  4  +5.0065e-01  +1.4093e+00  9.09e-01  9.06e-03  1.45e+00  7.24e-06  1.17e-01  8.31e-01  
  5  +5.0036e-01  +1.0950e+00  5.95e-01  5.80e-03  9.38e-01  1.06e-05  5.95e-02  5.89e-01  
  6  +4.9996e-01  +1.0243e+00  5.24e-01  2.86e-03  4.71e-01  3.93e-05  1.01e-02  8.83e-01  
  7  +4.9681e-01  +9.6762e-01  4.71e-01  4.69e-04  7.80e-02  2.33e-04  1.38e-03  8.66e-01  
  8  +4.9387e-01  +9.1497e-01  4.21e-01  3.56e-04  5.91e-02  2.09e-04  1.05e-03  3.31e-01  
  9  +4.8863e-01  +8.3582e-01  3.47e-01  2.28e-04  3.77e-02  1.55e-04  6.87e-04  5.46e-01  
 10  +4.8412e-01  +7.7406e-01  2.90e-01  2.04e-04  3.37e-02  8.29e-05  6.30e-04  2.84e-01  
 11  +4.7256e-01  +6.9170e-01  2.19e-01  1.29e-04  2.13e-02  5.53e-05  4.18e-04  4.55e-01  
 12  +4.6781e-01  +6.6357e-01  1.96e-01  1.10e-04  1.81e-02  4.67e-05  3.64e-04  1.77e-01  
 13  +4.6048e-01  +6.1642e-01  1.56e-01  8.32e-05  1.37e-02  2.01e-05  2.84e-04  6.24e-01  
 14  +4.4488e-01  +5.3264e-01  8.78e-02  4.23e-05  6.94e-03  7.57e-06  1.54e-04  7.72e-01  
 15  +4.3754e-01  +4.9821e-01  6.07e-02  2.78e-05  4.55e-03  5.24e-06  1.04e-04  4.49e-01  
 16  +4.3196e-01  +4.7158e-01  3.96e-02  1.74e-05  2.86e-03  3.60e-06  6.73e-05  7.13e-01  
 17  +4.2536e-01  +4.4211e-01  1.67e-02  7.18e-06  1.18e-03  1.61e-06  2.90e-05  9.90e-01  
 18  +4.2112e-01  +4.2474e-01  3.62e-03  1.53e-06  2.51e-04  3.41e-07  6.47e-06  8.70e-01  
 19  +4.1995e-01  +4.2008e-01  1.33e-04  5.59e-08  9.16e-06  1.20e-08  2.41e-07  9.88e-01  
 20  +4.1990e-01  +4.1990e-01  1.35e-06  5.67e-10  9.28e-08  1.22e-10  2.44e-09  9.90e-01  
 21  +4.1990e-01  +4.1990e-01  1.35e-08  5.67e-12  9.28e-10  1.22e-12  2.44e-11  9.90e-01  
 22  +4.1990e-01  +4.1990e-01  1.35e-10  5.67e-14  9.29e-12  1.23e-14  2.45e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 77.9199ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:24 PM: Optimal value: 4.199e-01
(CVXPY) Aug 30 12:18:24 PM: Compilation took 1.905e-02 seconds
(CVXPY) Aug 30 12:18:24 PM: Solver (including time spent in interface) took 8.264e-02 seconds
Iteration: 27, Objective: 0.4199
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:25 PM: Your problem has 2776 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:25 PM: Finished problem compilation (took 1.759e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2776
  constraints   = 5276
  nnz(P)        = 0
  nnz(A)        = 48948
  cones (total) = 1
    : Nonnegative = 1,  numel = 5276

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.14e+01  1.00e+00  1.00e+00   ------   
  1  +5.8182e-01  +5.3582e+02  5.35e+02  4.23e-01  5.07e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3253e-01  +6.1169e+01  6.06e+01  1.56e-01  2.32e+01  1.51e-02  2.58e-01  9.26e-01  
  3  +5.0849e-01  +1.5725e+01  1.52e+01  1.03e-01  1.55e+01  4.08e-05  2.41e-01  2.76e-01  
  4  +5.0065e-01  +1.4111e+00  9.10e-01  9.09e-03  1.46e+00  7.26e-06  1.16e-01  8.30e-01  
  5  +5.0036e-01  +1.1089e+00  6.09e-01  5.94e-03  9.60e-01  1.08e-05  5.99e-02  5.86e-01  
  6  +4.9984e-01  +1.0318e+00  5.32e-01  2.36e-03  3.89e-01  4.96e-05  7.85e-03  9.42e-01  
  7  +4.9626e-01  +9.6493e-01  4.69e-01  4.26e-04  7.08e-02  2.48e-04  1.25e-03  8.43e-01  
  8  +4.9324e-01  +9.1856e-01  4.25e-01  3.26e-04  5.41e-02  2.15e-04  9.61e-04  3.56e-01  
  9  +4.8899e-01  +8.5088e-01  3.62e-01  2.37e-04  3.93e-02  1.50e-04  7.14e-04  4.58e-01  
 10  +4.8464e-01  +7.8722e-01  3.03e-01  2.10e-04  3.47e-02  7.89e-05  6.48e-04  3.12e-01  
 11  +4.7425e-01  +7.0511e-01  2.31e-01  1.40e-04  2.31e-02  4.78e-05  4.52e-04  4.63e-01  
 12  +4.6748e-01  +6.6336e-01  1.96e-01  1.11e-04  1.83e-02  3.78e-05  3.69e-04  2.46e-01  
 13  +4.6104e-01  +6.2040e-01  1.59e-01  8.59e-05  1.41e-02  1.65e-05  2.92e-04  6.74e-01  
 14  +4.4563e-01  +5.3700e-01  9.14e-02  4.43e-05  7.27e-03  6.99e-06  1.60e-04  8.22e-01  
 15  +4.3818e-01  +5.0139e-01  6.32e-02  2.92e-05  4.78e-03  4.99e-06  1.09e-04  4.66e-01  
 16  +4.3176e-01  +4.7184e-01  4.01e-02  1.78e-05  2.91e-03  3.26e-06  6.85e-05  4.87e-01  
 17  +4.2764e-01  +4.5180e-01  2.42e-02  1.04e-05  1.71e-03  2.28e-06  4.11e-05  9.35e-01  
 18  +4.2207e-01  +4.2874e-01  6.67e-03  2.83e-06  4.63e-04  6.28e-07  1.16e-05  7.83e-01  
 19  +4.2192e-01  +4.2816e-01  6.24e-03  2.62e-06  4.29e-04  5.93e-07  1.08e-05  1.27e-01  
 20  +4.2091e-01  +4.2398e-01  3.07e-03  1.28e-06  2.09e-04  2.90e-07  5.33e-06  9.90e-01  
 21  +4.1984e-01  +4.1996e-01  1.20e-04  4.94e-08  8.08e-06  1.08e-08  2.09e-07  9.84e-01  
 22  +4.1980e-01  +4.1980e-01  1.22e-06  5.03e-10  8.22e-08  1.10e-10  2.12e-09  9.90e-01  
 23  +4.1980e-01  +4.1980e-01  1.22e-08  5.03e-12  8.22e-10  1.10e-12  2.12e-11  9.90e-01  
 24  +4.1980e-01  +4.1980e-01  1.22e-10  5.04e-14  8.25e-12  1.11e-14  2.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.9717ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:25 PM: Optimal value: 4.198e-01
(CVXPY) Aug 30 12:18:25 PM: Compilation took 1.759e-02 seconds
(CVXPY) Aug 30 12:18:25 PM: Solver (including time spent in interface) took 8.707e-02 seconds
Iteration: 28, Objective: 0.4198
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:25 PM: Your problem has 2786 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:25 PM: Finished problem compilation (took 1.932e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2786
  constraints   = 5286
  nnz(P)        = 0
  nnz(A)        = 49322
  cones (total) = 1
    : Nonnegative = 1,  numel = 5286

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.13e+01  1.00e+00  1.00e+00   ------   
  1  +5.8169e-01  +5.3583e+02  5.35e+02  4.23e-01  5.06e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3242e-01  +6.1078e+01  6.05e+01  1.55e-01  2.31e+01  1.52e-02  2.58e-01  9.27e-01  
  3  +5.0846e-01  +1.5698e+01  1.52e+01  1.03e-01  1.54e+01  4.09e-05  2.40e-01  2.79e-01  
  4  +5.0066e-01  +1.4339e+00  9.33e-01  9.32e-03  1.49e+00  7.35e-06  1.17e-01  8.22e-01  
  5  +5.0038e-01  +1.1384e+00  6.38e-01  6.23e-03  1.01e+00  1.09e-05  6.11e-02  5.75e-01  
  6  +4.9984e-01  +1.0555e+00  5.56e-01  2.50e-03  4.11e-01  4.84e-05  8.28e-03  9.40e-01  
  7  +4.9586e-01  +9.8707e-01  4.91e-01  4.18e-04  6.94e-02  2.63e-04  1.22e-03  8.55e-01  
  8  +4.9181e-01  +9.2491e-01  4.33e-01  3.08e-04  5.11e-02  2.28e-04  9.08e-04  3.59e-01  
  9  +4.8742e-01  +8.6070e-01  3.73e-01  2.41e-04  3.99e-02  1.63e-04  7.25e-04  3.59e-01  
 10  +4.8158e-01  +7.6828e-01  2.87e-01  1.99e-04  3.29e-02  3.70e-05  6.22e-04  5.69e-01  
 11  +4.6334e-01  +6.4567e-01  1.82e-01  9.85e-05  1.62e-02  2.45e-05  3.28e-04  5.21e-01  
 12  +4.5864e-01  +6.2036e-01  1.62e-01  8.45e-05  1.39e-02  1.97e-05  2.86e-04  2.78e-01  
 13  +4.4645e-01  +5.5431e-01  1.08e-01  5.30e-05  8.68e-03  1.19e-05  1.90e-04  4.23e-01  
 14  +4.3780e-01  +5.1039e-01  7.26e-02  3.40e-05  5.56e-03  7.64e-06  1.26e-04  4.38e-01  
 15  +4.3147e-01  +4.7948e-01  4.80e-02  2.16e-05  3.54e-03  4.87e-06  8.30e-05  5.05e-01  
 16  +4.2834e-01  +4.6503e-01  3.67e-02  1.63e-05  2.66e-03  3.70e-06  6.35e-05  2.89e-01  
 17  +4.2373e-01  +4.4367e-01  1.99e-02  8.62e-06  1.41e-03  1.97e-06  3.47e-05  6.09e-01  
 18  +4.1926e-01  +4.2409e-01  4.83e-03  2.05e-06  3.35e-04  4.60e-07  8.60e-06  8.58e-01  
 19  +4.1806e-01  +4.1913e-01  1.06e-03  4.48e-07  7.33e-05  9.92e-08  1.91e-06  8.96e-01  
 20  +4.1771e-01  +4.1773e-01  1.90e-05  7.99e-09  1.31e-06  1.75e-09  3.43e-08  9.82e-01  
 21  +4.1770e-01  +4.1770e-01  1.91e-07  8.04e-11  1.31e-08  1.76e-11  3.45e-10  9.90e-01  
 22  +4.1770e-01  +4.1770e-01  2.05e-09  8.65e-13  1.41e-10  1.90e-13  3.73e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.5906ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:25 PM: Optimal value: 4.177e-01
(CVXPY) Aug 30 12:18:25 PM: Compilation took 1.932e-02 seconds
(CVXPY) Aug 30 12:18:25 PM: Solver (including time spent in interface) took 8.331e-02 seconds
Iteration: 29, Objective: 0.4177
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:25 PM: Your problem has 2788 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:25 PM: Finished problem compilation (took 1.867e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2788
  constraints   = 5288
  nnz(P)        = 0
  nnz(A)        = 49464
  cones (total) = 1
    : Nonnegative = 1,  numel = 5288

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.13e+01  1.00e+00  1.00e+00   ------   
  1  +5.8167e-01  +5.3580e+02  5.35e+02  4.24e-01  5.06e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3242e-01  +6.1076e+01  6.05e+01  1.55e-01  2.31e+01  1.52e-02  2.58e-01  9.27e-01  
  3  +5.0846e-01  +1.5699e+01  1.52e+01  1.03e-01  1.54e+01  4.09e-05  2.40e-01  2.79e-01  
  4  +5.0066e-01  +1.4313e+00  9.31e-01  9.30e-03  1.49e+00  7.34e-06  1.17e-01  8.23e-01  
  5  +5.0038e-01  +1.1398e+00  6.39e-01  6.25e-03  1.01e+00  1.10e-05  6.10e-02  5.76e-01  
  6  +4.9985e-01  +1.0545e+00  5.55e-01  2.53e-03  4.17e-01  4.75e-05  8.44e-03  9.35e-01  
  7  +4.9594e-01  +9.8752e-01  4.92e-01  4.22e-04  7.00e-02  2.62e-04  1.23e-03  8.56e-01  
  8  +4.9186e-01  +9.2391e-01  4.32e-01  3.10e-04  5.14e-02  2.27e-04  9.13e-04  3.61e-01  
  9  +4.8741e-01  +8.5887e-01  3.71e-01  2.40e-04  3.98e-02  1.61e-04  7.23e-04  3.70e-01  
 10  +4.8185e-01  +7.7097e-01  2.89e-01  2.01e-04  3.32e-02  4.10e-05  6.27e-04  5.46e-01  
 11  +4.6407e-01  +6.5074e-01  1.87e-01  1.01e-04  1.66e-02  2.74e-05  3.36e-04  5.13e-01  
 12  +4.6052e-01  +6.3137e-01  1.71e-01  9.02e-05  1.48e-02  2.34e-05  3.03e-04  1.98e-01  
 13  +4.5161e-01  +5.8219e-01  1.31e-01  6.58e-05  1.08e-02  1.62e-05  2.30e-04  3.50e-01  
 14  +4.4098e-01  +5.2667e-01  8.57e-02  4.09e-05  6.69e-03  9.81e-06  1.50e-04  4.34e-01  
 15  +4.3436e-01  +4.9382e-01  5.95e-02  2.72e-05  4.45e-03  6.53e-06  1.03e-04  4.35e-01  
 16  +4.2778e-01  +4.6254e-01  3.48e-02  1.54e-05  2.52e-03  3.69e-06  6.01e-05  5.18e-01  
 17  +4.2380e-01  +4.4341e-01  1.96e-02  8.47e-06  1.38e-03  1.99e-06  3.39e-05  7.26e-01  
 18  +4.1982e-01  +4.2638e-01  6.56e-03  2.79e-06  4.56e-04  6.45e-07  1.16e-05  7.61e-01  
 19  +4.1812e-01  +4.1937e-01  1.25e-03  5.28e-07  8.63e-05  1.19e-07  2.25e-06  8.82e-01  
 20  +4.1771e-01  +4.1772e-01  1.71e-05  7.19e-09  1.18e-06  1.59e-09  3.09e-08  9.87e-01  
 21  +4.1770e-01  +4.1770e-01  1.71e-07  7.21e-11  1.18e-08  1.59e-11  3.10e-10  9.90e-01  
 22  +4.1770e-01  +4.1770e-01  1.89e-09  7.98e-13  1.30e-10  1.77e-13  3.44e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 88.464ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:25 PM: Optimal value: 4.177e-01
(CVXPY) Aug 30 12:18:25 PM: Compilation took 1.867e-02 seconds
(CVXPY) Aug 30 12:18:25 PM: Solver (including time spent in interface) took 9.366e-02 seconds
Iteration: 30, Objective: 0.4177
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:25 PM: Your problem has 2789 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:25 PM: Finished problem compilation (took 1.870e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2789
  constraints   = 5289
  nnz(P)        = 0
  nnz(A)        = 49482
  cones (total) = 1
    : Nonnegative = 1,  numel = 5289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.13e+01  1.00e+00  1.00e+00   ------   
  1  +5.8166e-01  +5.3580e+02  5.35e+02  4.24e-01  5.06e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3242e-01  +6.1073e+01  6.05e+01  1.55e-01  2.31e+01  1.52e-02  2.58e-01  9.27e-01  
  3  +5.0846e-01  +1.5698e+01  1.52e+01  1.03e-01  1.54e+01  4.09e-05  2.40e-01  2.79e-01  
  4  +5.0066e-01  +1.4289e+00  9.28e-01  9.28e-03  1.48e+00  7.33e-06  1.17e-01  8.24e-01  
  5  +5.0038e-01  +1.1416e+00  6.41e-01  6.27e-03  1.01e+00  1.10e-05  6.09e-02  5.77e-01  
  6  +4.9984e-01  +1.0544e+00  5.55e-01  2.49e-03  4.09e-01  4.86e-05  8.23e-03  9.40e-01  
  7  +4.9591e-01  +9.8697e-01  4.91e-01  4.18e-04  6.95e-02  2.63e-04  1.22e-03  8.54e-01  
  8  +4.9186e-01  +9.2460e-01  4.33e-01  3.08e-04  5.11e-02  2.28e-04  9.08e-04  3.60e-01  
  9  +4.8754e-01  +8.6032e-01  3.73e-01  2.42e-04  4.00e-02  1.61e-04  7.26e-04  3.63e-01  
 10  +4.8147e-01  +7.6545e-01  2.84e-01  1.98e-04  3.26e-02  3.34e-05  6.18e-04  5.89e-01  
 11  +4.6317e-01  +6.4379e-01  1.81e-01  9.75e-05  1.60e-02  2.24e-05  3.24e-04  5.20e-01  
 12  +4.5770e-01  +6.1457e-01  1.57e-01  8.15e-05  1.34e-02  1.75e-05  2.77e-04  3.27e-01  
 13  +4.4700e-01  +5.5747e-01  1.10e-01  5.43e-05  8.90e-03  1.16e-05  1.94e-04  3.59e-01  
 14  +4.3637e-01  +5.0358e-01  6.72e-02  3.12e-05  5.11e-03  6.69e-06  1.17e-04  4.85e-01  
 15  +4.3090e-01  +4.7687e-01  4.60e-02  2.07e-05  3.38e-03  4.48e-06  7.92e-05  4.96e-01  
 16  +4.2751e-01  +4.6117e-01  3.37e-02  1.49e-05  2.43e-03  3.27e-06  5.81e-05  3.44e-01  
 17  +4.2198e-01  +4.3610e-01  1.41e-02  6.08e-06  9.94e-04  1.35e-06  2.47e-05  6.65e-01  
 18  +4.1862e-01  +4.2144e-01  2.82e-03  1.20e-06  1.96e-04  2.63e-07  5.03e-06  8.86e-01  
 19  +4.1775e-01  +4.1791e-01  1.54e-04  6.50e-08  1.06e-05  1.38e-08  2.78e-07  9.65e-01  
 20  +4.1770e-01  +4.1770e-01  1.55e-06  6.54e-10  1.07e-07  1.39e-10  2.81e-09  9.90e-01  
 21  +4.1770e-01  +4.1770e-01  1.56e-08  6.55e-12  1.07e-09  1.39e-12  2.81e-11  9.90e-01  
 22  +4.1770e-01  +4.1770e-01  2.08e-10  8.76e-14  1.43e-11  1.88e-14  3.80e-13  9.87e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 76.8366ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:25 PM: Optimal value: 4.177e-01
(CVXPY) Aug 30 12:18:25 PM: Compilation took 1.870e-02 seconds
(CVXPY) Aug 30 12:18:25 PM: Solver (including time spent in interface) took 8.252e-02 seconds
Iteration: 31, Objective: 0.4177
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:18:25 PM: Your problem has 2790 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:18:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:18:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:18:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:18:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:18:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:18:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:18:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:18:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:18:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:18:25 PM: Finished problem compilation (took 2.023e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2790
  constraints   = 5290
  nnz(P)        = 0
  nnz(A)        = 49495
  cones (total) = 1
    : Nonnegative = 1,  numel = 5290

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.13e+01  1.00e+00  1.00e+00   ------   
  1  +5.8167e-01  +5.3578e+02  5.35e+02  4.24e-01  5.06e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3242e-01  +6.1074e+01  6.05e+01  1.55e-01  2.31e+01  1.52e-02  2.58e-01  9.27e-01  
  3  +5.0846e-01  +1.5697e+01  1.52e+01  1.03e-01  1.54e+01  4.09e-05  2.40e-01  2.79e-01  
  4  +5.0066e-01  +1.4290e+00  9.28e-01  9.28e-03  1.48e+00  7.34e-06  1.17e-01  8.24e-01  
  5  +5.0038e-01  +1.1412e+00  6.41e-01  6.26e-03  1.01e+00  1.10e-05  6.08e-02  5.78e-01  
  6  +4.9982e-01  +1.0519e+00  5.52e-01  2.40e-03  3.96e-01  5.02e-05  7.90e-03  9.45e-01  
  7  +4.9579e-01  +9.8280e-01  4.87e-01  4.08e-04  6.78e-02  2.67e-04  1.19e-03  8.51e-01  
  8  +4.9198e-01  +9.2694e-01  4.35e-01  3.08e-04  5.10e-02  2.34e-04  9.05e-04  3.41e-01  
  9  +4.8745e-01  +8.6248e-01  3.75e-01  2.40e-04  3.98e-02  1.70e-04  7.22e-04  3.51e-01  
 10  +4.8138e-01  +7.6634e-01  2.85e-01  1.98e-04  3.27e-02  3.44e-05  6.19e-04  5.79e-01  
 11  +4.6221e-01  +6.3891e-01  1.77e-01  9.42e-05  1.55e-02  2.28e-05  3.14e-04  5.30e-01  
 12  +4.5815e-01  +6.1737e-01  1.59e-01  8.27e-05  1.36e-02  1.87e-05  2.80e-04  2.77e-01  
 13  +4.4783e-01  +5.6231e-01  1.14e-01  5.64e-05  9.23e-03  1.26e-05  2.00e-04  3.44e-01  
 14  +4.3808e-01  +5.1251e-01  7.44e-02  3.48e-05  5.69e-03  7.75e-06  1.29e-04  4.61e-01  
 15  +4.3192e-01  +4.8283e-01  5.09e-02  2.29e-05  3.75e-03  5.18e-06  8.77e-05  4.27e-01  
 16  +4.2659e-01  +4.5739e-01  3.08e-02  1.35e-05  2.21e-03  3.06e-06  5.34e-05  5.42e-01  
 17  +4.2092e-01  +4.3194e-01  1.10e-02  4.74e-06  7.75e-04  1.07e-06  1.95e-05  6.89e-01  
 18  +4.1823e-01  +4.2017e-01  1.93e-03  8.22e-07  1.34e-04  1.80e-07  3.49e-06  9.03e-01  
 19  +4.1762e-01  +4.1769e-01  6.67e-05  2.82e-08  4.61e-06  5.95e-09  1.22e-07  9.75e-01  
 20  +4.1760e-01  +4.1760e-01  6.67e-07  2.82e-10  4.61e-08  5.95e-11  1.22e-09  9.90e-01  
 21  +4.1760e-01  +4.1760e-01  6.67e-09  2.82e-12  4.61e-10  5.95e-13  1.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.6708ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:18:26 PM: Problem status: optimal
(CVXPY) Aug 30 12:18:26 PM: Optimal value: 4.176e-01
(CVXPY) Aug 30 12:18:26 PM: Compilation took 2.023e-02 seconds
(CVXPY) Aug 30 12:18:26 PM: Solver (including time spent in interface) took 8.227e-02 seconds
FULL MODEL:
  Accruacy: 0.5416
  Our objective: 0.08320000000000002

IF 
    (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 1)                                             <-- (term's our objective: 0.011599999999999944)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0)            <-- (term's our objective: 0.005600000000000053)
 OR (x1 = 1 AND x5 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.005199999999999986)
 OR (x4 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x6 = 0)            <-- (term's our objective: 0.0032000000000000283)
 OR (x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x7 = 0)            <-- (term's our objective: 0.003999999999999986)
 OR (x1 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.003600000000000051)
 OR (x0 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.007600000000000034)
 OR (x0 = 1 AND x2 = 1 AND x5 = 1 AND x1 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.0031999999999999633)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1 AND x1 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0032000000000000496)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x1 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0015999999999999825)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0015999999999999595)
 OR (x0 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.0008000000000000476)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x7 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0016000000000000263)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.004000000000000005)
 OR (x0 = 1 AND x1 = 1 AND x7 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0008000000000000034)
 OR (x1 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0012000000000000266)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.0015999999999999825)
 OR (x2 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.004800000000000028)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0024000000000000267)
 OR (x0 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x7 = 0) <-- (term's our objective: 0.004000000000000005)
 OR (x2 = 1 AND x3 = 1 AND x0 = 0 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0023999999999999595)
 OR (x2 = 1 AND x3 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.003199999999999961)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0023999999999999824)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.003600000000000028)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.011599999999999944
    Its accruacy: 0.5058
    Its hamming distance: 12
  Shortest hamming distance: 0
    Its our objective: 0.004000000000000005
  Highest accruacy: 0.5058
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

