Command:
python test_script.py -s smallest_subclass -d 8 -n 50000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0048400000000000006
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 8.

Computed total variation: 0.06228
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:28 PM: Your problem has 25017 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:28 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:28 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:28 PM: Finished problem compilation (took 1.081e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25017
  constraints   = 50017
  nnz(P)        = 0
  nnz(A)        = 275017
  cones (total) = 1
    : Nonnegative = 1,  numel = 50017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3498e-01  +6.3201e+02  6.31e+02  1.70e-01  8.22e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0962e-01  +1.6465e+02  1.64e+02  1.47e-01  7.15e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.30e-02  2.06e+01  4.76e-06  1.96e-01  4.42e-01  
  5  +4.9999e-01  +1.0188e+00  5.19e-01  1.55e-03  7.71e-01  2.33e-05  1.91e-01  2.64e-01  
  6  +5.0000e-01  +5.4469e-01  4.47e-02  1.33e-04  6.65e-02  1.70e-06  1.73e-02  9.10e-01  
  7  +5.0000e-01  +5.3495e-01  3.49e-02  1.04e-04  5.20e-02  1.56e-06  1.04e-02  4.44e-01  
  8  +5.0000e-01  +5.2319e-01  2.32e-02  6.90e-05  3.44e-02  2.15e-06  3.14e-03  7.40e-01  
  9  +4.9983e-01  +5.3272e-01  3.29e-02  2.68e-05  1.34e-02  8.57e-05  9.45e-05  9.90e-01  
 10  +4.9742e-01  +5.2361e-01  2.62e-02  1.54e-06  7.72e-04  1.20e-03  4.93e-06  9.48e-01  
 11  +4.9601e-01  +5.0470e-01  8.69e-03  4.71e-07  2.35e-04  4.91e-05  1.60e-06  8.18e-01  
 12  +4.9523e-01  +5.0129e-01  6.06e-03  2.85e-07  1.42e-04  2.13e-05  1.03e-06  5.85e-01  
 13  +4.9460e-01  +4.9853e-01  3.92e-03  1.69e-07  8.46e-05  2.22e-07  6.42e-07  9.45e-01  
 14  +4.9344e-01  +4.9395e-01  5.09e-04  2.05e-08  1.03e-05  2.37e-08  8.21e-08  8.90e-01  
 15  +4.9326e-01  +4.9327e-01  8.17e-06  3.27e-10  1.63e-07  3.55e-10  1.32e-09  9.85e-01  
 16  +4.9326e-01  +4.9326e-01  8.17e-08  3.27e-12  1.63e-09  3.55e-12  1.32e-11  9.90e-01  
 17  +4.9326e-01  +4.9326e-01  8.23e-10  3.29e-14  1.65e-11  4.86e-14  1.78e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 319.3415ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:28 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:28 PM: Optimal value: 4.933e-01
(CVXPY) Aug 30 12:20:28 PM: Compilation took 1.081e-01 seconds
(CVXPY) Aug 30 12:20:28 PM: Solver (including time spent in interface) took 3.499e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4933
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:28 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:28 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:28 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:29 PM: Finished problem compilation (took 1.127e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 304116
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.54e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3465e+03  5.35e+03  4.23e-01  1.63e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3497e-01  +6.3191e+02  6.31e+02  1.70e-01  8.38e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6461e+02  1.64e+02  1.47e-01  7.28e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5931e+01  1.54e+01  4.30e-02  2.10e+01  4.76e-06  1.96e-01  4.42e-01  
  5  +4.9999e-01  +1.0187e+00  5.19e-01  1.55e-03  7.86e-01  2.34e-05  1.91e-01  2.66e-01  
  6  +5.0000e-01  +7.5460e-01  2.55e-01  7.60e-04  3.86e-01  1.01e-05  9.10e-02  6.33e-01  
  7  +5.0000e-01  +6.0488e-01  1.05e-01  3.13e-04  1.59e-01  3.64e-06  3.70e-02  6.90e-01  
  8  +5.0000e-01  +5.6719e-01  6.72e-02  2.00e-04  1.02e-01  2.28e-06  2.03e-02  5.69e-01  
  9  +5.0000e-01  +5.5451e-01  5.45e-02  1.62e-04  8.25e-02  1.65e-06  8.22e-03  9.43e-01  
 10  +4.9997e-01  +5.2928e-01  2.93e-02  6.41e-05  3.26e-02  1.45e-05  3.64e-04  9.80e-01  
 11  +4.9880e-01  +5.2693e-01  2.81e-02  2.46e-06  1.25e-03  5.86e-04  8.38e-06  9.77e-01  
 12  +4.9770e-01  +5.2310e-01  2.54e-02  1.56e-06  7.95e-04  6.82e-04  5.41e-06  4.01e-01  
 13  +4.9740e-01  +5.2179e-01  2.44e-02  1.48e-06  7.53e-04  5.09e-04  5.17e-06  2.20e-01  
 14  +4.9730e-01  +5.2130e-01  2.40e-02  1.47e-06  7.48e-04  4.64e-04  5.15e-06  5.46e-02  
 15  +4.9590e-01  +5.1532e-01  1.94e-02  1.07e-06  5.47e-04  2.49e-04  3.89e-06  4.64e-01  
 16  +4.9577e-01  +5.1476e-01  1.90e-02  1.04e-06  5.32e-04  1.93e-04  3.80e-06  1.84e-01  
 17  +4.9521e-01  +5.1241e-01  1.72e-02  9.13e-07  4.65e-04  8.71e-05  3.36e-06  4.80e-01  
 18  +4.9513e-01  +5.1208e-01  1.69e-02  9.00e-07  4.59e-04  7.34e-05  3.32e-06  1.28e-01  
 19  +4.9240e-01  +5.0056e-01  8.16e-03  3.81e-07  1.94e-04  2.73e-05  1.48e-06  6.11e-01  
 20  +4.9010e-01  +4.9104e-01  9.37e-04  4.04e-08  2.06e-05  2.74e-07  1.70e-07  9.45e-01  
 21  +4.8978e-01  +4.8980e-01  1.13e-05  4.83e-10  2.46e-07  2.69e-09  2.09e-09  9.88e-01  
 22  +4.8978e-01  +4.8978e-01  1.13e-07  4.83e-12  2.46e-09  2.69e-11  2.09e-11  9.90e-01  
 23  +4.8978e-01  +4.8978e-01  1.13e-09  4.84e-14  2.47e-11  3.20e-13  2.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 525.691ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:29 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:29 PM: Optimal value: 4.898e-01
(CVXPY) Aug 30 12:20:29 PM: Compilation took 1.127e-01 seconds
(CVXPY) Aug 30 12:20:29 PM: Solver (including time spent in interface) took 5.570e-01 seconds
Iteration: 2, Objective: 0.4898
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:29 PM: Your problem has 25037 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:29 PM: Finished problem compilation (took 1.222e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25037
  constraints   = 50037
  nnz(P)        = 0
  nnz(A)        = 330075
  cones (total) = 1
    : Nonnegative = 1,  numel = 50037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.57e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3496e-01  +6.3184e+02  6.31e+02  1.70e-01  8.49e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6459e+02  1.64e+02  1.47e-01  7.38e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5930e+01  1.54e+01  4.30e-02  2.13e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0677e+00  5.68e-01  1.70e-03  8.72e-01  2.34e-05  1.91e-01  2.45e-01  
  6  +5.0001e-01  +7.8004e-01  2.80e-01  8.35e-04  4.30e-01  6.85e-06  8.51e-02  9.16e-01  
  7  +5.0000e-01  +6.0621e-01  1.06e-01  3.17e-04  1.63e-01  1.89e-06  3.38e-02  8.37e-01  
  8  +5.0000e-01  +5.8159e-01  8.16e-02  2.43e-04  1.25e-01  9.66e-07  2.02e-02  7.76e-01  
  9  +5.0000e-01  +5.5649e-01  5.65e-02  1.68e-04  8.67e-02  9.31e-07  9.19e-03  5.92e-01  
 10  +5.0000e-01  +5.5981e-01  5.98e-02  1.77e-04  9.11e-02  6.78e-07  4.38e-03  9.90e-01  
 11  +4.9998e-01  +5.4356e-01  4.36e-02  4.74e-05  2.45e-02  1.00e-05  1.79e-04  9.64e-01  
 12  +4.9960e-01  +5.4228e-01  4.27e-02  2.83e-06  1.46e-03  1.89e-04  9.18e-06  9.49e-01  
 13  +4.9938e-01  +5.4036e-01  4.10e-02  2.69e-06  1.39e-03  1.73e-04  8.77e-06  8.76e-02  
 14  +4.9910e-01  +5.3804e-01  3.89e-02  2.56e-06  1.32e-03  1.50e-04  8.40e-06  1.03e-01  
 15  +4.9885e-01  +5.3543e-01  3.66e-02  2.50e-06  1.29e-03  1.13e-04  8.22e-06  1.47e-01  
 16  +4.9856e-01  +5.3314e-01  3.46e-02  2.34e-06  1.21e-03  9.34e-05  7.75e-06  1.50e-01  
 17  +4.9821e-01  +5.3042e-01  3.22e-02  2.16e-06  1.12e-03  6.85e-05  7.22e-06  2.20e-01  
 18  +4.9769e-01  +5.2545e-01  2.78e-02  1.97e-06  1.02e-03  9.77e-06  6.70e-06  6.29e-01  
 19  +4.9711e-01  +5.2248e-01  2.54e-02  1.68e-06  8.70e-04  6.88e-06  5.79e-06  3.15e-01  
 20  +4.9714e-01  +5.2259e-01  2.54e-02  1.68e-06  8.69e-04  6.40e-06  5.77e-06  6.82e-02  
 21  +4.9579e-01  +5.1609e-01  2.03e-02  1.15e-06  5.96e-04  1.73e-06  4.02e-06  7.22e-01  
 22  +4.9430e-01  +5.0935e-01  1.51e-02  7.72e-07  3.99e-04  8.59e-07  2.74e-06  5.22e-01  
 23  +4.9334e-01  +5.0492e-01  1.16e-02  5.44e-07  2.81e-04  1.98e-08  1.96e-06  9.90e-01  
 24  +4.9121e-01  +4.9578e-01  4.57e-03  2.01e-07  1.04e-04  1.78e-08  7.63e-07  7.32e-01  
 25  +4.9021e-01  +4.9155e-01  1.33e-03  5.73e-08  2.96e-05  1.21e-08  2.32e-07  9.90e-01  
 26  +4.8980e-01  +4.8986e-01  5.88e-05  2.52e-09  1.30e-06  4.26e-10  1.08e-08  9.87e-01  
 27  +4.8978e-01  +4.8978e-01  5.91e-07  2.54e-11  1.31e-08  4.27e-12  1.10e-10  9.90e-01  
 28  +4.8978e-01  +4.8978e-01  5.91e-09  2.54e-13  1.31e-10  4.27e-14  1.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 743.92ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:30 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:30 PM: Optimal value: 4.898e-01
(CVXPY) Aug 30 12:20:30 PM: Compilation took 1.222e-01 seconds
(CVXPY) Aug 30 12:20:30 PM: Solver (including time spent in interface) took 7.784e-01 seconds
Iteration: 3, Objective: 0.4898
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:30 PM: Your problem has 25047 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:30 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:30 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:30 PM: Finished problem compilation (took 1.270e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25047
  constraints   = 50047
  nnz(P)        = 0
  nnz(A)        = 339317
  cones (total) = 1
    : Nonnegative = 1,  numel = 50047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3496e-01  +6.3179e+02  6.31e+02  1.70e-01  8.51e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6458e+02  1.64e+02  1.47e-01  7.39e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0122e-01  +1.5926e+01  1.54e+01  4.30e-02  2.14e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0002e-01  +1.3874e+00  8.87e-01  2.65e-03  1.36e+00  2.31e-05  1.93e-01  1.56e-01  
  6  +5.0001e-01  +8.3252e-01  3.33e-01  9.92e-04  5.12e-01  7.24e-06  9.48e-02  6.66e-01  
  7  +5.0001e-01  +7.3600e-01  2.36e-01  7.04e-04  3.63e-01  4.02e-06  6.75e-02  6.29e-01  
  8  +5.0001e-01  +6.1772e-01  1.18e-01  3.51e-04  1.81e-01  2.00e-06  3.48e-02  5.71e-01  
  9  +5.0001e-01  +6.0821e-01  1.08e-01  3.23e-04  1.67e-01  1.43e-06  2.76e-02  4.90e-01  
 10  +5.0001e-01  +5.9051e-01  9.05e-02  2.70e-04  1.39e-01  9.22e-07  1.83e-02  6.13e-01  
 11  +5.0000e-01  +5.6401e-01  6.40e-02  1.90e-04  9.82e-02  4.33e-07  6.96e-03  9.88e-01  
 12  +5.0000e-01  +5.4430e-01  4.43e-02  1.10e-04  5.66e-02  1.91e-06  7.18e-04  9.90e-01  
 13  +4.9982e-01  +5.4379e-01  4.40e-02  4.70e-06  2.43e-03  8.77e-05  1.51e-05  9.79e-01  
 14  +4.9949e-01  +5.4092e-01  4.14e-02  2.63e-06  1.36e-03  1.30e-04  8.44e-06  5.11e-01  
 15  +4.9908e-01  +5.3775e-01  3.87e-02  2.56e-06  1.32e-03  1.05e-04  8.22e-06  9.79e-02  
 16  +4.9869e-01  +5.3492e-01  3.62e-02  2.42e-06  1.25e-03  8.48e-05  7.81e-06  1.40e-01  
 17  +4.9767e-01  +5.2681e-01  2.91e-02  2.04e-06  1.06e-03  8.16e-06  6.72e-06  6.80e-01  
 18  +4.9768e-01  +5.2679e-01  2.91e-02  2.03e-06  1.05e-03  7.50e-06  6.67e-06  7.68e-02  
 19  +4.9760e-01  +5.2641e-01  2.88e-02  2.02e-06  1.04e-03  6.17e-06  6.60e-06  1.46e-01  
 20  +4.9716e-01  +5.2425e-01  2.71e-02  1.77e-06  9.19e-04  5.17e-06  5.82e-06  2.28e-01  
 21  +4.9640e-01  +5.2036e-01  2.40e-02  1.44e-06  7.46e-04  1.75e-06  4.73e-06  6.32e-01  
 22  +4.9498e-01  +5.1389e-01  1.89e-02  1.01e-06  5.22e-04  8.11e-07  3.32e-06  5.85e-01  
 23  +4.9398e-01  +5.0937e-01  1.54e-02  7.18e-07  3.72e-04  6.86e-08  2.34e-06  9.90e-01  
 24  +4.9263e-01  +5.0380e-01  1.12e-02  4.63e-07  2.40e-04  9.39e-08  1.51e-06  8.00e-01  
 25  +4.9080e-01  +4.9688e-01  6.07e-03  2.19e-07  1.13e-04  6.09e-08  7.29e-07  7.26e-01  
 26  +4.9079e-01  +4.9679e-01  6.00e-03  2.17e-07  1.13e-04  6.11e-08  7.24e-07  7.83e-02  
 27  +4.8932e-01  +4.9133e-01  2.01e-03  7.12e-08  3.69e-05  2.35e-08  2.42e-07  9.90e-01  
 28  +4.8853e-01  +4.8861e-01  7.58e-05  2.60e-09  1.35e-06  7.68e-10  8.98e-09  9.67e-01  
 29  +4.8850e-01  +4.8850e-01  7.69e-07  2.64e-11  1.37e-08  7.78e-12  9.12e-11  9.90e-01  
 30  +4.8850e-01  +4.8850e-01  7.69e-09  2.64e-13  1.37e-10  7.78e-14  9.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 737.6705ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:31 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:31 PM: Optimal value: 4.885e-01
(CVXPY) Aug 30 12:20:31 PM: Compilation took 1.270e-01 seconds
(CVXPY) Aug 30 12:20:31 PM: Solver (including time spent in interface) took 7.713e-01 seconds
Iteration: 4, Objective: 0.4885
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:31 PM: Your problem has 25057 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:31 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:31 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:31 PM: Finished problem compilation (took 1.419e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25057
  constraints   = 50057
  nnz(P)        = 0
  nnz(A)        = 359927
  cones (total) = 1
    : Nonnegative = 1,  numel = 50057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.23e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3495e-01  +6.3170e+02  6.31e+02  1.70e-01  8.57e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6455e+02  1.64e+02  1.47e-01  7.45e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5927e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0003e-01  +1.3970e+00  8.97e-01  2.68e-03  1.39e+00  2.32e-05  1.93e-01  1.55e-01  
  6  +5.0001e-01  +8.6184e-01  3.62e-01  1.08e-03  5.61e-01  8.14e-06  1.01e-01  5.89e-01  
  7  +5.0001e-01  +6.6857e-01  1.69e-01  5.03e-04  2.62e-01  3.30e-06  5.17e-02  6.75e-01  
  8  +5.0001e-01  +6.1577e-01  1.16e-01  3.45e-04  1.80e-01  2.03e-06  3.25e-02  5.48e-01  
  9  +5.0000e-01  +5.9137e-01  9.14e-02  2.72e-04  1.42e-01  1.48e-06  2.05e-02  5.54e-01  
 10  +5.0000e-01  +5.8443e-01  8.44e-02  2.52e-04  1.31e-01  1.30e-06  1.45e-02  4.60e-01  
 11  +5.0000e-01  +5.6710e-01  6.71e-02  1.99e-04  1.03e-01  9.31e-07  5.13e-03  9.90e-01  
 12  +4.9998e-01  +5.5027e-01  5.03e-02  6.66e-05  3.47e-02  1.12e-05  2.62e-04  9.58e-01  
 13  +4.9948e-01  +5.4843e-01  4.89e-02  3.56e-06  1.86e-03  2.46e-04  1.14e-05  9.56e-01  
 14  +4.9919e-01  +5.4572e-01  4.65e-02  3.29e-06  1.72e-03  2.26e-04  1.05e-05  1.25e-01  
 15  +4.9894e-01  +5.4250e-01  4.36e-02  3.17e-06  1.65e-03  1.73e-04  1.02e-05  1.60e-01  
 16  +4.9879e-01  +5.4069e-01  4.19e-02  3.05e-06  1.59e-03  1.46e-04  9.77e-06  1.34e-01  
 17  +4.9851e-01  +5.3698e-01  3.85e-02  2.86e-06  1.49e-03  8.58e-05  9.13e-06  3.25e-01  
 18  +4.9823e-01  +5.3406e-01  3.58e-02  2.58e-06  1.35e-03  5.25e-05  8.20e-06  3.74e-01  
 19  +4.9818e-01  +5.3350e-01  3.53e-02  2.55e-06  1.33e-03  4.37e-05  8.09e-06  1.36e-01  
 20  +4.9749e-01  +5.2973e-01  3.22e-02  2.06e-06  1.07e-03  3.95e-05  6.51e-06  2.67e-01  
 21  +4.9741e-01  +5.2943e-01  3.20e-02  2.05e-06  1.07e-03  3.67e-05  6.49e-06  5.02e-02  
 22  +4.9671e-01  +5.2591e-01  2.92e-02  1.69e-06  8.80e-04  2.74e-05  5.33e-06  3.48e-01  
 23  +4.9666e-01  +5.2571e-01  2.90e-02  1.68e-06  8.79e-04  2.66e-05  5.32e-06  1.54e-02  
 24  +4.9497e-01  +5.1816e-01  2.32e-02  1.16e-06  6.04e-04  1.90e-05  3.67e-06  4.18e-01  
 25  +4.9416e-01  +5.1473e-01  2.06e-02  9.57e-07  5.00e-04  1.45e-05  3.04e-06  2.85e-01  
 26  +4.9410e-01  +5.1451e-01  2.04e-02  9.56e-07  4.99e-04  1.41e-05  3.04e-06  1.09e-02  
 27  +4.9283e-01  +5.0933e-01  1.65e-02  7.16e-07  3.73e-04  9.72e-06  2.29e-06  3.52e-01  
 28  +4.9189e-01  +5.0503e-01  1.31e-02  5.35e-07  2.79e-04  1.63e-06  1.73e-06  7.68e-01  
 29  +4.9014e-01  +4.9828e-01  8.14e-03  3.10e-07  1.62e-04  4.42e-07  1.01e-06  7.34e-01  
 30  +4.8942e-01  +4.9553e-01  6.10e-03  2.27e-07  1.18e-04  2.43e-07  7.52e-07  4.98e-01  
 31  +4.8753e-01  +4.8862e-01  1.09e-03  3.89e-08  2.03e-05  2.84e-08  1.34e-07  8.88e-01  
 32  +4.8726e-01  +4.8770e-01  4.33e-04  1.53e-08  7.96e-06  6.02e-09  5.35e-08  9.79e-01  
 33  +4.8708e-01  +4.8709e-01  7.37e-06  2.59e-10  1.35e-07  9.80e-11  9.17e-10  9.87e-01  
 34  +4.8708e-01  +4.8708e-01  7.37e-08  2.59e-12  1.35e-09  9.80e-13  9.17e-12  9.90e-01  
 35  +4.8708e-01  +4.8708e-01  7.41e-10  2.60e-14  1.36e-11  1.25e-14  1.16e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 924.1954ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:32 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:32 PM: Optimal value: 4.871e-01
(CVXPY) Aug 30 12:20:32 PM: Compilation took 1.419e-01 seconds
(CVXPY) Aug 30 12:20:32 PM: Solver (including time spent in interface) took 9.600e-01 seconds
Iteration: 5, Objective: 0.4871
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:33 PM: Your problem has 25067 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:33 PM: Finished problem compilation (took 1.578e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25067
  constraints   = 50067
  nnz(P)        = 0
  nnz(A)        = 371691
  cones (total) = 1
    : Nonnegative = 1,  numel = 50067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.23e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3166e+02  6.31e+02  1.70e-01  8.59e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6454e+02  1.64e+02  1.47e-01  7.46e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0122e-01  +1.5926e+01  1.54e+01  4.30e-02  2.16e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0003e-01  +1.3992e+00  8.99e-01  2.69e-03  1.40e+00  2.32e-05  1.93e-01  1.56e-01  
  6  +5.0001e-01  +7.9520e-01  2.95e-01  8.81e-04  4.59e-01  6.08e-06  8.51e-02  7.49e-01  
  7  +5.0001e-01  +7.1038e-01  2.10e-01  6.28e-04  3.27e-01  3.53e-06  5.98e-02  5.93e-01  
  8  +5.0001e-01  +6.1349e-01  1.13e-01  3.39e-04  1.77e-01  1.96e-06  3.12e-02  5.67e-01  
  9  +5.0000e-01  +5.9573e-01  9.57e-02  2.85e-04  1.49e-01  1.37e-06  1.91e-02  6.66e-01  
 10  +5.0000e-01  +5.5963e-01  5.96e-02  1.77e-04  9.23e-02  1.72e-06  5.28e-03  8.10e-01  
 11  +4.9998e-01  +5.5725e-01  5.73e-02  1.33e-04  6.93e-02  9.66e-06  7.67e-04  8.74e-01  
 12  +4.9945e-01  +5.5517e-01  5.57e-02  8.06e-06  4.22e-03  2.70e-04  2.59e-05  9.66e-01  
 13  +4.9889e-01  +5.5077e-01  5.19e-02  4.49e-06  2.35e-03  4.00e-04  1.43e-05  5.02e-01  
 14  +4.9896e-01  +5.4706e-01  4.81e-02  4.27e-06  2.23e-03  2.48e-04  1.35e-05  3.12e-01  
 15  +4.9898e-01  +5.4513e-01  4.62e-02  4.11e-06  2.15e-03  1.81e-04  1.30e-05  2.42e-01  
 16  +4.9779e-01  +5.3830e-01  4.05e-02  2.51e-06  1.31e-03  2.12e-04  7.94e-06  4.38e-01  
 17  +4.9762e-01  +5.3720e-01  3.96e-02  2.33e-06  1.22e-03  1.86e-04  7.36e-06  1.79e-01  
 18  +4.9746e-01  +5.3610e-01  3.86e-02  2.31e-06  1.21e-03  1.55e-04  7.29e-06  1.20e-01  
 19  +4.9661e-01  +5.3187e-01  3.53e-02  1.96e-06  1.03e-03  1.18e-04  6.21e-06  2.90e-01  
 20  +4.9593e-01  +5.2875e-01  3.28e-02  1.73e-06  9.07e-04  1.01e-04  5.51e-06  1.86e-01  
 21  +4.9581e-01  +5.2795e-01  3.21e-02  1.72e-06  9.00e-04  8.50e-05  5.46e-06  1.10e-01  
 22  +4.9481e-01  +5.2366e-01  2.88e-02  1.45e-06  7.61e-04  7.22e-05  4.64e-06  1.99e-01  
 23  +4.9478e-01  +5.2342e-01  2.86e-02  1.44e-06  7.55e-04  6.71e-05  4.61e-06  5.73e-02  
 24  +4.9320e-01  +5.1641e-01  2.32e-02  1.09e-06  5.72e-04  3.33e-05  3.52e-06  4.78e-01  
 25  +4.9042e-01  +5.0455e-01  1.41e-02  5.92e-07  3.10e-04  3.78e-06  1.93e-06  8.29e-01  
 26  +4.8824e-01  +4.9589e-01  7.64e-03  2.97e-07  1.55e-04  6.42e-07  9.79e-07  8.24e-01  
 27  +4.8782e-01  +4.9424e-01  6.42e-03  2.43e-07  1.27e-04  3.51e-07  8.01e-07  5.17e-01  
 28  +4.8774e-01  +4.9394e-01  6.20e-03  2.35e-07  1.23e-04  2.71e-07  7.75e-07  2.78e-01  
 29  +4.8651e-01  +4.8935e-01  2.84e-03  1.05e-07  5.48e-05  5.75e-08  3.49e-07  8.93e-01  
 30  +4.8571e-01  +4.8644e-01  7.35e-04  2.69e-08  1.41e-05  1.40e-08  9.05e-08  7.85e-01  
 31  +4.8549e-01  +4.8569e-01  2.04e-04  7.06e-09  3.69e-06  3.01e-09  2.43e-08  9.73e-01  
 32  +4.8540e-01  +4.8540e-01  3.27e-06  1.12e-10  5.87e-08  4.89e-11  3.88e-10  9.84e-01  
 33  +4.8540e-01  +4.8540e-01  3.27e-08  1.12e-12  5.87e-10  4.89e-13  3.89e-12  9.90e-01  
 34  +4.8540e-01  +4.8540e-01  3.31e-10  1.13e-14  5.95e-12  8.37e-15  6.47e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 970.7589ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:34 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:34 PM: Optimal value: 4.854e-01
(CVXPY) Aug 30 12:20:34 PM: Compilation took 1.578e-01 seconds
(CVXPY) Aug 30 12:20:34 PM: Solver (including time spent in interface) took 1.009e+00 seconds
Iteration: 6, Objective: 0.4854
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:34 PM: Your problem has 25077 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:34 PM: Finished problem compilation (took 1.517e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25077
  constraints   = 50077
  nnz(P)        = 0
  nnz(A)        = 383056
  cones (total) = 1
    : Nonnegative = 1,  numel = 50077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3159e+02  6.31e+02  1.70e-01  8.60e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6452e+02  1.64e+02  1.47e-01  7.48e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0122e-01  +1.5926e+01  1.54e+01  4.30e-02  2.16e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0003e-01  +1.4124e+00  9.12e-01  2.73e-03  1.42e+00  2.32e-05  1.93e-01  1.54e-01  
  6  +5.0001e-01  +8.4288e-01  3.43e-01  1.02e-03  5.35e-01  7.39e-06  9.57e-02  6.71e-01  
  7  +5.0001e-01  +7.3268e-01  2.33e-01  6.94e-04  3.63e-01  4.29e-06  6.53e-02  5.73e-01  
  8  +5.0001e-01  +6.3486e-01  1.35e-01  4.02e-04  2.10e-01  2.55e-06  3.64e-02  5.34e-01  
  9  +5.0001e-01  +6.1748e-01  1.17e-01  3.50e-04  1.83e-01  1.99e-06  2.48e-02  5.35e-01  
 10  +5.0000e-01  +5.7146e-01  7.15e-02  2.12e-04  1.11e-01  1.84e-06  7.08e-03  8.99e-01  
 11  +4.9998e-01  +5.6712e-01  6.71e-02  1.59e-04  8.29e-02  1.03e-05  9.45e-04  9.11e-01  
 12  +4.9951e-01  +5.6500e-01  6.55e-02  1.20e-05  6.27e-03  2.39e-04  3.87e-05  9.59e-01  
 13  +4.9884e-01  +5.5298e-01  5.41e-02  4.42e-06  2.32e-03  3.79e-04  1.41e-05  8.24e-01  
 14  +4.9882e-01  +5.5205e-01  5.32e-02  4.39e-06  2.30e-03  3.38e-04  1.40e-05  8.31e-02  
 15  +4.9856e-01  +5.4914e-01  5.06e-02  4.02e-06  2.11e-03  2.54e-04  1.28e-05  2.84e-01  
 16  +4.9771e-01  +5.4405e-01  4.63e-02  3.16e-06  1.66e-03  2.24e-04  1.01e-05  3.28e-01  
 17  +4.9772e-01  +5.4383e-01  4.61e-02  3.10e-06  1.62e-03  2.06e-04  9.89e-06  9.76e-02  
 18  +4.9759e-01  +5.4267e-01  4.51e-02  3.05e-06  1.60e-03  1.62e-04  9.75e-06  1.69e-01  
 19  +4.9725e-01  +5.4091e-01  4.37e-02  2.81e-06  1.47e-03  1.50e-04  8.97e-06  1.44e-01  
 20  +4.9701e-01  +5.3903e-01  4.20e-02  2.68e-06  1.41e-03  8.38e-05  8.57e-06  3.73e-01  
 21  +4.9592e-01  +5.3410e-01  3.82e-02  2.19e-06  1.15e-03  6.62e-05  7.03e-06  3.13e-01  
 22  +4.9581e-01  +5.3371e-01  3.79e-02  2.19e-06  1.15e-03  6.37e-05  7.03e-06  1.91e-02  
 23  +4.9291e-01  +5.2098e-01  2.81e-02  1.38e-06  7.26e-04  1.40e-05  4.51e-06  7.59e-01  
 24  +4.9025e-01  +5.1017e-01  1.99e-02  8.97e-07  4.70e-04  7.49e-06  2.97e-06  4.73e-01  
 25  +4.9025e-01  +5.1013e-01  1.99e-02  8.94e-07  4.69e-04  7.18e-06  2.96e-06  3.92e-02  
 26  +4.8735e-01  +4.9863e-01  1.13e-02  4.64e-07  2.43e-04  2.39e-06  1.56e-06  6.63e-01  
 27  +4.8622e-01  +4.9418e-01  7.96e-03  3.15e-07  1.65e-04  1.01e-06  1.07e-06  5.94e-01  
 28  +4.8426e-01  +4.8675e-01  2.49e-03  9.49e-08  4.98e-05  1.57e-07  3.29e-07  8.56e-01  
 29  +4.8358e-01  +4.8427e-01  6.86e-04  2.58e-08  1.35e-05  1.92e-08  9.03e-08  9.16e-01  
 30  +4.8333e-01  +4.8337e-01  3.40e-05  1.27e-09  6.67e-07  9.18e-10  4.48e-09  9.53e-01  
 31  +4.8332e-01  +4.8332e-01  6.53e-07  2.45e-11  1.28e-08  1.45e-11  8.61e-11  9.87e-01  
 32  +4.8332e-01  +4.8332e-01  6.54e-09  2.45e-13  1.28e-10  1.56e-13  9.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 903.8804ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:35 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:35 PM: Optimal value: 4.833e-01
(CVXPY) Aug 30 12:20:35 PM: Compilation took 1.517e-01 seconds
(CVXPY) Aug 30 12:20:35 PM: Solver (including time spent in interface) took 9.444e-01 seconds
Iteration: 7, Objective: 0.4833
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:35 PM: Your problem has 25087 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:35 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:35 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:35 PM: Finished problem compilation (took 1.719e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25087
  constraints   = 50087
  nnz(P)        = 0
  nnz(A)        = 392499
  cones (total) = 1
    : Nonnegative = 1,  numel = 50087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3469e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3147e+02  6.31e+02  1.70e-01  8.61e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6448e+02  1.64e+02  1.47e-01  7.49e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5929e+01  1.54e+01  4.30e-02  2.17e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0003e-01  +1.4212e+00  9.21e-01  2.76e-03  1.44e+00  2.33e-05  1.93e-01  1.53e-01  
  6  +5.0001e-01  +8.3273e-01  3.33e-01  9.93e-04  5.20e-01  7.33e-06  9.38e-02  6.11e-01  
  7  +5.0000e-01  +6.3945e-01  1.39e-01  4.16e-04  2.18e-01  3.04e-06  4.17e-02  6.64e-01  
  8  +5.0000e-01  +6.2211e-01  1.22e-01  3.64e-04  1.91e-01  2.80e-06  3.11e-02  3.26e-01  
  9  +5.0000e-01  +6.1499e-01  1.15e-01  3.43e-04  1.80e-01  2.66e-06  2.11e-02  4.89e-01  
 10  +5.0000e-01  +6.0480e-01  1.05e-01  3.12e-04  1.63e-01  2.99e-06  1.06e-02  6.61e-01  
 11  +5.0000e-01  +5.8650e-01  8.65e-02  2.48e-04  1.30e-01  3.85e-06  3.11e-03  9.90e-01  
 12  +4.9984e-01  +5.8129e-01  8.14e-02  3.75e-05  1.97e-02  8.10e-05  1.28e-04  9.63e-01  
 13  +4.9896e-01  +5.7558e-01  7.66e-02  6.46e-06  3.40e-03  4.48e-04  2.11e-05  8.42e-01  
 14  +4.9844e-01  +5.6762e-01  6.92e-02  5.55e-06  2.92e-03  3.61e-04  1.81e-05  2.56e-01  
 15  +4.9814e-01  +5.6028e-01  6.21e-02  4.82e-06  2.53e-03  2.24e-04  1.56e-05  3.82e-01  
 16  +4.9810e-01  +5.5877e-01  6.07e-02  4.71e-06  2.48e-03  1.91e-04  1.52e-05  1.30e-01  
 17  +4.9746e-01  +5.5331e-01  5.58e-02  3.82e-06  2.01e-03  1.52e-04  1.23e-05  3.59e-01  
 18  +4.9738e-01  +5.5277e-01  5.54e-02  3.81e-06  2.00e-03  1.43e-04  1.23e-05  3.78e-02  
 19  +4.9695e-01  +5.4976e-01  5.28e-02  3.38e-06  1.78e-03  1.18e-04  1.09e-05  2.56e-01  
 20  +4.9678e-01  +5.4796e-01  5.12e-02  3.30e-06  1.73e-03  8.77e-05  1.06e-05  1.97e-01  
 21  +4.9572e-01  +5.4258e-01  4.69e-02  2.76e-06  1.45e-03  6.92e-05  8.94e-06  2.95e-01  
 22  +4.9337e-01  +5.2952e-01  3.62e-02  1.97e-06  1.04e-03  4.36e-06  6.49e-06  8.06e-01  
 23  +4.9105e-01  +5.1953e-01  2.85e-02  1.42e-06  7.45e-04  2.46e-06  4.73e-06  4.58e-01  
 24  +4.9104e-01  +5.1944e-01  2.84e-02  1.41e-06  7.42e-04  2.32e-06  4.71e-06  5.37e-02  
 25  +4.9063e-01  +5.1723e-01  2.66e-02  1.26e-06  6.64e-04  7.84e-07  4.21e-06  6.57e-01  
 26  +4.8750e-01  +5.0435e-01  1.69e-02  7.46e-07  3.92e-04  4.07e-07  2.53e-06  5.09e-01  
 27  +4.8377e-01  +4.8921e-01  5.44e-03  2.22e-07  1.17e-04  1.01e-07  7.72e-07  7.81e-01  
 28  +4.8278e-01  +4.8534e-01  2.55e-03  1.01e-07  5.30e-05  4.45e-08  3.55e-07  6.18e-01  
 29  +4.8279e-01  +4.8535e-01  2.56e-03  1.01e-07  5.30e-05  4.46e-08  3.54e-07  2.72e-02  
 30  +4.8278e-01  +4.8532e-01  2.54e-03  1.00e-07  5.26e-05  4.29e-08  3.51e-07  7.91e-02  
 31  +4.8217e-01  +4.8300e-01  8.23e-04  3.19e-08  1.67e-05  1.29e-08  1.13e-07  7.52e-01  
 32  +4.8192e-01  +4.8206e-01  1.37e-04  5.25e-09  2.75e-06  2.10e-09  1.87e-08  8.66e-01  
 33  +4.8188e-01  +4.8189e-01  1.77e-05  6.75e-10  3.54e-07  2.65e-10  2.40e-09  8.78e-01  
 34  +4.8187e-01  +4.8187e-01  3.22e-07  1.23e-11  6.45e-09  4.37e-12  4.38e-11  9.90e-01  
 35  +4.8187e-01  +4.8187e-01  3.22e-09  1.23e-13  6.45e-11  4.37e-14  4.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1557211s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:37 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:37 PM: Optimal value: 4.819e-01
(CVXPY) Aug 30 12:20:37 PM: Compilation took 1.719e-01 seconds
(CVXPY) Aug 30 12:20:37 PM: Solver (including time spent in interface) took 1.195e+00 seconds
Iteration: 8, Objective: 0.4819
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:37 PM: Your problem has 25097 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:37 PM: Finished problem compilation (took 1.667e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25097
  constraints   = 50097
  nnz(P)        = 0
  nnz(A)        = 402105
  cones (total) = 1
    : Nonnegative = 1,  numel = 50097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.62e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3473e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3491e-01  +6.3130e+02  6.31e+02  1.70e-01  8.62e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6445e+02  1.64e+02  1.47e-01  7.49e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5938e+01  1.54e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0003e-01  +1.4546e+00  9.55e-01  2.86e-03  1.49e+00  2.32e-05  1.93e-01  1.48e-01  
  6  +5.0001e-01  +7.7828e-01  2.78e-01  8.31e-04  4.35e-01  5.84e-06  8.10e-02  6.34e-01  
  7  +5.0001e-01  +6.6819e-01  1.68e-01  5.02e-04  2.63e-01  3.31e-06  4.76e-02  5.80e-01  
  8  +5.0000e-01  +6.2621e-01  1.26e-01  3.77e-04  1.97e-01  2.64e-06  2.92e-02  4.96e-01  
  9  +5.0001e-01  +6.2276e-01  1.23e-01  3.66e-04  1.92e-01  2.29e-06  1.78e-02  6.77e-01  
 10  +5.0000e-01  +6.1216e-01  1.12e-01  3.33e-04  1.74e-01  2.69e-06  9.48e-03  5.88e-01  
 11  +4.9998e-01  +5.9269e-01  9.27e-02  2.17e-04  1.14e-01  1.27e-05  1.30e-03  8.83e-01  
 12  +4.9951e-01  +5.8528e-01  8.58e-02  1.83e-05  9.65e-03  2.41e-04  6.05e-05  9.59e-01  
 13  +4.9945e-01  +5.7405e-01  7.46e-02  1.22e-05  6.43e-03  2.07e-04  3.99e-05  5.71e-01  
 14  +4.9916e-01  +5.7156e-01  7.24e-02  8.93e-06  4.70e-03  2.59e-04  2.90e-05  3.00e-01  
 15  +4.9920e-01  +5.6126e-01  6.21e-02  6.98e-06  3.67e-03  8.29e-05  2.24e-05  7.53e-01  
 16  +4.9898e-01  +5.5831e-01  5.93e-02  5.76e-06  3.03e-03  5.62e-05  1.84e-05  5.18e-01  
 17  +4.9873e-01  +5.5600e-01  5.73e-02  4.94e-06  2.60e-03  3.02e-05  1.58e-05  5.80e-01  
 18  +4.9813e-01  +5.5295e-01  5.48e-02  4.00e-06  2.11e-03  3.18e-05  1.28e-05  2.34e-01  
 19  +4.9790e-01  +5.5188e-01  5.40e-02  3.76e-06  1.98e-03  2.53e-05  1.20e-05  2.52e-01  
 20  +4.9743e-01  +5.4961e-01  5.22e-02  3.47e-06  1.83e-03  1.88e-05  1.11e-05  2.86e-01  
 21  +4.9669e-01  +5.4613e-01  4.94e-02  3.18e-06  1.67e-03  1.30e-05  1.02e-05  3.04e-01  
 22  +4.9311e-01  +5.3062e-01  3.75e-02  1.93e-06  1.02e-03  5.81e-06  6.28e-06  6.82e-01  
 23  +4.9194e-01  +5.2579e-01  3.39e-02  1.68e-06  8.83e-04  4.88e-06  5.50e-06  1.76e-01  
 24  +4.9189e-01  +5.2551e-01  3.36e-02  1.67e-06  8.80e-04  4.55e-06  5.49e-06  5.24e-02  
 25  +4.8900e-01  +5.1361e-01  2.46e-02  1.13e-06  5.96e-04  3.01e-06  3.77e-06  3.64e-01  
 26  +4.8798e-01  +5.0922e-01  2.12e-02  9.28e-07  4.88e-04  1.29e-06  3.11e-06  5.80e-01  
 27  +4.8543e-01  +4.9896e-01  1.35e-02  5.45e-07  2.87e-04  1.24e-07  1.87e-06  9.58e-01  
 28  +4.8456e-01  +4.9562e-01  1.11e-02  4.33e-07  2.28e-04  1.19e-07  1.50e-06  7.72e-01  
 29  +4.8369e-01  +4.9236e-01  8.68e-03  3.36e-07  1.76e-04  9.42e-08  1.17e-06  3.07e-01  
 30  +4.8189e-01  +4.8559e-01  3.71e-03  1.39e-07  7.31e-05  4.38e-08  4.99e-07  9.90e-01  
 31  +4.8063e-01  +4.8105e-01  4.22e-04  1.55e-08  8.17e-06  4.98e-09  5.73e-08  9.90e-01  
 32  +4.8046e-01  +4.8047e-01  4.66e-06  1.71e-10  9.00e-08  5.49e-11  6.34e-10  9.90e-01  
 33  +4.8046e-01  +4.8046e-01  4.66e-08  1.71e-12  9.00e-10  5.49e-13  6.34e-12  9.90e-01  
 34  +4.8046e-01  +4.8046e-01  4.68e-10  1.72e-14  9.04e-12  6.53e-15  7.49e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0001015s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:38 PM: Optimal value: 4.805e-01
(CVXPY) Aug 30 12:20:38 PM: Compilation took 1.667e-01 seconds
(CVXPY) Aug 30 12:20:38 PM: Solver (including time spent in interface) took 1.042e+00 seconds
Iteration: 9, Objective: 0.4805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:38 PM: Your problem has 25107 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:38 PM: Finished problem compilation (took 1.804e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25107
  constraints   = 50107
  nnz(P)        = 0
  nnz(A)        = 409943
  cones (total) = 1
    : Nonnegative = 1,  numel = 50107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.62e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3474e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3490e-01  +6.3124e+02  6.31e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6443e+02  1.64e+02  1.47e-01  7.50e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5938e+01  1.54e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0003e-01  +1.4525e+00  9.53e-01  2.85e-03  1.49e+00  2.33e-05  1.93e-01  1.49e-01  
  6  +5.0001e-01  +7.5362e-01  2.54e-01  7.57e-04  3.97e-01  5.22e-06  7.48e-02  6.74e-01  
  7  +5.0001e-01  +6.9661e-01  1.97e-01  5.87e-04  3.08e-01  3.70e-06  5.41e-02  4.69e-01  
  8  +5.0001e-01  +6.6269e-01  1.63e-01  4.86e-04  2.55e-01  3.19e-06  4.10e-02  2.92e-01  
  9  +5.0000e-01  +6.2761e-01  1.28e-01  3.81e-04  2.00e-01  2.72e-06  2.37e-02  5.56e-01  
 10  +5.0000e-01  +6.2021e-01  1.20e-01  3.57e-04  1.87e-01  2.61e-06  1.10e-02  8.27e-01  
 11  +4.9999e-01  +6.0147e-01  1.01e-01  2.59e-04  1.36e-01  1.01e-05  1.86e-03  8.56e-01  
 12  +4.9942e-01  +5.9108e-01  9.17e-02  1.71e-05  9.02e-03  2.82e-04  5.67e-05  9.74e-01  
 13  +4.9924e-01  +5.7886e-01  7.96e-02  1.09e-05  5.75e-03  2.66e-04  3.58e-05  5.66e-01  
 14  +4.9901e-01  +5.7481e-01  7.58e-02  8.86e-06  4.66e-03  2.64e-04  2.89e-05  2.86e-01  
 15  +4.9911e-01  +5.6838e-01  6.93e-02  8.15e-06  4.29e-03  1.30e-04  2.64e-05  4.68e-01  
 16  +4.9837e-01  +5.6240e-01  6.40e-02  5.38e-06  2.84e-03  1.46e-04  1.74e-05  4.46e-01  
 17  +4.9839e-01  +5.6185e-01  6.35e-02  5.23e-06  2.75e-03  1.24e-04  1.68e-05  1.69e-01  
 18  +4.9826e-01  +5.6082e-01  6.26e-02  5.10e-06  2.69e-03  1.11e-04  1.64e-05  1.11e-01  
 19  +4.9762e-01  +5.5713e-01  5.95e-02  4.26e-06  2.25e-03  1.05e-04  1.37e-05  2.55e-01  
 20  +4.9761e-01  +5.5677e-01  5.92e-02  4.24e-06  2.23e-03  9.35e-05  1.37e-05  9.08e-02  
 21  +4.9697e-01  +5.5331e-01  5.63e-02  3.67e-06  1.93e-03  8.28e-05  1.19e-05  2.39e-01  
 22  +4.9680e-01  +5.5250e-01  5.57e-02  3.66e-06  1.93e-03  7.72e-05  1.18e-05  4.14e-02  
 23  +4.9517e-01  +5.4430e-01  4.91e-02  2.94e-06  1.55e-03  4.98e-05  9.57e-06  4.03e-01  
 24  +4.9266e-01  +5.3265e-01  4.00e-02  2.15e-06  1.13e-03  3.48e-05  7.11e-06  3.63e-01  
 25  +4.8963e-01  +5.1861e-01  2.90e-02  1.43e-06  7.51e-04  1.27e-05  4.78e-06  5.96e-01  
 26  +4.8789e-01  +5.1098e-01  2.31e-02  1.07e-06  5.65e-04  7.90e-06  3.63e-06  3.91e-01  
 27  +4.8781e-01  +5.1068e-01  2.29e-02  1.07e-06  5.62e-04  7.45e-06  3.62e-06  3.79e-02  
 28  +4.8461e-01  +4.9702e-01  1.24e-02  5.31e-07  2.79e-04  2.03e-06  1.83e-06  7.28e-01  
 29  +4.8353e-01  +4.9247e-01  8.93e-03  3.70e-07  1.95e-04  7.45e-07  1.28e-06  6.60e-01  
 30  +4.8152e-01  +4.8440e-01  2.88e-03  1.17e-07  6.13e-05  2.04e-07  4.13e-07  7.28e-01  
 31  +4.8136e-01  +4.8376e-01  2.41e-03  9.58e-08  5.04e-05  1.47e-07  3.41e-07  3.19e-01  
 32  +4.8119e-01  +4.8313e-01  1.95e-03  7.64e-08  4.02e-05  1.15e-07  2.73e-07  2.35e-01  
 33  +4.8109e-01  +4.8277e-01  1.68e-03  6.48e-08  3.41e-05  3.76e-08  2.33e-07  7.98e-01  
 34  +4.8106e-01  +4.8264e-01  1.58e-03  6.09e-08  3.21e-05  3.54e-08  2.19e-07  6.18e-02  
 35  +4.8064e-01  +4.8111e-01  4.72e-04  1.76e-08  9.24e-06  9.05e-09  6.44e-08  8.04e-01  
 36  +4.8046e-01  +4.8047e-01  1.06e-05  3.88e-10  2.04e-07  1.60e-10  1.44e-09  9.90e-01  
 37  +4.8046e-01  +4.8046e-01  1.06e-07  3.89e-12  2.05e-09  1.60e-12  1.44e-11  9.90e-01  
 38  +4.8046e-01  +4.8046e-01  1.07e-09  3.93e-14  2.07e-11  2.49e-14  2.19e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.129657s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:40 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:40 PM: Optimal value: 4.805e-01
(CVXPY) Aug 30 12:20:40 PM: Compilation took 1.804e-01 seconds
(CVXPY) Aug 30 12:20:40 PM: Solver (including time spent in interface) took 1.172e+00 seconds
Iteration: 10, Objective: 0.4805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:40 PM: Your problem has 25117 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:40 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:40 PM: Finished problem compilation (took 1.689e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25117
  constraints   = 50117
  nnz(P)        = 0
  nnz(A)        = 417137
  cones (total) = 1
    : Nonnegative = 1,  numel = 50117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.62e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3475e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3118e+02  6.31e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6442e+02  1.64e+02  1.47e-01  7.51e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5942e+01  1.54e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0003e-01  +1.4650e+00  9.65e-01  2.89e-03  1.51e+00  2.33e-05  1.93e-01  1.47e-01  
  6  +5.0001e-01  +7.7694e-01  2.77e-01  8.27e-04  4.34e-01  5.72e-06  8.01e-02  6.61e-01  
  7  +5.0001e-01  +6.8243e-01  1.82e-01  5.45e-04  2.86e-01  3.39e-06  4.98e-02  5.97e-01  
  8  +5.0001e-01  +6.2954e-01  1.30e-01  3.87e-04  2.03e-01  2.31e-06  2.66e-02  6.95e-01  
  9  +5.0000e-01  +6.1715e-01  1.17e-01  3.49e-04  1.83e-01  2.62e-06  1.55e-02  5.02e-01  
 10  +5.0000e-01  +6.0038e-01  1.00e-01  2.90e-04  1.52e-01  6.04e-06  4.05e-03  8.06e-01  
 11  +4.9956e-01  +5.7942e-01  7.99e-02  2.37e-05  1.25e-02  2.19e-04  7.97e-05  9.90e-01  
 12  +4.9893e-01  +5.7466e-01  7.57e-02  1.05e-05  5.54e-03  4.40e-04  3.47e-05  6.00e-01  
 13  +4.9914e-01  +5.7027e-01  7.11e-02  9.68e-06  5.10e-03  2.68e-04  3.16e-05  4.10e-01  
 14  +4.9925e-01  +5.6484e-01  6.56e-02  8.26e-06  4.35e-03  1.01e-04  2.67e-05  6.90e-01  
 15  +4.9881e-01  +5.6196e-01  6.32e-02  6.10e-06  3.22e-03  1.17e-04  1.97e-05  3.24e-01  
 16  +4.9857e-01  +5.6030e-01  6.17e-02  5.28e-06  2.78e-03  9.45e-05  1.70e-05  3.66e-01  
 17  +4.9841e-01  +5.5941e-01  6.10e-02  4.93e-06  2.60e-03  8.10e-05  1.59e-05  2.21e-01  
 18  +4.9776e-01  +5.5600e-01  5.82e-02  4.18e-06  2.21e-03  6.29e-05  1.35e-05  3.70e-01  
 19  +4.9731e-01  +5.5377e-01  5.65e-02  3.85e-06  2.03e-03  5.47e-05  1.24e-05  1.89e-01  
 20  +4.9597e-01  +5.4667e-01  5.07e-02  3.36e-06  1.77e-03  1.13e-05  1.10e-05  6.85e-01  
 21  +4.9346e-01  +5.3559e-01  4.21e-02  2.38e-06  1.25e-03  9.54e-06  7.86e-06  3.31e-01  
 22  +4.9171e-01  +5.2759e-01  3.59e-02  1.93e-06  1.02e-03  3.26e-06  6.43e-06  5.85e-01  
 23  +4.8885e-01  +5.1522e-01  2.64e-02  1.29e-06  6.82e-04  1.91e-06  4.37e-06  4.44e-01  
 24  +4.8785e-01  +5.1079e-01  2.29e-02  1.05e-06  5.52e-04  7.43e-07  3.54e-06  6.59e-01  
 25  +4.8760e-01  +5.0980e-01  2.22e-02  1.00e-06  5.29e-04  6.64e-07  3.40e-06  1.36e-01  
 26  +4.8715e-01  +5.0801e-01  2.09e-02  9.33e-07  4.92e-04  5.44e-07  3.17e-06  2.20e-01  
 27  +4.8385e-01  +4.9436e-01  1.05e-02  4.44e-07  2.34e-04  2.33e-07  1.54e-06  6.03e-01  
 28  +4.8215e-01  +4.8734e-01  5.20e-03  2.13e-07  1.12e-04  8.71e-08  7.48e-07  7.37e-01  
 29  +4.8145e-01  +4.8449e-01  3.04e-03  1.23e-07  6.48e-05  3.92e-08  4.36e-07  8.30e-01  
 30  +4.8081e-01  +4.8197e-01  1.16e-03  4.68e-08  2.47e-05  1.31e-08  1.67e-07  9.90e-01  
 31  +4.8048e-01  +4.8069e-01  2.08e-04  8.43e-09  4.44e-06  2.34e-09  3.03e-08  9.18e-01  
 32  +4.8041e-01  +4.8041e-01  5.05e-06  2.04e-10  1.08e-07  5.58e-11  7.35e-10  9.90e-01  
 33  +4.8041e-01  +4.8041e-01  5.32e-08  2.15e-12  1.13e-09  5.88e-13  7.74e-12  9.89e-01  
 34  +4.8041e-01  +4.8041e-01  3.62e-09  1.46e-13  7.71e-11  3.98e-14  5.25e-13  9.32e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0607119s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:41 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:41 PM: Optimal value: 4.804e-01
(CVXPY) Aug 30 12:20:41 PM: Compilation took 1.689e-01 seconds
(CVXPY) Aug 30 12:20:41 PM: Solver (including time spent in interface) took 1.102e+00 seconds
Iteration: 11, Objective: 0.4804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:41 PM: Your problem has 25127 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:41 PM: Finished problem compilation (took 1.961e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25127
  constraints   = 50127
  nnz(P)        = 0
  nnz(A)        = 422687
  cones (total) = 1
    : Nonnegative = 1,  numel = 50127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8411e-01  +5.3477e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3488e-01  +6.3107e+02  6.31e+02  1.70e-01  8.64e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6439e+02  1.64e+02  1.47e-01  7.51e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5946e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0003e-01  +1.4658e+00  9.66e-01  2.89e-03  1.51e+00  2.33e-05  1.93e-01  1.47e-01  
  6  +5.0001e-01  +8.2906e-01  3.29e-01  9.83e-04  5.16e-01  7.03e-06  9.17e-02  6.06e-01  
  7  +5.0001e-01  +6.6521e-01  1.65e-01  4.93e-04  2.59e-01  3.50e-06  4.69e-02  6.15e-01  
  8  +5.0000e-01  +6.2194e-01  1.22e-01  3.64e-04  1.91e-01  2.94e-06  2.65e-02  5.37e-01  
  9  +5.0000e-01  +6.1670e-01  1.17e-01  3.47e-04  1.83e-01  3.54e-06  1.18e-02  7.78e-01  
 10  +4.9996e-01  +5.8430e-01  8.43e-02  1.80e-04  9.46e-02  2.35e-05  9.51e-04  9.57e-01  
 11  +4.9956e-01  +5.8235e-01  8.28e-02  2.95e-05  1.56e-02  2.15e-04  9.99e-05  8.95e-01  
 12  +4.9919e-01  +5.6544e-01  6.63e-02  1.02e-05  5.36e-03  2.91e-04  3.33e-05  9.90e-01  
 13  +4.9912e-01  +5.6462e-01  6.55e-02  9.01e-06  4.75e-03  2.59e-04  2.93e-05  2.96e-01  
 14  +4.9909e-01  +5.6340e-01  6.43e-02  7.63e-06  4.03e-03  1.41e-04  2.46e-05  6.36e-01  
 15  +4.9903e-01  +5.6272e-01  6.37e-02  6.71e-06  3.54e-03  7.94e-05  2.15e-05  5.76e-01  
 16  +4.9872e-01  +5.6103e-01  6.23e-02  5.45e-06  2.87e-03  5.91e-05  1.74e-05  5.10e-01  
 17  +4.9856e-01  +5.6063e-01  6.21e-02  5.26e-06  2.77e-03  4.21e-05  1.69e-05  2.99e-01  
 18  +4.9803e-01  +5.5813e-01  6.01e-02  4.45e-06  2.34e-03  3.78e-05  1.43e-05  3.04e-01  
 19  +4.9752e-01  +5.5563e-01  5.81e-02  4.17e-06  2.20e-03  2.76e-05  1.34e-05  2.79e-01  
 20  +4.9598e-01  +5.4848e-01  5.25e-02  3.31e-06  1.75e-03  2.06e-05  1.07e-05  3.83e-01  
 21  +4.9466e-01  +5.4234e-01  4.77e-02  2.91e-06  1.54e-03  8.76e-06  9.52e-06  4.99e-01  
 22  +4.9283e-01  +5.3421e-01  4.14e-02  2.36e-06  1.24e-03  2.16e-06  7.81e-06  6.76e-01  
 23  +4.9129e-01  +5.2762e-01  3.63e-02  1.95e-06  1.03e-03  1.74e-06  6.53e-06  2.36e-01  
 24  +4.8961e-01  +5.2007e-01  3.05e-02  1.52e-06  7.99e-04  1.56e-07  5.11e-06  9.08e-01  
 25  +4.8835e-01  +5.1479e-01  2.64e-02  1.28e-06  6.72e-04  1.46e-07  4.33e-06  2.58e-01  
 26  +4.8702e-01  +5.0895e-01  2.19e-02  9.87e-07  5.20e-04  2.00e-07  3.37e-06  9.90e-01  
 27  +4.8215e-01  +4.8892e-01  6.77e-03  2.87e-07  1.51e-04  5.66e-08  1.02e-06  8.44e-01  
 28  +4.8084e-01  +4.8357e-01  2.73e-03  1.13e-07  5.96e-05  2.64e-08  4.05e-07  8.14e-01  
 29  +4.8084e-01  +4.8358e-01  2.74e-03  1.13e-07  5.95e-05  2.65e-08  4.04e-07  1.41e-02  
 30  +4.8074e-01  +4.8312e-01  2.38e-03  9.83e-08  5.18e-05  2.50e-08  3.52e-07  7.12e-01  
 31  +4.8053e-01  +4.8233e-01  1.80e-03  7.38e-08  3.89e-05  1.91e-08  2.65e-07  4.30e-01  
 32  +4.8000e-01  +4.8022e-01  2.27e-04  9.31e-09  4.91e-06  2.44e-09  3.36e-08  9.10e-01  
 33  +4.7992e-01  +4.7992e-01  3.41e-06  1.40e-10  7.36e-08  3.65e-11  5.05e-10  9.86e-01  
 34  +4.7992e-01  +4.7992e-01  3.42e-08  1.40e-12  7.39e-10  3.66e-13  5.07e-12  9.90e-01  
 35  +4.7992e-01  +4.7992e-01  3.62e-10  1.48e-14  7.81e-12  3.93e-15  5.43e-14  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.150859s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:43 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:43 PM: Optimal value: 4.799e-01
(CVXPY) Aug 30 12:20:43 PM: Compilation took 1.961e-01 seconds
(CVXPY) Aug 30 12:20:43 PM: Solver (including time spent in interface) took 1.195e+00 seconds
Iteration: 12, Objective: 0.4799
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:43 PM: Your problem has 25137 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:43 PM: Finished problem compilation (took 1.743e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25137
  constraints   = 50137
  nnz(P)        = 0
  nnz(A)        = 426230
  cones (total) = 1
    : Nonnegative = 1,  numel = 50137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3478e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3487e-01  +6.3099e+02  6.30e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6437e+02  1.64e+02  1.47e-01  7.50e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5948e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0003e-01  +1.4702e+00  9.70e-01  2.90e-03  1.52e+00  2.33e-05  1.93e-01  1.47e-01  
  6  +5.0001e-01  +8.0914e-01  3.09e-01  9.23e-04  4.85e-01  6.51e-06  8.70e-02  6.37e-01  
  7  +5.0001e-01  +6.8610e-01  1.86e-01  5.56e-04  2.92e-01  3.71e-06  5.06e-02  5.98e-01  
  8  +5.0000e-01  +6.2119e-01  1.21e-01  3.62e-04  1.90e-01  2.92e-06  2.49e-02  6.00e-01  
  9  +5.0000e-01  +6.2548e-01  1.25e-01  3.73e-04  1.96e-01  3.79e-06  1.16e-02  7.71e-01  
 10  +4.9997e-01  +5.9355e-01  9.36e-02  2.14e-04  1.13e-01  1.80e-05  1.24e-03  9.90e-01  
 11  +4.9950e-01  +5.9105e-01  9.16e-02  2.57e-05  1.36e-02  2.44e-04  8.66e-05  9.30e-01  
 12  +4.9900e-01  +5.7895e-01  7.99e-02  1.13e-05  5.97e-03  3.66e-04  3.74e-05  7.37e-01  
 13  +4.9890e-01  +5.7388e-01  7.50e-02  9.36e-06  4.94e-03  2.70e-04  3.07e-05  4.44e-01  
 14  +4.9857e-01  +5.7026e-01  7.17e-02  7.57e-06  4.00e-03  2.53e-04  2.48e-05  3.35e-01  
 15  +4.9862e-01  +5.6937e-01  7.07e-02  7.41e-06  3.91e-03  1.99e-04  2.41e-05  2.12e-01  
 16  +4.9829e-01  +5.6656e-01  6.83e-02  6.15e-06  3.24e-03  1.78e-04  1.99e-05  3.38e-01  
 17  +4.9827e-01  +5.6585e-01  6.76e-02  6.07e-06  3.20e-03  1.46e-04  1.96e-05  1.70e-01  
 18  +4.9821e-01  +5.6495e-01  6.67e-02  5.76e-06  3.04e-03  1.17e-04  1.86e-05  2.42e-01  
 19  +4.9780e-01  +5.6273e-01  6.49e-02  5.06e-06  2.67e-03  1.12e-04  1.63e-05  2.04e-01  
 20  +4.9741e-01  +5.6052e-01  6.31e-02  4.80e-06  2.53e-03  7.98e-05  1.56e-05  2.73e-01  
 21  +4.9630e-01  +5.5509e-01  5.88e-02  3.97e-06  2.10e-03  7.17e-05  1.30e-05  2.60e-01  
 22  +4.9565e-01  +5.5113e-01  5.55e-02  3.71e-06  1.96e-03  3.25e-05  1.21e-05  4.58e-01  
 23  +4.9262e-01  +5.3725e-01  4.46e-02  2.49e-06  1.31e-03  2.71e-05  8.25e-06  3.64e-01  
 24  +4.9126e-01  +5.3106e-01  3.98e-02  2.13e-06  1.12e-03  2.19e-05  7.11e-06  2.05e-01  
 25  +4.8988e-01  +5.2446e-01  3.46e-02  1.76e-06  9.27e-04  6.94e-06  5.93e-06  6.09e-01  
 26  +4.8625e-01  +5.0862e-01  2.24e-02  1.05e-06  5.51e-04  2.69e-06  3.60e-06  5.92e-01  
 27  +4.8588e-01  +5.0697e-01  2.11e-02  9.56e-07  5.04e-04  1.85e-06  3.31e-06  3.43e-01  
 28  +4.8563e-01  +5.0585e-01  2.02e-02  9.01e-07  4.75e-04  1.42e-06  3.12e-06  2.60e-01  
 29  +4.8452e-01  +5.0086e-01  1.63e-02  6.95e-07  3.66e-04  1.33e-07  2.42e-06  9.90e-01  
 30  +4.8363e-01  +4.9729e-01  1.37e-02  5.74e-07  3.02e-04  1.14e-07  2.02e-06  2.43e-01  
 31  +4.8107e-01  +4.8698e-01  5.90e-03  2.40e-07  1.26e-04  6.12e-08  8.68e-07  9.38e-01  
 32  +4.8105e-01  +4.8688e-01  5.83e-03  2.36e-07  1.25e-04  6.07e-08  8.58e-07  7.66e-02  
 33  +4.8041e-01  +4.8442e-01  4.00e-03  1.60e-07  8.43e-05  4.20e-08  5.89e-07  3.86e-01  
 34  +4.8039e-01  +4.8434e-01  3.94e-03  1.59e-07  8.36e-05  4.10e-08  5.88e-07  6.10e-02  
 35  +4.8022e-01  +4.8365e-01  3.43e-03  1.37e-07  7.24e-05  3.64e-08  5.11e-07  4.22e-01  
 36  +4.7966e-01  +4.8150e-01  1.84e-03  7.27e-08  3.83e-05  1.97e-08  2.75e-07  5.62e-01  
 37  +4.7912e-01  +4.7949e-01  3.72e-04  1.45e-08  7.65e-06  3.80e-09  5.62e-08  9.87e-01  
 38  +4.7900e-01  +4.7904e-01  4.64e-05  1.79e-09  9.46e-07  4.85e-10  6.99e-09  9.14e-01  
 39  +4.7898e-01  +4.7898e-01  4.67e-07  1.80e-11  9.51e-09  4.88e-12  7.03e-11  9.90e-01  
 40  +4.7898e-01  +4.7898e-01  4.67e-09  1.80e-13  9.51e-11  4.88e-14  7.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3233899s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:44 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:44 PM: Optimal value: 4.790e-01
(CVXPY) Aug 30 12:20:44 PM: Compilation took 1.743e-01 seconds
(CVXPY) Aug 30 12:20:44 PM: Solver (including time spent in interface) took 1.365e+00 seconds
Iteration: 13, Objective: 0.4790
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:44 PM: Your problem has 25147 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:45 PM: Finished problem compilation (took 2.100e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25147
  constraints   = 50147
  nnz(P)        = 0
  nnz(A)        = 429285
  cones (total) = 1
    : Nonnegative = 1,  numel = 50147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8409e-01  +5.3480e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3487e-01  +6.3099e+02  6.30e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6439e+02  1.64e+02  1.47e-01  7.50e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5955e+01  1.55e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0003e-01  +1.4744e+00  9.74e-01  2.92e-03  1.53e+00  2.33e-05  1.93e-01  1.46e-01  
  6  +5.0001e-01  +8.0720e-01  3.07e-01  9.18e-04  4.82e-01  6.45e-06  8.65e-02  6.39e-01  
  7  +5.0001e-01  +6.8297e-01  1.83e-01  5.46e-04  2.87e-01  3.71e-06  4.99e-02  5.84e-01  
  8  +5.0001e-01  +6.4771e-01  1.48e-01  4.41e-04  2.32e-01  3.13e-06  3.17e-02  5.00e-01  
  9  +5.0000e-01  +6.3007e-01  1.30e-01  3.88e-04  2.04e-01  3.32e-06  1.60e-02  6.65e-01  
 10  +5.0000e-01  +6.1868e-01  1.19e-01  3.46e-04  1.82e-01  6.83e-06  5.59e-03  6.78e-01  
 11  +4.9978e-01  +6.0635e-01  1.07e-01  7.60e-05  4.00e-02  1.11e-04  2.72e-04  9.56e-01  
 12  +4.9897e-01  +5.8667e-01  8.77e-02  1.44e-05  7.59e-03  4.56e-04  4.79e-05  8.92e-01  
 13  +4.9910e-01  +5.8110e-01  8.20e-02  1.28e-05  6.75e-03  3.17e-04  4.23e-05  3.74e-01  
 14  +4.9863e-01  +5.7469e-01  7.61e-02  8.74e-06  4.61e-03  3.27e-04  2.87e-05  4.79e-01  
 15  +4.9872e-01  +5.7335e-01  7.46e-02  8.35e-06  4.40e-03  2.61e-04  2.72e-05  2.36e-01  
 16  +4.9824e-01  +5.6842e-01  7.02e-02  6.24e-06  3.29e-03  2.28e-04  2.03e-05  4.70e-01  
 17  +4.9820e-01  +5.6780e-01  6.96e-02  6.21e-06  3.28e-03  2.08e-04  2.02e-05  7.58e-02  
 18  +4.9766e-01  +5.6458e-01  6.69e-02  5.13e-06  2.71e-03  2.05e-04  1.66e-05  2.60e-01  
 19  +4.9737e-01  +5.6274e-01  6.54e-02  4.80e-06  2.53e-03  1.54e-04  1.56e-05  2.81e-01  
 20  +4.9491e-01  +5.5018e-01  5.53e-02  3.23e-06  1.71e-03  1.06e-04  1.06e-05  5.43e-01  
 21  +4.9249e-01  +5.3821e-01  4.57e-02  2.53e-06  1.33e-03  5.75e-05  8.41e-06  4.17e-01  
 22  +4.9103e-01  +5.3142e-01  4.04e-02  2.15e-06  1.13e-03  4.26e-05  7.18e-06  2.58e-01  
 23  +4.8989e-01  +5.2549e-01  3.56e-02  1.81e-06  9.52e-04  9.26e-06  6.07e-06  6.87e-01  
 24  +4.8927e-01  +5.2280e-01  3.35e-02  1.67e-06  8.81e-04  7.60e-06  5.64e-06  1.74e-01  
 25  +4.8606e-01  +5.0896e-01  2.29e-02  1.06e-06  5.58e-04  2.65e-06  3.63e-06  6.26e-01  
 26  +4.8509e-01  +5.0484e-01  1.97e-02  8.91e-07  4.70e-04  2.05e-06  3.07e-06  2.38e-01  
 27  +4.8414e-01  +5.0056e-01  1.64e-02  7.05e-07  3.72e-04  7.19e-07  2.44e-06  6.99e-01  
 28  +4.8412e-01  +5.0049e-01  1.64e-02  7.03e-07  3.71e-04  6.99e-07  2.43e-06  3.23e-02  
 29  +4.8217e-01  +4.9252e-01  1.04e-02  4.34e-07  2.29e-04  4.11e-07  1.52e-06  4.25e-01  
 30  +4.8217e-01  +4.9252e-01  1.03e-02  4.27e-07  2.25e-04  3.66e-07  1.50e-06  1.71e-01  
 31  +4.8162e-01  +4.9006e-01  8.44e-03  3.42e-07  1.80e-04  9.57e-08  1.20e-06  9.90e-01  
 32  +4.7998e-01  +4.8368e-01  3.70e-03  1.48e-07  7.78e-05  4.18e-08  5.29e-07  7.81e-01  
 33  +4.7900e-01  +4.7998e-01  9.81e-04  3.77e-08  1.99e-05  1.11e-08  1.40e-07  9.43e-01  
 34  +4.7863e-01  +4.7866e-01  2.98e-05  1.12e-09  5.92e-07  3.38e-10  4.25e-09  9.78e-01  
 35  +4.7862e-01  +4.7862e-01  3.00e-07  1.13e-11  5.94e-09  3.40e-12  4.28e-11  9.90e-01  
 36  +4.7862e-01  +4.7862e-01  3.00e-09  1.13e-13  5.94e-11  3.40e-14  4.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1680637s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:46 PM: Optimal value: 4.786e-01
(CVXPY) Aug 30 12:20:46 PM: Compilation took 2.100e-01 seconds
(CVXPY) Aug 30 12:20:46 PM: Solver (including time spent in interface) took 1.211e+00 seconds
Iteration: 14, Objective: 0.4786
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:46 PM: Your problem has 25157 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:46 PM: Finished problem compilation (took 2.004e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25157
  constraints   = 50157
  nnz(P)        = 0
  nnz(A)        = 435567
  cones (total) = 1
    : Nonnegative = 1,  numel = 50157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8408e-01  +5.3481e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3487e-01  +6.3102e+02  6.30e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6439e+02  1.64e+02  1.47e-01  7.50e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5955e+01  1.55e+01  4.31e-02  2.18e+01  4.78e-06  1.96e-01  4.44e-01  
  5  +5.0003e-01  +1.4765e+00  9.76e-01  2.92e-03  1.53e+00  2.33e-05  1.93e-01  1.46e-01  
  6  +5.0001e-01  +8.0821e-01  3.08e-01  9.21e-04  4.84e-01  6.46e-06  8.65e-02  6.45e-01  
  7  +5.0001e-01  +7.1595e-01  2.16e-01  6.45e-04  3.39e-01  4.37e-06  5.85e-02  4.68e-01  
  8  +5.0001e-01  +6.4011e-01  1.40e-01  4.18e-04  2.20e-01  3.01e-06  3.01e-02  6.43e-01  
  9  +5.0000e-01  +6.3242e-01  1.32e-01  3.94e-04  2.07e-01  3.40e-06  1.46e-02  7.29e-01  
 10  +4.9999e-01  +6.1523e-01  1.15e-01  3.20e-04  1.68e-01  1.04e-05  3.18e-03  8.09e-01  
 11  +4.9961e-01  +6.0825e-01  1.09e-01  4.38e-05  2.31e-02  1.94e-04  1.50e-04  9.57e-01  
 12  +4.9898e-01  +5.7677e-01  7.78e-02  1.10e-05  5.79e-03  3.95e-04  3.62e-05  9.49e-01  
 13  +4.9875e-01  +5.7324e-01  7.45e-02  8.94e-06  4.72e-03  3.39e-04  2.93e-05  3.97e-01  
 14  +4.9856e-01  +5.7091e-01  7.23e-02  7.74e-06  4.09e-03  2.93e-04  2.53e-05  3.17e-01  
 15  +4.9832e-01  +5.6912e-01  7.08e-02  6.84e-06  3.61e-03  2.80e-04  2.22e-05  2.18e-01  
 16  +4.9819e-01  +5.6777e-01  6.96e-02  6.13e-06  3.24e-03  2.32e-04  1.99e-05  3.01e-01  
 17  +4.9782e-01  +5.6516e-01  6.73e-02  5.30e-06  2.80e-03  1.74e-04  1.71e-05  3.92e-01  
 18  +4.9760e-01  +5.6365e-01  6.61e-02  4.96e-06  2.62e-03  1.40e-04  1.60e-05  2.42e-01  
 19  +4.9720e-01  +5.6134e-01  6.41e-02  4.75e-06  2.51e-03  9.81e-05  1.54e-05  2.76e-01  
 20  +4.9480e-01  +5.5017e-01  5.54e-02  3.26e-06  1.72e-03  7.40e-05  1.06e-05  5.01e-01  
 21  +4.9361e-01  +5.4451e-01  5.09e-02  2.92e-06  1.54e-03  5.51e-05  9.60e-06  2.32e-01  
 22  +4.9070e-01  +5.3072e-01  4.00e-02  2.16e-06  1.14e-03  9.14e-06  7.23e-06  7.11e-01  
 23  +4.9000e-01  +5.2760e-01  3.76e-02  1.97e-06  1.04e-03  6.68e-06  6.62e-06  2.61e-01  
 24  +4.8737e-01  +5.1621e-01  2.88e-02  1.40e-06  7.40e-04  3.81e-06  4.79e-06  4.35e-01  
 25  +4.8666e-01  +5.1304e-01  2.64e-02  1.25e-06  6.57e-04  2.58e-06  4.26e-06  3.33e-01  
 26  +4.8537e-01  +5.0760e-01  2.22e-02  1.02e-06  5.37e-04  1.95e-06  3.51e-06  2.57e-01  
 27  +4.8334e-01  +4.9888e-01  1.55e-02  6.65e-07  3.51e-04  4.72e-07  2.31e-06  7.99e-01  
 28  +4.8307e-01  +4.9777e-01  1.47e-02  6.21e-07  3.28e-04  4.06e-07  2.16e-06  1.95e-01  
 29  +4.8298e-01  +4.9737e-01  1.44e-02  6.05e-07  3.19e-04  3.63e-07  2.11e-06  1.65e-01  
 30  +4.8056e-01  +4.8766e-01  7.11e-03  2.88e-07  1.52e-04  1.26e-07  1.02e-06  7.55e-01  
 31  +4.8036e-01  +4.8687e-01  6.51e-03  2.62e-07  1.38e-04  1.01e-07  9.33e-07  3.81e-01  
 32  +4.7897e-01  +4.8153e-01  2.55e-03  9.94e-08  5.25e-05  3.47e-08  3.64e-07  7.95e-01  
 33  +4.7838e-01  +4.7933e-01  9.51e-04  3.63e-08  1.91e-05  1.26e-08  1.36e-07  6.87e-01  
 34  +4.7807e-01  +4.7820e-01  1.32e-04  4.96e-09  2.62e-06  1.50e-09  1.88e-08  9.90e-01  
 35  +4.7802e-01  +4.7802e-01  1.45e-06  5.46e-11  2.88e-08  1.65e-11  2.07e-10  9.90e-01  
 36  +4.7802e-01  +4.7802e-01  1.45e-08  5.46e-13  2.88e-10  1.65e-13  2.07e-12  9.90e-01  
 37  +4.7802e-01  +4.7802e-01  1.46e-10  5.43e-15  2.90e-12  2.38e-15  2.94e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1883166s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:47 PM: Optimal value: 4.780e-01
(CVXPY) Aug 30 12:20:47 PM: Compilation took 2.004e-01 seconds
(CVXPY) Aug 30 12:20:47 PM: Solver (including time spent in interface) took 1.229e+00 seconds
Iteration: 15, Objective: 0.4780
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:48 PM: Your problem has 25167 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:48 PM: Finished problem compilation (took 1.960e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25167
  constraints   = 50167
  nnz(P)        = 0
  nnz(A)        = 439464
  cones (total) = 1
    : Nonnegative = 1,  numel = 50167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8408e-01  +5.3481e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3487e-01  +6.3102e+02  6.30e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6438e+02  1.64e+02  1.47e-01  7.50e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5956e+01  1.55e+01  4.31e-02  2.18e+01  4.78e-06  1.96e-01  4.44e-01  
  5  +5.0003e-01  +1.4763e+00  9.76e-01  2.92e-03  1.53e+00  2.34e-05  1.92e-01  1.47e-01  
  6  +5.0001e-01  +8.0705e-01  3.07e-01  9.17e-04  4.82e-01  6.44e-06  8.61e-02  6.48e-01  
  7  +5.0001e-01  +7.0792e-01  2.08e-01  6.21e-04  3.27e-01  4.13e-06  5.55e-02  5.34e-01  
  8  +5.0001e-01  +6.4774e-01  1.48e-01  4.41e-04  2.32e-01  3.22e-06  3.15e-02  5.47e-01  
  9  +5.0000e-01  +6.3409e-01  1.34e-01  4.00e-04  2.10e-01  3.61e-06  1.53e-02  6.99e-01  
 10  +4.9998e-01  +6.0341e-01  1.03e-01  2.65e-04  1.40e-01  1.47e-05  1.93e-03  9.65e-01  
 11  +4.9936e-01  +5.9985e-01  1.00e-01  2.48e-05  1.31e-02  3.15e-04  8.37e-05  9.57e-01  
 12  +4.9927e-01  +5.9197e-01  9.27e-02  1.84e-05  9.71e-03  2.98e-04  6.14e-05  4.37e-01  
 13  +4.9895e-01  +5.7990e-01  8.10e-02  1.08e-05  5.71e-03  2.70e-04  3.57e-05  6.94e-01  
 14  +4.9866e-01  +5.7640e-01  7.77e-02  8.92e-06  4.71e-03  2.58e-04  2.93e-05  3.01e-01  
 15  +4.9875e-01  +5.7401e-01  7.53e-02  8.46e-06  4.47e-03  1.54e-04  2.76e-05  4.03e-01  
 16  +4.9844e-01  +5.7148e-01  7.30e-02  7.09e-06  3.75e-03  1.48e-04  2.31e-05  2.83e-01  
 17  +4.9839e-01  +5.7088e-01  7.25e-02  6.86e-06  3.62e-03  1.34e-04  2.22e-05  1.33e-01  
 18  +4.9844e-01  +5.7041e-01  7.20e-02  6.71e-06  3.54e-03  9.86e-05  2.17e-05  2.61e-01  
 19  +4.9775e-01  +5.6633e-01  6.86e-02  5.18e-06  2.74e-03  9.57e-05  1.67e-05  3.60e-01  
 20  +4.9762e-01  +5.6576e-01  6.81e-02  5.15e-06  2.72e-03  8.93e-05  1.67e-05  5.29e-02  
 21  +4.9711e-01  +5.6294e-01  6.58e-02  4.68e-06  2.47e-03  7.32e-05  1.51e-05  2.49e-01  
 22  +4.9596e-01  +5.5649e-01  6.05e-02  4.08e-06  2.16e-03  2.89e-05  1.33e-05  5.62e-01  
 23  +4.9312e-01  +5.4360e-01  5.05e-02  2.85e-06  1.51e-03  2.08e-05  9.43e-06  4.42e-01  
 24  +4.9166e-01  +5.3685e-01  4.52e-02  2.45e-06  1.29e-03  1.44e-05  8.16e-06  2.96e-01  
 25  +4.8992e-01  +5.2901e-01  3.91e-02  2.02e-06  1.06e-03  8.74e-06  6.78e-06  3.74e-01  
 26  +4.8805e-01  +5.2061e-01  3.26e-02  1.60e-06  8.43e-04  4.07e-06  5.43e-06  5.00e-01  
 27  +4.8453e-01  +5.0555e-01  2.10e-02  9.54e-07  5.03e-04  1.78e-06  3.31e-06  5.62e-01  
 28  +4.8386e-01  +5.0272e-01  1.89e-02  8.41e-07  4.44e-04  1.49e-06  2.93e-06  1.79e-01  
 29  +4.8218e-01  +4.9564e-01  1.35e-02  5.72e-07  3.02e-04  7.46e-07  2.01e-06  5.42e-01  
 30  +4.8216e-01  +4.9555e-01  1.34e-02  5.70e-07  3.01e-04  7.21e-07  2.00e-06  3.13e-02  
 31  +4.8180e-01  +4.9407e-01  1.23e-02  5.17e-07  2.73e-04  6.09e-07  1.82e-06  1.82e-01  
 32  +4.8012e-01  +4.8737e-01  7.25e-03  2.95e-07  1.55e-04  2.99e-07  1.06e-06  5.43e-01  
 33  +4.8011e-01  +4.8735e-01  7.24e-03  2.94e-07  1.55e-04  2.94e-07  1.05e-06  2.33e-02  
 34  +4.7844e-01  +4.8083e-01  2.39e-03  9.25e-08  4.88e-05  4.42e-08  3.42e-07  9.22e-01  
 35  +4.7765e-01  +4.7794e-01  2.90e-04  1.10e-08  5.78e-06  4.01e-09  4.16e-08  9.55e-01  
 36  +4.7754e-01  +4.7754e-01  3.25e-06  1.23e-10  6.48e-08  4.40e-11  4.68e-10  9.90e-01  
 37  +4.7754e-01  +4.7754e-01  3.25e-08  1.23e-12  6.48e-10  4.40e-13  4.68e-12  9.90e-01  
 38  +4.7754e-01  +4.7754e-01  3.27e-10  1.23e-14  6.51e-12  5.45e-15  5.75e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.361008s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:49 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:49 PM: Optimal value: 4.775e-01
(CVXPY) Aug 30 12:20:49 PM: Compilation took 1.960e-01 seconds
(CVXPY) Aug 30 12:20:49 PM: Solver (including time spent in interface) took 1.404e+00 seconds
Iteration: 16, Objective: 0.4775
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:49 PM: Your problem has 25177 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:50 PM: Finished problem compilation (took 2.291e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25177
  constraints   = 50177
  nnz(P)        = 0
  nnz(A)        = 445871
  cones (total) = 1
    : Nonnegative = 1,  numel = 50177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8408e-01  +5.3482e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3486e-01  +6.3092e+02  6.30e+02  1.70e-01  8.64e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6436e+02  1.64e+02  1.47e-01  7.51e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5957e+01  1.55e+01  4.31e-02  2.18e+01  4.78e-06  1.96e-01  4.44e-01  
  5  +5.0003e-01  +1.4790e+00  9.79e-01  2.93e-03  1.54e+00  2.34e-05  1.92e-01  1.46e-01  
  6  +5.0001e-01  +8.3151e-01  3.31e-01  9.91e-04  5.21e-01  7.06e-06  9.15e-02  6.10e-01  
  7  +5.0001e-01  +7.0600e-01  2.06e-01  6.15e-04  3.24e-01  4.43e-06  5.66e-02  4.80e-01  
  8  +5.0001e-01  +6.5563e-01  1.56e-01  4.65e-04  2.45e-01  3.25e-06  3.22e-02  6.52e-01  
  9  +5.0000e-01  +6.1981e-01  1.20e-01  3.57e-04  1.88e-01  4.18e-06  1.22e-02  7.08e-01  
 10  +4.9997e-01  +6.1006e-01  1.10e-01  2.76e-04  1.45e-01  1.79e-05  1.90e-03  9.39e-01  
 11  +4.9940e-01  +6.0536e-01  1.06e-01  3.16e-05  1.67e-02  2.92e-04  1.07e-04  9.46e-01  
 12  +4.9867e-01  +5.8917e-01  9.05e-02  1.25e-05  6.61e-03  4.99e-04  4.17e-05  7.37e-01  
 13  +4.9887e-01  +5.8252e-01  8.37e-02  1.12e-05  5.93e-03  2.90e-04  3.69e-05  4.42e-01  
 14  +4.9802e-01  +5.7577e-01  7.77e-02  7.33e-06  3.87e-03  3.53e-04  2.40e-05  4.10e-01  
 15  +4.9807e-01  +5.7503e-01  7.70e-02  6.98e-06  3.69e-03  3.11e-04  2.27e-05  1.77e-01  
 16  +4.9812e-01  +5.7227e-01  7.41e-02  6.29e-06  3.32e-03  1.86e-04  2.03e-05  4.61e-01  
 17  +4.9775e-01  +5.6966e-01  7.19e-02  5.55e-06  2.93e-03  1.65e-04  1.79e-05  2.50e-01  
 18  +4.9734e-01  +5.6677e-01  6.94e-02  5.07e-06  2.68e-03  1.30e-04  1.64e-05  2.65e-01  
 19  +4.9634e-01  +5.5946e-01  6.31e-02  4.50e-06  2.38e-03  3.11e-05  1.47e-05  6.62e-01  
 20  +4.9475e-01  +5.5213e-01  5.74e-02  3.59e-06  1.89e-03  2.84e-05  1.18e-05  2.60e-01  
 21  +4.9274e-01  +5.4260e-01  4.99e-02  2.89e-06  1.53e-03  1.44e-05  9.60e-06  4.75e-01  
 22  +4.9093e-01  +5.3451e-01  4.36e-02  2.37e-06  1.25e-03  1.16e-05  7.92e-06  2.37e-01  
 23  +4.8950e-01  +5.2784e-01  3.83e-02  1.98e-06  1.04e-03  4.68e-06  6.67e-06  5.45e-01  
 24  +4.8659e-01  +5.1535e-01  2.88e-02  1.37e-06  7.25e-04  2.97e-06  4.71e-06  3.88e-01  
 25  +4.8615e-01  +5.1337e-01  2.72e-02  1.27e-06  6.69e-04  2.25e-06  4.35e-06  2.61e-01  
 26  +4.8555e-01  +5.1066e-01  2.51e-02  1.12e-06  5.93e-04  1.08e-06  3.86e-06  5.56e-01  
 27  +4.8406e-01  +5.0447e-01  2.04e-02  8.64e-07  4.56e-04  2.93e-07  3.01e-06  8.44e-01  
 28  +4.8335e-01  +5.0159e-01  1.82e-02  7.63e-07  4.03e-04  2.55e-07  2.67e-06  1.92e-01  
 29  +4.8214e-01  +4.9655e-01  1.44e-02  5.83e-07  3.08e-04  1.56e-07  2.06e-06  9.46e-01  
 30  +4.7995e-01  +4.8806e-01  8.11e-03  3.20e-07  1.69e-04  8.81e-08  1.16e-06  6.37e-01  
 31  +4.7993e-01  +4.8796e-01  8.04e-03  3.17e-07  1.67e-04  8.74e-08  1.15e-06  3.58e-02  
 32  +4.7955e-01  +4.8646e-01  6.91e-03  2.71e-07  1.43e-04  7.59e-08  9.90e-07  4.01e-01  
 33  +4.7810e-01  +4.8095e-01  2.85e-03  1.10e-07  5.79e-05  3.17e-08  4.11e-07  8.33e-01  
 34  +4.7718e-01  +4.7756e-01  3.80e-04  1.45e-08  7.65e-06  4.19e-09  5.54e-08  9.15e-01  
 35  +4.7704e-01  +4.7705e-01  5.73e-06  2.18e-10  1.15e-07  6.30e-11  8.37e-10  9.85e-01  
 36  +4.7704e-01  +4.7704e-01  5.73e-08  2.18e-12  1.15e-09  6.30e-13  8.37e-12  9.90e-01  
 37  +4.7704e-01  +4.7704e-01  5.75e-10  2.19e-14  1.15e-11  7.05e-15  9.33e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2028716s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:51 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:51 PM: Optimal value: 4.770e-01
(CVXPY) Aug 30 12:20:51 PM: Compilation took 2.291e-01 seconds
(CVXPY) Aug 30 12:20:51 PM: Solver (including time spent in interface) took 1.246e+00 seconds
Iteration: 17, Objective: 0.4770
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:51 PM: Your problem has 25179 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:51 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:51 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:51 PM: Finished problem compilation (took 1.972e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25179
  constraints   = 50179
  nnz(P)        = 0
  nnz(A)        = 447910
  cones (total) = 1
    : Nonnegative = 1,  numel = 50179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8408e-01  +5.3481e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3486e-01  +6.3092e+02  6.30e+02  1.70e-01  8.64e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6435e+02  1.64e+02  1.47e-01  7.51e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5956e+01  1.55e+01  4.31e-02  2.18e+01  4.78e-06  1.96e-01  4.44e-01  
  5  +5.0003e-01  +1.4736e+00  9.74e-01  2.92e-03  1.53e+00  2.34e-05  1.92e-01  1.47e-01  
  6  +5.0001e-01  +8.3351e-01  3.33e-01  9.97e-04  5.24e-01  7.12e-06  9.19e-02  6.18e-01  
  7  +5.0001e-01  +6.9613e-01  1.96e-01  5.86e-04  3.09e-01  4.27e-06  5.40e-02  5.07e-01  
  8  +5.0001e-01  +6.5932e-01  1.59e-01  4.76e-04  2.51e-01  3.34e-06  3.28e-02  6.16e-01  
  9  +5.0000e-01  +6.2063e-01  1.21e-01  3.59e-04  1.89e-01  4.19e-06  1.26e-02  6.97e-01  
 10  +4.9997e-01  +6.0903e-01  1.09e-01  2.64e-04  1.39e-01  2.11e-05  1.69e-03  9.33e-01  
 11  +4.9937e-01  +6.0468e-01  1.05e-01  3.14e-05  1.66e-02  3.10e-04  1.07e-04  9.38e-01  
 12  +4.9874e-01  +5.9176e-01  9.30e-02  1.43e-05  7.57e-03  4.90e-04  4.78e-05  6.63e-01  
 13  +4.9878e-01  +5.8356e-01  8.48e-02  1.18e-05  6.21e-03  3.27e-04  3.87e-05  4.75e-01  
 14  +4.9797e-01  +5.7558e-01  7.76e-02  7.49e-06  3.96e-03  3.66e-04  2.45e-05  4.89e-01  
 15  +4.9807e-01  +5.7460e-01  7.65e-02  6.92e-06  3.66e-03  2.99e-04  2.25e-05  2.77e-01  
 16  +4.9785e-01  +5.7165e-01  7.38e-02  5.94e-06  3.14e-03  2.30e-04  1.92e-05  3.85e-01  
 17  +4.9780e-01  +5.7118e-01  7.34e-02  5.87e-06  3.10e-03  2.21e-04  1.90e-05  4.87e-02  
 18  +4.9740e-01  +5.6769e-01  7.03e-02  5.26e-06  2.78e-03  1.58e-04  1.70e-05  3.44e-01  
 19  +4.9678e-01  +5.6273e-01  6.59e-02  4.86e-06  2.57e-03  6.99e-05  1.58e-05  4.88e-01  
 20  +4.9455e-01  +5.5216e-01  5.76e-02  3.47e-06  1.83e-03  6.38e-05  1.14e-05  3.56e-01  
 21  +4.9317e-01  +5.4537e-01  5.22e-02  3.02e-06  1.60e-03  4.31e-05  9.98e-06  3.02e-01  
 22  +4.9176e-01  +5.3845e-01  4.67e-02  2.59e-06  1.37e-03  2.02e-05  8.64e-06  4.66e-01  
 23  +4.9017e-01  +5.3104e-01  4.09e-02  2.16e-06  1.14e-03  6.22e-06  7.25e-06  6.11e-01  
 24  +4.8707e-01  +5.1765e-01  3.06e-02  1.48e-06  7.83e-04  3.90e-06  5.06e-06  4.01e-01  
 25  +4.8563e-01  +5.1146e-01  2.58e-02  1.20e-06  6.33e-04  2.67e-06  4.13e-06  3.32e-01  
 26  +4.8549e-01  +5.1065e-01  2.52e-02  1.14e-06  6.00e-04  1.39e-06  3.93e-06  4.94e-01  
 27  +4.8421e-01  +5.0524e-01  2.10e-02  9.23e-07  4.88e-04  8.79e-07  3.22e-06  4.03e-01  
 28  +4.8332e-01  +5.0150e-01  1.82e-02  7.75e-07  4.09e-04  5.61e-07  2.71e-06  4.44e-01  
 29  +4.8326e-01  +5.0126e-01  1.80e-02  7.65e-07  4.04e-04  5.13e-07  2.68e-06  1.22e-01  
 30  +4.8046e-01  +4.9010e-01  9.64e-03  3.91e-07  2.07e-04  2.43e-07  1.40e-06  5.62e-01  
 31  +4.8003e-01  +4.8834e-01  8.31e-03  3.33e-07  1.76e-04  1.61e-07  1.20e-06  5.02e-01  
 32  +4.7766e-01  +4.7928e-01  1.62e-03  6.24e-08  3.29e-05  1.81e-08  2.35e-07  9.90e-01  
 33  +4.7711e-01  +4.7729e-01  1.78e-04  6.78e-09  3.58e-06  1.97e-09  2.60e-08  9.90e-01  
 34  +4.7704e-01  +4.7704e-01  1.89e-06  7.19e-11  3.80e-08  2.09e-11  2.76e-10  9.89e-01  
 35  +4.7704e-01  +4.7704e-01  1.89e-08  7.19e-13  3.80e-10  2.09e-13  2.76e-12  9.90e-01  
 36  +4.7704e-01  +4.7704e-01  1.90e-10  7.27e-15  3.81e-12  2.47e-15  3.24e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2337528s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:53 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:53 PM: Optimal value: 4.770e-01
(CVXPY) Aug 30 12:20:53 PM: Compilation took 1.972e-01 seconds
(CVXPY) Aug 30 12:20:53 PM: Solver (including time spent in interface) took 1.279e+00 seconds
Iteration: 18, Objective: 0.4770
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:53 PM: Your problem has 25186 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:53 PM: Finished problem compilation (took 2.135e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25186
  constraints   = 50186
  nnz(P)        = 0
  nnz(A)        = 453206
  cones (total) = 1
    : Nonnegative = 1,  numel = 50186

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8409e-01  +5.3478e+03  5.35e+03  4.24e-01  1.69e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3486e-01  +6.3094e+02  6.30e+02  1.70e-01  8.64e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.51e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5950e+01  1.54e+01  4.31e-02  2.18e+01  4.78e-06  1.96e-01  4.44e-01  
  5  +5.0003e-01  +1.5255e+00  1.03e+00  3.07e-03  1.61e+00  2.33e-05  1.93e-01  1.40e-01  
  6  +5.0001e-01  +8.6784e-01  3.68e-01  1.10e-03  5.79e-01  7.67e-06  9.82e-02  5.86e-01  
  7  +5.0001e-01  +6.9858e-01  1.99e-01  5.93e-04  3.13e-01  3.95e-06  5.34e-02  6.45e-01  
  8  +5.0001e-01  +6.5467e-01  1.55e-01  4.62e-04  2.43e-01  3.15e-06  3.11e-02  6.07e-01  
  9  +5.0000e-01  +6.2933e-01  1.29e-01  3.85e-04  2.03e-01  3.99e-06  1.47e-02  5.78e-01  
 10  +4.9998e-01  +6.1174e-01  1.12e-01  2.95e-04  1.55e-01  1.39e-05  2.33e-03  9.78e-01  
 11  +4.9937e-01  +5.9944e-01  1.00e-01  2.59e-05  1.37e-02  3.11e-04  8.73e-05  9.73e-01  
 12  +4.9914e-01  +5.8557e-01  8.64e-02  1.44e-05  7.59e-03  3.09e-04  4.74e-05  7.18e-01  
 13  +4.9873e-01  +5.8028e-01  8.15e-02  1.01e-05  5.34e-03  3.28e-04  3.31e-05  4.46e-01  
 14  +4.9887e-01  +5.7709e-01  7.82e-02  9.46e-06  5.01e-03  1.83e-04  3.08e-05  4.50e-01  
 15  +4.9857e-01  +5.7485e-01  7.63e-02  8.04e-06  4.26e-03  1.87e-04  2.61e-05  2.21e-01  
 16  +4.9859e-01  +5.7255e-01  7.40e-02  7.07e-06  3.74e-03  8.89e-05  2.27e-05  6.09e-01  
 17  +4.9854e-01  +5.7214e-01  7.36e-02  6.89e-06  3.64e-03  7.95e-05  2.21e-05  1.34e-01  
 18  +4.9786e-01  +5.6821e-01  7.04e-02  5.36e-06  2.83e-03  7.34e-05  1.72e-05  3.90e-01  
 19  +4.9771e-01  +5.6768e-01  7.00e-02  5.34e-06  2.82e-03  6.98e-05  1.72e-05  3.71e-02  
 20  +4.9561e-01  +5.5763e-01  6.20e-02  3.70e-06  1.96e-03  6.60e-05  1.20e-05  4.03e-01  
 21  +4.9412e-01  +5.5043e-01  5.63e-02  3.24e-06  1.71e-03  5.06e-05  1.06e-05  2.30e-01  
 22  +4.9312e-01  +5.4564e-01  5.25e-02  2.97e-06  1.57e-03  3.59e-05  9.74e-06  2.48e-01  
 23  +4.9113e-01  +5.3616e-01  4.50e-02  2.46e-06  1.30e-03  7.99e-06  8.18e-06  6.49e-01  
 24  +4.8834e-01  +5.2377e-01  3.54e-02  1.77e-06  9.36e-04  8.61e-08  5.97e-06  8.84e-01  
 25  +4.8545e-01  +5.1160e-01  2.61e-02  1.21e-06  6.41e-04  1.21e-07  4.15e-06  5.36e-01  
 26  +4.8499e-01  +5.0967e-01  2.47e-02  1.13e-06  5.97e-04  1.22e-07  3.87e-06  1.24e-01  
 27  +4.8467e-01  +5.0816e-01  2.35e-02  1.04e-06  5.50e-04  1.71e-07  3.56e-06  5.15e-01  
 28  +4.8385e-01  +5.0471e-01  2.09e-02  8.87e-07  4.69e-04  1.95e-07  3.04e-06  7.54e-01  
 29  +4.8296e-01  +5.0112e-01  1.82e-02  7.63e-07  4.03e-04  1.71e-07  2.63e-06  1.96e-01  
 30  +4.8267e-01  +4.9988e-01  1.72e-02  7.16e-07  3.78e-04  1.71e-07  2.47e-06  4.09e-01  
 31  +4.8037e-01  +4.9071e-01  1.03e-02  4.20e-07  2.22e-04  1.04e-07  1.48e-06  5.15e-01  
 32  +4.8033e-01  +4.9053e-01  1.02e-02  4.15e-07  2.19e-04  1.04e-07  1.46e-06  1.17e-01  
 33  +4.7820e-01  +4.8213e-01  3.93e-03  1.57e-07  8.30e-05  4.06e-08  5.64e-07  7.32e-01  
 34  +4.7820e-01  +4.8213e-01  3.93e-03  1.56e-07  8.26e-05  4.11e-08  5.60e-07  8.15e-02  
 35  +4.7742e-01  +4.7907e-01  1.65e-03  6.51e-08  3.44e-05  1.77e-08  2.36e-07  6.71e-01  
 36  +4.7735e-01  +4.7878e-01  1.43e-03  5.62e-08  2.97e-05  1.58e-08  2.04e-07  7.67e-01  
 37  +4.7723e-01  +4.7833e-01  1.10e-03  4.30e-08  2.27e-05  1.22e-08  1.56e-07  3.68e-01  
 38  +4.7723e-01  +4.7832e-01  1.09e-03  4.27e-08  2.26e-05  1.22e-08  1.55e-07  8.15e-02  
 39  +4.7722e-01  +4.7829e-01  1.07e-03  4.18e-08  2.21e-05  1.19e-08  1.52e-07  1.66e-01  
 40  +4.7706e-01  +4.7770e-01  6.43e-04  2.51e-08  1.32e-05  7.20e-09  9.13e-08  5.25e-01  
 41  +4.7686e-01  +4.7697e-01  1.12e-04  4.33e-09  2.29e-06  1.26e-09  1.59e-08  9.90e-01  
 42  +4.7682e-01  +4.7682e-01  1.90e-06  7.36e-11  3.89e-08  2.15e-11  2.70e-10  9.85e-01  
 43  +4.7682e-01  +4.7682e-01  1.90e-08  7.36e-13  3.89e-10  2.15e-13  2.70e-12  9.90e-01  
 44  +4.7682e-01  +4.7682e-01  1.91e-10  7.41e-15  3.91e-12  2.86e-15  3.54e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5818446s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:55 PM: Optimal value: 4.768e-01
(CVXPY) Aug 30 12:20:55 PM: Compilation took 2.135e-01 seconds
(CVXPY) Aug 30 12:20:55 PM: Solver (including time spent in interface) took 1.625e+00 seconds
Iteration: 19, Objective: 0.4768
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:55 PM: Your problem has 25196 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:55 PM: Finished problem compilation (took 2.145e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25196
  constraints   = 50196
  nnz(P)        = 0
  nnz(A)        = 460978
  cones (total) = 1
    : Nonnegative = 1,  numel = 50196

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.64e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3478e+03  5.35e+03  4.24e-01  1.69e+02  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3486e-01  +6.3090e+02  6.30e+02  1.70e-01  8.65e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6433e+02  1.64e+02  1.47e-01  7.51e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5949e+01  1.54e+01  4.31e-02  2.18e+01  4.78e-06  1.96e-01  4.44e-01  
  5  +5.0004e-01  +1.5281e+00  1.03e+00  3.08e-03  1.62e+00  2.33e-05  1.93e-01  1.40e-01  
  6  +5.0001e-01  +8.6567e-01  3.66e-01  1.09e-03  5.76e-01  7.61e-06  9.77e-02  5.89e-01  
  7  +5.0001e-01  +6.9725e-01  1.97e-01  5.89e-04  3.11e-01  3.97e-06  5.32e-02  6.27e-01  
  8  +5.0001e-01  +6.7123e-01  1.71e-01  5.12e-04  2.70e-01  3.15e-06  3.43e-02  6.16e-01  
  9  +5.0000e-01  +6.4399e-01  1.44e-01  4.30e-04  2.26e-01  3.45e-06  1.90e-02  5.09e-01  
 10  +5.0000e-01  +6.1840e-01  1.18e-01  3.38e-04  1.78e-01  6.66e-06  4.12e-03  9.90e-01  
 11  +4.9958e-01  +5.9574e-01  9.62e-02  2.85e-05  1.51e-02  2.10e-04  9.58e-05  9.90e-01  
 12  +4.9908e-01  +5.8924e-01  9.02e-02  1.34e-05  7.11e-03  3.73e-04  4.42e-05  6.16e-01  
 13  +4.9904e-01  +5.8518e-01  8.61e-02  1.16e-05  6.14e-03  3.12e-04  3.80e-05  3.30e-01  
 14  +4.9905e-01  +5.7502e-01  7.60e-02  8.66e-06  4.59e-03  8.37e-05  2.80e-05  8.79e-01  
 15  +4.9901e-01  +5.7459e-01  7.56e-02  8.40e-06  4.45e-03  7.21e-05  2.71e-05  1.76e-01  
 16  +4.9848e-01  +5.7134e-01  7.29e-02  6.40e-06  3.39e-03  7.81e-05  2.06e-05  3.28e-01  
 17  +4.9844e-01  +5.7114e-01  7.27e-02  6.39e-06  3.38e-03  7.53e-05  2.05e-05  3.21e-02  
 18  +4.9836e-01  +5.7055e-01  7.22e-02  6.06e-06  3.21e-03  5.22e-05  1.94e-05  3.48e-01  
 19  +4.9822e-01  +5.7006e-01  7.18e-02  5.92e-06  3.14e-03  4.71e-05  1.90e-05  1.15e-01  
 20  +4.9764e-01  +5.6720e-01  6.96e-02  5.25e-06  2.78e-03  3.47e-05  1.69e-05  3.61e-01  
 21  +4.9519e-01  +5.5550e-01  6.03e-02  3.53e-06  1.87e-03  3.38e-05  1.14e-05  3.92e-01  
 22  +4.9389e-01  +5.4936e-01  5.55e-02  3.17e-06  1.68e-03  2.55e-05  1.03e-05  2.23e-01  
 23  +4.9255e-01  +5.4307e-01  5.05e-02  2.82e-06  1.49e-03  1.41e-05  9.27e-06  3.79e-01  
 24  +4.9159e-01  +5.3889e-01  4.73e-02  2.59e-06  1.37e-03  8.99e-06  8.54e-06  3.18e-01  
 25  +4.8958e-01  +5.3019e-01  4.06e-02  2.09e-06  1.11e-03  5.90e-06  6.97e-06  3.49e-01  
 26  +4.8668e-01  +5.1773e-01  3.11e-02  1.48e-06  7.83e-04  2.76e-06  5.02e-06  5.24e-01  
 27  +4.8592e-01  +5.1449e-01  2.86e-02  1.32e-06  6.98e-04  1.95e-06  4.49e-06  3.13e-01  
 28  +4.8483e-01  +5.1001e-01  2.52e-02  1.13e-06  5.95e-04  1.47e-06  3.85e-06  2.72e-01  
 29  +4.8468e-01  +5.0935e-01  2.47e-02  1.09e-06  5.77e-04  1.05e-06  3.75e-06  3.14e-01  
 30  +4.8219e-01  +4.9928e-01  1.71e-02  7.22e-07  3.82e-04  6.23e-07  2.52e-06  4.39e-01  
 31  +4.8185e-01  +4.9791e-01  1.61e-02  6.65e-07  3.52e-04  5.15e-07  2.32e-06  2.41e-01  
 32  +4.8180e-01  +4.9774e-01  1.59e-02  6.59e-07  3.48e-04  4.74e-07  2.30e-06  1.10e-01  
 33  +4.7937e-01  +4.8838e-01  9.00e-03  3.54e-07  1.88e-04  2.38e-07  1.27e-06  5.46e-01  
 34  +4.7936e-01  +4.8829e-01  8.93e-03  3.51e-07  1.86e-04  2.24e-07  1.26e-06  9.35e-02  
 35  +4.7766e-01  +4.8188e-01  4.22e-03  1.61e-07  8.54e-05  9.22e-08  5.91e-07  6.33e-01  
 36  +4.7666e-01  +4.7810e-01  1.43e-03  5.39e-08  2.85e-05  1.70e-08  2.01e-07  9.90e-01  
 37  +4.7613e-01  +4.7620e-01  7.28e-05  2.72e-09  1.44e-06  8.41e-10  1.03e-08  9.67e-01  
 38  +4.7610e-01  +4.7610e-01  7.74e-07  2.89e-11  1.53e-08  8.93e-12  1.09e-10  9.90e-01  
 39  +4.7610e-01  +4.7610e-01  7.74e-09  2.89e-13  1.53e-10  8.93e-14  1.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4103762s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:56 PM: Optimal value: 4.761e-01
(CVXPY) Aug 30 12:20:56 PM: Compilation took 2.145e-01 seconds
(CVXPY) Aug 30 12:20:56 PM: Solver (including time spent in interface) took 1.454e+00 seconds
Iteration: 20, Objective: 0.4761
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:57 PM: Your problem has 25206 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:57 PM: Finished problem compilation (took 2.185e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25206
  constraints   = 50206
  nnz(P)        = 0
  nnz(A)        = 465108
  cones (total) = 1
    : Nonnegative = 1,  numel = 50206

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.64e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3475e+03  5.35e+03  4.24e-01  1.69e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3485e-01  +6.3076e+02  6.30e+02  1.70e-01  8.64e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6428e+02  1.64e+02  1.47e-01  7.51e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5943e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0004e-01  +1.5290e+00  1.03e+00  3.08e-03  1.62e+00  2.33e-05  1.93e-01  1.40e-01  
  6  +5.0001e-01  +8.4152e-01  3.42e-01  1.02e-03  5.38e-01  7.03e-06  9.27e-02  6.21e-01  
  7  +5.0001e-01  +6.8879e-01  1.89e-01  5.64e-04  2.98e-01  3.82e-06  5.04e-02  6.21e-01  
  8  +5.0001e-01  +6.5434e-01  1.54e-01  4.61e-04  2.43e-01  3.44e-06  3.16e-02  4.84e-01  
  9  +5.0000e-01  +6.3956e-01  1.40e-01  4.15e-04  2.19e-01  4.07e-06  1.26e-02  8.39e-01  
 10  +4.9998e-01  +6.2429e-01  1.24e-01  3.11e-04  1.64e-01  1.70e-05  2.12e-03  8.54e-01  
 11  +4.9936e-01  +6.1888e-01  1.20e-01  3.14e-05  1.66e-02  3.14e-04  1.06e-04  9.51e-01  
 12  +4.9930e-01  +6.0007e-01  1.01e-01  2.00e-05  1.06e-02  2.64e-04  6.65e-05  6.01e-01  
 13  +4.9841e-01  +5.9012e-01  9.17e-02  9.76e-06  5.17e-03  4.29e-04  3.20e-05  5.80e-01  
 14  +4.9865e-01  +5.8891e-01  9.03e-02  9.60e-06  5.09e-03  3.53e-04  3.13e-05  1.70e-01  
 15  +4.9877e-01  +5.8598e-01  8.72e-02  9.24e-06  4.89e-03  2.63e-04  3.00e-05  2.48e-01  
 16  +4.9852e-01  +5.8347e-01  8.49e-02  7.97e-06  4.22e-03  2.62e-04  2.58e-05  2.18e-01  
 17  +4.9858e-01  +5.7975e-01  8.12e-02  7.42e-06  3.93e-03  1.54e-04  2.40e-05  4.17e-01  
 18  +4.9801e-01  +5.7590e-01  7.79e-02  6.00e-06  3.17e-03  1.46e-04  1.94e-05  3.21e-01  
 19  +4.9788e-01  +5.7490e-01  7.70e-02  5.90e-06  3.13e-03  1.35e-04  1.91e-05  7.61e-02  
 20  +4.9763e-01  +5.7208e-01  7.45e-02  5.74e-06  3.04e-03  8.71e-05  1.86e-05  2.96e-01  
 21  +4.9558e-01  +5.6186e-01  6.63e-02  4.08e-06  2.16e-03  8.75e-05  1.33e-05  3.32e-01  
 22  +4.9363e-01  +5.5201e-01  5.84e-02  3.39e-06  1.80e-03  6.57e-05  1.12e-05  2.67e-01  
 23  +4.9178e-01  +5.4292e-01  5.11e-02  2.83e-06  1.50e-03  3.98e-05  9.44e-06  3.68e-01  
 24  +4.9140e-01  +5.4101e-01  4.96e-02  2.71e-06  1.43e-03  2.94e-05  9.05e-06  2.28e-01  
 25  +4.8948e-01  +5.3246e-01  4.30e-02  2.22e-06  1.17e-03  1.75e-05  7.50e-06  3.85e-01  
 26  +4.8707e-01  +5.2164e-01  3.46e-02  1.67e-06  8.86e-04  5.36e-06  5.75e-06  6.30e-01  
 27  +4.8568e-01  +5.1583e-01  3.01e-02  1.41e-06  7.44e-04  3.73e-06  4.87e-06  3.10e-01  
 28  +4.8472e-01  +5.1181e-01  2.71e-02  1.22e-06  6.45e-04  2.15e-06  4.25e-06  4.33e-01  
 29  +4.8308e-01  +5.0509e-01  2.20e-02  9.54e-07  5.05e-04  1.24e-06  3.37e-06  4.42e-01  
 30  +4.8223e-01  +5.0157e-01  1.93e-02  8.19e-07  4.34e-04  7.96e-07  2.92e-06  4.04e-01  
 31  +4.7913e-01  +4.8926e-01  1.01e-02  4.12e-07  2.18e-04  3.53e-07  1.52e-06  5.65e-01  
 32  +4.7722e-01  +4.8168e-01  4.46e-03  1.76e-07  9.33e-05  9.87e-08  6.67e-07  7.87e-01  
 33  +4.7621e-01  +4.7778e-01  1.57e-03  6.13e-08  3.24e-05  1.78e-08  2.37e-07  9.90e-01  
 34  +4.7567e-01  +4.7579e-01  1.20e-04  4.66e-09  2.47e-06  1.33e-09  1.83e-08  9.34e-01  
 35  +4.7562e-01  +4.7562e-01  1.23e-06  4.77e-11  2.52e-08  1.36e-11  1.87e-10  9.90e-01  
 36  +4.7562e-01  +4.7562e-01  1.23e-08  4.77e-13  2.52e-10  1.36e-13  1.87e-12  9.90e-01  
 37  +4.7562e-01  +4.7562e-01  1.23e-10  4.74e-15  2.53e-12  1.46e-15  2.01e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1917867s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:58 PM: Problem status: optimal
(CVXPY) Aug 30 12:20:58 PM: Optimal value: 4.756e-01
(CVXPY) Aug 30 12:20:58 PM: Compilation took 2.185e-01 seconds
(CVXPY) Aug 30 12:20:58 PM: Solver (including time spent in interface) took 1.239e+00 seconds
Iteration: 21, Objective: 0.4756
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:20:58 PM: Your problem has 25207 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:20:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:20:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:20:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:20:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:20:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:20:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:20:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:20:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:20:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:20:59 PM: Finished problem compilation (took 2.185e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:20:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25207
  constraints   = 50207
  nnz(P)        = 0
  nnz(A)        = 465932
  cones (total) = 1
    : Nonnegative = 1,  numel = 50207

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.64e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3475e+03  5.35e+03  4.24e-01  1.69e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3485e-01  +6.3076e+02  6.30e+02  1.70e-01  8.64e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6428e+02  1.64e+02  1.47e-01  7.51e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5942e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0004e-01  +1.5296e+00  1.03e+00  3.09e-03  1.62e+00  2.33e-05  1.93e-01  1.40e-01  
  6  +5.0001e-01  +8.3407e-01  3.34e-01  9.99e-04  5.26e-01  6.85e-06  9.11e-02  6.32e-01  
  7  +5.0001e-01  +6.8649e-01  1.86e-01  5.57e-04  2.94e-01  3.71e-06  4.92e-02  6.44e-01  
  8  +5.0001e-01  +6.5972e-01  1.60e-01  4.77e-04  2.52e-01  3.36e-06  3.22e-02  4.85e-01  
  9  +5.0000e-01  +6.3022e-01  1.30e-01  3.87e-04  2.04e-01  4.23e-06  1.19e-02  7.91e-01  
 10  +4.9995e-01  +6.1345e-01  1.14e-01  2.40e-04  1.27e-01  2.69e-05  1.27e-03  9.31e-01  
 11  +4.9948e-01  +6.1030e-01  1.11e-01  3.74e-05  1.98e-02  2.54e-04  1.27e-04  9.00e-01  
 12  +4.9946e-01  +5.9693e-01  9.75e-02  2.50e-05  1.32e-02  2.23e-04  8.35e-05  5.82e-01  
 13  +4.9848e-01  +5.8781e-01  8.93e-02  9.69e-06  5.13e-03  4.76e-04  3.18e-05  6.69e-01  
 14  +4.9846e-01  +5.8541e-01  8.69e-02  8.60e-06  4.55e-03  4.19e-04  2.80e-05  2.71e-01  
 15  +4.9857e-01  +5.8289e-01  8.43e-02  8.38e-06  4.44e-03  3.08e-04  2.72e-05  2.42e-01  
 16  +4.9842e-01  +5.8136e-01  8.29e-02  7.63e-06  4.04e-03  2.94e-04  2.47e-05  1.76e-01  
 17  +4.9812e-01  +5.7728e-01  7.92e-02  6.43e-06  3.41e-03  2.17e-04  2.08e-05  4.26e-01  
 18  +4.9716e-01  +5.7000e-01  7.28e-02  5.05e-06  2.68e-03  1.25e-04  1.64e-05  5.80e-01  
 19  +4.9628e-01  +5.6529e-01  6.90e-02  4.57e-06  2.42e-03  1.08e-04  1.49e-05  1.76e-01  
 20  +4.9468e-01  +5.5688e-01  6.22e-02  3.88e-06  2.05e-03  7.57e-05  1.28e-05  3.16e-01  
 21  +4.9289e-01  +5.4825e-01  5.54e-02  3.22e-06  1.71e-03  5.94e-05  1.07e-05  2.56e-01  
 22  +4.9167e-01  +5.4256e-01  5.09e-02  2.84e-06  1.50e-03  4.63e-05  9.48e-06  2.31e-01  
 23  +4.9079e-01  +5.3856e-01  4.78e-02  2.58e-06  1.37e-03  3.49e-05  8.68e-06  2.33e-01  
 24  +4.8862e-01  +5.2870e-01  4.01e-02  2.04e-06  1.08e-03  1.25e-05  6.96e-06  5.73e-01  
 25  +4.8405e-01  +5.0915e-01  2.51e-02  1.15e-06  6.08e-04  4.74e-06  4.02e-06  6.13e-01  
 26  +4.8351e-01  +5.0696e-01  2.34e-02  1.05e-06  5.56e-04  4.09e-06  3.69e-06  1.56e-01  
 27  +4.8345e-01  +5.0659e-01  2.31e-02  1.03e-06  5.43e-04  3.07e-06  3.62e-06  2.49e-01  
 28  +4.8278e-01  +5.0390e-01  2.11e-02  9.22e-07  4.88e-04  2.63e-06  3.27e-06  1.55e-01  
 29  +4.8154e-01  +4.9866e-01  1.71e-02  7.10e-07  3.75e-04  5.95e-07  2.54e-06  8.15e-01  
 30  +4.7842e-01  +4.8644e-01  8.02e-03  3.22e-07  1.70e-04  2.25e-07  1.19e-06  6.38e-01  
 31  +4.7811e-01  +4.8521e-01  7.09e-03  2.83e-07  1.50e-04  1.79e-07  1.05e-06  2.68e-01  
 32  +4.7692e-01  +4.8046e-01  3.54e-03  1.39e-07  7.34e-05  4.11e-08  5.23e-07  9.90e-01  
 33  +4.7604e-01  +4.7720e-01  1.16e-03  4.50e-08  2.38e-05  1.33e-08  1.72e-07  7.68e-01  
 34  +4.7575e-01  +4.7615e-01  3.96e-04  1.53e-08  8.09e-06  4.31e-09  5.91e-08  9.31e-01  
 35  +4.7560e-01  +4.7562e-01  1.26e-05  4.84e-10  2.56e-07  1.36e-10  1.88e-09  9.71e-01  
 36  +4.7560e-01  +4.7560e-01  1.26e-07  4.84e-12  2.56e-09  1.36e-12  1.88e-11  9.90e-01  
 37  +4.7560e-01  +4.7560e-01  1.26e-09  4.86e-14  2.57e-11  1.54e-14  2.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2562932s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:21:00 PM: Problem status: optimal
(CVXPY) Aug 30 12:21:00 PM: Optimal value: 4.756e-01
(CVXPY) Aug 30 12:21:00 PM: Compilation took 2.185e-01 seconds
(CVXPY) Aug 30 12:21:00 PM: Solver (including time spent in interface) took 1.302e+00 seconds
Iteration: 22, Objective: 0.4756
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:21:00 PM: Your problem has 25210 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:21:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:21:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:21:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:21:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:21:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:21:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:21:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:21:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:21:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:21:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:21:00 PM: Finished problem compilation (took 2.171e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:21:00 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25210
  constraints   = 50210
  nnz(P)        = 0
  nnz(A)        = 466896
  cones (total) = 1
    : Nonnegative = 1,  numel = 50210

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.64e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3475e+03  5.35e+03  4.24e-01  1.69e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3485e-01  +6.3076e+02  6.30e+02  1.70e-01  8.64e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6428e+02  1.64e+02  1.47e-01  7.51e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5944e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0004e-01  +1.5301e+00  1.03e+00  3.09e-03  1.62e+00  2.33e-05  1.93e-01  1.40e-01  
  6  +5.0001e-01  +8.4300e-01  3.43e-01  1.03e-03  5.41e-01  7.07e-06  9.30e-02  6.13e-01  
  7  +5.0001e-01  +6.9863e-01  1.99e-01  5.94e-04  3.13e-01  3.94e-06  5.25e-02  6.19e-01  
  8  +5.0001e-01  +6.6022e-01  1.60e-01  4.79e-04  2.52e-01  3.43e-06  3.31e-02  4.91e-01  
  9  +5.0000e-01  +6.3552e-01  1.36e-01  4.03e-04  2.13e-01  4.05e-06  1.28e-02  8.11e-01  
 10  +4.9996e-01  +6.1479e-01  1.15e-01  2.56e-04  1.35e-01  2.35e-05  1.43e-03  9.28e-01  
 11  +4.9953e-01  +6.1107e-01  1.12e-01  3.99e-05  2.11e-02  2.32e-04  1.36e-04  9.08e-01  
 12  +4.9928e-01  +5.8934e-01  9.01e-02  1.75e-05  9.25e-03  2.72e-04  5.81e-05  8.29e-01  
 13  +4.9868e-01  +5.8366e-01  8.50e-02  1.02e-05  5.38e-03  3.79e-04  3.33e-05  5.14e-01  
 14  +4.9866e-01  +5.8240e-01  8.37e-02  9.30e-06  4.93e-03  3.44e-04  3.04e-05  2.19e-01  
 15  +4.9863e-01  +5.8022e-01  8.16e-02  8.25e-06  4.37e-03  2.74e-04  2.68e-05  3.45e-01  
 16  +4.9840e-01  +5.7762e-01  7.92e-02  7.07e-06  3.74e-03  2.27e-04  2.29e-05  3.62e-01  
 17  +4.9787e-01  +5.7417e-01  7.63e-02  5.96e-06  3.16e-03  2.03e-04  1.93e-05  3.09e-01  
 18  +4.9783e-01  +5.7394e-01  7.61e-02  5.95e-06  3.15e-03  1.99e-04  1.93e-05  1.48e-02  
 19  +4.9754e-01  +5.7145e-01  7.39e-02  5.76e-06  3.05e-03  1.36e-04  1.87e-05  2.79e-01  
 20  +4.9642e-01  +5.6556e-01  6.91e-02  4.79e-06  2.54e-03  1.15e-04  1.57e-05  3.03e-01  
 21  +4.9448e-01  +5.5581e-01  6.13e-02  3.81e-06  2.02e-03  8.33e-05  1.26e-05  3.61e-01  
 22  +4.9286e-01  +5.4813e-01  5.53e-02  3.23e-06  1.71e-03  6.61e-05  1.08e-05  2.42e-01  
 23  +4.9163e-01  +5.4245e-01  5.08e-02  2.84e-06  1.50e-03  5.00e-05  9.50e-06  2.51e-01  
 24  +4.9116e-01  +5.4034e-01  4.92e-02  2.71e-06  1.43e-03  4.25e-05  9.11e-06  1.36e-01  
 25  +4.8825e-01  +5.2753e-01  3.93e-02  1.99e-06  1.06e-03  2.36e-05  6.82e-06  4.39e-01  
 26  +4.8497e-01  +5.1313e-01  2.82e-02  1.31e-06  6.92e-04  5.52e-06  4.57e-06  7.16e-01  
 27  +4.8417e-01  +5.0983e-01  2.57e-02  1.16e-06  6.16e-04  4.61e-06  4.09e-06  1.80e-01  
 28  +4.8355e-01  +5.0731e-01  2.38e-02  1.04e-06  5.53e-04  2.93e-06  3.68e-06  3.79e-01  
 29  +4.8319e-01  +5.0583e-01  2.26e-02  9.85e-07  5.21e-04  2.37e-06  3.48e-06  1.99e-01  
 30  +4.8104e-01  +4.9711e-01  1.61e-02  6.71e-07  3.55e-04  1.06e-06  2.42e-06  5.72e-01  
 31  +4.7804e-01  +4.8507e-01  7.03e-03  2.80e-07  1.48e-04  8.36e-08  1.04e-06  9.77e-01  
 32  +4.7695e-01  +4.8086e-01  3.92e-03  1.54e-07  8.17e-05  4.53e-08  5.85e-07  6.29e-01  
 33  +4.7592e-01  +4.7695e-01  1.03e-03  4.02e-08  2.13e-05  1.14e-08  1.55e-07  9.90e-01  
 34  +4.7561e-01  +4.7583e-01  2.27e-04  8.81e-09  4.66e-06  2.46e-09  3.42e-08  8.33e-01  
 35  +4.7554e-01  +4.7558e-01  4.40e-05  1.70e-09  8.99e-07  4.69e-10  6.62e-09  9.90e-01  
 36  +4.7552e-01  +4.7552e-01  5.48e-07  2.12e-11  1.12e-08  5.84e-12  8.25e-11  9.88e-01  
 37  +4.7552e-01  +4.7552e-01  5.48e-09  2.12e-13  1.12e-10  5.84e-14  8.25e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2487205s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:21:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:21:02 PM: Optimal value: 4.755e-01
(CVXPY) Aug 30 12:21:02 PM: Compilation took 2.171e-01 seconds
(CVXPY) Aug 30 12:21:02 PM: Solver (including time spent in interface) took 1.293e+00 seconds
Iteration: 23, Objective: 0.4755
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:21:02 PM: Your problem has 25211 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:21:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:21:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:21:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:21:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:21:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:21:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:21:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:21:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:21:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:21:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:21:02 PM: Finished problem compilation (took 2.248e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:21:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25211
  constraints   = 50211
  nnz(P)        = 0
  nnz(A)        = 467748
  cones (total) = 1
    : Nonnegative = 1,  numel = 50211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.64e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3475e+03  5.35e+03  4.24e-01  1.69e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3485e-01  +6.3074e+02  6.30e+02  1.70e-01  8.64e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6428e+02  1.64e+02  1.47e-01  7.51e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5943e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0004e-01  +1.5279e+00  1.03e+00  3.08e-03  1.62e+00  2.33e-05  1.93e-01  1.40e-01  
  6  +5.0001e-01  +8.4634e-01  3.46e-01  1.04e-03  5.46e-01  7.15e-06  9.36e-02  6.21e-01  
  7  +5.0001e-01  +6.9910e-01  1.99e-01  5.95e-04  3.14e-01  3.98e-06  5.28e-02  6.11e-01  
  8  +5.0001e-01  +6.5472e-01  1.55e-01  4.62e-04  2.44e-01  3.40e-06  3.14e-02  5.33e-01  
  9  +5.0000e-01  +6.4197e-01  1.42e-01  4.22e-04  2.23e-01  4.02e-06  1.24e-02  8.56e-01  
 10  +4.9997e-01  +6.2062e-01  1.21e-01  2.70e-04  1.43e-01  2.17e-05  1.52e-03  9.04e-01  
 11  +4.9945e-01  +6.1554e-01  1.16e-01  3.36e-05  1.78e-02  2.69e-04  1.14e-04  9.28e-01  
 12  +4.9931e-01  +5.8876e-01  8.95e-02  1.59e-05  8.43e-03  2.36e-04  5.27e-05  8.43e-01  
 13  +4.9878e-01  +5.8391e-01  8.51e-02  9.97e-06  5.28e-03  3.14e-04  3.27e-05  4.56e-01  
 14  +4.9874e-01  +5.8255e-01  8.38e-02  9.11e-06  4.83e-03  2.86e-04  2.97e-05  2.15e-01  
 15  +4.9872e-01  +5.8025e-01  8.15e-02  8.14e-06  4.31e-03  2.15e-04  2.64e-05  3.68e-01  
 16  +4.9837e-01  +5.7634e-01  7.80e-02  6.54e-06  3.46e-03  1.52e-04  2.12e-05  5.28e-01  
 17  +4.9817e-01  +5.7512e-01  7.69e-02  6.19e-06  3.28e-03  1.44e-04  2.01e-05  1.17e-01  
 18  +4.9720e-01  +5.6939e-01  7.22e-02  5.15e-06  2.73e-03  9.40e-05  1.68e-05  4.70e-01  
 19  +4.9514e-01  +5.5877e-01  6.36e-02  3.98e-06  2.11e-03  6.13e-05  1.31e-05  4.52e-01  
 20  +4.9373e-01  +5.5200e-01  5.83e-02  3.48e-06  1.84e-03  4.76e-05  1.15e-05  2.38e-01  
 21  +4.9189e-01  +5.4356e-01  5.17e-02  2.89e-06  1.53e-03  3.79e-05  9.65e-06  2.42e-01  
 22  +4.9092e-01  +5.3923e-01  4.83e-02  2.62e-06  1.39e-03  2.93e-05  8.82e-06  2.17e-01  
 23  +4.8832e-01  +5.2768e-01  3.94e-02  2.00e-06  1.06e-03  7.42e-06  6.82e-06  6.62e-01  
 24  +4.8490e-01  +5.1305e-01  2.82e-02  1.32e-06  6.98e-04  3.93e-06  4.61e-06  4.71e-01  
 25  +4.8434e-01  +5.1071e-01  2.64e-02  1.21e-06  6.40e-04  3.34e-06  4.24e-06  1.68e-01  
 26  +4.8400e-01  +5.0927e-01  2.53e-02  1.14e-06  6.04e-04  2.84e-06  4.01e-06  1.64e-01  
 27  +4.8308e-01  +5.0540e-01  2.23e-02  9.72e-07  5.15e-04  1.72e-06  3.44e-06  4.21e-01  
 28  +4.8283e-01  +5.0424e-01  2.14e-02  9.19e-07  4.87e-04  1.12e-06  3.26e-06  3.86e-01  
 29  +4.7971e-01  +4.9182e-01  1.21e-02  4.96e-07  2.62e-04  4.01e-07  1.81e-06  6.73e-01  
 30  +4.7727e-01  +4.8215e-01  4.89e-03  1.94e-07  1.03e-04  1.01e-07  7.31e-07  8.11e-01  
 31  +4.7660e-01  +4.7955e-01  2.95e-03  1.16e-07  6.13e-05  4.92e-08  4.41e-07  6.49e-01  
 32  +4.7614e-01  +4.7783e-01  1.68e-03  6.56e-08  3.47e-05  2.59e-08  2.52e-07  5.63e-01  
 33  +4.7570e-01  +4.7617e-01  4.74e-04  1.83e-08  9.70e-06  5.76e-09  7.11e-08  9.18e-01  
 34  +4.7556e-01  +4.7565e-01  9.27e-05  3.58e-09  1.90e-06  1.09e-09  1.40e-08  8.55e-01  
 35  +4.7552e-01  +4.7552e-01  2.14e-06  8.28e-11  4.38e-08  2.39e-11  3.23e-10  9.90e-01  
 36  +4.7552e-01  +4.7552e-01  2.14e-08  8.28e-13  4.38e-10  2.39e-13  3.23e-12  9.90e-01  
 37  +4.7552e-01  +4.7552e-01  2.15e-10  8.36e-15  4.39e-12  2.64e-15  3.56e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2305754s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:21:03 PM: Problem status: optimal
(CVXPY) Aug 30 12:21:03 PM: Optimal value: 4.755e-01
(CVXPY) Aug 30 12:21:03 PM: Compilation took 2.248e-01 seconds
(CVXPY) Aug 30 12:21:03 PM: Solver (including time spent in interface) took 1.277e+00 seconds
FULL MODEL:
  Accruacy: 0.51032
  Our objective: 0.020640000000000103

IF 
    (x3 = 1)                                                                              <-- (term's our objective: 0.01367999999999997)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.0049199999999999956)
 OR (x1 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0011600000000000434)
 OR (x1 = 1 AND x2 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0008800000000000305)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.01367999999999997
    Its accruacy: 0.50684
    Its hamming distance: 9
  Shortest hamming distance: 1
    Its our objective: 0.0049199999999999956
  Highest accruacy: 0.50684
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

