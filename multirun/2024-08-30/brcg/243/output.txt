Command:
python test_script.py -s smallest_subclass -d 7 -n 10 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 7.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:54 PM: Your problem has 20 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:54 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 20
  constraints   = 25
  nnz(P)        = 0
  nnz(A)        = 65
  cones (total) = 1
    : Nonnegative = 1,  numel = 25

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.0922e-01  +6.4144e+00  6.01e+00  7.53e-01  2.62e+00  1.00e+00  1.36e+00   ------   
  1  +3.6314e-01  +1.0806e+00  7.17e-01  2.36e-01  1.00e+00  3.50e-03  5.56e-01  7.96e-01  
  2  +1.6834e-01  +2.9701e-01  1.29e-01  4.29e-02  1.90e-01  5.71e-03  1.42e-01  8.31e-01  
  3  +1.5136e-01  +1.5844e-01  7.08e-03  2.51e-03  1.10e-02  4.29e-04  9.92e-03  9.49e-01  
  4  +1.5016e-01  +1.5024e-01  7.77e-05  2.79e-05  1.22e-04  4.71e-06  1.13e-04  9.89e-01  
  5  +1.5015e-01  +1.5015e-01  7.77e-07  2.79e-07  1.22e-06  4.71e-08  1.13e-06  9.90e-01  
  6  +1.5015e-01  +1.5015e-01  7.77e-09  2.79e-09  1.22e-08  4.71e-10  1.13e-08  9.90e-01  
  7  +1.5015e-01  +1.5015e-01  7.77e-11  2.79e-11  1.22e-10  4.71e-12  1.13e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:54 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:54 PM: Optimal value: 1.502e-01
(CVXPY) Aug 30 12:11:54 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:11:54 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:54 PM: Your problem has 30 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:54 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 30
  constraints   = 35
  nnz(P)        = 0
  nnz(A)        = 100
  cones (total) = 1
    : Nonnegative = 1,  numel = 35

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.9202e-01  +6.1467e+00  5.85e+00  7.92e-01  2.83e+00  1.00e+00  1.30e+00   ------   
  1  +9.8136e-02  +8.6698e-01  7.69e-01  2.75e-01  1.03e+00  4.00e-03  5.12e-01  7.58e-01  
  2  +4.7712e-02  +1.5719e-01  1.09e-01  4.75e-02  1.96e-01  6.85e-03  1.19e-01  8.65e-01  
  3  +5.7967e-03  +2.3566e-02  1.78e-02  6.67e-03  3.00e-02  1.21e-03  1.89e-02  8.75e-01  
  4  +2.7832e-04  +5.0931e-04  2.31e-04  8.85e-05  3.95e-04  1.29e-05  2.53e-04  9.87e-01  
  5  +2.0578e-04  +2.1829e-04  1.25e-05  5.83e-06  2.33e-05  1.37e-07  1.71e-05  9.34e-01  
  6  +2.0007e-04  +2.0022e-04  1.48e-07  7.06e-08  2.77e-07  2.54e-09  2.14e-07  9.89e-01  
  7  +2.0000e-04  +2.0000e-04  1.48e-09  7.06e-10  2.77e-09  2.53e-11  2.14e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4601ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:54 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:54 PM: Optimal value: 2.000e-04
(CVXPY) Aug 30 12:11:54 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:11:54 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:54 PM: Your problem has 31 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:54 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 31
  constraints   = 36
  nnz(P)        = 0
  nnz(A)        = 104
  cones (total) = 1
    : Nonnegative = 1,  numel = 36

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.8055e-01  +6.1191e+00  5.84e+00  7.94e-01  2.86e+00  1.00e+00  1.29e+00   ------   
  1  +7.5722e-02  +8.5495e-01  7.79e-01  2.81e-01  1.05e+00  4.05e-03  5.10e-01  7.52e-01  
  2  +3.3016e-02  +1.3336e-01  1.00e-01  4.50e-02  1.83e-01  7.18e-03  1.11e-01  8.89e-01  
  3  +1.9278e-03  +8.1245e-03  6.20e-03  2.65e-03  1.12e-02  4.58e-04  7.16e-03  9.49e-01  
  4  +2.2787e-04  +3.2225e-04  9.44e-05  4.20e-05  1.75e-04  4.59e-06  1.14e-04  9.84e-01  
  5  +2.0099e-04  +2.0653e-04  5.54e-06  2.88e-06  1.09e-05  2.07e-07  7.94e-06  9.34e-01  
  6  +2.0001e-04  +2.0007e-04  5.84e-08  3.06e-08  1.15e-07  2.20e-09  8.47e-08  9.89e-01  
  7  +2.0000e-04  +2.0000e-04  5.84e-10  3.06e-10  1.15e-09  2.20e-11  8.47e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 620.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:54 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:54 PM: Optimal value: 2.000e-04
(CVXPY) Aug 30 12:11:54 PM: Compilation took 1.561e-02 seconds
(CVXPY) Aug 30 12:11:54 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 1 AND x4 = 0) <-- (term's our objective: 0.4)
 OR (x1 = 0 AND x2 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

