Command:
python test_script.py -s smallest_subclass -d 8 -n 50000 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.00396
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 8.

Computed total variation: 0.06124
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:43 PM: Your problem has 25017 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:43 PM: Finished problem compilation (took 1.048e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25017
  constraints   = 50017
  nnz(P)        = 0
  nnz(A)        = 275017
  cones (total) = 1
    : Nonnegative = 1,  numel = 50017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3498e-01  +6.3201e+02  6.31e+02  1.70e-01  8.22e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0962e-01  +1.6465e+02  1.64e+02  1.47e-01  7.15e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5935e+01  1.54e+01  4.30e-02  2.06e+01  4.76e-06  1.96e-01  4.42e-01  
  5  +4.9999e-01  +1.0067e+00  5.07e-01  1.51e-03  7.53e-01  2.33e-05  1.91e-01  2.69e-01  
  6  +5.0000e-01  +5.3394e-01  3.39e-02  1.01e-04  5.05e-02  1.30e-06  1.33e-02  9.30e-01  
  7  +5.0000e-01  +5.2625e-01  2.63e-02  7.83e-05  3.91e-02  1.13e-06  8.36e-03  4.15e-01  
  8  +5.0000e-01  +5.1488e-01  1.49e-02  4.43e-05  2.21e-02  1.35e-06  2.24e-03  7.83e-01  
  9  +4.9993e-01  +5.2104e-01  2.11e-02  2.56e-05  1.28e-02  3.75e-05  9.74e-05  9.79e-01  
 10  +4.9838e-01  +5.1570e-01  1.73e-02  1.13e-06  5.63e-04  7.76e-04  3.59e-06  9.63e-01  
 11  +4.9786e-01  +5.0793e-01  1.01e-02  5.82e-07  2.91e-04  2.79e-04  1.90e-06  6.26e-01  
 12  +4.9743e-01  +5.0412e-01  6.69e-03  3.53e-07  1.76e-04  8.45e-05  1.19e-06  6.54e-01  
 13  +4.9681e-01  +5.0053e-01  3.72e-03  1.78e-07  8.89e-05  9.08e-07  6.22e-07  9.23e-01  
 14  +4.9601e-01  +4.9721e-01  1.20e-03  5.21e-08  2.60e-05  2.34e-07  1.94e-07  7.37e-01  
 15  +4.9587e-01  +4.9665e-01  7.78e-04  3.25e-08  1.62e-05  1.05e-08  1.25e-07  9.90e-01  
 16  +4.9561e-01  +4.9564e-01  2.85e-05  1.14e-09  5.71e-07  3.68e-10  4.59e-09  9.65e-01  
 17  +4.9560e-01  +4.9560e-01  2.88e-07  1.15e-11  5.75e-09  3.72e-12  4.65e-11  9.90e-01  
 18  +4.9560e-01  +4.9560e-01  2.88e-09  1.15e-13  5.75e-11  3.72e-14  4.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 398.2322ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:43 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:43 PM: Optimal value: 4.956e-01
(CVXPY) Aug 30 12:24:43 PM: Compilation took 1.048e-01 seconds
(CVXPY) Aug 30 12:24:43 PM: Solver (including time spent in interface) took 4.290e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4956
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:43 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:43 PM: Finished problem compilation (took 1.135e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 294812
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.52e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3464e+03  5.35e+03  4.23e-01  1.61e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3497e-01  +6.3192e+02  6.31e+02  1.70e-01  8.30e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6462e+02  1.64e+02  1.47e-01  7.22e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5931e+01  1.54e+01  4.30e-02  2.08e+01  4.76e-06  1.96e-01  4.42e-01  
  5  +4.9999e-01  +1.0147e+00  5.15e-01  1.54e-03  7.73e-01  2.34e-05  1.90e-01  2.68e-01  
  6  +5.0000e-01  +5.7620e-01  7.62e-02  2.27e-04  1.15e-01  3.16e-06  2.92e-02  8.57e-01  
  7  +5.0000e-01  +5.6898e-01  6.90e-02  2.06e-04  1.04e-01  1.71e-06  2.09e-02  7.19e-01  
  8  +5.0000e-01  +5.3122e-01  3.12e-02  9.31e-05  4.69e-02  1.09e-06  6.98e-03  6.99e-01  
  9  +4.9999e-01  +5.2627e-01  2.63e-02  7.66e-05  3.86e-02  3.59e-06  1.28e-03  8.65e-01  
 10  +4.9990e-01  +5.2583e-01  2.59e-02  2.20e-05  1.11e-02  4.99e-05  8.01e-05  9.90e-01  
 11  +4.9856e-01  +5.2146e-01  2.29e-02  1.53e-06  7.75e-04  6.69e-04  5.02e-06  9.38e-01  
 12  +4.9844e-01  +5.1983e-01  2.14e-02  1.39e-06  7.02e-04  5.28e-04  4.56e-06  2.19e-01  
 13  +4.9793e-01  +5.1626e-01  1.83e-02  1.10e-06  5.54e-04  3.84e-04  3.66e-06  3.13e-01  
 14  +4.9784e-01  +5.1563e-01  1.78e-02  1.09e-06  5.50e-04  3.49e-04  3.65e-06  2.88e-02  
 15  +4.9777e-01  +5.1291e-01  1.51e-02  9.23e-07  4.66e-04  3.49e-06  3.17e-06  7.95e-01  
 16  +4.9732e-01  +5.1078e-01  1.35e-02  7.76e-07  3.92e-04  2.62e-06  2.69e-06  2.65e-01  
 17  +4.9698e-01  +5.0892e-01  1.19e-02  6.70e-07  3.39e-04  2.00e-07  2.36e-06  7.88e-01  
 18  +4.9550e-01  +5.0233e-01  6.83e-03  3.36e-07  1.70e-04  1.03e-07  1.23e-06  5.35e-01  
 19  +4.9486e-01  +4.9943e-01  4.57e-03  2.08e-07  1.05e-04  3.56e-08  7.92e-07  9.90e-01  
 20  +4.9384e-01  +4.9511e-01  1.27e-03  5.54e-08  2.80e-05  9.01e-09  2.26e-07  7.41e-01  
 21  +4.9350e-01  +4.9370e-01  1.95e-04  8.37e-09  4.23e-06  1.70e-09  3.58e-08  9.90e-01  
 22  +4.9344e-01  +4.9344e-01  2.38e-06  1.02e-10  5.15e-08  2.02e-11  4.42e-10  9.88e-01  
 23  +4.9344e-01  +4.9344e-01  2.38e-08  1.02e-12  5.15e-10  2.02e-13  4.42e-12  9.90e-01  
 24  +4.9344e-01  +4.9344e-01  2.39e-10  1.02e-14  5.19e-12  2.79e-15  6.03e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 538.6743ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:44 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:44 PM: Optimal value: 4.934e-01
(CVXPY) Aug 30 12:24:44 PM: Compilation took 1.135e-01 seconds
(CVXPY) Aug 30 12:24:44 PM: Solver (including time spent in interface) took 5.705e-01 seconds
Iteration: 2, Objective: 0.4934
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:44 PM: Your problem has 25037 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:44 PM: Finished problem compilation (took 1.213e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25037
  constraints   = 50037
  nnz(P)        = 0
  nnz(A)        = 330050
  cones (total) = 1
    : Nonnegative = 1,  numel = 50037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3467e+03  5.35e+03  4.23e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3495e-01  +6.3177e+02  6.31e+02  1.70e-01  8.51e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6458e+02  1.64e+02  1.47e-01  7.39e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5933e+01  1.54e+01  4.30e-02  2.14e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0910e+00  5.91e-01  1.77e-03  9.10e-01  2.34e-05  1.91e-01  2.34e-01  
  6  +5.0001e-01  +6.7061e-01  1.71e-01  5.09e-04  2.63e-01  3.22e-06  5.48e-02  9.90e-01  
  7  +5.0001e-01  +6.3323e-01  1.33e-01  3.97e-04  2.05e-01  1.78e-06  3.97e-02  6.35e-01  
  8  +5.0000e-01  +5.7343e-01  7.34e-02  2.19e-04  1.13e-01  8.84e-07  1.95e-02  6.86e-01  
  9  +5.0000e-01  +5.5385e-01  5.38e-02  1.60e-04  8.29e-02  9.08e-07  9.24e-03  5.74e-01  
 10  +5.0000e-01  +5.6318e-01  6.32e-02  1.88e-04  9.70e-02  2.43e-07  6.70e-03  9.90e-01  
 11  +5.0000e-01  +5.4634e-01  4.63e-02  1.03e-04  5.35e-02  1.54e-06  5.95e-04  9.22e-01  
 12  +4.9988e-01  +5.4604e-01  4.62e-02  4.31e-06  2.23e-03  6.15e-05  1.45e-05  9.76e-01  
 13  +4.9961e-01  +5.4192e-01  4.23e-02  2.52e-06  1.30e-03  8.04e-05  8.48e-06  5.18e-01  
 14  +4.9922e-01  +5.3861e-01  3.94e-02  2.49e-06  1.29e-03  6.40e-05  8.42e-06  7.14e-02  
 15  +4.9839e-01  +5.3236e-01  3.40e-02  2.19e-06  1.14e-03  4.21e-05  7.53e-06  2.33e-01  
 16  +4.9830e-01  +5.3145e-01  3.32e-02  2.18e-06  1.13e-03  3.69e-05  7.49e-06  7.09e-02  
 17  +4.9715e-01  +5.2299e-01  2.58e-02  1.66e-06  8.61e-04  8.13e-06  5.79e-06  6.40e-01  
 18  +4.9686e-01  +5.2118e-01  2.43e-02  1.50e-06  7.77e-04  5.72e-06  5.22e-06  2.98e-01  
 19  +4.9664e-01  +5.1948e-01  2.28e-02  1.42e-06  7.33e-04  2.84e-06  4.93e-06  4.09e-01  
 20  +4.9501e-01  +5.1147e-01  1.65e-02  8.95e-07  4.64e-04  1.86e-06  3.13e-06  4.34e-01  
 21  +4.9388e-01  +5.0564e-01  1.18e-02  5.51e-07  2.85e-04  3.44e-08  1.89e-06  9.90e-01  
 22  +4.9281e-01  +5.0096e-01  8.15e-03  3.21e-07  1.66e-04  3.17e-08  1.09e-06  4.69e-01  
 23  +4.9191e-01  +4.9795e-01  6.05e-03  2.83e-07  1.46e-04  1.77e-08  1.08e-06  5.56e-02  
 24  +4.9147e-01  +4.9590e-01  4.42e-03  1.79e-07  9.25e-05  3.84e-08  6.24e-07  9.13e-01  
 25  +4.9029e-01  +4.9178e-01  1.50e-03  5.41e-08  2.80e-05  1.47e-08  1.92e-07  8.48e-01  
 26  +4.8978e-01  +4.8983e-01  5.04e-05  1.81e-09  9.38e-07  5.16e-10  6.57e-09  9.80e-01  
 27  +4.8976e-01  +4.8976e-01  5.04e-07  1.81e-11  9.39e-09  5.16e-12  6.58e-11  9.90e-01  
 28  +4.8976e-01  +4.8976e-01  5.04e-09  1.81e-13  9.39e-11  5.16e-14  6.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 742.1756ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:45 PM: Optimal value: 4.898e-01
(CVXPY) Aug 30 12:24:45 PM: Compilation took 1.213e-01 seconds
(CVXPY) Aug 30 12:24:45 PM: Solver (including time spent in interface) took 7.764e-01 seconds
Iteration: 3, Objective: 0.4898
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:45 PM: Your problem has 25047 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:45 PM: Finished problem compilation (took 1.334e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25047
  constraints   = 50047
  nnz(P)        = 0
  nnz(A)        = 343869
  cones (total) = 1
    : Nonnegative = 1,  numel = 50047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3469e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3161e+02  6.31e+02  1.70e-01  8.53e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6453e+02  1.64e+02  1.47e-01  7.42e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5935e+01  1.54e+01  4.30e-02  2.14e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1034e+00  6.03e-01  1.80e-03  9.32e-01  2.34e-05  1.91e-01  2.32e-01  
  6  +5.0001e-01  +8.8173e-01  3.82e-01  1.14e-03  5.90e-01  1.22e-05  1.17e-01  6.08e-01  
  7  +5.0001e-01  +7.8203e-01  2.82e-01  8.41e-04  4.36e-01  5.64e-06  7.88e-02  8.03e-01  
  8  +5.0001e-01  +6.3939e-01  1.39e-01  4.16e-04  2.15e-01  2.55e-06  4.04e-02  6.41e-01  
  9  +5.0000e-01  +5.8534e-01  8.53e-02  2.55e-04  1.32e-01  1.32e-06  1.95e-02  7.65e-01  
 10  +5.0001e-01  +6.0667e-01  1.07e-01  3.18e-04  1.65e-01  2.90e-07  1.56e-02  9.90e-01  
 11  +5.0000e-01  +5.5411e-01  5.41e-02  1.58e-04  8.20e-02  4.47e-07  2.79e-03  8.84e-01  
 12  +4.9995e-01  +5.5690e-01  5.70e-02  1.26e-05  6.56e-03  2.87e-05  4.22e-05  9.89e-01  
 13  +4.9975e-01  +5.5453e-01  5.48e-02  3.79e-06  1.97e-03  9.02e-05  1.24e-05  7.25e-01  
 14  +4.9952e-01  +5.5213e-01  5.26e-02  3.75e-06  1.95e-03  8.02e-05  1.23e-05  4.60e-02  
 15  +4.9905e-01  +5.4634e-01  4.73e-02  3.70e-06  1.92e-03  5.26e-05  1.21e-05  1.56e-01  
 16  +4.9860e-01  +5.4144e-01  4.28e-02  3.31e-06  1.72e-03  3.52e-05  1.08e-05  3.00e-01  
 17  +4.9813e-01  +5.3803e-01  3.99e-02  2.81e-06  1.46e-03  2.88e-05  9.19e-06  2.84e-01  
 18  +4.9774e-01  +5.3473e-01  3.70e-02  2.38e-06  1.24e-03  1.62e-05  7.81e-06  4.75e-01  
 19  +4.9731e-01  +5.3171e-01  3.44e-02  2.02e-06  1.05e-03  6.89e-06  6.63e-06  5.83e-01  
 20  +4.9718e-01  +5.3105e-01  3.39e-02  2.01e-06  1.04e-03  6.34e-06  6.60e-06  4.70e-02  
 21  +4.9541e-01  +5.2209e-01  2.67e-02  1.49e-06  7.72e-04  6.61e-08  4.99e-06  8.51e-01  
 22  +4.9410e-01  +5.1669e-01  2.26e-02  1.15e-06  5.99e-04  8.49e-08  3.92e-06  3.90e-01  
 23  +4.9339e-01  +5.1319e-01  1.98e-02  9.59e-07  4.98e-04  1.66e-07  3.30e-06  9.90e-01  
 24  +4.9104e-01  +5.0385e-01  1.28e-02  5.70e-07  2.96e-04  1.04e-07  2.01e-06  4.43e-01  
 25  +4.8953e-01  +4.9758e-01  8.06e-03  3.31e-07  1.72e-04  7.68e-08  1.19e-06  9.90e-01  
 26  +4.8692e-01  +4.8754e-01  6.20e-04  2.44e-08  1.27e-05  4.61e-09  9.27e-08  9.90e-01  
 27  +4.8669e-01  +4.8671e-01  2.05e-05  8.02e-10  4.17e-07  1.29e-10  3.16e-09  9.70e-01  
 28  +4.8668e-01  +4.8668e-01  2.05e-07  8.04e-12  4.18e-09  1.29e-12  3.18e-11  9.90e-01  
 29  +4.8668e-01  +4.8668e-01  2.05e-09  8.04e-14  4.18e-11  1.29e-14  3.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 753.3903ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:46 PM: Optimal value: 4.867e-01
(CVXPY) Aug 30 12:24:46 PM: Compilation took 1.334e-01 seconds
(CVXPY) Aug 30 12:24:46 PM: Solver (including time spent in interface) took 7.881e-01 seconds
Iteration: 4, Objective: 0.4867
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:46 PM: Your problem has 25057 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:46 PM: Finished problem compilation (took 1.297e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25057
  constraints   = 50057
  nnz(P)        = 0
  nnz(A)        = 355327
  cones (total) = 1
    : Nonnegative = 1,  numel = 50057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3469e+03  5.35e+03  4.24e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3159e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6452e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5933e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1295e+00  6.29e-01  1.88e-03  9.74e-01  2.35e-05  1.91e-01  2.23e-01  
  6  +5.0001e-01  +8.0055e-01  3.01e-01  8.97e-04  4.65e-01  8.89e-06  9.36e-02  7.00e-01  
  7  +5.0000e-01  +7.0562e-01  2.06e-01  6.14e-04  3.18e-01  5.76e-06  6.41e-02  4.05e-01  
  8  +5.0000e-01  +6.4592e-01  1.46e-01  4.35e-04  2.26e-01  3.70e-06  4.18e-02  5.06e-01  
  9  +5.0000e-01  +6.1132e-01  1.11e-01  3.32e-04  1.72e-01  2.65e-06  2.56e-02  5.69e-01  
 10  +5.0000e-01  +6.1386e-01  1.14e-01  3.40e-04  1.76e-01  2.24e-06  2.31e-02  3.06e-01  
 11  +5.0000e-01  +5.7760e-01  7.76e-02  2.31e-04  1.20e-01  2.61e-06  7.95e-03  7.34e-01  
 12  +4.9993e-01  +5.5915e-01  5.92e-02  8.26e-05  4.30e-02  3.63e-05  3.45e-04  9.84e-01  
 13  +4.9836e-01  +5.5359e-01  5.52e-02  4.32e-06  2.25e-03  7.83e-04  1.45e-05  9.58e-01  
 14  +4.9808e-01  +5.4743e-01  4.94e-02  3.81e-06  1.98e-03  4.22e-04  1.27e-05  4.30e-01  
 15  +4.9802e-01  +5.4483e-01  4.68e-02  3.51e-06  1.83e-03  2.28e-04  1.17e-05  4.42e-01  
 16  +4.9788e-01  +5.4383e-01  4.60e-02  3.36e-06  1.75e-03  1.98e-04  1.12e-05  1.53e-01  
 17  +4.9662e-01  +5.3532e-01  3.87e-02  2.53e-06  1.32e-03  2.84e-05  8.55e-06  8.10e-01  
 18  +4.9603e-01  +5.3269e-01  3.67e-02  2.27e-06  1.18e-03  2.15e-05  7.71e-06  2.67e-01  
 19  +4.9585e-01  +5.3184e-01  3.60e-02  2.25e-06  1.17e-03  1.78e-05  7.63e-06  1.25e-01  
 20  +4.9190e-01  +5.1455e-01  2.26e-02  1.12e-06  5.82e-04  5.61e-06  3.90e-06  7.50e-01  
 21  +4.8988e-01  +5.0577e-01  1.59e-02  7.32e-07  3.81e-04  2.14e-06  2.60e-06  6.01e-01  
 22  +4.8862e-01  +5.0035e-01  1.17e-02  5.04e-07  2.62e-04  5.86e-07  1.79e-06  7.64e-01  
 23  +4.8643e-01  +4.9146e-01  5.02e-03  1.91e-07  9.96e-05  1.86e-07  6.82e-07  7.98e-01  
 24  +4.8641e-01  +4.9136e-01  4.95e-03  1.91e-07  9.95e-05  1.80e-07  6.82e-07  6.53e-04  
 25  +4.8619e-01  +4.9059e-01  4.41e-03  1.81e-07  9.43e-05  1.32e-07  6.67e-07  1.05e-01  
 26  +4.8597e-01  +4.9006e-01  4.10e-03  1.56e-07  8.10e-05  1.04e-07  5.58e-07  4.38e-01  
 27  +4.8564e-01  +4.8874e-01  3.11e-03  1.17e-07  6.08e-05  3.39e-08  4.21e-07  9.90e-01  
 28  +4.8502e-01  +4.8655e-01  1.53e-03  5.69e-08  2.96e-05  1.66e-08  2.07e-07  6.05e-01  
 29  +4.8477e-01  +4.8567e-01  8.97e-04  3.31e-08  1.72e-05  9.87e-09  1.21e-07  5.56e-01  
 30  +4.8444e-01  +4.8450e-01  5.37e-05  1.97e-09  1.02e-06  6.02e-10  7.26e-09  9.74e-01  
 31  +4.8442e-01  +4.8442e-01  5.59e-07  2.05e-11  1.07e-08  6.28e-12  7.56e-11  9.90e-01  
 32  +4.8442e-01  +4.8442e-01  5.61e-09  2.05e-13  1.07e-10  7.27e-14  8.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 811.3924ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:47 PM: Optimal value: 4.844e-01
(CVXPY) Aug 30 12:24:47 PM: Compilation took 1.297e-01 seconds
(CVXPY) Aug 30 12:24:47 PM: Solver (including time spent in interface) took 8.469e-01 seconds
Iteration: 5, Objective: 0.4844
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:47 PM: Your problem has 25067 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:47 PM: Finished problem compilation (took 1.442e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25067
  constraints   = 50067
  nnz(P)        = 0
  nnz(A)        = 363797
  cones (total) = 1
    : Nonnegative = 1,  numel = 50067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3468e+03  5.35e+03  4.24e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3157e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6451e+02  1.64e+02  1.47e-01  7.44e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1414e+00  6.41e-01  1.92e-03  9.94e-01  2.35e-05  1.91e-01  2.19e-01  
  6  +5.0001e-01  +7.9100e-01  2.91e-01  8.69e-04  4.51e-01  8.23e-06  8.98e-02  7.32e-01  
  7  +5.0000e-01  +6.5307e-01  1.53e-01  4.57e-04  2.37e-01  3.78e-06  4.67e-02  6.45e-01  
  8  +5.0000e-01  +6.1581e-01  1.16e-01  3.46e-04  1.80e-01  3.02e-06  3.12e-02  3.87e-01  
  9  +5.0000e-01  +6.0674e-01  1.07e-01  3.18e-04  1.65e-01  2.82e-06  2.37e-02  3.46e-01  
 10  +5.0001e-01  +6.2148e-01  1.21e-01  3.62e-04  1.88e-01  8.01e-07  1.63e-02  9.90e-01  
 11  +5.0000e-01  +5.7758e-01  7.76e-02  2.26e-04  1.17e-01  1.47e-06  3.63e-03  8.10e-01  
 12  +4.9990e-01  +5.6785e-01  6.80e-02  2.35e-05  1.22e-02  5.31e-05  7.92e-05  9.83e-01  
 13  +4.9928e-01  +5.6455e-01  6.53e-02  3.99e-06  2.08e-03  3.03e-04  1.30e-05  8.39e-01  
 14  +4.9863e-01  +5.5830e-01  5.97e-02  3.84e-06  2.00e-03  2.37e-04  1.26e-05  9.91e-02  
 15  +4.9856e-01  +5.5561e-01  5.70e-02  3.78e-06  1.97e-03  1.80e-04  1.23e-05  1.66e-01  
 16  +4.9812e-01  +5.5099e-01  5.29e-02  3.38e-06  1.76e-03  1.35e-04  1.10e-05  2.66e-01  
 17  +4.9796e-01  +5.4886e-01  5.09e-02  3.28e-06  1.71e-03  1.07e-04  1.07e-05  1.64e-01  
 18  +4.9743e-01  +5.4447e-01  4.70e-02  3.00e-06  1.57e-03  6.40e-05  9.87e-06  3.39e-01  
 19  +4.9659e-01  +5.3908e-01  4.25e-02  2.56e-06  1.34e-03  4.02e-05  8.43e-06  3.76e-01  
 20  +4.9648e-01  +5.3839e-01  4.19e-02  2.55e-06  1.33e-03  3.66e-05  8.40e-06  5.54e-02  
 21  +4.9452e-01  +5.2878e-01  3.43e-02  1.85e-06  9.63e-04  2.33e-05  6.11e-06  4.39e-01  
 22  +4.9300e-01  +5.2098e-01  2.80e-02  1.38e-06  7.17e-04  4.83e-06  4.56e-06  7.26e-01  
 23  +4.9272e-01  +5.2012e-01  2.74e-02  1.36e-06  7.10e-04  4.49e-06  4.56e-06  2.82e-02  
 24  +4.9017e-01  +5.0948e-01  1.93e-02  8.54e-07  4.45e-04  1.84e-06  2.88e-06  6.16e-01  
 25  +4.8979e-01  +5.0783e-01  1.80e-02  7.84e-07  4.08e-04  1.37e-06  2.66e-06  2.63e-01  
 26  +4.8503e-01  +4.8915e-01  4.13e-03  1.61e-07  8.38e-05  7.56e-08  5.67e-07  9.18e-01  
 27  +4.8453e-01  +4.8732e-01  2.80e-03  1.07e-07  5.59e-05  4.97e-08  3.83e-07  3.79e-01  
 28  +4.8452e-01  +4.8731e-01  2.79e-03  1.07e-07  5.57e-05  4.88e-08  3.82e-07  3.97e-02  
 29  +4.8371e-01  +4.8434e-01  6.32e-04  2.36e-08  1.23e-05  9.11e-09  8.70e-08  8.76e-01  
 30  +4.8349e-01  +4.8355e-01  6.64e-05  2.47e-09  1.28e-06  7.83e-10  9.21e-09  9.90e-01  
 31  +4.8346e-01  +4.8346e-01  6.76e-07  2.51e-11  1.31e-08  7.95e-12  9.39e-11  9.90e-01  
 32  +4.8346e-01  +4.8346e-01  6.76e-09  2.51e-13  1.31e-10  7.95e-14  9.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 851.1505ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:48 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:48 PM: Optimal value: 4.835e-01
(CVXPY) Aug 30 12:24:48 PM: Compilation took 1.442e-01 seconds
(CVXPY) Aug 30 12:24:48 PM: Solver (including time spent in interface) took 8.880e-01 seconds
Iteration: 6, Objective: 0.4835
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:49 PM: Your problem has 25077 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:49 PM: Finished problem compilation (took 1.447e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25077
  constraints   = 50077
  nnz(P)        = 0
  nnz(A)        = 373278
  cones (total) = 1
    : Nonnegative = 1,  numel = 50077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3471e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3145e+02  6.31e+02  1.70e-01  8.57e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6448e+02  1.64e+02  1.47e-01  7.45e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5935e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1703e+00  6.70e-01  2.00e-03  1.04e+00  2.35e-05  1.91e-01  2.11e-01  
  6  +5.0001e-01  +8.0657e-01  3.07e-01  9.15e-04  4.76e-01  9.32e-06  9.54e-02  6.05e-01  
  7  +5.0001e-01  +6.9777e-01  1.98e-01  5.90e-04  3.07e-01  5.33e-06  5.99e-02  5.34e-01  
  8  +5.0000e-01  +6.5265e-01  1.53e-01  4.56e-04  2.37e-01  3.71e-06  4.12e-02  4.87e-01  
  9  +5.0000e-01  +6.2927e-01  1.29e-01  3.86e-04  2.01e-01  3.20e-06  3.00e-02  3.58e-01  
 10  +5.0001e-01  +6.4374e-01  1.44e-01  4.29e-04  2.23e-01  1.41e-06  2.51e-02  7.60e-01  
 11  +5.0000e-01  +5.7068e-01  7.07e-02  2.10e-04  1.09e-01  1.61e-06  5.83e-03  8.18e-01  
 12  +4.9996e-01  +5.7006e-01  7.01e-02  8.79e-05  4.58e-02  2.25e-05  3.45e-04  9.87e-01  
 13  +4.9906e-01  +5.6655e-01  6.75e-02  5.03e-06  2.63e-03  4.47e-04  1.64e-05  9.52e-01  
 14  +4.9859e-01  +5.6077e-01  6.22e-02  4.54e-06  2.37e-03  3.63e-04  1.48e-05  1.99e-01  
 15  +4.9816e-01  +5.5639e-01  5.82e-02  4.12e-06  2.15e-03  3.06e-04  1.34e-05  1.84e-01  
 16  +4.9802e-01  +5.5224e-01  5.42e-02  3.94e-06  2.06e-03  1.84e-04  1.28e-05  3.02e-01  
 17  +4.9780e-01  +5.5023e-01  5.24e-02  3.67e-06  1.92e-03  1.60e-04  1.19e-05  1.71e-01  
 18  +4.9755e-01  +5.4666e-01  4.91e-02  3.41e-06  1.78e-03  8.85e-05  1.11e-05  3.84e-01  
 19  +4.9714e-01  +5.4288e-01  4.57e-02  3.14e-06  1.64e-03  3.67e-05  1.02e-05  5.05e-01  
 20  +4.9617e-01  +5.3824e-01  4.21e-02  2.58e-06  1.35e-03  3.33e-05  8.43e-06  2.36e-01  
 21  +4.9608e-01  +5.3788e-01  4.18e-02  2.57e-06  1.34e-03  3.19e-05  8.41e-06  2.52e-02  
 22  +4.9438e-01  +5.2998e-01  3.56e-02  1.97e-06  1.03e-03  2.21e-05  6.49e-06  3.78e-01  
 23  +4.9207e-01  +5.1908e-01  2.70e-02  1.32e-06  6.90e-04  2.48e-07  4.38e-06  8.90e-01  
 24  +4.9177e-01  +5.1792e-01  2.62e-02  1.24e-06  6.49e-04  2.41e-07  4.12e-06  1.42e-01  
 25  +4.9164e-01  +5.1749e-01  2.59e-02  1.24e-06  6.45e-04  2.35e-07  4.11e-06  5.67e-02  
 26  +4.8978e-01  +5.1020e-01  2.04e-02  8.95e-07  4.67e-04  1.87e-07  3.01e-06  3.93e-01  
 27  +4.8971e-01  +5.0996e-01  2.02e-02  8.92e-07  4.66e-04  1.84e-07  3.01e-06  7.64e-02  
 28  +4.8758e-01  +5.0169e-01  1.41e-02  5.82e-07  3.04e-04  1.28e-07  2.00e-06  4.72e-01  
 29  +4.8538e-01  +4.9303e-01  7.65e-03  2.94e-07  1.54e-04  7.68e-08  1.04e-06  8.19e-01  
 30  +4.8538e-01  +4.9303e-01  7.65e-03  2.94e-07  1.54e-04  7.71e-08  1.03e-06  1.57e-02  
 31  +4.8507e-01  +4.9179e-01  6.72e-03  2.56e-07  1.34e-04  7.03e-08  9.05e-07  3.15e-01  
 32  +4.8435e-01  +4.8911e-01  4.76e-03  1.79e-07  9.34e-05  5.19e-08  6.39e-07  5.24e-01  
 33  +4.8389e-01  +4.8741e-01  3.52e-03  1.32e-07  6.87e-05  3.90e-08  4.73e-07  3.76e-01  
 34  +4.8360e-01  +4.8628e-01  2.68e-03  9.90e-08  5.17e-05  3.23e-08  3.57e-07  9.90e-01  
 35  +4.8257e-01  +4.8270e-01  1.25e-04  4.57e-09  2.39e-06  1.45e-09  1.69e-08  9.90e-01  
 36  +4.8252e-01  +4.8252e-01  1.25e-06  4.60e-11  2.40e-08  1.46e-11  1.70e-10  9.90e-01  
 37  +4.8252e-01  +4.8252e-01  1.25e-08  4.60e-13  2.40e-10  1.46e-13  1.70e-12  9.90e-01  
 38  +4.8252e-01  +4.8252e-01  1.26e-10  4.60e-15  2.41e-12  1.67e-15  1.94e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2742432s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:50 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:50 PM: Optimal value: 4.825e-01
(CVXPY) Aug 30 12:24:50 PM: Compilation took 1.447e-01 seconds
(CVXPY) Aug 30 12:24:50 PM: Solver (including time spent in interface) took 1.317e+00 seconds
Iteration: 7, Objective: 0.4825
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:50 PM: Your problem has 25087 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:51 PM: Finished problem compilation (took 2.489e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25087
  constraints   = 50087
  nnz(P)        = 0
  nnz(A)        = 379168
  cones (total) = 1
    : Nonnegative = 1,  numel = 50087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3469e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3141e+02  6.31e+02  1.70e-01  8.57e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6446e+02  1.64e+02  1.47e-01  7.45e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1434e+00  6.43e-01  1.92e-03  1.00e+00  2.35e-05  1.91e-01  2.20e-01  
  6  +5.0001e-01  +7.5782e-01  2.58e-01  7.70e-04  4.01e-01  7.62e-06  8.15e-02  7.17e-01  
  7  +5.0000e-01  +6.7248e-01  1.72e-01  5.15e-04  2.68e-01  4.65e-06  5.14e-02  5.20e-01  
  8  +5.0001e-01  +6.5139e-01  1.51e-01  4.52e-04  2.35e-01  3.45e-06  3.80e-02  5.03e-01  
  9  +5.0001e-01  +6.4097e-01  1.41e-01  4.21e-04  2.19e-01  2.89e-06  3.02e-02  3.80e-01  
 10  +5.0001e-01  +6.0373e-01  1.04e-01  3.09e-04  1.61e-01  1.31e-06  1.24e-02  9.90e-01  
 11  +4.9999e-01  +5.5598e-01  5.60e-02  1.38e-04  7.20e-02  6.28e-06  9.04e-04  9.90e-01  
 12  +4.9945e-01  +5.5469e-01  5.52e-02  6.31e-06  3.30e-03  2.68e-04  2.05e-05  9.78e-01  
 13  +4.9877e-01  +5.5094e-01  5.22e-02  3.94e-06  2.06e-03  3.61e-04  1.27e-05  4.33e-01  
 14  +4.9860e-01  +5.5008e-01  5.15e-02  3.77e-06  1.97e-03  3.18e-04  1.21e-05  1.59e-01  
 15  +4.9844e-01  +5.4899e-01  5.05e-02  3.75e-06  1.96e-03  2.85e-04  1.21e-05  6.64e-02  
 16  +4.9746e-01  +5.4407e-01  4.66e-02  2.98e-06  1.56e-03  2.41e-04  9.60e-06  3.50e-01  
 17  +4.9725e-01  +5.4319e-01  4.59e-02  2.81e-06  1.47e-03  2.07e-04  9.04e-06  1.89e-01  
 18  +4.9677e-01  +5.4083e-01  4.41e-02  2.72e-06  1.42e-03  1.45e-04  8.77e-06  2.30e-01  
 19  +4.9533e-01  +5.3442e-01  3.91e-02  2.15e-06  1.12e-03  1.20e-04  6.93e-06  3.04e-01  
 20  +4.9525e-01  +5.3410e-01  3.88e-02  2.14e-06  1.12e-03  1.17e-04  6.93e-06  7.16e-03  
 21  +4.9356e-01  +5.2681e-01  3.33e-02  1.71e-06  8.94e-04  7.93e-05  5.56e-06  3.44e-01  
 22  +4.9340e-01  +5.2614e-01  3.27e-02  1.66e-06  8.68e-04  5.95e-05  5.40e-06  2.23e-01  
 23  +4.9248e-01  +5.2235e-01  2.99e-02  1.45e-06  7.57e-04  4.47e-05  4.72e-06  2.59e-01  
 24  +4.9186e-01  +5.1979e-01  2.79e-02  1.32e-06  6.92e-04  3.06e-05  4.34e-06  2.87e-01  
 25  +4.9061e-01  +5.1440e-01  2.38e-02  1.07e-06  5.59e-04  3.19e-07  3.54e-06  8.63e-01  
 26  +4.8881e-01  +5.0729e-01  1.85e-02  7.95e-07  4.15e-04  2.43e-07  2.66e-06  2.67e-01  
 27  +4.8692e-01  +4.9945e-01  1.25e-02  5.00e-07  2.61e-04  1.25e-07  1.70e-06  9.90e-01  
 28  +4.8533e-01  +4.9343e-01  8.09e-03  3.15e-07  1.65e-04  8.15e-08  1.09e-06  4.63e-01  
 29  +4.8534e-01  +4.9346e-01  8.12e-03  3.15e-07  1.65e-04  8.21e-08  1.09e-06  9.29e-03  
 30  +4.8532e-01  +4.9336e-01  8.04e-03  3.13e-07  1.63e-04  8.24e-08  1.08e-06  1.02e-01  
 31  +4.8494e-01  +4.9186e-01  6.92e-03  2.66e-07  1.39e-04  7.43e-08  9.25e-07  3.86e-01  
 32  +4.8493e-01  +4.9183e-01  6.90e-03  2.65e-07  1.39e-04  7.42e-08  9.22e-07  2.02e-02  
 33  +4.8494e-01  +4.9183e-01  6.89e-03  2.63e-07  1.38e-04  7.58e-08  9.14e-07  1.63e-01  
 34  +4.8344e-01  +4.8626e-01  2.82e-03  1.05e-07  5.50e-05  3.39e-08  3.75e-07  9.90e-01  
 35  +4.8242e-01  +4.8261e-01  1.87e-04  6.88e-09  3.59e-06  2.15e-09  2.53e-08  9.82e-01  
 36  +4.8234e-01  +4.8234e-01  1.96e-06  7.21e-11  3.76e-08  2.24e-11  2.67e-10  9.90e-01  
 37  +4.8234e-01  +4.8234e-01  1.96e-08  7.20e-13  3.76e-10  2.24e-13  2.67e-12  9.90e-01  
 38  +4.8234e-01  +4.8234e-01  1.98e-10  7.37e-15  3.80e-12  3.38e-15  3.95e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2504998s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:52 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:52 PM: Optimal value: 4.823e-01
(CVXPY) Aug 30 12:24:52 PM: Compilation took 2.489e-01 seconds
(CVXPY) Aug 30 12:24:52 PM: Solver (including time spent in interface) took 1.296e+00 seconds
Iteration: 8, Objective: 0.4823
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:52 PM: Your problem has 25097 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:52 PM: Finished problem compilation (took 2.425e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25097
  constraints   = 50097
  nnz(P)        = 0
  nnz(A)        = 387881
  cones (total) = 1
    : Nonnegative = 1,  numel = 50097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3469e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3491e-01  +6.3132e+02  6.31e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6443e+02  1.64e+02  1.47e-01  7.45e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5931e+01  1.54e+01  4.30e-02  2.16e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1101e+00  6.10e-01  1.82e-03  9.50e-01  2.36e-05  1.91e-01  2.33e-01  
  6  +5.0000e-01  +7.4100e-01  2.41e-01  7.20e-04  3.75e-01  7.10e-06  7.63e-02  7.83e-01  
  7  +5.0000e-01  +6.7975e-01  1.80e-01  5.37e-04  2.80e-01  5.09e-06  5.37e-02  4.01e-01  
  8  +5.0000e-01  +6.5058e-01  1.51e-01  4.49e-04  2.34e-01  3.91e-06  3.83e-02  4.63e-01  
  9  +5.0001e-01  +6.6263e-01  1.63e-01  4.85e-04  2.53e-01  3.03e-06  3.64e-02  3.79e-01  
 10  +5.0001e-01  +6.4445e-01  1.44e-01  4.31e-04  2.25e-01  2.40e-06  2.64e-02  4.62e-01  
 11  +5.0001e-01  +6.3124e-01  1.31e-01  3.91e-04  2.04e-01  4.67e-07  1.59e-02  9.90e-01  
 12  +5.0000e-01  +5.8311e-01  8.31e-02  2.35e-04  1.23e-01  1.19e-06  2.64e-03  8.54e-01  
 13  +4.9990e-01  +5.8020e-01  8.03e-02  1.72e-05  8.99e-03  5.07e-05  5.63e-05  9.80e-01  
 14  +4.9956e-01  +5.7611e-01  7.66e-02  5.17e-06  2.71e-03  1.56e-04  1.67e-05  7.24e-01  
 15  +4.9943e-01  +5.7367e-01  7.42e-02  5.13e-06  2.68e-03  1.34e-04  1.66e-05  8.18e-02  
 16  +4.9894e-01  +5.6684e-01  6.79e-02  4.98e-06  2.61e-03  9.47e-05  1.61e-05  1.65e-01  
 17  +4.9852e-01  +5.6104e-01  6.25e-02  4.72e-06  2.47e-03  6.47e-05  1.52e-05  2.34e-01  
 18  +4.9786e-01  +5.5577e-01  5.79e-02  4.04e-06  2.11e-03  5.53e-05  1.30e-05  2.44e-01  
 19  +4.9781e-01  +5.5498e-01  5.72e-02  4.01e-06  2.10e-03  5.05e-05  1.29e-05  6.35e-02  
 20  +4.9753e-01  +5.5077e-01  5.32e-02  3.74e-06  1.96e-03  2.50e-05  1.20e-05  4.29e-01  
 21  +4.9720e-01  +5.4749e-01  5.03e-02  3.30e-06  1.73e-03  1.11e-05  1.06e-05  5.44e-01  
 22  +4.9647e-01  +5.4378e-01  4.73e-02  2.91e-06  1.52e-03  6.70e-06  9.36e-06  4.16e-01  
 23  +4.9615e-01  +5.4220e-01  4.61e-02  2.83e-06  1.48e-03  5.69e-06  9.09e-06  1.29e-01  
 24  +4.9343e-01  +5.2988e-01  3.65e-02  1.87e-06  9.81e-04  4.67e-06  6.09e-06  3.72e-01  
 25  +4.9283e-01  +5.2679e-01  3.40e-02  1.72e-06  8.97e-04  2.97e-06  5.59e-06  3.29e-01  
 26  +4.9154e-01  +5.2113e-01  2.96e-02  1.43e-06  7.46e-04  2.12e-06  4.68e-06  3.01e-01  
 27  +4.9140e-01  +5.2041e-01  2.90e-02  1.40e-06  7.30e-04  1.75e-06  4.59e-06  1.63e-01  
 28  +4.8832e-01  +5.0773e-01  1.94e-02  8.58e-07  4.49e-04  1.05e-06  2.87e-06  4.27e-01  
 29  +4.8557e-01  +4.9659e-01  1.10e-02  4.55e-07  2.38e-04  5.07e-07  1.56e-06  5.31e-01  
 30  +4.8458e-01  +4.9265e-01  8.07e-03  3.22e-07  1.68e-04  3.12e-07  1.12e-06  4.29e-01  
 31  +4.8458e-01  +4.9262e-01  8.05e-03  3.21e-07  1.68e-04  3.09e-07  1.12e-06  1.15e-02  
 32  +4.8459e-01  +4.9264e-01  8.06e-03  3.21e-07  1.68e-04  3.04e-07  1.12e-06  2.66e-02  
 33  +4.8361e-01  +4.8866e-01  5.05e-03  1.92e-07  1.01e-04  7.26e-08  6.81e-07  9.34e-01  
 34  +4.8221e-01  +4.8357e-01  1.36e-03  5.06e-08  2.65e-05  1.79e-08  1.85e-07  8.39e-01  
 35  +4.8177e-01  +4.8200e-01  2.29e-04  8.45e-09  4.42e-06  2.72e-09  3.13e-08  9.90e-01  
 36  +4.8168e-01  +4.8168e-01  2.58e-06  9.49e-11  4.97e-08  3.04e-11  3.53e-10  9.89e-01  
 37  +4.8168e-01  +4.8168e-01  2.58e-08  9.50e-13  4.97e-10  3.04e-13  3.53e-12  9.90e-01  
 38  +4.8168e-01  +4.8168e-01  2.59e-10  9.46e-15  4.99e-12  3.70e-15  4.26e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3715713s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:54 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:54 PM: Optimal value: 4.817e-01
(CVXPY) Aug 30 12:24:54 PM: Compilation took 2.425e-01 seconds
(CVXPY) Aug 30 12:24:54 PM: Solver (including time spent in interface) took 1.442e+00 seconds
Iteration: 9, Objective: 0.4817
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:54 PM: Your problem has 25107 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:54 PM: Finished problem compilation (took 2.177e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25107
  constraints   = 50107
  nnz(P)        = 0
  nnz(A)        = 395222
  cones (total) = 1
    : Nonnegative = 1,  numel = 50107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3137e+02  6.31e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6443e+02  1.64e+02  1.47e-01  7.46e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0122e-01  +1.5927e+01  1.54e+01  4.30e-02  2.16e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1248e+00  6.25e-01  1.87e-03  9.73e-01  2.36e-05  1.91e-01  2.28e-01  
  6  +5.0001e-01  +7.7530e-01  2.75e-01  8.22e-04  4.29e-01  8.00e-06  8.50e-02  7.57e-01  
  7  +5.0000e-01  +6.5461e-01  1.55e-01  4.62e-04  2.41e-01  4.39e-06  4.59e-02  5.60e-01  
  8  +5.0000e-01  +6.3326e-01  1.33e-01  3.98e-04  2.08e-01  3.13e-06  2.83e-02  6.89e-01  
  9  +5.0000e-01  +5.9703e-01  9.70e-02  2.89e-04  1.51e-01  3.41e-06  1.06e-02  7.58e-01  
 10  +4.9999e-01  +5.8870e-01  8.87e-02  2.47e-04  1.29e-01  7.38e-06  2.51e-03  9.90e-01  
 11  +4.9940e-01  +5.8284e-01  8.34e-02  1.67e-05  8.75e-03  2.95e-04  5.53e-05  9.80e-01  
 12  +4.9893e-01  +5.7791e-01  7.90e-02  9.77e-06  5.12e-03  4.33e-04  3.21e-05  4.69e-01  
 13  +4.9875e-01  +5.7129e-01  7.25e-02  7.73e-06  4.05e-03  3.71e-04  2.53e-05  3.78e-01  
 14  +4.9830e-01  +5.6595e-01  6.77e-02  6.05e-06  3.17e-03  3.53e-04  1.98e-05  3.31e-01  
 15  +4.9829e-01  +5.6295e-01  6.47e-02  5.77e-06  3.02e-03  2.62e-04  1.88e-05  2.37e-01  
 16  +4.9705e-01  +5.5432e-01  5.73e-02  3.99e-06  2.09e-03  2.48e-04  1.30e-05  4.22e-01  
 17  +4.9695e-01  +5.5315e-01  5.62e-02  3.82e-06  2.00e-03  2.17e-04  1.24e-05  1.43e-01  
 18  +4.9678e-01  +5.4939e-01  5.26e-02  3.52e-06  1.84e-03  8.37e-05  1.14e-05  5.34e-01  
 19  +4.9669e-01  +5.4896e-01  5.23e-02  3.51e-06  1.84e-03  7.98e-05  1.14e-05  3.16e-02  
 20  +4.9588e-01  +5.4469e-01  4.88e-02  3.06e-06  1.60e-03  5.85e-05  9.96e-06  3.11e-01  
 21  +4.9577e-01  +5.4378e-01  4.80e-02  3.03e-06  1.59e-03  4.61e-05  9.88e-06  1.58e-01  
 22  +4.9428e-01  +5.3701e-01  4.27e-02  2.44e-06  1.28e-03  3.77e-05  7.99e-06  2.83e-01  
 23  +4.9405e-01  +5.3575e-01  4.17e-02  2.37e-06  1.24e-03  2.91e-05  7.77e-06  1.88e-01  
 24  +4.9365e-01  +5.3356e-01  3.99e-02  2.22e-06  1.16e-03  1.60e-05  7.32e-06  3.84e-01  
 25  +4.9196e-01  +5.2638e-01  3.44e-02  1.78e-06  9.34e-04  1.33e-05  5.92e-06  2.29e-01  
 26  +4.9081e-01  +5.2151e-01  3.07e-02  1.53e-06  8.00e-04  1.06e-05  5.11e-06  2.13e-01  
 27  +4.8927e-01  +5.1435e-01  2.51e-02  1.16e-06  6.05e-04  6.59e-07  3.90e-06  8.52e-01  
 28  +4.8694e-01  +5.0497e-01  1.80e-02  7.85e-07  4.11e-04  3.66e-07  2.69e-06  5.07e-01  
 29  +4.8397e-01  +4.9291e-01  8.95e-03  3.59e-07  1.88e-04  8.43e-08  1.26e-06  9.90e-01  
 30  +4.8384e-01  +4.9242e-01  8.58e-03  3.42e-07  1.79e-04  8.19e-08  1.20e-06  8.70e-02  
 31  +4.8374e-01  +4.9204e-01  8.30e-03  3.33e-07  1.74e-04  8.05e-08  1.18e-06  2.15e-01  
 32  +4.8330e-01  +4.9026e-01  6.97e-03  2.75e-07  1.44e-04  7.46e-08  9.79e-07  6.34e-01  
 33  +4.8207e-01  +4.8566e-01  3.59e-03  1.39e-07  7.27e-05  3.93e-08  5.02e-07  5.84e-01  
 34  +4.8134e-01  +4.8299e-01  1.65e-03  6.31e-08  3.31e-05  1.77e-08  2.33e-07  6.73e-01  
 35  +4.8092e-01  +4.8148e-01  5.65e-04  2.13e-08  1.11e-05  6.12e-09  7.96e-08  6.98e-01  
 36  +4.8070e-01  +4.8071e-01  1.07e-05  3.99e-10  2.09e-07  1.14e-10  1.51e-09  9.82e-01  
 37  +4.8070e-01  +4.8070e-01  1.07e-07  3.99e-12  2.09e-09  1.14e-12  1.51e-11  9.90e-01  
 38  +4.8070e-01  +4.8070e-01  1.07e-09  4.02e-14  2.10e-11  1.46e-14  1.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1798255s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:55 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:55 PM: Optimal value: 4.807e-01
(CVXPY) Aug 30 12:24:55 PM: Compilation took 2.177e-01 seconds
(CVXPY) Aug 30 12:24:55 PM: Solver (including time spent in interface) took 1.226e+00 seconds
Iteration: 10, Objective: 0.4807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:56 PM: Your problem has 25117 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:56 PM: Finished problem compilation (took 2.243e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25117
  constraints   = 50117
  nnz(P)        = 0
  nnz(A)        = 401154
  cones (total) = 1
    : Nonnegative = 1,  numel = 50117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3468e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3491e-01  +6.3133e+02  6.31e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6442e+02  1.64e+02  1.47e-01  7.46e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5928e+01  1.54e+01  4.30e-02  2.16e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1186e+00  6.19e-01  1.85e-03  9.64e-01  2.36e-05  1.91e-01  2.31e-01  
  6  +5.0000e-01  +7.6901e-01  2.69e-01  8.04e-04  4.19e-01  8.24e-06  8.44e-02  7.27e-01  
  7  +5.0000e-01  +6.4224e-01  1.42e-01  4.25e-04  2.22e-01  3.82e-06  4.06e-02  7.12e-01  
  8  +5.0000e-01  +6.2526e-01  1.25e-01  3.74e-04  1.95e-01  2.98e-06  2.22e-02  7.68e-01  
  9  +5.0000e-01  +6.1154e-01  1.12e-01  3.32e-04  1.73e-01  3.77e-06  1.11e-02  5.83e-01  
 10  +4.9997e-01  +5.9025e-01  9.03e-02  2.23e-04  1.17e-01  1.66e-05  1.49e-03  9.22e-01  
 11  +4.9928e-01  +5.8552e-01  8.62e-02  1.91e-05  1.00e-02  3.55e-04  6.39e-05  9.60e-01  
 12  +4.9889e-01  +5.7150e-01  7.26e-02  9.29e-06  4.87e-03  4.12e-04  3.06e-05  7.42e-01  
 13  +4.9898e-01  +5.6786e-01  6.89e-02  8.24e-06  4.32e-03  2.93e-04  2.70e-05  3.85e-01  
 14  +4.9869e-01  +5.6356e-01  6.49e-02  6.25e-06  3.28e-03  2.43e-04  2.04e-05  4.97e-01  
 15  +4.9791e-01  +5.5835e-01  6.04e-02  4.59e-06  2.41e-03  2.26e-04  1.50e-05  4.35e-01  
 16  +4.9783e-01  +5.5751e-01  5.97e-02  4.53e-06  2.38e-03  1.92e-04  1.48e-05  1.31e-01  
 17  +4.9721e-01  +5.5435e-01  5.71e-02  3.96e-06  2.07e-03  1.82e-04  1.30e-05  1.89e-01  
 18  +4.9714e-01  +5.5392e-01  5.68e-02  3.95e-06  2.07e-03  1.73e-04  1.29e-05  3.68e-02  
 19  +4.9571e-01  +5.4680e-01  5.11e-02  3.15e-06  1.65e-03  1.38e-04  1.04e-05  3.31e-01  
 20  +4.9459e-01  +5.4086e-01  4.63e-02  2.74e-06  1.43e-03  6.51e-05  9.06e-06  4.71e-01  
 21  +4.9450e-01  +5.4046e-01  4.60e-02  2.72e-06  1.42e-03  6.06e-05  9.00e-06  5.57e-02  
 22  +4.9138e-01  +5.2666e-01  3.53e-02  1.82e-06  9.55e-04  3.00e-05  6.13e-06  5.40e-01  
 23  +4.9101e-01  +5.2500e-01  3.40e-02  1.73e-06  9.06e-04  2.25e-05  5.84e-06  2.23e-01  
 24  +4.8981e-01  +5.1999e-01  3.02e-02  1.48e-06  7.74e-04  1.79e-05  5.03e-06  2.16e-01  
 25  +4.8801e-01  +5.1236e-01  2.43e-02  1.11e-06  5.83e-04  6.61e-06  3.83e-06  6.01e-01  
 26  +4.8794e-01  +5.1202e-01  2.41e-02  1.10e-06  5.74e-04  5.47e-06  3.78e-06  1.59e-01  
 27  +4.8629e-01  +5.0526e-01  1.90e-02  8.33e-07  4.36e-04  3.57e-06  2.90e-06  3.49e-01  
 28  +4.8617e-01  +5.0475e-01  1.86e-02  8.08e-07  4.23e-04  3.03e-06  2.82e-06  1.62e-01  
 29  +4.8401e-01  +4.9608e-01  1.21e-02  5.02e-07  2.63e-04  1.52e-06  1.78e-06  5.09e-01  
 30  +4.8301e-01  +4.9217e-01  9.15e-03  3.72e-07  1.95e-04  1.11e-06  1.33e-06  2.78e-01  
 31  +4.8295e-01  +4.9191e-01  8.96e-03  3.68e-07  1.93e-04  1.00e-06  1.33e-06  7.10e-02  
 32  +4.8239e-01  +4.8942e-01  7.03e-03  2.79e-07  1.46e-04  1.38e-07  1.00e-06  9.55e-01  
 33  +4.8158e-01  +4.8642e-01  4.84e-03  1.89e-07  9.88e-05  9.22e-08  6.87e-07  3.68e-01  
 34  +4.8029e-01  +4.8161e-01  1.32e-03  5.05e-08  2.64e-05  2.16e-08  1.89e-07  8.27e-01  
 35  +4.8028e-01  +4.8156e-01  1.28e-03  4.96e-08  2.60e-05  2.01e-08  1.87e-07  5.39e-02  
 36  +4.8027e-01  +4.8154e-01  1.26e-03  4.88e-08  2.56e-05  1.96e-08  1.84e-07  5.64e-02  
 37  +4.8022e-01  +4.8137e-01  1.15e-03  4.37e-08  2.29e-05  1.73e-08  1.63e-07  2.81e-01  
 38  +4.7987e-01  +4.8009e-01  2.21e-04  8.37e-09  4.38e-06  2.51e-09  3.17e-08  9.90e-01  
 39  +4.7978e-01  +4.7978e-01  2.50e-06  9.42e-11  4.93e-08  2.78e-11  3.58e-10  9.89e-01  
 40  +4.7978e-01  +4.7978e-01  2.50e-08  9.42e-13  4.93e-10  2.78e-13  3.58e-12  9.90e-01  
 41  +4.7978e-01  +4.7978e-01  2.52e-10  9.49e-15  4.97e-12  3.90e-15  4.93e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6908118s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:58 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:58 PM: Optimal value: 4.798e-01
(CVXPY) Aug 30 12:24:58 PM: Compilation took 2.243e-01 seconds
(CVXPY) Aug 30 12:24:58 PM: Solver (including time spent in interface) took 1.742e+00 seconds
Iteration: 11, Objective: 0.4798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:24:58 PM: Your problem has 25127 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:24:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:24:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:24:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:24:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:24:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:24:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:24:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:24:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:24:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:24:58 PM: Finished problem compilation (took 2.332e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25127
  constraints   = 50127
  nnz(P)        = 0
  nnz(A)        = 405034
  cones (total) = 1
    : Nonnegative = 1,  numel = 50127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3474e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3114e+02  6.31e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6438e+02  1.64e+02  1.47e-01  7.46e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5941e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0002e-01  +1.3279e+00  8.28e-01  2.48e-03  1.29e+00  2.34e-05  1.92e-01  1.72e-01  
  6  +5.0001e-01  +7.3086e-01  2.31e-01  6.90e-04  3.60e-01  5.40e-06  7.07e-02  6.82e-01  
  7  +5.0000e-01  +6.5158e-01  1.52e-01  4.53e-04  2.36e-01  3.71e-06  4.38e-02  4.40e-01  
  8  +5.0000e-01  +6.3254e-01  1.33e-01  3.96e-04  2.07e-01  3.12e-06  2.82e-02  5.69e-01  
  9  +5.0000e-01  +6.0970e-01  1.10e-01  3.27e-04  1.71e-01  3.74e-06  1.43e-02  5.30e-01  
 10  +5.0000e-01  +6.0472e-01  1.05e-01  3.05e-04  1.59e-01  4.64e-06  4.82e-03  9.90e-01  
 11  +4.9971e-01  +5.9121e-01  9.15e-02  3.53e-05  1.85e-02  1.45e-04  1.20e-04  9.77e-01  
 12  +4.9859e-01  +5.8455e-01  8.60e-02  8.02e-06  4.20e-03  5.97e-04  2.64e-05  7.86e-01  
 13  +4.9884e-01  +5.8049e-01  8.17e-02  7.80e-06  4.09e-03  4.44e-04  2.55e-05  2.05e-01  
 14  +4.9861e-01  +5.7289e-01  7.43e-02  6.51e-06  3.41e-03  3.29e-04  2.13e-05  3.75e-01  
 15  +4.9827e-01  +5.6509e-01  6.68e-02  5.47e-06  2.87e-03  1.91e-04  1.78e-05  4.75e-01  
 16  +4.9795e-01  +5.6156e-01  6.36e-02  4.95e-06  2.60e-03  1.44e-04  1.61e-05  2.89e-01  
 17  +4.9690e-01  +5.5527e-01  5.84e-02  3.90e-06  2.05e-03  1.23e-04  1.27e-05  3.49e-01  
 18  +4.9649e-01  +5.5275e-01  5.63e-02  3.64e-06  1.91e-03  9.85e-05  1.19e-05  2.11e-01  
 19  +4.9573e-01  +5.4867e-01  5.29e-02  3.33e-06  1.75e-03  7.18e-05  1.09e-05  2.56e-01  
 20  +4.9550e-01  +5.4734e-01  5.18e-02  3.24e-06  1.70e-03  6.02e-05  1.06e-05  1.41e-01  
 21  +4.9437e-01  +5.4046e-01  4.61e-02  2.80e-06  1.47e-03  6.14e-07  9.29e-06  8.16e-01  
 22  +4.9062e-01  +5.2409e-01  3.35e-02  1.71e-06  8.93e-04  4.62e-07  5.77e-06  4.20e-01  
 23  +4.8803e-01  +5.1274e-01  2.47e-02  1.15e-06  6.03e-04  2.36e-07  3.95e-06  7.27e-01  
 24  +4.8745e-01  +5.1035e-01  2.29e-02  1.05e-06  5.49e-04  2.18e-07  3.61e-06  1.46e-01  
 25  +4.8726e-01  +5.0941e-01  2.22e-02  9.94e-07  5.21e-04  2.09e-07  3.43e-06  3.81e-01  
 26  +4.8425e-01  +4.9718e-01  1.29e-02  5.48e-07  2.87e-04  1.19e-07  1.93e-06  5.18e-01  
 27  +4.8269e-01  +4.9088e-01  8.19e-03  3.33e-07  1.74e-04  7.92e-08  1.19e-06  5.74e-01  
 28  +4.8262e-01  +4.9059e-01  7.98e-03  3.28e-07  1.72e-04  7.55e-08  1.19e-06  3.90e-02  
 29  +4.8258e-01  +4.9042e-01  7.84e-03  3.21e-07  1.68e-04  7.51e-08  1.16e-06  8.91e-02  
 30  +4.8139e-01  +4.8572e-01  4.32e-03  1.73e-07  9.05e-05  4.41e-08  6.34e-07  6.90e-01  
 31  +4.8122e-01  +4.8514e-01  3.92e-03  1.54e-07  8.07e-05  4.11e-08  5.62e-07  2.16e-01  
 32  +4.8064e-01  +4.8296e-01  2.31e-03  8.95e-08  4.69e-05  2.47e-08  3.31e-07  5.23e-01  
 33  +4.8056e-01  +4.8265e-01  2.09e-03  8.03e-08  4.21e-05  2.25e-08  2.97e-07  1.74e-01  
 34  +4.8018e-01  +4.8119e-01  1.01e-03  3.87e-08  2.03e-05  1.15e-08  1.45e-07  9.90e-01  
 35  +4.7983e-01  +4.7994e-01  1.18e-04  4.45e-09  2.33e-06  1.31e-09  1.69e-08  9.90e-01  
 36  +4.7978e-01  +4.7978e-01  1.22e-06  4.59e-11  2.40e-08  1.34e-11  1.75e-10  9.90e-01  
 37  +4.7978e-01  +4.7978e-01  1.22e-08  4.59e-13  2.40e-10  1.34e-13  1.75e-12  9.90e-01  
 38  +4.7978e-01  +4.7978e-01  1.23e-10  4.62e-15  2.42e-12  1.94e-15  2.48e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3369005s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:24:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:24:59 PM: Optimal value: 4.798e-01
(CVXPY) Aug 30 12:24:59 PM: Compilation took 2.332e-01 seconds
(CVXPY) Aug 30 12:24:59 PM: Solver (including time spent in interface) took 1.388e+00 seconds
Iteration: 12, Objective: 0.4798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:00 PM: Your problem has 25137 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:00 PM: Finished problem compilation (took 2.342e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25137
  constraints   = 50137
  nnz(P)        = 0
  nnz(A)        = 410179
  cones (total) = 1
    : Nonnegative = 1,  numel = 50137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3474e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3488e-01  +6.3108e+02  6.31e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6437e+02  1.64e+02  1.47e-01  7.46e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5941e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0002e-01  +1.3364e+00  8.36e-01  2.50e-03  1.30e+00  2.34e-05  1.92e-01  1.70e-01  
  6  +5.0001e-01  +7.2510e-01  2.25e-01  6.72e-04  3.51e-01  5.23e-06  6.92e-02  6.77e-01  
  7  +5.0000e-01  +6.4465e-01  1.45e-01  4.32e-04  2.26e-01  3.53e-06  4.13e-02  4.73e-01  
  8  +5.0000e-01  +6.2131e-01  1.21e-01  3.62e-04  1.89e-01  3.29e-06  2.59e-02  4.80e-01  
  9  +5.0000e-01  +6.0891e-01  1.09e-01  3.24e-04  1.69e-01  4.22e-06  1.15e-02  6.97e-01  
 10  +4.9998e-01  +5.9393e-01  9.39e-02  2.50e-04  1.31e-01  1.27e-05  2.03e-03  9.90e-01  
 11  +4.9947e-01  +5.9103e-01  9.16e-02  2.70e-05  1.41e-02  2.63e-04  9.13e-05  9.55e-01  
 12  +4.9928e-01  +5.7124e-01  7.20e-02  1.21e-05  6.35e-03  2.60e-04  4.01e-05  8.60e-01  
 13  +4.9902e-01  +5.6950e-01  7.05e-02  9.27e-06  4.86e-03  3.10e-04  3.06e-05  2.79e-01  
 14  +4.9919e-01  +5.6596e-01  6.68e-02  7.94e-06  4.16e-03  1.41e-04  2.60e-05  6.56e-01  
 15  +4.9905e-01  +5.6374e-01  6.47e-02  6.77e-06  3.55e-03  9.12e-05  2.20e-05  5.23e-01  
 16  +4.9836e-01  +5.5990e-01  6.15e-02  4.92e-06  2.58e-03  1.01e-04  1.60e-05  3.60e-01  
 17  +4.9829e-01  +5.5952e-01  6.12e-02  4.88e-06  2.56e-03  9.37e-05  1.59e-05  6.88e-02  
 18  +4.9718e-01  +5.5398e-01  5.68e-02  3.78e-06  1.98e-03  9.11e-05  1.23e-05  3.07e-01  
 19  +4.9660e-01  +5.5135e-01  5.47e-02  3.43e-06  1.80e-03  8.18e-05  1.12e-05  1.73e-01  
 20  +4.9657e-01  +5.5121e-01  5.46e-02  3.43e-06  1.80e-03  8.10e-05  1.12e-05  5.31e-03  
 21  +4.9652e-01  +5.5098e-01  5.45e-02  3.43e-06  1.80e-03  7.84e-05  1.12e-05  2.22e-02  
 22  +4.9544e-01  +5.4621e-01  5.08e-02  3.04e-06  1.59e-03  6.25e-05  1.00e-05  2.29e-01  
 23  +4.9398e-01  +5.3974e-01  4.58e-02  2.57e-06  1.35e-03  5.03e-05  8.54e-06  2.35e-01  
 24  +4.9299e-01  +5.3521e-01  4.22e-02  2.35e-06  1.23e-03  1.64e-05  7.88e-06  5.43e-01  
 25  +4.9147e-01  +5.2873e-01  3.73e-02  1.96e-06  1.03e-03  1.26e-05  6.64e-06  2.52e-01  
 26  +4.8993e-01  +5.2198e-01  3.21e-02  1.59e-06  8.32e-04  4.47e-06  5.43e-06  5.91e-01  
 27  +4.8944e-01  +5.1989e-01  3.04e-02  1.48e-06  7.76e-04  3.25e-06  5.08e-06  2.61e-01  
 28  +4.8788e-01  +5.1347e-01  2.56e-02  1.19e-06  6.26e-04  2.45e-06  4.14e-06  2.57e-01  
 29  +4.8759e-01  +5.1199e-01  2.44e-02  1.10e-06  5.77e-04  9.34e-07  3.83e-06  6.28e-01  
 30  +4.8611e-01  +5.0595e-01  1.98e-02  8.70e-07  4.56e-04  6.27e-07  3.06e-06  3.59e-01  
 31  +4.8454e-01  +4.9952e-01  1.50e-02  6.29e-07  3.30e-04  2.60e-07  2.23e-06  7.25e-01  
 32  +4.8390e-01  +4.9700e-01  1.31e-02  5.44e-07  2.85e-04  2.22e-07  1.94e-06  1.78e-01  
 33  +4.8373e-01  +4.9626e-01  1.25e-02  5.16e-07  2.70e-04  1.79e-07  1.85e-06  4.47e-01  
 34  +4.8236e-01  +4.9087e-01  8.52e-03  3.46e-07  1.81e-04  1.19e-07  1.26e-06  3.56e-01  
 35  +4.8199e-01  +4.8940e-01  7.42e-03  3.00e-07  1.57e-04  1.00e-07  1.10e-06  2.64e-01  
 36  +4.8157e-01  +4.8765e-01  6.08e-03  2.41e-07  1.26e-04  6.91e-08  8.83e-07  9.55e-01  
 37  +4.8142e-01  +4.8707e-01  5.65e-03  2.23e-07  1.17e-04  6.42e-08  8.21e-07  1.36e-01  
 38  +4.8067e-01  +4.8422e-01  3.54e-03  1.40e-07  7.31e-05  3.99e-08  5.21e-07  9.90e-01  
 39  +4.7959e-01  +4.8021e-01  6.14e-04  2.39e-08  1.25e-05  6.69e-09  9.19e-08  9.90e-01  
 40  +4.7938e-01  +4.7943e-01  5.36e-05  2.07e-09  1.08e-06  5.82e-10  8.04e-09  9.29e-01  
 41  +4.7936e-01  +4.7936e-01  5.43e-07  2.09e-11  1.10e-08  5.89e-12  8.15e-11  9.90e-01  
 42  +4.7936e-01  +4.7936e-01  5.43e-09  2.09e-13  1.10e-10  5.89e-14  8.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4369759s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:01 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:01 PM: Optimal value: 4.794e-01
(CVXPY) Aug 30 12:25:01 PM: Compilation took 2.342e-01 seconds
(CVXPY) Aug 30 12:25:01 PM: Solver (including time spent in interface) took 1.483e+00 seconds
Iteration: 13, Objective: 0.4794
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:02 PM: Your problem has 25145 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:02 PM: Finished problem compilation (took 2.814e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25145
  constraints   = 50145
  nnz(P)        = 0
  nnz(A)        = 414005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3476e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3488e-01  +6.3102e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6435e+02  1.64e+02  1.47e-01  7.46e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5944e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0002e-01  +1.3348e+00  8.35e-01  2.50e-03  1.30e+00  2.34e-05  1.92e-01  1.70e-01  
  6  +5.0001e-01  +7.3579e-01  2.36e-01  7.04e-04  3.68e-01  5.54e-06  7.19e-02  6.68e-01  
  7  +5.0000e-01  +6.3797e-01  1.38e-01  4.12e-04  2.15e-01  3.39e-06  3.90e-02  5.47e-01  
  8  +5.0000e-01  +6.2111e-01  1.21e-01  3.62e-04  1.89e-01  3.24e-06  2.39e-02  5.38e-01  
  9  +5.0000e-01  +6.1503e-01  1.15e-01  3.43e-04  1.79e-01  3.92e-06  1.21e-02  6.56e-01  
 10  +4.9996e-01  +5.8435e-01  8.44e-02  1.94e-04  1.01e-01  2.11e-05  1.13e-03  9.90e-01  
 11  +4.9934e-01  +5.8142e-01  8.21e-02  2.08e-05  1.09e-02  3.21e-04  7.01e-05  9.39e-01  
 12  +4.9950e-01  +5.6701e-01  6.75e-02  1.21e-05  6.33e-03  1.45e-04  3.99e-05  9.61e-01  
 13  +4.9937e-01  +5.6612e-01  6.68e-02  9.69e-06  5.08e-03  1.58e-04  3.19e-05  3.01e-01  
 14  +4.9935e-01  +5.6446e-01  6.51e-02  7.71e-06  4.04e-03  6.56e-05  2.51e-05  8.18e-01  
 15  +4.9886e-01  +5.6138e-01  6.25e-02  5.30e-06  2.78e-03  2.91e-05  1.72e-05  9.20e-01  
 16  +4.9869e-01  +5.6058e-01  6.19e-02  5.09e-06  2.67e-03  2.58e-05  1.65e-05  1.48e-01  
 17  +4.9822e-01  +5.5818e-01  6.00e-02  4.48e-06  2.35e-03  2.51e-05  1.46e-05  1.85e-01  
 18  +4.9763e-01  +5.5540e-01  5.78e-02  4.17e-06  2.19e-03  1.39e-05  1.36e-05  4.33e-01  
 19  +4.9698e-01  +5.5249e-01  5.55e-02  3.68e-06  1.93e-03  1.26e-05  1.20e-05  2.06e-01  
 20  +4.9695e-01  +5.5238e-01  5.54e-02  3.68e-06  1.93e-03  1.25e-05  1.20e-05  7.44e-03  
 21  +4.9690e-01  +5.5217e-01  5.53e-02  3.68e-06  1.93e-03  1.20e-05  1.20e-05  2.82e-02  
 22  +4.9558e-01  +5.4647e-01  5.09e-02  3.10e-06  1.63e-03  9.64e-06  1.02e-05  2.83e-01  
 23  +4.9389e-01  +5.3903e-01  4.51e-02  2.55e-06  1.34e-03  7.55e-06  8.45e-06  2.73e-01  
 24  +4.9288e-01  +5.3464e-01  4.18e-02  2.32e-06  1.22e-03  2.99e-06  7.78e-06  5.06e-01  
 25  +4.9137e-01  +5.2826e-01  3.69e-02  1.94e-06  1.02e-03  2.41e-06  6.56e-06  2.28e-01  
 26  +4.8911e-01  +5.1855e-01  2.94e-02  1.42e-06  7.44e-04  5.40e-07  4.87e-06  7.61e-01  
 27  +4.8899e-01  +5.1803e-01  2.90e-02  1.39e-06  7.31e-04  4.95e-07  4.79e-06  1.25e-01  
 28  +4.8781e-01  +5.1318e-01  2.54e-02  1.18e-06  6.19e-04  4.15e-07  4.09e-06  1.96e-01  
 29  +4.8728e-01  +5.1060e-01  2.33e-02  1.03e-06  5.41e-04  2.12e-07  3.59e-06  9.03e-01  
 30  +4.8580e-01  +5.0462e-01  1.88e-02  8.12e-07  4.26e-04  1.73e-07  2.86e-06  4.28e-01  
 31  +4.8440e-01  +4.9898e-01  1.46e-02  6.10e-07  3.20e-04  1.41e-07  2.17e-06  5.97e-01  
 32  +4.8397e-01  +4.9728e-01  1.33e-02  5.52e-07  2.89e-04  1.29e-07  1.97e-06  1.60e-01  
 33  +4.8334e-01  +4.9460e-01  1.13e-02  4.56e-07  2.39e-04  1.22e-07  1.63e-06  9.90e-01  
 34  +4.8181e-01  +4.8870e-01  6.89e-03  2.75e-07  1.44e-04  7.43e-08  1.01e-06  4.61e-01  
 35  +4.8062e-01  +4.8403e-01  3.40e-03  1.34e-07  7.05e-05  3.82e-08  5.02e-07  9.90e-01  
 36  +4.8060e-01  +4.8393e-01  3.34e-03  1.31e-07  6.89e-05  3.76e-08  4.90e-07  4.69e-02  
 37  +4.8055e-01  +4.8375e-01  3.20e-03  1.26e-07  6.62e-05  3.56e-08  4.73e-07  3.51e-01  
 38  +4.8032e-01  +4.8287e-01  2.55e-03  1.01e-07  5.28e-05  2.84e-08  3.79e-07  3.51e-01  
 39  +4.8031e-01  +4.8285e-01  2.54e-03  9.96e-08  5.22e-05  2.84e-08  3.74e-07  1.46e-01  
 40  +4.7948e-01  +4.7980e-01  3.20e-04  1.24e-08  6.50e-06  3.53e-09  4.79e-08  9.17e-01  
 41  +4.7936e-01  +4.7937e-01  7.50e-06  2.89e-10  1.52e-07  8.15e-11  1.13e-09  9.79e-01  
 42  +4.7936e-01  +4.7936e-01  7.51e-08  2.90e-12  1.52e-09  8.15e-13  1.13e-11  9.90e-01  
 43  +4.7936e-01  +4.7936e-01  7.58e-10  2.92e-14  1.53e-11  1.21e-14  1.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5744092s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:04 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:04 PM: Optimal value: 4.794e-01
(CVXPY) Aug 30 12:25:04 PM: Compilation took 2.814e-01 seconds
(CVXPY) Aug 30 12:25:04 PM: Solver (including time spent in interface) took 1.625e+00 seconds
Iteration: 14, Objective: 0.4794
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:04 PM: Your problem has 25155 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:04 PM: Finished problem compilation (took 3.185e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25155
  constraints   = 50155
  nnz(P)        = 0
  nnz(A)        = 417217
  cones (total) = 1
    : Nonnegative = 1,  numel = 50155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8411e-01  +5.3476e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3487e-01  +6.3096e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.46e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5946e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0002e-01  +1.3077e+00  8.08e-01  2.42e-03  1.26e+00  2.34e-05  1.92e-01  1.76e-01  
  6  +5.0001e-01  +7.1396e-01  2.14e-01  6.39e-04  3.34e-01  5.09e-06  6.64e-02  7.00e-01  
  7  +5.0000e-01  +6.4120e-01  1.41e-01  4.22e-04  2.20e-01  3.49e-06  3.94e-02  5.01e-01  
  8  +5.0000e-01  +6.2443e-01  1.24e-01  3.72e-04  1.94e-01  3.43e-06  2.68e-02  3.99e-01  
  9  +5.0000e-01  +6.3025e-01  1.30e-01  3.88e-04  2.03e-01  3.26e-06  1.66e-02  6.79e-01  
 10  +5.0000e-01  +6.0372e-01  1.04e-01  3.00e-04  1.57e-01  4.80e-06  4.14e-03  9.90e-01  
 11  +4.9970e-01  +5.9246e-01  9.28e-02  3.17e-05  1.67e-02  1.50e-04  1.07e-04  9.79e-01  
 12  +4.9908e-01  +5.8682e-01  8.77e-02  1.13e-05  5.93e-03  3.85e-04  3.73e-05  6.74e-01  
 13  +4.9935e-01  +5.7881e-01  7.95e-02  1.04e-05  5.45e-03  2.08e-04  3.41e-05  4.21e-01  
 14  +4.9916e-01  +5.7434e-01  7.52e-02  7.97e-06  4.18e-03  1.97e-04  2.61e-05  4.09e-01  
 15  +4.9900e-01  +5.6541e-01  6.64e-02  6.46e-06  3.39e-03  5.55e-05  2.11e-05  7.76e-01  
 16  +4.9799e-01  +5.5925e-01  6.13e-02  4.44e-06  2.33e-03  4.52e-05  1.45e-05  5.92e-01  
 17  +4.9753e-01  +5.5707e-01  5.95e-02  4.15e-06  2.18e-03  3.21e-05  1.36e-05  3.04e-01  
 18  +4.9671e-01  +5.5330e-01  5.66e-02  3.67e-06  1.92e-03  2.33e-05  1.21e-05  3.28e-01  
 19  +4.9648e-01  +5.5227e-01  5.58e-02  3.65e-06  1.91e-03  2.11e-05  1.20e-05  6.32e-02  
 20  +4.9349e-01  +5.3883e-01  4.53e-02  2.48e-06  1.30e-03  1.69e-05  8.30e-06  3.84e-01  
 21  +4.9258e-01  +5.3480e-01  4.22e-02  2.25e-06  1.18e-03  1.42e-05  7.60e-06  1.53e-01  
 22  +4.9125e-01  +5.2868e-01  3.74e-02  1.96e-06  1.03e-03  6.09e-06  6.67e-06  4.84e-01  
 23  +4.8896e-01  +5.1881e-01  2.99e-02  1.46e-06  7.67e-04  2.61e-06  5.06e-06  5.40e-01  
 24  +4.8748e-01  +5.1257e-01  2.51e-02  1.17e-06  6.12e-04  1.38e-06  4.07e-06  4.85e-01  
 25  +4.8708e-01  +5.1092e-01  2.38e-02  1.09e-06  5.70e-04  9.42e-07  3.81e-06  3.44e-01  
 26  +4.8587e-01  +5.0589e-01  2.00e-02  8.90e-07  4.67e-04  7.20e-07  3.15e-06  2.58e-01  
 27  +4.8504e-01  +5.0216e-01  1.71e-02  7.23e-07  3.79e-04  1.81e-07  2.56e-06  9.48e-01  
 28  +4.8361e-01  +4.9648e-01  1.29e-02  5.27e-07  2.76e-04  1.37e-07  1.88e-06  5.74e-01  
 29  +4.8331e-01  +4.9528e-01  1.20e-02  4.86e-07  2.55e-04  1.28e-07  1.74e-06  1.56e-01  
 30  +4.8319e-01  +4.9477e-01  1.16e-02  4.68e-07  2.46e-04  1.24e-07  1.68e-06  2.58e-01  
 31  +4.8193e-01  +4.8980e-01  7.87e-03  3.13e-07  1.64e-04  8.62e-08  1.14e-06  7.81e-01  
 32  +4.8191e-01  +4.8971e-01  7.80e-03  3.10e-07  1.62e-04  8.56e-08  1.13e-06  7.35e-02  
 33  +4.8136e-01  +4.8753e-01  6.17e-03  2.44e-07  1.28e-04  6.81e-08  8.99e-07  5.64e-01  
 34  +4.8131e-01  +4.8734e-01  6.03e-03  2.39e-07  1.25e-04  6.66e-08  8.78e-07  5.72e-02  
 35  +4.8131e-01  +4.8732e-01  6.02e-03  2.38e-07  1.25e-04  6.65e-08  8.77e-07  2.69e-02  
 36  +4.8054e-01  +4.8437e-01  3.84e-03  1.51e-07  7.92e-05  4.24e-08  5.63e-07  4.49e-01  
 37  +4.8053e-01  +4.8436e-01  3.83e-03  1.50e-07  7.88e-05  4.24e-08  5.60e-07  6.26e-02  
 38  +4.7982e-01  +4.8166e-01  1.84e-03  7.12e-08  3.73e-05  2.05e-08  2.69e-07  6.08e-01  
 39  +4.7974e-01  +4.8130e-01  1.57e-03  6.13e-08  3.21e-05  1.70e-08  2.33e-07  8.01e-01  
 40  +4.7940e-01  +4.8007e-01  6.69e-04  2.59e-08  1.36e-05  7.42e-09  9.91e-08  6.75e-01  
 41  +4.7917e-01  +4.7924e-01  6.90e-05  2.66e-09  1.39e-06  7.15e-10  1.03e-08  9.88e-01  
 42  +4.7914e-01  +4.7914e-01  9.27e-07  3.56e-11  1.87e-08  9.59e-12  1.38e-10  9.87e-01  
 43  +4.7914e-01  +4.7914e-01  9.27e-09  3.56e-13  1.87e-10  9.59e-14  1.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5722646s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:06 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:06 PM: Optimal value: 4.791e-01
(CVXPY) Aug 30 12:25:06 PM: Compilation took 3.185e-01 seconds
(CVXPY) Aug 30 12:25:06 PM: Solver (including time spent in interface) took 1.630e+00 seconds
Iteration: 15, Objective: 0.4791
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:06 PM: Your problem has 25165 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:06 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:06 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:06 PM: Finished problem compilation (took 2.489e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25165
  constraints   = 50165
  nnz(P)        = 0
  nnz(A)        = 420972
  cones (total) = 1
    : Nonnegative = 1,  numel = 50165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3477e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3486e-01  +6.3090e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6433e+02  1.64e+02  1.47e-01  7.46e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5948e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0002e-01  +1.3224e+00  8.22e-01  2.46e-03  1.28e+00  2.34e-05  1.92e-01  1.74e-01  
  6  +5.0001e-01  +7.1604e-01  2.16e-01  6.45e-04  3.37e-01  5.05e-06  6.66e-02  7.01e-01  
  7  +5.0000e-01  +6.4746e-01  1.47e-01  4.41e-04  2.30e-01  3.60e-06  4.06e-02  4.84e-01  
  8  +5.0000e-01  +6.3201e-01  1.32e-01  3.94e-04  2.06e-01  3.57e-06  2.90e-02  3.49e-01  
  9  +5.0000e-01  +6.3045e-01  1.30e-01  3.89e-04  2.04e-01  3.73e-06  1.94e-02  4.96e-01  
 10  +4.9999e-01  +6.0844e-01  1.08e-01  3.17e-04  1.65e-01  7.81e-06  5.16e-03  8.12e-01  
 11  +4.9992e-01  +5.8617e-01  8.62e-02  1.33e-04  6.94e-02  4.39e-05  5.66e-04  9.90e-01  
 12  +4.9932e-01  +5.8325e-01  8.39e-02  2.15e-05  1.13e-02  3.26e-04  7.25e-05  8.74e-01  
 13  +4.9890e-01  +5.7809e-01  7.92e-02  1.25e-05  6.58e-03  4.42e-04  4.18e-05  5.40e-01  
 14  +4.9904e-01  +5.7330e-01  7.43e-02  1.07e-05  5.59e-03  2.78e-04  3.52e-05  5.09e-01  
 15  +4.9911e-01  +5.7186e-01  7.27e-02  1.02e-05  5.36e-03  2.15e-04  3.37e-05  2.48e-01  
 16  +4.9869e-01  +5.6896e-01  7.03e-02  7.46e-06  3.91e-03  2.42e-04  2.45e-05  3.80e-01  
 17  +4.9869e-01  +5.6768e-01  6.90e-02  7.17e-06  3.76e-03  1.68e-04  2.35e-05  3.16e-01  
 18  +4.9808e-01  +5.6415e-01  6.61e-02  5.62e-06  2.95e-03  1.67e-04  1.84e-05  3.34e-01  
 19  +4.9760e-01  +5.6158e-01  6.40e-02  4.90e-06  2.57e-03  1.54e-04  1.61e-05  2.35e-01  
 20  +4.9758e-01  +5.6148e-01  6.39e-02  4.90e-06  2.57e-03  1.48e-04  1.61e-05  3.07e-02  
 21  +4.9714e-01  +5.5931e-01  6.22e-02  4.44e-06  2.33e-03  1.35e-04  1.46e-05  1.88e-01  
 22  +4.9660e-01  +5.5614e-01  5.95e-02  4.25e-06  2.23e-03  7.93e-05  1.40e-05  3.43e-01  
 23  +4.9572e-01  +5.5201e-01  5.63e-02  3.75e-06  1.97e-03  5.90e-05  1.25e-05  3.00e-01  
 24  +4.9309e-01  +5.3990e-01  4.68e-02  2.72e-06  1.42e-03  1.35e-05  9.17e-06  7.44e-01  
 25  +4.9025e-01  +5.2738e-01  3.71e-02  1.95e-06  1.02e-03  4.66e-06  6.74e-06  6.12e-01  
 26  +4.8938e-01  +5.2353e-01  3.41e-02  1.72e-06  9.05e-04  2.18e-06  5.98e-06  5.04e-01  
 27  +4.8717e-01  +5.1410e-01  2.69e-02  1.28e-06  6.69e-04  9.72e-07  4.50e-06  5.61e-01  
 28  +4.8670e-01  +5.1213e-01  2.54e-02  1.19e-06  6.23e-04  8.56e-07  4.20e-06  1.40e-01  
 29  +4.8467e-01  +5.0337e-01  1.87e-02  8.12e-07  4.26e-04  1.32e-07  2.91e-06  9.90e-01  
 30  +4.8339e-01  +4.9817e-01  1.48e-02  6.30e-07  3.30e-04  1.12e-07  2.28e-06  3.58e-01  
 31  +4.8230e-01  +4.9380e-01  1.15e-02  4.78e-07  2.51e-04  9.27e-08  1.75e-06  3.65e-01  
 32  +4.8216e-01  +4.9320e-01  1.10e-02  4.54e-07  2.38e-04  9.35e-08  1.66e-06  1.88e-01  
 33  +4.8204e-01  +4.9270e-01  1.07e-02  4.39e-07  2.30e-04  9.64e-08  1.61e-06  3.12e-01  
 34  +4.8011e-01  +4.8503e-01  4.91e-03  1.96e-07  1.03e-04  5.08e-08  7.35e-07  8.78e-01  
 35  +4.7962e-01  +4.8314e-01  3.51e-03  1.40e-07  7.32e-05  3.66e-08  5.27e-07  3.97e-01  
 36  +4.7936e-01  +4.8209e-01  2.73e-03  1.08e-07  5.64e-05  2.94e-08  4.07e-07  6.83e-01  
 37  +4.7929e-01  +4.8184e-01  2.54e-03  1.01e-07  5.31e-05  2.68e-08  3.89e-07  4.20e-01  
 38  +4.7893e-01  +4.8045e-01  1.52e-03  6.04e-08  3.17e-05  1.60e-08  2.34e-07  5.07e-01  
 39  +4.7881e-01  +4.8002e-01  1.20e-03  4.78e-08  2.50e-05  1.27e-08  1.85e-07  3.73e-01  
 40  +4.7864e-01  +4.7938e-01  7.41e-04  2.90e-08  1.52e-05  7.99e-09  1.12e-07  5.18e-01  
 41  +4.7837e-01  +4.7841e-01  3.34e-05  1.30e-09  6.83e-07  3.47e-10  5.11e-09  9.89e-01  
 42  +4.7836e-01  +4.7836e-01  3.36e-07  1.31e-11  6.86e-09  3.49e-12  5.14e-11  9.90e-01  
 43  +4.7836e-01  +4.7836e-01  3.36e-09  1.31e-13  6.86e-11  3.49e-14  5.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5444749s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:08 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:08 PM: Optimal value: 4.784e-01
(CVXPY) Aug 30 12:25:08 PM: Compilation took 2.489e-01 seconds
(CVXPY) Aug 30 12:25:08 PM: Solver (including time spent in interface) took 1.598e+00 seconds
Iteration: 16, Objective: 0.4784
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:08 PM: Your problem has 25168 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:08 PM: Finished problem compilation (took 2.697e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25168
  constraints   = 50168
  nnz(P)        = 0
  nnz(A)        = 422423
  cones (total) = 1
    : Nonnegative = 1,  numel = 50168

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3478e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3486e-01  +6.3081e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6430e+02  1.64e+02  1.47e-01  7.46e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5949e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0002e-01  +1.3273e+00  8.27e-01  2.48e-03  1.29e+00  2.34e-05  1.92e-01  1.73e-01  
  6  +5.0001e-01  +7.1777e-01  2.18e-01  6.51e-04  3.40e-01  4.89e-06  6.64e-02  7.38e-01  
  7  +5.0000e-01  +6.4289e-01  1.43e-01  4.27e-04  2.23e-01  3.41e-06  3.86e-02  5.13e-01  
  8  +5.0000e-01  +6.3177e-01  1.32e-01  3.93e-04  2.06e-01  3.45e-06  2.58e-02  4.53e-01  
  9  +5.0001e-01  +6.5042e-01  1.50e-01  4.48e-04  2.34e-01  2.45e-06  1.59e-02  8.64e-01  
 10  +4.9999e-01  +6.1771e-01  1.18e-01  3.25e-04  1.70e-01  7.25e-06  3.10e-03  8.19e-01  
 11  +4.9930e-01  +6.0471e-01  1.05e-01  1.64e-05  8.61e-03  3.42e-04  5.46e-05  9.84e-01  
 12  +4.9834e-01  +5.9257e-01  9.42e-02  8.32e-06  4.37e-03  5.22e-04  2.75e-05  5.44e-01  
 13  +4.9849e-01  +5.8780e-01  8.93e-02  7.61e-06  3.99e-03  4.07e-04  2.50e-05  2.63e-01  
 14  +4.9856e-01  +5.7771e-01  7.91e-02  6.90e-06  3.62e-03  1.85e-04  2.26e-05  4.63e-01  
 15  +4.9834e-01  +5.7094e-01  7.26e-02  6.21e-06  3.26e-03  9.09e-05  2.04e-05  4.79e-01  
 16  +4.9783e-01  +5.6695e-01  6.91e-02  5.35e-06  2.81e-03  7.20e-05  1.76e-05  3.33e-01  
 17  +4.9775e-01  +5.6564e-01  6.79e-02  5.23e-06  2.75e-03  5.39e-05  1.72e-05  2.23e-01  
 18  +4.9706e-01  +5.6203e-01  6.50e-02  4.53e-06  2.38e-03  5.07e-05  1.49e-05  2.05e-01  
 19  +4.9647e-01  +5.5813e-01  6.17e-02  4.33e-06  2.27e-03  3.02e-05  1.43e-05  3.25e-01  
 20  +4.9481e-01  +5.5033e-01  5.55e-02  3.43e-06  1.80e-03  2.71e-05  1.15e-05  2.58e-01  
 21  +4.9439e-01  +5.4826e-01  5.39e-02  3.29e-06  1.73e-03  2.24e-05  1.11e-05  1.50e-01  
 22  +4.9219e-01  +5.3790e-01  4.57e-02  2.57e-06  1.35e-03  1.21e-05  8.79e-06  4.50e-01  
 23  +4.9068e-01  +5.3101e-01  4.03e-02  2.16e-06  1.13e-03  6.63e-06  7.48e-06  4.17e-01  
 24  +4.8988e-01  +5.2727e-01  3.74e-02  1.95e-06  1.02e-03  3.79e-06  6.78e-06  3.94e-01  
 25  +4.8652e-01  +5.1286e-01  2.63e-02  1.26e-06  6.61e-04  2.18e-06  4.50e-06  4.37e-01  
 26  +4.8601e-01  +5.1063e-01  2.46e-02  1.15e-06  6.03e-04  1.71e-06  4.12e-06  2.34e-01  
 27  +4.8590e-01  +5.1002e-01  2.41e-02  1.11e-06  5.83e-04  1.25e-06  3.98e-06  2.93e-01  
 28  +4.8373e-01  +5.0093e-01  1.72e-02  7.63e-07  4.00e-04  8.24e-07  2.78e-06  3.51e-01  
 29  +4.8226e-01  +4.9471e-01  1.24e-02  5.23e-07  2.74e-04  2.79e-07  1.92e-06  7.68e-01  
 30  +4.8171e-01  +4.9247e-01  1.08e-02  4.44e-07  2.33e-04  2.24e-07  1.64e-06  2.72e-01  
 31  +4.8164e-01  +4.9220e-01  1.06e-02  4.38e-07  2.30e-04  2.05e-07  1.62e-06  1.22e-01  
 32  +4.8120e-01  +4.9042e-01  9.23e-03  3.82e-07  2.00e-04  1.45e-07  1.43e-06  4.62e-01  
 33  +4.8078e-01  +4.8872e-01  7.94e-03  3.27e-07  1.71e-04  1.19e-07  1.22e-06  2.77e-01  
 34  +4.8001e-01  +4.8559e-01  5.58e-03  2.25e-07  1.18e-04  6.65e-08  8.48e-07  8.31e-01  
 35  +4.7998e-01  +4.8547e-01  5.49e-03  2.21e-07  1.16e-04  6.52e-08  8.34e-07  4.57e-02  
 36  +4.7997e-01  +4.8542e-01  5.45e-03  2.19e-07  1.15e-04  6.42e-08  8.26e-07  1.21e-01  
 37  +4.7909e-01  +4.8201e-01  2.92e-03  1.16e-07  6.11e-05  3.30e-08  4.45e-07  7.31e-01  
 38  +4.7890e-01  +4.8128e-01  2.38e-03  9.44e-08  4.95e-05  2.70e-08  3.62e-07  2.15e-01  
 39  +4.7889e-01  +4.8126e-01  2.37e-03  9.42e-08  4.94e-05  2.67e-08  3.61e-07  2.42e-02  
 40  +4.7866e-01  +4.8038e-01  1.72e-03  6.81e-08  3.57e-05  1.93e-08  2.63e-07  3.47e-01  
 41  +4.7814e-01  +4.7840e-01  2.63e-04  1.04e-08  5.44e-06  2.78e-09  4.08e-08  9.82e-01  
 42  +4.7804e-01  +4.7805e-01  4.02e-06  1.58e-10  8.29e-08  4.12e-11  6.26e-10  9.88e-01  
 43  +4.7804e-01  +4.7804e-01  4.02e-08  1.58e-12  8.29e-10  4.12e-13  6.26e-12  9.90e-01  
 44  +4.7804e-01  +4.7804e-01  4.05e-10  1.59e-14  8.36e-12  5.80e-15  8.65e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8892636s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:10 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:10 PM: Optimal value: 4.780e-01
(CVXPY) Aug 30 12:25:10 PM: Compilation took 2.697e-01 seconds
(CVXPY) Aug 30 12:25:10 PM: Solver (including time spent in interface) took 1.942e+00 seconds
Iteration: 17, Objective: 0.4780
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:11 PM: Your problem has 25175 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:11 PM: Finished problem compilation (took 3.241e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25175
  constraints   = 50175
  nnz(P)        = 0
  nnz(A)        = 425194
  cones (total) = 1
    : Nonnegative = 1,  numel = 50175

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3479e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3485e-01  +6.3072e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6427e+02  1.64e+02  1.47e-01  7.45e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5951e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0002e-01  +1.3248e+00  8.25e-01  2.47e-03  1.29e+00  2.34e-05  1.92e-01  1.73e-01  
  6  +5.0001e-01  +7.2181e-01  2.22e-01  6.63e-04  3.47e-01  5.15e-06  6.78e-02  7.08e-01  
  7  +5.0000e-01  +6.4443e-01  1.44e-01  4.31e-04  2.26e-01  3.40e-06  3.82e-02  5.83e-01  
  8  +5.0000e-01  +6.4311e-01  1.43e-01  4.27e-04  2.23e-01  3.34e-06  2.51e-02  5.70e-01  
  9  +5.0001e-01  +6.4244e-01  1.42e-01  4.22e-04  2.21e-01  2.54e-06  1.08e-02  9.90e-01  
 10  +4.9998e-01  +6.1835e-01  1.18e-01  2.38e-04  1.25e-01  1.53e-05  1.20e-03  8.97e-01  
 11  +4.9915e-01  +6.1246e-01  1.13e-01  1.25e-05  6.54e-03  4.09e-04  4.15e-05  9.65e-01  
 12  +4.9889e-01  +6.0493e-01  1.06e-01  1.09e-05  5.70e-03  3.77e-04  3.61e-05  1.96e-01  
 13  +4.9871e-01  +5.9572e-01  9.70e-02  9.23e-06  4.85e-03  3.06e-04  3.06e-05  2.90e-01  
 14  +4.9898e-01  +5.8725e-01  8.83e-02  8.65e-06  4.54e-03  1.73e-04  2.85e-05  3.60e-01  
 15  +4.9840e-01  +5.7922e-01  8.08e-02  6.56e-06  3.44e-03  1.54e-04  2.16e-05  3.99e-01  
 16  +4.9825e-01  +5.7516e-01  7.69e-02  6.36e-06  3.34e-03  1.09e-04  2.09e-05  2.28e-01  
 17  +4.9749e-01  +5.7017e-01  7.27e-02  5.24e-06  2.75e-03  1.06e-04  1.73e-05  2.39e-01  
 18  +4.9713e-01  +5.6605e-01  6.89e-02  4.85e-06  2.54e-03  6.92e-05  1.61e-05  3.28e-01  
 19  +4.9693e-01  +5.6464e-01  6.77e-02  4.81e-06  2.52e-03  6.15e-05  1.59e-05  7.78e-02  
 20  +4.9572e-01  +5.5818e-01  6.25e-02  4.02e-06  2.11e-03  5.41e-05  1.34e-05  2.39e-01  
 21  +4.9509e-01  +5.5431e-01  5.92e-02  3.74e-06  1.96e-03  4.05e-05  1.25e-05  2.24e-01  
 22  +4.9273e-01  +5.4271e-01  5.00e-02  2.83e-06  1.48e-03  3.11e-05  9.58e-06  3.20e-01  
 23  +4.9233e-01  +5.4064e-01  4.83e-02  2.70e-06  1.42e-03  2.54e-05  9.20e-06  1.59e-01  
 24  +4.9028e-01  +5.3095e-01  4.07e-02  2.14e-06  1.12e-03  1.60e-05  7.40e-06  3.58e-01  
 25  +4.8780e-01  +5.1950e-01  3.17e-02  1.56e-06  8.16e-04  7.64e-06  5.46e-06  5.02e-01  
 26  +4.8551e-01  +5.0941e-01  2.39e-02  1.10e-06  5.79e-04  4.44e-06  3.94e-06  4.26e-01  
 27  +4.8544e-01  +5.0908e-01  2.36e-02  1.09e-06  5.70e-04  4.04e-06  3.88e-06  8.96e-02  
 28  +4.8479e-01  +5.0619e-01  2.14e-02  9.59e-07  5.03e-04  2.99e-06  3.43e-06  2.80e-01  
 29  +4.8396e-01  +5.0223e-01  1.83e-02  7.71e-07  4.05e-04  4.74e-07  2.76e-06  8.77e-01  
 30  +4.8311e-01  +4.9886e-01  1.57e-02  6.56e-07  3.44e-04  3.92e-07  2.36e-06  2.02e-01  
 31  +4.8242e-01  +4.9605e-01  1.36e-02  5.58e-07  2.93e-04  2.93e-07  2.02e-06  3.47e-01  
 32  +4.8168e-01  +4.9312e-01  1.14e-02  4.62e-07  2.42e-04  2.23e-07  1.69e-06  3.16e-01  
 33  +4.8160e-01  +4.9280e-01  1.12e-02  4.56e-07  2.39e-04  2.04e-07  1.68e-06  1.26e-01  
 34  +4.8142e-01  +4.9209e-01  1.07e-02  4.34e-07  2.27e-04  1.89e-07  1.60e-06  1.11e-01  
 35  +4.7960e-01  +4.8482e-01  5.22e-03  2.06e-07  1.08e-04  5.76e-08  7.73e-07  9.90e-01  
 36  +4.7920e-01  +4.8329e-01  4.09e-03  1.61e-07  8.46e-05  4.47e-08  6.10e-07  3.11e-01  
 37  +4.7815e-01  +4.7932e-01  1.18e-03  4.61e-08  2.41e-05  1.26e-08  1.77e-07  7.79e-01  
 38  +4.7773e-01  +4.7777e-01  3.93e-05  1.53e-09  8.04e-07  4.15e-10  5.96e-09  9.72e-01  
 39  +4.7772e-01  +4.7772e-01  3.95e-07  1.54e-11  8.07e-09  4.17e-12  5.99e-11  9.90e-01  
 40  +4.7772e-01  +4.7772e-01  3.96e-09  1.54e-13  8.09e-11  4.55e-14  6.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3093969s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:12 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:12 PM: Optimal value: 4.777e-01
(CVXPY) Aug 30 12:25:12 PM: Compilation took 3.241e-01 seconds
(CVXPY) Aug 30 12:25:12 PM: Solver (including time spent in interface) took 1.359e+00 seconds
Iteration: 18, Objective: 0.4777
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:13 PM: Your problem has 25178 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:13 PM: Finished problem compilation (took 2.900e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25178
  constraints   = 50178
  nnz(P)        = 0
  nnz(A)        = 426624
  cones (total) = 1
    : Nonnegative = 1,  numel = 50178

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3478e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3485e-01  +6.3075e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6428e+02  1.64e+02  1.47e-01  7.45e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5950e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0002e-01  +1.3241e+00  8.24e-01  2.47e-03  1.29e+00  2.34e-05  1.92e-01  1.73e-01  
  6  +5.0001e-01  +6.9255e-01  1.93e-01  5.75e-04  3.01e-01  4.26e-06  5.98e-02  7.55e-01  
  7  +5.0001e-01  +6.4741e-01  1.47e-01  4.40e-04  2.30e-01  3.32e-06  3.82e-02  5.04e-01  
  8  +5.0001e-01  +6.4743e-01  1.47e-01  4.40e-04  2.30e-01  3.17e-06  2.59e-02  5.66e-01  
  9  +5.0001e-01  +6.3964e-01  1.40e-01  4.14e-04  2.17e-01  2.48e-06  1.05e-02  9.90e-01  
 10  +4.9998e-01  +6.1529e-01  1.15e-01  2.17e-04  1.14e-01  1.66e-05  1.04e-03  9.10e-01  
 11  +4.9914e-01  +6.0961e-01  1.10e-01  1.16e-05  6.11e-03  4.15e-04  3.87e-05  9.63e-01  
 12  +4.9883e-01  +6.0186e-01  1.03e-01  1.00e-05  5.26e-03  3.82e-04  3.32e-05  2.12e-01  
 13  +4.9880e-01  +5.9581e-01  9.70e-02  9.15e-06  4.80e-03  3.15e-04  3.02e-05  2.14e-01  
 14  +4.9889e-01  +5.8640e-01  8.75e-02  8.23e-06  4.32e-03  1.87e-04  2.71e-05  3.80e-01  
 15  +4.9849e-01  +5.7881e-01  8.03e-02  6.74e-06  3.54e-03  1.43e-04  2.22e-05  3.85e-01  
 16  +4.9829e-01  +5.7574e-01  7.74e-02  6.44e-06  3.38e-03  1.17e-04  2.12e-05  1.77e-01  
 17  +4.9735e-01  +5.6936e-01  7.20e-02  5.10e-06  2.68e-03  1.11e-04  1.68e-05  2.93e-01  
 18  +4.9728e-01  +5.6822e-01  7.09e-02  5.04e-06  2.65e-03  9.70e-05  1.67e-05  1.00e-01  
 19  +4.9673e-01  +5.6476e-01  6.80e-02  4.56e-06  2.39e-03  8.67e-05  1.51e-05  1.78e-01  
 20  +4.9628e-01  +5.6087e-01  6.46e-02  4.41e-06  2.31e-03  5.62e-05  1.47e-05  2.60e-01  
 21  +4.9496e-01  +5.5384e-01  5.89e-02  3.68e-06  1.93e-03  4.44e-05  1.23e-05  2.86e-01  
 22  +4.9284e-01  +5.4321e-01  5.04e-02  2.88e-06  1.51e-03  3.01e-05  9.76e-06  3.61e-01  
 23  +4.9089e-01  +5.3311e-01  4.22e-02  2.28e-06  1.20e-03  7.22e-06  7.85e-06  6.56e-01  
 24  +4.8823e-01  +5.2112e-01  3.29e-02  1.64e-06  8.61e-04  3.88e-06  5.75e-06  4.61e-01  
 25  +4.8815e-01  +5.2074e-01  3.26e-02  1.62e-06  8.51e-04  3.55e-06  5.69e-06  7.88e-02  
 26  +4.8782e-01  +5.1897e-01  3.11e-02  1.50e-06  7.85e-04  1.95e-06  5.24e-06  4.59e-01  
 27  +4.8686e-01  +5.1490e-01  2.80e-02  1.31e-06  6.88e-04  1.54e-06  4.63e-06  2.27e-01  
 28  +4.8520e-01  +5.0758e-01  2.24e-02  9.86e-07  5.17e-04  4.04e-07  3.51e-06  7.94e-01  
 29  +4.8484e-01  +5.0608e-01  2.12e-02  9.22e-07  4.83e-04  2.90e-07  3.29e-06  5.16e-01  
 30  +4.8240e-01  +4.9607e-01  1.37e-02  5.75e-07  3.01e-04  1.81e-07  2.09e-06  4.06e-01  
 31  +4.8235e-01  +4.9587e-01  1.35e-02  5.67e-07  2.98e-04  1.77e-07  2.07e-06  6.89e-02  
 32  +4.8229e-01  +4.9555e-01  1.33e-02  5.47e-07  2.87e-04  1.63e-07  1.99e-06  3.44e-01  
 33  +4.8169e-01  +4.9316e-01  1.15e-02  4.68e-07  2.45e-04  1.40e-07  1.71e-06  2.05e-01  
 34  +4.8159e-01  +4.9279e-01  1.12e-02  4.60e-07  2.41e-04  1.32e-07  1.68e-06  1.87e-01  
 35  +4.8143e-01  +4.9213e-01  1.07e-02  4.38e-07  2.30e-04  1.25e-07  1.61e-06  1.23e-01  
 36  +4.8046e-01  +4.8828e-01  7.82e-03  3.16e-07  1.65e-04  9.00e-08  1.17e-06  4.34e-01  
 37  +4.7945e-01  +4.8431e-01  4.86e-03  1.93e-07  1.01e-04  5.49e-08  7.24e-07  5.96e-01  
 38  +4.7939e-01  +4.8410e-01  4.71e-03  1.87e-07  9.79e-05  5.31e-08  7.02e-07  6.39e-02  
 39  +4.7939e-01  +4.8408e-01  4.69e-03  1.86e-07  9.74e-05  5.28e-08  6.98e-07  7.57e-02  
 40  +4.7816e-01  +4.7934e-01  1.18e-03  4.62e-08  2.42e-05  1.28e-08  1.78e-07  9.90e-01  
 41  +4.7773e-01  +4.7776e-01  2.80e-05  1.09e-09  5.72e-07  2.94e-10  4.25e-09  9.87e-01  
 42  +4.7772e-01  +4.7772e-01  2.81e-07  1.09e-11  5.74e-09  2.95e-12  4.26e-11  9.90e-01  
 43  +4.7772e-01  +4.7772e-01  2.82e-09  1.10e-13  5.75e-11  3.32e-14  4.77e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6913913s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:15 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:15 PM: Optimal value: 4.777e-01
(CVXPY) Aug 30 12:25:15 PM: Compilation took 2.900e-01 seconds
(CVXPY) Aug 30 12:25:15 PM: Solver (including time spent in interface) took 1.767e+00 seconds
Iteration: 19, Objective: 0.4777
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:15 PM: Your problem has 25188 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:15 PM: Finished problem compilation (took 3.305e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25188
  constraints   = 50188
  nnz(P)        = 0
  nnz(A)        = 431133
  cones (total) = 1
    : Nonnegative = 1,  numel = 50188

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3479e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3484e-01  +6.3067e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6426e+02  1.64e+02  1.47e-01  7.45e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5951e+01  1.55e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2805e+00  7.80e-01  2.34e-03  1.22e+00  2.35e-05  1.92e-01  1.84e-01  
  6  +5.0001e-01  +7.3776e-01  2.38e-01  7.11e-04  3.72e-01  5.76e-06  7.20e-02  7.30e-01  
  7  +5.0001e-01  +6.8486e-01  1.85e-01  5.52e-04  2.89e-01  4.40e-06  5.08e-02  4.18e-01  
  8  +5.0001e-01  +6.6106e-01  1.61e-01  4.81e-04  2.52e-01  3.27e-06  3.00e-02  7.35e-01  
  9  +5.0000e-01  +6.3293e-01  1.33e-01  3.95e-04  2.07e-01  3.45e-06  1.15e-02  8.41e-01  
 10  +4.9996e-01  +6.1068e-01  1.11e-01  2.23e-04  1.17e-01  2.31e-05  1.13e-03  9.21e-01  
 11  +4.9918e-01  +6.0488e-01  1.06e-01  1.82e-05  9.53e-03  3.94e-04  6.15e-05  9.47e-01  
 12  +4.9889e-01  +5.9734e-01  9.84e-02  1.34e-05  7.02e-03  4.16e-04  4.51e-05  3.60e-01  
 13  +4.9896e-01  +5.9599e-01  9.70e-02  1.33e-05  7.01e-03  3.81e-04  4.49e-05  5.94e-02  
 14  +4.9885e-01  +5.9075e-01  9.19e-02  1.13e-05  5.96e-03  3.44e-04  3.80e-05  2.80e-01  
 15  +4.9878e-01  +5.8724e-01  8.85e-02  1.01e-05  5.32e-03  3.08e-04  3.38e-05  2.28e-01  
 16  +4.9870e-01  +5.7919e-01  8.05e-02  8.47e-06  4.45e-03  1.83e-04  2.82e-05  4.95e-01  
 17  +4.9843e-01  +5.7368e-01  7.53e-02  7.04e-06  3.70e-03  1.20e-04  2.33e-05  4.85e-01  
 18  +4.9795e-01  +5.6875e-01  7.08e-02  5.93e-06  3.11e-03  7.60e-05  1.96e-05  4.80e-01  
 19  +4.9749e-01  +5.6590e-01  6.84e-02  5.28e-06  2.77e-03  6.59e-05  1.75e-05  2.41e-01  
 20  +4.9716e-01  +5.6399e-01  6.68e-02  4.93e-06  2.59e-03  5.58e-05  1.63e-05  1.99e-01  
 21  +4.9639e-01  +5.5987e-01  6.35e-02  4.32e-06  2.27e-03  3.39e-05  1.44e-05  4.35e-01  
 22  +4.9407e-01  +5.4844e-01  5.44e-02  3.26e-06  1.71e-03  2.09e-05  1.10e-05  4.60e-01  
 23  +4.9254e-01  +5.4089e-01  4.83e-02  2.81e-06  1.47e-03  8.26e-06  9.57e-06  5.13e-01  
 24  +4.8899e-01  +5.2466e-01  3.57e-02  1.84e-06  9.67e-04  2.55e-06  6.42e-06  6.64e-01  
 25  +4.8884e-01  +5.2401e-01  3.52e-02  1.79e-06  9.42e-04  2.34e-06  6.25e-06  9.47e-02  
 26  +4.8837e-01  +5.2192e-01  3.36e-02  1.65e-06  8.66e-04  1.42e-06  5.76e-06  4.13e-01  
 27  +4.8810e-01  +5.2073e-01  3.26e-02  1.58e-06  8.31e-04  1.14e-06  5.53e-06  2.21e-01  
 28  +4.8621e-01  +5.1279e-01  2.66e-02  1.23e-06  6.47e-04  8.50e-07  4.37e-06  2.81e-01  
 29  +4.8589e-01  +5.1121e-01  2.53e-02  1.14e-06  5.98e-04  4.50e-07  4.05e-06  5.94e-01  
 30  +4.8310e-01  +4.9966e-01  1.66e-02  7.09e-07  3.72e-04  2.05e-07  2.58e-06  7.16e-01  
 31  +4.8178e-01  +4.9428e-01  1.25e-02  5.19e-07  2.72e-04  1.46e-07  1.91e-06  4.83e-01  
 32  +4.8169e-01  +4.9391e-01  1.22e-02  5.05e-07  2.65e-04  1.42e-07  1.86e-06  1.08e-01  
 33  +4.8143e-01  +4.9279e-01  1.14e-02  4.63e-07  2.43e-04  1.30e-07  1.70e-06  3.16e-01  
 34  +4.8135e-01  +4.9247e-01  1.11e-02  4.57e-07  2.40e-04  1.24e-07  1.69e-06  1.23e-01  
 35  +4.8120e-01  +4.9186e-01  1.07e-02  4.37e-07  2.29e-04  1.19e-07  1.62e-06  1.13e-01  
 36  +4.7939e-01  +4.8458e-01  5.20e-03  2.07e-07  1.09e-04  5.59e-08  7.84e-07  9.90e-01  
 37  +4.7874e-01  +4.8208e-01  3.34e-03  1.33e-07  6.98e-05  3.55e-08  5.11e-07  6.85e-01  
 38  +4.7780e-01  +4.7858e-01  7.78e-04  3.06e-08  1.61e-05  8.18e-09  1.20e-07  7.90e-01  
 39  +4.7753e-01  +4.7754e-01  1.46e-05  5.73e-10  3.01e-07  1.49e-10  2.27e-09  9.82e-01  
 40  +4.7752e-01  +4.7752e-01  1.46e-07  5.73e-12  3.01e-09  1.49e-12  2.27e-11  9.90e-01  
 41  +4.7752e-01  +4.7752e-01  1.46e-09  5.74e-14  3.01e-11  1.57e-14  2.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7463425s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:17 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:17 PM: Optimal value: 4.775e-01
(CVXPY) Aug 30 12:25:17 PM: Compilation took 3.305e-01 seconds
(CVXPY) Aug 30 12:25:17 PM: Solver (including time spent in interface) took 1.816e+00 seconds
Iteration: 20, Objective: 0.4775
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:17 PM: Your problem has 25192 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:18 PM: Finished problem compilation (took 3.524e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25192
  constraints   = 50192
  nnz(P)        = 0
  nnz(A)        = 433574
  cones (total) = 1
    : Nonnegative = 1,  numel = 50192

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3478e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3484e-01  +6.3069e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6426e+02  1.64e+02  1.47e-01  7.46e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5950e+01  1.54e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2814e+00  7.81e-01  2.34e-03  1.22e+00  2.35e-05  1.92e-01  1.84e-01  
  6  +5.0001e-01  +7.3288e-01  2.33e-01  6.96e-04  3.64e-01  5.64e-06  7.07e-02  7.30e-01  
  7  +5.0001e-01  +6.8376e-01  1.84e-01  5.49e-04  2.87e-01  4.37e-06  5.04e-02  4.11e-01  
  8  +5.0001e-01  +6.5926e-01  1.59e-01  4.76e-04  2.49e-01  3.45e-06  3.10e-02  6.55e-01  
  9  +5.0000e-01  +6.4414e-01  1.44e-01  4.30e-04  2.25e-01  3.74e-06  1.85e-02  5.08e-01  
 10  +4.9999e-01  +6.0971e-01  1.10e-01  3.07e-04  1.60e-01  1.13e-05  3.21e-03  8.74e-01  
 11  +4.9935e-01  +5.9573e-01  9.64e-02  2.68e-05  1.41e-02  3.19e-04  9.24e-05  9.82e-01  
 12  +4.9887e-01  +5.8830e-01  8.94e-02  1.48e-05  7.78e-03  4.54e-04  5.03e-05  5.54e-01  
 13  +4.9915e-01  +5.8296e-01  8.38e-02  1.33e-05  6.97e-03  2.72e-04  4.45e-05  4.57e-01  
 14  +4.9901e-01  +5.7886e-01  7.99e-02  1.03e-05  5.41e-03  2.38e-04  3.44e-05  4.56e-01  
 15  +4.9854e-01  +5.7481e-01  7.63e-02  7.71e-06  4.05e-03  2.49e-04  2.56e-05  3.73e-01  
 16  +4.9815e-01  +5.6951e-01  7.14e-02  6.22e-06  3.26e-03  1.37e-04  2.05e-05  6.08e-01  
 17  +4.9778e-01  +5.6624e-01  6.85e-02  5.56e-06  2.92e-03  6.88e-05  1.84e-05  5.28e-01  
 18  +4.9770e-01  +5.6578e-01  6.81e-02  5.45e-06  2.86e-03  6.43e-05  1.80e-05  7.92e-02  
 19  +4.9767e-01  +5.6563e-01  6.80e-02  5.42e-06  2.84e-03  6.13e-05  1.79e-05  4.74e-02  
 20  +4.9689e-01  +5.6178e-01  6.49e-02  4.57e-06  2.40e-03  5.99e-05  1.52e-05  2.13e-01  
 21  +4.9676e-01  +5.6120e-01  6.44e-02  4.56e-06  2.39e-03  5.75e-05  1.51e-05  2.45e-02  
 22  +4.9577e-01  +5.5651e-01  6.07e-02  3.97e-06  2.09e-03  5.16e-05  1.33e-05  1.97e-01  
 23  +4.9400e-01  +5.4770e-01  5.37e-02  3.30e-06  1.73e-03  2.41e-05  1.12e-05  4.92e-01  
 24  +4.9252e-01  +5.4087e-01  4.84e-02  2.80e-06  1.47e-03  1.82e-05  9.56e-06  2.68e-01  
 25  +4.9121e-01  +5.3486e-01  4.36e-02  2.42e-06  1.27e-03  1.19e-05  8.33e-06  3.25e-01  
 26  +4.8862e-01  +5.2322e-01  3.46e-02  1.76e-06  9.25e-04  6.59e-06  6.15e-06  4.55e-01  
 27  +4.8825e-01  +5.2154e-01  3.33e-02  1.64e-06  8.62e-04  4.29e-06  5.74e-06  3.47e-01  
 28  +4.8798e-01  +5.2033e-01  3.23e-02  1.57e-06  8.24e-04  3.20e-06  5.49e-06  2.51e-01  
 29  +4.8630e-01  +5.1321e-01  2.69e-02  1.25e-06  6.58e-04  2.42e-06  4.44e-06  2.58e-01  
 30  +4.8590e-01  +5.1127e-01  2.54e-02  1.14e-06  5.99e-04  8.76e-07  4.05e-06  6.58e-01  
 31  +4.8347e-01  +5.0125e-01  1.78e-02  7.68e-07  4.03e-04  4.45e-07  2.78e-06  5.37e-01  
 32  +4.8183e-01  +4.9458e-01  1.27e-02  5.35e-07  2.81e-04  2.93e-07  1.97e-06  3.82e-01  
 33  +4.8173e-01  +4.9410e-01  1.24e-02  5.14e-07  2.69e-04  2.58e-07  1.89e-06  2.07e-01  
 34  +4.8122e-01  +4.9203e-01  1.08e-02  4.42e-07  2.32e-04  2.11e-07  1.63e-06  2.56e-01  
 35  +4.8115e-01  +4.9173e-01  1.06e-02  4.37e-07  2.29e-04  1.92e-07  1.62e-06  1.27e-01  
 36  +4.8100e-01  +4.9110e-01  1.01e-02  4.16e-07  2.18e-04  1.76e-07  1.54e-06  1.41e-01  
 37  +4.7948e-01  +4.8507e-01  5.58e-03  2.25e-07  1.18e-04  8.37e-08  8.50e-07  6.45e-01  
 38  +4.7901e-01  +4.8321e-01  4.20e-03  1.68e-07  8.80e-05  5.83e-08  6.39e-07  4.36e-01  
 39  +4.7869e-01  +4.8197e-01  3.28e-03  1.31e-07  6.85e-05  4.40e-08  5.01e-07  3.30e-01  
 40  +4.7866e-01  +4.8185e-01  3.19e-03  1.27e-07  6.64e-05  4.12e-08  4.85e-07  2.07e-01  
 41  +4.7778e-01  +4.7850e-01  7.18e-04  2.83e-08  1.48e-05  8.69e-09  1.11e-07  8.32e-01  
 42  +4.7754e-01  +4.7759e-01  4.78e-05  1.88e-09  9.86e-07  5.06e-10  7.42e-09  9.90e-01  
 43  +4.7752e-01  +4.7752e-01  4.82e-07  1.90e-11  9.95e-09  5.11e-12  7.50e-11  9.90e-01  
 44  +4.7752e-01  +4.7752e-01  4.82e-09  1.90e-13  9.95e-11  5.11e-14  7.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6043901s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:19 PM: Optimal value: 4.775e-01
(CVXPY) Aug 30 12:25:19 PM: Compilation took 3.524e-01 seconds
(CVXPY) Aug 30 12:25:19 PM: Solver (including time spent in interface) took 1.683e+00 seconds
Iteration: 21, Objective: 0.4775
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:20 PM: Your problem has 25193 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:20 PM: Finished problem compilation (took 2.396e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25193
  constraints   = 50193
  nnz(P)        = 0
  nnz(A)        = 433973
  cones (total) = 1
    : Nonnegative = 1,  numel = 50193

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3479e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3484e-01  +6.3069e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6426e+02  1.64e+02  1.47e-01  7.46e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5951e+01  1.54e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2800e+00  7.80e-01  2.34e-03  1.22e+00  2.35e-05  1.92e-01  1.84e-01  
  6  +5.0001e-01  +7.3177e-01  2.32e-01  6.93e-04  3.62e-01  5.62e-06  7.05e-02  7.31e-01  
  7  +5.0001e-01  +6.8373e-01  1.84e-01  5.49e-04  2.87e-01  4.37e-06  5.04e-02  4.09e-01  
  8  +5.0001e-01  +6.5926e-01  1.59e-01  4.76e-04  2.49e-01  3.45e-06  3.10e-02  6.56e-01  
  9  +5.0000e-01  +6.4411e-01  1.44e-01  4.30e-04  2.25e-01  3.73e-06  1.84e-02  5.11e-01  
 10  +4.9999e-01  +6.0990e-01  1.10e-01  3.07e-04  1.61e-01  1.13e-05  3.21e-03  8.72e-01  
 11  +4.9935e-01  +5.9584e-01  9.65e-02  2.67e-05  1.40e-02  3.21e-04  9.20e-05  9.82e-01  
 12  +4.9887e-01  +5.8840e-01  8.95e-02  1.48e-05  7.78e-03  4.55e-04  5.03e-05  5.51e-01  
 13  +4.9916e-01  +5.8289e-01  8.37e-02  1.32e-05  6.95e-03  2.68e-04  4.44e-05  4.68e-01  
 14  +4.9893e-01  +5.7523e-01  7.63e-02  8.63e-06  4.53e-03  1.91e-04  2.87e-05  7.45e-01  
 15  +4.9862e-01  +5.7176e-01  7.31e-02  7.11e-06  3.73e-03  1.40e-04  2.35e-05  4.75e-01  
 16  +4.9853e-01  +5.7095e-01  7.24e-02  7.01e-06  3.68e-03  1.23e-04  2.32e-05  1.21e-01  
 17  +4.9798e-01  +5.6773e-01  6.98e-02  5.89e-06  3.09e-03  1.23e-04  1.95e-05  2.27e-01  
 18  +4.9734e-01  +5.6398e-01  6.66e-02  4.99e-06  2.62e-03  9.06e-05  1.65e-05  3.97e-01  
 19  +4.9720e-01  +5.6333e-01  6.61e-02  4.89e-06  2.57e-03  8.14e-05  1.62e-05  1.07e-01  
 20  +4.9670e-01  +5.6084e-01  6.41e-02  4.44e-06  2.33e-03  6.70e-05  1.47e-05  2.45e-01  
 21  +4.9580e-01  +5.5610e-01  6.03e-02  4.00e-06  2.10e-03  4.60e-05  1.34e-05  3.12e-01  
 22  +4.9376e-01  +5.4640e-01  5.26e-02  3.18e-06  1.67e-03  3.04e-05  1.08e-05  3.83e-01  
 23  +4.9192e-01  +5.3792e-01  4.60e-02  2.60e-06  1.37e-03  1.98e-05  8.91e-06  3.50e-01  
 24  +4.8909e-01  +5.2513e-01  3.60e-02  1.87e-06  9.80e-04  9.62e-06  6.50e-06  5.01e-01  
 25  +4.8880e-01  +5.2387e-01  3.51e-02  1.79e-06  9.38e-04  8.62e-06  6.23e-06  1.13e-01  
 26  +4.8802e-01  +5.2048e-01  3.25e-02  1.59e-06  8.36e-04  5.68e-06  5.57e-06  3.41e-01  
 27  +4.8677e-01  +5.1503e-01  2.83e-02  1.32e-06  6.94e-04  2.70e-06  4.66e-06  5.13e-01  
 28  +4.8579e-01  +5.1092e-01  2.51e-02  1.14e-06  5.97e-04  1.42e-06  4.04e-06  4.81e-01  
 29  +4.8354e-01  +5.0160e-01  1.81e-02  7.82e-07  4.10e-04  6.66e-07  2.83e-06  5.57e-01  
 30  +4.8195e-01  +4.9510e-01  1.31e-02  5.54e-07  2.91e-04  4.39e-07  2.03e-06  3.65e-01  
 31  +4.8185e-01  +4.9462e-01  1.28e-02  5.32e-07  2.79e-04  3.77e-07  1.95e-06  2.07e-01  
 32  +4.8126e-01  +4.9216e-01  1.09e-02  4.46e-07  2.34e-04  2.75e-07  1.65e-06  3.50e-01  
 33  +4.8118e-01  +4.9188e-01  1.07e-02  4.42e-07  2.32e-04  2.53e-07  1.64e-06  8.83e-02  
 34  +4.8102e-01  +4.9120e-01  1.02e-02  4.19e-07  2.20e-04  2.27e-07  1.55e-06  1.51e-01  
 35  +4.7981e-01  +4.8637e-01  6.56e-03  2.65e-07  1.39e-04  1.31e-07  9.99e-07  4.85e-01  
 36  +4.7963e-01  +4.8565e-01  6.01e-03  2.42e-07  1.27e-04  1.08e-07  9.12e-07  2.91e-01  
 37  +4.7927e-01  +4.8416e-01  4.89e-03  1.95e-07  1.02e-04  7.14e-08  7.40e-07  5.75e-01  
 38  +4.7818e-01  +4.7999e-01  1.81e-03  7.15e-08  3.75e-05  2.27e-08  2.77e-07  8.16e-01  
 39  +4.7772e-01  +4.7825e-01  5.28e-04  2.08e-08  1.09e-05  5.63e-09  8.16e-08  9.90e-01  
 40  +4.7752e-01  +4.7753e-01  9.63e-06  3.79e-10  1.99e-07  1.00e-10  1.50e-09  9.84e-01  
 41  +4.7752e-01  +4.7752e-01  9.63e-08  3.79e-12  1.99e-09  1.00e-12  1.50e-11  9.90e-01  
 42  +4.7752e-01  +4.7752e-01  9.64e-10  3.79e-14  1.99e-11  1.06e-14  1.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5505575s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:21 PM: Optimal value: 4.775e-01
(CVXPY) Aug 30 12:25:21 PM: Compilation took 2.396e-01 seconds
(CVXPY) Aug 30 12:25:21 PM: Solver (including time spent in interface) took 1.604e+00 seconds
Iteration: 22, Objective: 0.4775
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:22 PM: Your problem has 25195 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:22 PM: Finished problem compilation (took 3.398e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:22 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25195
  constraints   = 50195
  nnz(P)        = 0
  nnz(A)        = 434302
  cones (total) = 1
    : Nonnegative = 1,  numel = 50195

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3479e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3484e-01  +6.3070e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6427e+02  1.64e+02  1.47e-01  7.45e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5953e+01  1.55e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2804e+00  7.80e-01  2.34e-03  1.22e+00  2.35e-05  1.92e-01  1.84e-01  
  6  +5.0001e-01  +7.2927e-01  2.29e-01  6.85e-04  3.58e-01  5.53e-06  6.98e-02  7.37e-01  
  7  +5.0001e-01  +6.8296e-01  1.83e-01  5.47e-04  2.86e-01  4.33e-06  5.02e-02  4.04e-01  
  8  +5.0001e-01  +6.5944e-01  1.59e-01  4.76e-04  2.49e-01  3.44e-06  3.10e-02  6.52e-01  
  9  +5.0000e-01  +6.4421e-01  1.44e-01  4.30e-04  2.25e-01  3.72e-06  1.85e-02  5.09e-01  
 10  +4.9999e-01  +6.1094e-01  1.11e-01  3.11e-04  1.63e-01  1.10e-05  3.32e-03  8.66e-01  
 11  +4.9935e-01  +5.9523e-01  9.59e-02  2.64e-05  1.39e-02  3.21e-04  9.10e-05  9.84e-01  
 12  +4.9888e-01  +5.8786e-01  8.90e-02  1.47e-05  7.74e-03  4.50e-04  5.00e-05  5.53e-01  
 13  +4.9912e-01  +5.8319e-01  8.41e-02  1.33e-05  6.97e-03  2.92e-04  4.46e-05  4.18e-01  
 14  +4.9899e-01  +5.8020e-01  8.12e-02  1.09e-05  5.74e-03  2.72e-04  3.65e-05  3.40e-01  
 15  +4.9867e-01  +5.7563e-01  7.70e-02  8.32e-06  4.37e-03  2.42e-04  2.77e-05  4.56e-01  
 16  +4.9839e-01  +5.7293e-01  7.45e-02  7.17e-06  3.77e-03  2.18e-04  2.38e-05  2.86e-01  
 17  +4.9808e-01  +5.6871e-01  7.06e-02  6.21e-06  3.26e-03  1.19e-04  2.05e-05  5.27e-01  
 18  +4.9757e-01  +5.6559e-01  6.80e-02  5.39e-06  2.83e-03  9.84e-05  1.78e-05  3.12e-01  
 19  +4.9711e-01  +5.6311e-01  6.60e-02  4.86e-06  2.55e-03  7.76e-05  1.61e-05  2.88e-01  
 20  +4.9673e-01  +5.6126e-01  6.45e-02  4.63e-06  2.43e-03  5.99e-05  1.54e-05  2.31e-01  
 21  +4.9517e-01  +5.5373e-01  5.86e-02  3.71e-06  1.95e-03  5.01e-05  1.24e-05  3.03e-01  
 22  +4.9256e-01  +5.4128e-01  4.87e-02  2.78e-06  1.46e-03  2.94e-05  9.47e-06  4.40e-01  
 23  +4.9189e-01  +5.3805e-01  4.62e-02  2.59e-06  1.36e-03  2.22e-05  8.86e-06  2.17e-01  
 24  +4.8866e-01  +5.2352e-01  3.49e-02  1.78e-06  9.32e-04  1.31e-05  6.19e-06  4.29e-01  
 25  +4.8822e-01  +5.2160e-01  3.34e-02  1.66e-06  8.69e-04  9.58e-06  5.80e-06  2.61e-01  
 26  +4.8805e-01  +5.2089e-01  3.28e-02  1.62e-06  8.49e-04  8.47e-06  5.67e-06  1.11e-01  
 27  +4.8573e-01  +5.1094e-01  2.52e-02  1.17e-06  6.13e-04  5.46e-06  4.16e-06  3.70e-01  
 28  +4.8497e-01  +5.0770e-01  2.27e-02  1.02e-06  5.34e-04  3.21e-06  3.64e-06  4.20e-01  
 29  +4.8410e-01  +5.0394e-01  1.98e-02  8.67e-07  4.55e-04  1.84e-06  3.13e-06  4.34e-01  
 30  +4.8193e-01  +4.9512e-01  1.32e-02  5.57e-07  2.92e-04  1.11e-06  2.05e-06  3.96e-01  
 31  +4.8184e-01  +4.9467e-01  1.28e-02  5.38e-07  2.82e-04  1.00e-06  1.98e-06  1.17e-01  
 32  +4.8148e-01  +4.9301e-01  1.15e-02  4.72e-07  2.48e-04  5.23e-07  1.74e-06  5.56e-01  
 33  +4.8140e-01  +4.9275e-01  1.13e-02  4.68e-07  2.46e-04  4.84e-07  1.73e-06  6.39e-02  
 34  +4.8123e-01  +4.9205e-01  1.08e-02  4.45e-07  2.34e-04  4.39e-07  1.65e-06  1.10e-01  
 35  +4.8013e-01  +4.8764e-01  7.51e-03  3.03e-07  1.59e-04  2.16e-07  1.14e-06  5.88e-01  
 36  +4.8000e-01  +4.8709e-01  7.09e-03  2.85e-07  1.50e-04  1.83e-07  1.07e-06  2.21e-01  
 37  +4.7956e-01  +4.8529e-01  5.73e-03  2.29e-07  1.20e-04  8.56e-08  8.65e-07  7.89e-01  
 38  +4.7886e-01  +4.8266e-01  3.79e-03  1.51e-07  7.91e-05  5.48e-08  5.78e-07  3.99e-01  
 39  +4.7848e-01  +4.8112e-01  2.64e-03  1.05e-07  5.48e-05  2.87e-08  4.04e-07  9.90e-01  
 40  +4.7788e-01  +4.7890e-01  1.02e-03  4.02e-08  2.11e-05  1.09e-08  1.58e-07  7.24e-01  
 41  +4.7760e-01  +4.7788e-01  2.73e-04  1.08e-08  5.66e-06  2.93e-09  4.27e-08  7.43e-01  
 42  +4.7750e-01  +4.7751e-01  6.53e-06  2.57e-10  1.35e-07  6.95e-11  1.02e-09  9.76e-01  
 43  +4.7750e-01  +4.7750e-01  6.53e-08  2.57e-12  1.35e-09  6.95e-13  1.02e-11  9.90e-01  
 44  +4.7750e-01  +4.7750e-01  6.54e-10  2.58e-14  1.35e-11  7.35e-15  1.08e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7399911s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:24 PM: Optimal value: 4.775e-01
(CVXPY) Aug 30 12:25:24 PM: Compilation took 3.398e-01 seconds
(CVXPY) Aug 30 12:25:24 PM: Solver (including time spent in interface) took 1.795e+00 seconds
Iteration: 23, Objective: 0.4775
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:24 PM: Your problem has 25196 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:24 PM: Finished problem compilation (took 3.246e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25196
  constraints   = 50196
  nnz(P)        = 0
  nnz(A)        = 434727
  cones (total) = 1
    : Nonnegative = 1,  numel = 50196

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3480e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3484e-01  +6.3068e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6427e+02  1.64e+02  1.47e-01  7.45e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5954e+01  1.55e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2824e+00  7.82e-01  2.34e-03  1.22e+00  2.35e-05  1.92e-01  1.83e-01  
  6  +5.0001e-01  +7.2598e-01  2.26e-01  6.75e-04  3.53e-01  5.41e-06  6.88e-02  7.41e-01  
  7  +5.0001e-01  +6.8043e-01  1.80e-01  5.39e-04  2.82e-01  4.26e-06  4.93e-02  4.06e-01  
  8  +5.0001e-01  +6.6099e-01  1.61e-01  4.81e-04  2.52e-01  3.45e-06  3.10e-02  6.45e-01  
  9  +5.0000e-01  +6.4080e-01  1.41e-01  4.19e-04  2.19e-01  3.40e-06  1.37e-02  8.05e-01  
 10  +4.9997e-01  +6.0786e-01  1.08e-01  2.41e-04  1.26e-01  1.96e-05  1.38e-03  9.21e-01  
 11  +4.9933e-01  +6.0384e-01  1.05e-01  2.29e-05  1.20e-02  3.24e-04  7.83e-05  9.44e-01  
 12  +4.9897e-01  +5.9599e-01  9.70e-02  1.47e-05  7.70e-03  3.98e-04  4.96e-05  4.55e-01  
 13  +4.9895e-01  +5.9285e-01  9.39e-02  1.35e-05  7.08e-03  3.63e-04  4.55e-05  1.77e-01  
 14  +4.9872e-01  +5.8859e-01  8.99e-02  1.10e-05  5.78e-03  3.63e-04  3.70e-05  2.79e-01  
 15  +4.9882e-01  +5.8556e-01  8.67e-02  1.08e-05  5.67e-03  2.83e-04  3.62e-05  1.78e-01  
 16  +4.9830e-01  +5.8098e-01  8.27e-02  8.26e-06  4.34e-03  3.09e-04  2.76e-05  3.01e-01  
 17  +4.9830e-01  +5.8076e-01  8.25e-02  8.25e-06  4.33e-03  3.02e-04  2.76e-05  1.40e-02  
 18  +4.9810e-01  +5.7431e-01  7.62e-02  6.88e-06  3.61e-03  1.84e-04  2.29e-05  4.96e-01  
 19  +4.9781e-01  +5.6887e-01  7.11e-02  6.03e-06  3.17e-03  8.22e-05  2.00e-05  5.63e-01  
 20  +4.9752e-01  +5.6691e-01  6.94e-02  5.57e-06  2.92e-03  6.77e-05  1.85e-05  2.41e-01  
 21  +4.9688e-01  +5.6359e-01  6.67e-02  4.83e-06  2.53e-03  6.40e-05  1.61e-05  2.05e-01  
 22  +4.9674e-01  +5.6282e-01  6.61e-02  4.81e-06  2.52e-03  5.94e-05  1.61e-05  5.03e-02  
 23  +4.9566e-01  +5.5752e-01  6.19e-02  4.09e-06  2.15e-03  5.42e-05  1.37e-05  2.09e-01  
 24  +4.9425e-01  +5.5020e-01  5.59e-02  3.49e-06  1.83e-03  3.28e-05  1.18e-05  3.85e-01  
 25  +4.9258e-01  +5.4199e-01  4.94e-02  2.89e-06  1.52e-03  1.86e-05  9.92e-06  4.13e-01  
 26  +4.9105e-01  +5.3483e-01  4.38e-02  2.43e-06  1.28e-03  1.18e-05  8.42e-06  3.52e-01  
 27  +4.8754e-01  +5.1891e-01  3.14e-02  1.56e-06  8.18e-04  5.37e-06  5.51e-06  5.52e-01  
 28  +4.8679e-01  +5.1563e-01  2.88e-02  1.39e-06  7.28e-04  3.93e-06  4.92e-06  2.80e-01  
 29  +4.8663e-01  +5.1490e-01  2.83e-02  1.34e-06  7.02e-04  3.16e-06  4.74e-06  2.07e-01  
 30  +4.8595e-01  +5.1202e-01  2.61e-02  1.21e-06  6.35e-04  2.68e-06  4.31e-06  1.59e-01  
 31  +4.8460e-01  +5.0605e-01  2.14e-02  9.43e-07  4.95e-04  8.42e-07  3.39e-06  7.07e-01  
 32  +4.8411e-01  +5.0405e-01  1.99e-02  8.69e-07  4.56e-04  6.64e-07  3.14e-06  2.44e-01  
 33  +4.8188e-01  +4.9494e-01  1.31e-02  5.50e-07  2.89e-04  4.12e-07  2.03e-06  3.90e-01  
 34  +4.8103e-01  +4.9137e-01  1.03e-02  4.24e-07  2.22e-04  2.65e-07  1.57e-06  4.52e-01  
 35  +4.8100e-01  +4.9123e-01  1.02e-02  4.21e-07  2.21e-04  2.49e-07  1.56e-06  7.51e-02  
 36  +4.8069e-01  +4.8999e-01  9.30e-03  3.82e-07  2.00e-04  1.97e-07  1.43e-06  2.80e-01  
 37  +4.7951e-01  +4.8525e-01  5.75e-03  2.31e-07  1.21e-04  1.06e-07  8.75e-07  5.58e-01  
 38  +4.7881e-01  +4.8253e-01  3.72e-03  1.48e-07  7.79e-05  6.30e-08  5.70e-07  4.68e-01  
 39  +4.7776e-01  +4.7847e-01  7.08e-04  2.79e-08  1.47e-05  7.57e-09  1.10e-07  9.90e-01  
 40  +4.7751e-01  +4.7752e-01  1.60e-05  6.32e-10  3.31e-07  1.63e-10  2.51e-09  9.80e-01  
 41  +4.7750e-01  +4.7750e-01  1.60e-07  6.31e-12  3.31e-09  1.63e-12  2.51e-11  9.90e-01  
 42  +4.7750e-01  +4.7750e-01  1.60e-09  6.32e-14  3.31e-11  1.63e-14  2.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.608003s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:26 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:26 PM: Optimal value: 4.775e-01
(CVXPY) Aug 30 12:25:26 PM: Compilation took 3.246e-01 seconds
(CVXPY) Aug 30 12:25:26 PM: Solver (including time spent in interface) took 1.680e+00 seconds
Iteration: 24, Objective: 0.4775
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:25:26 PM: Your problem has 25197 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:25:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:25:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:25:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:25:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:25:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:25:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:25:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:25:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:25:27 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:25:27 PM: Finished problem compilation (took 3.291e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25197
  constraints   = 50197
  nnz(P)        = 0
  nnz(A)        = 435131
  cones (total) = 1
    : Nonnegative = 1,  numel = 50197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +5.3480e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3484e-01  +6.3068e+02  6.30e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6427e+02  1.64e+02  1.47e-01  7.45e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5954e+01  1.55e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0002e-01  +1.2839e+00  7.84e-01  2.35e-03  1.22e+00  2.35e-05  1.92e-01  1.83e-01  
  6  +5.0001e-01  +7.2879e-01  2.29e-01  6.84e-04  3.58e-01  5.49e-06  6.96e-02  7.37e-01  
  7  +5.0001e-01  +6.8047e-01  1.80e-01  5.39e-04  2.82e-01  4.27e-06  4.93e-02  4.13e-01  
  8  +5.0001e-01  +6.6126e-01  1.61e-01  4.82e-04  2.52e-01  3.46e-06  3.11e-02  6.43e-01  
  9  +5.0000e-01  +6.4115e-01  1.41e-01  4.20e-04  2.20e-01  3.40e-06  1.39e-02  8.01e-01  
 10  +4.9997e-01  +6.0777e-01  1.08e-01  2.44e-04  1.28e-01  1.92e-05  1.41e-03  9.21e-01  
 11  +4.9933e-01  +6.0371e-01  1.04e-01  2.30e-05  1.21e-02  3.24e-04  7.87e-05  9.45e-01  
 12  +4.9896e-01  +5.9591e-01  9.69e-02  1.47e-05  7.70e-03  4.01e-04  4.96e-05  4.57e-01  
 13  +4.9895e-01  +5.9288e-01  9.39e-02  1.35e-05  7.11e-03  3.65e-04  4.57e-05  1.71e-01  
 14  +4.9872e-01  +5.8849e-01  8.98e-02  1.10e-05  5.78e-03  3.64e-04  3.70e-05  2.87e-01  
 15  +4.9881e-01  +5.8561e-01  8.68e-02  1.08e-05  5.68e-03  2.88e-04  3.63e-05  1.69e-01  
 16  +4.9829e-01  +5.8095e-01  8.27e-02  8.24e-06  4.33e-03  3.13e-04  2.76e-05  3.05e-01  
 17  +4.9829e-01  +5.8073e-01  8.24e-02  8.24e-06  4.33e-03  3.07e-04  2.76e-05  1.40e-02  
 18  +4.9808e-01  +5.7453e-01  7.65e-02  6.89e-06  3.62e-03  1.97e-04  2.29e-05  4.73e-01  
 19  +4.9777e-01  +5.6825e-01  7.05e-02  5.94e-06  3.12e-03  7.15e-05  1.97e-05  6.36e-01  
 20  +4.9771e-01  +5.6784e-01  7.01e-02  5.85e-06  3.07e-03  6.70e-05  1.94e-05  7.12e-02  
 21  +4.9718e-01  +5.6390e-01  6.67e-02  4.98e-06  2.62e-03  2.95e-05  1.66e-05  6.15e-01  
 22  +4.9707e-01  +5.6340e-01  6.63e-02  4.97e-06  2.61e-03  2.81e-05  1.65e-05  3.46e-02  
 23  +4.9600e-01  +5.5825e-01  6.22e-02  4.19e-06  2.20e-03  2.52e-05  1.40e-05  2.41e-01  
 24  +4.9407e-01  +5.4878e-01  5.47e-02  3.36e-06  1.76e-03  1.40e-05  1.14e-05  4.64e-01  
 25  +4.9152e-01  +5.3685e-01  4.53e-02  2.53e-06  1.33e-03  7.63e-06  8.74e-06  4.60e-01  
 26  +4.9115e-01  +5.3502e-01  4.39e-02  2.42e-06  1.27e-03  5.90e-06  8.35e-06  2.08e-01  
 27  +4.8917e-01  +5.2618e-01  3.70e-02  1.92e-06  1.01e-03  4.09e-06  6.72e-06  3.21e-01  
 28  +4.8728e-01  +5.1787e-01  3.06e-02  1.50e-06  7.88e-04  2.92e-06  5.31e-06  3.06e-01  
 29  +4.8726e-01  +5.1778e-01  3.05e-02  1.49e-06  7.84e-04  2.79e-06  5.29e-06  4.71e-02  
 30  +4.8628e-01  +5.1357e-01  2.73e-02  1.30e-06  6.80e-04  2.22e-06  4.62e-06  2.20e-01  
 31  +4.8575e-01  +5.1128e-01  2.55e-02  1.19e-06  6.25e-04  1.90e-06  4.26e-06  1.57e-01  
 32  +4.8465e-01  +5.0612e-01  2.15e-02  9.37e-07  4.92e-04  3.05e-07  3.37e-06  8.89e-01  
 33  +4.8455e-01  +5.0573e-01  2.12e-02  9.24e-07  4.85e-04  2.93e-07  3.33e-06  8.40e-02  
 34  +4.8343e-01  +5.0115e-01  1.77e-02  7.56e-07  3.97e-04  2.25e-07  2.75e-06  3.84e-01  
 35  +4.8163e-01  +4.9381e-01  1.22e-02  5.07e-07  2.66e-04  1.49e-07  1.87e-06  4.22e-01  
 36  +4.8113e-01  +4.9177e-01  1.06e-02  4.35e-07  2.28e-04  1.28e-07  1.61e-06  2.71e-01  
 37  +4.8102e-01  +4.9134e-01  1.03e-02  4.26e-07  2.24e-04  1.19e-07  1.59e-06  1.78e-01  
 38  +4.8015e-01  +4.8758e-01  7.44e-03  2.98e-07  1.56e-04  8.02e-08  1.12e-06  9.90e-01  
 39  +4.7921e-01  +4.8401e-01  4.80e-03  1.92e-07  1.01e-04  5.12e-08  7.29e-07  4.43e-01  
 40  +4.7856e-01  +4.8153e-01  2.97e-03  1.18e-07  6.19e-05  3.15e-08  4.54e-07  5.09e-01  
 41  +4.7815e-01  +4.7989e-01  1.74e-03  6.90e-08  3.62e-05  1.86e-08  2.68e-07  9.75e-01  
 42  +4.7759e-01  +4.7781e-01  2.28e-04  9.00e-09  4.72e-06  2.38e-09  3.56e-08  9.39e-01  
 43  +4.7750e-01  +4.7751e-01  4.84e-06  1.91e-10  1.00e-07  4.99e-11  7.59e-10  9.79e-01  
 44  +4.7750e-01  +4.7750e-01  4.84e-08  1.91e-12  1.00e-09  4.99e-13  7.59e-12  9.90e-01  
 45  +4.7750e-01  +4.7750e-01  4.86e-10  1.92e-14  1.00e-11  5.69e-15  8.61e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7051028s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:25:29 PM: Problem status: optimal
(CVXPY) Aug 30 12:25:29 PM: Optimal value: 4.775e-01
(CVXPY) Aug 30 12:25:29 PM: Compilation took 3.291e-01 seconds
(CVXPY) Aug 30 12:25:29 PM: Solver (including time spent in interface) took 1.784e+00 seconds
FULL MODEL:
  Accruacy: 0.50758
  Our objective: 0.015160000000000007

IF 
    (x0 = 1 AND x6 = 0)                                                                   <-- (term's our objective: 0.007200000000000012)
 OR (x0 = 1 AND x4 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0015199999999999823)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.003959999999999957)
 OR (x1 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0014000000000000444)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0010799999999999955)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.007200000000000012
    Its accruacy: 0.5036
    Its hamming distance: 8
  Shortest hamming distance: 0
    Its our objective: 0.003959999999999957
  Highest accruacy: 0.5036
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

