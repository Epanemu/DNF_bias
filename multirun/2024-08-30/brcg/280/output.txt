Command:
python test_script.py -s smallest_subclass -d 8 -n 10 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 8.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:16:54 PM: Your problem has 22 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:16:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:16:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:16:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:16:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:16:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:16:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:16:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:16:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:16:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:16:54 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 22
  constraints   = 27
  nnz(P)        = 0
  nnz(A)        = 72
  cones (total) = 1
    : Nonnegative = 1,  numel = 27

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.1644e-01  +6.3113e+00  5.89e+00  7.62e-01  2.67e+00  1.00e+00  1.33e+00   ------   
  1  +3.6656e-01  +1.0783e+00  7.12e-01  2.47e-01  1.04e+00  3.49e-03  5.51e-01  7.91e-01  
  2  +2.1880e-01  +3.0413e-01  8.53e-02  3.10e-02  1.41e-01  4.77e-03  9.54e-02  8.97e-01  
  3  +2.0060e-01  +2.0402e-01  3.43e-03  1.29e-03  5.86e-03  1.92e-04  4.23e-03  9.65e-01  
  4  +2.0016e-01  +2.0034e-01  1.80e-04  6.85e-05  3.10e-04  9.06e-06  2.27e-04  9.47e-01  
  5  +2.0011e-01  +2.0014e-01  2.58e-05  9.29e-06  4.22e-05  1.12e-06  3.61e-05  9.38e-01  
  6  +2.0010e-01  +2.0010e-01  5.42e-07  1.92e-07  8.77e-07  2.05e-08  7.84e-07  9.79e-01  
  7  +2.0010e-01  +2.0010e-01  5.42e-09  1.92e-09  8.77e-09  2.05e-10  7.85e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Problem status: optimal
(CVXPY) Aug 30 12:16:54 PM: Optimal value: 2.001e-01
(CVXPY) Aug 30 12:16:54 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:16:54 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:16:54 PM: Your problem has 32 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:16:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:16:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:16:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:16:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:16:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:16:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:16:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:16:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:16:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:16:54 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 37
  nnz(P)        = 0
  nnz(A)        = 105
  cones (total) = 1
    : Nonnegative = 1,  numel = 37

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.5175e-01  +6.3854e+00  6.03e+00  7.98e-01  2.81e+00  1.00e+00  1.34e+00   ------   
  1  +1.8179e-01  +9.4692e-01  7.65e-01  2.72e-01  1.02e+00  3.83e-03  5.30e-01  7.74e-01  
  2  +5.0812e-02  +2.1514e-01  1.64e-01  5.47e-02  2.44e-01  8.99e-03  1.62e-01  8.24e-01  
  3  +1.5125e-02  +5.5459e-02  4.03e-02  1.07e-02  5.42e-02  2.94e-03  3.77e-02  8.11e-01  
  4  +5.3218e-04  +1.1955e-03  6.63e-04  1.74e-04  8.87e-04  4.63e-05  6.32e-04  9.83e-01  
  5  +3.1032e-04  +3.4893e-04  3.86e-05  1.13e-05  5.51e-05  1.51e-06  4.08e-05  9.36e-01  
  6  +3.0024e-04  +3.0142e-04  1.18e-06  3.63e-07  1.71e-06  5.77e-08  1.32e-06  9.78e-01  
  7  +3.0000e-04  +3.0001e-04  1.18e-08  3.63e-09  1.71e-08  5.77e-10  1.32e-08  9.90e-01  
  8  +3.0000e-04  +3.0000e-04  1.18e-10  3.64e-11  1.71e-10  5.77e-12  1.32e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 103.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Problem status: optimal
(CVXPY) Aug 30 12:16:54 PM: Optimal value: 3.000e-04
(CVXPY) Aug 30 12:16:54 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:16:54 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:16:54 PM: Your problem has 34 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:16:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:16:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:16:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:16:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:16:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:16:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:16:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:16:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:16:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:16:54 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 39
  nnz(P)        = 0
  nnz(A)        = 112
  cones (total) = 1
    : Nonnegative = 1,  numel = 39

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3553e-01  +6.4673e+00  6.13e+00  8.02e-01  2.85e+00  1.00e+00  1.35e+00   ------   
  1  +1.4112e-01  +9.2795e-01  7.87e-01  2.79e-01  1.05e+00  3.84e-03  5.36e-01  7.70e-01  
  2  +4.6544e-02  +1.8685e-01  1.40e-01  5.33e-02  2.34e-01  6.03e-03  1.46e-01  8.06e-01  
  3  +4.3799e-03  +2.5973e-02  2.16e-02  7.06e-03  3.36e-02  1.16e-03  2.28e-02  9.04e-01  
  4  +3.2387e-04  +7.3745e-04  4.14e-04  1.38e-04  6.52e-04  1.97e-05  4.51e-04  9.80e-01  
  5  +2.3640e-04  +3.1538e-04  7.90e-05  3.00e-05  1.29e-04  2.87e-06  1.02e-04  8.19e-01  
  6  +2.0249e-04  +2.0799e-04  5.50e-06  1.95e-06  8.47e-06  2.23e-07  8.32e-06  9.79e-01  
  7  +2.0003e-04  +2.0008e-04  5.69e-08  2.02e-08  8.78e-08  2.26e-09  8.73e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  5.69e-10  2.02e-10  8.78e-10  2.26e-11  8.73e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Problem status: optimal
(CVXPY) Aug 30 12:16:54 PM: Optimal value: 2.000e-04
(CVXPY) Aug 30 12:16:54 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:16:54 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:16:54 PM: Your problem has 35 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:16:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:16:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:16:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:16:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:16:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:16:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:16:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:16:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:16:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:16:54 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 35
  constraints   = 40
  nnz(P)        = 0
  nnz(A)        = 115
  cones (total) = 1
    : Nonnegative = 1,  numel = 40

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.2529e-01  +6.4334e+00  6.11e+00  8.05e-01  2.85e+00  1.00e+00  1.35e+00   ------   
  1  +1.0900e-01  +9.0602e-01  7.97e-01  2.82e-01  1.04e+00  3.93e-03  5.32e-01  7.63e-01  
  2  +3.3597e-02  +1.5030e-01  1.17e-01  4.67e-02  1.98e-01  6.38e-03  1.25e-01  8.54e-01  
  3  +1.6265e-03  +8.8749e-03  7.25e-03  2.78e-03  1.20e-02  4.46e-04  8.34e-03  9.70e-01  
  4  +2.8337e-04  +5.1578e-04  2.32e-04  9.16e-05  3.91e-04  1.17e-05  2.76e-04  9.67e-01  
  5  +2.2274e-04  +2.7318e-04  5.04e-05  2.02e-05  8.35e-05  2.09e-06  7.20e-05  9.03e-01  
  6  +2.0094e-04  +2.0298e-04  2.04e-06  7.47e-07  3.22e-06  6.64e-08  3.21e-06  9.65e-01  
  7  +2.0001e-04  +2.0003e-04  2.06e-08  7.54e-09  3.25e-08  6.70e-10  3.26e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  2.06e-10  7.54e-11  3.25e-10  6.70e-12  3.26e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 114.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:16:54 PM: Problem status: optimal
(CVXPY) Aug 30 12:16:54 PM: Optimal value: 2.000e-04
(CVXPY) Aug 30 12:16:54 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:16:54 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x7 = 1 AND x0 = 0)            <-- (term's our objective: 0.6)
 OR (x3 = 1 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 8
  Shortest hamming distance: 7
    Its our objective: 0.4
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

