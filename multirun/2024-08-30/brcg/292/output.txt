Command:
python test_script.py -s smallest_subclass -d 8 -n 100 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 8.

Computed total variation: 0.78
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:18 PM: Your problem has 67 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Finished problem compilation (took 4.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9746e-01  +5.1181e+01  5.07e+01  8.71e-01  9.98e+00  1.00e+00  1.04e+00   ------   
  1  +5.7864e-01  +1.1122e+01  1.05e+01  3.69e-01  5.95e+00  3.79e-03  5.82e-01  6.00e-01  
  2  +5.1576e-01  +1.7098e+00  1.19e+00  8.95e-02  1.79e+00  1.70e-02  2.30e-01  9.90e-01  
  3  +4.8913e-01  +8.4743e-01  3.58e-01  1.93e-02  4.04e-01  9.58e-03  6.07e-02  8.31e-01  
  4  +4.5779e-01  +6.7596e-01  2.18e-01  6.86e-03  1.45e-01  8.18e-03  2.35e-02  6.49e-01  
  5  +4.4091e-01  +5.5255e-01  1.12e-01  3.22e-03  6.74e-02  3.66e-03  1.19e-02  5.73e-01  
  6  +4.2328e-01  +4.7151e-01  4.82e-02  1.11e-03  2.31e-02  1.22e-03  4.80e-03  7.08e-01  
  7  +4.1105e-01  +4.1387e-01  2.82e-03  5.96e-05  1.25e-03  1.20e-05  2.92e-04  9.85e-01  
  8  +4.1011e-01  +4.1014e-01  2.98e-05  6.26e-07  1.31e-05  1.25e-07  3.10e-06  9.89e-01  
  9  +4.1010e-01  +4.1010e-01  2.98e-07  6.26e-09  1.31e-07  1.25e-09  3.10e-08  9.90e-01  
 10  +4.1010e-01  +4.1010e-01  2.98e-09  6.26e-11  1.31e-09  1.25e-11  3.10e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 362.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:18 PM: Optimal value: 4.101e-01
(CVXPY) Aug 30 12:17:18 PM: Compilation took 4.009e-03 seconds
(CVXPY) Aug 30 12:17:18 PM: Solver (including time spent in interface) took 1.033e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:18 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Finished problem compilation (took 2.904e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 684
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9512e-01  +5.1420e+01  5.09e+01  8.76e-01  1.01e+01  1.00e+00  1.05e+00   ------   
  1  +5.6359e-01  +1.1172e+01  1.06e+01  3.78e-01  5.90e+00  3.80e-03  5.86e-01  6.00e-01  
  2  +4.9996e-01  +1.7961e+00  1.30e+00  8.91e-02  1.81e+00  1.85e-02  2.26e-01  9.90e-01  
  3  +4.5639e-01  +9.9293e-01  5.37e-01  2.24e-02  4.85e-01  1.32e-02  6.53e-02  7.80e-01  
  4  +4.1463e-01  +6.8897e-01  2.74e-01  8.50e-03  1.86e-01  7.01e-03  2.67e-02  6.64e-01  
  5  +3.8521e-01  +4.9292e-01  1.08e-01  2.64e-03  6.14e-02  2.75e-03  8.63e-03  7.96e-01  
  6  +3.6983e-01  +4.4023e-01  7.04e-02  1.51e-03  3.82e-02  1.31e-03  4.99e-03  5.99e-01  
  7  +3.6604e-01  +4.3691e-01  7.09e-02  1.17e-03  3.20e-02  1.22e-03  3.92e-03  4.75e-01  
  8  +3.4839e-01  +3.7895e-01  3.06e-02  4.79e-04  1.29e-02  1.04e-04  1.66e-03  9.90e-01  
  9  +3.3432e-01  +3.4113e-01  6.80e-03  9.49e-05  2.63e-03  2.59e-05  3.40e-04  8.10e-01  
 10  +3.3081e-01  +3.3127e-01  4.60e-04  6.31e-06  1.75e-04  3.65e-06  2.28e-05  9.90e-01  
 11  +3.3050e-01  +3.3051e-01  5.27e-06  7.27e-08  2.01e-06  3.65e-08  2.63e-07  9.88e-01  
 12  +3.3050e-01  +3.3050e-01  5.27e-08  7.27e-10  2.01e-08  3.64e-10  2.63e-09  9.90e-01  
 13  +3.3050e-01  +3.3050e-01  5.28e-10  7.28e-12  2.01e-10  3.64e-12  2.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 537.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:18 PM: Optimal value: 3.305e-01
(CVXPY) Aug 30 12:17:18 PM: Compilation took 2.904e-03 seconds
(CVXPY) Aug 30 12:17:18 PM: Solver (including time spent in interface) took 9.398e-04 seconds
Iteration: 2, Objective: 0.3305
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:18 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Finished problem compilation (took 2.607e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 775
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9132e-01  +5.1779e+01  5.13e+01  8.81e-01  1.01e+01  1.00e+00  1.06e+00   ------   
  1  +5.4098e-01  +1.1319e+01  1.08e+01  3.89e-01  5.82e+00  3.82e-03  5.93e-01  5.95e-01  
  2  +4.7577e-01  +1.9037e+00  1.43e+00  8.95e-02  1.82e+00  2.05e-02  2.25e-01  9.90e-01  
  3  +4.1799e-01  +1.0517e+00  6.34e-01  2.65e-02  5.62e-01  1.22e-02  7.47e-02  7.53e-01  
  4  +3.8192e-01  +7.4559e-01  3.64e-01  1.13e-02  2.42e-01  7.67e-03  3.38e-02  6.37e-01  
  5  +3.4604e-01  +5.8502e-01  2.39e-01  5.36e-03  1.16e-01  5.70e-03  1.72e-02  5.45e-01  
  6  +3.0820e-01  +3.8904e-01  8.08e-02  1.77e-03  4.08e-02  2.83e-04  6.00e-03  9.49e-01  
  7  +2.8606e-01  +3.2505e-01  3.90e-02  7.08e-04  1.87e-02  1.71e-04  2.48e-03  6.74e-01  
  8  +2.8081e-01  +3.1572e-01  3.49e-02  5.55e-04  1.60e-02  1.74e-04  1.95e-03  3.31e-01  
  9  +2.6433e-01  +2.6989e-01  5.56e-03  8.38e-05  2.46e-03  3.93e-05  3.06e-04  9.90e-01  
 10  +2.6077e-01  +2.6087e-01  9.82e-05  1.47e-06  4.34e-05  4.27e-07  5.47e-06  9.83e-01  
 11  +2.6070e-01  +2.6070e-01  1.06e-06  1.60e-08  4.70e-07  4.18e-09  6.11e-08  9.89e-01  
 12  +2.6070e-01  +2.6070e-01  1.06e-08  1.60e-10  4.69e-09  4.17e-11  6.11e-10  9.90e-01  
 13  +2.6070e-01  +2.6070e-01  1.06e-10  1.60e-12  4.70e-11  4.17e-13  6.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 598.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:18 PM: Optimal value: 2.607e-01
(CVXPY) Aug 30 12:17:18 PM: Compilation took 2.607e-03 seconds
(CVXPY) Aug 30 12:17:18 PM: Solver (including time spent in interface) took 1.107e-03 seconds
Iteration: 3, Objective: 0.2607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:18 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Finished problem compilation (took 3.042e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 831
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8925e-01  +5.1974e+01  5.15e+01  8.85e-01  9.86e+00  1.00e+00  1.06e+00   ------   
  1  +5.2196e-01  +1.1264e+01  1.07e+01  3.89e-01  5.55e+00  3.85e-03  5.87e-01  6.01e-01  
  2  +4.4423e-01  +2.0385e+00  1.59e+00  8.07e-02  1.61e+00  2.23e-02  2.00e-01  9.90e-01  
  3  +3.5563e-01  +1.0652e+00  7.10e-01  2.31e-02  4.74e-01  1.33e-02  6.52e-02  7.41e-01  
  4  +3.0810e-01  +7.5995e-01  4.52e-01  1.26e-02  2.57e-01  7.51e-03  3.83e-02  5.22e-01  
  5  +2.5231e-01  +3.6071e-01  1.08e-01  2.95e-03  5.92e-02  1.03e-03  1.05e-02  7.76e-01  
  6  +2.3907e-01  +3.1072e-01  7.17e-02  1.76e-03  3.92e-02  6.67e-04  6.35e-03  5.29e-01  
  7  +2.3106e-01  +2.7838e-01  4.73e-02  9.43e-04  2.44e-02  5.04e-04  3.37e-03  6.07e-01  
  8  +2.2491e-01  +2.5124e-01  2.63e-02  6.26e-04  1.42e-02  4.87e-05  2.36e-03  9.90e-01  
  9  +2.1609e-01  +2.2809e-01  1.20e-02  2.32e-04  6.08e-03  3.67e-05  8.75e-04  7.24e-01  
 10  +2.1145e-01  +2.1282e-01  1.36e-03  2.61e-05  6.86e-04  4.02e-06  1.01e-04  8.86e-01  
 11  +2.1123e-01  +2.1207e-01  8.48e-04  1.60e-05  4.12e-04  3.59e-06  6.39e-05  6.44e-01  
 12  +2.1082e-01  +2.1086e-01  3.59e-05  6.76e-07  1.74e-05  1.29e-07  2.77e-06  9.57e-01  
 13  +2.1080e-01  +2.1080e-01  3.76e-07  7.08e-09  1.82e-07  1.34e-09  2.92e-08  9.89e-01  
 14  +2.1080e-01  +2.1080e-01  3.76e-09  7.08e-11  1.82e-09  1.34e-11  2.92e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 673.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:18 PM: Optimal value: 2.108e-01
(CVXPY) Aug 30 12:17:18 PM: Compilation took 3.042e-03 seconds
(CVXPY) Aug 30 12:17:18 PM: Solver (including time spent in interface) took 9.739e-04 seconds
Iteration: 4, Objective: 0.2108
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:18 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Finished problem compilation (took 2.024e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 876
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8591e-01  +5.2292e+01  5.18e+01  8.89e-01  9.64e+00  1.00e+00  1.07e+00   ------   
  1  +4.9096e-01  +1.1466e+01  1.10e+01  3.94e-01  5.40e+00  3.90e-03  5.92e-01  5.95e-01  
  2  +3.9936e-01  +2.3602e+00  1.96e+00  8.81e-02  1.69e+00  2.40e-02  2.16e-01  9.41e-01  
  3  +3.2269e-01  +1.0752e+00  7.52e-01  2.58e-02  5.11e-01  1.17e-02  7.22e-02  7.01e-01  
  4  +2.8865e-01  +8.1366e-01  5.25e-01  1.65e-02  3.26e-01  7.43e-03  4.92e-02  4.00e-01  
  5  +2.3434e-01  +3.9264e-01  1.58e-01  4.67e-03  9.14e-02  1.55e-03  1.58e-02  7.58e-01  
  6  +2.0949e-01  +2.8295e-01  7.35e-02  1.85e-03  4.07e-02  7.13e-04  6.59e-03  7.23e-01  
  7  +2.0194e-01  +2.5656e-01  5.46e-02  1.15e-03  2.85e-02  5.56e-04  4.13e-03  5.00e-01  
  8  +1.9399e-01  +2.2145e-01  2.75e-02  6.15e-04  1.46e-02  1.05e-04  2.26e-03  9.90e-01  
  9  +1.8317e-01  +1.8811e-01  4.93e-03  9.94e-05  2.49e-03  1.97e-05  3.80e-04  8.48e-01  
 10  +1.8126e-01  +1.8179e-01  5.32e-04  1.07e-05  2.68e-04  1.98e-06  4.20e-05  8.94e-01  
 11  +1.8105e-01  +1.8116e-01  1.06e-04  2.14e-06  5.36e-05  4.86e-07  8.59e-06  9.01e-01  
 12  +1.8100e-01  +1.8100e-01  1.64e-06  3.33e-08  8.33e-07  7.35e-09  1.34e-07  9.84e-01  
 13  +1.8100e-01  +1.8100e-01  1.64e-08  3.33e-10  8.33e-09  7.35e-11  1.34e-09  9.90e-01  
 14  +1.8100e-01  +1.8100e-01  1.64e-10  3.34e-12  8.33e-11  7.35e-13  1.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 765.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:18 PM: Optimal value: 1.810e-01
(CVXPY) Aug 30 12:17:18 PM: Compilation took 2.024e-03 seconds
(CVXPY) Aug 30 12:17:18 PM: Solver (including time spent in interface) took 1.960e-03 seconds
Iteration: 5, Objective: 0.1810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:18 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:18 PM: Finished problem compilation (took 3.087e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 909
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8499e-01  +5.2278e+01  5.18e+01  8.92e-01  9.40e+00  1.00e+00  1.07e+00   ------   
  1  +4.7524e-01  +1.1451e+01  1.10e+01  3.95e-01  5.18e+00  3.94e-03  5.86e-01  5.96e-01  
  2  +3.6608e-01  +2.5989e+00  2.23e+00  9.05e-02  1.67e+00  2.42e-02  2.22e-01  9.02e-01  
  3  +2.7629e-01  +1.0074e+00  7.31e-01  2.32e-02  4.41e-01  9.33e-03  6.60e-02  8.47e-01  
  4  +2.2570e-01  +4.3302e-01  2.07e-01  6.67e-03  1.25e-01  2.07e-03  2.16e-02  7.23e-01  
  5  +2.0093e-01  +3.0321e-01  1.02e-01  2.88e-03  5.87e-02  9.94e-04  9.76e-03  7.17e-01  
  6  +1.9040e-01  +2.7136e-01  8.10e-02  1.89e-03  4.37e-02  8.18e-04  6.55e-03  4.35e-01  
  7  +1.7022e-01  +1.9415e-01  2.39e-02  5.06e-04  1.23e-02  1.71e-04  1.88e-03  8.24e-01  
  8  +1.6162e-01  +1.6283e-01  1.21e-03  2.51e-05  6.11e-04  5.80e-06  9.70e-05  9.58e-01  
  9  +1.6116e-01  +1.6126e-01  1.06e-04  2.24e-06  5.40e-05  4.45e-07  9.22e-06  9.66e-01  
 10  +1.6110e-01  +1.6110e-01  1.27e-06  2.68e-08  6.45e-07  5.01e-09  1.13e-07  9.90e-01  
 11  +1.6110e-01  +1.6110e-01  1.27e-08  2.68e-10  6.46e-09  5.02e-11  1.13e-09  9.90e-01  
 12  +1.6110e-01  +1.6110e-01  1.27e-10  2.68e-12  6.46e-11  5.02e-13  1.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 781.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:18 PM: Optimal value: 1.611e-01
(CVXPY) Aug 30 12:17:18 PM: Compilation took 3.087e-03 seconds
(CVXPY) Aug 30 12:17:18 PM: Solver (including time spent in interface) took 9.177e-04 seconds
Iteration: 6, Objective: 0.1611
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:19 PM: Your problem has 127 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:19 PM: Finished problem compilation (took 2.949e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 127
  constraints   = 177
  nnz(P)        = 0
  nnz(A)        = 957
  cones (total) = 1
    : Nonnegative = 1,  numel = 177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8446e-01  +5.2358e+01  5.19e+01  8.95e-01  9.22e+00  1.00e+00  1.07e+00   ------   
  1  +4.6448e-01  +1.1490e+01  1.10e+01  3.98e-01  5.02e+00  3.97e-03  5.85e-01  5.96e-01  
  2  +3.4343e-01  +3.0286e+00  2.69e+00  1.01e-01  1.78e+00  2.40e-02  2.45e-01  8.34e-01  
  3  +2.6618e-01  +1.0940e+00  8.28e-01  2.70e-02  5.00e-01  9.30e-03  7.64e-02  7.77e-01  
  4  +2.1450e-01  +4.4296e-01  2.28e-01  7.47e-03  1.37e-01  2.26e-03  2.34e-02  7.52e-01  
  5  +1.8670e-01  +3.3885e-01  1.52e-01  4.26e-03  8.69e-02  1.38e-03  1.40e-02  5.86e-01  
  6  +1.5817e-01  +2.1603e-01  5.79e-02  1.40e-03  3.05e-02  4.88e-04  5.08e-03  7.18e-01  
  7  +1.4227e-01  +1.4540e-01  3.13e-03  7.49e-05  1.62e-03  1.64e-05  2.88e-04  9.55e-01  
  8  +1.4133e-01  +1.4169e-01  3.52e-04  8.65e-06  1.85e-04  1.47e-06  3.49e-05  8.82e-01  
  9  +1.4121e-01  +1.4125e-01  3.28e-05  8.19e-07  1.73e-05  1.39e-07  3.42e-06  9.78e-01  
 10  +1.4120e-01  +1.4120e-01  3.35e-07  8.35e-09  1.77e-07  1.41e-09  3.50e-08  9.90e-01  
 11  +1.4120e-01  +1.4120e-01  3.35e-09  8.35e-11  1.77e-09  1.41e-11  3.50e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 717µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:19 PM: Optimal value: 1.412e-01
(CVXPY) Aug 30 12:17:19 PM: Compilation took 2.949e-03 seconds
(CVXPY) Aug 30 12:17:19 PM: Solver (including time spent in interface) took 1.004e-03 seconds
Iteration: 7, Objective: 0.1412
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:19 PM: Your problem has 137 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:19 PM: Finished problem compilation (took 1.987e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 137
  constraints   = 187
  nnz(P)        = 0
  nnz(A)        = 991
  cones (total) = 1
    : Nonnegative = 1,  numel = 187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8348e-01  +5.2477e+01  5.20e+01  8.98e-01  9.02e+00  1.00e+00  1.07e+00   ------   
  1  +4.4844e-01  +1.1668e+01  1.12e+01  4.03e-01  4.88e+00  4.02e-03  5.86e-01  5.90e-01  
  2  +3.2113e-01  +3.1522e+00  2.83e+00  1.05e-01  1.79e+00  2.45e-02  2.53e-01  8.18e-01  
  3  +2.5014e-01  +8.7501e-01  6.25e-01  2.09e-02  3.78e-01  7.92e-03  6.03e-02  8.48e-01  
  4  +1.9570e-01  +4.2867e-01  2.33e-01  7.39e-03  1.35e-01  2.50e-03  2.34e-02  7.56e-01  
  5  +1.6302e-01  +2.7506e-01  1.12e-01  3.06e-03  6.19e-02  1.18e-03  1.04e-02  6.40e-01  
  6  +1.4249e-01  +1.8258e-01  4.01e-02  1.00e-03  2.14e-02  3.82e-04  3.63e-03  7.04e-01  
  7  +1.3182e-01  +1.3360e-01  1.77e-03  4.44e-05  9.35e-04  1.04e-05  1.68e-04  9.60e-01  
  8  +1.3129e-01  +1.3151e-01  2.23e-04  5.80e-06  1.19e-04  9.45e-07  2.40e-05  8.83e-01  
  9  +1.3120e-01  +1.3121e-01  7.28e-06  1.91e-07  3.90e-06  2.92e-08  8.15e-07  9.82e-01  
 10  +1.3120e-01  +1.3120e-01  7.28e-08  1.91e-09  3.90e-08  2.92e-10  8.17e-09  9.90e-01  
 11  +1.3120e-01  +1.3120e-01  7.29e-10  1.91e-11  3.91e-10  2.92e-12  8.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 800.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:19 PM: Optimal value: 1.312e-01
(CVXPY) Aug 30 12:17:19 PM: Compilation took 1.987e-03 seconds
(CVXPY) Aug 30 12:17:19 PM: Solver (including time spent in interface) took 9.928e-04 seconds
Iteration: 8, Objective: 0.1312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:19 PM: Your problem has 147 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:19 PM: Finished problem compilation (took 2.022e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 147
  constraints   = 197
  nnz(P)        = 0
  nnz(A)        = 1014
  cones (total) = 1
    : Nonnegative = 1,  numel = 197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8239e-01  +5.2622e+01  5.21e+01  9.01e-01  8.82e+00  1.00e+00  1.08e+00   ------   
  1  +4.3105e-01  +1.1666e+01  1.12e+01  4.02e-01  4.72e+00  4.04e-03  5.85e-01  5.92e-01  
  2  +2.7396e-01  +3.4599e+00  3.19e+00  1.06e-01  1.75e+00  2.41e-02  2.59e-01  7.81e-01  
  3  +2.3496e-01  +7.1498e-01  4.80e-01  1.69e-02  2.95e-01  7.25e-03  5.00e-02  8.97e-01  
  4  +1.9806e-01  +5.2177e-01  3.24e-01  1.04e-02  1.85e-01  4.33e-03  3.25e-02  5.34e-01  
  5  +1.5487e-01  +2.5072e-01  9.59e-02  2.74e-03  5.10e-02  1.03e-03  9.56e-03  8.16e-01  
  6  +1.3652e-01  +1.5659e-01  2.01e-02  5.63e-04  1.04e-02  1.63e-04  2.07e-03  8.36e-01  
  7  +1.3153e-01  +1.3253e-01  1.00e-03  2.86e-05  5.21e-04  4.67e-06  1.10e-04  9.53e-01  
  8  +1.3125e-01  +1.3138e-01  1.35e-04  4.01e-06  7.09e-05  5.39e-07  1.70e-05  9.12e-01  
  9  +1.3120e-01  +1.3120e-01  1.73e-06  5.16e-08  9.09e-07  6.41e-09  2.23e-07  9.87e-01  
 10  +1.3120e-01  +1.3120e-01  1.73e-08  5.16e-10  9.09e-09  6.41e-11  2.23e-09  9.90e-01  
 11  +1.3120e-01  +1.3120e-01  1.74e-10  5.17e-12  9.11e-11  6.42e-13  2.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 752.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:19 PM: Optimal value: 1.312e-01
(CVXPY) Aug 30 12:17:19 PM: Compilation took 2.022e-03 seconds
(CVXPY) Aug 30 12:17:19 PM: Solver (including time spent in interface) took 9.911e-04 seconds
Iteration: 9, Objective: 0.1312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:19 PM: Your problem has 149 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:19 PM: Finished problem compilation (took 3.134e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 149
  constraints   = 199
  nnz(P)        = 0
  nnz(A)        = 1030
  cones (total) = 1
    : Nonnegative = 1,  numel = 199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8203e-01  +5.2685e+01  5.22e+01  9.01e-01  8.82e+00  1.00e+00  1.08e+00   ------   
  1  +4.2608e-01  +1.1763e+01  1.13e+01  4.05e-01  4.74e+00  4.06e-03  5.88e-01  5.88e-01  
  2  +2.6939e-01  +3.6445e+00  3.38e+00  1.13e-01  1.84e+00  2.44e-02  2.70e-01  7.62e-01  
  3  +2.3098e-01  +7.2057e-01  4.90e-01  1.74e-02  3.03e-01  7.58e-03  5.12e-02  9.09e-01  
  4  +1.8672e-01  +4.6722e-01  2.81e-01  9.19e-03  1.61e-01  3.63e-03  2.96e-02  6.12e-01  
  5  +1.5489e-01  +2.5202e-01  9.71e-02  2.94e-03  5.31e-02  1.16e-03  1.02e-02  7.23e-01  
  6  +1.4442e-01  +1.9611e-01  5.17e-02  1.52e-03  2.81e-02  2.91e-04  5.42e-03  8.13e-01  
  7  +1.3227e-01  +1.3608e-01  3.81e-03  1.09e-04  2.02e-03  1.82e-05  4.08e-04  9.28e-01  
  8  +1.3135e-01  +1.3180e-01  4.57e-04  1.36e-05  2.44e-04  1.52e-06  5.49e-05  8.71e-01  
  9  +1.3121e-01  +1.3125e-01  3.79e-05  1.15e-06  2.02e-05  1.29e-07  4.92e-06  9.54e-01  
 10  +1.3120e-01  +1.3120e-01  3.88e-07  1.17e-08  2.07e-07  1.32e-09  5.06e-08  9.90e-01  
 11  +1.3120e-01  +1.3120e-01  3.88e-09  1.17e-10  2.07e-09  1.32e-11  5.06e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 741.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:19 PM: Optimal value: 1.312e-01
(CVXPY) Aug 30 12:17:19 PM: Compilation took 3.134e-03 seconds
(CVXPY) Aug 30 12:17:19 PM: Solver (including time spent in interface) took 9.117e-04 seconds
Iteration: 10, Objective: 0.1312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:19 PM: Your problem has 150 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:19 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 150
  constraints   = 200
  nnz(P)        = 0
  nnz(A)        = 1033
  cones (total) = 1
    : Nonnegative = 1,  numel = 200

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8201e-01  +5.2679e+01  5.22e+01  9.01e-01  8.80e+00  1.00e+00  1.08e+00   ------   
  1  +4.2445e-01  +1.1768e+01  1.13e+01  4.05e-01  4.72e+00  4.06e-03  5.87e-01  5.88e-01  
  2  +2.6678e-01  +3.6523e+00  3.39e+00  1.13e-01  1.84e+00  2.45e-02  2.70e-01  7.61e-01  
  3  +2.2921e-01  +7.1884e-01  4.90e-01  1.74e-02  3.03e-01  7.54e-03  5.12e-02  9.05e-01  
  4  +1.8309e-01  +4.4858e-01  2.65e-01  8.69e-03  1.52e-01  3.40e-03  2.80e-02  6.43e-01  
  5  +1.5462e-01  +2.5283e-01  9.82e-02  3.02e-03  5.43e-02  1.16e-03  1.04e-02  7.00e-01  
  6  +1.4435e-01  +1.9612e-01  5.18e-02  1.56e-03  2.85e-02  2.92e-04  5.50e-03  7.94e-01  
  7  +1.3248e-01  +1.3708e-01  4.60e-03  1.34e-04  2.47e-03  2.35e-05  4.95e-04  9.16e-01  
  8  +1.3138e-01  +1.3192e-01  5.44e-04  1.63e-05  2.93e-04  1.94e-06  6.49e-05  8.80e-01  
  9  +1.3123e-01  +1.3133e-01  9.67e-05  2.93e-06  5.16e-05  3.43e-07  1.25e-05  8.78e-01  
 10  +1.3120e-01  +1.3120e-01  1.23e-06  3.72e-08  6.54e-07  4.24e-09  1.61e-07  9.87e-01  
 11  +1.3120e-01  +1.3120e-01  1.23e-08  3.72e-10  6.55e-09  4.25e-11  1.61e-09  9.90e-01  
 12  +1.3120e-01  +1.3120e-01  1.23e-10  3.72e-12  6.55e-11  4.25e-13  1.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 800.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:19 PM: Optimal value: 1.312e-01
(CVXPY) Aug 30 12:17:19 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 30 12:17:19 PM: Solver (including time spent in interface) took 1.032e-03 seconds
FULL MODEL:
  Accruacy: 0.87
  Our objective: 0.7400000000000001

IF 
    (x3 = 1 AND x0 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.14000000000000004)
 OR (x4 = 1 AND x1 = 0 AND x2 = 0 AND x5 = 0)                       <-- (term's our objective: 0.17999999999999997)
 OR (x4 = 1 AND x0 = 0 AND x1 = 0 AND x7 = 0)                       <-- (term's our objective: 0.14)
 OR (x0 = 1 AND x6 = 1 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.059999999999999956)
 OR (x1 = 1 AND x3 = 1 AND x5 = 0 AND x7 = 0)                       <-- (term's our objective: 0.06000000000000005)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0)                       <-- (term's our objective: 0.06000000000000005)
 OR (x3 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.09999999999999998)
 OR (x5 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x7 = 0)            <-- (term's our objective: 0.040000000000000036)
 OR (x5 = 1 AND x0 = 0 AND x1 = 0 AND x4 = 0 AND x7 = 0)            <-- (term's our objective: 0.059999999999999956)
 OR (x3 = 1 AND x4 = 1 AND x7 = 1 AND x1 = 0 AND x5 = 0)            <-- (term's our objective: 0.07999999999999996)
 OR (x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.040000000000000036)
 OR (x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0) <-- (term's our objective: 0.020000000000000018)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.17999999999999997
    Its accruacy: 0.59
    Its hamming distance: 6
  Shortest hamming distance: 5
    Its our objective: 0.040000000000000036
  Highest accruacy: 0.59
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

