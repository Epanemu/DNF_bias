Command:
python test_script.py -s smallest_subclass -d 4 -n 100 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.060000000000000005
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.18
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:05 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:05 PM: Finished problem compilation (took 4.116e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9683e-01  +5.0603e+01  5.01e+01  8.58e-01  7.85e+00  1.00e+00  1.03e+00   ------   
  1  +6.0416e-01  +1.0107e+01  9.50e+00  2.96e-01  4.13e+00  4.09e-03  4.88e-01  6.67e-01  
  2  +5.3650e-01  +1.6929e+00  1.16e+00  7.38e-02  1.20e+00  9.36e-03  1.81e-01  8.59e-01  
  3  +4.9900e-01  +7.0375e-01  2.05e-01  1.58e-02  2.55e-01  4.20e-03  8.57e-02  9.90e-01  
  4  +4.9774e-01  +5.4568e-01  4.79e-02  3.32e-03  5.46e-02  1.75e-03  1.52e-02  8.41e-01  
  5  +4.8605e-01  +5.2900e-01  4.30e-02  9.25e-04  1.57e-02  4.79e-03  3.37e-03  8.50e-01  
  6  +4.8214e-01  +4.8930e-01  7.17e-03  1.71e-04  2.91e-03  4.69e-05  6.43e-04  9.23e-01  
  7  +4.8013e-01  +4.8023e-01  1.01e-04  2.33e-06  3.95e-05  5.20e-07  8.82e-06  9.87e-01  
  8  +4.8010e-01  +4.8010e-01  1.01e-06  2.33e-08  3.95e-07  5.20e-09  8.82e-08  9.90e-01  
  9  +4.8010e-01  +4.8010e-01  1.01e-08  2.33e-10  3.95e-09  5.20e-11  8.82e-10  9.90e-01  
 10  +4.8010e-01  +4.8010e-01  1.01e-10  2.33e-12  3.95e-11  5.20e-13  8.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 276.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:05 PM: Optimal value: 4.801e-01
(CVXPY) Aug 30 12:04:05 PM: Compilation took 4.116e-03 seconds
(CVXPY) Aug 30 12:04:05 PM: Solver (including time spent in interface) took 9.902e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:05 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:05 PM: Finished problem compilation (took 2.752e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 417
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9480e-01  +5.0921e+01  5.04e+01  8.63e-01  8.01e+00  1.00e+00  1.05e+00   ------   
  1  +5.9221e-01  +1.0316e+01  9.72e+00  3.11e-01  4.24e+00  4.04e-03  5.10e-01  6.56e-01  
  2  +5.2963e-01  +1.5543e+00  1.02e+00  6.56e-02  1.09e+00  1.06e-02  1.66e-01  9.31e-01  
  3  +5.0691e-01  +9.7577e-01  4.69e-01  2.70e-02  4.50e-01  8.46e-03  8.13e-02  6.23e-01  
  4  +4.9555e-01  +8.6296e-01  3.67e-01  1.49e-02  2.52e-01  7.64e-03  4.81e-02  4.69e-01  
  5  +4.7304e-01  +5.9655e-01  1.24e-01  4.33e-03  7.36e-02  1.15e-03  1.66e-02  8.17e-01  
  6  +4.6158e-01  +5.2559e-01  6.40e-02  1.79e-03  3.05e-02  6.05e-04  7.66e-03  5.93e-01  
  7  +4.5432e-01  +4.7333e-01  1.90e-02  5.41e-04  9.21e-03  5.82e-05  2.52e-03  9.90e-01  
  8  +4.5044e-01  +4.5147e-01  1.03e-03  2.87e-05  4.87e-04  2.74e-06  1.40e-04  9.47e-01  
  9  +4.5022e-01  +4.5030e-01  7.91e-05  2.15e-06  3.65e-05  2.27e-07  1.07e-05  9.32e-01  
 10  +4.5020e-01  +4.5020e-01  1.02e-06  2.77e-08  4.71e-07  2.96e-09  1.38e-07  9.89e-01  
 11  +4.5020e-01  +4.5020e-01  1.02e-08  2.77e-10  4.71e-09  2.97e-11  1.38e-09  9.90e-01  
 12  +4.5020e-01  +4.5020e-01  1.02e-10  2.78e-12  4.71e-11  2.97e-13  1.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 349.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:05 PM: Optimal value: 4.502e-01
(CVXPY) Aug 30 12:04:05 PM: Compilation took 2.752e-03 seconds
(CVXPY) Aug 30 12:04:05 PM: Solver (including time spent in interface) took 9.184e-04 seconds
Iteration: 2, Objective: 0.4502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:05 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:05 PM: Finished problem compilation (took 1.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 500
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9369e-01  +5.0870e+01  5.04e+01  8.69e-01  8.05e+00  1.00e+00  1.05e+00   ------   
  1  +5.8294e-01  +1.0457e+01  9.87e+00  3.27e-01  4.23e+00  4.01e-03  5.25e-01  6.46e-01  
  2  +5.2349e-01  +1.4396e+00  9.16e-01  5.76e-02  9.56e-01  1.17e-02  1.52e-01  9.90e-01  
  3  +5.1291e-01  +1.1984e+00  6.85e-01  3.46e-02  5.80e-01  1.13e-02  9.85e-02  3.81e-01  
  4  +4.9621e-01  +1.0383e+00  5.42e-01  2.00e-02  3.38e-01  9.17e-03  6.23e-02  5.25e-01  
  5  +4.6831e-01  +7.7218e-01  3.04e-01  7.96e-03  1.35e-01  6.19e-03  2.71e-02  5.98e-01  
  6  +4.4413e-01  +5.9749e-01  1.53e-01  3.83e-03  6.48e-02  2.24e-03  1.44e-02  5.53e-01  
  7  +4.2383e-01  +4.8056e-01  5.67e-02  1.35e-03  2.27e-02  6.56e-04  5.75e-03  6.55e-01  
  8  +4.1168e-01  +4.1573e-01  4.05e-03  9.56e-05  1.61e-03  1.97e-05  4.59e-04  9.49e-01  
  9  +4.1037e-01  +4.1056e-01  1.93e-04  4.45e-06  7.46e-05  6.26e-07  2.33e-05  9.90e-01  
 10  +4.1030e-01  +4.1030e-01  2.72e-06  6.22e-08  1.04e-06  8.50e-09  3.32e-07  9.87e-01  
 11  +4.1030e-01  +4.1030e-01  2.72e-08  6.21e-10  1.04e-08  8.49e-11  3.32e-09  9.90e-01  
 12  +4.1030e-01  +4.1030e-01  2.72e-10  6.21e-12  1.04e-10  8.51e-13  3.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 355.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:05 PM: Optimal value: 4.103e-01
(CVXPY) Aug 30 12:04:05 PM: Compilation took 1.998e-03 seconds
(CVXPY) Aug 30 12:04:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.4103
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:05 PM: Your problem has 78 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:05 PM: Finished problem compilation (took 2.727e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 78
  constraints   = 128
  nnz(P)        = 0
  nnz(A)        = 523
  cones (total) = 1
    : Nonnegative = 1,  numel = 128

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9359e-01  +5.0852e+01  5.04e+01  8.71e-01  8.04e+00  1.00e+00  1.05e+00   ------   
  1  +5.8087e-01  +1.0476e+01  9.90e+00  3.31e-01  4.22e+00  4.01e-03  5.26e-01  6.44e-01  
  2  +5.2244e-01  +1.4483e+00  9.26e-01  5.79e-02  9.58e-01  1.19e-02  1.53e-01  9.90e-01  
  3  +5.0958e-01  +1.1545e+00  6.45e-01  3.16e-02  5.28e-01  1.09e-02  9.10e-02  4.30e-01  
  4  +4.8642e-01  +9.3438e-01  4.48e-01  1.42e-02  2.40e-01  8.96e-03  4.53e-02  6.26e-01  
  5  +4.5988e-01  +7.4140e-01  2.82e-01  6.89e-03  1.17e-01  5.93e-03  2.40e-02  5.08e-01  
  6  +4.3624e-01  +5.6743e-01  1.31e-01  3.18e-03  5.36e-02  2.20e-03  1.23e-02  5.47e-01  
  7  +4.1446e-01  +4.2866e-01  1.42e-02  3.50e-04  5.86e-03  1.94e-05  1.54e-03  9.68e-01  
  8  +4.1095e-01  +4.1286e-01  1.91e-03  4.67e-05  7.80e-04  2.76e-06  2.13e-04  8.69e-01  
  9  +4.1058e-01  +4.1142e-01  8.44e-04  1.99e-05  3.32e-04  2.07e-06  9.68e-05  7.24e-01  
 10  +4.1032e-01  +4.1038e-01  5.77e-05  1.34e-06  2.24e-05  1.21e-07  6.95e-06  9.38e-01  
 11  +4.1030e-01  +4.1030e-01  1.04e-06  2.40e-08  4.02e-07  2.05e-09  1.29e-07  9.82e-01  
 12  +4.1030e-01  +4.1030e-01  1.04e-08  2.40e-10  4.01e-09  2.04e-11  1.29e-09  9.90e-01  
 13  +4.1030e-01  +4.1030e-01  1.04e-10  2.40e-12  4.01e-11  2.06e-13  1.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 410.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:05 PM: Optimal value: 4.103e-01
(CVXPY) Aug 30 12:04:05 PM: Compilation took 2.727e-03 seconds
(CVXPY) Aug 30 12:04:05 PM: Solver (including time spent in interface) took 1.038e-03 seconds
FULL MODEL:
  Accruacy: 0.59
  Our objective: 0.18000000000000005

IF 
    (x1 = 1 AND x2 = 0)                       <-- (term's our objective: 0.05999999999999997)
 OR (x0 = 1 AND x2 = 1 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.040000000000000036)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.05999999999999998)
 OR (x2 = 1 AND x3 = 1 AND x0 = 0 AND x1 = 0) <-- (term's our objective: 0.020000000000000052)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.05999999999999998
    Its accruacy: 0.53
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.05999999999999998
  Highest accruacy: 0.53
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

