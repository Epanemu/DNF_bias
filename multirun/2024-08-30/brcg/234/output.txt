Command:
python test_script.py -s smallest_subclass -d 6 -n 10000 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0196
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 6.

Computed total variation: 0.0638
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:19 PM: Your problem has 5013 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:19 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5013
  constraints   = 10013
  nnz(P)        = 0
  nnz(A)        = 45013
  cones (total) = 1
    : Nonnegative = 1,  numel = 10013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  9.90e+01  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +1.0289e+03  1.03e+03  3.86e-01  6.01e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4198e-01  +1.3641e+02  1.36e+02  1.50e-01  2.96e+01  1.15e-02  2.45e-01  8.24e-01  
  3  +5.1051e-01  +3.4141e+01  3.36e+01  1.19e-01  2.30e+01  2.91e-05  2.39e-01  1.20e-01  
  4  +5.0032e-01  +1.3417e+00  8.41e-01  5.70e-03  1.12e+00  4.36e-06  1.30e-01  9.90e-01  
  5  +5.0003e-01  +6.2942e-01  1.29e-01  8.63e-04  1.72e-01  4.01e-06  4.29e-02  8.54e-01  
  6  +5.0002e-01  +5.7762e-01  7.76e-02  5.18e-04  1.03e-01  2.44e-06  2.34e-02  5.57e-01  
  7  +5.0000e-01  +5.2414e-01  2.41e-02  1.60e-04  3.19e-02  1.85e-06  4.16e-03  8.52e-01  
  8  +4.9954e-01  +5.6096e-01  6.14e-02  5.93e-05  1.19e-02  9.22e-05  1.94e-04  9.82e-01  
  9  +4.9752e-01  +5.4316e-01  4.56e-02  1.15e-05  2.30e-03  3.18e-04  3.63e-05  8.18e-01  
 10  +4.9587e-01  +5.1669e-01  2.08e-02  5.92e-06  1.18e-03  2.76e-06  1.92e-05  7.86e-01  
 11  +4.9421e-01  +5.0682e-01  1.26e-02  3.37e-06  6.73e-04  1.33e-06  1.11e-05  5.28e-01  
 12  +4.9344e-01  +5.0132e-01  7.88e-03  1.94e-06  3.87e-04  3.07e-07  6.53e-06  9.90e-01  
 13  +4.9147e-01  +4.9265e-01  1.18e-03  2.63e-07  5.25e-05  4.43e-08  9.66e-07  8.84e-01  
 14  +4.9111e-01  +4.9141e-01  3.05e-04  6.17e-08  1.23e-05  1.48e-08  2.47e-07  9.90e-01  
 15  +4.9100e-01  +4.9100e-01  3.28e-06  6.54e-10  1.31e-07  1.60e-10  2.66e-09  9.89e-01  
 16  +4.9100e-01  +4.9100e-01  3.28e-08  6.54e-12  1.31e-09  1.60e-12  2.66e-11  9.90e-01  
 17  +4.9100e-01  +4.9100e-01  3.30e-10  6.58e-14  1.31e-11  2.03e-14  3.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.6458ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:19 PM: Optimal value: 4.910e-01
(CVXPY) Aug 30 12:10:19 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:10:19 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4910
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:19 PM: Your problem has 5023 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:19 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5023
  constraints   = 10023
  nnz(P)        = 0
  nnz(A)        = 49045
  cones (total) = 1
    : Nonnegative = 1,  numel = 10023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  9.99e+01  1.00e+00  1.00e+00   ------   
  1  +5.9309e-01  +1.0290e+03  1.03e+03  3.86e-01  6.06e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4191e-01  +1.3626e+02  1.36e+02  1.50e-01  2.98e+01  1.15e-02  2.44e-01  8.25e-01  
  3  +5.1048e-01  +3.4078e+01  3.36e+01  1.19e-01  2.32e+01  2.91e-05  2.39e-01  1.21e-01  
  4  +5.0031e-01  +1.3480e+00  8.48e-01  5.74e-03  1.14e+00  4.43e-06  1.29e-01  9.90e-01  
  5  +5.0005e-01  +6.7052e-01  1.70e-01  1.14e-03  2.28e-01  3.83e-06  5.07e-02  7.60e-01  
  6  +5.0004e-01  +6.3502e-01  1.35e-01  9.01e-04  1.81e-01  3.02e-06  3.80e-02  3.32e-01  
  7  +5.0003e-01  +6.0524e-01  1.05e-01  7.02e-04  1.41e-01  2.22e-06  2.53e-02  4.91e-01  
  8  +5.0003e-01  +5.8696e-01  8.69e-02  5.77e-04  1.16e-01  9.67e-07  1.21e-02  9.90e-01  
  9  +5.0000e-01  +5.3860e-01  3.86e-02  1.94e-04  3.90e-02  3.36e-06  1.01e-03  9.30e-01  
 10  +4.9955e-01  +5.3717e-01  3.76e-02  1.39e-05  2.81e-03  7.39e-05  4.38e-05  9.57e-01  
 11  +4.9866e-01  +5.3311e-01  3.45e-02  1.12e-05  2.27e-03  6.68e-05  3.56e-05  2.81e-01  
 12  +4.9791e-01  +5.3016e-01  3.23e-02  1.08e-05  2.17e-03  4.29e-05  3.39e-05  2.71e-01  
 13  +4.9731e-01  +5.2758e-01  3.03e-02  9.53e-06  1.92e-03  3.60e-05  3.00e-05  2.21e-01  
 14  +4.9687e-01  +5.2588e-01  2.90e-02  9.11e-06  1.84e-03  2.41e-05  2.85e-05  2.83e-01  
 15  +4.9447e-01  +5.1520e-01  2.07e-02  5.62e-06  1.13e-03  1.01e-06  1.73e-05  9.11e-01  
 16  +4.9196e-01  +5.0330e-01  1.13e-02  2.27e-06  4.58e-04  7.48e-07  6.76e-06  6.47e-01  
 17  +4.9125e-01  +5.0076e-01  9.51e-03  2.12e-06  4.29e-04  5.03e-07  6.75e-06  2.95e-02  
 18  +4.9107e-01  +5.0130e-01  1.02e-02  2.12e-06  4.27e-04  5.60e-07  6.41e-06  4.85e-01  
 19  +4.9015e-01  +4.9830e-01  8.16e-03  1.42e-06  2.87e-04  5.11e-07  4.25e-06  3.77e-01  
 20  +4.8923e-01  +4.9529e-01  6.06e-03  1.01e-06  2.03e-04  4.06e-07  3.01e-06  7.36e-01  
 21  +4.8721e-01  +4.8865e-01  1.44e-03  2.21e-07  4.46e-05  9.31e-08  6.70e-07  8.73e-01  
 22  +4.8662e-01  +4.8666e-01  4.19e-05  6.34e-09  1.28e-06  2.55e-09  1.94e-08  9.74e-01  
 23  +4.8660e-01  +4.8660e-01  4.20e-07  6.34e-11  1.28e-08  2.55e-11  1.95e-10  9.90e-01  
 24  +4.8660e-01  +4.8660e-01  4.20e-09  6.34e-13  1.28e-10  2.55e-13  1.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.4509ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:19 PM: Optimal value: 4.866e-01
(CVXPY) Aug 30 12:10:19 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:10:19 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 2, Objective: 0.4866
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:19 PM: Your problem has 5033 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:19 PM: Finished problem compilation (took 1.566e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5033
  constraints   = 10033
  nnz(P)        = 0
  nnz(A)        = 53661
  cones (total) = 1
    : Nonnegative = 1,  numel = 10033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.01e+02  1.00e+00  1.00e+00   ------   
  1  +5.9300e-01  +1.0294e+03  1.03e+03  3.86e-01  6.13e+01  3.92e-03  5.26e-01  6.26e-01  
  2  +5.4183e-01  +1.3611e+02  1.36e+02  1.50e-01  3.01e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1046e-01  +3.4051e+01  3.35e+01  1.19e-01  2.34e+01  2.91e-05  2.39e-01  1.21e-01  
  4  +5.0032e-01  +1.3507e+00  8.50e-01  5.77e-03  1.16e+00  4.43e-06  1.29e-01  9.90e-01  
  5  +5.0006e-01  +7.1258e-01  2.13e-01  1.42e-03  2.88e-01  3.95e-06  5.88e-02  6.80e-01  
  6  +5.0003e-01  +6.0833e-01  1.08e-01  7.24e-04  1.47e-01  2.31e-06  2.72e-02  6.45e-01  
  7  +5.0002e-01  +5.9694e-01  9.69e-02  6.45e-04  1.31e-01  2.74e-06  1.48e-02  5.44e-01  
  8  +4.9998e-01  +5.8351e-01  8.35e-02  4.22e-04  8.58e-02  9.38e-06  2.25e-03  9.90e-01  
  9  +4.9906e-01  +5.7489e-01  7.58e-02  3.61e-05  7.38e-03  1.52e-04  1.18e-04  9.48e-01  
 10  +4.9770e-01  +5.5715e-01  5.94e-02  2.73e-05  5.58e-03  9.62e-05  8.97e-05  3.51e-01  
 11  +4.9736e-01  +5.5172e-01  5.44e-02  2.14e-05  4.36e-03  6.58e-05  6.84e-05  4.86e-01  
 12  +4.9748e-01  +5.5113e-01  5.37e-02  1.96e-05  4.01e-03  4.93e-05  6.20e-05  3.31e-01  
 13  +4.9709e-01  +5.4719e-01  5.01e-02  1.62e-05  3.30e-03  3.42e-05  5.04e-05  4.41e-01  
 14  +4.9668e-01  +5.4350e-01  4.68e-02  1.34e-05  2.73e-03  1.78e-05  4.14e-05  5.59e-01  
 15  +4.9558e-01  +5.3825e-01  4.27e-02  1.04e-05  2.13e-03  1.39e-05  3.25e-05  4.01e-01  
 16  +4.9488e-01  +5.3498e-01  4.01e-02  1.03e-05  2.10e-03  1.07e-05  3.21e-05  1.27e-01  
 17  +4.9431e-01  +5.3160e-01  3.73e-02  9.46e-06  1.93e-03  5.37e-06  2.96e-05  4.68e-01  
 18  +4.8961e-01  +5.1281e-01  2.32e-02  4.49e-06  9.17e-04  3.68e-06  1.42e-05  5.74e-01  
 19  +4.8363e-01  +4.8757e-01  3.93e-03  7.12e-07  1.45e-04  2.15e-07  2.31e-06  9.30e-01  
 20  +4.8335e-01  +4.8657e-01  3.23e-03  5.66e-07  1.16e-04  1.82e-07  1.82e-06  2.36e-01  
 21  +4.8329e-01  +4.8630e-01  3.02e-03  5.49e-07  1.12e-04  1.61e-07  1.81e-06  5.69e-02  
 22  +4.8242e-01  +4.8318e-01  7.63e-04  1.33e-07  2.71e-05  4.69e-08  4.31e-07  7.99e-01  
 23  +4.8212e-01  +4.8216e-01  4.02e-05  6.99e-09  1.43e-06  2.48e-09  2.30e-08  9.84e-01  
 24  +4.8210e-01  +4.8210e-01  4.07e-07  7.07e-11  1.44e-08  2.49e-11  2.33e-10  9.90e-01  
 25  +4.8210e-01  +4.8210e-01  4.07e-09  7.07e-13  1.44e-10  2.49e-13  2.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.3488ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:19 PM: Optimal value: 4.821e-01
(CVXPY) Aug 30 12:10:19 PM: Compilation took 1.566e-02 seconds
(CVXPY) Aug 30 12:10:19 PM: Solver (including time spent in interface) took 9.372e-02 seconds
Iteration: 3, Objective: 0.4821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:19 PM: Your problem has 5043 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:19 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5043
  constraints   = 10043
  nnz(P)        = 0
  nnz(A)        = 56743
  cones (total) = 1
    : Nonnegative = 1,  numel = 10043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.02e+02  1.00e+00  1.00e+00   ------   
  1  +5.9297e-01  +1.0294e+03  1.03e+03  3.87e-01  6.16e+01  3.92e-03  5.26e-01  6.26e-01  
  2  +5.4179e-01  +1.3603e+02  1.35e+02  1.50e-01  3.02e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1045e-01  +3.4029e+01  3.35e+01  1.19e-01  2.35e+01  2.92e-05  2.39e-01  1.22e-01  
  4  +5.0032e-01  +1.3526e+00  8.52e-01  5.78e-03  1.17e+00  4.45e-06  1.29e-01  9.90e-01  
  5  +5.0007e-01  +7.2206e-01  2.22e-01  1.49e-03  3.03e-01  4.00e-06  5.96e-02  6.68e-01  
  6  +5.0005e-01  +6.7751e-01  1.77e-01  1.19e-03  2.42e-01  3.37e-06  4.24e-02  3.85e-01  
  7  +5.0005e-01  +6.6977e-01  1.70e-01  1.13e-03  2.31e-01  3.01e-06  3.15e-02  4.69e-01  
  8  +5.0003e-01  +6.1399e-01  1.14e-01  7.44e-04  1.52e-01  3.07e-06  9.88e-03  8.71e-01  
  9  +4.9967e-01  +5.7736e-01  7.77e-02  8.09e-05  1.66e-02  6.06e-05  2.74e-04  9.88e-01  
 10  +4.9820e-01  +5.6616e-01  6.80e-02  2.31e-05  4.75e-03  1.74e-04  7.57e-05  7.45e-01  
 11  +4.9808e-01  +5.6632e-01  6.82e-02  2.23e-05  4.58e-03  1.62e-04  7.23e-05  1.29e-01  
 12  +4.9761e-01  +5.6411e-01  6.65e-02  2.14e-05  4.41e-03  1.03e-04  6.87e-05  3.30e-01  
 13  +4.9747e-01  +5.6309e-01  6.56e-02  2.14e-05  4.39e-03  9.39e-05  6.83e-05  6.16e-02  
 14  +4.9675e-01  +5.5885e-01  6.21e-02  1.88e-05  3.87e-03  8.49e-05  6.02e-05  1.85e-01  
 15  +4.9561e-01  +5.5160e-01  5.60e-02  1.80e-05  3.69e-03  3.54e-05  5.76e-05  4.09e-01  
 16  +4.9463e-01  +5.4617e-01  5.15e-02  1.53e-05  3.13e-03  6.95e-06  4.88e-05  7.51e-01  
 17  +4.9393e-01  +5.4299e-01  4.91e-02  1.30e-05  2.67e-03  5.42e-06  4.15e-05  3.86e-01  
 18  +4.9345e-01  +5.4085e-01  4.74e-02  1.29e-05  2.64e-03  4.68e-06  4.11e-05  1.06e-01  
 19  +4.9249e-01  +5.3641e-01  4.39e-02  1.13e-05  2.32e-03  4.16e-06  3.61e-05  1.94e-01  
 20  +4.9220e-01  +5.3508e-01  4.29e-02  1.12e-05  2.29e-03  3.82e-06  3.61e-05  5.25e-02  
 21  +4.9035e-01  +5.2537e-01  3.50e-02  8.18e-06  1.68e-03  1.15e-06  2.63e-05  9.90e-01  
 22  +4.8887e-01  +5.1895e-01  3.01e-02  6.70e-06  1.38e-03  1.07e-06  2.16e-05  3.32e-01  
 23  +4.8522e-01  +5.0256e-01  1.73e-02  3.52e-06  7.22e-04  8.36e-07  1.15e-05  9.54e-01  
 24  +4.8307e-01  +4.9362e-01  1.06e-02  2.04e-06  4.18e-04  5.69e-07  6.69e-06  8.23e-01  
 25  +4.8271e-01  +4.9192e-01  9.21e-03  1.71e-06  3.51e-04  5.55e-07  5.59e-06  6.60e-01  
 26  +4.8258e-01  +4.9142e-01  8.84e-03  1.65e-06  3.39e-04  5.35e-07  5.42e-06  2.18e-01  
 27  +4.8075e-01  +4.8447e-01  3.71e-03  6.81e-07  1.40e-04  2.32e-07  2.26e-06  7.91e-01  
 28  +4.7969e-01  +4.8058e-01  8.89e-04  1.60e-07  3.28e-05  5.60e-08  5.40e-07  8.29e-01  
 29  +4.7939e-01  +4.7959e-01  2.07e-04  3.58e-08  7.34e-06  1.32e-08  1.24e-07  8.45e-01  
 30  +4.7933e-01  +4.7938e-01  5.84e-05  1.01e-08  2.06e-06  3.89e-09  3.51e-08  9.90e-01  
 31  +4.7930e-01  +4.7931e-01  9.49e-06  1.63e-09  3.35e-07  6.32e-10  5.70e-09  8.46e-01  
 32  +4.7930e-01  +4.7930e-01  4.16e-07  7.15e-11  1.47e-08  2.77e-11  2.50e-10  9.81e-01  
 33  +4.7930e-01  +4.7930e-01  4.17e-09  7.17e-13  1.47e-10  2.78e-13  2.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.502ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:19 PM: Optimal value: 4.793e-01
(CVXPY) Aug 30 12:10:19 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:10:19 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 4, Objective: 0.4793
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:19 PM: Your problem has 5053 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:19 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5053
  constraints   = 10053
  nnz(P)        = 0
  nnz(A)        = 59307
  cones (total) = 1
    : Nonnegative = 1,  numel = 10053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.02e+02  1.00e+00  1.00e+00   ------   
  1  +5.9299e-01  +1.0293e+03  1.03e+03  3.87e-01  6.18e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4176e-01  +1.3596e+02  1.35e+02  1.50e-01  3.02e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1044e-01  +3.3998e+01  3.35e+01  1.19e-01  2.35e+01  2.92e-05  2.39e-01  1.22e-01  
  4  +5.0032e-01  +1.3532e+00  8.53e-01  5.79e-03  1.18e+00  4.46e-06  1.29e-01  9.90e-01  
  5  +5.0007e-01  +7.3061e-01  2.31e-01  1.55e-03  3.16e-01  4.02e-06  6.07e-02  6.55e-01  
  6  +5.0006e-01  +6.9602e-01  1.96e-01  1.31e-03  2.69e-01  3.60e-06  4.63e-02  3.13e-01  
  7  +5.0005e-01  +6.7402e-01  1.74e-01  1.16e-03  2.38e-01  3.05e-06  2.98e-02  5.94e-01  
  8  +5.0002e-01  +6.0853e-01  1.09e-01  6.96e-04  1.43e-01  4.08e-06  7.49e-03  8.62e-01  
  9  +4.9944e-01  +5.9285e-01  9.34e-02  7.02e-05  1.45e-02  9.69e-05  2.30e-04  9.90e-01  
 10  +4.9797e-01  +5.7894e-01  8.10e-02  3.11e-05  6.41e-03  1.64e-04  1.00e-04  6.05e-01  
 11  +4.9660e-01  +5.6871e-01  7.21e-02  2.49e-05  5.12e-03  1.42e-04  7.94e-05  2.75e-01  
 12  +4.9653e-01  +5.6759e-01  7.11e-02  2.40e-05  4.95e-03  1.20e-04  7.61e-05  1.76e-01  
 13  +4.9590e-01  +5.6431e-01  6.84e-02  2.03e-05  4.18e-03  9.59e-05  6.41e-05  3.52e-01  
 14  +4.9579e-01  +5.6352e-01  6.77e-02  1.99e-05  4.10e-03  8.64e-05  6.31e-05  9.36e-02  
 15  +4.9433e-01  +5.5625e-01  6.19e-02  1.59e-05  3.28e-03  4.61e-05  5.05e-05  5.48e-01  
 16  +4.8901e-01  +5.3132e-01  4.23e-02  9.69e-06  2.00e-03  2.43e-05  3.16e-05  4.88e-01  
 17  +4.8454e-01  +5.1174e-01  2.72e-02  5.80e-06  1.20e-03  1.37e-05  1.94e-05  4.31e-01  
 18  +4.8329e-01  +5.0500e-01  2.17e-02  4.41e-06  9.08e-04  4.12e-06  1.49e-05  7.24e-01  
 19  +4.7778e-01  +4.8309e-01  5.31e-03  1.01e-06  2.08e-04  5.44e-07  3.57e-06  8.78e-01  
 20  +4.7749e-01  +4.8206e-01  4.57e-03  8.49e-07  1.75e-04  4.66e-07  3.00e-06  2.08e-01  
 21  +4.7749e-01  +4.8204e-01  4.56e-03  8.48e-07  1.75e-04  4.62e-07  3.00e-06  1.10e-02  
 22  +4.7729e-01  +4.8134e-01  4.05e-03  7.66e-07  1.58e-04  3.48e-07  2.79e-06  2.93e-01  
 23  +4.7721e-01  +4.8099e-01  3.78e-03  7.14e-07  1.47e-04  3.04e-07  2.59e-06  2.92e-01  
 24  +4.7658e-01  +4.7874e-01  2.15e-03  4.02e-07  8.27e-05  1.68e-07  1.46e-06  5.39e-01  
 25  +4.7619e-01  +4.7744e-01  1.25e-03  2.28e-07  4.70e-05  9.12e-08  8.31e-07  5.90e-01  
 26  +4.7576e-01  +4.7591e-01  1.51e-04  2.74e-08  5.63e-06  9.87e-09  1.01e-07  9.45e-01  
 27  +4.7571e-01  +4.7573e-01  1.87e-05  3.40e-09  7.00e-07  1.20e-09  1.26e-08  9.02e-01  
 28  +4.7570e-01  +4.7570e-01  1.87e-07  3.40e-11  7.00e-09  1.20e-11  1.26e-10  9.90e-01  
 29  +4.7570e-01  +4.7570e-01  1.87e-09  3.40e-13  7.00e-11  1.22e-13  1.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.6911ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:19 PM: Optimal value: 4.757e-01
(CVXPY) Aug 30 12:10:19 PM: Compilation took 3.126e-02 seconds
(CVXPY) Aug 30 12:10:19 PM: Solver (including time spent in interface) took 9.409e-02 seconds
Iteration: 5, Objective: 0.4757
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:20 PM: Your problem has 5061 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:20 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5061
  constraints   = 10061
  nnz(P)        = 0
  nnz(A)        = 61374
  cones (total) = 1
    : Nonnegative = 1,  numel = 10061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.02e+02  1.00e+00  1.00e+00   ------   
  1  +5.9294e-01  +1.0295e+03  1.03e+03  3.87e-01  6.20e+01  3.91e-03  5.26e-01  6.26e-01  
  2  +5.4172e-01  +1.3589e+02  1.35e+02  1.51e-01  3.03e+01  1.15e-02  2.45e-01  8.27e-01  
  3  +5.1043e-01  +3.3972e+01  3.35e+01  1.19e-01  2.36e+01  2.92e-05  2.39e-01  1.23e-01  
  4  +5.0032e-01  +1.3548e+00  8.54e-01  5.81e-03  1.18e+00  4.46e-06  1.29e-01  9.90e-01  
  5  +5.0008e-01  +7.5082e-01  2.51e-01  1.68e-03  3.45e-01  4.09e-06  6.38e-02  6.24e-01  
  6  +5.0006e-01  +7.0837e-01  2.08e-01  1.40e-03  2.87e-01  3.63e-06  4.54e-02  4.09e-01  
  7  +5.0006e-01  +6.9731e-01  1.97e-01  1.32e-03  2.71e-01  3.53e-06  3.32e-02  4.14e-01  
  8  +5.0003e-01  +6.5347e-01  1.53e-01  1.00e-03  2.05e-01  4.77e-06  1.24e-02  7.10e-01  
  9  +4.9982e-01  +6.2008e-01  1.20e-01  2.48e-04  5.11e-02  3.80e-05  9.04e-04  9.90e-01  
 10  +4.9845e-01  +6.0606e-01  1.08e-01  4.46e-05  9.22e-03  1.96e-04  1.49e-04  8.39e-01  
 11  +4.9763e-01  +5.9555e-01  9.79e-02  4.08e-05  8.43e-03  1.47e-04  1.35e-04  2.03e-01  
 12  +4.9682e-01  +5.8328e-01  8.65e-02  3.59e-05  7.42e-03  8.05e-05  1.19e-04  3.76e-01  
 13  +4.9661e-01  +5.8076e-01  8.41e-02  3.37e-05  6.96e-03  7.10e-05  1.11e-04  1.64e-01  
 14  +4.9597e-01  +5.7457e-01  7.86e-02  2.79e-05  5.76e-03  5.19e-05  9.07e-05  4.03e-01  
 15  +4.9601e-01  +5.7345e-01  7.74e-02  2.70e-05  5.58e-03  3.80e-05  8.71e-05  2.66e-01  
 16  +4.9523e-01  +5.6887e-01  7.36e-02  2.26e-05  4.66e-03  3.48e-05  7.27e-05  2.67e-01  
 17  +4.9490e-01  +5.6604e-01  7.11e-02  2.06e-05  4.26e-03  2.38e-05  6.62e-05  3.53e-01  
 18  +4.9426e-01  +5.6298e-01  6.87e-02  2.02e-05  4.18e-03  1.94e-05  6.53e-05  1.33e-01  
 19  +4.9077e-01  +5.4704e-01  5.63e-02  1.36e-05  2.81e-03  1.62e-05  4.44e-05  3.91e-01  
 20  +4.8821e-01  +5.3514e-01  4.69e-02  1.09e-05  2.24e-03  1.22e-05  3.60e-05  2.47e-01  
 21  +4.8515e-01  +5.1878e-01  3.36e-02  7.49e-06  1.55e-03  2.44e-06  2.53e-05  7.71e-01  
 22  +4.8090e-01  +5.0117e-01  2.03e-02  4.24e-06  8.74e-04  1.33e-06  1.47e-05  4.94e-01  
 23  +4.7667e-01  +4.8371e-01  7.05e-03  1.34e-06  2.76e-04  3.81e-07  4.71e-06  9.90e-01  
 24  +4.7648e-01  +4.8314e-01  6.66e-03  1.23e-06  2.55e-04  3.69e-07  4.32e-06  1.35e-01  
 25  +4.7606e-01  +4.8164e-01  5.58e-03  1.01e-06  2.09e-04  3.24e-07  3.55e-06  4.19e-01  
 26  +4.7604e-01  +4.8159e-01  5.55e-03  1.01e-06  2.08e-04  3.21e-07  3.54e-06  2.99e-02  
 27  +4.7502e-01  +4.7806e-01  3.04e-03  5.61e-07  1.16e-04  1.70e-07  2.02e-06  9.73e-01  
 28  +4.7437e-01  +4.7569e-01  1.32e-03  2.41e-07  4.97e-05  7.60e-08  8.71e-07  6.86e-01  
 29  +4.7416e-01  +4.7505e-01  8.94e-04  1.59e-07  3.28e-05  5.35e-08  5.70e-07  5.51e-01  
 30  +4.7381e-01  +4.7385e-01  3.59e-05  6.36e-09  1.31e-06  2.13e-09  2.29e-08  9.61e-01  
 31  +4.7380e-01  +4.7380e-01  3.62e-07  6.41e-11  1.32e-08  2.15e-11  2.31e-10  9.90e-01  
 32  +4.7380e-01  +4.7380e-01  3.62e-09  6.42e-13  1.32e-10  2.20e-13  2.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 107.2408ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:20 PM: Optimal value: 4.738e-01
(CVXPY) Aug 30 12:10:20 PM: Compilation took 1.562e-02 seconds
(CVXPY) Aug 30 12:10:20 PM: Solver (including time spent in interface) took 1.093e-01 seconds
Iteration: 6, Objective: 0.4738
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:20 PM: Your problem has 5066 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:20 PM: Finished problem compilation (took 3.786e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5066
  constraints   = 10066
  nnz(P)        = 0
  nnz(A)        = 61998
  cones (total) = 1
    : Nonnegative = 1,  numel = 10066

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.02e+02  1.00e+00  1.00e+00   ------   
  1  +5.9289e-01  +1.0298e+03  1.03e+03  3.87e-01  6.20e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4168e-01  +1.3584e+02  1.35e+02  1.51e-01  3.03e+01  1.16e-02  2.45e-01  8.27e-01  
  3  +5.1042e-01  +3.3961e+01  3.35e+01  1.19e-01  2.36e+01  2.92e-05  2.39e-01  1.23e-01  
  4  +5.0032e-01  +1.3562e+00  8.56e-01  5.82e-03  1.18e+00  4.46e-06  1.29e-01  9.90e-01  
  5  +5.0007e-01  +7.3727e-01  2.37e-01  1.59e-03  3.27e-01  4.14e-06  6.10e-02  6.51e-01  
  6  +5.0006e-01  +7.1083e-01  2.11e-01  1.41e-03  2.90e-01  3.90e-06  4.54e-02  3.76e-01  
  7  +5.0005e-01  +6.8839e-01  1.88e-01  1.26e-03  2.58e-01  4.02e-06  2.72e-02  5.49e-01  
  8  +5.0000e-01  +6.3796e-01  1.38e-01  7.63e-04  1.57e-01  1.02e-05  4.79e-03  9.19e-01  
  9  +4.9899e-01  +6.2800e-01  1.29e-01  7.24e-05  1.50e-02  1.70e-04  2.50e-04  9.50e-01  
 10  +4.9760e-01  +6.0523e-01  1.08e-01  5.56e-05  1.15e-02  1.29e-04  1.93e-04  3.18e-01  
 11  +4.9697e-01  +5.9604e-01  9.91e-02  4.67e-05  9.65e-03  1.09e-04  1.59e-04  2.83e-01  
 12  +4.9689e-01  +5.9434e-01  9.75e-02  4.64e-05  9.59e-03  1.02e-04  1.58e-04  3.58e-02  
 13  +4.9657e-01  +5.8623e-01  8.97e-02  3.92e-05  8.10e-03  6.41e-05  1.31e-04  4.42e-01  
 14  +4.9644e-01  +5.8511e-01  8.87e-02  3.91e-05  8.08e-03  6.09e-05  1.31e-04  2.56e-02  
 15  +4.9581e-01  +5.7950e-01  8.37e-02  3.26e-05  6.74e-03  5.44e-05  1.07e-04  2.92e-01  
 16  +4.9549e-01  +5.7555e-01  8.01e-02  2.75e-05  5.67e-03  3.90e-05  8.91e-05  4.26e-01  
 17  +4.9482e-01  +5.7139e-01  7.66e-02  2.26e-05  4.68e-03  3.47e-05  7.32e-05  3.17e-01  
 18  +4.9431e-01  +5.6864e-01  7.43e-02  2.24e-05  4.63e-03  3.00e-05  7.27e-05  8.18e-02  
 19  +4.8920e-01  +5.4391e-01  5.47e-02  1.24e-05  2.56e-03  2.26e-05  4.08e-05  5.42e-01  
 20  +4.8722e-01  +5.3320e-01  4.60e-02  1.02e-05  2.11e-03  1.51e-05  3.40e-05  3.10e-01  
 21  +4.8593e-01  +5.2687e-01  4.09e-02  8.89e-06  1.84e-03  1.21e-05  2.97e-05  2.13e-01  
 22  +4.8525e-01  +5.2083e-01  3.56e-02  7.69e-06  1.59e-03  4.02e-06  2.59e-05  6.70e-01  
 23  +4.8093e-01  +5.0293e-01  2.20e-02  4.48e-06  9.25e-04  2.14e-06  1.55e-05  5.05e-01  
 24  +4.7986e-01  +4.9846e-01  1.86e-02  3.66e-06  7.55e-04  1.62e-06  1.27e-05  3.88e-01  
 25  +4.7931e-01  +4.9601e-01  1.67e-02  3.24e-06  6.69e-04  1.29e-06  1.12e-05  4.01e-01  
 26  +4.7489e-01  +4.7925e-01  4.35e-03  8.04e-07  1.66e-04  2.55e-07  2.88e-06  9.37e-01  
 27  +4.7484e-01  +4.7909e-01  4.25e-03  7.72e-07  1.59e-04  2.53e-07  2.76e-06  7.47e-02  
 28  +4.7484e-01  +4.7908e-01  4.24e-03  7.71e-07  1.59e-04  2.52e-07  2.75e-06  1.04e-02  
 29  +4.7470e-01  +4.7849e-01  3.79e-03  7.05e-07  1.45e-04  2.15e-07  2.58e-06  2.87e-01  
 30  +4.7450e-01  +4.7765e-01  3.15e-03  5.81e-07  1.20e-04  1.88e-07  2.10e-06  7.00e-01  
 31  +4.7415e-01  +4.7649e-01  2.34e-03  4.22e-07  8.71e-05  1.44e-07  1.52e-06  3.75e-01  
 32  +4.7326e-01  +4.7341e-01  1.50e-04  2.70e-08  5.57e-06  9.23e-09  9.82e-08  9.90e-01  
 33  +4.7320e-01  +4.7320e-01  1.50e-06  2.71e-10  5.58e-08  9.24e-11  9.85e-10  9.90e-01  
 34  +4.7320e-01  +4.7320e-01  1.51e-08  2.72e-12  5.60e-10  9.28e-13  9.88e-12  9.90e-01  
 35  +4.7320e-01  +4.7320e-01  1.56e-10  2.81e-14  5.79e-12  9.68e-15  1.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.7515ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:20 PM: Optimal value: 4.732e-01
(CVXPY) Aug 30 12:10:20 PM: Compilation took 3.786e-02 seconds
(CVXPY) Aug 30 12:10:20 PM: Solver (including time spent in interface) took 1.177e-01 seconds
Iteration: 7, Objective: 0.4732
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:10:20 PM: Your problem has 5068 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:10:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:10:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:10:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:10:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:10:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:10:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:10:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:10:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:10:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:10:20 PM: Finished problem compilation (took 1.565e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5068
  constraints   = 10068
  nnz(P)        = 0
  nnz(A)        = 62477
  cones (total) = 1
    : Nonnegative = 1,  numel = 10068

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.02e+02  1.00e+00  1.00e+00   ------   
  1  +5.9291e-01  +1.0298e+03  1.03e+03  3.87e-01  6.20e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4167e-01  +1.3583e+02  1.35e+02  1.51e-01  3.03e+01  1.16e-02  2.45e-01  8.27e-01  
  3  +5.1042e-01  +3.3956e+01  3.34e+01  1.19e-01  2.36e+01  2.92e-05  2.39e-01  1.23e-01  
  4  +5.0032e-01  +1.3561e+00  8.56e-01  5.82e-03  1.19e+00  4.46e-06  1.29e-01  9.90e-01  
  5  +5.0007e-01  +7.4282e-01  2.43e-01  1.63e-03  3.34e-01  4.14e-06  6.19e-02  6.42e-01  
  6  +5.0006e-01  +6.9054e-01  1.90e-01  1.28e-03  2.62e-01  3.68e-06  3.53e-02  6.40e-01  
  7  +5.0003e-01  +6.6144e-01  1.61e-01  1.02e-03  2.10e-01  6.27e-06  9.95e-03  8.91e-01  
  8  +4.9916e-01  +6.3775e-01  1.39e-01  8.79e-05  1.82e-02  1.50e-04  3.05e-04  9.76e-01  
  9  +4.9748e-01  +6.0966e-01  1.12e-01  5.38e-05  1.11e-02  1.40e-04  1.86e-04  4.77e-01  
 10  +4.9697e-01  +5.9905e-01  1.02e-01  4.64e-05  9.60e-03  9.62e-05  1.58e-04  3.54e-01  
 11  +4.9693e-01  +5.9577e-01  9.88e-02  4.56e-05  9.43e-03  7.48e-05  1.54e-04  1.69e-01  
 12  +4.9574e-01  +5.8201e-01  8.63e-02  3.45e-05  7.14e-03  4.67e-05  1.15e-04  5.08e-01  
 13  +4.9526e-01  +5.7881e-01  8.36e-02  2.96e-05  6.12e-03  4.32e-05  9.79e-05  2.60e-01  
 14  +4.9528e-01  +5.7814e-01  8.29e-02  2.92e-05  6.03e-03  3.62e-05  9.63e-05  1.51e-01  
 15  +4.9378e-01  +5.6941e-01  7.56e-02  2.12e-05  4.39e-03  2.55e-05  6.99e-05  5.47e-01  
 16  +4.9320e-01  +5.6652e-01  7.33e-02  2.08e-05  4.31e-03  2.17e-05  6.90e-05  1.00e-01  
 17  +4.9167e-01  +5.5894e-01  6.73e-02  1.81e-05  3.74e-03  1.94e-05  6.02e-05  1.62e-01  
 18  +4.9160e-01  +5.5797e-01  6.64e-02  1.79e-05  3.70e-03  1.70e-05  5.96e-05  1.05e-01  
 19  +4.9041e-01  +5.5190e-01  6.15e-02  1.61e-05  3.32e-03  1.40e-05  5.40e-05  1.88e-01  
 20  +4.8804e-01  +5.3860e-01  5.06e-02  1.26e-05  2.60e-03  5.22e-06  4.29e-05  6.09e-01  
 21  +4.8398e-01  +5.2013e-01  3.61e-02  8.25e-06  1.70e-03  2.75e-06  2.87e-05  5.54e-01  
 22  +4.8317e-01  +5.1502e-01  3.18e-02  7.02e-06  1.45e-03  1.69e-06  2.46e-05  7.00e-01  
 23  +4.7838e-01  +4.9532e-01  1.69e-02  3.49e-06  7.20e-04  8.44e-07  1.26e-05  5.76e-01  
 24  +4.7809e-01  +4.9414e-01  1.60e-02  3.25e-06  6.71e-04  8.10e-07  1.17e-05  2.26e-01  
 25  +4.7620e-01  +4.8655e-01  1.04e-02  2.04e-06  4.20e-04  5.31e-07  7.45e-06  4.90e-01  
 26  +4.7608e-01  +4.8595e-01  9.86e-03  1.93e-06  3.99e-04  5.18e-07  7.05e-06  3.04e-01  
 27  +4.7412e-01  +4.7843e-01  4.31e-03  8.14e-07  1.68e-04  2.36e-07  3.02e-06  6.81e-01  
 28  +4.7403e-01  +4.7805e-01  4.03e-03  7.80e-07  1.61e-04  2.09e-07  2.98e-06  1.29e-01  
 29  +4.7387e-01  +4.7738e-01  3.51e-03  6.76e-07  1.40e-04  1.90e-07  2.55e-06  4.84e-01  
 30  +4.7338e-01  +4.7565e-01  2.27e-03  4.25e-07  8.78e-05  1.29e-07  1.59e-06  5.19e-01  
 31  +4.7262e-01  +4.7293e-01  3.04e-04  5.69e-08  1.17e-05  1.74e-08  2.15e-07  9.90e-01  
 32  +4.7250e-01  +4.7250e-01  3.12e-06  5.83e-10  1.20e-07  1.78e-10  2.21e-09  9.90e-01  
 33  +4.7250e-01  +4.7250e-01  3.12e-08  5.84e-12  1.21e-09  1.78e-12  2.21e-11  9.90e-01  
 34  +4.7250e-01  +4.7250e-01  3.19e-10  5.98e-14  1.23e-11  1.84e-14  2.29e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 116.9111ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:10:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:10:20 PM: Optimal value: 4.725e-01
(CVXPY) Aug 30 12:10:20 PM: Compilation took 1.565e-02 seconds
(CVXPY) Aug 30 12:10:20 PM: Solver (including time spent in interface) took 1.250e-01 seconds
FULL MODEL:
  Accruacy: 0.5169
  Our objective: 0.033800000000000024

IF 
    (x2 = 1 AND x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.007999999999999952)
 OR (x5 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0)            <-- (term's our objective: 0.006200000000000053)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0196)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.0196
    Its accruacy: 0.5098
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.0196
  Highest accruacy: 0.5098
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

