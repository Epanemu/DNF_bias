Command:
python test_script.py -s smallest_subclass -d 6 -n 10 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 6.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:02 PM: Your problem has 18 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:02 PM: Finished problem compilation (took 1.681e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 18
  constraints   = 23
  nnz(P)        = 0
  nnz(A)        = 58
  cones (total) = 1
    : Nonnegative = 1,  numel = 23

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.1717e-01  +6.1720e+00  5.75e+00  7.46e-01  2.56e+00  1.00e+00  1.33e+00   ------   
  1  +3.8050e-01  +1.0898e+00  7.09e-01  2.26e-01  9.54e-01  3.74e-03  5.26e-01  7.82e-01  
  2  +1.8707e-01  +3.3189e-01  1.45e-01  4.19e-02  1.89e-01  5.93e-03  1.37e-01  8.10e-01  
  3  +1.4941e-01  +2.6143e-01  1.12e-01  2.13e-02  1.13e-01  6.79e-03  8.20e-02  6.16e-01  
  4  +1.0245e-01  +1.0782e-01  5.37e-03  9.76e-04  5.25e-03  3.53e-04  4.06e-03  9.54e-01  
  5  +1.0024e-01  +1.0032e-01  8.66e-05  1.64e-05  8.77e-05  3.49e-06  6.86e-05  9.83e-01  
  6  +1.0020e-01  +1.0020e-01  3.01e-06  6.57e-07  3.30e-06  9.43e-08  2.83e-06  9.61e-01  
  7  +1.0020e-01  +1.0020e-01  3.03e-08  6.64e-09  3.33e-08  9.51e-10  2.87e-08  9.90e-01  
  8  +1.0020e-01  +1.0020e-01  3.03e-10  6.64e-11  3.33e-10  9.51e-12  2.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:02 PM: Optimal value: 1.002e-01
(CVXPY) Aug 30 12:08:02 PM: Compilation took 1.681e-02 seconds
(CVXPY) Aug 30 12:08:02 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:02 PM: Your problem has 28 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 28
  constraints   = 33
  nnz(P)        = 0
  nnz(A)        = 86
  cones (total) = 1
    : Nonnegative = 1,  numel = 33

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.4848e-01  +6.3009e+00  5.95e+00  7.84e-01  2.63e+00  1.00e+00  1.33e+00   ------   
  1  +1.9702e-01  +1.0123e+00  8.15e-01  2.61e-01  9.70e-01  4.16e-03  5.23e-01  7.42e-01  
  2  +4.8020e-02  +2.4987e-01  2.02e-01  6.14e-02  2.69e-01  9.05e-03  1.75e-01  7.63e-01  
  3  +1.0970e-02  +7.8652e-02  6.77e-02  1.74e-02  8.58e-02  3.87e-03  5.75e-02  7.57e-01  
  4  +5.0050e-04  +1.9134e-03  1.41e-03  3.73e-04  1.83e-03  7.85e-05  1.28e-03  9.78e-01  
  5  +2.6963e-04  +4.3183e-04  1.62e-04  4.77e-05  2.21e-04  5.81e-06  1.67e-04  8.72e-01  
  6  +2.0857e-04  +2.3209e-04  2.35e-05  7.58e-06  3.17e-05  1.25e-06  3.31e-05  9.74e-01  
  7  +2.0019e-04  +2.0069e-04  5.05e-07  1.65e-07  6.86e-07  2.48e-08  7.37e-07  9.79e-01  
  8  +2.0000e-04  +2.0001e-04  5.04e-09  1.64e-09  6.85e-09  2.48e-10  7.37e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:02 PM: Optimal value: 2.000e-04
(CVXPY) Aug 30 12:08:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:02 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:02 PM: Your problem has 29 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 29
  constraints   = 34
  nnz(P)        = 0
  nnz(A)        = 89
  cones (total) = 1
    : Nonnegative = 1,  numel = 34

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3481e-01  +6.2818e+00  5.95e+00  7.88e-01  2.64e+00  1.00e+00  1.33e+00   ------   
  1  +1.4769e-01  +9.9922e-01  8.52e-01  2.69e-01  9.84e-01  4.30e-03  5.31e-01  7.24e-01  
  2  +7.1905e-03  +1.6759e-01  1.60e-01  5.44e-02  2.22e-01  7.51e-03  1.51e-01  7.96e-01  
  3  +8.8817e-04  +6.7446e-03  5.86e-03  2.04e-03  8.46e-03  4.35e-04  6.36e-03  9.62e-01  
  4  +2.5736e-04  +4.0460e-04  1.47e-04  5.41e-05  2.22e-04  6.57e-06  1.70e-04  9.73e-01  
  5  +2.1372e-04  +2.5129e-04  3.76e-05  1.34e-05  5.43e-05  1.84e-06  5.32e-05  8.84e-01  
  6  +2.0053e-04  +2.0155e-04  1.01e-06  3.46e-07  1.43e-06  4.15e-08  1.52e-06  9.74e-01  
  7  +2.0001e-04  +2.0002e-04  1.01e-08  3.45e-09  1.42e-08  4.15e-10  1.52e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  1.01e-10  3.46e-11  1.43e-10  4.15e-12  1.52e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 107.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:02 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:02 PM: Optimal value: 2.000e-04
(CVXPY) Aug 30 12:08:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:02 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x4 = 1)                       <-- (term's our objective: 0.6)
 OR (x3 = 1 AND x0 = 0 AND x5 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 7
  Shortest hamming distance: 5
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

