Command:
python test_script.py -s smallest_subclass -d 6 -n 50 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 6.

Computed total variation: 0.8
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:14 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 238
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9375e-01  +2.6132e+01  2.56e+01  8.24e-01  6.12e+00  1.00e+00  1.08e+00   ------   
  1  +5.7649e-01  +5.5299e+00  4.95e+00  3.21e-01  3.35e+00  3.87e-03  5.60e-01  6.37e-01  
  2  +4.9155e-01  +1.0972e+00  6.06e-01  6.29e-02  7.88e-01  1.47e-02  1.74e-01  9.65e-01  
  3  +4.3428e-01  +7.8580e-01  3.52e-01  2.13e-02  2.76e-01  1.14e-02  6.92e-02  6.70e-01  
  4  +3.8259e-01  +5.4542e-01  1.63e-01  6.97e-03  9.00e-02  4.83e-03  2.82e-02  6.92e-01  
  5  +3.4535e-01  +3.6097e-01  1.56e-02  6.71e-04  8.56e-03  4.07e-05  3.30e-03  9.49e-01  
  6  +3.4016e-01  +3.4033e-01  1.75e-04  7.47e-06  9.51e-05  5.32e-07  3.78e-05  9.90e-01  
  7  +3.4010e-01  +3.4010e-01  1.75e-06  7.47e-08  9.51e-07  5.32e-09  3.78e-07  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  1.75e-08  7.47e-10  9.51e-09  5.32e-11  3.78e-09  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  1.75e-10  7.47e-12  9.51e-11  5.32e-13  3.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 207.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:14 PM: Optimal value: 3.401e-01
(CVXPY) Aug 30 12:08:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:14 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:14 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 293
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8184e-01  +2.6836e+01  2.64e+01  8.37e-01  6.08e+00  1.00e+00  1.11e+00   ------   
  1  +5.0689e-01  +5.6129e+00  5.11e+00  3.25e-01  3.19e+00  3.97e-03  5.63e-01  6.39e-01  
  2  +3.9982e-01  +1.3788e+00  9.79e-01  7.65e-02  9.34e-01  1.57e-02  1.98e-01  8.49e-01  
  3  +2.8963e-01  +7.1194e-01  4.22e-01  2.34e-02  2.84e-01  7.03e-03  7.81e-02  7.27e-01  
  4  +2.4250e-01  +3.6513e-01  1.23e-01  6.51e-03  7.75e-02  1.71e-03  2.74e-02  6.77e-01  
  5  +2.2224e-01  +2.3172e-01  9.48e-03  5.09e-04  6.00e-03  1.07e-04  2.52e-03  9.34e-01  
  6  +2.2035e-01  +2.2053e-01  1.81e-04  9.83e-06  1.16e-04  1.09e-06  5.03e-05  9.80e-01  
  7  +2.2030e-01  +2.2031e-01  6.99e-06  3.88e-07  4.52e-06  4.06e-08  2.18e-06  9.60e-01  
  8  +2.2030e-01  +2.2030e-01  6.99e-08  3.88e-09  4.52e-08  4.05e-10  2.19e-08  9.90e-01  
  9  +2.2030e-01  +2.2030e-01  6.99e-10  3.88e-11  4.52e-10  4.06e-12  2.19e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 218.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:14 PM: Optimal value: 2.203e-01
(CVXPY) Aug 30 12:08:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:14 PM: Solver (including time spent in interface) took 1.565e-02 seconds
Iteration: 2, Objective: 0.2203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:14 PM: Your problem has 58 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 58
  constraints   = 83
  nnz(P)        = 0
  nnz(A)        = 339
  cones (total) = 1
    : Nonnegative = 1,  numel = 83

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7104e-01  +2.6827e+01  2.64e+01  8.49e-01  5.95e+00  1.00e+00  1.12e+00   ------   
  1  +4.4706e-01  +5.5584e+00  5.11e+00  3.30e-01  3.00e+00  4.04e-03  5.60e-01  6.41e-01  
  2  +2.9405e-01  +1.2073e+00  9.13e-01  5.81e-02  6.77e-01  1.58e-02  1.55e-01  8.91e-01  
  3  +2.0733e-01  +4.3018e-01  2.23e-01  1.34e-02  1.54e-01  3.67e-03  4.11e-02  8.25e-01  
  4  +1.7800e-01  +2.6610e-01  8.81e-02  4.84e-03  5.65e-02  1.49e-03  1.60e-02  6.37e-01  
  5  +1.6159e-01  +1.6646e-01  4.87e-03  2.74e-04  3.16e-03  5.84e-05  9.60e-04  9.62e-01  
  6  +1.6059e-01  +1.6111e-01  5.24e-04  3.00e-05  3.38e-04  4.21e-06  1.13e-04  8.84e-01  
  7  +1.6043e-01  +1.6053e-01  9.66e-05  5.16e-06  5.80e-05  7.02e-07  2.59e-05  8.50e-01  
  8  +1.6040e-01  +1.6040e-01  1.51e-06  8.05e-08  9.04e-07  9.20e-09  4.30e-07  9.86e-01  
  9  +1.6040e-01  +1.6040e-01  1.51e-08  8.04e-10  9.03e-09  9.19e-11  4.31e-09  9.90e-01  
 10  +1.6040e-01  +1.6040e-01  1.51e-10  8.04e-12  9.03e-11  9.20e-13  4.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 259µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:14 PM: Optimal value: 1.604e-01
(CVXPY) Aug 30 12:08:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:14 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:14 PM: Your problem has 67 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 92
  nnz(P)        = 0
  nnz(A)        = 395
  cones (total) = 1
    : Nonnegative = 1,  numel = 92

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6118e-01  +2.7272e+01  2.68e+01  8.56e-01  6.01e+00  1.00e+00  1.14e+00   ------   
  1  +3.9775e-01  +5.9193e+00  5.52e+00  3.55e-01  3.13e+00  4.11e-03  5.94e-01  6.10e-01  
  2  +2.2795e-01  +1.3391e+00  1.11e+00  7.20e-02  8.12e-01  1.91e-02  1.91e-01  8.70e-01  
  3  +1.7346e-01  +5.2411e-01  3.51e-01  2.27e-02  2.56e-01  6.36e-03  7.00e-02  6.73e-01  
  4  +1.4095e-01  +2.5351e-01  1.13e-01  7.16e-03  8.02e-02  2.00e-03  2.46e-02  6.98e-01  
  5  +1.2470e-01  +1.4929e-01  2.46e-02  1.51e-03  1.70e-02  4.20e-04  5.47e-03  8.13e-01  
  6  +1.2073e-01  +1.2163e-01  9.04e-04  5.61e-05  6.29e-04  1.03e-05  2.10e-04  9.64e-01  
  7  +1.2053e-01  +1.2060e-01  7.84e-05  4.86e-06  5.38e-05  2.76e-07  2.37e-05  9.40e-01  
  8  +1.2050e-01  +1.2050e-01  1.21e-06  7.51e-08  8.30e-07  4.27e-09  3.89e-07  9.84e-01  
  9  +1.2050e-01  +1.2050e-01  1.21e-08  7.51e-10  8.30e-09  4.27e-11  3.90e-09  9.90e-01  
 10  +1.2050e-01  +1.2050e-01  1.21e-10  7.51e-12  8.30e-11  4.27e-13  3.90e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 319.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:14 PM: Optimal value: 1.205e-01
(CVXPY) Aug 30 12:08:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:14 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:08:14 PM: Your problem has 77 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:08:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:08:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:08:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:08:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:08:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:08:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:08:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:08:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:08:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:08:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 102
  nnz(P)        = 0
  nnz(A)        = 422
  cones (total) = 1
    : Nonnegative = 1,  numel = 102

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5878e-01  +2.7260e+01  2.68e+01  8.62e-01  5.80e+00  1.00e+00  1.14e+00   ------   
  1  +3.7688e-01  +6.1539e+00  5.78e+00  3.75e-01  3.12e+00  4.14e-03  6.13e-01  5.85e-01  
  2  +1.9573e-01  +1.5520e+00  1.36e+00  8.72e-02  9.23e-01  2.25e-02  2.24e-01  8.41e-01  
  3  +1.5105e-01  +4.1570e-01  2.65e-01  1.78e-02  1.91e-01  5.39e-03  5.61e-02  7.93e-01  
  4  +1.1746e-01  +2.0037e-01  8.29e-02  5.18e-03  5.61e-02  1.70e-03  1.79e-02  7.83e-01  
  5  +1.0257e-01  +1.1057e-01  8.00e-03  4.89e-04  5.35e-03  4.47e-05  1.77e-03  9.76e-01  
  6  +1.0091e-01  +1.0167e-01  7.60e-04  4.71e-05  5.09e-04  3.10e-06  1.78e-04  9.00e-01  
  7  +1.0076e-01  +1.0099e-01  2.26e-04  1.43e-05  1.51e-04  1.28e-06  6.16e-05  8.12e-01  
  8  +1.0070e-01  +1.0071e-01  9.47e-06  6.06e-07  6.38e-06  5.07e-08  2.74e-06  9.76e-01  
  9  +1.0070e-01  +1.0070e-01  9.54e-08  6.11e-09  6.43e-08  5.08e-10  2.77e-08  9.90e-01  
 10  +1.0070e-01  +1.0070e-01  9.55e-10  6.11e-11  6.43e-10  5.09e-12  2.78e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 325.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:08:14 PM: Problem status: optimal
(CVXPY) Aug 30 12:08:14 PM: Optimal value: 1.007e-01
(CVXPY) Aug 30 12:08:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:08:14 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.7999999999999999

IF 
    (x2 = 1 AND x5 = 1 AND x0 = 0)                                  <-- (term's our objective: 0.19999999999999996)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0)                                  <-- (term's our objective: 0.16000000000000003)
 OR (x2 = 0 AND x3 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.12000000000000002)
 OR (x0 = 1 AND x3 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0)            <-- (term's our objective: 0.12)
 OR (x4 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0)            <-- (term's our objective: 0.07999999999999996)
 OR (x5 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.040000000000000036)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 7
  Shortest hamming distance: 3
    Its our objective: 0.12000000000000002
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

