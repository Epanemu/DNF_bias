Command:
python test_script.py -s smallest_subclass -d 4 -n 100 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12000000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.24000000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:08 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:08 PM: Finished problem compilation (took 3.057e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9595e-01  +5.0987e+01  5.05e+01  8.58e-01  7.90e+00  1.00e+00  1.04e+00   ------   
  1  +6.0213e-01  +1.0132e+01  9.53e+00  2.95e-01  4.16e+00  4.07e-03  4.91e-01  6.69e-01  
  2  +5.3048e-01  +1.5516e+00  1.02e+00  6.36e-02  1.05e+00  9.68e-03  1.59e-01  9.14e-01  
  3  +5.1025e-01  +1.0934e+00  5.83e-01  2.75e-02  4.64e-01  1.01e-02  7.70e-02  5.79e-01  
  4  +4.9201e-01  +1.0222e+00  5.30e-01  1.53e-02  2.61e-01  9.67e-03  4.56e-02  6.28e-01  
  5  +4.5678e-01  +6.7027e-01  2.13e-01  5.29e-03  9.00e-02  2.38e-03  1.83e-02  6.70e-01  
  6  +4.3021e-01  +5.1700e-01  8.68e-02  1.97e-03  3.33e-02  8.38e-04  8.36e-03  5.97e-01  
  7  +4.1362e-01  +4.2624e-01  1.26e-02  2.78e-04  4.67e-03  5.90e-05  1.39e-03  9.90e-01  
  8  +4.1015e-01  +4.1033e-01  1.80e-04  3.94e-06  6.61e-05  7.69e-07  2.04e-05  9.86e-01  
  9  +4.1010e-01  +4.1010e-01  1.80e-06  3.93e-08  6.60e-07  7.69e-09  2.04e-07  9.90e-01  
 10  +4.1010e-01  +4.1010e-01  1.80e-08  3.93e-10  6.60e-09  7.69e-11  2.04e-09  9.90e-01  
 11  +4.1010e-01  +4.1010e-01  1.80e-10  3.93e-12  6.60e-11  7.69e-13  2.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 303.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:08 PM: Optimal value: 4.101e-01
(CVXPY) Aug 30 12:04:08 PM: Compilation took 3.057e-03 seconds
(CVXPY) Aug 30 12:04:08 PM: Solver (including time spent in interface) took 1.018e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:08 PM: Your problem has 68 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:08 PM: Finished problem compilation (took 2.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 68
  constraints   = 118
  nnz(P)        = 0
  nnz(A)        = 485
  cones (total) = 1
    : Nonnegative = 1,  numel = 118

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9443e-01  +5.1070e+01  5.06e+01  8.65e-01  8.47e+00  1.00e+00  1.05e+00   ------   
  1  +5.9180e-01  +1.0326e+01  9.73e+00  3.16e-01  4.43e+00  4.02e-03  5.13e-01  6.57e-01  
  2  +5.2353e-01  +1.4298e+00  9.06e-01  5.76e-02  1.01e+00  1.11e-02  1.48e-01  9.81e-01  
  3  +5.1851e-01  +1.4262e+00  9.08e-01  4.46e-02  7.94e-01  1.35e-02  1.17e-01  2.57e-01  
  4  +4.9532e-01  +1.2568e+00  7.61e-01  2.55e-02  4.58e-01  1.27e-02  7.44e-02  4.96e-01  
  5  +4.5597e-01  +7.9733e-01  3.41e-01  9.82e-03  1.77e-01  3.46e-03  3.37e-02  6.90e-01  
  6  +4.2922e-01  +5.7519e-01  1.46e-01  3.73e-03  6.66e-02  1.44e-03  1.42e-02  6.75e-01  
  7  +4.1343e-01  +4.7366e-01  6.02e-02  1.52e-03  2.70e-02  3.94e-04  6.54e-03  7.61e-01  
  8  +4.0183e-01  +4.0853e-01  6.70e-03  1.67e-04  2.94e-03  3.02e-05  7.96e-04  8.96e-01  
  9  +4.0028e-01  +4.0064e-01  3.57e-04  8.82e-06  1.55e-04  1.77e-06  4.29e-05  9.54e-01  
 10  +4.0026e-01  +4.0066e-01  3.93e-04  7.04e-06  1.26e-04  2.66e-06  2.93e-05  4.28e-01  
 11  +4.0018e-01  +4.0035e-01  1.69e-04  3.39e-06  6.03e-05  6.81e-07  1.41e-05  9.89e-01  
 12  +4.0011e-01  +4.0012e-01  1.46e-05  2.61e-07  4.66e-06  6.15e-08  1.09e-06  9.27e-01  
 13  +4.0010e-01  +4.0010e-01  1.46e-07  2.61e-09  4.66e-08  6.16e-10  1.09e-08  9.90e-01  
 14  +4.0010e-01  +4.0010e-01  1.46e-09  2.61e-11  4.66e-10  6.19e-12  1.10e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 418.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:08 PM: Optimal value: 4.001e-01
(CVXPY) Aug 30 12:04:08 PM: Compilation took 2.993e-03 seconds
(CVXPY) Aug 30 12:04:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:08 PM: Your problem has 72 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:08 PM: Finished problem compilation (took 2.014e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 122
  nnz(P)        = 0
  nnz(A)        = 536
  cones (total) = 1
    : Nonnegative = 1,  numel = 122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9461e-01  +5.1069e+01  5.06e+01  8.68e-01  8.62e+00  1.00e+00  1.06e+00   ------   
  1  +5.8581e-01  +1.0547e+01  9.96e+00  3.35e-01  4.66e+00  3.93e-03  5.39e-01  6.40e-01  
  2  +5.2285e-01  +1.6854e+00  1.16e+00  7.62e-02  1.33e+00  1.22e-02  1.95e-01  9.19e-01  
  3  +4.9570e-01  +9.8266e-01  4.87e-01  2.38e-02  4.29e-01  8.66e-03  7.16e-02  6.99e-01  
  4  +4.5874e-01  +7.6952e-01  3.11e-01  9.51e-03  1.73e-01  5.98e-03  3.24e-02  6.55e-01  
  5  +4.4175e-01  +6.6676e-01  2.25e-01  5.69e-03  1.04e-01  4.38e-03  2.00e-02  4.64e-01  
  6  +4.1959e-01  +5.4711e-01  1.28e-01  2.83e-03  5.13e-02  1.60e-03  1.06e-02  7.14e-01  
  7  +3.9604e-01  +4.4199e-01  4.59e-02  9.99e-04  1.80e-02  1.20e-04  4.13e-03  9.90e-01  
  8  +3.8135e-01  +3.8460e-01  3.26e-03  6.76e-05  1.21e-03  6.51e-06  3.01e-04  9.37e-01  
  9  +3.8021e-01  +3.8025e-01  3.40e-05  7.04e-07  1.26e-05  6.65e-08  3.17e-06  9.90e-01  
 10  +3.8020e-01  +3.8020e-01  3.40e-07  7.04e-09  1.26e-07  6.65e-10  3.17e-08  9.90e-01  
 11  +3.8020e-01  +3.8020e-01  3.40e-09  7.04e-11  1.26e-09  6.65e-12  3.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 411.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:08 PM: Optimal value: 3.802e-01
(CVXPY) Aug 30 12:04:08 PM: Compilation took 2.014e-03 seconds
(CVXPY) Aug 30 12:04:08 PM: Solver (including time spent in interface) took 9.875e-04 seconds
Iteration: 3, Objective: 0.3802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:08 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:08 PM: Finished problem compilation (took 3.021e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 544
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9454e-01  +5.1068e+01  5.06e+01  8.68e-01  8.62e+00  1.00e+00  1.06e+00   ------   
  1  +5.8360e-01  +1.0607e+01  1.00e+01  3.39e-01  4.70e+00  3.91e-03  5.45e-01  6.36e-01  
  2  +5.2195e-01  +1.7428e+00  1.22e+00  8.03e-02  1.40e+00  1.25e-02  2.04e-01  9.07e-01  
  3  +4.9598e-01  +9.9835e-01  5.02e-01  2.61e-02  4.68e-01  8.14e-03  7.78e-02  6.80e-01  
  4  +4.5575e-01  +7.7868e-01  3.23e-01  9.53e-03  1.73e-01  6.17e-03  3.24e-02  7.04e-01  
  5  +4.3785e-01  +6.6460e-01  2.27e-01  5.61e-03  1.02e-01  4.34e-03  1.99e-02  4.61e-01  
  6  +4.1668e-01  +5.4632e-01  1.30e-01  2.85e-03  5.15e-02  1.90e-03  1.08e-02  6.35e-01  
  7  +3.9079e-01  +4.2225e-01  3.15e-02  6.77e-04  1.21e-02  6.16e-05  2.86e-03  9.90e-01  
  8  +3.8072e-01  +3.8212e-01  1.40e-03  2.94e-05  5.26e-04  2.47e-06  1.31e-04  9.59e-01  
  9  +3.8026e-01  +3.8041e-01  1.47e-04  3.07e-06  5.49e-05  4.45e-07  1.38e-05  9.37e-01  
 10  +3.8020e-01  +3.8020e-01  1.81e-06  3.76e-08  6.73e-07  5.50e-09  1.69e-07  9.88e-01  
 11  +3.8020e-01  +3.8020e-01  1.81e-08  3.76e-10  6.73e-09  5.50e-11  1.69e-09  9.90e-01  
 12  +3.8020e-01  +3.8020e-01  1.81e-10  3.76e-12  6.73e-11  5.50e-13  1.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 658.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:08 PM: Optimal value: 3.802e-01
(CVXPY) Aug 30 12:04:08 PM: Compilation took 3.021e-03 seconds
(CVXPY) Aug 30 12:04:08 PM: Solver (including time spent in interface) took 1.077e-03 seconds
Iteration: 4, Objective: 0.3802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:08 PM: Your problem has 74 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:08 PM: Finished problem compilation (took 2.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 74
  constraints   = 124
  nnz(P)        = 0
  nnz(A)        = 547
  cones (total) = 1
    : Nonnegative = 1,  numel = 124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9449e-01  +5.1068e+01  5.06e+01  8.69e-01  8.59e+00  1.00e+00  1.06e+00   ------   
  1  +5.8267e-01  +1.0609e+01  1.00e+01  3.40e-01  4.68e+00  3.91e-03  5.45e-01  6.35e-01  
  2  +5.2152e-01  +1.7217e+00  1.20e+00  7.88e-02  1.37e+00  1.25e-02  2.01e-01  9.15e-01  
  3  +4.9513e-01  +9.9292e-01  4.98e-01  2.51e-02  4.51e-01  8.39e-03  7.51e-02  6.88e-01  
  4  +4.5495e-01  +7.6316e-01  3.08e-01  8.97e-03  1.63e-01  6.70e-03  3.03e-02  6.69e-01  
  5  +4.3969e-01  +6.7554e-01  2.36e-01  5.81e-03  1.05e-01  5.13e-03  2.02e-02  4.07e-01  
  6  +4.1989e-01  +5.6749e-01  1.48e-01  3.30e-03  5.94e-02  2.55e-03  1.22e-02  5.44e-01  
  7  +3.8943e-01  +4.1724e-01  2.78e-02  6.04e-04  1.08e-02  2.35e-05  2.54e-03  9.66e-01  
  8  +3.8073e-01  +3.8207e-01  1.34e-03  2.88e-05  5.14e-04  1.34e-06  1.28e-04  9.54e-01  
  9  +3.8044e-01  +3.8107e-01  6.32e-04  1.32e-05  2.36e-04  1.40e-06  5.97e-05  6.86e-01  
 10  +3.8021e-01  +3.8022e-01  1.51e-05  3.15e-07  5.62e-06  3.79e-08  1.43e-06  9.79e-01  
 11  +3.8020e-01  +3.8020e-01  1.51e-07  3.15e-09  5.62e-08  3.79e-10  1.43e-08  9.90e-01  
 12  +3.8020e-01  +3.8020e-01  1.51e-09  3.15e-11  5.62e-10  3.79e-12  1.43e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 439.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:08 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:08 PM: Optimal value: 3.802e-01
(CVXPY) Aug 30 12:04:08 PM: Compilation took 2.002e-03 seconds
(CVXPY) Aug 30 12:04:08 PM: Solver (including time spent in interface) took 1.017e-03 seconds
FULL MODEL:
  Accruacy: 0.62
  Our objective: 0.23999999999999996

IF 
    (x3 = 1 AND x2 = 0)            <-- (term's our objective: 0.08000000000000002)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.15999999999999995)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.15999999999999995
    Its accruacy: 0.58
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.15999999999999995
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

