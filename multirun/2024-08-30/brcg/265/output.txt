Command:
python test_script.py -s smallest_subclass -d 7 -n 5000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.008
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 7.

Computed total variation: 0.13240000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:22 PM: Your problem has 2515 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2515
  constraints   = 5015
  nnz(P)        = 0
  nnz(A)        = 25015
  cones (total) = 1
    : Nonnegative = 1,  numel = 5015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.79e-01  7.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2570e+02  5.25e+02  4.01e-01  4.61e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3802e-01  +6.5559e+01  6.50e+01  1.52e-01  2.23e+01  1.31e-02  2.54e-01  8.66e-01  
  3  +5.0954e-01  +1.6659e+01  1.61e+01  1.05e-01  1.50e+01  3.38e-05  2.45e-01  1.74e-01  
  4  +5.0036e-01  +1.0455e+00  5.45e-01  5.26e-03  7.77e-01  6.35e-06  1.12e-01  9.90e-01  
  5  +5.0003e-01  +5.7062e-01  7.06e-02  6.67e-04  9.93e-02  2.34e-06  2.45e-02  8.60e-01  
  6  +5.0001e-01  +5.5892e-01  5.89e-02  5.52e-04  8.22e-02  2.97e-06  9.81e-03  7.46e-01  
  7  +4.9998e-01  +5.6323e-01  6.32e-02  5.46e-04  8.14e-02  5.28e-06  4.28e-03  7.23e-01  
  8  +4.9829e-01  +5.4688e-01  4.86e-02  3.62e-05  5.43e-03  1.29e-04  1.17e-04  9.75e-01  
  9  +4.9454e-01  +5.2495e-01  3.04e-02  1.60e-05  2.39e-03  9.07e-05  5.37e-05  6.28e-01  
 10  +4.9188e-01  +5.1182e-01  1.99e-02  9.70e-06  1.45e-03  1.40e-05  3.53e-05  7.23e-01  
 11  +4.9010e-01  +5.0374e-01  1.36e-02  6.20e-06  9.29e-04  1.44e-07  2.34e-05  9.65e-01  
 12  +4.8614e-01  +4.8795e-01  1.81e-03  7.32e-07  1.10e-04  1.50e-07  2.96e-06  9.88e-01  
 13  +4.8573e-01  +4.8637e-01  6.39e-04  2.55e-07  3.83e-05  6.12e-08  1.04e-06  9.42e-01  
 14  +4.8550e-01  +4.8551e-01  8.95e-06  3.57e-09  5.35e-07  8.54e-10  1.47e-08  9.90e-01  
 15  +4.8550e-01  +4.8550e-01  8.95e-08  3.57e-11  5.35e-09  8.54e-12  1.47e-10  9.90e-01  
 16  +4.8550e-01  +4.8550e-01  8.95e-10  3.57e-13  5.35e-11  8.62e-14  1.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 32.2441ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:22 PM: Optimal value: 4.855e-01
(CVXPY) Aug 30 12:13:22 PM: Compilation took 1.564e-02 seconds
(CVXPY) Aug 30 12:13:22 PM: Solver (including time spent in interface) took 3.133e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4855
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:22 PM: Your problem has 2525 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2525
  constraints   = 5025
  nnz(P)        = 0
  nnz(A)        = 27910
  cones (total) = 1
    : Nonnegative = 1,  numel = 5025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.79e-01  7.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.8799e-01  +5.2584e+02  5.25e+02  4.01e-01  4.68e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3787e-01  +6.5398e+01  6.49e+01  1.52e-01  2.26e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0949e-01  +1.6603e+01  1.61e+01  1.05e-01  1.52e+01  3.39e-05  2.44e-01  1.77e-01  
  4  +5.0036e-01  +1.0505e+00  5.50e-01  5.32e-03  7.99e-01  6.44e-06  1.11e-01  9.90e-01  
  5  +5.0010e-01  +6.7900e-01  1.79e-01  1.70e-03  2.57e-01  3.47e-06  4.90e-02  6.04e-01  
  6  +5.0006e-01  +6.2660e-01  1.27e-01  1.20e-03  1.81e-01  3.37e-06  2.36e-02  5.88e-01  
  7  +5.0006e-01  +6.7327e-01  1.73e-01  1.43e-03  2.16e-01  5.94e-06  9.13e-03  9.90e-01  
  8  +4.9890e-01  +6.0994e-01  1.11e-01  1.01e-04  1.54e-02  8.57e-05  3.31e-04  9.67e-01  
  9  +4.9544e-01  +5.7730e-01  8.19e-02  4.94e-05  7.53e-03  8.16e-05  1.65e-04  6.10e-01  
 10  +4.9384e-01  +5.6448e-01  7.06e-02  4.25e-05  6.48e-03  4.08e-05  1.44e-04  4.05e-01  
 11  +4.9072e-01  +5.4533e-01  5.46e-02  3.01e-05  4.59e-03  2.03e-05  1.04e-04  5.01e-01  
 12  +4.8972e-01  +5.3965e-01  4.99e-02  2.75e-05  4.18e-03  1.45e-05  9.63e-05  2.51e-01  
 13  +4.8420e-01  +5.1266e-01  2.85e-02  1.37e-05  2.09e-03  5.30e-06  5.09e-05  6.53e-01  
 14  +4.8158e-01  +4.9966e-01  1.81e-02  8.11e-06  1.23e-03  1.74e-06  3.13e-05  8.69e-01  
 15  +4.7838e-01  +4.8536e-01  6.98e-03  3.02e-06  4.60e-04  6.11e-07  1.23e-05  9.90e-01  
 16  +4.7632e-01  +4.7666e-01  3.39e-04  1.45e-07  2.21e-05  2.20e-08  6.34e-07  9.90e-01  
 17  +4.7620e-01  +4.7620e-01  3.46e-06  1.48e-09  2.26e-07  2.22e-10  6.55e-09  9.90e-01  
 18  +4.7620e-01  +4.7620e-01  3.46e-08  1.48e-11  2.26e-09  2.22e-12  6.55e-11  9.90e-01  
 19  +4.7620e-01  +4.7620e-01  3.46e-10  1.48e-13  2.26e-11  2.22e-14  6.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.3878ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:22 PM: Optimal value: 4.762e-01
(CVXPY) Aug 30 12:13:22 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:22 PM: Solver (including time spent in interface) took 4.757e-02 seconds
Iteration: 2, Objective: 0.4762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:22 PM: Your problem has 2535 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Finished problem compilation (took 1.735e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2535
  constraints   = 5035
  nnz(P)        = 0
  nnz(A)        = 30381
  cones (total) = 1
    : Nonnegative = 1,  numel = 5035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.79e-01  7.62e+01  1.00e+00  1.00e+00   ------   
  1  +5.8781e-01  +5.2608e+02  5.25e+02  4.02e-01  4.74e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3766e-01  +6.5193e+01  6.47e+01  1.52e-01  2.27e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0944e-01  +1.6546e+01  1.60e+01  1.04e-01  1.53e+01  3.40e-05  2.44e-01  1.80e-01  
  4  +5.0048e-01  +1.2510e+00  7.51e-01  7.27e-03  1.10e+00  6.84e-06  1.29e-01  8.48e-01  
  5  +5.0012e-01  +7.4107e-01  2.41e-01  2.30e-03  3.51e-01  4.00e-06  6.04e-02  5.95e-01  
  6  +5.0004e-01  +6.5590e-01  1.56e-01  1.46e-03  2.24e-01  4.71e-06  1.99e-02  7.84e-01  
  7  +4.9935e-01  +6.6804e-01  1.69e-01  5.63e-04  8.69e-02  4.06e-05  2.02e-03  9.29e-01  
  8  +4.9608e-01  +6.3639e-01  1.40e-01  1.24e-04  1.92e-02  1.52e-04  4.06e-04  8.01e-01  
  9  +4.9537e-01  +6.2246e-01  1.27e-01  1.07e-04  1.66e-02  9.51e-05  3.55e-04  3.58e-01  
 10  +4.9266e-01  +6.0108e-01  1.08e-01  7.46e-05  1.15e-02  8.03e-05  2.51e-04  3.91e-01  
 11  +4.9202e-01  +5.8927e-01  9.72e-02  6.55e-05  1.01e-02  3.14e-05  2.22e-04  5.39e-01  
 12  +4.8941e-01  +5.7372e-01  8.43e-02  5.08e-05  7.85e-03  2.37e-05  1.74e-04  3.52e-01  
 13  +4.8328e-01  +5.3534e-01  5.21e-02  2.85e-05  4.39e-03  2.09e-06  1.01e-04  8.99e-01  
 14  +4.7762e-01  +5.0671e-01  2.91e-02  1.46e-05  2.24e-03  1.27e-06  5.32e-05  5.46e-01  
 15  +4.7344e-01  +4.8581e-01  1.24e-02  5.70e-06  8.78e-04  7.70e-07  2.10e-05  7.67e-01  
 16  +4.7273e-01  +4.8267e-01  9.95e-03  3.72e-06  5.73e-04  1.05e-06  1.28e-05  9.60e-01  
 17  +4.7179e-01  +4.8020e-01  8.40e-03  3.17e-06  4.88e-04  8.18e-07  1.10e-05  8.02e-01  
 18  +4.7021e-01  +4.7356e-01  3.35e-03  1.18e-06  1.83e-04  3.62e-07  4.14e-06  7.46e-01  
 19  +4.6923e-01  +4.6977e-01  5.46e-04  1.89e-07  2.91e-05  6.81e-08  6.67e-07  9.90e-01  
 20  +4.6900e-01  +4.6901e-01  7.11e-06  2.45e-09  3.78e-07  8.78e-10  8.68e-09  9.88e-01  
 21  +4.6900e-01  +4.6900e-01  7.11e-08  2.45e-11  3.78e-09  8.78e-12  8.68e-11  9.90e-01  
 22  +4.6900e-01  +4.6900e-01  7.11e-10  2.45e-13  3.78e-11  8.95e-14  8.84e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.9389ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:22 PM: Optimal value: 4.690e-01
(CVXPY) Aug 30 12:13:22 PM: Compilation took 1.735e-02 seconds
(CVXPY) Aug 30 12:13:22 PM: Solver (including time spent in interface) took 4.574e-02 seconds
Iteration: 3, Objective: 0.4690
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:22 PM: Your problem has 2545 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Finished problem compilation (took 2.211e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2545
  constraints   = 5045
  nnz(P)        = 0
  nnz(A)        = 33268
  cones (total) = 1
    : Nonnegative = 1,  numel = 5045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.79e-01  7.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.8765e-01  +5.2649e+02  5.26e+02  4.03e-01  4.82e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3745e-01  +6.5001e+01  6.45e+01  1.52e-01  2.31e+01  1.33e-02  2.54e-01  8.72e-01  
  3  +5.0940e-01  +1.6513e+01  1.60e+01  1.05e-01  1.55e+01  3.43e-05  2.44e-01  1.82e-01  
  4  +5.0042e-01  +1.1400e+00  6.40e-01  6.21e-03  9.58e-01  6.63e-06  1.18e-01  9.26e-01  
  5  +5.0014e-01  +7.5316e-01  2.53e-01  2.42e-03  3.76e-01  4.26e-06  5.99e-02  5.36e-01  
  6  +5.0006e-01  +6.7395e-01  1.74e-01  1.64e-03  2.55e-01  5.03e-06  2.20e-02  7.42e-01  
  7  +4.9947e-01  +6.7101e-01  1.72e-01  5.54e-04  8.69e-02  4.30e-05  1.96e-03  9.46e-01  
  8  +4.9613e-01  +6.3993e-01  1.44e-01  1.08e-04  1.70e-02  1.84e-04  3.50e-04  8.24e-01  
  9  +4.9319e-01  +6.0992e-01  1.17e-01  8.30e-05  1.30e-02  1.09e-04  2.72e-04  3.89e-01  
 10  +4.9108e-01  +5.9302e-01  1.02e-01  6.08e-05  9.55e-03  7.45e-05  2.00e-04  4.80e-01  
 11  +4.9014e-01  +5.8516e-01  9.50e-02  5.95e-05  9.34e-03  5.58e-05  1.96e-04  1.40e-01  
 12  +4.8603e-01  +5.5883e-01  7.28e-02  3.98e-05  6.24e-03  2.68e-05  1.32e-04  5.89e-01  
 13  +4.8108e-01  +5.3259e-01  5.15e-02  2.41e-05  3.79e-03  1.77e-05  8.00e-05  4.90e-01  
 14  +4.7966e-01  +5.2727e-01  4.76e-02  2.28e-05  3.58e-03  1.34e-05  7.83e-05  1.48e-01  
 15  +4.7569e-01  +5.0843e-01  3.27e-02  1.42e-05  2.23e-03  8.76e-06  4.85e-05  4.66e-01  
 16  +4.7003e-01  +4.8385e-01  1.38e-02  5.35e-06  8.40e-04  2.10e-06  1.85e-05  8.81e-01  
 17  +4.6640e-01  +4.6922e-01  2.82e-03  1.06e-06  1.66e-04  3.99e-07  3.78e-06  8.36e-01  
 18  +4.6553e-01  +4.6614e-01  6.02e-04  2.20e-07  3.44e-05  8.23e-08  8.09e-07  8.32e-01  
 19  +4.6538e-01  +4.6558e-01  2.00e-04  7.28e-08  1.14e-05  2.41e-08  2.70e-07  9.90e-01  
 20  +4.6530e-01  +4.6530e-01  2.37e-06  8.60e-10  1.35e-07  2.85e-10  3.20e-09  9.88e-01  
 21  +4.6530e-01  +4.6530e-01  2.37e-08  8.60e-12  1.35e-09  2.85e-12  3.20e-11  9.90e-01  
 22  +4.6530e-01  +4.6530e-01  2.37e-10  8.61e-14  1.35e-11  2.93e-14  3.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.4752ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:22 PM: Optimal value: 4.653e-01
(CVXPY) Aug 30 12:13:22 PM: Compilation took 2.211e-02 seconds
(CVXPY) Aug 30 12:13:22 PM: Solver (including time spent in interface) took 4.493e-02 seconds
Iteration: 4, Objective: 0.4653
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:22 PM: Your problem has 2555 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Finished problem compilation (took 1.572e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2555
  constraints   = 5055
  nnz(P)        = 0
  nnz(A)        = 34691
  cones (total) = 1
    : Nonnegative = 1,  numel = 5055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.79e-01  7.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.8749e-01  +5.2668e+02  5.26e+02  4.03e-01  4.84e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3733e-01  +6.4900e+01  6.44e+01  1.52e-01  2.31e+01  1.33e-02  2.54e-01  8.73e-01  
  3  +5.0937e-01  +1.6493e+01  1.60e+01  1.05e-01  1.56e+01  3.44e-05  2.44e-01  1.84e-01  
  4  +5.0046e-01  +1.2173e+00  7.17e-01  6.96e-03  1.08e+00  6.80e-06  1.25e-01  8.76e-01  
  5  +5.0014e-01  +7.7590e-01  2.76e-01  2.64e-03  4.11e-01  4.65e-06  6.22e-02  5.88e-01  
  6  +5.0007e-01  +7.1294e-01  2.13e-01  2.01e-03  3.13e-01  5.69e-06  2.70e-02  6.48e-01  
  7  +4.9951e-01  +6.8413e-01  1.85e-01  7.26e-04  1.14e-01  3.63e-05  2.63e-03  9.57e-01  
  8  +4.9737e-01  +6.6372e-01  1.66e-01  2.00e-04  3.15e-02  1.23e-04  6.45e-04  7.61e-01  
  9  +4.9671e-01  +6.3592e-01  1.39e-01  1.44e-04  2.26e-02  3.91e-05  4.62e-04  7.83e-01  
 10  +4.9589e-01  +6.2697e-01  1.31e-01  1.22e-04  1.92e-02  2.72e-05  3.90e-04  4.61e-01  
 11  +4.9264e-01  +6.0755e-01  1.15e-01  7.85e-05  1.24e-02  2.58e-05  2.54e-04  5.07e-01  
 12  +4.9125e-01  +6.0045e-01  1.09e-01  6.71e-05  1.06e-02  1.94e-05  2.18e-04  4.16e-01  
 13  +4.8954e-01  +5.9150e-01  1.02e-01  6.50e-05  1.02e-02  1.43e-05  2.13e-04  2.16e-01  
 14  +4.8506e-01  +5.7086e-01  8.58e-02  4.76e-05  7.50e-03  1.21e-05  1.59e-04  3.15e-01  
 15  +4.7411e-01  +5.2150e-01  4.74e-02  2.17e-05  3.41e-03  5.72e-06  7.59e-05  6.52e-01  
 16  +4.6310e-01  +4.7294e-01  9.84e-03  4.13e-06  6.49e-04  7.85e-07  1.54e-05  8.70e-01  
 17  +4.6040e-01  +4.6190e-01  1.50e-03  6.16e-07  9.68e-05  1.12e-07  2.41e-06  8.52e-01  
 18  +4.5997e-01  +4.6017e-01  2.00e-04  8.15e-08  1.28e-05  1.92e-08  3.29e-07  9.89e-01  
 19  +4.5990e-01  +4.5990e-01  2.63e-06  1.07e-09  1.68e-07  2.48e-10  4.35e-09  9.87e-01  
 20  +4.5990e-01  +4.5990e-01  2.65e-08  1.07e-11  1.69e-09  2.49e-12  4.37e-11  9.90e-01  
 21  +4.5990e-01  +4.5990e-01  2.65e-10  1.07e-13  1.69e-11  2.60e-14  4.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.7759ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:22 PM: Optimal value: 4.599e-01
(CVXPY) Aug 30 12:13:22 PM: Compilation took 1.572e-02 seconds
(CVXPY) Aug 30 12:13:22 PM: Solver (including time spent in interface) took 4.755e-02 seconds
Iteration: 5, Objective: 0.4599
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:22 PM: Your problem has 2565 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:22 PM: Finished problem compilation (took 1.571e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2565
  constraints   = 5065
  nnz(P)        = 0
  nnz(A)        = 35688
  cones (total) = 1
    : Nonnegative = 1,  numel = 5065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.79e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8733e-01  +5.2676e+02  5.26e+02  4.04e-01  4.84e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3719e-01  +6.4755e+01  6.42e+01  1.52e-01  2.30e+01  1.33e-02  2.54e-01  8.75e-01  
  3  +5.0934e-01  +1.6454e+01  1.59e+01  1.04e-01  1.55e+01  3.44e-05  2.43e-01  1.87e-01  
  4  +5.0048e-01  +1.2459e+00  7.45e-01  7.25e-03  1.12e+00  6.91e-06  1.26e-01  8.61e-01  
  5  +5.0016e-01  +8.1177e-01  3.12e-01  2.99e-03  4.65e-01  4.94e-06  6.55e-02  5.52e-01  
  6  +5.0008e-01  +7.5706e-01  2.57e-01  2.39e-03  3.73e-01  7.08e-06  2.49e-02  7.61e-01  
  7  +4.9944e-01  +7.3260e-01  2.33e-01  8.71e-04  1.37e-01  4.02e-05  3.10e-03  8.99e-01  
  8  +4.9472e-01  +6.8169e-01  1.87e-01  1.30e-04  2.05e-02  2.19e-04  4.10e-04  8.80e-01  
  9  +4.9497e-01  +6.8112e-01  1.86e-01  1.24e-04  1.96e-02  1.86e-04  3.89e-04  1.99e-01  
 10  +4.9314e-01  +6.6272e-01  1.70e-01  1.09e-04  1.72e-02  1.42e-04  3.44e-04  2.43e-01  
 11  +4.8964e-01  +6.3890e-01  1.49e-01  8.37e-05  1.32e-02  1.19e-04  2.67e-04  3.17e-01  
 12  +4.8773e-01  +6.1883e-01  1.31e-01  7.83e-05  1.24e-02  5.57e-05  2.53e-04  3.63e-01  
 13  +4.8008e-01  +5.7235e-01  9.23e-02  4.79e-05  7.54e-03  6.20e-07  1.60e-04  9.68e-01  
 14  +4.6633e-01  +5.0784e-01  4.15e-02  1.84e-05  2.90e-03  2.18e-06  6.49e-05  8.16e-01  
 15  +4.6371e-01  +4.9680e-01  3.31e-02  1.42e-05  2.24e-03  2.09e-06  5.06e-05  3.91e-01  
 16  +4.5893e-01  +4.7639e-01  1.75e-02  7.17e-06  1.13e-03  1.78e-06  2.62e-05  9.90e-01  
 17  +4.5486e-01  +4.5990e-01  5.05e-03  2.05e-06  3.22e-04  5.13e-07  7.70e-06  7.50e-01  
 18  +4.5334e-01  +4.5391e-01  5.64e-04  2.28e-07  3.58e-05  5.75e-08  8.66e-07  9.05e-01  
 19  +4.5315e-01  +4.5316e-01  5.85e-06  2.36e-09  3.72e-07  5.96e-10  9.00e-09  9.90e-01  
 20  +4.5315e-01  +4.5315e-01  5.85e-08  2.36e-11  3.72e-09  5.96e-12  9.00e-11  9.90e-01  
 21  +4.5315e-01  +4.5315e-01  5.85e-10  2.36e-13  3.72e-11  5.97e-14  9.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 50.0945ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:22 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:22 PM: Optimal value: 4.532e-01
(CVXPY) Aug 30 12:13:22 PM: Compilation took 1.571e-02 seconds
(CVXPY) Aug 30 12:13:22 PM: Solver (including time spent in interface) took 4.679e-02 seconds
Iteration: 6, Objective: 0.4532
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:23 PM: Your problem has 2575 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Finished problem compilation (took 1.575e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2575
  constraints   = 5075
  nnz(P)        = 0
  nnz(A)        = 36594
  cones (total) = 1
    : Nonnegative = 1,  numel = 5075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.79e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8718e-01  +5.2682e+02  5.26e+02  4.04e-01  4.84e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3706e-01  +6.4609e+01  6.41e+01  1.52e-01  2.29e+01  1.33e-02  2.53e-01  8.76e-01  
  3  +5.0930e-01  +1.6415e+01  1.59e+01  1.04e-01  1.55e+01  3.45e-05  2.43e-01  1.89e-01  
  4  +5.0060e-01  +1.4534e+00  9.53e-01  9.26e-03  1.43e+00  7.33e-06  1.40e-01  7.51e-01  
  5  +5.0018e-01  +8.6970e-01  3.70e-01  3.54e-03  5.52e-01  5.06e-06  7.56e-02  5.28e-01  
  6  +5.0007e-01  +8.0012e-01  3.00e-01  2.79e-03  4.36e-01  7.29e-06  2.85e-02  7.67e-01  
  7  +4.9877e-01  +7.6380e-01  2.65e-01  6.75e-04  1.07e-01  5.90e-05  2.30e-03  9.69e-01  
  8  +4.9518e-01  +7.0498e-01  2.10e-01  2.11e-04  3.34e-02  1.24e-04  6.87e-04  7.62e-01  
  9  +4.9535e-01  +7.0283e-01  2.07e-01  2.07e-04  3.27e-02  1.09e-04  6.67e-04  1.35e-01  
 10  +4.9200e-01  +6.7107e-01  1.79e-01  1.37e-04  2.16e-02  1.01e-04  4.41e-04  4.51e-01  
 11  +4.8777e-01  +6.3619e-01  1.48e-01  8.85e-05  1.40e-02  6.69e-05  2.84e-04  5.98e-01  
 12  +4.8669e-01  +6.3108e-01  1.44e-01  7.93e-05  1.25e-02  5.68e-05  2.55e-04  2.61e-01  
 13  +4.8128e-01  +5.8923e-01  1.08e-01  6.27e-05  9.89e-03  5.18e-07  2.10e-04  8.37e-01  
 14  +4.6902e-01  +5.3420e-01  6.52e-02  3.08e-05  4.86e-03  1.15e-06  1.08e-04  5.70e-01  
 15  +4.6081e-01  +4.9719e-01  3.64e-02  1.61e-05  2.53e-03  1.26e-06  5.85e-05  5.81e-01  
 16  +4.5478e-01  +4.7026e-01  1.55e-02  6.44e-06  1.01e-03  1.51e-06  2.43e-05  9.90e-01  
 17  +4.5022e-01  +4.5219e-01  1.97e-03  7.95e-07  1.25e-04  1.88e-07  3.18e-06  9.32e-01  
 18  +4.4951e-01  +4.4955e-01  4.00e-05  1.59e-08  2.51e-06  3.75e-09  6.52e-08  9.85e-01  
 19  +4.4950e-01  +4.4950e-01  4.01e-07  1.60e-10  2.52e-08  3.76e-11  6.54e-10  9.90e-01  
 20  +4.4950e-01  +4.4950e-01  4.01e-09  1.60e-12  2.52e-10  3.76e-13  6.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 46.7812ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:23 PM: Optimal value: 4.495e-01
(CVXPY) Aug 30 12:13:23 PM: Compilation took 1.575e-02 seconds
(CVXPY) Aug 30 12:13:23 PM: Solver (including time spent in interface) took 4.685e-02 seconds
Iteration: 7, Objective: 0.4495
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:23 PM: Your problem has 2581 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Finished problem compilation (took 1.569e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2581
  constraints   = 5081
  nnz(P)        = 0
  nnz(A)        = 37229
  cones (total) = 1
    : Nonnegative = 1,  numel = 5081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.79e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8711e-01  +5.2697e+02  5.26e+02  4.04e-01  4.84e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3695e-01  +6.4495e+01  6.40e+01  1.52e-01  2.29e+01  1.34e-02  2.53e-01  8.77e-01  
  3  +5.0928e-01  +1.6390e+01  1.59e+01  1.04e-01  1.55e+01  3.46e-05  2.43e-01  1.90e-01  
  4  +5.0059e-01  +1.4408e+00  9.40e-01  9.15e-03  1.41e+00  7.31e-06  1.38e-01  7.58e-01  
  5  +5.0018e-01  +8.6708e-01  3.67e-01  3.52e-03  5.49e-01  5.19e-06  7.35e-02  5.42e-01  
  6  +5.0008e-01  +8.3848e-01  3.38e-01  3.13e-03  4.88e-01  8.20e-06  2.91e-02  7.71e-01  
  7  +4.9926e-01  +7.8512e-01  2.86e-01  1.04e-03  1.65e-01  4.04e-05  3.70e-03  9.10e-01  
  8  +4.9569e-01  +7.2881e-01  2.33e-01  2.44e-04  3.87e-02  1.35e-04  7.86e-04  8.12e-01  
  9  +4.9354e-01  +6.9822e-01  2.05e-01  1.77e-04  2.80e-02  1.06e-04  5.68e-04  4.52e-01  
 10  +4.9173e-01  +6.7930e-01  1.88e-01  1.39e-04  2.20e-02  8.83e-05  4.42e-04  3.84e-01  
 11  +4.8838e-01  +6.5267e-01  1.64e-01  9.84e-05  1.56e-02  6.51e-05  3.15e-04  5.04e-01  
 12  +4.8696e-01  +6.4336e-01  1.56e-01  9.73e-05  1.54e-02  5.72e-05  3.14e-04  2.85e-02  
 13  +4.7550e-01  +5.8011e-01  1.05e-01  5.06e-05  7.99e-03  3.48e-05  1.70e-04  5.78e-01  
 14  +4.6669e-01  +5.3507e-01  6.84e-02  3.16e-05  4.99e-03  1.93e-05  1.12e-04  4.04e-01  
 15  +4.6228e-01  +5.0937e-01  4.71e-02  2.07e-05  3.27e-03  4.98e-06  7.56e-05  9.17e-01  
 16  +4.5501e-01  +4.7712e-01  2.21e-02  9.35e-06  1.47e-03  2.19e-06  3.58e-05  9.90e-01  
 17  +4.5390e-01  +4.7255e-01  1.87e-02  7.81e-06  1.23e-03  1.85e-06  3.02e-05  1.85e-01  
 18  +4.5159e-01  +4.6269e-01  1.11e-02  4.59e-06  7.23e-04  1.14e-06  1.82e-05  9.90e-01  
 19  +4.4859e-01  +4.5089e-01  2.31e-03  9.43e-07  1.48e-04  2.31e-07  3.89e-06  8.24e-01  
 20  +4.4782e-01  +4.4786e-01  4.51e-05  1.84e-08  2.89e-06  4.43e-09  7.67e-08  9.81e-01  
 21  +4.4780e-01  +4.4780e-01  4.51e-07  1.84e-10  2.89e-08  4.43e-11  7.67e-10  9.90e-01  
 22  +4.4780e-01  +4.4780e-01  4.51e-09  1.84e-12  2.89e-10  4.44e-13  7.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.6783ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:23 PM: Optimal value: 4.478e-01
(CVXPY) Aug 30 12:13:23 PM: Compilation took 1.569e-02 seconds
(CVXPY) Aug 30 12:13:23 PM: Solver (including time spent in interface) took 6.246e-02 seconds
Iteration: 8, Objective: 0.4478
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:23 PM: Your problem has 2591 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2591
  constraints   = 5091
  nnz(P)        = 0
  nnz(A)        = 38005
  cones (total) = 1
    : Nonnegative = 1,  numel = 5091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.79e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8705e-01  +5.2709e+02  5.27e+02  4.05e-01  4.83e+01  3.86e-03  5.47e-01  6.09e-01  
  2  +5.3689e-01  +6.4450e+01  6.39e+01  1.52e-01  2.28e+01  1.34e-02  2.53e-01  8.78e-01  
  3  +5.0926e-01  +1.6376e+01  1.59e+01  1.04e-01  1.54e+01  3.47e-05  2.42e-01  1.92e-01  
  4  +5.0064e-01  +1.5201e+00  1.02e+00  9.93e-03  1.53e+00  7.47e-06  1.43e-01  7.23e-01  
  5  +5.0015e-01  +8.4729e-01  3.47e-01  3.33e-03  5.19e-01  5.05e-06  7.13e-02  5.80e-01  
  6  +5.0008e-01  +8.7852e-01  3.78e-01  3.47e-03  5.40e-01  9.15e-06  2.99e-02  7.71e-01  
  7  +4.9886e-01  +7.8265e-01  2.84e-01  8.51e-04  1.34e-01  5.22e-05  2.96e-03  9.12e-01  
  8  +4.9486e-01  +7.1000e-01  2.15e-01  2.13e-04  3.37e-02  1.33e-04  6.90e-04  8.44e-01  
  9  +4.9401e-01  +6.9525e-01  2.01e-01  1.79e-04  2.83e-02  9.29e-05  5.72e-04  4.25e-01  
 10  +4.9155e-01  +6.7295e-01  1.81e-01  1.35e-04  2.13e-02  7.75e-05  4.28e-04  4.13e-01  
 11  +4.8777e-01  +6.4670e-01  1.59e-01  9.42e-05  1.49e-02  5.67e-05  3.01e-04  5.28e-01  
 12  +4.8660e-01  +6.3964e-01  1.53e-01  9.37e-05  1.48e-02  5.17e-05  3.01e-04  1.54e-02  
 13  +4.7593e-01  +5.8395e-01  1.08e-01  5.26e-05  8.31e-03  3.35e-05  1.75e-04  5.34e-01  
 14  +4.6789e-01  +5.4374e-01  7.59e-02  3.51e-05  5.54e-03  2.08e-05  1.21e-04  3.63e-01  
 15  +4.6390e-01  +5.2486e-01  6.10e-02  2.73e-05  4.30e-03  1.53e-05  9.60e-05  2.89e-01  
 16  +4.5949e-01  +5.0252e-01  4.30e-02  1.82e-05  2.87e-03  6.26e-06  6.56e-05  7.70e-01  
 17  +4.5249e-01  +4.7246e-01  2.00e-02  8.06e-06  1.27e-03  2.34e-06  3.03e-05  8.41e-01  
 18  +4.5167e-01  +4.6922e-01  1.75e-02  7.02e-06  1.11e-03  2.05e-06  2.65e-05  1.71e-01  
 19  +4.4865e-01  +4.5673e-01  8.08e-03  3.18e-06  5.01e-04  8.80e-07  1.23e-05  9.90e-01  
 20  +4.4595e-01  +4.4664e-01  6.88e-04  2.69e-07  4.23e-05  7.16e-08  1.07e-06  9.50e-01  
 21  +4.4570e-01  +4.4571e-01  7.21e-06  2.81e-09  4.43e-07  7.47e-10  1.13e-08  9.90e-01  
 22  +4.4570e-01  +4.4570e-01  7.21e-08  2.81e-11  4.43e-09  7.47e-12  1.13e-10  9.90e-01  
 23  +4.4570e-01  +4.4570e-01  7.21e-10  2.81e-13  4.43e-11  7.50e-14  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.9862ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:23 PM: Optimal value: 4.457e-01
(CVXPY) Aug 30 12:13:23 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:13:23 PM: Solver (including time spent in interface) took 6.327e-02 seconds
Iteration: 9, Objective: 0.4457
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:23 PM: Your problem has 2601 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Finished problem compilation (took 1.567e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2601
  constraints   = 5101
  nnz(P)        = 0
  nnz(A)        = 38554
  cones (total) = 1
    : Nonnegative = 1,  numel = 5101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8700e-01  +5.2701e+02  5.26e+02  4.05e-01  4.83e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3681e-01  +6.4352e+01  6.38e+01  1.52e-01  2.27e+01  1.34e-02  2.53e-01  8.79e-01  
  3  +5.0924e-01  +1.6343e+01  1.58e+01  1.04e-01  1.54e+01  3.47e-05  2.42e-01  1.93e-01  
  4  +5.0067e-01  +1.5721e+00  1.07e+00  1.04e-02  1.61e+00  7.60e-06  1.45e-01  7.02e-01  
  5  +5.0020e-01  +9.2885e-01  4.29e-01  4.12e-03  6.41e-01  5.49e-06  8.18e-02  5.15e-01  
  6  +5.0006e-01  +8.3830e-01  3.38e-01  3.14e-03  4.89e-01  8.26e-06  2.95e-02  7.59e-01  
  7  +4.9867e-01  +8.0814e-01  3.09e-01  8.79e-04  1.39e-01  5.78e-05  2.99e-03  9.28e-01  
  8  +4.9517e-01  +7.3327e-01  2.38e-01  2.72e-04  4.30e-02  1.14e-04  8.75e-04  8.03e-01  
  9  +4.9485e-01  +7.3058e-01  2.36e-01  2.26e-04  3.58e-02  1.08e-04  7.14e-04  3.53e-01  
 10  +4.9272e-01  +6.9986e-01  2.07e-01  1.63e-04  2.57e-02  6.96e-05  5.12e-04  5.91e-01  
 11  +4.8837e-01  +6.7127e-01  1.83e-01  1.15e-04  1.81e-02  6.14e-05  3.65e-04  4.24e-01  
 12  +4.8747e-01  +6.6506e-01  1.78e-01  1.13e-04  1.79e-02  5.49e-05  3.63e-04  5.80e-02  
 13  +4.7511e-01  +5.9629e-01  1.21e-01  6.10e-05  9.63e-03  2.92e-05  2.05e-04  6.27e-01  
 14  +4.6661e-01  +5.5418e-01  8.76e-02  4.19e-05  6.61e-03  1.70e-05  1.47e-04  4.09e-01  
 15  +4.5987e-01  +5.2160e-01  6.17e-02  2.84e-05  4.47e-03  7.92e-06  1.04e-04  6.36e-01  
 16  +4.5247e-01  +4.8830e-01  3.58e-02  1.58e-05  2.48e-03  4.22e-06  6.03e-05  5.13e-01  
 17  +4.4559e-01  +4.5800e-01  1.24e-02  5.24e-06  8.25e-04  1.35e-06  2.10e-05  7.45e-01  
 18  +4.4549e-01  +4.5747e-01  1.20e-02  5.11e-06  8.03e-04  1.26e-06  2.08e-05  4.62e-02  
 19  +4.4549e-01  +4.5746e-01  1.20e-02  5.10e-06  8.02e-04  1.26e-06  2.08e-05  2.22e-02  
 20  +4.4510e-01  +4.5583e-01  1.07e-02  4.50e-06  7.08e-04  1.14e-06  1.82e-05  2.98e-01  
 21  +4.4238e-01  +4.4465e-01  2.27e-03  9.41e-07  1.48e-04  2.06e-07  3.93e-06  9.90e-01  
 22  +4.4165e-01  +4.4180e-01  1.46e-04  6.00e-08  9.44e-06  1.33e-08  2.54e-07  9.43e-01  
 23  +4.4160e-01  +4.4160e-01  1.46e-06  6.02e-10  9.48e-08  1.33e-10  2.55e-09  9.90e-01  
 24  +4.4160e-01  +4.4160e-01  1.46e-08  6.03e-12  9.48e-10  1.33e-12  2.55e-11  9.90e-01  
 25  +4.4160e-01  +4.4160e-01  1.46e-10  6.04e-14  9.48e-12  1.34e-14  2.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.7556ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:23 PM: Optimal value: 4.416e-01
(CVXPY) Aug 30 12:13:23 PM: Compilation took 1.567e-02 seconds
(CVXPY) Aug 30 12:13:23 PM: Solver (including time spent in interface) took 6.246e-02 seconds
Iteration: 10, Objective: 0.4416
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:23 PM: Your problem has 2608 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Finished problem compilation (took 1.560e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2608
  constraints   = 5108
  nnz(P)        = 0
  nnz(A)        = 39126
  cones (total) = 1
    : Nonnegative = 1,  numel = 5108

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8697e-01  +5.2703e+02  5.26e+02  4.05e-01  4.82e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3680e-01  +6.4365e+01  6.38e+01  1.52e-01  2.27e+01  1.34e-02  2.53e-01  8.79e-01  
  3  +5.0923e-01  +1.6337e+01  1.58e+01  1.04e-01  1.54e+01  3.47e-05  2.42e-01  1.94e-01  
  4  +5.0065e-01  +1.5512e+00  1.05e+00  1.02e-02  1.58e+00  7.56e-06  1.44e-01  7.11e-01  
  5  +5.0020e-01  +9.2498e-01  4.25e-01  4.09e-03  6.36e-01  5.52e-06  8.09e-02  5.19e-01  
  6  +5.0006e-01  +8.4089e-01  3.41e-01  3.16e-03  4.93e-01  8.35e-06  2.98e-02  7.47e-01  
  7  +4.9872e-01  +8.0998e-01  3.11e-01  8.98e-04  1.42e-01  5.71e-05  3.06e-03  9.30e-01  
  8  +4.9514e-01  +7.3471e-01  2.40e-01  2.69e-04  4.26e-02  1.18e-04  8.64e-04  8.04e-01  
  9  +4.9457e-01  +7.3016e-01  2.36e-01  2.19e-04  3.46e-02  1.15e-04  6.91e-04  3.53e-01  
 10  +4.9210e-01  +6.9613e-01  2.04e-01  1.51e-04  2.39e-02  7.15e-05  4.76e-04  6.34e-01  
 11  +4.8894e-01  +6.7512e-01  1.86e-01  1.19e-04  1.87e-02  6.07e-05  3.77e-04  3.51e-01  
 12  +4.8752e-01  +6.6411e-01  1.77e-01  1.15e-04  1.82e-02  4.69e-05  3.70e-04  1.61e-01  
 13  +4.7810e-01  +6.1267e-01  1.35e-01  7.17e-05  1.13e-02  3.30e-05  2.39e-04  4.80e-01  
 14  +4.7372e-01  +5.9058e-01  1.17e-01  6.00e-05  9.47e-03  2.73e-05  2.04e-04  1.73e-01  
 15  +4.6451e-01  +5.4476e-01  8.02e-02  3.83e-05  6.03e-03  1.41e-05  1.36e-04  5.06e-01  
 16  +4.5845e-01  +5.1372e-01  5.53e-02  2.46e-05  3.87e-03  4.47e-06  8.95e-05  9.90e-01  
 17  +4.5417e-01  +4.9572e-01  4.15e-02  1.78e-05  2.81e-03  3.40e-06  6.65e-05  3.15e-01  
 18  +4.5006e-01  +4.7833e-01  2.83e-02  1.18e-05  1.86e-03  2.54e-06  4.50e-05  6.34e-01  
 19  +4.4266e-01  +4.4806e-01  5.40e-03  2.19e-06  3.44e-04  5.15e-07  8.81e-06  9.84e-01  
 20  +4.4084e-01  +4.4094e-01  1.02e-04  4.09e-08  6.44e-06  9.08e-09  1.68e-07  9.84e-01  
 21  +4.4080e-01  +4.4080e-01  1.02e-06  4.09e-10  6.44e-08  9.08e-11  1.68e-09  9.90e-01  
 22  +4.4080e-01  +4.4080e-01  1.02e-08  4.09e-12  6.44e-10  9.08e-13  1.68e-11  9.90e-01  
 23  +4.4080e-01  +4.4080e-01  1.02e-10  4.10e-14  6.44e-12  9.12e-15  1.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.2092ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:23 PM: Optimal value: 4.408e-01
(CVXPY) Aug 30 12:13:23 PM: Compilation took 1.560e-02 seconds
(CVXPY) Aug 30 12:13:23 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 11, Objective: 0.4408
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:23 PM: Your problem has 2618 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Finished problem compilation (took 1.556e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2618
  constraints   = 5118
  nnz(P)        = 0
  nnz(A)        = 39709
  cones (total) = 1
    : Nonnegative = 1,  numel = 5118

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8693e-01  +5.2707e+02  5.26e+02  4.05e-01  4.82e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3672e-01  +6.4272e+01  6.37e+01  1.52e-01  2.26e+01  1.34e-02  2.53e-01  8.79e-01  
  3  +5.0921e-01  +1.6308e+01  1.58e+01  1.04e-01  1.53e+01  3.47e-05  2.42e-01  1.95e-01  
  4  +5.0059e-01  +1.4498e+00  9.49e-01  9.28e-03  1.43e+00  7.38e-06  1.37e-01  7.59e-01  
  5  +5.0021e-01  +9.2957e-01  4.29e-01  4.14e-03  6.44e-01  5.84e-06  7.82e-02  5.18e-01  
  6  +5.0007e-01  +9.0094e-01  4.01e-01  3.57e-03  5.56e-01  1.10e-05  2.57e-02  8.61e-01  
  7  +4.9743e-01  +7.8867e-01  2.91e-01  4.28e-04  6.77e-02  1.14e-04  1.38e-03  9.68e-01  
  8  +4.9487e-01  +7.3020e-01  2.35e-01  2.53e-04  4.00e-02  8.80e-05  8.11e-04  6.29e-01  
  9  +4.9395e-01  +7.2118e-01  2.27e-01  2.03e-04  3.22e-02  8.37e-05  6.44e-04  3.56e-01  
 10  +4.9166e-01  +6.9967e-01  2.08e-01  1.54e-04  2.44e-02  7.08e-05  4.88e-04  4.24e-01  
 11  +4.8967e-01  +6.8621e-01  1.97e-01  1.29e-04  2.04e-02  6.32e-05  4.11e-04  2.80e-01  
 12  +4.8779e-01  +6.6948e-01  1.82e-01  1.24e-04  1.96e-02  4.11e-05  3.99e-04  2.62e-01  
 13  +4.8230e-01  +6.3742e-01  1.55e-01  9.20e-05  1.45e-02  2.59e-05  3.02e-04  5.16e-01  
 14  +4.6655e-01  +5.5685e-01  9.03e-02  4.33e-05  6.82e-03  1.29e-05  1.52e-04  6.14e-01  
 15  +4.6411e-01  +5.4532e-01  8.12e-02  3.80e-05  5.98e-03  1.08e-05  1.34e-04  2.63e-01  
 16  +4.5876e-01  +5.2015e-01  6.14e-02  2.74e-05  4.31e-03  6.74e-06  9.98e-05  6.12e-01  
 17  +4.5047e-01  +4.8402e-01  3.36e-02  1.44e-05  2.26e-03  3.45e-06  5.50e-05  5.20e-01  
 18  +4.4380e-01  +4.5467e-01  1.09e-02  4.48e-06  7.05e-04  1.06e-06  1.80e-05  9.90e-01  
 19  +4.4024e-01  +4.4065e-01  4.04e-04  1.65e-07  2.60e-05  3.57e-08  6.89e-07  9.70e-01  
 20  +4.4010e-01  +4.4011e-01  4.06e-06  1.66e-09  2.61e-07  3.58e-10  6.93e-09  9.90e-01  
 21  +4.4010e-01  +4.4010e-01  4.06e-08  1.66e-11  2.61e-09  3.58e-12  6.93e-11  9.90e-01  
 22  +4.4010e-01  +4.4010e-01  4.06e-10  1.66e-13  2.61e-11  3.59e-14  6.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.8103ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:23 PM: Optimal value: 4.401e-01
(CVXPY) Aug 30 12:13:23 PM: Compilation took 1.556e-02 seconds
(CVXPY) Aug 30 12:13:23 PM: Solver (including time spent in interface) took 6.243e-02 seconds
Iteration: 12, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:23 PM: Your problem has 2626 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:23 PM: Finished problem compilation (took 1.642e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2626
  constraints   = 5126
  nnz(P)        = 0
  nnz(A)        = 40156
  cones (total) = 1
    : Nonnegative = 1,  numel = 5126

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8683e-01  +5.2717e+02  5.27e+02  4.06e-01  4.81e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3668e-01  +6.4244e+01  6.37e+01  1.52e-01  2.26e+01  1.34e-02  2.53e-01  8.80e-01  
  3  +5.0920e-01  +1.6303e+01  1.58e+01  1.04e-01  1.53e+01  3.48e-05  2.42e-01  1.96e-01  
  4  +5.0061e-01  +1.4789e+00  9.78e-01  9.57e-03  1.47e+00  7.44e-06  1.39e-01  7.46e-01  
  5  +5.0021e-01  +9.3249e-01  4.32e-01  4.17e-03  6.48e-01  5.81e-06  7.84e-02  5.17e-01  
  6  +5.0007e-01  +9.1457e-01  4.14e-01  3.70e-03  5.75e-01  1.11e-05  2.65e-02  8.48e-01  
  7  +4.9732e-01  +7.9796e-01  3.01e-01  4.42e-04  6.99e-02  1.15e-04  1.43e-03  9.65e-01  
  8  +4.9496e-01  +7.5217e-01  2.57e-01  2.94e-04  4.64e-02  1.06e-04  9.45e-04  4.48e-01  
  9  +4.9599e-01  +7.5114e-01  2.55e-01  2.58e-04  4.09e-02  7.41e-05  8.10e-04  4.82e-01  
 10  +4.9231e-01  +7.0147e-01  2.09e-01  1.45e-04  2.30e-02  5.27e-05  4.56e-04  7.68e-01  
 11  +4.9015e-01  +6.8840e-01  1.98e-01  1.24e-04  1.96e-02  4.71e-05  3.92e-04  2.67e-01  
 12  +4.8535e-01  +6.5225e-01  1.67e-01  1.09e-04  1.72e-02  1.71e-05  3.57e-04  5.52e-01  
 13  +4.7661e-01  +6.0846e-01  1.32e-01  7.23e-05  1.14e-02  1.38e-05  2.44e-04  4.00e-01  
 14  +4.6121e-01  +5.3292e-01  7.17e-02  3.42e-05  5.38e-03  6.32e-06  1.23e-04  6.06e-01  
 15  +4.5971e-01  +5.2652e-01  6.68e-02  3.08e-05  4.84e-03  5.99e-06  1.11e-04  2.54e-01  
 16  +4.5499e-01  +5.0614e-01  5.11e-02  2.24e-05  3.52e-03  4.61e-06  8.27e-05  3.90e-01  
 17  +4.5134e-01  +4.8927e-01  3.79e-02  1.59e-05  2.51e-03  3.68e-06  5.98e-05  9.29e-01  
 18  +4.4590e-01  +4.6721e-01  2.13e-02  8.75e-06  1.38e-03  2.07e-06  3.40e-05  5.44e-01  
 19  +4.3988e-01  +4.4278e-01  2.91e-03  1.18e-06  1.85e-04  2.66e-07  4.79e-06  8.87e-01  
 20  +4.3894e-01  +4.3906e-01  1.21e-04  4.88e-08  7.67e-06  1.15e-08  2.01e-07  9.89e-01  
 21  +4.3890e-01  +4.3890e-01  1.24e-06  4.99e-10  7.84e-08  1.17e-10  2.06e-09  9.90e-01  
 22  +4.3890e-01  +4.3890e-01  1.24e-08  5.00e-12  7.85e-10  1.17e-12  2.06e-11  9.90e-01  
 23  +4.3890e-01  +4.3890e-01  1.24e-10  5.00e-14  7.85e-12  1.17e-14  2.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.4498ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:24 PM: Optimal value: 4.389e-01
(CVXPY) Aug 30 12:13:24 PM: Compilation took 1.642e-02 seconds
(CVXPY) Aug 30 12:13:24 PM: Solver (including time spent in interface) took 6.208e-02 seconds
Iteration: 13, Objective: 0.4389
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:24 PM: Your problem has 2629 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:24 PM: Finished problem compilation (took 1.510e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2629
  constraints   = 5129
  nnz(P)        = 0
  nnz(A)        = 40304
  cones (total) = 1
    : Nonnegative = 1,  numel = 5129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8688e-01  +5.2706e+02  5.26e+02  4.05e-01  4.81e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3664e-01  +6.4180e+01  6.36e+01  1.52e-01  2.25e+01  1.34e-02  2.52e-01  8.80e-01  
  3  +5.0919e-01  +1.6285e+01  1.58e+01  1.04e-01  1.53e+01  3.47e-05  2.42e-01  1.96e-01  
  4  +5.0062e-01  +1.5024e+00  1.00e+00  9.80e-03  1.51e+00  7.49e-06  1.40e-01  7.35e-01  
  5  +5.0018e-01  +9.0123e-01  4.01e-01  3.87e-03  6.01e-01  5.74e-06  7.36e-02  5.65e-01  
  6  +5.0005e-01  +9.7322e-01  4.73e-01  4.02e-03  6.26e-01  1.37e-05  2.46e-02  8.73e-01  
  7  +4.9725e-01  +8.2566e-01  3.28e-01  4.90e-04  7.74e-02  1.13e-04  1.58e-03  9.46e-01  
  8  +4.9501e-01  +7.7273e-01  2.78e-01  3.25e-04  5.13e-02  1.02e-04  1.04e-03  4.54e-01  
  9  +4.9660e-01  +7.6927e-01  2.73e-01  2.97e-04  4.69e-02  6.39e-05  9.28e-04  4.81e-01  
 10  +4.9377e-01  +7.2917e-01  2.35e-01  1.86e-04  2.94e-02  5.85e-05  5.83e-04  5.69e-01  
 11  +4.9165e-01  +7.0853e-01  2.17e-01  1.47e-04  2.33e-02  4.71e-05  4.63e-04  4.22e-01  
 12  +4.8941e-01  +6.8920e-01  2.00e-01  1.40e-04  2.21e-02  3.16e-05  4.47e-04  2.73e-01  
 13  +4.8284e-01  +6.5190e-01  1.69e-01  9.88e-05  1.56e-02  2.81e-05  3.23e-04  3.34e-01  
 14  +4.7270e-01  +5.9506e-01  1.22e-01  6.48e-05  1.02e-02  1.31e-05  2.23e-04  6.05e-01  
 15  +4.5807e-01  +5.2282e-01  6.48e-02  3.04e-05  4.78e-03  5.53e-06  1.11e-04  6.72e-01  
 16  +4.5414e-01  +5.0599e-01  5.19e-02  2.32e-05  3.64e-03  4.51e-06  8.61e-05  4.05e-01  
 17  +4.5225e-01  +4.9798e-01  4.57e-02  2.00e-05  3.15e-03  4.00e-06  7.52e-05  1.74e-01  
 18  +4.4673e-01  +4.7322e-01  2.65e-02  1.10e-05  1.73e-03  2.57e-06  4.25e-05  9.70e-01  
 19  +4.3939e-01  +4.4344e-01  4.05e-03  1.66e-06  2.60e-04  3.79e-07  6.76e-06  9.90e-01  
 20  +4.3806e-01  +4.3824e-01  1.80e-04  7.33e-08  1.15e-05  1.67e-08  3.04e-07  9.82e-01  
 21  +4.3800e-01  +4.3800e-01  1.98e-06  8.07e-10  1.27e-07  1.85e-10  3.36e-09  9.89e-01  
 22  +4.3800e-01  +4.3800e-01  1.99e-08  8.08e-12  1.27e-09  1.85e-12  3.36e-11  9.90e-01  
 23  +4.3800e-01  +4.3800e-01  1.99e-10  8.08e-14  1.27e-11  1.85e-14  3.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 58.625ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:24 PM: Optimal value: 4.380e-01
(CVXPY) Aug 30 12:13:24 PM: Compilation took 1.510e-02 seconds
(CVXPY) Aug 30 12:13:24 PM: Solver (including time spent in interface) took 6.259e-02 seconds
Iteration: 14, Objective: 0.4380
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:13:24 PM: Your problem has 2633 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:13:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:13:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:13:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:13:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:13:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:13:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:13:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:13:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:13:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:13:24 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2633
  constraints   = 5133
  nnz(P)        = 0
  nnz(A)        = 40469
  cones (total) = 1
    : Nonnegative = 1,  numel = 5133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8682e-01  +5.2713e+02  5.27e+02  4.06e-01  4.81e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3660e-01  +6.4151e+01  6.36e+01  1.52e-01  2.25e+01  1.34e-02  2.52e-01  8.81e-01  
  3  +5.0919e-01  +1.6282e+01  1.58e+01  1.04e-01  1.52e+01  3.48e-05  2.42e-01  1.97e-01  
  4  +5.0063e-01  +1.5176e+00  1.02e+00  9.95e-03  1.53e+00  7.52e-06  1.41e-01  7.29e-01  
  5  +5.0020e-01  +9.2512e-01  4.25e-01  4.10e-03  6.37e-01  5.84e-06  7.69e-02  5.43e-01  
  6  +5.0007e-01  +9.2421e-01  4.24e-01  3.81e-03  5.93e-01  1.11e-05  2.81e-02  7.97e-01  
  7  +4.9755e-01  +8.1546e-01  3.18e-01  5.37e-04  8.49e-02  1.03e-04  1.75e-03  9.56e-01  
  8  +4.9508e-01  +7.6093e-01  2.66e-01  3.20e-04  5.05e-02  1.00e-04  1.03e-03  5.38e-01  
  9  +4.9645e-01  +7.6372e-01  2.67e-01  3.00e-04  4.75e-02  7.14e-05  9.44e-04  4.04e-01  
 10  +4.9333e-01  +7.2814e-01  2.35e-01  1.85e-04  2.92e-02  7.43e-05  5.81e-04  5.22e-01  
 11  +4.9131e-01  +7.1002e-01  2.19e-01  1.48e-04  2.34e-02  6.28e-05  4.68e-04  3.72e-01  
 12  +4.8782e-01  +6.7699e-01  1.89e-01  1.33e-04  2.10e-02  2.54e-05  4.31e-04  5.06e-01  
 13  +4.8273e-01  +6.4919e-01  1.66e-01  1.02e-04  1.61e-02  2.30e-05  3.37e-04  2.69e-01  
 14  +4.6975e-01  +5.7814e-01  1.08e-01  5.58e-05  8.78e-03  5.33e-06  1.94e-04  9.90e-01  
 15  +4.6153e-01  +5.3907e-01  7.75e-02  3.73e-05  5.86e-03  4.28e-06  1.34e-04  4.57e-01  
 16  +4.5684e-01  +5.1809e-01  6.13e-02  2.80e-05  4.41e-03  3.76e-06  1.03e-04  3.73e-01  
 17  +4.5248e-01  +4.9917e-01  4.67e-02  2.05e-05  3.22e-03  2.99e-06  7.71e-05  3.16e-01  
 18  +4.4905e-01  +4.8258e-01  3.35e-02  1.41e-05  2.21e-03  3.25e-06  5.36e-05  9.90e-01  
 19  +4.4359e-01  +4.6058e-01  1.70e-02  7.00e-06  1.10e-03  1.63e-06  2.77e-05  5.42e-01  
 20  +4.3883e-01  +4.4128e-01  2.45e-03  9.99e-07  1.57e-04  2.31e-07  4.10e-06  9.06e-01  
 21  +4.3802e-01  +4.3807e-01  5.09e-05  2.07e-08  3.25e-06  4.80e-09  8.58e-08  9.90e-01  
 22  +4.3800e-01  +4.3800e-01  5.09e-07  2.07e-10  3.26e-08  4.80e-11  8.59e-10  9.90e-01  
 23  +4.3800e-01  +4.3800e-01  5.09e-09  2.08e-12  3.26e-10  4.81e-13  8.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.1544ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:13:24 PM: Problem status: optimal
(CVXPY) Aug 30 12:13:24 PM: Optimal value: 4.380e-01
(CVXPY) Aug 30 12:13:24 PM: Compilation took 1.563e-02 seconds
(CVXPY) Aug 30 12:13:24 PM: Solver (including time spent in interface) took 6.272e-02 seconds
FULL MODEL:
  Accruacy: 0.5324
  Our objective: 0.06480000000000002

IF 
    (x1 = 1 AND x5 = 1 AND x2 = 0)                                             <-- (term's our objective: 0.022800000000000042)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x5 = 0)            <-- (term's our objective: 0.007999999999999952)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.007999999999999965)
 OR (x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x6 = 0) <-- (term's our objective: 0.003200000000000032)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x0 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0032000000000000093)
 OR (x2 = 1 AND x3 = 1 AND x0 = 0 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.002399999999999963)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0036000000000000086)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x6 = 0) <-- (term's our objective: 0.0027999999999999883)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0036000000000000545)
 OR (x1 = 1 AND x2 = 1 AND x5 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0023999999999999846)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0019999999999999627)
 OR (x2 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0019999999999999627)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x6 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0007999999999999865)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.022800000000000042
    Its accruacy: 0.5114
    Its hamming distance: 8
  Shortest hamming distance: 0
    Its our objective: 0.007999999999999965
  Highest accruacy: 0.5114
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

