Command:
python test_script.py -s smallest_subclass -d 2 -n 1000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.37
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 2.

Computed total variation: 0.37
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:01:56 PM: Your problem has 505 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:01:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:01:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:01:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:01:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:01:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:01:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:01:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:01:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:01:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:01:56 PM: Finished problem compilation (took 5.069e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 505
  constraints   = 1005
  nnz(P)        = 0
  nnz(A)        = 2505
  cones (total) = 1
    : Nonnegative = 1,  numel = 1005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0107e+02  5.01e+02  9.47e-01  2.19e+01  1.00e+00  1.00e+00   ------   
  1  +6.3655e-01  +8.7821e+01  8.72e+01  2.58e-01  1.03e+01  4.49e-03  3.90e-01  7.25e-01  
  2  +5.5630e-01  +1.6149e+01  1.56e+01  1.15e-01  5.24e+00  5.43e-03  2.07e-01  6.15e-01  
  3  +4.9978e-01  +1.6283e+00  1.13e+00  2.34e-02  1.01e+00  2.63e-03  1.89e-01  3.93e-01  
  4  +4.9555e-01  +9.4609e-01  4.51e-01  7.50e-03  3.37e-01  3.41e-03  3.14e-02  8.80e-01  
  5  +4.4106e-01  +8.5963e-01  4.19e-01  1.00e-03  4.62e-02  3.04e-02  2.80e-03  9.20e-01  
  6  +4.1894e-01  +6.0080e-01  1.82e-01  5.33e-04  2.40e-02  2.19e-04  1.82e-03  5.53e-01  
  7  +3.7907e-01  +4.0403e-01  2.50e-02  6.19e-05  2.77e-03  3.75e-06  2.59e-04  8.77e-01  
  8  +3.7125e-01  +3.7180e-01  5.48e-04  1.25e-06  5.61e-05  1.55e-07  6.10e-06  9.90e-01  
  9  +3.7110e-01  +3.7111e-01  5.47e-06  1.25e-08  5.60e-07  1.54e-09  6.11e-08  9.90e-01  
 10  +3.7110e-01  +3.7110e-01  5.47e-08  1.25e-10  5.60e-09  1.54e-11  6.11e-10  9.90e-01  
 11  +3.7110e-01  +3.7110e-01  5.47e-10  1.25e-12  5.60e-11  1.55e-13  6.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0603ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:01:56 PM: Optimal value: 3.711e-01
(CVXPY) Aug 30 12:01:56 PM: Compilation took 5.069e-03 seconds
(CVXPY) Aug 30 12:01:56 PM: Solver (including time spent in interface) took 2.683e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3711
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:01:56 PM: Your problem has 506 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:01:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:01:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:01:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:01:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:01:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:01:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:01:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:01:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:01:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:01:56 PM: Finished problem compilation (took 2.675e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 506
  constraints   = 1006
  nnz(P)        = 0
  nnz(A)        = 2723
  cones (total) = 1
    : Nonnegative = 1,  numel = 1006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +5.0173e+02  5.01e+02  9.48e-01  2.29e+01  1.00e+00  1.01e+00   ------   
  1  +6.3497e-01  +8.8126e+01  8.75e+01  2.59e-01  1.08e+01  4.49e-03  3.93e-01  7.24e-01  
  2  +5.5579e-01  +1.6062e+01  1.55e+01  1.14e-01  5.41e+00  5.54e-03  2.05e-01  6.25e-01  
  3  +5.0194e-01  +2.2763e+00  1.77e+00  3.60e-02  1.61e+00  2.95e-03  1.92e-01  2.78e-01  
  4  +4.9886e-01  +8.9307e-01  3.94e-01  7.43e-03  3.49e-01  1.54e-03  3.48e-02  8.33e-01  
  5  +4.5949e-01  +9.2253e-01  4.63e-01  9.97e-04  4.89e-02  2.29e-02  2.51e-03  9.51e-01  
  6  +4.3676e-01  +8.3039e-01  3.94e-01  7.00e-04  3.41e-02  1.90e-02  1.79e-03  3.80e-01  
  7  +4.0026e-01  +6.4175e-01  2.41e-01  4.98e-04  2.38e-02  1.54e-04  1.43e-03  6.27e-01  
  8  +3.3948e-01  +4.0247e-01  6.30e-02  1.14e-04  5.38e-03  2.34e-05  3.76e-04  7.66e-01  
  9  +3.1628e-01  +3.1886e-01  2.57e-03  4.72e-06  2.21e-04  5.56e-07  1.80e-05  9.64e-01  
 10  +3.1511e-01  +3.1514e-01  2.57e-05  4.71e-08  2.21e-06  5.58e-09  1.83e-07  9.90e-01  
 11  +3.1510e-01  +3.1510e-01  2.57e-07  4.71e-10  2.21e-08  5.58e-11  1.83e-09  9.90e-01  
 12  +3.1510e-01  +3.1510e-01  2.57e-09  4.71e-12  2.21e-10  5.58e-13  1.83e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9912ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:56 PM: Problem status: optimal
(CVXPY) Aug 30 12:01:56 PM: Optimal value: 3.151e-01
(CVXPY) Aug 30 12:01:56 PM: Compilation took 2.675e-03 seconds
(CVXPY) Aug 30 12:01:56 PM: Solver (including time spent in interface) took 2.565e-03 seconds
FULL MODEL:
  Accruacy: 0.685
  Our objective: 0.37000000000000005

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.37000000000000005)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.37000000000000005
    Its accruacy: 0.685
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.37000000000000005
  Highest accruacy: 0.685
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

