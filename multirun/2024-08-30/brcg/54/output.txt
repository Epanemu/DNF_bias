Command:
python test_script.py -s smallest_subclass -d 2 -n 100 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.32
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 2.

Computed total variation: 0.32
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:01:45 PM: Your problem has 55 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:01:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:01:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:01:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:01:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:01:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:01:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:01:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:01:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:01:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:01:45 PM: Finished problem compilation (took 4.191e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 255
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9393e-01  +5.0895e+01  5.04e+01  8.48e-01  6.51e+00  1.00e+00  1.04e+00   ------   
  1  +6.2897e-01  +9.1958e+00  8.57e+00  2.33e-01  2.93e+00  4.47e-03  4.03e-01  7.27e-01  
  2  +5.3447e-01  +1.5672e+00  1.03e+00  5.58e-02  7.78e-01  6.49e-03  1.38e-01  8.25e-01  
  3  +5.2443e-01  +1.4323e+00  9.08e-01  3.10e-02  4.41e-01  9.91e-03  7.87e-02  4.62e-01  
  4  +5.0653e-01  +1.3139e+00  8.07e-01  2.44e-02  3.47e-01  7.56e-03  6.56e-02  3.76e-01  
  5  +4.7083e-01  +1.0296e+00  5.59e-01  1.04e-02  1.49e-01  7.39e-03  3.03e-02  5.54e-01  
  6  +3.9954e-01  +5.0088e-01  1.01e-01  2.29e-03  3.19e-02  2.61e-04  9.64e-03  9.90e-01  
  7  +3.7304e-01  +3.8246e-01  9.42e-03  1.99e-04  2.77e-03  1.39e-05  9.73e-04  9.08e-01  
  8  +3.7014e-01  +3.7025e-01  1.12e-04  2.37e-06  3.29e-05  2.17e-07  1.18e-05  9.90e-01  
  9  +3.7010e-01  +3.7010e-01  1.12e-06  2.37e-08  3.29e-07  2.16e-09  1.18e-07  9.90e-01  
 10  +3.7010e-01  +3.7010e-01  1.12e-08  2.37e-10  3.29e-09  2.16e-11  1.18e-09  9.90e-01  
 11  +3.7010e-01  +3.7010e-01  1.12e-10  2.37e-12  3.29e-11  2.16e-13  1.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 285.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:01:45 PM: Optimal value: 3.701e-01
(CVXPY) Aug 30 12:01:45 PM: Compilation took 4.191e-03 seconds
(CVXPY) Aug 30 12:01:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:01:45 PM: Your problem has 56 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:01:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:01:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:01:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:01:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:01:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:01:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:01:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:01:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:01:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:01:45 PM: Finished problem compilation (took 3.472e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 275
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9114e-01  +5.1434e+01  5.09e+01  8.50e-01  6.72e+00  1.00e+00  1.06e+00   ------   
  1  +6.1968e-01  +9.3333e+00  8.71e+00  2.38e-01  3.06e+00  4.42e-03  4.18e-01  7.23e-01  
  2  +5.3313e-01  +1.6247e+00  1.09e+00  5.63e-02  8.16e-01  6.80e-03  1.38e-01  8.27e-01  
  3  +5.2101e-01  +1.5409e+00  1.02e+00  3.22e-02  4.77e-01  1.01e-02  8.10e-02  4.85e-01  
  4  +4.8533e-01  +1.2473e+00  7.62e-01  1.64e-02  2.45e-01  9.16e-03  4.48e-02  5.48e-01  
  5  +4.2916e-01  +7.1804e-01  2.89e-01  5.59e-03  8.27e-02  2.77e-03  1.70e-02  7.10e-01  
  6  +4.1370e-01  +6.4583e-01  2.32e-01  4.09e-03  6.03e-02  2.22e-03  1.28e-02  3.21e-01  
  7  +3.9657e-01  +5.5811e-01  1.62e-01  3.30e-03  4.81e-02  8.16e-04  1.24e-02  2.73e-01  
  8  +3.7357e-01  +4.3720e-01  6.36e-02  1.27e-03  1.83e-02  3.79e-04  4.79e-03  6.74e-01  
  9  +3.4629e-01  +3.6308e-01  1.68e-02  2.84e-04  4.10e-03  8.45e-05  1.10e-03  9.24e-01  
 10  +3.4019e-01  +3.4041e-01  2.23e-04  3.80e-06  5.47e-05  9.76e-07  1.54e-05  9.87e-01  
 11  +3.4010e-01  +3.4010e-01  2.23e-06  3.79e-08  5.47e-07  9.75e-09  1.54e-07  9.90e-01  
 12  +3.4010e-01  +3.4010e-01  2.23e-08  3.79e-10  5.47e-09  9.75e-11  1.54e-09  9.90e-01  
 13  +3.4010e-01  +3.4010e-01  2.23e-10  3.79e-12  5.47e-11  9.75e-13  1.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 368.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:01:45 PM: Optimal value: 3.401e-01
(CVXPY) Aug 30 12:01:45 PM: Compilation took 3.472e-03 seconds
(CVXPY) Aug 30 12:01:45 PM: Solver (including time spent in interface) took 5.023e-04 seconds
FULL MODEL:
  Accruacy: 0.66
  Our objective: 0.32

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.32)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.32
    Its accruacy: 0.66
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.32
  Highest accruacy: 0.66
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

