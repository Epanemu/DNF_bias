Command:
python test_script.py -s smallest_subclass -d 5 -n 50 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.08
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.64
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:45 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:45 PM: Finished problem compilation (took 4.611e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9459e-01  +2.5907e+01  2.54e+01  8.19e-01  5.78e+00  1.00e+00  1.07e+00   ------   
  1  +5.8936e-01  +5.4254e+00  4.84e+00  3.04e-01  3.08e+00  3.96e-03  5.35e-01  6.49e-01  
  2  +5.1448e-01  +9.9451e-01  4.80e-01  5.34e-02  6.39e-01  1.24e-02  1.52e-01  9.90e-01  
  3  +4.9142e-01  +8.5031e-01  3.59e-01  2.41e-02  3.00e-01  1.28e-02  7.59e-02  5.91e-01  
  4  +4.5719e-01  +6.1394e-01  1.57e-01  7.59e-03  9.54e-02  6.42e-03  2.73e-02  6.59e-01  
  5  +4.3655e-01  +4.9423e-01  5.77e-02  2.57e-03  3.22e-02  1.97e-03  1.05e-02  6.83e-01  
  6  +4.2207e-01  +4.2755e-01  5.48e-03  2.25e-04  2.81e-03  8.17e-05  1.09e-03  9.62e-01  
  7  +4.2012e-01  +4.2019e-01  6.54e-05  2.65e-06  3.31e-05  9.37e-07  1.32e-05  9.88e-01  
  8  +4.2010e-01  +4.2010e-01  6.53e-07  2.65e-08  3.31e-07  9.37e-09  1.32e-07  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  6.53e-09  2.65e-10  3.31e-09  9.37e-11  1.32e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 196.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:45 PM: Optimal value: 4.201e-01
(CVXPY) Aug 30 12:05:45 PM: Compilation took 4.611e-03 seconds
(CVXPY) Aug 30 12:05:45 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:45 PM: Your problem has 37 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:45 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 37
  constraints   = 62
  nnz(P)        = 0
  nnz(A)        = 222
  cones (total) = 1
    : Nonnegative = 1,  numel = 62

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9162e-01  +2.6375e+01  2.59e+01  8.22e-01  5.89e+00  1.00e+00  1.09e+00   ------   
  1  +5.7958e-01  +5.4977e+00  4.92e+00  3.08e-01  3.16e+00  3.92e-03  5.51e-01  6.48e-01  
  2  +5.1061e-01  +1.2606e+00  7.50e-01  7.69e-02  9.33e-01  1.25e-02  2.08e-01  8.53e-01  
  3  +4.5936e-01  +8.1662e-01  3.57e-01  2.08e-02  2.65e-01  1.03e-02  6.75e-02  7.84e-01  
  4  +4.1752e-01  +5.2823e-01  1.11e-01  5.52e-03  6.99e-02  2.46e-03  2.08e-02  7.34e-01  
  5  +4.0537e-01  +4.7999e-01  7.46e-02  2.92e-03  3.72e-02  1.84e-03  1.16e-02  5.74e-01  
  6  +3.8471e-01  +3.9698e-01  1.23e-02  4.38e-04  5.58e-03  1.99e-04  1.92e-03  9.17e-01  
  7  +3.8017e-01  +3.8035e-01  1.82e-04  6.44e-06  8.20e-05  2.66e-06  2.89e-05  9.86e-01  
  8  +3.8010e-01  +3.8010e-01  1.82e-06  6.44e-08  8.20e-07  2.66e-08  2.89e-07  9.90e-01  
  9  +3.8010e-01  +3.8010e-01  1.82e-08  6.44e-10  8.20e-09  2.66e-10  2.89e-09  9.90e-01  
 10  +3.8010e-01  +3.8010e-01  1.82e-10  6.44e-12  8.20e-11  2.66e-12  2.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 199.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:45 PM: Optimal value: 3.801e-01
(CVXPY) Aug 30 12:05:45 PM: Compilation took 2.999e-03 seconds
(CVXPY) Aug 30 12:05:45 PM: Solver (including time spent in interface) took 7.524e-04 seconds
Iteration: 2, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:45 PM: Your problem has 47 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:45 PM: Finished problem compilation (took 3.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 47
  constraints   = 72
  nnz(P)        = 0
  nnz(A)        = 264
  cones (total) = 1
    : Nonnegative = 1,  numel = 72

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8697e-01  +2.6239e+01  2.58e+01  8.34e-01  5.70e+00  1.00e+00  1.09e+00   ------   
  1  +5.5789e-01  +5.5274e+00  4.97e+00  3.29e-01  2.99e+00  3.93e-03  5.57e-01  6.40e-01  
  2  +4.9238e-01  +1.1997e+00  7.07e-01  7.00e-02  8.32e-01  1.41e-02  1.89e-01  9.06e-01  
  3  +4.1118e-01  +8.9436e-01  4.83e-01  2.30e-02  2.83e-01  1.52e-02  7.31e-02  7.42e-01  
  4  +3.4414e-01  +5.1342e-01  1.69e-01  6.72e-03  8.22e-02  4.98e-03  2.48e-02  6.77e-01  
  5  +3.0593e-01  +3.2369e-01  1.78e-02  7.43e-04  8.88e-03  3.11e-04  3.18e-03  9.05e-01  
  6  +3.0037e-01  +3.0081e-01  4.37e-04  1.85e-05  2.20e-04  5.83e-06  8.20e-05  9.74e-01  
  7  +3.0021e-01  +3.0022e-01  1.42e-05  6.05e-07  7.09e-06  5.77e-08  3.01e-06  9.72e-01  
  8  +3.0020e-01  +3.0020e-01  1.43e-07  6.10e-09  7.14e-08  5.86e-10  3.08e-08  9.90e-01  
  9  +3.0020e-01  +3.0020e-01  1.43e-09  6.10e-11  7.14e-10  5.86e-12  3.08e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 207.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:45 PM: Optimal value: 3.002e-01
(CVXPY) Aug 30 12:05:45 PM: Compilation took 3.003e-03 seconds
(CVXPY) Aug 30 12:05:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:45 PM: Your problem has 57 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:45 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 82
  nnz(P)        = 0
  nnz(A)        = 318
  cones (total) = 1
    : Nonnegative = 1,  numel = 82

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7680e-01  +2.6440e+01  2.60e+01  8.45e-01  5.67e+00  1.00e+00  1.10e+00   ------   
  1  +5.0183e-01  +5.6043e+00  5.10e+00  3.39e-01  2.92e+00  4.00e-03  5.61e-01  6.32e-01  
  2  +4.1334e-01  +1.3464e+00  9.33e-01  7.31e-02  8.40e-01  1.57e-02  1.94e-01  8.60e-01  
  3  +3.1001e-01  +7.3492e-01  4.25e-01  2.17e-02  2.57e-01  9.26e-03  6.64e-02  8.14e-01  
  4  +2.3303e-01  +3.1962e-01  8.66e-02  3.82e-03  4.61e-02  1.44e-03  1.36e-02  9.02e-01  
  5  +2.1033e-01  +2.3377e-01  2.34e-02  1.03e-03  1.24e-02  2.75e-04  3.91e-03  8.80e-01  
  6  +2.0082e-01  +2.0151e-01  6.95e-04  3.01e-05  3.61e-04  5.57e-06  1.18e-04  9.71e-01  
  7  +2.0052e-01  +2.0056e-01  4.15e-05  1.89e-06  2.17e-05  1.43e-07  8.60e-06  9.47e-01  
  8  +2.0050e-01  +2.0050e-01  4.71e-07  2.17e-08  2.47e-07  1.80e-09  1.02e-07  9.88e-01  
  9  +2.0050e-01  +2.0050e-01  4.71e-09  2.17e-10  2.47e-09  1.80e-11  1.02e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 254µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:45 PM: Optimal value: 2.005e-01
(CVXPY) Aug 30 12:05:45 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:05:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:05:45 PM: Your problem has 60 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:05:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:05:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:05:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:05:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:05:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:05:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:05:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:05:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:05:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:05:45 PM: Finished problem compilation (took 2.347e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 85
  nnz(P)        = 0
  nnz(A)        = 329
  cones (total) = 1
    : Nonnegative = 1,  numel = 85

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6969e-01  +2.6751e+01  2.63e+01  8.47e-01  5.63e+00  1.00e+00  1.11e+00   ------   
  1  +4.6434e-01  +5.7807e+00  5.32e+00  3.46e-01  2.96e+00  4.04e-03  5.79e-01  6.17e-01  
  2  +3.7182e-01  +1.3324e+00  9.61e-01  7.48e-02  8.40e-01  1.71e-02  1.93e-01  8.76e-01  
  3  +2.7572e-01  +7.5382e-01  4.78e-01  2.57e-02  2.97e-01  1.00e-02  7.73e-02  7.54e-01  
  4  +2.2094e-01  +4.0629e-01  1.85e-01  9.36e-03  1.07e-01  3.53e-03  3.18e-02  6.21e-01  
  5  +1.8637e-01  +2.0965e-01  2.33e-02  1.19e-03  1.33e-02  3.34e-04  4.52e-03  8.80e-01  
  6  +1.8086e-01  +1.8193e-01  1.07e-03  5.50e-05  6.12e-04  1.22e-05  2.18e-04  9.52e-01  
  7  +1.8056e-01  +1.8071e-01  1.46e-04  7.25e-06  7.89e-05  8.97e-07  3.67e-05  9.09e-01  
  8  +1.8050e-01  +1.8051e-01  3.74e-06  1.84e-07  2.00e-06  1.91e-08  1.03e-06  9.74e-01  
  9  +1.8050e-01  +1.8050e-01  3.73e-08  1.84e-09  2.00e-08  1.90e-10  1.03e-08  9.90e-01  
 10  +1.8050e-01  +1.8050e-01  3.73e-10  1.84e-11  2.00e-10  1.90e-12  1.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 415µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:05:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:05:45 PM: Optimal value: 1.805e-01
(CVXPY) Aug 30 12:05:45 PM: Compilation took 2.347e-03 seconds
(CVXPY) Aug 30 12:05:45 PM: Solver (including time spent in interface) took 9.999e-04 seconds
FULL MODEL:
  Accruacy: 0.82
  Our objective: 0.64

IF 
    (x3 = 1 AND x1 = 0 AND x4 = 0)            <-- (term's our objective: 0.16000000000000003)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.19999999999999996)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1) <-- (term's our objective: 0.07999999999999996)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0) <-- (term's our objective: 0.08000000000000003)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.12000000000000002)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

