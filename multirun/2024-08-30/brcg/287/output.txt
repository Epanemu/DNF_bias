Command:
python test_script.py -s smallest_subclass -d 8 -n 50 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 8.

Computed total variation: 0.88
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:05 PM: Your problem has 42 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:05 PM: Finished problem compilation (took 9.963e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 67
  nnz(P)        = 0
  nnz(A)        = 292
  cones (total) = 1
    : Nonnegative = 1,  numel = 67

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9363e-01  +2.6358e+01  2.59e+01  8.33e-01  6.70e+00  1.00e+00  1.09e+00   ------   
  1  +5.6228e-01  +5.7037e+00  5.14e+00  3.50e-01  3.82e+00  3.76e-03  5.96e-01  6.14e-01  
  2  +4.6639e-01  +1.1674e+00  7.01e-01  7.24e-02  9.65e-01  1.91e-02  1.99e-01  9.90e-01  
  3  +4.0618e-01  +7.2499e-01  3.19e-01  2.16e-02  2.97e-01  1.02e-02  7.09e-02  7.16e-01  
  4  +3.6286e-01  +5.3205e-01  1.69e-01  7.65e-03  1.06e-01  4.99e-03  3.08e-02  7.29e-01  
  5  +3.2761e-01  +3.5055e-01  2.29e-02  1.01e-03  1.38e-02  2.13e-04  4.85e-03  9.15e-01  
  6  +3.2020e-01  +3.2051e-01  3.08e-04  1.34e-05  1.83e-04  2.37e-06  6.78e-05  9.88e-01  
  7  +3.2010e-01  +3.2010e-01  3.08e-06  1.34e-07  1.83e-06  2.37e-08  6.78e-07  9.90e-01  
  8  +3.2010e-01  +3.2010e-01  3.08e-08  1.34e-09  1.83e-08  2.37e-10  6.78e-09  9.90e-01  
  9  +3.2010e-01  +3.2010e-01  3.08e-10  1.34e-11  1.83e-10  2.37e-12  6.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 235.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:05 PM: Optimal value: 3.201e-01
(CVXPY) Aug 30 12:17:05 PM: Compilation took 9.963e-03 seconds
(CVXPY) Aug 30 12:17:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:05 PM: Your problem has 52 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 52
  constraints   = 77
  nnz(P)        = 0
  nnz(A)        = 347
  cones (total) = 1
    : Nonnegative = 1,  numel = 77

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7998e-01  +2.6801e+01  2.63e+01  8.45e-01  6.60e+00  1.00e+00  1.11e+00   ------   
  1  +5.0361e-01  +5.7335e+00  5.23e+00  3.58e-01  3.61e+00  3.83e-03  5.96e-01  6.18e-01  
  2  +3.7828e-01  +1.3413e+00  9.63e-01  8.20e-02  1.04e+00  1.98e-02  2.18e-01  9.00e-01  
  3  +2.9387e-01  +7.0569e-01  4.12e-01  2.37e-02  3.11e-01  9.88e-03  7.88e-02  7.69e-01  
  4  +2.5055e-01  +4.1164e-01  1.61e-01  8.48e-03  1.16e-01  3.48e-03  3.16e-02  6.49e-01  
  5  +2.2578e-01  +2.5007e-01  2.43e-02  1.30e-03  1.75e-02  3.86e-04  5.48e-03  8.60e-01  
  6  +2.2039e-01  +2.2076e-01  3.65e-04  1.97e-05  2.64e-04  4.64e-06  8.61e-05  9.85e-01  
  7  +2.2030e-01  +2.2031e-01  1.05e-05  5.85e-07  7.68e-06  8.35e-08  2.63e-06  9.70e-01  
  8  +2.2030e-01  +2.2030e-01  1.07e-07  5.98e-09  7.82e-08  8.51e-10  2.69e-08  9.90e-01  
  9  +2.2030e-01  +2.2030e-01  1.07e-09  5.98e-11  7.83e-10  8.51e-12  2.70e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 306.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:05 PM: Optimal value: 2.203e-01
(CVXPY) Aug 30 12:17:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:17:05 PM: Solver (including time spent in interface) took 9.893e-03 seconds
Iteration: 2, Objective: 0.2203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:05 PM: Your problem has 62 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 87
  nnz(P)        = 0
  nnz(A)        = 396
  cones (total) = 1
    : Nonnegative = 1,  numel = 87

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6148e-01  +2.7502e+01  2.70e+01  8.54e-01  6.48e+00  1.00e+00  1.13e+00   ------   
  1  +4.0660e-01  +5.8403e+00  5.43e+00  3.56e-01  3.41e+00  4.00e-03  5.92e-01  6.19e-01  
  2  +2.7123e-01  +1.6452e+00  1.37e+00  9.97e-02  1.17e+00  1.74e-02  2.47e-01  7.68e-01  
  3  +1.9740e-01  +7.7645e-01  5.79e-01  3.32e-02  4.22e-01  1.06e-02  9.85e-02  7.66e-01  
  4  +1.4835e-01  +3.0013e-01  1.52e-01  7.94e-03  1.05e-01  3.11e-03  2.65e-02  7.55e-01  
  5  +1.2878e-01  +2.3646e-01  1.08e-01  4.92e-03  6.91e-02  2.12e-03  1.67e-02  5.29e-01  
  6  +1.0413e-01  +1.1565e-01  1.15e-02  5.14e-04  7.24e-03  1.72e-04  1.84e-03  9.16e-01  
  7  +1.0071e-01  +1.0100e-01  2.91e-04  1.32e-05  1.85e-04  2.43e-06  4.84e-05  9.74e-01  
  8  +1.0061e-01  +1.0062e-01  1.27e-05  6.23e-07  8.31e-06  8.24e-08  2.47e-06  9.61e-01  
  9  +1.0060e-01  +1.0060e-01  1.31e-07  6.44e-09  8.55e-08  8.42e-10  2.57e-08  9.90e-01  
 10  +1.0060e-01  +1.0060e-01  1.31e-09  6.44e-11  8.55e-10  8.42e-12  2.57e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 299.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:05 PM: Optimal value: 1.006e-01
(CVXPY) Aug 30 12:17:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:17:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1006
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:05 PM: Your problem has 72 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 97
  nnz(P)        = 0
  nnz(A)        = 439
  cones (total) = 1
    : Nonnegative = 1,  numel = 97

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5424e-01  +2.7847e+01  2.74e+01  8.62e-01  6.33e+00  1.00e+00  1.15e+00   ------   
  1  +3.3814e-01  +5.9295e+00  5.59e+00  3.55e-01  3.23e+00  4.15e-03  5.88e-01  6.17e-01  
  2  +1.8837e-01  +1.5293e+00  1.34e+00  9.27e-02  1.05e+00  1.67e-02  2.30e-01  7.80e-01  
  3  +1.3490e-01  +5.7168e-01  4.37e-01  2.95e-02  3.51e-01  7.38e-03  8.43e-02  7.73e-01  
  4  +1.0150e-01  +2.5125e-01  1.50e-01  9.32e-03  1.17e-01  2.78e-03  2.93e-02  6.79e-01  
  5  +8.1360e-02  +1.7111e-01  8.98e-02  4.71e-03  6.34e-02  1.58e-03  1.57e-02  6.01e-01  
  6  +6.2991e-02  +7.1635e-02  8.64e-03  4.38e-04  5.93e-03  1.24e-04  1.54e-03  9.16e-01  
  7  +6.0799e-02  +6.1104e-02  3.05e-04  1.59e-05  2.12e-04  2.35e-06  5.73e-05  9.63e-01  
  8  +6.0705e-02  +6.0722e-02  1.69e-05  9.45e-07  1.21e-05  1.18e-07  3.69e-06  9.42e-01  
  9  +6.0700e-02  +6.0700e-02  1.76e-07  9.89e-09  1.26e-07  1.24e-09  3.89e-08  9.90e-01  
 10  +6.0700e-02  +6.0700e-02  1.76e-09  9.89e-11  1.26e-09  1.24e-11  3.89e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 317.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:05 PM: Optimal value: 6.070e-02
(CVXPY) Aug 30 12:17:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:17:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.0607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:17:05 PM: Your problem has 82 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:17:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:17:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 82
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 482
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4727e-01  +2.7850e+01  2.74e+01  8.68e-01  6.19e+00  1.00e+00  1.15e+00   ------   
  1  +2.9395e-01  +6.1926e+00  5.90e+00  3.75e-01  3.23e+00  4.24e-03  6.05e-01  5.90e-01  
  2  +1.0977e-01  +2.1769e+00  2.07e+00  1.32e-01  1.38e+00  2.03e-02  3.05e-01  6.68e-01  
  3  +1.0529e-01  +4.1338e-01  3.08e-01  2.38e-02  2.63e-01  7.41e-03  6.80e-02  8.24e-01  
  4  +7.3505e-02  +1.6726e-01  9.38e-02  6.71e-03  7.65e-02  2.12e-03  2.18e-02  7.68e-01  
  5  +6.3011e-02  +8.0288e-02  1.73e-02  1.22e-03  1.40e-02  3.38e-04  4.12e-03  8.51e-01  
  6  +6.0764e-02  +6.1564e-02  8.00e-04  5.77e-05  6.51e-04  1.07e-05  2.00e-04  9.52e-01  
  7  +6.0621e-02  +6.0728e-02  1.07e-04  8.25e-06  8.69e-05  8.11e-07  3.41e-05  8.88e-01  
  8  +6.0600e-02  +6.0603e-02  2.23e-06  1.73e-07  1.80e-06  1.61e-08  7.45e-07  9.79e-01  
  9  +6.0600e-02  +6.0600e-02  2.23e-08  1.73e-09  1.80e-08  1.61e-10  7.46e-09  9.90e-01  
 10  +6.0600e-02  +6.0600e-02  2.23e-10  1.73e-11  1.80e-10  1.61e-12  7.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 384.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:17:05 PM: Problem status: optimal
(CVXPY) Aug 30 12:17:05 PM: Optimal value: 6.060e-02
(CVXPY) Aug 30 12:17:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 30 12:17:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.94
  Our objective: 0.88

IF 
    (x4 = 1 AND x6 = 0)                                                        <-- (term's our objective: 0.31999999999999995)
 OR (x2 = 1 AND x5 = 1 AND x0 = 0)                                             <-- (term's our objective: 0.15999999999999995)
 OR (x1 = 1 AND x6 = 1 AND x3 = 0)                                             <-- (term's our objective: 0.19999999999999996)
 OR (x0 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.12)
 OR (x5 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x7 = 0)                       <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x3 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x7 = 0) <-- (term's our objective: 0.07999999999999996)
 OR (x4 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.07999999999999996)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.31999999999999995
    Its accruacy: 0.66
    Its hamming distance: 8
  Shortest hamming distance: 5
    Its our objective: 0.07999999999999996
  Highest accruacy: 0.66
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

