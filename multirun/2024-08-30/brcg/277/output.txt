Command:
python test_script.py -s smallest_subclass -d 7 -n 50000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0104
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 7.

Computed total variation: 0.045840000000000006
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:38 PM: Your problem has 25015 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:38 PM: Finished problem compilation (took 7.814e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25015
  constraints   = 50015
  nnz(P)        = 0
  nnz(A)        = 250015
  cones (total) = 1
    : Nonnegative = 1,  numel = 50015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.36e+02  1.00e+00  1.00e+00   ------   
  1  +5.8817e-01  +5.2537e+03  5.25e+03  4.08e-01  1.48e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3830e-01  +6.5389e+02  6.53e+02  1.62e-01  7.52e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6881e+02  1.68e+02  1.43e-01  6.66e+01  3.48e-05  2.47e-01  1.52e-01  
  4  +5.0105e-01  +1.3667e+01  1.32e+01  3.74e-02  1.70e+01  4.18e-06  1.95e-01  4.46e-01  
  5  +4.9999e-01  +9.9976e-01  5.00e-01  1.50e-03  7.07e-01  2.45e-05  1.87e-01  3.43e-01  
  6  +5.0000e-01  +5.3837e-01  3.84e-02  1.14e-04  5.42e-02  1.64e-06  1.49e-02  9.20e-01  
  7  +5.0000e-01  +5.2342e-01  2.34e-02  6.98e-05  3.31e-02  1.55e-06  5.37e-03  7.18e-01  
  8  +4.9998e-01  +5.2383e-01  2.39e-02  6.25e-05  2.96e-02  1.33e-05  4.78e-04  9.53e-01  
  9  +4.9885e-01  +5.2122e-01  2.24e-02  2.80e-06  1.33e-03  6.20e-04  9.09e-06  9.81e-01  
 10  +4.9700e-01  +5.1371e-01  1.67e-02  8.92e-07  4.23e-04  1.07e-03  2.91e-06  7.00e-01  
 11  +4.9578e-01  +5.0395e-01  8.17e-03  3.99e-07  1.89e-04  3.06e-04  1.40e-06  6.30e-01  
 12  +4.9403e-01  +4.9530e-01  1.27e-03  5.22e-08  2.47e-05  9.71e-06  2.05e-07  9.38e-01  
 13  +4.9372e-01  +4.9411e-01  3.86e-04  1.56e-08  7.40e-06  9.73e-08  6.27e-08  9.90e-01  
 14  +4.9358e-01  +4.9359e-01  5.16e-06  2.07e-10  9.84e-08  1.27e-09  8.42e-10  9.87e-01  
 15  +4.9358e-01  +4.9358e-01  5.16e-08  2.07e-12  9.84e-10  1.27e-11  8.42e-12  9.90e-01  
 16  +4.9358e-01  +4.9358e-01  5.19e-10  2.08e-14  9.90e-12  1.71e-13  1.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 256.0304ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:38 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:38 PM: Optimal value: 4.936e-01
(CVXPY) Aug 30 12:15:38 PM: Compilation took 7.814e-02 seconds
(CVXPY) Aug 30 12:15:38 PM: Solver (including time spent in interface) took 2.819e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4936
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:38 PM: Your problem has 25025 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:38 PM: Finished problem compilation (took 9.238e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25025
  constraints   = 50025
  nnz(P)        = 0
  nnz(A)        = 264338
  cones (total) = 1
    : Nonnegative = 1,  numel = 50025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.37e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2538e+03  5.25e+03  4.08e-01  1.49e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3829e-01  +6.5380e+02  6.53e+02  1.62e-01  7.55e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6877e+02  1.68e+02  1.43e-01  6.69e+01  3.48e-05  2.47e-01  1.52e-01  
  4  +5.0104e-01  +1.3652e+01  1.32e+01  3.74e-02  1.71e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0001e-01  +1.2168e+00  7.17e-01  2.15e-03  1.02e+00  2.45e-05  1.89e-01  2.46e-01  
  6  +5.0000e-01  +6.2183e-01  1.22e-01  3.63e-04  1.73e-01  2.97e-06  4.18e-02  7.91e-01  
  7  +5.0000e-01  +5.9699e-01  9.70e-02  2.89e-04  1.38e-01  2.32e-06  3.23e-02  2.76e-01  
  8  +5.0000e-01  +5.9468e-01  9.47e-02  2.82e-04  1.34e-01  2.00e-06  2.99e-02  2.30e-01  
  9  +5.0000e-01  +5.9621e-01  9.62e-02  2.87e-04  1.36e-01  1.64e-06  2.86e-02  2.71e-01  
 10  +5.0000e-01  +5.7250e-01  7.25e-02  2.16e-04  1.03e-01  9.51e-07  1.89e-02  5.89e-01  
 11  +5.0000e-01  +5.6477e-01  6.48e-02  1.93e-04  9.18e-02  8.48e-07  1.50e-02  2.69e-01  
 12  +5.0001e-01  +5.6830e-01  6.83e-02  2.04e-04  9.68e-02  1.02e-08  1.32e-02  9.59e-01  
 13  +5.0000e-01  +5.5235e-01  5.23e-02  1.56e-04  7.41e-02  7.99e-09  7.27e-03  6.01e-01  
 14  +5.0000e-01  +5.3073e-01  3.07e-02  8.89e-05  4.23e-02  1.31e-08  1.26e-03  9.90e-01  
 15  +5.0000e-01  +5.3021e-01  3.02e-02  5.52e-06  2.63e-03  8.66e-07  1.75e-05  9.87e-01  
 16  +5.0000e-01  +5.2979e-01  2.98e-02  1.67e-06  7.97e-04  2.80e-06  5.25e-06  7.20e-01  
 17  +4.9984e-01  +5.2867e-01  2.88e-02  1.67e-06  7.95e-04  2.56e-06  5.24e-06  2.41e-02  
 18  +4.9926e-01  +5.2479e-01  2.55e-02  1.63e-06  7.77e-04  1.89e-06  5.15e-06  6.09e-02  
 19  +4.9886e-01  +5.2216e-01  2.33e-02  1.51e-06  7.19e-04  1.55e-06  4.78e-06  1.25e-01  
 20  +4.9847e-01  +5.1901e-01  2.05e-02  1.43e-06  6.83e-04  8.49e-07  4.56e-06  2.83e-01  
 21  +4.9822e-01  +5.1675e-01  1.85e-02  1.38e-06  6.58e-04  6.36e-07  4.56e-06  5.84e-02  
 22  +4.9731e-01  +5.1190e-01  1.46e-02  8.94e-07  4.26e-04  4.68e-07  2.93e-06  4.84e-01  
 23  +4.9723e-01  +5.1133e-01  1.41e-02  8.53e-07  4.07e-04  4.10e-07  2.79e-06  1.56e-01  
 24  +4.9716e-01  +5.1081e-01  1.37e-02  8.26e-07  3.94e-04  3.55e-07  2.69e-06  1.36e-01  
 25  +4.9708e-01  +5.1008e-01  1.30e-02  7.85e-07  3.74e-04  2.35e-07  2.53e-06  3.75e-01  
 26  +4.9612e-01  +5.0521e-01  9.10e-03  4.79e-07  2.28e-04  1.10e-07  1.53e-06  7.28e-01  
 27  +4.9609e-01  +5.0511e-01  9.02e-03  4.79e-07  2.28e-04  1.07e-07  1.53e-06  2.06e-02  
 28  +4.9478e-01  +4.9886e-01  4.08e-03  1.79e-07  8.52e-05  5.60e-08  5.65e-07  6.62e-01  
 29  +4.9476e-01  +4.9888e-01  4.12e-03  1.68e-07  7.99e-05  5.90e-08  5.21e-07  1.53e-01  
 30  +4.9447e-01  +4.9769e-01  3.22e-03  1.58e-07  7.53e-05  3.29e-08  5.21e-07  2.51e-02  
 31  +4.9385e-01  +4.9504e-01  1.19e-03  4.91e-08  2.34e-05  1.69e-08  1.51e-07  7.41e-01  
 32  +4.9334e-01  +4.9387e-01  5.30e-04  1.64e-08  7.79e-06  8.92e-09  4.91e-08  8.00e-01  
 33  +4.9311e-01  +4.9313e-01  1.97e-05  5.97e-10  2.85e-07  3.12e-10  1.80e-09  9.88e-01  
 34  +4.9310e-01  +4.9310e-01  1.97e-07  5.98e-12  2.85e-09  3.12e-12  1.80e-11  9.90e-01  
 35  +4.9310e-01  +4.9310e-01  2.02e-09  6.12e-14  2.92e-11  6.91e-14  3.80e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 615.5391ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:39 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:39 PM: Optimal value: 4.931e-01
(CVXPY) Aug 30 12:15:39 PM: Compilation took 9.238e-02 seconds
(CVXPY) Aug 30 12:15:39 PM: Solver (including time spent in interface) took 6.500e-01 seconds
Iteration: 2, Objective: 0.4931
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:39 PM: Your problem has 25035 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:39 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:39 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:39 PM: Finished problem compilation (took 1.094e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25035
  constraints   = 50035
  nnz(P)        = 0
  nnz(A)        = 296391
  cones (total) = 1
    : Nonnegative = 1,  numel = 50035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.43e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2541e+03  5.25e+03  4.08e-01  1.52e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3827e-01  +6.5363e+02  6.53e+02  1.62e-01  7.72e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1023e-01  +1.6872e+02  1.68e+02  1.43e-01  6.84e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3655e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1529e+00  6.53e-01  1.96e-03  9.49e-01  2.47e-05  1.88e-01  2.72e-01  
  6  +5.0000e-01  +7.4202e-01  2.42e-01  7.23e-04  3.51e-01  8.06e-06  7.93e-02  6.24e-01  
  7  +5.0000e-01  +6.1679e-01  1.17e-01  3.49e-04  1.69e-01  3.51e-06  3.81e-02  6.30e-01  
  8  +5.0000e-01  +5.9685e-01  9.68e-02  2.89e-04  1.40e-01  2.89e-06  2.90e-02  3.06e-01  
  9  +5.0000e-01  +5.9953e-01  9.95e-02  2.97e-04  1.44e-01  2.62e-06  2.83e-02  1.67e-01  
 10  +5.0000e-01  +5.7356e-01  7.36e-02  2.19e-04  1.07e-01  1.40e-06  1.49e-02  7.96e-01  
 11  +5.0000e-01  +5.4801e-01  4.80e-02  1.42e-04  6.92e-02  2.02e-06  4.13e-03  7.76e-01  
 12  +4.9991e-01  +5.4627e-01  4.64e-02  3.65e-05  1.78e-02  5.25e-05  1.31e-04  9.83e-01  
 13  +4.9880e-01  +5.4158e-01  4.28e-02  3.12e-06  1.52e-03  6.05e-04  1.02e-05  9.23e-01  
 14  +4.9820e-01  +5.3339e-01  3.52e-02  2.55e-06  1.24e-03  3.64e-04  8.10e-06  3.82e-01  
 15  +4.9844e-01  +5.3378e-01  3.53e-02  2.53e-06  1.23e-03  2.95e-04  7.95e-06  1.94e-01  
 16  +4.9767e-01  +5.2986e-01  3.22e-02  1.77e-06  8.64e-04  3.14e-04  5.52e-06  3.59e-01  
 17  +4.9762e-01  +5.2964e-01  3.20e-02  1.77e-06  8.63e-04  3.07e-04  5.51e-06  1.07e-02  
 18  +4.9752e-01  +5.2911e-01  3.16e-02  1.66e-06  8.08e-04  2.90e-04  5.16e-06  1.33e-01  
 19  +4.9728e-01  +5.2641e-01  2.91e-02  1.53e-06  7.44e-04  1.37e-04  4.77e-06  4.42e-01  
 20  +4.9453e-01  +5.1484e-01  2.03e-02  8.29e-07  4.04e-04  4.83e-05  2.61e-06  7.58e-01  
 21  +4.8986e-01  +4.9645e-01  6.59e-03  2.47e-07  1.20e-04  5.08e-07  8.07e-07  8.75e-01  
 22  +4.8739e-01  +4.8784e-01  4.49e-04  1.55e-08  7.56e-06  1.52e-08  5.31e-08  9.53e-01  
 23  +4.8718e-01  +4.8719e-01  5.29e-06  1.82e-10  8.87e-08  1.69e-10  6.30e-10  9.89e-01  
 24  +4.8718e-01  +4.8718e-01  5.29e-08  1.82e-12  8.86e-10  1.69e-12  6.30e-12  9.90e-01  
 25  +4.8718e-01  +4.8718e-01  5.32e-10  1.83e-14  8.92e-12  2.23e-14  8.19e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 535.6674ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:40 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:40 PM: Optimal value: 4.872e-01
(CVXPY) Aug 30 12:15:40 PM: Compilation took 1.094e-01 seconds
(CVXPY) Aug 30 12:15:40 PM: Solver (including time spent in interface) took 5.694e-01 seconds
Iteration: 3, Objective: 0.4872
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:40 PM: Your problem has 25045 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:40 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:40 PM: Finished problem compilation (took 1.255e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25045
  constraints   = 50045
  nnz(P)        = 0
  nnz(A)        = 312499
  cones (total) = 1
    : Nonnegative = 1,  numel = 50045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.44e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2542e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5353e+02  6.53e+02  1.62e-01  7.76e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6869e+02  1.68e+02  1.43e-01  6.87e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3654e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1408e+00  6.41e-01  1.92e-03  9.37e-01  2.48e-05  1.88e-01  2.80e-01  
  6  +5.0001e-01  +6.8326e-01  1.83e-01  5.47e-04  2.67e-01  4.98e-06  5.91e-02  8.37e-01  
  7  +5.0000e-01  +6.3842e-01  1.38e-01  4.13e-04  2.02e-01  3.56e-06  4.19e-02  4.04e-01  
  8  +5.0000e-01  +6.2472e-01  1.25e-01  3.72e-04  1.82e-01  2.96e-06  3.40e-02  3.31e-01  
  9  +5.0001e-01  +6.1056e-01  1.11e-01  3.30e-04  1.61e-01  1.66e-06  2.26e-02  7.33e-01  
 10  +5.0000e-01  +5.5428e-01  5.43e-02  1.61e-04  7.88e-02  1.82e-06  5.65e-03  7.74e-01  
 11  +4.9999e-01  +5.5405e-01  5.41e-02  1.34e-04  6.57e-02  1.00e-05  8.80e-04  8.61e-01  
 12  +4.9934e-01  +5.4712e-01  4.78e-02  6.58e-06  3.22e-03  3.52e-04  2.10e-05  9.90e-01  
 13  +4.9865e-01  +5.4389e-01  4.52e-02  3.70e-06  1.82e-03  5.46e-04  1.17e-05  4.70e-01  
 14  +4.9855e-01  +5.4223e-01  4.37e-02  3.38e-06  1.66e-03  4.46e-04  1.06e-05  2.63e-01  
 15  +4.9855e-01  +5.4047e-01  4.19e-02  3.09e-06  1.52e-03  2.67e-04  9.70e-06  4.29e-01  
 16  +4.9813e-01  +5.3756e-01  3.94e-02  2.53e-06  1.24e-03  1.64e-04  7.93e-06  5.31e-01  
 17  +4.9808e-01  +5.3737e-01  3.93e-02  2.53e-06  1.24e-03  1.61e-04  7.92e-06  9.36e-03  
 18  +4.9684e-01  +5.3216e-01  3.53e-02  1.91e-06  9.38e-04  1.39e-04  6.02e-06  3.61e-01  
 19  +4.9654e-01  +5.3079e-01  3.42e-02  1.83e-06  8.96e-04  1.17e-04  5.76e-06  1.53e-01  
 20  +4.9626e-01  +5.2948e-01  3.32e-02  1.80e-06  8.80e-04  8.54e-05  5.68e-06  1.94e-01  
 21  +4.9568e-01  +5.2706e-01  3.14e-02  1.65e-06  8.09e-04  6.84e-05  5.24e-06  1.94e-01  
 22  +4.9412e-01  +5.2041e-01  2.63e-02  1.30e-06  6.38e-04  7.21e-07  4.18e-06  8.34e-01  
 23  +4.8819e-01  +4.9837e-01  1.02e-02  3.93e-07  1.93e-04  2.11e-07  1.31e-06  8.04e-01  
 24  +4.8511e-01  +4.8755e-01  2.44e-03  8.78e-08  4.30e-05  3.53e-08  3.05e-07  8.80e-01  
 25  +4.8511e-01  +4.8755e-01  2.44e-03  8.77e-08  4.30e-05  3.52e-08  3.04e-07  1.47e-02  
 26  +4.8508e-01  +4.8745e-01  2.37e-03  8.48e-08  4.16e-05  3.36e-08  2.95e-07  1.95e-01  
 27  +4.8480e-01  +4.8648e-01  1.68e-03  5.99e-08  2.93e-05  2.32e-08  2.10e-07  4.91e-01  
 28  +4.8417e-01  +4.8433e-01  1.60e-04  5.66e-09  2.77e-06  2.10e-09  2.01e-08  9.53e-01  
 29  +4.8410e-01  +4.8410e-01  1.65e-06  5.82e-11  2.85e-08  2.16e-11  2.08e-10  9.90e-01  
 30  +4.8410e-01  +4.8410e-01  1.65e-08  5.82e-13  2.85e-10  2.16e-13  2.08e-12  9.90e-01  
 31  +4.8410e-01  +4.8410e-01  1.65e-10  5.80e-15  2.86e-12  2.40e-15  2.29e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 667.344ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:41 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:41 PM: Optimal value: 4.841e-01
(CVXPY) Aug 30 12:15:41 PM: Compilation took 1.255e-01 seconds
(CVXPY) Aug 30 12:15:41 PM: Solver (including time spent in interface) took 6.939e-01 seconds
Iteration: 4, Objective: 0.4841
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:41 PM: Your problem has 25055 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:41 PM: Finished problem compilation (took 1.094e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25055
  constraints   = 50055
  nnz(P)        = 0
  nnz(A)        = 322423
  cones (total) = 1
    : Nonnegative = 1,  numel = 50055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.44e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2543e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5344e+02  6.53e+02  1.62e-01  7.77e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6866e+02  1.68e+02  1.43e-01  6.88e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3655e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0000e-01  +1.1215e+00  6.21e-01  1.86e-03  9.10e-01  2.48e-05  1.88e-01  2.90e-01  
  6  +5.0000e-01  +7.2895e-01  2.29e-01  6.84e-04  3.35e-01  8.25e-06  7.60e-02  6.37e-01  
  7  +5.0000e-01  +6.7492e-01  1.75e-01  5.22e-04  2.56e-01  6.09e-06  5.58e-02  3.42e-01  
  8  +5.0001e-01  +6.8165e-01  1.82e-01  5.42e-04  2.65e-01  4.98e-06  5.20e-02  3.55e-01  
  9  +5.0001e-01  +6.3646e-01  1.36e-01  4.07e-04  1.99e-01  2.83e-06  3.35e-02  6.45e-01  
 10  +5.0000e-01  +5.6520e-01  6.52e-02  1.94e-04  9.52e-02  1.96e-06  1.07e-02  7.66e-01  
 11  +5.0000e-01  +5.7557e-01  7.56e-02  2.19e-04  1.07e-01  4.41e-06  3.13e-03  9.71e-01  
 12  +4.9965e-01  +5.5916e-01  5.95e-02  1.56e-05  7.68e-03  1.93e-04  5.05e-05  9.86e-01  
 13  +4.9840e-01  +5.4938e-01  5.10e-02  3.29e-06  1.61e-03  6.93e-04  1.04e-05  8.70e-01  
 14  +4.9835e-01  +5.4815e-01  4.98e-02  3.21e-06  1.58e-03  6.02e-04  1.01e-05  1.17e-01  
 15  +4.9788e-01  +5.4504e-01  4.72e-02  2.85e-06  1.40e-03  5.28e-04  8.99e-06  2.12e-01  
 16  +4.9759e-01  +5.4297e-01  4.54e-02  2.65e-06  1.30e-03  4.54e-04  8.37e-06  1.72e-01  
 17  +4.9725e-01  +5.3912e-01  4.19e-02  2.49e-06  1.22e-03  2.32e-04  7.92e-06  3.81e-01  
 18  +4.9666e-01  +5.3485e-01  3.82e-02  2.28e-06  1.12e-03  6.84e-05  7.26e-06  5.82e-01  
 19  +4.9229e-01  +5.1672e-01  2.44e-02  1.09e-06  5.38e-04  4.81e-05  3.58e-06  5.56e-01  
 20  +4.8647e-01  +4.9325e-01  6.78e-03  2.74e-07  1.34e-04  3.47e-06  9.36e-07  8.50e-01  
 21  +4.8603e-01  +4.9159e-01  5.56e-03  2.17e-07  1.06e-04  1.55e-06  7.42e-07  5.84e-01  
 22  +4.8454e-01  +4.8611e-01  1.57e-03  5.74e-08  2.82e-05  4.19e-07  2.01e-07  7.60e-01  
 23  +4.8455e-01  +4.8614e-01  1.59e-03  5.75e-08  2.82e-05  4.31e-07  2.01e-07  5.33e-03  
 24  +4.8454e-01  +4.8611e-01  1.57e-03  5.75e-08  2.82e-05  4.17e-07  2.01e-07  1.54e-03  
 25  +4.8451e-01  +4.8602e-01  1.51e-03  5.43e-08  2.66e-05  3.58e-07  1.89e-07  1.72e-01  
 26  +4.8413e-01  +4.8478e-01  6.47e-04  2.30e-08  1.13e-05  1.21e-08  8.13e-08  9.90e-01  
 27  +4.8387e-01  +4.8390e-01  2.51e-05  8.88e-10  4.36e-07  4.03e-10  3.17e-09  9.75e-01  
 28  +4.8386e-01  +4.8386e-01  2.52e-07  8.91e-12  4.38e-09  4.04e-12  3.18e-11  9.90e-01  
 29  +4.8386e-01  +4.8386e-01  2.54e-09  8.98e-14  4.41e-11  5.66e-14  4.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 640.7041ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:42 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:42 PM: Optimal value: 4.839e-01
(CVXPY) Aug 30 12:15:42 PM: Compilation took 1.094e-01 seconds
(CVXPY) Aug 30 12:15:42 PM: Solver (including time spent in interface) took 6.756e-01 seconds
Iteration: 5, Objective: 0.4839
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:42 PM: Your problem has 25065 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:42 PM: Finished problem compilation (took 1.246e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25065
  constraints   = 50065
  nnz(P)        = 0
  nnz(A)        = 330250
  cones (total) = 1
    : Nonnegative = 1,  numel = 50065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.45e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2543e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5340e+02  6.53e+02  1.62e-01  7.78e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6864e+02  1.68e+02  1.43e-01  6.89e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3653e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0000e-01  +1.1312e+00  6.31e-01  1.89e-03  9.26e-01  2.48e-05  1.88e-01  2.86e-01  
  6  +5.0000e-01  +6.8759e-01  1.88e-01  5.60e-04  2.75e-01  5.98e-06  6.16e-02  7.59e-01  
  7  +5.0000e-01  +6.2317e-01  1.23e-01  3.68e-04  1.80e-01  3.94e-06  3.71e-02  4.81e-01  
  8  +5.0000e-01  +6.1888e-01  1.19e-01  3.55e-04  1.74e-01  3.42e-06  3.00e-02  3.77e-01  
  9  +5.0001e-01  +6.1386e-01  1.14e-01  3.39e-04  1.66e-01  1.76e-06  1.73e-02  9.14e-01  
 10  +5.0001e-01  +5.9267e-01  9.27e-02  2.75e-04  1.35e-01  6.17e-07  7.94e-03  9.90e-01  
 11  +5.0000e-01  +5.7250e-01  7.25e-02  1.54e-04  7.57e-02  3.78e-06  7.97e-04  9.11e-01  
 12  +4.9976e-01  +5.7131e-01  7.15e-02  6.90e-06  3.39e-03  1.31e-04  2.21e-05  9.72e-01  
 13  +4.9945e-01  +5.6525e-01  6.58e-02  4.90e-06  2.41e-03  1.43e-04  1.56e-05  3.83e-01  
 14  +4.9912e-01  +5.6027e-01  6.12e-02  4.53e-06  2.23e-03  1.15e-04  1.44e-05  1.86e-01  
 15  +4.9886e-01  +5.5627e-01  5.74e-02  4.17e-06  2.05e-03  9.05e-05  1.32e-05  2.26e-01  
 16  +4.9859e-01  +5.5329e-01  5.47e-02  3.78e-06  1.86e-03  7.76e-05  1.20e-05  2.07e-01  
 17  +4.9843e-01  +5.5106e-01  5.26e-02  3.62e-06  1.78e-03  6.25e-05  1.15e-05  1.74e-01  
 18  +4.9786e-01  +5.4727e-01  4.94e-02  3.07e-06  1.51e-03  5.45e-05  9.75e-06  2.63e-01  
 19  +4.9776e-01  +5.4602e-01  4.83e-02  3.02e-06  1.49e-03  4.41e-05  9.60e-06  1.49e-01  
 20  +4.9666e-01  +5.4047e-01  4.38e-02  2.43e-06  1.20e-03  3.74e-05  7.75e-06  2.97e-01  
 21  +4.9401e-01  +5.2559e-01  3.16e-02  1.72e-06  8.44e-04  3.76e-07  5.58e-06  8.03e-01  
 22  +4.9291e-01  +5.2111e-01  2.82e-02  1.44e-06  7.10e-04  3.26e-07  4.71e-06  2.34e-01  
 23  +4.9260e-01  +5.1979e-01  2.72e-02  1.36e-06  6.68e-04  2.93e-07  4.44e-06  2.43e-01  
 24  +4.9138e-01  +5.1484e-01  2.35e-02  1.10e-06  5.42e-04  2.43e-07  3.63e-06  3.26e-01  
 25  +4.9136e-01  +5.1476e-01  2.34e-02  1.10e-06  5.42e-04  2.41e-07  3.62e-06  1.02e-02  
 26  +4.8905e-01  +5.0583e-01  1.68e-02  7.23e-07  3.55e-04  1.59e-07  2.41e-06  6.43e-01  
 27  +4.8548e-01  +4.9195e-01  6.47e-03  2.55e-07  1.25e-04  5.96e-08  8.71e-07  6.76e-01  
 28  +4.8435e-01  +4.8781e-01  3.46e-03  1.29e-07  6.36e-05  3.40e-08  4.50e-07  5.86e-01  
 29  +4.8396e-01  +4.8638e-01  2.43e-03  8.95e-08  4.40e-05  2.49e-08  3.14e-07  4.20e-01  
 30  +4.8396e-01  +4.8641e-01  2.45e-03  8.95e-08  4.40e-05  2.53e-08  3.14e-07  2.89e-03  
 31  +4.8396e-01  +4.8638e-01  2.43e-03  8.95e-08  4.40e-05  2.49e-08  3.14e-07  9.39e-03  
 32  +4.8386e-01  +4.8601e-01  2.15e-03  7.81e-08  3.84e-05  2.36e-08  2.74e-07  3.71e-01  
 33  +4.8350e-01  +4.8471e-01  1.20e-03  4.35e-08  2.14e-05  1.52e-08  1.54e-07  9.90e-01  
 34  +4.8325e-01  +4.8385e-01  6.00e-04  2.16e-08  1.06e-05  7.54e-09  7.74e-08  6.48e-01  
 35  +4.8306e-01  +4.8321e-01  1.47e-04  5.28e-09  2.60e-06  1.84e-09  1.90e-08  7.82e-01  
 36  +4.8304e-01  +4.8314e-01  9.78e-05  3.51e-09  1.72e-06  1.21e-09  1.27e-08  8.76e-01  
 37  +4.8300e-01  +4.8300e-01  9.99e-07  3.58e-11  1.76e-08  1.24e-11  1.29e-10  9.90e-01  
 38  +4.8300e-01  +4.8300e-01  9.99e-09  3.58e-13  1.76e-10  1.24e-13  1.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 844.4484ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:43 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:43 PM: Optimal value: 4.830e-01
(CVXPY) Aug 30 12:15:43 PM: Compilation took 1.246e-01 seconds
(CVXPY) Aug 30 12:15:43 PM: Solver (including time spent in interface) took 8.763e-01 seconds
Iteration: 6, Objective: 0.4830
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:43 PM: Your problem has 25075 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:43 PM: Finished problem compilation (took 1.250e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25075
  constraints   = 50075
  nnz(P)        = 0
  nnz(A)        = 337287
  cones (total) = 1
    : Nonnegative = 1,  numel = 50075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.45e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2543e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5338e+02  6.53e+02  1.62e-01  7.79e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6863e+02  1.68e+02  1.43e-01  6.89e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3653e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0000e-01  +1.1185e+00  6.19e-01  1.86e-03  9.08e-01  2.49e-05  1.88e-01  2.93e-01  
  6  +5.0000e-01  +6.7328e-01  1.73e-01  5.18e-04  2.54e-01  5.25e-06  5.66e-02  8.19e-01  
  7  +5.0000e-01  +6.1996e-01  1.20e-01  3.58e-04  1.76e-01  3.70e-06  3.52e-02  4.62e-01  
  8  +5.0000e-01  +6.2234e-01  1.22e-01  3.65e-04  1.79e-01  3.41e-06  3.21e-02  2.42e-01  
  9  +5.0000e-01  +6.0502e-01  1.05e-01  3.13e-04  1.54e-01  2.55e-06  1.84e-02  7.07e-01  
 10  +5.0000e-01  +5.8068e-01  8.07e-02  2.39e-04  1.17e-01  3.69e-06  6.09e-03  7.55e-01  
 11  +4.9998e-01  +5.6655e-01  6.66e-02  1.49e-04  7.32e-02  1.59e-05  8.19e-04  9.90e-01  
 12  +4.9910e-01  +5.6309e-01  6.40e-02  7.85e-06  3.86e-03  4.79e-04  2.53e-05  9.69e-01  
 13  +4.9825e-01  +5.5480e-01  5.65e-02  4.54e-06  2.23e-03  5.77e-04  1.45e-05  5.32e-01  
 14  +4.9834e-01  +5.5389e-01  5.55e-02  4.38e-06  2.16e-03  4.99e-04  1.39e-05  1.58e-01  
 15  +4.9829e-01  +5.5134e-01  5.31e-02  3.94e-06  1.94e-03  3.82e-04  1.24e-05  3.05e-01  
 16  +4.9802e-01  +5.4804e-01  5.00e-02  3.44e-06  1.69e-03  2.74e-04  1.08e-05  3.62e-01  
 17  +4.9783e-01  +5.4668e-01  4.88e-02  3.22e-06  1.58e-03  2.47e-04  1.01e-05  1.55e-01  
 18  +4.9733e-01  +5.4138e-01  4.41e-02  2.80e-06  1.38e-03  6.23e-05  8.84e-06  6.79e-01  
 19  +4.9488e-01  +5.3041e-01  3.55e-02  1.87e-06  9.19e-04  1.90e-05  5.96e-06  7.55e-01  
 20  +4.9358e-01  +5.2510e-01  3.15e-02  1.57e-06  7.73e-04  1.59e-05  5.04e-06  2.00e-01  
 21  +4.9343e-01  +5.2440e-01  3.10e-02  1.54e-06  7.56e-04  1.22e-05  4.93e-06  1.95e-01  
 22  +4.9230e-01  +5.1982e-01  2.75e-02  1.31e-06  6.43e-04  7.83e-06  4.22e-06  3.43e-01  
 23  +4.9212e-01  +5.1906e-01  2.69e-02  1.27e-06  6.26e-04  6.07e-06  4.12e-06  1.94e-01  
 24  +4.8824e-01  +5.0383e-01  1.56e-02  6.57e-07  3.23e-04  2.43e-06  2.18e-06  6.05e-01  
 25  +4.8821e-01  +5.0365e-01  1.54e-02  6.46e-07  3.18e-04  2.14e-06  2.14e-06  1.29e-01  
 26  +4.8573e-01  +4.9409e-01  8.36e-03  3.29e-07  1.62e-04  7.90e-07  1.11e-06  6.40e-01  
 27  +4.8569e-01  +4.9380e-01  8.11e-03  3.14e-07  1.54e-04  5.92e-07  1.05e-06  3.09e-01  
 28  +4.8478e-01  +4.9034e-01  5.56e-03  2.09e-07  1.03e-04  1.95e-07  7.00e-07  7.53e-01  
 29  +4.8367e-01  +4.8632e-01  2.64e-03  9.50e-08  4.67e-05  3.80e-08  3.23e-07  9.83e-01  
 30  +4.8367e-01  +4.8629e-01  2.63e-03  9.50e-08  4.67e-05  3.76e-08  3.23e-07  1.36e-02  
 31  +4.8295e-01  +4.8379e-01  8.42e-04  3.04e-08  1.49e-05  1.04e-08  1.04e-07  9.90e-01  
 32  +4.8273e-01  +4.8306e-01  3.25e-04  1.15e-08  5.66e-06  4.04e-09  4.01e-08  6.55e-01  
 33  +4.8269e-01  +4.8291e-01  2.14e-04  7.55e-09  3.71e-06  2.73e-09  2.64e-08  7.13e-01  
 34  +4.8260e-01  +4.8261e-01  8.57e-06  3.00e-10  1.47e-07  1.08e-10  1.06e-09  9.61e-01  
 35  +4.8260e-01  +4.8260e-01  8.64e-08  3.02e-12  1.49e-09  1.09e-12  1.07e-11  9.90e-01  
 36  +4.8260e-01  +4.8260e-01  8.64e-10  3.02e-14  1.49e-11  1.09e-14  1.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 829.915ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:44 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:44 PM: Optimal value: 4.826e-01
(CVXPY) Aug 30 12:15:44 PM: Compilation took 1.250e-01 seconds
(CVXPY) Aug 30 12:15:44 PM: Solver (including time spent in interface) took 8.598e-01 seconds
Iteration: 7, Objective: 0.4826
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:44 PM: Your problem has 25085 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:44 PM: Finished problem compilation (took 1.406e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25085
  constraints   = 50085
  nnz(P)        = 0
  nnz(A)        = 345157
  cones (total) = 1
    : Nonnegative = 1,  numel = 50085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.45e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2543e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5339e+02  6.53e+02  1.62e-01  7.79e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6863e+02  1.68e+02  1.43e-01  6.90e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3651e+01  1.31e+01  3.74e-02  1.77e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0000e-01  +1.1197e+00  6.20e-01  1.86e-03  9.11e-01  2.49e-05  1.88e-01  2.93e-01  
  6  +5.0000e-01  +7.0742e-01  2.07e-01  6.20e-04  3.04e-01  6.91e-06  6.74e-02  7.39e-01  
  7  +5.0000e-01  +6.5364e-01  1.54e-01  4.59e-04  2.25e-01  5.04e-06  4.62e-02  4.00e-01  
  8  +5.0000e-01  +6.4482e-01  1.45e-01  4.32e-04  2.12e-01  4.27e-06  3.75e-02  3.70e-01  
  9  +5.0000e-01  +6.3258e-01  1.33e-01  3.96e-04  1.94e-01  3.05e-06  2.52e-02  6.37e-01  
 10  +5.0000e-01  +5.9655e-01  9.66e-02  2.87e-04  1.41e-01  3.52e-06  1.00e-02  6.70e-01  
 11  +4.9996e-01  +5.7057e-01  7.06e-02  1.44e-04  7.09e-02  2.52e-05  7.36e-04  9.89e-01  
 12  +4.9952e-01  +5.6875e-01  6.92e-02  2.05e-05  1.01e-02  2.55e-04  6.96e-05  9.06e-01  
 13  +4.9947e-01  +5.6081e-01  6.13e-02  1.19e-05  5.87e-03  2.21e-04  3.96e-05  7.79e-01  
 14  +4.9902e-01  +5.5779e-01  5.88e-02  7.06e-06  3.48e-03  3.20e-04  2.32e-05  4.80e-01  
 15  +4.9886e-01  +5.5628e-01  5.74e-02  6.19e-06  3.05e-03  3.04e-04  2.02e-05  2.43e-01  
 16  +4.9879e-01  +5.5511e-01  5.63e-02  5.83e-06  2.87e-03  2.55e-04  1.89e-05  2.18e-01  
 17  +4.9819e-01  +5.5119e-01  5.30e-02  4.45e-06  2.19e-03  2.57e-04  1.43e-05  3.45e-01  
 18  +4.9811e-01  +5.5043e-01  5.23e-02  4.24e-06  2.09e-03  2.27e-04  1.36e-05  1.66e-01  
 19  +4.9807e-01  +5.4927e-01  5.12e-02  3.96e-06  1.95e-03  1.28e-04  1.26e-05  4.49e-01  
 20  +4.9739e-01  +5.4587e-01  4.85e-02  3.17e-06  1.56e-03  1.28e-04  1.00e-05  2.75e-01  
 21  +4.9724e-01  +5.4544e-01  4.82e-02  3.00e-06  1.48e-03  9.75e-05  9.47e-06  2.74e-01  
 22  +4.9607e-01  +5.4024e-01  4.42e-02  2.58e-06  1.27e-03  6.16e-05  8.22e-06  3.80e-01  
 23  +4.9376e-01  +5.3039e-01  3.66e-02  1.86e-06  9.16e-04  4.15e-05  5.97e-06  4.30e-01  
 24  +4.9325e-01  +5.2809e-01  3.48e-02  1.75e-06  8.61e-04  3.04e-05  5.63e-06  2.30e-01  
 25  +4.9265e-01  +5.2555e-01  3.29e-02  1.62e-06  7.96e-04  2.56e-05  5.22e-06  1.55e-01  
 26  +4.9122e-01  +5.1968e-01  2.85e-02  1.33e-06  6.54e-04  1.92e-05  4.31e-06  2.68e-01  
 27  +4.9055e-01  +5.1676e-01  2.62e-02  1.18e-06  5.81e-04  1.18e-05  3.85e-06  3.65e-01  
 28  +4.9048e-01  +5.1641e-01  2.59e-02  1.17e-06  5.75e-04  9.92e-06  3.81e-06  1.36e-01  
 29  +4.8890e-01  +5.1021e-01  2.13e-02  9.17e-07  4.52e-04  7.02e-06  3.02e-06  2.98e-01  
 30  +4.8778e-01  +5.0572e-01  1.79e-02  7.38e-07  3.63e-04  4.09e-06  2.45e-06  4.25e-01  
 31  +4.8777e-01  +5.0569e-01  1.79e-02  7.36e-07  3.63e-04  4.02e-06  2.44e-06  1.75e-02  
 32  +4.8683e-01  +5.0201e-01  1.52e-02  6.04e-07  2.98e-04  2.15e-06  2.02e-06  4.64e-01  
 33  +4.8442e-01  +4.9300e-01  8.58e-03  3.25e-07  1.60e-04  9.37e-07  1.10e-06  5.76e-01  
 34  +4.8216e-01  +4.8469e-01  2.54e-03  9.18e-08  4.52e-05  1.35e-07  3.20e-07  8.69e-01  
 35  +4.8148e-01  +4.8230e-01  8.19e-04  2.92e-08  1.44e-05  2.72e-08  1.03e-07  8.36e-01  
 36  +4.8141e-01  +4.8203e-01  6.28e-04  2.24e-08  1.10e-05  1.22e-08  7.92e-08  7.53e-01  
 37  +4.8116e-01  +4.8121e-01  5.17e-05  1.83e-09  9.03e-07  6.98e-10  6.55e-09  9.90e-01  
 38  +4.8114e-01  +4.8114e-01  5.28e-07  1.87e-11  9.22e-09  7.12e-12  6.69e-11  9.90e-01  
 39  +4.8114e-01  +4.8114e-01  5.28e-09  1.87e-13  9.22e-11  7.12e-14  6.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 888.7357ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:45 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:45 PM: Optimal value: 4.811e-01
(CVXPY) Aug 30 12:15:45 PM: Compilation took 1.406e-01 seconds
(CVXPY) Aug 30 12:15:45 PM: Solver (including time spent in interface) took 9.112e-01 seconds
Iteration: 8, Objective: 0.4811
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:45 PM: Your problem has 25095 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:45 PM: Finished problem compilation (took 1.250e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25095
  constraints   = 50095
  nnz(P)        = 0
  nnz(A)        = 351599
  cones (total) = 1
    : Nonnegative = 1,  numel = 50095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.45e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2542e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5338e+02  6.53e+02  1.62e-01  7.79e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6862e+02  1.68e+02  1.43e-01  6.90e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3651e+01  1.32e+01  3.74e-02  1.77e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0000e-01  +1.1248e+00  6.25e-01  1.87e-03  9.19e-01  2.49e-05  1.88e-01  2.91e-01  
  6  +5.0000e-01  +6.9480e-01  1.95e-01  5.82e-04  2.86e-01  6.96e-06  6.48e-02  6.90e-01  
  7  +5.0000e-01  +6.4166e-01  1.42e-01  4.23e-04  2.08e-01  5.23e-06  4.32e-02  3.86e-01  
  8  +5.0000e-01  +6.5008e-01  1.50e-01  4.48e-04  2.20e-01  4.72e-06  4.01e-02  2.87e-01  
  9  +5.0000e-01  +6.1995e-01  1.20e-01  3.58e-04  1.76e-01  4.09e-06  2.48e-02  4.82e-01  
 10  +5.0000e-01  +6.1736e-01  1.17e-01  3.50e-04  1.72e-01  4.09e-06  1.97e-02  3.01e-01  
 11  +5.0001e-01  +6.2300e-01  1.23e-01  3.66e-04  1.80e-01  8.40e-07  1.31e-02  9.90e-01  
 12  +5.0001e-01  +6.1507e-01  1.15e-01  3.39e-04  1.66e-01  1.27e-06  6.65e-03  5.16e-01  
 13  +4.9998e-01  +5.7597e-01  7.60e-02  7.58e-05  3.74e-02  1.58e-05  2.84e-04  9.77e-01  
 14  +4.9970e-01  +5.7458e-01  7.49e-02  8.45e-06  4.17e-03  1.57e-04  2.78e-05  9.03e-01  
 15  +4.9949e-01  +5.6857e-01  6.91e-02  6.69e-06  3.30e-03  1.34e-04  2.19e-05  3.99e-01  
 16  +4.9912e-01  +5.6220e-01  6.31e-02  5.69e-06  2.81e-03  9.36e-05  1.85e-05  4.00e-01  
 17  +4.9903e-01  +5.6039e-01  6.14e-02  5.51e-06  2.72e-03  7.44e-05  1.79e-05  1.94e-01  
 18  +4.9849e-01  +5.5532e-01  5.68e-02  4.69e-06  2.31e-03  5.36e-05  1.51e-05  3.80e-01  
 19  +4.9829e-01  +5.5385e-01  5.56e-02  4.39e-06  2.17e-03  4.84e-05  1.41e-05  1.57e-01  
 20  +4.9780e-01  +5.5041e-01  5.26e-02  3.77e-06  1.86e-03  3.49e-05  1.20e-05  3.89e-01  
 21  +4.9770e-01  +5.5011e-01  5.24e-02  3.75e-06  1.85e-03  3.39e-05  1.20e-05  1.83e-02  
 22  +4.9697e-01  +5.4645e-01  4.95e-02  3.22e-06  1.59e-03  2.89e-05  1.03e-05  2.67e-01  
 23  +4.9694e-01  +5.4598e-01  4.90e-02  3.19e-06  1.57e-03  2.33e-05  1.02e-05  1.63e-01  
 24  +4.9628e-01  +5.4300e-01  4.67e-02  2.80e-06  1.38e-03  2.12e-05  8.94e-06  1.98e-01  
 25  +4.9576e-01  +5.4080e-01  4.50e-02  2.53e-06  1.25e-03  1.29e-05  8.09e-06  4.04e-01  
 26  +4.9429e-01  +5.3436e-01  4.01e-02  2.10e-06  1.04e-03  1.06e-05  6.77e-06  2.35e-01  
 27  +4.9340e-01  +5.2924e-01  3.58e-02  1.89e-06  9.30e-04  1.06e-06  6.15e-06  7.26e-01  
 28  +4.9134e-01  +5.2088e-01  2.95e-02  1.43e-06  7.06e-04  7.98e-07  4.71e-06  3.17e-01  
 29  +4.9132e-01  +5.2073e-01  2.94e-02  1.41e-06  6.94e-04  7.03e-07  4.63e-06  1.63e-01  
 30  +4.9112e-01  +5.1980e-01  2.87e-02  1.35e-06  6.67e-04  5.03e-07  4.45e-06  3.73e-01  
 31  +4.8973e-01  +5.1435e-01  2.46e-02  1.11e-06  5.48e-04  4.13e-07  3.69e-06  2.28e-01  
 32  +4.8814e-01  +5.0809e-01  1.99e-02  8.52e-07  4.20e-04  2.85e-07  2.85e-06  4.49e-01  
 33  +4.8706e-01  +5.0396e-01  1.69e-02  7.00e-07  3.45e-04  2.38e-07  2.36e-06  2.08e-01  
 34  +4.8683e-01  +5.0296e-01  1.61e-02  6.57e-07  3.24e-04  2.15e-07  2.22e-06  2.54e-01  
 35  +4.8549e-01  +4.9790e-01  1.24e-02  4.87e-07  2.40e-04  1.58e-07  1.66e-06  4.07e-01  
 36  +4.8292e-01  +4.8822e-01  5.30e-03  1.95e-07  9.59e-05  6.07e-08  6.81e-07  9.61e-01  
 37  +4.8277e-01  +4.8766e-01  4.89e-03  1.79e-07  8.82e-05  5.64e-08  6.28e-07  1.51e-01  
 38  +4.8273e-01  +4.8751e-01  4.77e-03  1.74e-07  8.59e-05  5.58e-08  6.11e-07  1.34e-01  
 39  +4.8252e-01  +4.8668e-01  4.15e-03  1.51e-07  7.45e-05  5.08e-08  5.31e-07  6.34e-01  
 40  +4.8212e-01  +4.8527e-01  3.15e-03  1.14e-07  5.62e-05  3.87e-08  4.04e-07  3.76e-01  
 41  +4.8210e-01  +4.8520e-01  3.09e-03  1.12e-07  5.52e-05  3.83e-08  3.96e-07  2.13e-01  
 42  +4.8104e-01  +4.8150e-01  4.67e-04  1.68e-08  8.28e-06  5.79e-09  6.06e-08  9.90e-01  
 43  +4.8084e-01  +4.8085e-01  9.50e-06  3.41e-10  1.68e-07  1.17e-10  1.24e-09  9.81e-01  
 44  +4.8084e-01  +4.8084e-01  9.52e-08  3.42e-12  1.68e-09  1.17e-12  1.24e-11  9.90e-01  
 45  +4.8084e-01  +4.8084e-01  9.52e-10  3.42e-14  1.69e-11  1.22e-14  1.30e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 989.9438ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:46 PM: Optimal value: 4.808e-01
(CVXPY) Aug 30 12:15:46 PM: Compilation took 1.250e-01 seconds
(CVXPY) Aug 30 12:15:46 PM: Solver (including time spent in interface) took 1.033e+00 seconds
Iteration: 9, Objective: 0.4808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:47 PM: Your problem has 25103 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:47 PM: Finished problem compilation (took 1.407e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25103
  constraints   = 50103
  nnz(P)        = 0
  nnz(A)        = 357234
  cones (total) = 1
    : Nonnegative = 1,  numel = 50103

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.46e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2542e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5335e+02  6.53e+02  1.62e-01  7.80e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6861e+02  1.68e+02  1.43e-01  6.90e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3651e+01  1.31e+01  3.74e-02  1.77e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0000e-01  +1.1223e+00  6.22e-01  1.87e-03  9.16e-01  2.49e-05  1.88e-01  2.92e-01  
  6  +5.0000e-01  +7.0255e-01  2.03e-01  6.05e-04  2.98e-01  7.36e-06  6.74e-02  6.73e-01  
  7  +5.0000e-01  +6.5386e-01  1.54e-01  4.60e-04  2.26e-01  5.47e-06  4.65e-02  4.09e-01  
  8  +5.0000e-01  +6.5559e-01  1.56e-01  4.65e-04  2.29e-01  5.14e-06  4.38e-02  1.72e-01  
  9  +5.0000e-01  +6.2315e-01  1.23e-01  3.68e-04  1.81e-01  4.06e-06  2.63e-02  5.63e-01  
 10  +5.0000e-01  +6.1321e-01  1.13e-01  3.38e-04  1.66e-01  4.31e-06  1.64e-02  4.86e-01  
 11  +5.0000e-01  +6.1381e-01  1.14e-01  3.39e-04  1.67e-01  2.36e-06  1.41e-02  5.43e-01  
 12  +4.9999e-01  +5.9060e-01  9.06e-02  2.55e-04  1.25e-01  6.76e-06  2.76e-03  8.51e-01  
 13  +4.9993e-01  +5.6985e-01  6.99e-02  7.24e-05  3.57e-02  4.30e-05  2.75e-04  9.90e-01  
 14  +4.9968e-01  +5.6855e-01  6.89e-02  2.04e-05  1.01e-02  1.65e-04  6.91e-05  7.56e-01  
 15  +4.9983e-01  +5.6205e-01  6.22e-02  1.51e-05  7.48e-03  5.43e-05  5.05e-05  9.06e-01  
 16  +4.9953e-01  +5.5932e-01  5.98e-02  5.69e-06  2.81e-03  9.72e-05  1.86e-05  9.16e-01  
 17  +4.9934e-01  +5.5804e-01  5.87e-02  5.25e-06  2.59e-03  9.21e-05  1.71e-05  1.66e-01  
 18  +4.9904e-01  +5.5597e-01  5.69e-02  5.02e-06  2.48e-03  6.44e-05  1.63e-05  2.98e-01  
 19  +4.9835e-01  +5.5187e-01  5.35e-02  4.05e-06  2.00e-03  5.88e-05  1.31e-05  3.27e-01  
 20  +4.9824e-01  +5.5137e-01  5.31e-02  3.88e-06  1.91e-03  5.41e-05  1.25e-05  1.37e-01  
 21  +4.9820e-01  +5.5146e-01  5.33e-02  3.82e-06  1.89e-03  4.35e-05  1.22e-05  2.02e-01  
 22  +4.9779e-01  +5.5003e-01  5.22e-02  3.53e-06  1.74e-03  3.47e-05  1.13e-05  2.63e-01  
 23  +4.9721e-01  +5.4735e-01  5.01e-02  3.18e-06  1.57e-03  2.71e-05  1.02e-05  2.77e-01  
 24  +4.9701e-01  +5.4656e-01  4.96e-02  3.02e-06  1.49e-03  2.20e-05  9.67e-06  2.17e-01  
 25  +4.9686e-01  +5.4602e-01  4.92e-02  3.01e-06  1.49e-03  2.10e-05  9.65e-06  2.78e-02  
 26  +4.9635e-01  +5.4387e-01  4.75e-02  2.82e-06  1.39e-03  1.69e-05  9.07e-06  2.02e-01  
 27  +4.9573e-01  +5.4099e-01  4.53e-02  2.70e-06  1.33e-03  7.45e-06  8.75e-06  4.47e-01  
 28  +4.9138e-01  +5.2287e-01  3.15e-02  1.45e-06  7.15e-04  5.40e-06  4.78e-06  5.23e-01  
 29  +4.9122e-01  +5.2221e-01  3.10e-02  1.43e-06  7.07e-04  4.87e-06  4.74e-06  7.02e-02  
 30  +4.9089e-01  +5.2042e-01  2.95e-02  1.34e-06  6.63e-04  2.60e-06  4.46e-06  4.32e-01  
 31  +4.8953e-01  +5.1481e-01  2.53e-02  1.12e-06  5.53e-04  1.69e-06  3.76e-06  3.37e-01  
 32  +4.8656e-01  +5.0273e-01  1.62e-02  6.69e-07  3.30e-04  3.09e-07  2.29e-06  8.21e-01  
 33  +4.8618e-01  +5.0128e-01  1.51e-02  6.18e-07  3.05e-04  2.80e-07  2.12e-06  1.33e-01  
 34  +4.8603e-01  +5.0065e-01  1.46e-02  5.94e-07  2.93e-04  2.56e-07  2.04e-06  1.64e-01  
 35  +4.8530e-01  +4.9784e-01  1.25e-02  5.02e-07  2.48e-04  2.02e-07  1.74e-06  3.13e-01  
 36  +4.8399e-01  +4.9292e-01  8.93e-03  3.50e-07  1.73e-04  1.40e-07  1.23e-06  3.38e-01  
 37  +4.8280e-01  +4.8825e-01  5.45e-03  2.07e-07  1.02e-04  6.42e-08  7.33e-07  9.90e-01  
 38  +4.8127e-01  +4.8265e-01  1.38e-03  5.21e-08  2.57e-05  1.65e-08  1.89e-07  9.90e-01  
 39  +4.8085e-01  +4.8117e-01  3.13e-04  1.17e-08  5.76e-06  3.88e-09  4.23e-08  7.89e-01  
 40  +4.8075e-01  +4.8082e-01  6.78e-05  2.49e-09  1.23e-06  7.51e-10  8.68e-09  9.37e-01  
 41  +4.8072e-01  +4.8072e-01  3.21e-06  1.16e-10  5.73e-08  3.61e-11  4.04e-10  9.57e-01  
 42  +4.8072e-01  +4.8072e-01  3.21e-08  1.16e-12  5.73e-10  3.63e-13  4.05e-12  9.90e-01  
 43  +4.8072e-01  +4.8072e-01  3.31e-10  1.19e-14  5.90e-12  9.26e-15  9.75e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 961.6834ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:48 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:48 PM: Optimal value: 4.807e-01
(CVXPY) Aug 30 12:15:48 PM: Compilation took 1.407e-01 seconds
(CVXPY) Aug 30 12:15:48 PM: Solver (including time spent in interface) took 9.865e-01 seconds
Iteration: 10, Objective: 0.4807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:48 PM: Your problem has 25104 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:48 PM: Finished problem compilation (took 1.406e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25104
  constraints   = 50104
  nnz(P)        = 0
  nnz(A)        = 358056
  cones (total) = 1
    : Nonnegative = 1,  numel = 50104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.46e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2542e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5335e+02  6.53e+02  1.62e-01  7.80e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6861e+02  1.68e+02  1.43e-01  6.90e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3651e+01  1.31e+01  3.74e-02  1.77e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0000e-01  +1.1219e+00  6.22e-01  1.87e-03  9.16e-01  2.49e-05  1.88e-01  2.92e-01  
  6  +5.0000e-01  +7.0471e-01  2.05e-01  6.12e-04  3.01e-01  7.46e-06  6.81e-02  6.69e-01  
  7  +5.0000e-01  +6.5289e-01  1.53e-01  4.57e-04  2.25e-01  5.45e-06  4.61e-02  4.22e-01  
  8  +5.0000e-01  +6.5492e-01  1.55e-01  4.63e-04  2.28e-01  5.13e-06  4.35e-02  1.68e-01  
  9  +5.0000e-01  +6.2333e-01  1.23e-01  3.68e-04  1.81e-01  4.06e-06  2.62e-02  5.67e-01  
 10  +5.0000e-01  +6.1142e-01  1.11e-01  3.32e-04  1.64e-01  4.42e-06  1.54e-02  5.17e-01  
 11  +5.0001e-01  +6.1107e-01  1.11e-01  3.31e-04  1.63e-01  1.97e-06  1.27e-02  6.52e-01  
 12  +5.0000e-01  +5.9135e-01  9.14e-02  2.50e-04  1.23e-01  6.51e-06  2.29e-03  8.64e-01  
 13  +4.9988e-01  +5.6981e-01  6.99e-02  4.16e-05  2.05e-02  6.80e-05  1.47e-04  9.90e-01  
 14  +4.9961e-01  +5.6811e-01  6.85e-02  1.46e-05  7.22e-03  1.92e-04  4.90e-05  6.86e-01  
 15  +4.9968e-01  +5.6356e-01  6.39e-02  1.15e-05  5.68e-03  1.09e-04  3.82e-05  6.75e-01  
 16  +4.9944e-01  +5.5930e-01  5.99e-02  6.42e-06  3.17e-03  9.25e-05  2.10e-05  8.86e-01  
 17  +4.9926e-01  +5.5801e-01  5.88e-02  5.71e-06  2.82e-03  9.40e-05  1.86e-05  1.66e-01  
 18  +4.9904e-01  +5.5642e-01  5.74e-02  5.43e-06  2.68e-03  6.42e-05  1.76e-05  3.35e-01  
 19  +4.9847e-01  +5.5304e-01  5.46e-02  4.36e-06  2.15e-03  6.64e-05  1.41e-05  2.60e-01  
 20  +4.9827e-01  +5.5210e-01  5.38e-02  4.03e-06  1.99e-03  5.23e-05  1.30e-05  2.90e-01  
 21  +4.9817e-01  +5.5186e-01  5.37e-02  4.02e-06  1.98e-03  5.03e-05  1.29e-05  3.13e-02  
 22  +4.9750e-01  +5.4888e-01  5.14e-02  3.43e-06  1.69e-03  3.82e-05  1.10e-05  3.73e-01  
 23  +4.9746e-01  +5.4866e-01  5.12e-02  3.34e-06  1.65e-03  3.00e-05  1.07e-05  2.19e-01  
 24  +4.9718e-01  +5.4760e-01  5.04e-02  3.20e-06  1.58e-03  2.51e-05  1.02e-05  1.80e-01  
 25  +4.9567e-01  +5.4146e-01  4.58e-02  2.57e-06  1.27e-03  1.39e-05  8.28e-06  5.18e-01  
 26  +4.9236e-01  +5.2666e-01  3.43e-02  1.74e-06  8.60e-04  7.99e-07  5.75e-06  8.29e-01  
 27  +4.9205e-01  +5.2539e-01  3.33e-02  1.67e-06  8.25e-04  6.74e-07  5.52e-06  1.96e-01  
 28  +4.8950e-01  +5.1501e-01  2.55e-02  1.18e-06  5.81e-04  4.43e-07  3.96e-06  4.19e-01  
 29  +4.8914e-01  +5.1343e-01  2.43e-02  1.10e-06  5.41e-04  3.70e-07  3.69e-06  2.78e-01  
 30  +4.8743e-01  +5.0659e-01  1.92e-02  8.30e-07  4.09e-04  2.72e-07  2.83e-06  3.33e-01  
 31  +4.8676e-01  +5.0380e-01  1.70e-02  7.15e-07  3.53e-04  2.23e-07  2.45e-06  3.58e-01  
 32  +4.8515e-01  +4.9739e-01  1.22e-02  4.92e-07  2.43e-04  1.45e-07  1.71e-06  5.88e-01  
 33  +4.8474e-01  +4.9579e-01  1.11e-02  4.38e-07  2.16e-04  1.30e-07  1.52e-06  3.21e-01  
 34  +4.8249e-01  +4.8718e-01  4.69e-03  1.79e-07  8.83e-05  5.33e-08  6.37e-07  9.41e-01  
 35  +4.8129e-01  +4.8274e-01  1.45e-03  5.50e-08  2.71e-05  1.69e-08  1.99e-07  8.47e-01  
 36  +4.8103e-01  +4.8181e-01  7.78e-04  2.93e-08  1.44e-05  9.11e-09  1.06e-07  4.75e-01  
 37  +4.8100e-01  +4.8171e-01  7.06e-04  2.62e-08  1.29e-05  8.33e-09  9.48e-08  6.84e-01  
 38  +4.8079e-01  +4.8095e-01  1.64e-04  5.92e-09  2.92e-06  2.01e-09  2.16e-08  7.84e-01  
 39  +4.8076e-01  +4.8084e-01  8.66e-05  3.13e-09  1.55e-06  1.06e-09  1.14e-08  5.25e-01  
 40  +4.8072e-01  +4.8072e-01  1.35e-06  4.89e-11  2.41e-08  1.64e-11  1.78e-10  9.90e-01  
 41  +4.8072e-01  +4.8072e-01  1.35e-08  4.89e-13  2.41e-10  1.64e-13  1.78e-12  9.90e-01  
 42  +4.8072e-01  +4.8072e-01  1.37e-10  5.02e-15  2.45e-12  2.99e-15  3.15e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 955.8084ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:49 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:49 PM: Optimal value: 4.807e-01
(CVXPY) Aug 30 12:15:49 PM: Compilation took 1.406e-01 seconds
(CVXPY) Aug 30 12:15:49 PM: Solver (including time spent in interface) took 9.854e-01 seconds
Iteration: 11, Objective: 0.4807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:49 PM: Your problem has 25105 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:49 PM: Finished problem compilation (took 1.406e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25105
  constraints   = 50105
  nnz(P)        = 0
  nnz(A)        = 358257
  cones (total) = 1
    : Nonnegative = 1,  numel = 50105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.46e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2542e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5335e+02  6.53e+02  1.62e-01  7.80e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6861e+02  1.68e+02  1.43e-01  6.90e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3651e+01  1.31e+01  3.74e-02  1.77e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0000e-01  +1.1231e+00  6.23e-01  1.87e-03  9.18e-01  2.49e-05  1.88e-01  2.92e-01  
  6  +5.0000e-01  +7.0482e-01  2.05e-01  6.12e-04  3.01e-01  7.44e-06  6.81e-02  6.69e-01  
  7  +5.0000e-01  +6.5298e-01  1.53e-01  4.57e-04  2.25e-01  5.44e-06  4.61e-02  4.21e-01  
  8  +5.0000e-01  +6.5490e-01  1.55e-01  4.63e-04  2.28e-01  5.12e-06  4.35e-02  1.70e-01  
  9  +5.0000e-01  +6.2347e-01  1.23e-01  3.69e-04  1.81e-01  4.06e-06  2.62e-02  5.66e-01  
 10  +5.0000e-01  +6.1154e-01  1.12e-01  3.33e-04  1.64e-01  4.41e-06  1.54e-02  5.18e-01  
 11  +5.0001e-01  +6.1115e-01  1.11e-01  3.31e-04  1.63e-01  1.94e-06  1.27e-02  6.58e-01  
 12  +5.0000e-01  +5.9135e-01  9.14e-02  2.50e-04  1.23e-01  6.42e-06  2.28e-03  8.65e-01  
 13  +4.9988e-01  +5.6979e-01  6.99e-02  4.13e-05  2.04e-02  6.72e-05  1.46e-04  9.90e-01  
 14  +4.9962e-01  +5.6810e-01  6.85e-02  1.47e-05  7.24e-03  1.88e-04  4.91e-05  6.83e-01  
 15  +4.9969e-01  +5.6353e-01  6.38e-02  1.15e-05  5.67e-03  1.06e-04  3.81e-05  6.81e-01  
 16  +4.9946e-01  +5.5929e-01  5.98e-02  6.41e-06  3.17e-03  8.86e-05  2.10e-05  8.96e-01  
 17  +4.9927e-01  +5.5800e-01  5.87e-02  5.70e-06  2.81e-03  9.03e-05  1.86e-05  1.66e-01  
 18  +4.9906e-01  +5.5647e-01  5.74e-02  5.43e-06  2.68e-03  6.25e-05  1.77e-05  3.24e-01  
 19  +4.9848e-01  +5.5302e-01  5.45e-02  4.35e-06  2.15e-03  6.48e-05  1.40e-05  2.64e-01  
 20  +4.9827e-01  +5.5208e-01  5.38e-02  4.02e-06  1.98e-03  5.05e-05  1.29e-05  2.96e-01  
 21  +4.9818e-01  +5.5185e-01  5.37e-02  4.01e-06  1.98e-03  4.86e-05  1.29e-05  2.93e-02  
 22  +4.9750e-01  +5.4885e-01  5.13e-02  3.42e-06  1.69e-03  3.73e-05  1.10e-05  3.68e-01  
 23  +4.9746e-01  +5.4864e-01  5.12e-02  3.33e-06  1.64e-03  2.94e-05  1.07e-05  2.16e-01  
 24  +4.9723e-01  +5.4777e-01  5.05e-02  3.22e-06  1.59e-03  2.52e-05  1.03e-05  1.55e-01  
 25  +4.9571e-01  +5.4160e-01  4.59e-02  2.56e-06  1.26e-03  1.40e-05  8.25e-06  5.25e-01  
 26  +4.9237e-01  +5.2660e-01  3.42e-02  1.74e-06  8.61e-04  1.09e-06  5.75e-06  8.08e-01  
 27  +4.9223e-01  +5.2604e-01  3.38e-02  1.71e-06  8.45e-04  1.01e-06  5.65e-06  8.22e-02  
 28  +4.8995e-01  +5.1680e-01  2.69e-02  1.26e-06  6.23e-04  5.77e-07  4.23e-06  4.83e-01  
 29  +4.8946e-01  +5.1479e-01  2.53e-02  1.17e-06  5.76e-04  5.05e-07  3.92e-06  1.72e-01  
 30  +4.8818e-01  +5.0925e-01  2.11e-02  9.05e-07  4.46e-04  2.11e-07  3.07e-06  8.54e-01  
 31  +4.8767e-01  +5.0716e-01  1.95e-02  8.22e-07  4.06e-04  1.96e-07  2.80e-06  2.91e-01  
 32  +4.8670e-01  +5.0329e-01  1.66e-02  6.78e-07  3.34e-04  1.70e-07  2.32e-06  6.36e-01  
 33  +4.8525e-01  +4.9772e-01  1.25e-02  4.97e-07  2.45e-04  1.28e-07  1.72e-06  4.06e-01  
 34  +4.8427e-01  +4.9400e-01  9.73e-03  3.82e-07  1.88e-04  1.01e-07  1.34e-06  3.43e-01  
 35  +4.8243e-01  +4.8693e-01  4.50e-03  1.71e-07  8.44e-05  5.20e-08  6.09e-07  9.90e-01  
 36  +4.8165e-01  +4.8408e-01  2.42e-03  9.18e-08  4.53e-05  2.82e-08  3.30e-07  5.94e-01  
 37  +4.8091e-01  +4.8136e-01  4.52e-04  1.70e-08  8.39e-06  5.35e-09  6.17e-08  8.36e-01  
 38  +4.8090e-01  +4.8134e-01  4.39e-04  1.65e-08  8.12e-06  5.16e-09  5.97e-08  1.96e-01  
 39  +4.8079e-01  +4.8097e-01  1.78e-04  6.45e-09  3.18e-06  2.20e-09  2.35e-08  6.60e-01  
 40  +4.8078e-01  +4.8092e-01  1.38e-04  5.00e-09  2.47e-06  1.70e-09  1.82e-08  2.80e-01  
 41  +4.8072e-01  +4.8073e-01  8.72e-06  3.15e-10  1.56e-07  1.06e-10  1.15e-09  9.89e-01  
 42  +4.8072e-01  +4.8072e-01  8.72e-08  3.16e-12  1.56e-09  1.07e-12  1.16e-11  9.90e-01  
 43  +4.8072e-01  +4.8072e-01  8.72e-10  3.15e-14  1.56e-11  1.07e-14  1.16e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 969.6685ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:50 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:50 PM: Optimal value: 4.807e-01
(CVXPY) Aug 30 12:15:50 PM: Compilation took 1.406e-01 seconds
(CVXPY) Aug 30 12:15:50 PM: Solver (including time spent in interface) took 1.002e+00 seconds
Iteration: 12, Objective: 0.4807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:15:50 PM: Your problem has 25106 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:15:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:15:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:15:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:15:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:15:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:15:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:15:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:15:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:15:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:15:50 PM: Finished problem compilation (took 1.410e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25106
  constraints   = 50106
  nnz(P)        = 0
  nnz(A)        = 359893
  cones (total) = 1
    : Nonnegative = 1,  numel = 50106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.46e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2542e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5335e+02  6.53e+02  1.62e-01  7.80e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6861e+02  1.68e+02  1.43e-01  6.91e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3651e+01  1.31e+01  3.74e-02  1.77e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0000e-01  +1.1233e+00  6.23e-01  1.87e-03  9.18e-01  2.49e-05  1.88e-01  2.92e-01  
  6  +5.0000e-01  +7.0446e-01  2.04e-01  6.11e-04  3.01e-01  7.42e-06  6.80e-02  6.70e-01  
  7  +5.0000e-01  +6.5196e-01  1.52e-01  4.54e-04  2.23e-01  5.43e-06  4.58e-02  4.20e-01  
  8  +5.0000e-01  +6.5403e-01  1.54e-01  4.60e-04  2.27e-01  5.11e-06  4.33e-02  1.67e-01  
  9  +5.0000e-01  +6.2308e-01  1.23e-01  3.68e-04  1.81e-01  4.07e-06  2.61e-02  5.66e-01  
 10  +5.0000e-01  +6.1171e-01  1.12e-01  3.33e-04  1.64e-01  4.41e-06  1.54e-02  5.18e-01  
 11  +5.0001e-01  +6.1126e-01  1.11e-01  3.31e-04  1.63e-01  1.87e-06  1.26e-02  6.73e-01  
 12  +5.0000e-01  +5.9162e-01  9.16e-02  2.50e-04  1.23e-01  6.17e-06  2.29e-03  8.63e-01  
 13  +4.9988e-01  +5.6986e-01  7.00e-02  4.12e-05  2.04e-02  6.49e-05  1.45e-04  9.90e-01  
 14  +4.9962e-01  +5.6819e-01  6.86e-02  1.41e-05  6.96e-03  1.89e-04  4.72e-05  6.93e-01  
 15  +4.9969e-01  +5.6380e-01  6.41e-02  1.14e-05  5.64e-03  1.06e-04  3.78e-05  6.46e-01  
 16  +4.9947e-01  +5.5969e-01  6.02e-02  6.58e-06  3.25e-03  9.08e-05  2.15e-05  8.49e-01  
 17  +4.9926e-01  +5.5826e-01  5.90e-02  5.75e-06  2.84e-03  9.41e-05  1.87e-05  1.79e-01  
 18  +4.9908e-01  +5.5686e-01  5.78e-02  5.51e-06  2.72e-03  6.76e-05  1.79e-05  2.92e-01  
 19  +4.9845e-01  +5.5304e-01  5.46e-02  4.31e-06  2.13e-03  7.09e-05  1.39e-05  2.82e-01  
 20  +4.9826e-01  +5.5218e-01  5.39e-02  4.01e-06  1.98e-03  5.43e-05  1.29e-05  2.98e-01  
 21  +4.9818e-01  +5.5195e-01  5.38e-02  4.00e-06  1.98e-03  5.24e-05  1.29e-05  2.81e-02  
 22  +4.9749e-01  +5.4885e-01  5.14e-02  3.40e-06  1.68e-03  4.04e-05  1.09e-05  3.66e-01  
 23  +4.9744e-01  +5.4863e-01  5.12e-02  3.32e-06  1.64e-03  3.20e-05  1.06e-05  2.13e-01  
 24  +4.9714e-01  +5.4746e-01  5.03e-02  3.17e-06  1.56e-03  2.58e-05  1.01e-05  2.06e-01  
 25  +4.9601e-01  +5.4292e-01  4.69e-02  2.72e-06  1.35e-03  1.71e-05  8.78e-06  3.82e-01  
 26  +4.9199e-01  +5.2549e-01  3.35e-02  1.61e-06  7.93e-04  7.95e-06  5.28e-06  6.20e-01  
 27  +4.9182e-01  +5.2475e-01  3.29e-02  1.56e-06  7.72e-04  7.18e-06  5.15e-06  9.48e-02  
 28  +4.9154e-01  +5.2327e-01  3.17e-02  1.51e-06  7.46e-04  4.69e-06  5.00e-06  2.88e-01  
 29  +4.9108e-01  +5.2117e-01  3.01e-02  1.40e-06  6.92e-04  2.34e-06  4.66e-06  4.60e-01  
 30  +4.8835e-01  +5.1008e-01  2.17e-02  9.58e-07  4.73e-04  9.97e-07  3.24e-06  5.53e-01  
 31  +4.8610e-01  +5.0103e-01  1.49e-02  6.19e-07  3.05e-04  3.90e-07  2.13e-06  6.57e-01  
 32  +4.8535e-01  +4.9814e-01  1.28e-02  5.16e-07  2.55e-04  2.72e-07  1.79e-06  4.15e-01  
 33  +4.8417e-01  +4.9356e-01  9.39e-03  3.66e-07  1.81e-04  1.48e-07  1.28e-06  6.73e-01  
 34  +4.8401e-01  +4.9288e-01  8.87e-03  3.42e-07  1.69e-04  1.31e-07  1.20e-06  3.27e-01  
 35  +4.8240e-01  +4.8680e-01  4.40e-03  1.67e-07  8.25e-05  5.27e-08  5.95e-07  9.90e-01  
 36  +4.8118e-01  +4.8236e-01  1.17e-03  4.44e-08  2.19e-05  1.40e-08  1.60e-07  7.86e-01  
 37  +4.8105e-01  +4.8188e-01  8.29e-04  3.12e-08  1.54e-05  9.94e-09  1.13e-07  3.12e-01  
 38  +4.8101e-01  +4.8174e-01  7.25e-04  2.69e-08  1.33e-05  8.64e-09  9.72e-08  7.80e-01  
 39  +4.8080e-01  +4.8099e-01  1.92e-04  6.97e-09  3.44e-06  2.36e-09  2.54e-08  7.49e-01  
 40  +4.8072e-01  +4.8073e-01  5.02e-06  1.82e-10  8.96e-08  6.01e-11  6.62e-10  9.90e-01  
 41  +4.8072e-01  +4.8072e-01  5.03e-08  1.82e-12  8.97e-10  6.04e-13  6.65e-12  9.90e-01  
 42  +4.8072e-01  +4.8072e-01  5.15e-10  1.86e-14  9.19e-12  1.38e-14  1.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 977.5874ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:15:51 PM: Problem status: optimal
(CVXPY) Aug 30 12:15:51 PM: Optimal value: 4.807e-01
(CVXPY) Aug 30 12:15:51 PM: Compilation took 1.410e-01 seconds
(CVXPY) Aug 30 12:15:51 PM: Solver (including time spent in interface) took 1.002e+00 seconds
FULL MODEL:
  Accruacy: 0.51104
  Our objective: 0.022080000000000044

IF 
    (x6 = 1 AND x2 = 0 AND x5 = 0)                                             <-- (term's our objective: 0.006559999999999996)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.011160000000000024)
 OR (x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.0010400000000000253)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0018000000000000394)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0006400000000000433)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x5 = 0) <-- (term's our objective: 0.00044000000000002544)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x6 = 0) <-- (term's our objective: 0.0004400000000000072)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.011160000000000024
    Its accruacy: 0.50558
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.011160000000000024
  Highest accruacy: 0.50558
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

