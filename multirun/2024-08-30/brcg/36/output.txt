Command:
python test_script.py -s smallest_subclass -d 1 -n 50000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.59968
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 1.

Computed total variation: 0.59968
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:01:18 PM: Your problem has 25003 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:01:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:01:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:01:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:01:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:01:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:01:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:01:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:01:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:01:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:01:18 PM: Finished problem compilation (took 3.486e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25003
  constraints   = 50003
  nnz(P)        = 0
  nnz(A)        = 100003
  cones (total) = 1
    : Nonnegative = 1,  numel = 50003

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0002e-01  +2.5002e+04  2.50e+04  9.92e-01  1.44e+02  1.00e+00  1.00e+00   ------   
  1  +6.6439e-01  +4.0377e+03  4.04e+03  2.22e-01  5.91e+01  4.90e-03  3.29e-01  7.58e-01  
  2  +5.5527e-01  +7.4793e+02  7.47e+02  1.34e-01  3.92e+01  4.08e-03  2.12e-01  4.92e-01  
  3  +5.0054e-01  +1.0856e+01  1.04e+01  2.96e-02  8.25e+00  6.83e-05  2.03e-01  3.17e-01  
  4  +4.9993e-01  +2.0507e+00  1.55e+00  4.53e-03  1.31e+00  4.69e-05  4.99e-02  9.80e-01  
  5  +4.9299e-01  +2.2583e+00  1.77e+00  7.42e-04  2.36e-01  1.68e-03  1.57e-03  9.74e-01  
  6  +4.1847e-01  +1.8147e+00  1.40e+00  5.76e-05  1.84e-02  1.69e-02  1.17e-04  9.26e-01  
  7  +3.1795e-01  +9.9681e-01  6.79e-01  3.90e-05  1.18e-02  9.59e-05  1.01e-04  2.69e-01  
  8  +2.3563e-01  +4.3479e-01  1.99e-01  1.24e-05  3.60e-03  5.69e-07  5.01e-05  6.00e-01  
  9  +2.0286e-01  +2.1756e-01  1.47e-02  9.24e-07  2.66e-04  3.87e-08  5.53e-06  9.28e-01  
 10  +2.0029e-01  +2.0047e-01  1.75e-04  1.10e-08  3.17e-06  4.64e-10  6.99e-08  9.88e-01  
 11  +2.0026e-01  +2.0026e-01  1.75e-06  1.10e-10  3.17e-08  4.64e-12  6.99e-10  9.90e-01  
 12  +2.0026e-01  +2.0026e-01  1.75e-08  1.10e-12  3.17e-10  4.66e-14  7.02e-12  9.90e-01  
 13  +2.0026e-01  +2.0026e-01  1.75e-10  1.10e-14  3.17e-12  4.66e-16  7.03e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 134.9993ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:01:18 PM: Optimal value: 2.003e-01
(CVXPY) Aug 30 12:01:18 PM: Compilation took 3.486e-02 seconds
(CVXPY) Aug 30 12:01:18 PM: Solver (including time spent in interface) took 1.501e-01 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.79984
  Our objective: 0.59968

IF 
    (x0 = 0) <-- (term's our objective: 0.59968)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.59968
    Its accruacy: 0.79984
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.59968
  Highest accruacy: 0.79984
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

