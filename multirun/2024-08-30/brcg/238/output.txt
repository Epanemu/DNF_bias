Command:
python test_script.py -s smallest_subclass -d 6 -n 50000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.01892
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 6.

Computed total variation: 0.03788
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:12 PM: Your problem has 25013 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:13 PM: Finished problem compilation (took 2.031e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25013
  constraints   = 50013
  nnz(P)        = 0
  nnz(A)        = 225013
  cones (total) = 1
    : Nonnegative = 1,  numel = 50013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.9317e-01  +5.1431e+03  5.14e+03  3.90e-01  1.35e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4210e-01  +6.8134e+02  6.81e+02  1.56e-01  6.85e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1087e-01  +1.7229e+02  1.72e+02  1.40e-01  6.15e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0082e-01  +1.0790e+01  1.03e+01  2.98e-02  1.28e+01  3.44e-06  1.93e-01  4.61e-01  
  5  +5.0000e-01  +9.8331e-01  4.83e-01  1.46e-03  6.48e-01  2.51e-05  1.79e-01  4.92e-01  
  6  +5.0000e-01  +5.4867e-01  4.87e-02  1.45e-04  6.48e-02  2.37e-06  1.87e-02  8.96e-01  
  7  +5.0000e-01  +5.2265e-01  2.27e-02  6.75e-05  3.01e-02  2.21e-06  4.44e-03  8.44e-01  
  8  +4.9998e-01  +5.2591e-01  2.59e-02  7.16e-05  3.20e-02  1.40e-05  6.57e-04  8.92e-01  
  9  +4.9898e-01  +5.2371e-01  2.47e-02  4.32e-06  1.93e-03  6.08e-04  1.36e-05  9.79e-01  
 10  +4.9681e-01  +5.1645e-01  1.96e-02  1.18e-06  5.28e-04  1.41e-03  3.68e-06  7.47e-01  
 11  +4.9562e-01  +5.0342e-01  7.80e-03  4.36e-07  1.95e-04  2.03e-04  1.41e-06  7.67e-01  
 12  +4.9387e-01  +4.9509e-01  1.22e-03  5.39e-08  2.41e-05  2.27e-05  1.97e-07  8.92e-01  
 13  +4.9341e-01  +4.9344e-01  2.97e-05  1.18e-09  5.27e-07  3.37e-07  4.75e-09  9.84e-01  
 14  +4.9340e-01  +4.9340e-01  2.97e-07  1.18e-11  5.26e-09  3.37e-09  4.75e-11  9.90e-01  
 15  +4.9340e-01  +4.9340e-01  3.07e-09  1.19e-13  5.34e-11  8.76e-11  1.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 299.3554ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:13 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:13 PM: Optimal value: 4.934e-01
(CVXPY) Aug 30 12:11:13 PM: Compilation took 2.031e-01 seconds
(CVXPY) Aug 30 12:11:13 PM: Solver (including time spent in interface) took 3.754e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4934
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:13 PM: Your problem has 25023 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:13 PM: Finished problem compilation (took 9.407e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25023
  constraints   = 50023
  nnz(P)        = 0
  nnz(A)        = 242778
  cones (total) = 1
    : Nonnegative = 1,  numel = 50023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1432e+03  5.14e+03  3.90e-01  1.37e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4209e-01  +6.8120e+02  6.81e+02  1.56e-01  6.90e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7223e+02  1.72e+02  1.40e-01  6.19e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0745e+01  1.02e+01  2.97e-02  1.29e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0000e-01  +1.0219e+00  5.22e-01  1.57e-03  7.05e-01  2.57e-05  1.78e-01  4.88e-01  
  6  +5.0000e-01  +7.3702e-01  2.37e-01  7.10e-04  3.19e-01  1.05e-05  8.06e-02  6.36e-01  
  7  +5.0000e-01  +6.0792e-01  1.08e-01  3.22e-04  1.45e-01  3.87e-06  3.43e-02  7.39e-01  
  8  +5.0000e-01  +5.9930e-01  9.93e-02  2.96e-04  1.33e-01  3.28e-06  2.88e-02  2.85e-01  
  9  +5.0000e-01  +5.9147e-01  9.15e-02  2.73e-04  1.23e-01  2.83e-06  2.40e-02  2.79e-01  
 10  +5.0000e-01  +5.5192e-01  5.19e-02  1.55e-04  6.95e-02  1.46e-06  8.58e-03  8.91e-01  
 11  +5.0000e-01  +5.5327e-01  5.33e-02  1.59e-04  7.13e-02  1.23e-06  8.41e-03  1.99e-01  
 12  +5.0000e-01  +5.4956e-01  4.96e-02  1.47e-04  6.60e-02  1.82e-06  4.01e-03  5.89e-01  
 13  +4.9997e-01  +5.3627e-01  3.63e-02  5.78e-05  2.60e-02  1.81e-05  2.31e-04  9.82e-01  
 14  +4.9929e-01  +5.3434e-01  3.50e-02  3.12e-06  1.41e-03  4.16e-04  9.48e-06  9.59e-01  
 15  +4.9850e-01  +5.2821e-01  2.97e-02  2.08e-06  9.38e-04  3.78e-04  6.28e-06  4.55e-01  
 16  +4.9824e-01  +5.2583e-01  2.76e-02  1.78e-06  8.04e-04  2.57e-04  5.30e-06  3.95e-01  
 17  +4.9819e-01  +5.2510e-01  2.69e-02  1.75e-06  7.87e-04  1.93e-04  5.22e-06  1.94e-01  
 18  +4.9820e-01  +5.2423e-01  2.60e-02  1.55e-06  7.01e-04  5.72e-05  4.57e-06  6.77e-01  
 19  +4.9780e-01  +5.2275e-01  2.49e-02  1.16e-06  5.22e-04  3.70e-06  3.37e-06  9.90e-01  
 20  +4.9754e-01  +5.2172e-01  2.42e-02  1.08e-06  4.87e-04  3.09e-06  3.14e-06  2.02e-01  
 21  +4.9647e-01  +5.1689e-01  2.04e-02  9.60e-07  4.33e-04  2.90e-08  2.82e-06  8.00e-01  
 22  +4.9405e-01  +5.0895e-01  1.49e-02  5.50e-07  2.48e-04  4.16e-08  1.62e-06  4.90e-01  
 23  +4.8909e-01  +4.9192e-01  2.83e-03  8.87e-08  4.00e-05  3.68e-08  2.67e-07  9.90e-01  
 24  +4.8797e-01  +4.8836e-01  3.92e-04  1.19e-08  5.37e-06  6.30e-09  3.63e-08  9.90e-01  
 25  +4.8778e-01  +4.8779e-01  4.75e-06  1.44e-10  6.50e-08  7.55e-11  4.41e-10  9.88e-01  
 26  +4.8778e-01  +4.8778e-01  4.75e-08  1.44e-12  6.51e-10  7.55e-13  4.41e-12  9.90e-01  
 27  +4.8778e-01  +4.8778e-01  4.76e-10  1.44e-14  6.52e-12  8.08e-15  4.71e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 462.359ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:14 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:14 PM: Optimal value: 4.878e-01
(CVXPY) Aug 30 12:11:14 PM: Compilation took 9.407e-02 seconds
(CVXPY) Aug 30 12:11:14 PM: Solver (including time spent in interface) took 5.021e-01 seconds
Iteration: 2, Objective: 0.4878
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:14 PM: Your problem has 25033 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:14 PM: Finished problem compilation (took 1.720e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25033
  constraints   = 50033
  nnz(P)        = 0
  nnz(A)        = 259817
  cones (total) = 1
    : Nonnegative = 1,  numel = 50033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1432e+03  5.14e+03  3.90e-01  1.37e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4208e-01  +6.8115e+02  6.81e+02  1.56e-01  6.95e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7222e+02  1.72e+02  1.40e-01  6.23e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0745e+01  1.02e+01  2.97e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0000e-01  +1.0038e+00  5.04e-01  1.52e-03  6.86e-01  2.58e-05  1.78e-01  5.07e-01  
  6  +5.0000e-01  +7.7050e-01  2.70e-01  8.11e-04  3.67e-01  1.28e-05  9.31e-02  5.60e-01  
  7  +5.0000e-01  +6.6565e-01  1.66e-01  4.95e-04  2.24e-01  6.55e-06  5.30e-02  6.05e-01  
  8  +5.0001e-01  +6.2947e-01  1.29e-01  3.86e-04  1.75e-01  1.68e-06  3.23e-02  9.90e-01  
  9  +5.0001e-01  +5.7427e-01  7.43e-02  2.21e-04  1.00e-01  3.99e-07  1.42e-02  9.90e-01  
 10  +5.0000e-01  +5.6515e-01  6.51e-02  1.94e-04  8.76e-02  2.62e-07  6.82e-03  8.78e-01  
 11  +5.0000e-01  +5.4285e-01  4.28e-02  1.09e-04  4.93e-02  1.21e-06  7.13e-04  9.07e-01  
 12  +4.9989e-01  +5.4238e-01  4.25e-02  4.24e-06  1.92e-03  6.56e-05  1.27e-05  9.82e-01  
 13  +4.9963e-01  +5.4022e-01  4.06e-02  1.75e-06  7.95e-04  1.40e-04  5.21e-06  6.42e-01  
 14  +4.9899e-01  +5.3640e-01  3.74e-02  1.73e-06  7.85e-04  1.05e-04  5.12e-06  1.14e-01  
 15  +4.9878e-01  +5.3508e-01  3.63e-02  1.71e-06  7.78e-04  8.99e-05  5.10e-06  8.48e-02  
 16  +4.9852e-01  +5.3359e-01  3.51e-02  1.70e-06  7.72e-04  7.44e-05  5.07e-06  1.01e-01  
 17  +4.9816e-01  +5.3164e-01  3.35e-02  1.68e-06  7.64e-04  5.95e-05  5.03e-06  1.07e-01  
 18  +4.9546e-01  +5.2052e-01  2.51e-02  1.05e-06  4.78e-04  3.90e-05  3.17e-06  4.95e-01  
 19  +4.9228e-01  +5.0879e-01  1.65e-02  6.42e-07  2.91e-04  2.00e-05  1.97e-06  4.66e-01  
 20  +4.9230e-01  +5.0881e-01  1.65e-02  6.39e-07  2.90e-04  1.89e-05  1.96e-06  5.29e-02  
 21  +4.9229e-01  +5.0878e-01  1.65e-02  6.39e-07  2.90e-04  1.87e-05  1.96e-06  8.19e-03  
 22  +4.9076e-01  +5.0326e-01  1.25e-02  4.59e-07  2.08e-04  1.06e-05  1.42e-06  4.31e-01  
 23  +4.9078e-01  +5.0331e-01  1.25e-02  4.56e-07  2.07e-04  9.69e-06  1.41e-06  9.16e-02  
 24  +4.8802e-01  +4.9385e-01  5.83e-03  1.98e-07  8.98e-05  3.59e-06  6.25e-07  6.28e-01  
 25  +4.8802e-01  +4.9386e-01  5.83e-03  1.98e-07  8.98e-05  3.58e-06  6.25e-07  6.62e-03  
 26  +4.8777e-01  +4.9283e-01  5.06e-03  1.67e-07  7.59e-05  1.22e-06  5.28e-07  6.77e-01  
 27  +4.8747e-01  +4.9182e-01  4.35e-03  1.43e-07  6.47e-05  7.40e-07  4.52e-07  4.15e-01  
 28  +4.8745e-01  +4.9174e-01  4.29e-03  1.41e-07  6.39e-05  7.12e-07  4.46e-07  4.05e-02  
 29  +4.8745e-01  +4.9175e-01  4.30e-03  1.41e-07  6.38e-05  6.87e-07  4.46e-07  4.09e-02  
 30  +4.8595e-01  +4.8689e-01  9.38e-04  3.03e-08  1.37e-05  1.87e-08  9.75e-08  9.90e-01  
 31  +4.8553e-01  +4.8554e-01  1.35e-05  4.34e-10  1.97e-07  2.45e-10  1.41e-09  9.89e-01  
 32  +4.8552e-01  +4.8552e-01  1.35e-07  4.35e-12  1.97e-09  2.45e-12  1.41e-11  9.90e-01  
 33  +4.8552e-01  +4.8552e-01  1.35e-09  4.35e-14  1.97e-11  2.53e-14  1.46e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 618.2545ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:15 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:15 PM: Optimal value: 4.855e-01
(CVXPY) Aug 30 12:11:15 PM: Compilation took 1.720e-01 seconds
(CVXPY) Aug 30 12:11:15 PM: Solver (including time spent in interface) took 6.410e-01 seconds
Iteration: 3, Objective: 0.4855
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:15 PM: Your problem has 25043 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:15 PM: Finished problem compilation (took 9.469e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25043
  constraints   = 50043
  nnz(P)        = 0
  nnz(A)        = 269680
  cones (total) = 1
    : Nonnegative = 1,  numel = 50043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1432e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4208e-01  +6.8108e+02  6.81e+02  1.56e-01  6.96e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7220e+02  1.72e+02  1.40e-01  6.24e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0745e+01  1.02e+01  2.97e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0000e-01  +1.0114e+00  5.11e-01  1.54e-03  6.98e-01  2.58e-05  1.78e-01  5.01e-01  
  6  +5.0000e-01  +6.8834e-01  1.88e-01  5.64e-04  2.56e-01  9.06e-06  6.61e-02  6.66e-01  
  7  +5.0000e-01  +6.0485e-01  1.05e-01  3.13e-04  1.42e-01  5.05e-06  3.33e-02  5.69e-01  
  8  +5.0000e-01  +5.9440e-01  9.44e-02  2.82e-04  1.28e-01  4.48e-06  2.58e-02  3.25e-01  
  9  +5.0000e-01  +5.8059e-01  8.06e-02  2.40e-04  1.09e-01  3.11e-06  1.33e-02  8.07e-01  
 10  +5.0000e-01  +5.6197e-01  6.20e-02  1.82e-04  8.28e-02  4.40e-06  3.54e-03  9.33e-01  
 11  +4.9993e-01  +5.5027e-01  5.03e-02  6.46e-05  2.94e-02  4.24e-05  2.43e-04  9.90e-01  
 12  +4.9867e-01  +5.4714e-01  4.85e-02  4.07e-06  1.85e-03  7.66e-04  1.26e-05  9.48e-01  
 13  +4.9791e-01  +5.4214e-01  4.42e-02  2.83e-06  1.29e-03  8.05e-04  8.72e-06  4.05e-01  
 14  +4.9796e-01  +5.4132e-01  4.34e-02  2.74e-06  1.25e-03  6.93e-04  8.40e-06  1.53e-01  
 15  +4.9776e-01  +5.3971e-01  4.20e-02  2.46e-06  1.12e-03  6.18e-04  7.53e-06  2.17e-01  
 16  +4.9711e-01  +5.3608e-01  3.90e-02  1.98e-06  9.00e-04  4.98e-04  6.07e-06  3.77e-01  
 17  +4.9586e-01  +5.2954e-01  3.37e-02  1.64e-06  7.48e-04  2.86e-04  5.08e-06  3.98e-01  
 18  +4.9495e-01  +5.2531e-01  3.04e-02  1.43e-06  6.52e-04  1.87e-04  4.46e-06  3.17e-01  
 19  +4.9493e-01  +5.2516e-01  3.02e-02  1.43e-06  6.50e-04  1.78e-04  4.44e-06  3.69e-02  
 20  +4.9362e-01  +5.1960e-01  2.60e-02  1.17e-06  5.30e-04  9.24e-05  3.65e-06  4.40e-01  
 21  +4.9300e-01  +5.1683e-01  2.38e-02  1.04e-06  4.73e-04  4.51e-05  3.28e-06  4.44e-01  
 22  +4.8914e-01  +5.0291e-01  1.38e-02  5.29e-07  2.41e-04  1.00e-05  1.70e-06  7.39e-01  
 23  +4.8604e-01  +4.9219e-01  6.15e-03  2.20e-07  1.00e-04  3.99e-06  7.25e-07  5.98e-01  
 24  +4.8604e-01  +4.9220e-01  6.16e-03  2.20e-07  1.00e-04  3.98e-06  7.25e-07  5.83e-03  
 25  +4.8594e-01  +4.9178e-01  5.84e-03  2.05e-07  9.34e-05  2.53e-06  6.77e-07  3.82e-01  
 26  +4.8555e-01  +4.9039e-01  4.85e-03  1.67e-07  7.62e-05  1.25e-06  5.53e-07  5.29e-01  
 27  +4.8554e-01  +4.9036e-01  4.83e-03  1.67e-07  7.58e-05  1.23e-06  5.51e-07  1.81e-02  
 28  +4.8554e-01  +4.9037e-01  4.83e-03  1.67e-07  7.58e-05  1.21e-06  5.51e-07  1.68e-02  
 29  +4.8446e-01  +4.8673e-01  2.27e-03  7.66e-08  3.49e-05  1.65e-07  2.56e-07  8.91e-01  
 30  +4.8446e-01  +4.8672e-01  2.27e-03  7.66e-08  3.49e-05  1.65e-07  2.56e-07  3.93e-03  
 31  +4.8438e-01  +4.8647e-01  2.09e-03  7.12e-08  3.24e-05  1.19e-07  2.41e-07  2.84e-01  
 32  +4.8407e-01  +4.8541e-01  1.35e-03  4.57e-08  2.08e-05  2.43e-08  1.54e-07  9.57e-01  
 33  +4.8396e-01  +4.8508e-01  1.12e-03  3.77e-08  1.71e-05  1.99e-08  1.27e-07  2.82e-01  
 34  +4.8353e-01  +4.8368e-01  1.51e-04  5.10e-09  2.32e-06  2.19e-09  1.73e-08  9.90e-01  
 35  +4.8346e-01  +4.8346e-01  1.56e-06  5.25e-11  2.39e-08  2.24e-11  1.78e-10  9.90e-01  
 36  +4.8346e-01  +4.8346e-01  1.56e-08  5.25e-13  2.39e-10  2.24e-13  1.78e-12  9.90e-01  
 37  +4.8346e-01  +4.8346e-01  1.56e-10  5.26e-15  2.39e-12  2.30e-15  1.83e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 755.9036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:16 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:16 PM: Optimal value: 4.835e-01
(CVXPY) Aug 30 12:11:16 PM: Compilation took 9.469e-02 seconds
(CVXPY) Aug 30 12:11:16 PM: Solver (including time spent in interface) took 7.842e-01 seconds
Iteration: 4, Objective: 0.4835
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:16 PM: Your problem has 25044 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:16 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:16 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:16 PM: Finished problem compilation (took 1.094e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25044
  constraints   = 50044
  nnz(P)        = 0
  nnz(A)        = 271263
  cones (total) = 1
    : Nonnegative = 1,  numel = 50044

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +5.1433e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8104e+02  6.80e+02  1.56e-01  6.96e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7219e+02  1.72e+02  1.40e-01  6.25e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0747e+01  1.02e+01  2.97e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0000e-01  +1.0096e+00  5.10e-01  1.54e-03  6.96e-01  2.58e-05  1.78e-01  5.02e-01  
  6  +5.0000e-01  +6.2218e-01  1.22e-01  3.65e-04  1.66e-01  5.84e-06  4.32e-02  7.90e-01  
  7  +5.0000e-01  +6.0637e-01  1.06e-01  3.18e-04  1.44e-01  4.50e-06  3.14e-02  4.70e-01  
  8  +5.0000e-01  +5.9052e-01  9.05e-02  2.70e-04  1.23e-01  4.01e-06  2.19e-02  3.85e-01  
  9  +5.0001e-01  +6.0660e-01  1.07e-01  3.18e-04  1.44e-01  1.26e-06  1.53e-02  9.90e-01  
 10  +5.0000e-01  +5.5764e-01  5.76e-02  1.69e-04  7.67e-02  2.05e-06  2.98e-03  8.45e-01  
 11  +4.9992e-01  +5.5487e-01  5.49e-02  3.15e-05  1.43e-02  5.09e-05  1.04e-04  9.71e-01  
 12  +4.9915e-01  +5.5235e-01  5.32e-02  3.45e-06  1.57e-03  4.71e-04  1.07e-05  8.98e-01  
 13  +4.9870e-01  +5.4758e-01  4.89e-02  3.07e-06  1.40e-03  3.86e-04  9.41e-06  2.24e-01  
 14  +4.9820e-01  +5.4428e-01  4.61e-02  2.49e-06  1.13e-03  3.64e-04  7.61e-06  2.92e-01  
 15  +4.9824e-01  +5.4320e-01  4.50e-02  2.42e-06  1.10e-03  2.96e-04  7.40e-06  1.71e-01  
 16  +4.9809e-01  +5.4084e-01  4.27e-02  2.30e-06  1.05e-03  2.03e-04  7.02e-06  2.76e-01  
 17  +4.9774e-01  +5.3821e-01  4.05e-02  2.21e-06  1.01e-03  1.43e-04  6.77e-06  2.29e-01  
 18  +4.9690e-01  +5.3416e-01  3.73e-02  1.94e-06  8.81e-04  1.01e-04  5.95e-06  3.11e-01  
 19  +4.9645e-01  +5.3183e-01  3.54e-02  1.83e-06  8.34e-04  6.92e-05  5.65e-06  2.57e-01  
 20  +4.9583e-01  +5.2876e-01  3.29e-02  1.68e-06  7.66e-04  3.50e-05  5.22e-06  4.11e-01  
 21  +4.9366e-01  +5.2075e-01  2.71e-02  1.23e-06  5.58e-04  2.75e-05  3.84e-06  3.23e-01  
 22  +4.9268e-01  +5.1634e-01  2.37e-02  1.03e-06  4.70e-04  1.08e-06  3.27e-06  8.06e-01  
 23  +4.8793e-01  +4.9968e-01  1.17e-02  4.44e-07  2.02e-04  4.19e-07  1.44e-06  6.48e-01  
 24  +4.8779e-01  +4.9913e-01  1.13e-02  4.20e-07  1.91e-04  3.43e-07  1.37e-06  2.68e-01  
 25  +4.8657e-01  +4.9495e-01  8.38e-03  3.01e-07  1.37e-04  2.29e-07  9.90e-07  3.81e-01  
 26  +4.8530e-01  +4.9051e-01  5.21e-03  1.79e-07  8.15e-05  7.87e-08  5.93e-07  9.23e-01  
 27  +4.8525e-01  +4.9033e-01  5.09e-03  1.75e-07  7.94e-05  7.61e-08  5.78e-07  1.95e-01  
 28  +4.8524e-01  +4.9030e-01  5.06e-03  1.73e-07  7.89e-05  7.56e-08  5.74e-07  8.39e-02  
 29  +4.8437e-01  +4.8738e-01  3.01e-03  1.02e-07  4.63e-05  4.35e-08  3.39e-07  9.82e-01  
 30  +4.8429e-01  +4.8714e-01  2.85e-03  9.59e-08  4.36e-05  4.11e-08  3.20e-07  1.62e-01  
 31  +4.8415e-01  +4.8664e-01  2.50e-03  8.42e-08  3.83e-05  3.61e-08  2.81e-07  4.09e-01  
 32  +4.8362e-01  +4.8493e-01  1.31e-03  4.45e-08  2.02e-05  1.84e-08  1.50e-07  9.90e-01  
 33  +4.8317e-01  +4.8345e-01  2.81e-04  9.47e-09  4.31e-06  4.01e-09  3.21e-08  8.22e-01  
 34  +4.8304e-01  +4.8305e-01  4.97e-06  1.67e-10  7.61e-08  6.75e-11  5.67e-10  9.90e-01  
 35  +4.8304e-01  +4.8304e-01  4.97e-08  1.67e-12  7.61e-10  6.76e-13  5.68e-12  9.90e-01  
 36  +4.8304e-01  +4.8304e-01  4.97e-10  1.67e-14  7.61e-12  6.76e-15  5.68e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 812.0731ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:17 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:17 PM: Optimal value: 4.830e-01
(CVXPY) Aug 30 12:11:17 PM: Compilation took 1.094e-01 seconds
(CVXPY) Aug 30 12:11:17 PM: Solver (including time spent in interface) took 8.467e-01 seconds
Iteration: 5, Objective: 0.4830
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:17 PM: Your problem has 25045 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:17 PM: Finished problem compilation (took 1.095e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25045
  constraints   = 50045
  nnz(P)        = 0
  nnz(A)        = 272813
  cones (total) = 1
    : Nonnegative = 1,  numel = 50045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1432e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8103e+02  6.80e+02  1.56e-01  6.96e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7218e+02  1.72e+02  1.40e-01  6.25e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0746e+01  1.02e+01  2.97e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0000e-01  +1.0138e+00  5.14e-01  1.55e-03  7.02e-01  2.58e-05  1.78e-01  4.99e-01  
  6  +5.0000e-01  +6.3642e-01  1.36e-01  4.08e-04  1.85e-01  6.51e-06  4.81e-02  7.60e-01  
  7  +5.0000e-01  +5.8395e-01  8.40e-02  2.51e-04  1.14e-01  4.17e-06  2.45e-02  5.88e-01  
  8  +5.0000e-01  +5.8069e-01  8.07e-02  2.41e-04  1.09e-01  4.13e-06  1.81e-02  3.85e-01  
  9  +5.0000e-01  +5.9395e-01  9.39e-02  2.80e-04  1.27e-01  2.42e-06  1.10e-02  9.40e-01  
 10  +5.0000e-01  +5.9116e-01  9.12e-02  2.71e-04  1.23e-01  2.28e-06  9.49e-03  2.16e-01  
 11  +5.0001e-01  +5.8153e-01  8.15e-02  2.43e-04  1.10e-01  7.24e-07  8.91e-03  5.03e-01  
 12  +5.0000e-01  +5.6076e-01  6.08e-02  1.70e-04  7.74e-02  1.47e-06  1.73e-03  9.90e-01  
 13  +4.9986e-01  +5.5786e-01  5.80e-02  8.37e-06  3.81e-03  8.85e-05  2.60e-05  9.86e-01  
 14  +4.9944e-01  +5.5457e-01  5.51e-02  2.78e-06  1.27e-03  2.41e-04  8.55e-06  7.01e-01  
 15  +4.9890e-01  +5.5039e-01  5.15e-02  2.70e-06  1.23e-03  1.95e-04  8.26e-06  1.08e-01  
 16  +4.9847e-01  +5.4624e-01  4.78e-02  2.52e-06  1.15e-03  1.40e-04  7.72e-06  2.33e-01  
 17  +4.9831e-01  +5.4391e-01  4.56e-02  2.43e-06  1.10e-03  1.02e-04  7.44e-06  2.21e-01  
 18  +4.9802e-01  +5.4168e-01  4.37e-02  2.31e-06  1.05e-03  7.99e-05  7.10e-06  1.89e-01  
 19  +4.9715e-01  +5.3664e-01  3.95e-02  2.10e-06  9.56e-04  4.79e-05  6.49e-06  3.24e-01  
 20  +4.9564e-01  +5.3016e-01  3.45e-02  1.70e-06  7.72e-04  3.60e-05  5.28e-06  3.00e-01  
 21  +4.9406e-01  +5.2367e-01  2.96e-02  1.37e-06  6.25e-04  2.57e-05  4.31e-06  2.97e-01  
 22  +4.9377e-01  +5.2202e-01  2.82e-02  1.30e-06  5.93e-04  1.63e-05  4.10e-06  3.03e-01  
 23  +4.9028e-01  +5.0872e-01  1.84e-02  7.55e-07  3.44e-04  8.24e-06  2.42e-06  5.20e-01  
 24  +4.8973e-01  +5.0664e-01  1.69e-02  6.72e-07  3.06e-04  6.55e-06  2.15e-06  2.22e-01  
 25  +4.8941e-01  +5.0545e-01  1.60e-02  6.27e-07  2.85e-04  4.78e-06  2.01e-06  2.62e-01  
 26  +4.8824e-01  +5.0111e-01  1.29e-02  4.81e-07  2.19e-04  2.45e-06  1.55e-06  4.95e-01  
 27  +4.8636e-01  +4.9443e-01  8.08e-03  2.89e-07  1.32e-04  1.08e-06  9.49e-07  5.67e-01  
 28  +4.8564e-01  +4.9178e-01  6.13e-03  2.12e-07  9.67e-05  2.15e-07  7.00e-07  8.66e-01  
 29  +4.8525e-01  +4.9042e-01  5.18e-03  1.79e-07  8.14e-05  1.72e-07  5.91e-07  2.28e-01  
 30  +4.8522e-01  +4.9033e-01  5.10e-03  1.76e-07  7.99e-05  1.53e-07  5.80e-07  1.92e-01  
 31  +4.8377e-01  +4.8544e-01  1.67e-03  5.65e-08  2.57e-05  4.57e-08  1.90e-07  7.27e-01  
 32  +4.8377e-01  +4.8544e-01  1.67e-03  5.65e-08  2.57e-05  4.56e-08  1.90e-07  1.57e-03  
 33  +4.8375e-01  +4.8538e-01  1.63e-03  5.56e-08  2.53e-05  4.23e-08  1.89e-07  6.00e-02  
 34  +4.8360e-01  +4.8486e-01  1.26e-03  4.28e-08  1.95e-05  2.21e-08  1.44e-07  8.00e-01  
 35  +4.8341e-01  +4.8425e-01  8.38e-04  2.83e-08  1.29e-05  1.42e-08  9.53e-08  4.62e-01  
 36  +4.8305e-01  +4.8306e-01  1.17e-05  3.93e-10  1.79e-07  1.87e-10  1.33e-09  9.89e-01  
 37  +4.8304e-01  +4.8304e-01  1.17e-07  3.93e-12  1.79e-09  1.87e-12  1.33e-11  9.90e-01  
 38  +4.8304e-01  +4.8304e-01  1.17e-09  3.93e-14  1.79e-11  1.97e-14  1.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 736.373ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:18 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:18 PM: Optimal value: 4.830e-01
(CVXPY) Aug 30 12:11:18 PM: Compilation took 1.095e-01 seconds
(CVXPY) Aug 30 12:11:18 PM: Solver (including time spent in interface) took 7.691e-01 seconds
Iteration: 6, Objective: 0.4830
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:18 PM: Your problem has 25055 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:18 PM: Finished problem compilation (took 1.104e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25055
  constraints   = 50055
  nnz(P)        = 0
  nnz(A)        = 279395
  cones (total) = 1
    : Nonnegative = 1,  numel = 50055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +5.1432e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8096e+02  6.80e+02  1.56e-01  6.97e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7217e+02  1.72e+02  1.40e-01  6.25e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0747e+01  1.02e+01  2.97e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1445e+00  6.44e-01  1.94e-03  8.80e-01  2.55e-05  1.81e-01  3.99e-01  
  6  +5.0000e-01  +6.5825e-01  1.58e-01  4.73e-04  2.15e-01  5.40e-06  5.22e-02  7.34e-01  
  7  +5.0000e-01  +6.1045e-01  1.10e-01  3.30e-04  1.50e-01  3.69e-06  3.23e-02  4.92e-01  
  8  +5.0000e-01  +5.9712e-01  9.71e-02  2.90e-04  1.32e-01  3.42e-06  2.42e-02  3.11e-01  
  9  +5.0000e-01  +5.9768e-01  9.77e-02  2.92e-04  1.33e-01  3.37e-06  2.41e-02  2.38e-02  
 10  +5.0000e-01  +5.7495e-01  7.49e-02  2.23e-04  1.02e-01  3.23e-06  1.01e-02  7.59e-01  
 11  +4.9999e-01  +5.6983e-01  6.98e-02  2.04e-04  9.27e-02  6.99e-06  3.24e-03  7.52e-01  
 12  +4.9998e-01  +5.6187e-01  6.19e-02  1.59e-04  7.22e-02  1.29e-05  1.11e-03  8.25e-01  
 13  +4.9981e-01  +5.5748e-01  5.77e-02  3.24e-05  1.47e-02  1.15e-04  1.08e-04  9.30e-01  
 14  +4.9858e-01  +5.5423e-01  5.56e-02  4.84e-06  2.21e-03  7.68e-04  1.52e-05  8.60e-01  
 15  +4.9894e-01  +5.5115e-01  5.22e-02  4.73e-06  2.16e-03  4.68e-04  1.48e-05  3.17e-01  
 16  +4.9853e-01  +5.4385e-01  4.53e-02  3.01e-06  1.37e-03  2.68e-04  9.33e-06  8.02e-01  
 17  +4.9778e-01  +5.4022e-01  4.24e-02  2.49e-06  1.13e-03  2.15e-04  7.74e-06  3.58e-01  
 18  +4.9682e-01  +5.3605e-01  3.92e-02  2.13e-06  9.71e-04  1.58e-04  6.67e-06  3.28e-01  
 19  +4.9529e-01  +5.2995e-01  3.47e-02  1.74e-06  7.94e-04  1.20e-04  5.51e-06  2.89e-01  
 20  +4.9499e-01  +5.2871e-01  3.37e-02  1.68e-06  7.67e-04  1.07e-04  5.33e-06  9.58e-02  
 21  +4.9293e-01  +5.2041e-01  2.75e-02  1.29e-06  5.89e-04  3.04e-05  4.16e-06  6.20e-01  
 22  +4.9244e-01  +5.1862e-01  2.62e-02  1.20e-06  5.48e-04  2.58e-05  3.88e-06  1.55e-01  
 23  +4.9216e-01  +5.1753e-01  2.54e-02  1.15e-06  5.25e-04  1.94e-05  3.73e-06  2.17e-01  
 24  +4.9147e-01  +5.1501e-01  2.35e-02  1.04e-06  4.76e-04  1.44e-05  3.40e-06  2.42e-01  
 25  +4.8969e-01  +5.0849e-01  1.88e-02  7.87e-07  3.58e-04  8.24e-06  2.59e-06  4.19e-01  
 26  +4.8894e-01  +5.0575e-01  1.68e-02  6.65e-07  3.03e-04  3.21e-06  2.19e-06  6.04e-01  
 27  +4.8814e-01  +5.0290e-01  1.48e-02  5.71e-07  2.60e-04  2.18e-06  1.89e-06  3.27e-01  
 28  +4.8486e-01  +4.9123e-01  6.37e-03  2.30e-07  1.05e-04  2.27e-08  7.81e-07  9.83e-01  
 29  +4.8386e-01  +4.8773e-01  3.87e-03  1.38e-07  6.29e-05  1.90e-08  4.75e-07  4.80e-01  
 30  +4.8303e-01  +4.8485e-01  1.82e-03  6.40e-08  2.92e-05  1.48e-08  2.22e-07  7.10e-01  
 31  +4.8303e-01  +4.8485e-01  1.82e-03  6.40e-08  2.92e-05  1.47e-08  2.22e-07  1.11e-03  
 32  +4.8301e-01  +4.8478e-01  1.77e-03  6.27e-08  2.86e-05  1.46e-08  2.20e-07  7.71e-02  
 33  +4.8279e-01  +4.8400e-01  1.21e-03  4.27e-08  1.95e-05  1.55e-08  1.49e-07  9.52e-01  
 34  +4.8271e-01  +4.8375e-01  1.04e-03  3.63e-08  1.65e-05  1.34e-08  1.26e-07  2.60e-01  
 35  +4.8229e-01  +4.8236e-01  6.82e-05  2.38e-09  1.09e-06  8.92e-10  8.38e-09  9.90e-01  
 36  +4.8226e-01  +4.8226e-01  6.86e-07  2.39e-11  1.09e-08  8.96e-12  8.43e-11  9.90e-01  
 37  +4.8226e-01  +4.8226e-01  6.86e-09  2.39e-13  1.09e-10  8.96e-14  8.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 764.643ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:19 PM: Optimal value: 4.823e-01
(CVXPY) Aug 30 12:11:19 PM: Compilation took 1.104e-01 seconds
(CVXPY) Aug 30 12:11:19 PM: Solver (including time spent in interface) took 7.973e-01 seconds
Iteration: 7, Objective: 0.4823
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:19 PM: Your problem has 25056 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:19 PM: Finished problem compilation (took 2.500e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25056
  constraints   = 50056
  nnz(P)        = 0
  nnz(A)        = 280217
  cones (total) = 1
    : Nonnegative = 1,  numel = 50056

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +5.1432e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8096e+02  6.80e+02  1.56e-01  6.97e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7217e+02  1.72e+02  1.40e-01  6.25e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0747e+01  1.02e+01  2.97e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1444e+00  6.44e-01  1.94e-03  8.80e-01  2.55e-05  1.81e-01  3.99e-01  
  6  +5.0000e-01  +6.9839e-01  1.98e-01  5.93e-04  2.70e-01  7.06e-06  6.45e-02  6.65e-01  
  7  +5.0000e-01  +6.1636e-01  1.16e-01  3.48e-04  1.58e-01  4.03e-06  3.47e-02  5.66e-01  
  8  +5.0000e-01  +5.9489e-01  9.49e-02  2.83e-04  1.29e-01  3.53e-06  2.27e-02  4.27e-01  
  9  +5.0000e-01  +5.9533e-01  9.53e-02  2.85e-04  1.29e-01  3.49e-06  2.27e-02  2.00e-02  
 10  +5.0000e-01  +5.8443e-01  8.44e-02  2.52e-04  1.14e-01  3.62e-06  1.25e-02  5.90e-01  
 11  +4.9999e-01  +5.6755e-01  6.76e-02  1.95e-04  8.88e-02  9.64e-06  2.68e-03  8.27e-01  
 12  +4.9916e-01  +5.6110e-01  6.19e-02  1.34e-05  6.10e-03  5.01e-04  4.34e-05  9.86e-01  
 13  +4.9753e-01  +5.5413e-01  5.66e-02  4.66e-06  2.12e-03  1.20e-03  1.48e-05  6.89e-01  
 14  +4.9756e-01  +5.4978e-01  5.22e-02  3.91e-06  1.78e-03  8.83e-04  1.23e-05  3.91e-01  
 15  +4.9787e-01  +5.4635e-01  4.85e-02  3.43e-06  1.56e-03  4.79e-04  1.08e-05  4.92e-01  
 16  +4.9694e-01  +5.4120e-01  4.43e-02  2.64e-06  1.20e-03  4.03e-04  8.32e-06  3.87e-01  
 17  +4.9621e-01  +5.3780e-01  4.16e-02  2.33e-06  1.06e-03  3.62e-04  7.39e-06  1.71e-01  
 18  +4.9564e-01  +5.3373e-01  3.81e-02  2.11e-06  9.63e-04  1.80e-04  6.73e-06  4.20e-01  
 19  +4.9264e-01  +5.2141e-01  2.88e-02  1.36e-06  6.18e-04  1.12e-04  4.39e-06  4.82e-01  
 20  +4.9236e-01  +5.2010e-01  2.77e-02  1.29e-06  5.87e-04  9.23e-05  4.18e-06  1.67e-01  
 21  +4.9223e-01  +5.1933e-01  2.71e-02  1.25e-06  5.69e-04  6.54e-05  4.06e-06  2.49e-01  
 22  +4.8943e-01  +5.0857e-01  1.91e-02  8.15e-07  3.71e-04  3.85e-05  2.70e-06  4.16e-01  
 23  +4.8950e-01  +5.0878e-01  1.93e-02  8.14e-07  3.71e-04  3.63e-05  2.69e-06  7.12e-02  
 24  +4.8756e-01  +5.0143e-01  1.39e-02  5.52e-07  2.52e-04  1.94e-05  1.85e-06  4.69e-01  
 25  +4.8755e-01  +5.0140e-01  1.39e-02  5.51e-07  2.51e-04  1.86e-05  1.84e-06  3.69e-02  
 26  +4.8757e-01  +5.0145e-01  1.39e-02  5.51e-07  2.51e-04  1.84e-05  1.84e-06  1.62e-02  
 27  +4.8586e-01  +4.9500e-01  9.14e-03  3.39e-07  1.54e-04  3.01e-06  1.14e-06  8.34e-01  
 28  +4.8565e-01  +4.9439e-01  8.74e-03  3.29e-07  1.50e-04  2.52e-06  1.14e-06  8.57e-02  
 29  +4.8438e-01  +4.8970e-01  5.32e-03  1.97e-07  8.99e-05  1.27e-06  6.88e-07  5.01e-01  
 30  +4.8352e-01  +4.8653e-01  3.02e-03  1.09e-07  4.98e-05  2.38e-07  3.78e-07  8.63e-01  
 31  +4.8331e-01  +4.8588e-01  2.57e-03  9.18e-08  4.18e-05  1.86e-07  3.18e-07  2.46e-01  
 32  +4.8331e-01  +4.8587e-01  2.56e-03  9.18e-08  4.18e-05  1.85e-07  3.18e-07  4.81e-03  
 33  +4.8317e-01  +4.8541e-01  2.24e-03  8.09e-08  3.69e-05  1.09e-07  2.83e-07  4.37e-01  
 34  +4.8283e-01  +4.8421e-01  1.39e-03  4.97e-08  2.26e-05  2.50e-08  1.75e-07  9.20e-01  
 35  +4.8267e-01  +4.8371e-01  1.03e-03  3.65e-08  1.66e-05  1.79e-08  1.28e-07  4.09e-01  
 36  +4.8231e-01  +4.8247e-01  1.59e-04  5.62e-09  2.56e-06  2.09e-09  1.99e-08  9.90e-01  
 37  +4.8224e-01  +4.8224e-01  2.32e-06  8.19e-11  3.73e-08  3.00e-11  2.92e-10  9.86e-01  
 38  +4.8224e-01  +4.8224e-01  2.32e-08  8.19e-13  3.73e-10  3.00e-13  2.92e-12  9.90e-01  
 39  +4.8224e-01  +4.8224e-01  2.35e-10  8.32e-15  3.79e-12  5.22e-15  4.94e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 991.8669ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:20 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:20 PM: Optimal value: 4.822e-01
(CVXPY) Aug 30 12:11:20 PM: Compilation took 2.500e-01 seconds
(CVXPY) Aug 30 12:11:20 PM: Solver (including time spent in interface) took 1.024e+00 seconds
Iteration: 8, Objective: 0.4822
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:11:20 PM: Your problem has 25059 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:11:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:11:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:11:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:11:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:11:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:11:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:11:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:11:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:11:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:11:20 PM: Finished problem compilation (took 1.092e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25059
  constraints   = 50059
  nnz(P)        = 0
  nnz(A)        = 282220
  cones (total) = 1
    : Nonnegative = 1,  numel = 50059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1430e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8095e+02  6.80e+02  1.56e-01  6.97e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7216e+02  1.72e+02  1.40e-01  6.25e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0744e+01  1.02e+01  2.97e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1399e+00  6.40e-01  1.93e-03  8.74e-01  2.55e-05  1.81e-01  4.02e-01  
  6  +5.0000e-01  +6.8966e-01  1.90e-01  5.67e-04  2.58e-01  6.77e-06  6.19e-02  6.79e-01  
  7  +5.0000e-01  +6.1347e-01  1.13e-01  3.39e-04  1.54e-01  4.05e-06  3.39e-02  5.39e-01  
  8  +5.0000e-01  +5.9446e-01  9.45e-02  2.82e-04  1.28e-01  3.62e-06  2.27e-02  4.13e-01  
  9  +5.0000e-01  +5.9484e-01  9.48e-02  2.83e-04  1.29e-01  3.58e-06  2.27e-02  1.79e-02  
 10  +5.0000e-01  +5.8310e-01  8.31e-02  2.48e-04  1.13e-01  3.72e-06  1.17e-02  6.43e-01  
 11  +4.9999e-01  +5.6785e-01  6.79e-02  1.94e-04  8.84e-02  1.08e-05  2.39e-03  8.33e-01  
 12  +4.9951e-01  +5.5692e-01  5.74e-02  2.07e-05  9.43e-03  2.91e-04  6.82e-05  9.90e-01  
 13  +4.9820e-01  +5.5269e-01  5.45e-02  5.90e-06  2.69e-03  9.43e-04  1.88e-05  7.37e-01  
 14  +4.9819e-01  +5.4798e-01  4.98e-02  4.40e-06  2.01e-03  6.69e-04  1.39e-05  5.75e-01  
 15  +4.9837e-01  +5.4699e-01  4.86e-02  4.12e-06  1.88e-03  4.93e-04  1.30e-05  3.12e-01  
 16  +4.9788e-01  +5.4212e-01  4.42e-02  2.87e-06  1.31e-03  2.50e-04  9.00e-06  7.74e-01  
 17  +4.9766e-01  +5.4114e-01  4.35e-02  2.75e-06  1.25e-03  2.35e-04  8.63e-06  9.30e-02  
 18  +4.9626e-01  +5.3535e-01  3.91e-02  2.13e-06  9.70e-04  2.00e-04  6.73e-06  3.35e-01  
 19  +4.9440e-01  +5.2774e-01  3.33e-02  1.66e-06  7.58e-04  1.37e-04  5.32e-06  3.57e-01  
 20  +4.9249e-01  +5.1969e-01  2.72e-02  1.29e-06  5.86e-04  3.24e-05  4.17e-06  6.54e-01  
 21  +4.9228e-01  +5.1883e-01  2.66e-02  1.24e-06  5.63e-04  2.08e-05  4.02e-06  3.10e-01  
 22  +4.8926e-01  +5.0755e-01  1.83e-02  7.77e-07  3.54e-04  1.14e-05  2.58e-06  4.61e-01  
 23  +4.8932e-01  +5.0778e-01  1.85e-02  7.78e-07  3.54e-04  1.11e-05  2.57e-06  4.58e-02  
 24  +4.8831e-01  +5.0406e-01  1.58e-02  6.40e-07  2.92e-04  8.46e-06  2.13e-06  2.54e-01  
 25  +4.8820e-01  +5.0375e-01  1.56e-02  6.31e-07  2.87e-04  7.12e-06  2.11e-06  1.37e-01  
 26  +4.8560e-01  +4.9419e-01  8.59e-03  3.23e-07  1.47e-04  1.01e-06  1.10e-06  8.46e-01  
 27  +4.8418e-01  +4.8920e-01  5.02e-03  1.84e-07  8.38e-05  5.00e-07  6.35e-07  5.12e-01  
 28  +4.8367e-01  +4.8737e-01  3.70e-03  1.33e-07  6.08e-05  2.46e-07  4.63e-07  5.54e-01  
 29  +4.8348e-01  +4.8667e-01  3.20e-03  1.14e-07  5.20e-05  1.42e-07  3.96e-07  5.07e-01  
 30  +4.8338e-01  +4.8634e-01  2.96e-03  1.05e-07  4.80e-05  1.23e-07  3.66e-07  1.65e-01  
 31  +4.8332e-01  +4.8613e-01  2.81e-03  1.00e-07  4.56e-05  1.03e-07  3.48e-07  2.14e-01  
 32  +4.8285e-01  +4.8450e-01  1.65e-03  5.91e-08  2.69e-05  2.10e-08  2.08e-07  9.90e-01  
 33  +4.8238e-01  +4.8287e-01  4.98e-04  1.78e-08  8.10e-06  6.41e-09  6.32e-08  7.37e-01  
 34  +4.8220e-01  +4.8229e-01  8.99e-05  3.19e-09  1.45e-06  1.10e-09  1.13e-08  9.87e-01  
 35  +4.8216e-01  +4.8216e-01  1.64e-06  5.80e-11  2.64e-08  2.01e-11  2.07e-10  9.83e-01  
 36  +4.8216e-01  +4.8216e-01  1.64e-08  5.80e-13  2.64e-10  2.01e-13  2.07e-12  9.90e-01  
 37  +4.8216e-01  +4.8216e-01  1.65e-10  5.90e-15  2.66e-12  2.74e-15  2.78e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 810.0905ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:11:21 PM: Problem status: optimal
(CVXPY) Aug 30 12:11:21 PM: Optimal value: 4.822e-01
(CVXPY) Aug 30 12:11:21 PM: Compilation took 1.092e-01 seconds
(CVXPY) Aug 30 12:11:21 PM: Solver (including time spent in interface) took 8.438e-01 seconds
FULL MODEL:
  Accruacy: 0.51356
  Our objective: 0.027120000000000033

IF 
    (x0 = 0 AND x1 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.02464000000000001)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0024800000000000343)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.02464000000000001
    Its accruacy: 0.51232
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.02464000000000001
  Highest accruacy: 0.51232
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

