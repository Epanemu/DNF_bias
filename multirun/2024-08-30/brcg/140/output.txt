Command:
python test_script.py -s smallest_subclass -d 4 -n 1000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.092
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.14400000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:26 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:26 PM: Finished problem compilation (took 3.526e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +5.0068e+02  5.00e+02  9.51e-01  2.65e+01  1.00e+00  1.00e+00   ------   
  1  +6.0779e-01  +9.7273e+01  9.67e+01  3.26e-01  1.46e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.4954e-01  +1.5221e+01  1.47e+01  1.23e-01  6.69e+00  8.33e-03  2.23e-01  7.38e-01  
  3  +5.0347e-01  +2.1228e+00  1.62e+00  3.34e-02  1.73e+00  9.67e-06  2.12e-01  2.55e-01  
  4  +5.0034e-01  +6.6319e-01  1.63e-01  3.48e-03  1.87e-01  3.01e-06  4.85e-02  8.58e-01  
  5  +4.9945e-01  +7.1576e-01  2.16e-01  2.89e-03  1.57e-01  1.41e-05  1.14e-02  8.51e-01  
  6  +4.9039e-01  +6.4748e-01  1.57e-01  3.75e-04  2.06e-02  8.00e-05  1.20e-03  8.96e-01  
  7  +4.7285e-01  +5.2393e-01  5.11e-02  1.30e-04  7.08e-03  3.68e-06  5.03e-04  8.82e-01  
  8  +4.6250e-01  +4.7942e-01  1.69e-02  3.69e-05  2.01e-03  1.72e-06  1.55e-04  7.26e-01  
  9  +4.5778e-01  +4.5981e-01  2.03e-03  4.22e-06  2.30e-04  8.25e-07  1.85e-05  9.90e-01  
 10  +4.5711e-01  +4.5713e-01  2.25e-05  4.67e-08  2.55e-06  9.12e-09  2.07e-07  9.90e-01  
 11  +4.5710e-01  +4.5710e-01  2.25e-07  4.67e-10  2.55e-08  9.12e-11  2.07e-09  9.90e-01  
 12  +4.5710e-01  +4.5710e-01  2.25e-09  4.67e-12  2.55e-10  9.12e-13  2.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5357ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:26 PM: Optimal value: 4.571e-01
(CVXPY) Aug 30 12:04:26 PM: Compilation took 3.526e-03 seconds
(CVXPY) Aug 30 12:04:26 PM: Solver (including time spent in interface) took 5.150e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4571
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:26 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:26 PM: Finished problem compilation (took 3.606e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4629
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0131e+02  5.01e+02  9.52e-01  2.87e+01  1.00e+00  1.02e+00   ------   
  1  +6.0566e-01  +9.8151e+01  9.75e+01  3.33e-01  1.58e+01  4.07e-03  4.87e-01  6.62e-01  
  2  +5.4759e-01  +1.4873e+01  1.43e+01  1.23e-01  7.03e+00  8.85e-03  2.24e-01  7.59e-01  
  3  +5.0277e-01  +2.0046e+00  1.50e+00  3.15e-02  1.74e+00  9.97e-06  2.09e-01  3.32e-01  
  4  +5.0070e-01  +9.0846e-01  4.08e-01  8.77e-03  5.00e-01  3.87e-06  8.65e-02  6.18e-01  
  5  +4.9963e-01  +7.9147e-01  2.92e-01  5.23e-03  3.01e-01  8.91e-06  2.39e-02  8.63e-01  
  6  +4.9172e-01  +7.2025e-01  2.29e-01  1.01e-03  5.92e-02  4.24e-05  3.22e-03  8.81e-01  
  7  +4.8843e-01  +6.9133e-01  2.03e-01  7.38e-04  4.33e-02  4.56e-05  2.36e-03  4.05e-01  
  8  +4.8341e-01  +6.4770e-01  1.64e-01  4.91e-04  2.88e-02  4.37e-05  1.57e-03  4.11e-01  
  9  +4.7885e-01  +5.9449e-01  1.16e-01  3.11e-04  1.82e-02  4.17e-05  9.62e-04  8.34e-01  
 10  +4.7663e-01  +5.8445e-01  1.08e-01  2.38e-04  1.40e-02  4.63e-05  7.31e-04  4.07e-01  
 11  +4.7033e-01  +5.4825e-01  7.79e-02  1.90e-04  1.11e-02  3.10e-05  6.10e-04  7.70e-01  
 12  +4.5701e-01  +4.9347e-01  3.65e-02  6.60e-05  3.86e-03  1.87e-05  2.17e-04  6.61e-01  
 13  +4.5383e-01  +4.8067e-01  2.68e-02  4.79e-05  2.80e-03  1.44e-05  1.60e-04  4.31e-01  
 14  +4.5272e-01  +4.7562e-01  2.29e-02  4.02e-05  2.35e-03  1.34e-05  1.36e-04  4.01e-01  
 15  +4.4912e-01  +4.6162e-01  1.25e-02  2.13e-05  1.24e-03  8.27e-06  7.31e-05  8.33e-01  
 16  +4.4590e-01  +4.5003e-01  4.13e-03  7.02e-06  4.10e-04  2.95e-06  2.47e-05  9.90e-01  
 17  +4.4419e-01  +4.4439e-01  2.02e-04  3.42e-07  1.99e-05  1.38e-07  1.22e-06  9.60e-01  
 18  +4.4410e-01  +4.4410e-01  2.05e-06  3.47e-09  2.02e-07  1.40e-09  1.24e-08  9.90e-01  
 19  +4.4410e-01  +4.4410e-01  2.05e-08  3.47e-11  2.02e-09  1.40e-11  1.24e-10  9.90e-01  
 20  +4.4410e-01  +4.4410e-01  2.05e-10  3.47e-13  2.02e-11  1.40e-13  1.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.7779ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:26 PM: Optimal value: 4.441e-01
(CVXPY) Aug 30 12:04:26 PM: Compilation took 3.606e-03 seconds
(CVXPY) Aug 30 12:04:26 PM: Solver (including time spent in interface) took 5.446e-03 seconds
Iteration: 2, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:26 PM: Your problem has 522 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:26 PM: Finished problem compilation (took 3.776e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 522
  constraints   = 1022
  nnz(P)        = 0
  nnz(A)        = 4820
  cones (total) = 1
    : Nonnegative = 1,  numel = 1022

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0102e+02  5.01e+02  9.53e-01  2.88e+01  1.00e+00  1.03e+00   ------   
  1  +6.0586e-01  +9.8240e+01  9.76e+01  3.36e-01  1.59e+01  4.06e-03  4.94e-01  6.61e-01  
  2  +5.4762e-01  +1.4911e+01  1.44e+01  1.24e-01  7.04e+00  8.99e-03  2.28e-01  7.60e-01  
  3  +5.0258e-01  +1.9558e+00  1.45e+00  3.08e-02  1.70e+00  9.82e-06  2.11e-01  3.51e-01  
  4  +5.0066e-01  +9.0590e-01  4.05e-01  8.78e-03  4.99e-01  3.76e-06  8.65e-02  6.18e-01  
  5  +4.9936e-01  +8.0513e-01  3.06e-01  5.07e-03  2.92e-01  1.01e-05  2.17e-02  8.77e-01  
  6  +4.9063e-01  +7.3339e-01  2.43e-01  9.94e-04  5.83e-02  4.64e-05  3.12e-03  8.64e-01  
  7  +4.8964e-01  +7.2393e-01  2.34e-01  8.61e-04  5.05e-02  5.40e-05  2.66e-03  3.40e-01  
  8  +4.8500e-01  +6.9276e-01  2.08e-01  6.48e-04  3.80e-02  5.46e-05  2.01e-03  2.83e-01  
  9  +4.7615e-01  +6.1481e-01  1.39e-01  3.89e-04  2.28e-02  5.01e-05  1.23e-03  9.90e-01  
 10  +4.6864e-01  +5.8265e-01  1.14e-01  2.92e-04  1.71e-02  4.27e-05  9.57e-04  5.81e-01  
 11  +4.5060e-01  +4.9622e-01  4.56e-02  9.88e-05  5.75e-03  1.72e-05  3.42e-04  6.85e-01  
 12  +4.4493e-01  +4.7414e-01  2.92e-02  5.79e-05  3.36e-03  1.31e-05  2.06e-04  5.84e-01  
 13  +4.4294e-01  +4.6680e-01  2.39e-02  4.53e-05  2.63e-03  1.12e-05  1.63e-04  2.77e-01  
 14  +4.3866e-01  +4.5000e-01  1.13e-02  2.09e-05  1.21e-03  6.92e-06  7.72e-05  9.90e-01  
 15  +4.3724e-01  +4.4490e-01  7.66e-03  1.42e-05  8.22e-04  4.61e-06  5.30e-05  5.00e-01  
 16  +4.3461e-01  +4.3565e-01  1.04e-03  1.89e-06  1.10e-04  5.98e-07  7.26e-06  8.80e-01  
 17  +4.3420e-01  +4.3422e-01  1.11e-05  2.02e-08  1.17e-06  6.31e-09  7.79e-08  9.90e-01  
 18  +4.3420e-01  +4.3420e-01  1.11e-07  2.02e-10  1.17e-08  6.31e-11  7.79e-10  9.90e-01  
 19  +4.3420e-01  +4.3420e-01  1.11e-09  2.02e-12  1.17e-10  6.32e-13  7.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2325ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:26 PM: Optimal value: 4.342e-01
(CVXPY) Aug 30 12:04:26 PM: Compilation took 3.776e-03 seconds
(CVXPY) Aug 30 12:04:26 PM: Solver (including time spent in interface) took 4.294e-03 seconds
Iteration: 3, Objective: 0.4342
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:04:26 PM: Your problem has 526 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 30 12:04:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:04:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:04:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:04:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:04:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:04:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:04:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:04:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:04:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:04:26 PM: Finished problem compilation (took 3.046e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 526
  constraints   = 1026
  nnz(P)        = 0
  nnz(A)        = 5019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1026

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0094e+02  5.00e+02  9.53e-01  2.90e+01  1.00e+00  1.02e+00   ------   
  1  +6.0314e-01  +9.8913e+01  9.83e+01  3.42e-01  1.61e+01  4.03e-03  5.00e-01  6.56e-01  
  2  +5.4677e-01  +1.4799e+01  1.43e+01  1.24e-01  7.05e+00  9.38e-03  2.27e-01  7.74e-01  
  3  +5.0302e-01  +2.0942e+00  1.59e+00  3.36e-02  1.86e+00  1.13e-05  2.10e-01  3.43e-01  
  4  +5.0070e-01  +9.2136e-01  4.21e-01  9.12e-03  5.22e-01  4.52e-06  8.51e-02  6.29e-01  
  5  +4.9828e-01  +1.0529e+00  5.55e-01  6.03e-03  3.51e-01  2.42e-05  2.09e-02  9.09e-01  
  6  +4.8939e-01  +8.6105e-01  3.72e-01  1.45e-03  8.56e-02  5.88e-05  4.66e-03  8.37e-01  
  7  +4.8595e-01  +7.7801e-01  2.92e-01  1.07e-03  6.29e-02  6.00e-05  3.48e-03  5.27e-01  
  8  +4.8517e-01  +7.6943e-01  2.84e-01  9.82e-04  5.78e-02  6.35e-05  3.18e-03  1.74e-01  
  9  +4.8499e-01  +7.5577e-01  2.71e-01  9.68e-04  5.70e-02  6.11e-05  3.14e-03  1.29e-01  
 10  +4.8027e-01  +7.2050e-01  2.40e-01  7.63e-04  4.49e-02  5.88e-05  2.50e-03  2.47e-01  
 11  +4.7066e-01  +6.4161e-01  1.71e-01  4.64e-04  2.73e-02  5.24e-05  1.55e-03  6.81e-01  
 12  +4.6017e-01  +5.8247e-01  1.22e-01  3.03e-04  1.77e-02  4.11e-05  1.05e-03  6.07e-01  
 13  +4.4565e-01  +5.0578e-01  6.01e-02  1.37e-04  8.01e-03  1.93e-05  5.07e-04  5.64e-01  
 14  +4.4497e-01  +5.0126e-01  5.63e-02  1.23e-04  7.20e-03  2.16e-05  4.52e-04  3.97e-01  
 15  +4.3392e-01  +4.4851e-01  1.46e-02  3.00e-05  1.75e-03  6.37e-06  1.15e-04  8.16e-01  
 16  +4.3305e-01  +4.4474e-01  1.17e-02  2.51e-05  1.46e-03  4.25e-06  1.04e-04  2.24e-01  
 17  +4.3288e-01  +4.4511e-01  1.22e-02  2.56e-05  1.49e-03  4.98e-06  1.00e-04  2.35e-01  
 18  +4.3051e-01  +4.3695e-01  6.44e-03  1.24e-05  7.25e-04  2.87e-06  4.89e-05  5.85e-01  
 19  +4.2836e-01  +4.2854e-01  1.76e-04  3.35e-07  1.96e-05  6.68e-08  1.35e-06  9.75e-01  
 20  +4.2830e-01  +4.2830e-01  1.76e-06  3.36e-09  1.96e-07  6.69e-10  1.36e-08  9.90e-01  
 21  +4.2830e-01  +4.2830e-01  1.76e-08  3.36e-11  1.96e-09  6.69e-12  1.36e-10  9.90e-01  
 22  +4.2830e-01  +4.2830e-01  1.76e-10  3.36e-13  1.96e-11  6.69e-14  1.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6544ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:04:26 PM: Problem status: optimal
(CVXPY) Aug 30 12:04:26 PM: Optimal value: 4.283e-01
(CVXPY) Aug 30 12:04:26 PM: Compilation took 3.046e-03 seconds
(CVXPY) Aug 30 12:04:26 PM: Solver (including time spent in interface) took 7.186e-03 seconds
FULL MODEL:
  Accruacy: 0.57
  Our objective: 0.14

IF 
    (x1 = 1 AND x0 = 0 AND x3 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.09199999999999998)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.019999999999999962)
 OR (x0 = 1 AND x3 = 1 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.012000000000000052)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.09199999999999998
    Its accruacy: 0.546
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.09199999999999998
  Highest accruacy: 0.546
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

