Command:
python test_script.py -s smallest_subclass -d 2 -n 50000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30504
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 2.

Computed total variation: 0.30504
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:18 PM: Your problem has 25005 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:18 PM: Finished problem compilation (took 4.814e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25005
  constraints   = 50005
  nnz(P)        = 0
  nnz(A)        = 125005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5003e+04  2.50e+04  9.92e-01  1.59e+02  1.00e+00  1.00e+00   ------   
  1  +6.3758e-01  +4.3682e+03  4.37e+03  2.69e-01  7.51e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5927e-01  +8.1610e+02  8.16e+02  1.36e-01  4.39e+01  5.28e-03  2.16e-01  5.86e-01  
  3  +5.0726e-01  +1.0074e+02  1.00e+02  1.15e-01  3.67e+01  6.52e-06  2.15e-01  4.38e-02  
  4  +5.0016e-01  +3.5402e+00  3.04e+00  9.03e-03  2.83e+00  9.72e-07  2.02e-01  2.52e-01  
  5  +5.0000e-01  +9.0029e-01  4.00e-01  1.19e-03  3.80e-01  3.88e-07  6.75e-02  9.38e-01  
  6  +4.9762e-01  +2.8736e+00  2.38e+00  1.50e-03  4.85e-01  3.04e-05  4.32e-03  9.78e-01  
  7  +4.6740e-01  +1.5551e+00  1.09e+00  5.75e-05  1.87e-02  3.40e-04  1.56e-04  9.64e-01  
  8  +4.3991e-01  +7.0726e-01  2.67e-01  1.39e-05  4.47e-03  3.08e-06  4.22e-05  8.13e-01  
  9  +4.0631e-01  +4.3425e-01  2.79e-02  1.44e-06  4.61e-04  2.55e-08  5.33e-06  9.36e-01  
 10  +3.9854e-01  +4.0046e-01  1.92e-03  9.84e-08  3.14e-05  2.01e-09  3.84e-07  9.30e-01  
 11  +3.9794e-01  +3.9816e-01  2.13e-04  9.54e-09  3.04e-06  9.63e-10  4.29e-08  9.44e-01  
 12  +3.9788e-01  +3.9788e-01  2.18e-06  9.72e-11  3.10e-08  9.85e-12  4.38e-10  9.90e-01  
 13  +3.9788e-01  +3.9788e-01  2.18e-08  9.72e-13  3.10e-10  9.85e-14  4.38e-12  9.90e-01  
 14  +3.9788e-01  +3.9788e-01  2.19e-10  9.84e-15  3.12e-12  1.32e-15  5.79e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.1504ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:19 PM: Optimal value: 3.979e-01
(CVXPY) Aug 30 12:02:19 PM: Compilation took 4.814e-02 seconds
(CVXPY) Aug 30 12:02:19 PM: Solver (including time spent in interface) took 1.833e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.3979
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:19 PM: Your problem has 25006 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:19 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:19 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:19 PM: Finished problem compilation (took 4.517e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25006
  constraints   = 50006
  nnz(P)        = 0
  nnz(A)        = 135097
  cones (total) = 1
    : Nonnegative = 1,  numel = 50006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5002e+04  2.50e+04  9.92e-01  1.65e+02  1.00e+00  1.00e+00   ------   
  1  +6.3755e-01  +4.3684e+03  4.37e+03  2.69e-01  7.81e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5924e-01  +8.1579e+02  8.15e+02  1.36e-01  4.56e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0721e-01  +1.0006e+02  9.96e+01  1.15e-01  3.80e+01  6.48e-06  2.15e-01  4.44e-02  
  4  +5.0033e-01  +5.9196e+00  5.42e+00  1.60e-02  5.16e+00  1.18e-06  2.07e-01  1.48e-01  
  5  +5.0006e-01  +1.9157e+00  1.42e+00  4.22e-03  1.39e+00  6.23e-07  1.49e-01  4.06e-01  
  6  +5.0001e-01  +1.1360e+00  6.36e-01  1.89e-03  6.25e-01  4.53e-07  5.99e-02  6.24e-01  
  7  +4.9921e-01  +1.0041e+00  5.05e-01  5.86e-04  1.98e-01  9.26e-06  1.73e-03  9.90e-01  
  8  +4.9673e-01  +9.9178e-01  4.95e-01  1.68e-04  5.72e-02  3.56e-05  4.33e-04  7.49e-01  
  9  +4.7996e-01  +9.0821e-01  4.28e-01  2.47e-05  8.41e-03  1.81e-04  6.17e-05  9.75e-01  
 10  +4.3306e-01  +6.8041e-01  2.47e-01  7.97e-06  2.69e-03  1.69e-04  2.10e-05  7.24e-01  
 11  +3.6581e-01  +4.1969e-01  5.39e-02  2.01e-06  6.67e-04  1.14e-06  6.80e-06  9.30e-01  
 12  +3.4830e-01  +3.4999e-01  1.69e-03  6.17e-08  2.04e-05  1.07e-08  2.25e-07  9.70e-01  
 13  +3.4759e-01  +3.4760e-01  1.69e-05  6.16e-10  2.04e-07  1.07e-10  2.27e-09  9.90e-01  
 14  +3.4758e-01  +3.4758e-01  1.69e-07  6.16e-12  2.04e-09  1.07e-12  2.27e-11  9.90e-01  
 15  +3.4758e-01  +3.4758e-01  1.69e-09  6.17e-14  2.04e-11  1.08e-14  2.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 202.7217ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:19 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:19 PM: Optimal value: 3.476e-01
(CVXPY) Aug 30 12:02:19 PM: Compilation took 4.517e-02 seconds
(CVXPY) Aug 30 12:02:19 PM: Solver (including time spent in interface) took 2.206e-01 seconds
FULL MODEL:
  Accruacy: 0.65252
  Our objective: 0.30504

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.30504)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.30504
    Its accruacy: 0.65252
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30504
  Highest accruacy: 0.65252
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

