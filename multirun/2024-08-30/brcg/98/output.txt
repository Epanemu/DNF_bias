Command:
python test_script.py -s smallest_subclass -d 3 -n 500 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.184
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 3.

Computed total variation: 0.22799999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:59 PM: Your problem has 257 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:59 PM: Finished problem compilation (took 3.875e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 257
  constraints   = 507
  nnz(P)        = 0
  nnz(A)        = 1507
  cones (total) = 1
    : Nonnegative = 1,  numel = 507

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9924e-01  +2.5071e+02  2.50e+02  9.30e-01  1.69e+01  1.00e+00  1.01e+00   ------   
  1  +6.1906e-01  +4.6783e+01  4.62e+01  2.90e-01  8.66e+00  4.25e-03  4.39e-01  6.94e-01  
  2  +5.5230e-01  +8.0374e+00  7.49e+00  1.10e-01  3.85e+00  6.90e-03  2.10e-01  6.95e-01  
  3  +5.0072e-01  +1.2672e+00  7.67e-01  2.28e-02  7.68e-01  2.13e-03  1.91e-01  4.04e-01  
  4  +4.9957e-01  +7.1228e-01  2.13e-01  6.26e-03  2.16e-01  8.32e-04  4.89e-02  7.84e-01  
  5  +4.7504e-01  +9.5699e-01  4.82e-01  2.34e-03  8.27e-02  1.05e-02  7.68e-03  9.32e-01  
  6  +4.5844e-01  +6.1210e-01  1.54e-01  7.09e-04  2.50e-02  1.02e-04  2.56e-03  8.03e-01  
  7  +4.3748e-01  +4.8935e-01  5.19e-02  2.23e-04  7.84e-03  2.88e-05  9.18e-04  7.23e-01  
  8  +4.2731e-01  +4.3759e-01  1.03e-02  4.32e-05  1.51e-03  9.18e-06  1.92e-04  9.90e-01  
  9  +4.2414e-01  +4.2425e-01  1.17e-04  4.90e-07  1.72e-05  9.76e-08  2.24e-06  9.89e-01  
 10  +4.2410e-01  +4.2410e-01  1.17e-06  4.90e-09  1.72e-07  9.76e-10  2.24e-08  9.90e-01  
 11  +4.2410e-01  +4.2410e-01  1.17e-08  4.90e-11  1.72e-09  9.76e-12  2.24e-10  9.90e-01  
 12  +4.2410e-01  +4.2410e-01  1.17e-10  4.90e-13  1.72e-11  9.76e-14  2.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1269ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:59 PM: Optimal value: 4.241e-01
(CVXPY) Aug 30 12:02:59 PM: Compilation took 3.875e-03 seconds
(CVXPY) Aug 30 12:02:59 PM: Solver (including time spent in interface) took 2.099e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:59 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:59 PM: Finished problem compilation (took 3.105e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 1827
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9821e-01  +2.5153e+02  2.51e+02  9.31e-01  1.82e+01  1.00e+00  1.03e+00   ------   
  1  +6.1482e-01  +4.7392e+01  4.68e+01  2.98e-01  9.35e+00  4.20e-03  4.59e-01  6.87e-01  
  2  +5.4888e-01  +7.7001e+00  7.15e+00  1.06e-01  3.95e+00  7.52e-03  2.08e-01  7.32e-01  
  3  +5.0226e-01  +1.6644e+00  1.16e+00  3.49e-02  1.23e+00  3.22e-03  1.86e-01  3.91e-01  
  4  +4.9787e-01  +9.9614e-01  4.98e-01  1.30e-02  4.76e-01  2.67e-03  5.34e-02  7.90e-01  
  5  +4.7665e-01  +9.4887e-01  4.72e-01  3.69e-03  1.38e-01  9.20e-03  1.18e-02  8.21e-01  
  6  +4.7272e-01  +8.6979e-01  3.97e-01  3.00e-03  1.12e-01  5.64e-03  1.00e-02  3.63e-01  
  7  +4.6982e-01  +8.2283e-01  3.53e-01  2.73e-03  1.02e-01  3.89e-03  9.17e-03  2.19e-01  
  8  +4.7402e-01  +8.7667e-01  4.03e-01  2.78e-03  1.04e-01  3.79e-03  8.81e-03  3.22e-01  
  9  +4.4616e-01  +5.4403e-01  9.79e-02  5.85e-04  2.17e-02  2.71e-04  2.04e-03  8.51e-01  
 10  +4.4414e-01  +5.5301e-01  1.09e-01  4.27e-04  1.59e-02  4.24e-04  1.37e-03  3.98e-01  
 11  +4.4071e-01  +5.4144e-01  1.01e-01  4.16e-04  1.55e-02  3.49e-04  1.36e-03  4.12e-02  
 12  +4.2244e-01  +4.8639e-01  6.40e-02  2.30e-04  8.52e-03  5.08e-05  7.88e-04  9.71e-01  
 13  +4.0482e-01  +4.1196e-01  7.14e-03  2.53e-05  9.36e-04  5.25e-06  9.43e-05  9.38e-01  
 14  +4.0214e-01  +4.0224e-01  9.67e-05  3.40e-07  1.26e-05  6.18e-08  1.29e-06  9.87e-01  
 15  +4.0210e-01  +4.0210e-01  9.67e-07  3.40e-09  1.26e-07  6.18e-10  1.29e-08  9.90e-01  
 16  +4.0210e-01  +4.0210e-01  9.67e-09  3.40e-11  1.26e-09  6.18e-12  1.29e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.456ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:59 PM: Optimal value: 4.021e-01
(CVXPY) Aug 30 12:02:59 PM: Compilation took 3.105e-03 seconds
(CVXPY) Aug 30 12:02:59 PM: Solver (including time spent in interface) took 1.970e-03 seconds
Iteration: 2, Objective: 0.4021
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:59 PM: Your problem has 264 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:59 PM: Finished problem compilation (took 2.872e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 264
  constraints   = 514
  nnz(P)        = 0
  nnz(A)        = 2007
  cones (total) = 1
    : Nonnegative = 1,  numel = 514

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9823e-01  +2.5130e+02  2.51e+02  9.31e-01  1.87e+01  1.00e+00  1.02e+00   ------   
  1  +6.0800e-01  +4.8279e+01  4.77e+01  3.13e-01  9.92e+00  4.12e-03  4.74e-01  6.75e-01  
  2  +5.4606e-01  +7.4419e+00  6.90e+00  1.06e-01  4.03e+00  8.28e-03  2.07e-01  7.67e-01  
  3  +5.0130e-01  +1.5666e+00  1.07e+00  3.20e-02  1.17e+00  2.91e-03  1.78e-01  4.83e-01  
  4  +4.9705e-01  +1.2701e+00  7.73e-01  1.92e-02  7.20e-01  3.51e-03  7.55e-02  6.42e-01  
  5  +4.7413e-01  +1.0980e+00  6.24e-01  4.97e-03  1.92e-01  8.87e-03  1.62e-02  8.57e-01  
  6  +4.6345e-01  +9.9886e-01  5.35e-01  3.20e-03  1.24e-01  8.59e-03  9.92e-03  4.80e-01  
  7  +4.6193e-01  +9.9197e-01  5.30e-01  2.69e-03  1.05e-01  7.28e-03  8.22e-03  3.77e-01  
  8  +4.3806e-01  +6.9601e-01  2.58e-01  1.33e-03  5.10e-02  6.53e-05  4.52e-03  7.29e-01  
  9  +4.0014e-01  +4.6065e-01  6.05e-02  2.80e-04  1.07e-02  1.47e-05  1.15e-03  7.85e-01  
 10  +3.8787e-01  +3.9447e-01  6.59e-03  3.10e-05  1.18e-03  1.90e-06  1.49e-04  8.86e-01  
 11  +3.8631e-01  +3.8671e-01  3.99e-04  1.87e-06  7.11e-05  2.61e-07  9.62e-06  9.90e-01  
 12  +3.8620e-01  +3.8621e-01  4.02e-06  1.89e-08  7.16e-07  2.61e-09  9.74e-08  9.90e-01  
 13  +3.8620e-01  +3.8620e-01  4.02e-08  1.89e-10  7.16e-09  2.61e-11  9.74e-10  9.90e-01  
 14  +3.8620e-01  +3.8620e-01  4.02e-10  1.89e-12  7.16e-11  2.61e-13  9.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.38ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:59 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:59 PM: Optimal value: 3.862e-01
(CVXPY) Aug 30 12:02:59 PM: Compilation took 2.872e-03 seconds
(CVXPY) Aug 30 12:02:59 PM: Solver (including time spent in interface) took 1.027e-03 seconds
FULL MODEL:
  Accruacy: 0.614
  Our objective: 0.22799999999999992

IF 
    (x1 = 0 AND x2 = 0) <-- (term's our objective: 0.19599999999999998)
 OR (x0 = 1 AND x1 = 1) <-- (term's our objective: 0.03200000000000003)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.19599999999999998
    Its accruacy: 0.598
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.19599999999999998
  Highest accruacy: 0.598
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

