Command:
python test_script.py -s smallest_subclass -d 2 -n 500 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.28400000000000003
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 2.

Computed total variation: 0.284
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:01:46 PM: Your problem has 255 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:01:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:01:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:01:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:01:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:01:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:01:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:01:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:01:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:01:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:01:46 PM: Finished problem compilation (took 5.106e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 255
  constraints   = 505
  nnz(P)        = 0
  nnz(A)        = 1255
  cones (total) = 1
    : Nonnegative = 1,  numel = 505

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9890e-01  +2.5087e+02  2.50e+02  9.27e-01  1.52e+01  1.00e+00  1.01e+00   ------   
  1  +6.3598e-01  +4.4147e+01  4.35e+01  2.53e-01  7.07e+00  4.49e-03  3.92e-01  7.25e-01  
  2  +5.5462e-01  +8.1413e+00  7.59e+00  1.06e-01  3.35e+00  5.53e-03  2.02e-01  6.32e-01  
  3  +4.9882e-01  +1.2020e+00  7.03e-01  2.08e-02  6.31e-01  4.07e-03  1.73e-01  5.31e-01  
  4  +4.9392e-01  +8.2158e-01  3.28e-01  7.83e-03  2.44e-01  5.09e-03  3.55e-02  8.33e-01  
  5  +4.4095e-01  +7.4858e-01  3.08e-01  1.32e-03  4.20e-02  3.22e-02  4.26e-03  8.96e-01  
  6  +4.2693e-01  +5.4578e-01  1.19e-01  6.01e-04  1.89e-02  2.51e-04  2.36e-03  6.70e-01  
  7  +3.9680e-01  +4.1111e-01  1.43e-02  6.16e-05  1.93e-03  1.24e-05  2.78e-04  8.92e-01  
  8  +3.9244e-01  +3.9351e-01  1.07e-03  4.56e-06  1.43e-04  9.12e-07  2.13e-05  9.90e-01  
  9  +3.9210e-01  +3.9211e-01  1.07e-05  4.56e-08  1.43e-06  9.12e-09  2.13e-07  9.90e-01  
 10  +3.9210e-01  +3.9210e-01  1.07e-07  4.56e-10  1.43e-08  9.12e-11  2.13e-09  9.90e-01  
 11  +3.9210e-01  +3.9210e-01  1.07e-09  4.56e-12  1.43e-10  9.12e-13  2.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1046ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:01:46 PM: Optimal value: 3.921e-01
(CVXPY) Aug 30 12:01:46 PM: Compilation took 5.106e-03 seconds
(CVXPY) Aug 30 12:01:46 PM: Solver (including time spent in interface) took 9.251e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3921
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:01:46 PM: Your problem has 256 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 30 12:01:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:01:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:01:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:01:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:01:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:01:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:01:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:01:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:01:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:01:46 PM: Finished problem compilation (took 3.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 256
  constraints   = 506
  nnz(P)        = 0
  nnz(A)        = 1351
  cones (total) = 1
    : Nonnegative = 1,  numel = 506

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9819e-01  +2.5168e+02  2.51e+02  9.27e-01  1.57e+01  1.00e+00  1.01e+00   ------   
  1  +6.3309e-01  +4.4434e+01  4.38e+01  2.55e-01  7.35e+00  4.48e-03  3.97e-01  7.23e-01  
  2  +5.5392e-01  +8.0915e+00  7.54e+00  1.04e-01  3.40e+00  5.70e-03  1.99e-01  6.47e-01  
  3  +5.0041e-01  +1.5005e+00  1.00e+00  2.93e-02  9.14e-01  4.59e-03  1.73e-01  4.49e-01  
  4  +4.9621e-01  +8.4914e-01  3.53e-01  8.63e-03  2.80e-01  3.91e-03  3.56e-02  8.20e-01  
  5  +4.6518e-01  +7.9454e-01  3.29e-01  1.90e-03  6.31e-02  1.97e-02  5.58e-03  8.79e-01  
  6  +4.5303e-01  +7.5634e-01  3.03e-01  1.31e-03  4.35e-02  2.20e-02  3.73e-03  3.62e-01  
  7  +4.4354e-01  +7.0573e-01  2.62e-01  1.06e-03  3.50e-02  1.40e-02  3.06e-03  3.84e-01  
  8  +4.0059e-01  +5.1203e-01  1.11e-01  4.08e-04  1.34e-02  1.47e-04  1.31e-03  8.40e-01  
  9  +3.6231e-01  +3.7223e-01  9.92e-03  3.45e-05  1.12e-03  1.36e-06  1.27e-04  9.31e-01  
 10  +3.5815e-01  +3.5825e-01  1.08e-04  3.77e-07  1.23e-05  1.57e-08  1.42e-06  9.89e-01  
 11  +3.5810e-01  +3.5810e-01  1.08e-06  3.77e-09  1.23e-07  1.57e-10  1.42e-08  9.90e-01  
 12  +3.5810e-01  +3.5810e-01  1.08e-08  3.77e-11  1.23e-09  1.57e-12  1.42e-10  9.90e-01  
 13  +3.5810e-01  +3.5810e-01  1.08e-10  3.77e-13  1.23e-11  1.57e-14  1.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0877ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:01:46 PM: Problem status: optimal
(CVXPY) Aug 30 12:01:46 PM: Optimal value: 3.581e-01
(CVXPY) Aug 30 12:01:46 PM: Compilation took 3.009e-03 seconds
(CVXPY) Aug 30 12:01:46 PM: Solver (including time spent in interface) took 9.902e-04 seconds
FULL MODEL:
  Accruacy: 0.642
  Our objective: 0.28400000000000003

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.28400000000000003)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.28400000000000003
    Its accruacy: 0.642
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.28400000000000003
  Highest accruacy: 0.642
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

