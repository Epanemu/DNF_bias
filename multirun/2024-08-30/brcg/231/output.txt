Command:
python test_script.py -s smallest_subclass -d 6 -n 10000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.018799999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 6.

Computed total variation: 0.07819999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:57 PM: Your problem has 5013 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Finished problem compilation (took 8.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5013
  constraints   = 10013
  nnz(P)        = 0
  nnz(A)        = 45013
  cones (total) = 1
    : Nonnegative = 1,  numel = 10013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  9.90e+01  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +1.0289e+03  1.03e+03  3.86e-01  6.01e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4198e-01  +1.3641e+02  1.36e+02  1.50e-01  2.96e+01  1.15e-02  2.45e-01  8.24e-01  
  3  +5.1051e-01  +3.4147e+01  3.36e+01  1.19e-01  2.30e+01  2.91e-05  2.39e-01  1.19e-01  
  4  +5.0032e-01  +1.3408e+00  8.40e-01  5.69e-03  1.12e+00  4.34e-06  1.30e-01  9.90e-01  
  5  +5.0003e-01  +6.2554e-01  1.26e-01  8.37e-04  1.66e-01  4.02e-06  4.27e-02  8.62e-01  
  6  +5.0002e-01  +5.7660e-01  7.66e-02  5.11e-04  1.02e-01  2.24e-06  2.65e-02  4.82e-01  
  7  +5.0001e-01  +5.2873e-01  2.87e-02  1.92e-04  3.81e-02  9.51e-07  9.08e-03  7.07e-01  
  8  +5.0000e-01  +5.1840e-01  1.84e-02  1.19e-04  2.37e-02  1.89e-06  1.66e-03  9.23e-01  
  9  +4.9952e-01  +5.2325e-01  2.37e-02  1.15e-05  2.30e-03  9.61e-05  3.95e-05  9.82e-01  
 10  +4.9871e-01  +5.1865e-01  1.99e-02  5.68e-06  1.14e-03  1.33e-04  1.96e-05  5.35e-01  
 11  +4.9788e-01  +5.1329e-01  1.54e-02  4.24e-06  8.48e-04  7.20e-05  1.51e-05  3.75e-01  
 12  +4.9761e-01  +5.0996e-01  1.24e-02  3.39e-06  6.78e-04  7.08e-07  1.24e-05  7.88e-01  
 13  +4.9644e-01  +5.0484e-01  8.40e-03  2.03e-06  4.05e-04  3.17e-07  7.61e-06  7.80e-01  
 14  +4.9615e-01  +5.0348e-01  7.34e-03  1.69e-06  3.37e-04  2.84e-07  6.37e-06  9.90e-01  
 15  +4.9469e-01  +4.9780e-01  3.11e-03  6.59e-07  1.32e-04  1.15e-07  2.60e-06  6.61e-01  
 16  +4.9421e-01  +4.9592e-01  1.71e-03  3.47e-07  6.94e-05  8.18e-08  1.39e-06  9.90e-01  
 17  +4.9361e-01  +4.9365e-01  3.35e-05  6.74e-09  1.35e-06  1.33e-09  2.76e-08  9.90e-01  
 18  +4.9360e-01  +4.9360e-01  3.35e-07  6.73e-11  1.35e-08  1.33e-11  2.76e-10  9.90e-01  
 19  +4.9360e-01  +4.9360e-01  3.35e-09  6.74e-13  1.35e-10  1.37e-13  2.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.5687ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:57 PM: Optimal value: 4.936e-01
(CVXPY) Aug 30 12:09:57 PM: Compilation took 8.513e-03 seconds
(CVXPY) Aug 30 12:09:57 PM: Solver (including time spent in interface) took 6.291e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4936
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:57 PM: Your problem has 5023 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Finished problem compilation (took 1.962e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5023
  constraints   = 10023
  nnz(P)        = 0
  nnz(A)        = 49440
  cones (total) = 1
    : Nonnegative = 1,  numel = 10023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.00e+02  1.00e+00  1.00e+00   ------   
  1  +5.9308e-01  +1.0290e+03  1.03e+03  3.86e-01  6.07e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4189e-01  +1.3622e+02  1.36e+02  1.50e-01  2.99e+01  1.15e-02  2.44e-01  8.25e-01  
  3  +5.1047e-01  +3.4059e+01  3.35e+01  1.18e-01  2.32e+01  2.91e-05  2.39e-01  1.21e-01  
  4  +5.0031e-01  +1.3500e+00  8.50e-01  5.76e-03  1.15e+00  4.45e-06  1.29e-01  9.90e-01  
  5  +5.0006e-01  +7.1819e-01  2.18e-01  1.46e-03  2.93e-01  3.92e-06  5.91e-02  6.72e-01  
  6  +5.0006e-01  +6.9718e-01  1.97e-01  1.32e-03  2.65e-01  3.34e-06  4.87e-02  3.36e-01  
  7  +5.0005e-01  +6.6873e-01  1.69e-01  1.13e-03  2.26e-01  2.36e-06  3.37e-02  6.09e-01  
  8  +5.0002e-01  +5.8795e-01  8.79e-02  5.82e-04  1.17e-01  2.21e-06  1.07e-02  7.05e-01  
  9  +5.0002e-01  +5.9623e-01  9.62e-02  5.70e-04  1.15e-01  3.08e-06  3.99e-03  9.90e-01  
 10  +4.9955e-01  +5.7841e-01  7.89e-02  3.92e-05  7.95e-03  7.39e-05  1.22e-04  9.70e-01  
 11  +4.9842e-01  +5.6495e-01  6.65e-02  2.75e-05  5.56e-03  6.35e-05  8.56e-05  4.09e-01  
 12  +4.9675e-01  +5.5045e-01  5.37e-02  2.17e-05  4.39e-03  4.28e-05  6.90e-05  2.67e-01  
 13  +4.9574e-01  +5.3763e-01  4.19e-02  1.79e-05  3.61e-03  3.95e-07  5.83e-05  7.48e-01  
 14  +4.9154e-01  +5.1058e-01  1.90e-02  6.05e-06  1.22e-03  4.75e-07  2.10e-05  9.41e-01  
 15  +4.9136e-01  +5.0994e-01  1.86e-02  5.59e-06  1.13e-03  5.08e-07  1.95e-05  2.63e-01  
 16  +4.9009e-01  +5.0355e-01  1.35e-02  3.61e-06  7.30e-04  4.20e-07  1.32e-05  5.96e-01  
 17  +4.9005e-01  +5.0336e-01  1.33e-02  3.58e-06  7.23e-04  4.21e-07  1.31e-05  8.29e-02  
 18  +4.8935e-01  +4.9982e-01  1.05e-02  2.66e-06  5.37e-04  3.44e-07  9.96e-06  3.33e-01  
 19  +4.8911e-01  +4.9846e-01  9.35e-03  2.43e-06  4.92e-04  3.34e-07  9.23e-06  5.67e-01  
 20  +4.8896e-01  +4.9774e-01  8.78e-03  2.27e-06  4.58e-04  3.14e-07  8.66e-06  7.30e-02  
 21  +4.8783e-01  +4.9219e-01  4.36e-03  1.05e-06  2.12e-04  1.58e-07  4.25e-06  6.07e-01  
 22  +4.8779e-01  +4.9193e-01  4.14e-03  1.02e-06  2.06e-04  1.51e-07  4.13e-06  2.32e-01  
 23  +4.8698e-01  +4.8803e-01  1.05e-03  2.48e-07  5.01e-05  3.68e-08  1.07e-06  7.80e-01  
 24  +4.8671e-01  +4.8672e-01  1.86e-05  4.36e-09  8.81e-07  4.88e-10  1.95e-08  9.83e-01  
 25  +4.8670e-01  +4.8670e-01  1.87e-07  4.40e-11  8.90e-09  4.93e-12  1.97e-10  9.90e-01  
 26  +4.8670e-01  +4.8670e-01  1.88e-09  4.40e-13  8.90e-11  5.10e-14  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.9929ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:57 PM: Optimal value: 4.867e-01
(CVXPY) Aug 30 12:09:57 PM: Compilation took 1.962e-02 seconds
(CVXPY) Aug 30 12:09:57 PM: Solver (including time spent in interface) took 7.399e-02 seconds
Iteration: 2, Objective: 0.4867
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:57 PM: Your problem has 5033 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Finished problem compilation (took 3.138e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5033
  constraints   = 10033
  nnz(P)        = 0
  nnz(A)        = 55882
  cones (total) = 1
    : Nonnegative = 1,  numel = 10033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.02e+02  1.00e+00  1.00e+00   ------   
  1  +5.9306e-01  +1.0292e+03  1.03e+03  3.86e-01  6.21e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4182e-01  +1.3610e+02  1.36e+02  1.50e-01  3.05e+01  1.15e-02  2.45e-01  8.26e-01  
  3  +5.1045e-01  +3.4013e+01  3.35e+01  1.19e-01  2.37e+01  2.91e-05  2.39e-01  1.22e-01  
  4  +5.0031e-01  +1.3526e+00  8.52e-01  5.78e-03  1.18e+00  4.47e-06  1.29e-01  9.90e-01  
  5  +5.0007e-01  +7.3783e-01  2.38e-01  1.59e-03  3.26e-01  4.18e-06  6.17e-02  6.87e-01  
  6  +5.0006e-01  +7.0873e-01  2.09e-01  1.40e-03  2.86e-01  3.48e-06  4.77e-02  4.11e-01  
  7  +5.0002e-01  +5.9056e-01  9.05e-02  6.03e-04  1.24e-01  2.56e-06  1.45e-02  7.41e-01  
  8  +4.9996e-01  +6.0112e-01  1.01e-01  4.96e-04  1.02e-01  1.27e-05  2.45e-03  9.10e-01  
  9  +4.9839e-01  +5.8918e-01  9.08e-02  3.48e-05  7.20e-03  2.43e-04  1.08e-04  9.56e-01  
 10  +4.9774e-01  +5.7791e-01  8.02e-02  3.00e-05  6.19e-03  1.58e-04  9.22e-05  3.46e-01  
 11  +4.9749e-01  +5.7348e-01  7.60e-02  2.70e-05  5.58e-03  1.26e-04  8.26e-05  2.60e-01  
 12  +4.9738e-01  +5.6804e-01  7.07e-02  2.57e-05  5.32e-03  6.53e-05  7.90e-05  3.78e-01  
 13  +4.9597e-01  +5.5968e-01  6.37e-02  1.93e-05  4.00e-03  6.06e-05  5.90e-05  3.41e-01  
 14  +4.9564e-01  +5.5730e-01  6.17e-02  1.88e-05  3.90e-03  4.54e-05  5.77e-05  1.99e-01  
 15  +4.9300e-01  +5.4537e-01  5.24e-02  1.31e-05  2.72e-03  4.20e-05  4.02e-05  3.41e-01  
 16  +4.9289e-01  +5.4478e-01  5.19e-02  1.31e-05  2.70e-03  3.98e-05  4.00e-05  3.85e-02  
 17  +4.9183e-01  +5.4005e-01  4.82e-02  1.19e-05  2.46e-03  3.19e-05  3.67e-05  1.85e-01  
 18  +4.8221e-01  +5.0004e-01  1.78e-02  3.43e-06  7.07e-04  7.09e-06  1.08e-05  8.31e-01  
 19  +4.8153e-01  +4.9737e-01  1.58e-02  2.98e-06  6.15e-04  5.38e-06  9.42e-06  2.79e-01  
 20  +4.7721e-01  +4.8073e-01  3.52e-03  6.26e-07  1.29e-04  2.28e-07  2.03e-06  9.90e-01  
 21  +4.7634e-01  +4.7768e-01  1.34e-03  2.36e-07  4.88e-05  8.89e-08  7.73e-07  7.94e-01  
 22  +4.7594e-01  +4.7630e-01  3.58e-04  6.29e-08  1.30e-05  2.42e-08  2.06e-07  8.29e-01  
 23  +4.7580e-01  +4.7581e-01  4.52e-06  7.95e-10  1.64e-07  3.05e-10  2.61e-09  9.87e-01  
 24  +4.7580e-01  +4.7580e-01  4.53e-08  7.96e-12  1.64e-09  3.06e-12  2.62e-11  9.90e-01  
 25  +4.7580e-01  +4.7580e-01  4.57e-10  8.04e-14  1.66e-11  3.13e-14  2.67e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 85.0399ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:57 PM: Optimal value: 4.758e-01
(CVXPY) Aug 30 12:09:57 PM: Compilation took 3.138e-02 seconds
(CVXPY) Aug 30 12:09:57 PM: Solver (including time spent in interface) took 7.893e-02 seconds
Iteration: 3, Objective: 0.4758
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:57 PM: Your problem has 5043 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Finished problem compilation (took 1.694e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5043
  constraints   = 10043
  nnz(P)        = 0
  nnz(A)        = 59659
  cones (total) = 1
    : Nonnegative = 1,  numel = 10043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0012e+03  5.00e+03  9.85e-01  1.03e+02  1.00e+00  1.00e+00   ------   
  1  +5.9296e-01  +1.0297e+03  1.03e+03  3.87e-01  6.25e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4172e-01  +1.3593e+02  1.35e+02  1.51e-01  3.06e+01  1.15e-02  2.45e-01  8.27e-01  
  3  +5.1042e-01  +3.3968e+01  3.35e+01  1.19e-01  2.38e+01  2.92e-05  2.39e-01  1.23e-01  
  4  +5.0032e-01  +1.3567e+00  8.56e-01  5.82e-03  1.19e+00  4.49e-06  1.29e-01  9.90e-01  
  5  +5.0008e-01  +7.7491e-01  2.75e-01  1.84e-03  3.81e-01  4.27e-06  6.63e-02  6.26e-01  
  6  +5.0006e-01  +7.2140e-01  2.21e-01  1.48e-03  3.06e-01  3.80e-06  4.66e-02  3.72e-01  
  7  +5.0005e-01  +6.9650e-01  1.96e-01  1.31e-03  2.71e-01  3.84e-06  2.85e-02  5.31e-01  
  8  +5.0000e-01  +6.3774e-01  1.38e-01  8.15e-04  1.69e-01  8.83e-06  5.74e-03  8.43e-01  
  9  +4.9870e-01  +6.2878e-01  1.30e-01  6.62e-05  1.38e-02  2.05e-04  2.13e-04  9.65e-01  
 10  +4.9659e-01  +6.0607e-01  1.09e-01  3.97e-05  8.28e-03  2.16e-04  1.28e-04  4.79e-01  
 11  +4.9666e-01  +6.0093e-01  1.04e-01  3.79e-05  7.90e-03  1.44e-04  1.20e-04  2.98e-01  
 12  +4.9639e-01  +5.9585e-01  9.95e-02  3.61e-05  7.52e-03  1.05e-04  1.14e-04  2.42e-01  
 13  +4.9462e-01  +5.8494e-01  9.03e-02  2.80e-05  5.84e-03  9.61e-05  8.86e-05  3.04e-01  
 14  +4.9393e-01  +5.7752e-01  8.36e-02  2.47e-05  5.14e-03  3.24e-05  7.83e-05  6.07e-01  
 15  +4.9277e-01  +5.7204e-01  7.93e-02  2.34e-05  4.87e-03  2.52e-05  7.50e-05  1.77e-01  
 16  +4.8543e-01  +5.3805e-01  5.26e-02  1.22e-05  2.55e-03  1.60e-05  4.06e-05  5.41e-01  
 17  +4.8066e-01  +5.1727e-01  3.66e-02  7.99e-06  1.66e-03  8.89e-06  2.75e-05  4.34e-01  
 18  +4.8004e-01  +5.1412e-01  3.41e-02  7.22e-06  1.50e-03  6.18e-06  2.49e-05  3.66e-01  
 19  +4.7964e-01  +5.1226e-01  3.26e-02  6.84e-06  1.42e-03  5.31e-06  2.37e-05  1.78e-01  
 20  +4.7755e-01  +5.0300e-01  2.55e-02  5.22e-06  1.09e-03  2.08e-06  1.84e-05  7.39e-01  
 21  +4.7420e-01  +4.8987e-01  1.57e-02  3.12e-06  6.49e-04  1.16e-06  1.13e-05  5.19e-01  
 22  +4.7324e-01  +4.8568e-01  1.24e-02  2.42e-06  5.04e-04  7.51e-07  8.81e-06  8.79e-01  
 23  +4.6943e-01  +4.7139e-01  1.95e-03  3.77e-07  7.83e-05  1.08e-07  1.44e-06  8.66e-01  
 24  +4.6872e-01  +4.6877e-01  4.99e-05  9.58e-09  1.99e-06  2.46e-09  3.75e-08  9.75e-01  
 25  +4.6870e-01  +4.6870e-01  4.99e-07  9.58e-11  1.99e-08  2.46e-11  3.76e-10  9.90e-01  
 26  +4.6870e-01  +4.6870e-01  4.99e-09  9.58e-13  1.99e-10  2.45e-13  3.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 84.1251ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:57 PM: Optimal value: 4.687e-01
(CVXPY) Aug 30 12:09:57 PM: Compilation took 1.694e-02 seconds
(CVXPY) Aug 30 12:09:57 PM: Solver (including time spent in interface) took 7.793e-02 seconds
Iteration: 4, Objective: 0.4687
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:57 PM: Your problem has 5053 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5053
  constraints   = 10053
  nnz(P)        = 0
  nnz(A)        = 62275
  cones (total) = 1
    : Nonnegative = 1,  numel = 10053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9287e-01  +1.0298e+03  1.03e+03  3.87e-01  6.27e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4162e-01  +1.3572e+02  1.35e+02  1.50e-01  3.07e+01  1.16e-02  2.45e-01  8.27e-01  
  3  +5.1040e-01  +3.3928e+01  3.34e+01  1.18e-01  2.38e+01  2.93e-05  2.39e-01  1.24e-01  
  4  +5.0032e-01  +1.3604e+00  8.60e-01  5.85e-03  1.20e+00  4.51e-06  1.28e-01  9.90e-01  
  5  +5.0009e-01  +7.8533e-01  2.85e-01  1.92e-03  3.97e-01  4.22e-06  6.60e-02  5.90e-01  
  6  +5.0008e-01  +7.5662e-01  2.57e-01  1.72e-03  3.56e-01  4.14e-06  4.87e-02  3.77e-01  
  7  +5.0006e-01  +7.1222e-01  2.12e-01  1.41e-03  2.92e-01  4.64e-06  2.37e-02  6.36e-01  
  8  +4.9996e-01  +6.7193e-01  1.72e-01  7.38e-04  1.54e-01  1.66e-05  3.27e-03  9.90e-01  
  9  +4.9876e-01  +6.5791e-01  1.59e-01  8.13e-05  1.70e-02  1.82e-04  2.61e-04  9.21e-01  
 10  +4.9606e-01  +6.1380e-01  1.18e-01  5.63e-05  1.18e-02  9.95e-05  1.83e-04  4.54e-01  
 11  +4.9580e-01  +6.1113e-01  1.15e-01  4.61e-05  9.63e-03  9.15e-05  1.47e-04  3.58e-01  
 12  +4.9594e-01  +6.0914e-01  1.13e-01  4.14e-05  8.66e-03  7.02e-05  1.31e-04  3.35e-01  
 13  +4.9548e-01  +6.0556e-01  1.10e-01  3.68e-05  7.70e-03  6.50e-05  1.17e-04  2.08e-01  
 14  +4.9471e-01  +5.9722e-01  1.03e-01  3.49e-05  7.30e-03  3.63e-05  1.11e-04  3.52e-01  
 15  +4.8984e-01  +5.6902e-01  7.92e-02  2.13e-05  4.46e-03  1.48e-05  6.94e-05  7.33e-01  
 16  +4.8711e-01  +5.5559e-01  6.85e-02  1.76e-05  3.68e-03  1.17e-05  5.83e-05  2.23e-01  
 17  +4.8605e-01  +5.4798e-01  6.19e-02  1.60e-05  3.35e-03  5.00e-06  5.37e-05  5.62e-01  
 18  +4.8331e-01  +5.3566e-01  5.24e-02  1.29e-05  2.69e-03  4.10e-06  4.39e-05  2.15e-01  
 19  +4.8136e-01  +5.2524e-01  4.39e-02  1.04e-05  2.17e-03  1.86e-06  3.59e-05  8.45e-01  
 20  +4.7791e-01  +5.1070e-01  3.28e-02  7.22e-06  1.51e-03  1.44e-06  2.53e-05  9.90e-01  
 21  +4.7638e-01  +5.0421e-01  2.78e-02  5.99e-06  1.25e-03  1.25e-06  2.12e-05  3.09e-01  
 22  +4.7310e-01  +4.9050e-01  1.74e-02  3.59e-06  7.49e-04  8.29e-07  1.31e-05  6.60e-01  
 23  +4.6993e-01  +4.7781e-01  7.89e-03  1.54e-06  3.21e-04  4.26e-07  5.76e-06  9.90e-01  
 24  +4.6983e-01  +4.7739e-01  7.56e-03  1.49e-06  3.11e-04  3.99e-07  5.65e-06  9.80e-02  
 25  +4.6973e-01  +4.7698e-01  7.25e-03  1.43e-06  2.98e-04  3.84e-07  5.42e-06  9.99e-02  
 26  +4.6933e-01  +4.7542e-01  6.09e-03  1.18e-06  2.47e-04  3.37e-07  4.46e-06  5.64e-01  
 27  +4.6765e-01  +4.6910e-01  1.45e-03  2.81e-07  5.86e-05  8.00e-08  1.09e-06  9.90e-01  
 28  +4.6711e-01  +4.6712e-01  1.79e-05  3.46e-09  7.21e-07  9.32e-10  1.35e-08  9.90e-01  
 29  +4.6710e-01  +4.6710e-01  1.79e-07  3.46e-11  7.21e-09  9.32e-12  1.35e-10  9.90e-01  
 30  +4.6710e-01  +4.6710e-01  1.79e-09  3.46e-13  7.22e-11  9.48e-14  1.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 107.2897ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:57 PM: Optimal value: 4.671e-01
(CVXPY) Aug 30 12:09:57 PM: Compilation took 1.564e-02 seconds
(CVXPY) Aug 30 12:09:57 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 5, Objective: 0.4671
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:57 PM: Your problem has 5063 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:57 PM: Finished problem compilation (took 1.559e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5063
  constraints   = 10063
  nnz(P)        = 0
  nnz(A)        = 64231
  cones (total) = 1
    : Nonnegative = 1,  numel = 10063

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9287e-01  +1.0298e+03  1.03e+03  3.87e-01  6.28e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4160e-01  +1.3567e+02  1.35e+02  1.50e-01  3.07e+01  1.16e-02  2.45e-01  8.28e-01  
  3  +5.1040e-01  +3.3903e+01  3.34e+01  1.18e-01  2.38e+01  2.93e-05  2.39e-01  1.24e-01  
  4  +5.0032e-01  +1.3613e+00  8.61e-01  5.85e-03  1.21e+00  4.52e-06  1.28e-01  9.90e-01  
  5  +5.0010e-01  +8.2684e-01  3.27e-01  2.20e-03  4.56e-01  4.26e-06  7.20e-02  5.30e-01  
  6  +5.0007e-01  +7.4302e-01  2.43e-01  1.63e-03  3.38e-01  4.00e-06  4.16e-02  5.32e-01  
  7  +5.0005e-01  +7.1806e-01  2.18e-01  1.41e-03  2.93e-01  5.85e-06  1.54e-02  7.99e-01  
  8  +4.9955e-01  +6.5359e-01  1.54e-01  1.90e-04  3.97e-02  7.83e-05  6.32e-04  9.85e-01  
  9  +4.9771e-01  +6.3508e-01  1.37e-01  5.73e-05  1.20e-02  2.20e-04  1.84e-04  7.25e-01  
 10  +4.9713e-01  +6.2659e-01  1.29e-01  5.18e-05  1.08e-02  1.45e-04  1.64e-04  3.62e-01  
 11  +4.9540e-01  +6.1342e-01  1.18e-01  4.13e-05  8.65e-03  1.29e-04  1.32e-04  2.91e-01  
 12  +4.9496e-01  +6.0829e-01  1.13e-01  3.69e-05  7.73e-03  7.97e-05  1.18e-04  4.14e-01  
 13  +4.9416e-01  +6.0320e-01  1.09e-01  3.64e-05  7.61e-03  6.44e-05  1.17e-04  1.19e-01  
 14  +4.8952e-01  +5.7551e-01  8.60e-02  2.49e-05  5.22e-03  3.53e-06  8.22e-05  8.89e-01  
 15  +4.8662e-01  +5.6047e-01  7.39e-02  2.03e-05  4.25e-03  2.73e-06  6.80e-05  5.12e-01  
 16  +4.8545e-01  +5.5485e-01  6.94e-02  1.87e-05  3.91e-03  2.55e-06  6.27e-05  2.05e-01  
 17  +4.8156e-01  +5.3702e-01  5.55e-02  1.37e-05  2.87e-03  2.05e-06  4.70e-05  3.03e-01  
 18  +4.8121e-01  +5.3545e-01  5.42e-02  1.32e-05  2.75e-03  2.06e-06  4.50e-05  1.59e-01  
 19  +4.7812e-01  +5.2073e-01  4.26e-02  9.47e-06  1.98e-03  1.82e-06  3.28e-05  9.13e-01  
 20  +4.7786e-01  +5.1982e-01  4.20e-02  9.30e-06  1.94e-03  1.81e-06  3.23e-05  1.24e-01  
 21  +4.7637e-01  +5.1361e-01  3.72e-02  8.03e-06  1.68e-03  1.68e-06  2.80e-05  4.68e-01  
 22  +4.7112e-01  +4.9231e-01  2.12e-02  4.30e-06  8.99e-04  9.82e-07  1.55e-05  6.99e-01  
 23  +4.6838e-01  +4.8139e-01  1.30e-02  2.58e-06  5.38e-04  6.10e-07  9.47e-06  4.54e-01  
 24  +4.6581e-01  +4.7092e-01  5.11e-03  9.86e-07  2.06e-04  2.84e-07  3.72e-06  9.90e-01  
 25  +4.6397e-01  +4.6414e-01  1.73e-04  3.32e-08  6.93e-06  9.11e-09  1.29e-07  9.90e-01  
 26  +4.6390e-01  +4.6390e-01  1.74e-06  3.34e-10  6.97e-08  9.16e-11  1.29e-09  9.90e-01  
 27  +4.6390e-01  +4.6390e-01  1.74e-08  3.34e-12  6.97e-10  9.16e-13  1.29e-11  9.90e-01  
 28  +4.6390e-01  +4.6390e-01  1.74e-10  3.34e-14  6.97e-12  9.27e-15  1.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.592ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:58 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:58 PM: Optimal value: 4.639e-01
(CVXPY) Aug 30 12:09:58 PM: Compilation took 1.559e-02 seconds
(CVXPY) Aug 30 12:09:58 PM: Solver (including time spent in interface) took 9.393e-02 seconds
Iteration: 6, Objective: 0.4639
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:58 PM: Your problem has 5073 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:58 PM: Finished problem compilation (took 3.211e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5073
  constraints   = 10073
  nnz(P)        = 0
  nnz(A)        = 66166
  cones (total) = 1
    : Nonnegative = 1,  numel = 10073

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9285e-01  +1.0298e+03  1.03e+03  3.87e-01  6.29e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4156e-01  +1.3557e+02  1.35e+02  1.50e-01  3.06e+01  1.16e-02  2.44e-01  8.28e-01  
  3  +5.1039e-01  +3.3880e+01  3.34e+01  1.18e-01  2.38e+01  2.93e-05  2.39e-01  1.24e-01  
  4  +5.0032e-01  +1.3625e+00  8.62e-01  5.87e-03  1.21e+00  4.52e-06  1.28e-01  9.90e-01  
  5  +5.0011e-01  +8.3001e-01  3.30e-01  2.22e-03  4.61e-01  4.31e-06  7.18e-02  5.30e-01  
  6  +5.0009e-01  +7.9997e-01  3.00e-01  2.02e-03  4.19e-01  4.32e-06  5.37e-02  3.69e-01  
  7  +5.0004e-01  +6.9631e-01  1.96e-01  1.29e-03  2.69e-01  5.63e-06  1.68e-02  7.79e-01  
  8  +4.9963e-01  +6.9831e-01  1.99e-01  3.26e-04  6.83e-02  6.89e-05  1.12e-03  9.64e-01  
  9  +4.9751e-01  +6.6516e-01  1.68e-01  7.19e-05  1.51e-02  2.54e-04  2.34e-04  8.06e-01  
 10  +4.9807e-01  +6.7084e-01  1.73e-01  7.03e-05  1.48e-02  2.46e-04  2.25e-04  1.32e-01  
 11  +4.9714e-01  +6.5931e-01  1.62e-01  5.81e-05  1.22e-02  2.17e-04  1.85e-04  2.93e-01  
 12  +4.9601e-01  +6.3957e-01  1.44e-01  5.07e-05  1.06e-02  1.27e-04  1.62e-04  3.65e-01  
 13  +4.9551e-01  +6.3423e-01  1.39e-01  4.57e-05  9.59e-03  1.14e-04  1.47e-04  1.93e-01  
 14  +4.9504e-01  +6.2756e-01  1.33e-01  4.47e-05  9.38e-03  8.71e-05  1.44e-04  1.61e-01  
 15  +4.9113e-01  +6.0273e-01  1.12e-01  3.21e-05  6.74e-03  6.80e-05  1.05e-04  3.77e-01  
 16  +4.8363e-01  +5.5944e-01  7.58e-02  1.96e-05  4.10e-03  3.48e-05  6.68e-05  4.77e-01  
 17  +4.8347e-01  +5.5836e-01  7.49e-02  1.92e-05  4.03e-03  3.19e-05  6.57e-05  8.28e-02  
 18  +4.8179e-01  +5.4928e-01  6.75e-02  1.66e-05  3.48e-03  2.15e-05  5.73e-05  3.36e-01  
 19  +4.8136e-01  +5.4689e-01  6.55e-02  1.61e-05  3.37e-03  1.86e-05  5.57e-05  1.24e-01  
 20  +4.7950e-01  +5.3782e-01  5.83e-02  1.39e-05  2.91e-03  1.48e-05  4.87e-05  2.15e-01  
 21  +4.7461e-01  +5.1340e-01  3.88e-02  8.72e-06  1.82e-03  3.88e-06  3.15e-05  7.50e-01  
 22  +4.7081e-01  +4.9567e-01  2.49e-02  5.28e-06  1.10e-03  1.11e-06  1.95e-05  9.90e-01  
 23  +4.7033e-01  +4.9374e-01  2.34e-02  4.94e-06  1.03e-03  1.07e-06  1.83e-05  2.04e-01  
 24  +4.6799e-01  +4.8422e-01  1.62e-02  3.36e-06  7.03e-04  7.46e-07  1.27e-05  3.76e-01  
 25  +4.6683e-01  +4.7952e-01  1.27e-02  2.60e-06  5.44e-04  5.86e-07  9.93e-06  2.44e-01  
 26  +4.6663e-01  +4.7858e-01  1.20e-02  2.44e-06  5.11e-04  5.68e-07  9.35e-06  2.62e-01  
 27  +4.6391e-01  +4.6769e-01  3.79e-03  7.63e-07  1.60e-04  1.87e-07  3.01e-06  9.21e-01  
 28  +4.6360e-01  +4.6644e-01  2.83e-03  5.68e-07  1.19e-04  1.43e-07  2.25e-06  6.30e-01  
 29  +4.6277e-01  +4.6323e-01  4.68e-04  9.37e-08  1.96e-05  2.34e-08  3.78e-07  8.35e-01  
 30  +4.6260e-01  +4.6261e-01  5.54e-06  1.11e-09  2.32e-07  2.74e-10  4.49e-09  9.88e-01  
 31  +4.6260e-01  +4.6260e-01  5.54e-08  1.11e-11  2.32e-09  2.75e-12  4.49e-11  9.90e-01  
 32  +4.6260e-01  +4.6260e-01  5.54e-10  1.11e-13  2.32e-11  2.76e-14  4.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 120.2329ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:58 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:58 PM: Optimal value: 4.626e-01
(CVXPY) Aug 30 12:09:58 PM: Compilation took 3.211e-02 seconds
(CVXPY) Aug 30 12:09:58 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 7, Objective: 0.4626
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:09:58 PM: Your problem has 5082 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 30 12:09:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:09:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:09:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:09:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:09:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:09:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:09:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:09:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:09:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:09:58 PM: Finished problem compilation (took 1.511e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5082
  constraints   = 10082
  nnz(P)        = 0
  nnz(A)        = 68045
  cones (total) = 1
    : Nonnegative = 1,  numel = 10082

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9280e-01  +1.0299e+03  1.03e+03  3.88e-01  6.29e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4154e-01  +1.3553e+02  1.35e+02  1.50e-01  3.06e+01  1.16e-02  2.44e-01  8.28e-01  
  3  +5.1038e-01  +3.3876e+01  3.34e+01  1.18e-01  2.39e+01  2.93e-05  2.39e-01  1.25e-01  
  4  +5.0032e-01  +1.3637e+00  8.63e-01  5.88e-03  1.21e+00  4.53e-06  1.28e-01  9.90e-01  
  5  +5.0011e-01  +8.4348e-01  3.43e-01  2.31e-03  4.81e-01  4.36e-06  7.33e-02  5.15e-01  
  6  +5.0010e-01  +8.2640e-01  3.26e-01  2.19e-03  4.56e-01  4.46e-06  5.72e-02  3.63e-01  
  7  +5.0007e-01  +7.4800e-01  2.48e-01  1.65e-03  3.43e-01  5.10e-06  2.62e-02  6.32e-01  
  8  +4.9998e-01  +7.2449e-01  2.25e-01  9.45e-04  1.98e-01  1.74e-05  4.20e-03  9.90e-01  
  9  +4.9888e-01  +7.0724e-01  2.08e-01  1.18e-04  2.48e-02  1.63e-04  3.89e-04  9.08e-01  
 10  +4.9768e-01  +6.6588e-01  1.68e-01  9.70e-05  2.04e-02  8.28e-05  3.20e-04  3.96e-01  
 11  +4.9696e-01  +6.4284e-01  1.46e-01  6.95e-05  1.46e-02  5.15e-05  2.25e-04  5.99e-01  
 12  +4.9693e-01  +6.3851e-01  1.42e-01  6.76e-05  1.42e-02  3.91e-05  2.19e-04  2.16e-01  
 13  +4.9596e-01  +6.2909e-01  1.33e-01  5.19e-05  1.09e-02  3.55e-05  1.68e-04  3.96e-01  
 14  +4.9576e-01  +6.2537e-01  1.30e-01  5.06e-05  1.06e-02  2.74e-05  1.63e-04  2.15e-01  
 15  +4.9491e-01  +6.1782e-01  1.23e-01  4.63e-05  9.73e-03  1.68e-05  1.50e-04  4.02e-01  
 16  +4.9120e-01  +5.9754e-01  1.06e-01  3.18e-05  6.67e-03  1.61e-05  1.05e-04  3.66e-01  
 17  +4.8956e-01  +5.8795e-01  9.84e-02  2.87e-05  6.03e-03  1.23e-05  9.54e-05  2.43e-01  
 18  +4.8478e-01  +5.6211e-01  7.73e-02  2.08e-05  4.36e-03  6.68e-06  7.11e-05  4.94e-01  
 19  +4.8301e-01  +5.5309e-01  7.01e-02  1.83e-05  3.83e-03  5.12e-06  6.31e-05  2.98e-01  
 20  +4.8229e-01  +5.4900e-01  6.67e-02  1.71e-05  3.59e-03  4.00e-06  5.93e-05  3.44e-01  
 21  +4.7802e-01  +5.2940e-01  5.14e-02  1.22e-05  2.57e-03  2.74e-06  4.35e-05  4.45e-01  
 22  +4.7683e-01  +5.2304e-01  4.62e-02  1.06e-05  2.23e-03  2.23e-06  3.79e-05  5.24e-01  
 23  +4.7211e-01  +5.0219e-01  3.01e-02  6.59e-06  1.38e-03  1.37e-06  2.42e-05  5.89e-01  
 24  +4.7096e-01  +4.9719e-01  2.62e-02  5.60e-06  1.17e-03  1.22e-06  2.06e-05  2.95e-01  
 25  +4.7048e-01  +4.9483e-01  2.44e-02  5.13e-06  1.08e-03  1.17e-06  1.90e-05  4.95e-01  
 26  +4.6679e-01  +4.7965e-01  1.29e-02  2.63e-06  5.51e-04  6.27e-07  1.00e-05  6.31e-01  
 27  +4.6626e-01  +4.7740e-01  1.11e-02  2.26e-06  4.74e-04  5.55e-07  8.64e-06  3.53e-01  
 28  +4.6297e-01  +4.6429e-01  1.32e-03  2.65e-07  5.55e-05  6.33e-08  1.05e-06  9.90e-01  
 29  +4.6254e-01  +4.6265e-01  1.13e-04  2.26e-08  4.73e-06  5.66e-09  9.04e-08  9.90e-01  
 30  +4.6250e-01  +4.6250e-01  1.16e-06  2.32e-10  4.87e-08  5.82e-11  9.32e-10  9.90e-01  
 31  +4.6250e-01  +4.6250e-01  1.17e-08  2.34e-12  4.91e-10  5.87e-13  9.40e-12  9.90e-01  
 32  +4.6250e-01  +4.6250e-01  1.17e-10  2.34e-14  4.92e-12  5.87e-15  9.41e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.6426ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:09:58 PM: Problem status: optimal
(CVXPY) Aug 30 12:09:58 PM: Optimal value: 4.625e-01
(CVXPY) Aug 30 12:09:58 PM: Compilation took 1.511e-02 seconds
(CVXPY) Aug 30 12:09:58 PM: Solver (including time spent in interface) took 1.414e-01 seconds
FULL MODEL:
  Accruacy: 0.5279
  Our objective: 0.055800000000000044

IF 
    (x0 = 1 AND x1 = 1 AND x2 = 1)                                  <-- (term's our objective: 0.013800000000000007)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.018800000000000046)
 OR (x0 = 1 AND x4 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.005599999999999973)
 OR (x1 = 1 AND x3 = 1 AND x5 = 1 AND x0 = 0 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.00399999999999995)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0025999999999999704)
 OR (x1 = 1 AND x5 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.005000000000000018)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x5 = 0) <-- (term's our objective: 0.005999999999999974)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.018800000000000046
    Its accruacy: 0.5094
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.018800000000000046
  Highest accruacy: 0.5094
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

