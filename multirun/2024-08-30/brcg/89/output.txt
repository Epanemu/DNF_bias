Command:
python test_script.py -s smallest_subclass -d 3 -n 50 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 3.

Computed total variation: 0.44000000000000006
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:43 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:43 PM: Finished problem compilation (took 5.530e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 157
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8881e-01  +2.6109e+01  2.56e+01  8.07e-01  5.02e+00  1.00e+00  1.08e+00   ------   
  1  +6.0123e-01  +5.0637e+00  4.46e+00  2.51e-01  2.39e+00  4.20e-03  4.68e-01  7.02e-01  
  2  +5.0629e-01  +1.1173e+00  6.11e-01  5.21e-02  5.61e-01  8.81e-03  1.40e-01  8.59e-01  
  3  +4.3018e-01  +8.5570e-01  4.26e-01  1.81e-02  2.01e-01  9.33e-03  5.65e-02  6.78e-01  
  4  +3.6136e-01  +4.3224e-01  7.09e-02  3.25e-03  3.48e-02  9.54e-04  1.50e-02  8.68e-01  
  5  +3.4084e-01  +3.4341e-01  2.56e-03  1.14e-04  1.22e-03  1.84e-05  6.17e-04  9.90e-01  
  6  +3.4011e-01  +3.4013e-01  2.56e-05  1.14e-06  1.22e-05  1.84e-07  6.20e-06  9.90e-01  
  7  +3.4010e-01  +3.4010e-01  2.56e-07  1.14e-08  1.22e-07  1.84e-09  6.20e-08  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  2.56e-09  1.14e-10  1.22e-09  1.84e-11  6.20e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:43 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:43 PM: Optimal value: 3.401e-01
(CVXPY) Aug 30 12:02:43 PM: Compilation took 5.530e-03 seconds
(CVXPY) Aug 30 12:02:43 PM: Solver (including time spent in interface) took 9.987e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:43 PM: Your problem has 37 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:43 PM: Finished problem compilation (took 2.344e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 37
  constraints   = 62
  nnz(P)        = 0
  nnz(A)        = 202
  cones (total) = 1
    : Nonnegative = 1,  numel = 62

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8013e-01  +2.6138e+01  2.57e+01  8.20e-01  5.38e+00  1.00e+00  1.12e+00   ------   
  1  +5.6802e-01  +5.2364e+00  4.67e+00  2.81e-01  2.65e+00  4.06e-03  5.20e-01  6.76e-01  
  2  +4.8069e-01  +1.1224e+00  6.42e-01  5.36e-02  5.99e-01  1.11e-02  1.46e-01  8.95e-01  
  3  +4.3125e-01  +9.5761e-01  5.26e-01  2.98e-02  3.38e-01  1.06e-02  8.96e-02  4.59e-01  
  4  +3.4557e-01  +5.4688e-01  2.01e-01  8.67e-03  9.76e-02  3.78e-03  3.07e-02  6.83e-01  
  5  +2.8818e-01  +3.1055e-01  2.24e-02  9.70e-04  1.06e-02  3.05e-05  4.30e-03  9.11e-01  
  6  +2.8053e-01  +2.8142e-01  8.89e-04  3.83e-05  4.19e-04  1.59e-06  1.85e-04  9.60e-01  
  7  +2.8021e-01  +2.8024e-01  2.66e-05  1.16e-06  1.27e-05  1.61e-08  5.85e-06  9.68e-01  
  8  +2.8020e-01  +2.8020e-01  2.75e-07  1.21e-08  1.32e-07  2.13e-10  6.34e-08  9.89e-01  
  9  +2.8020e-01  +2.8020e-01  2.74e-09  1.21e-10  1.32e-09  2.13e-12  6.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 167.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:43 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:43 PM: Optimal value: 2.802e-01
(CVXPY) Aug 30 12:02:43 PM: Compilation took 2.344e-03 seconds
(CVXPY) Aug 30 12:02:43 PM: Solver (including time spent in interface) took 1.035e-03 seconds
Iteration: 2, Objective: 0.2802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:43 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:43 PM: Finished problem compilation (took 2.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 210
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7816e-01  +2.6198e+01  2.57e+01  8.23e-01  5.42e+00  1.00e+00  1.13e+00   ------   
  1  +5.6115e-01  +5.2686e+00  4.71e+00  2.87e-01  2.70e+00  4.03e-03  5.32e-01  6.72e-01  
  2  +4.7179e-01  +1.1600e+00  6.88e-01  5.53e-02  6.18e-01  1.16e-02  1.52e-01  8.86e-01  
  3  +3.7696e-01  +7.6571e-01  3.89e-01  1.88e-02  2.13e-01  7.93e-03  6.17e-02  6.72e-01  
  4  +3.0443e-01  +3.9207e-01  8.76e-02  4.25e-03  4.66e-02  6.89e-04  1.72e-02  8.00e-01  
  5  +2.8203e-01  +2.8815e-01  6.13e-03  3.03e-04  3.28e-03  3.51e-05  1.42e-03  9.26e-01  
  6  +2.8031e-01  +2.8066e-01  3.46e-04  1.72e-05  1.86e-04  1.75e-06  8.31e-05  9.42e-01  
  7  +2.8021e-01  +2.8022e-01  1.60e-05  8.02e-07  8.62e-06  5.22e-08  4.17e-06  9.55e-01  
  8  +2.8020e-01  +2.8020e-01  1.88e-07  9.45e-09  1.02e-07  6.84e-10  4.99e-08  9.89e-01  
  9  +2.8020e-01  +2.8020e-01  1.89e-09  9.46e-11  1.02e-09  6.85e-12  5.00e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 172.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:43 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:43 PM: Optimal value: 2.802e-01
(CVXPY) Aug 30 12:02:43 PM: Compilation took 2.009e-03 seconds
(CVXPY) Aug 30 12:02:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.72
  Our objective: 0.43999999999999995

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.39999999999999997)
 OR (x0 = 1 AND x2 = 1) <-- (term's our objective: 0.040000000000000036)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

