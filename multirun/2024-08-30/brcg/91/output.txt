Command:
python test_script.py -s smallest_subclass -d 3 -n 100 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 3.

Computed total variation: 0.24
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:47 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:47 PM: Finished problem compilation (took 4.290e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9580e-01  +5.0713e+01  5.02e+01  8.53e-01  7.22e+00  1.00e+00  1.03e+00   ------   
  1  +6.1498e-01  +9.7175e+00  9.10e+00  2.68e-01  3.57e+00  4.24e-03  4.51e-01  6.94e-01  
  2  +5.3938e-01  +1.7250e+00  1.19e+00  7.02e-02  1.06e+00  7.73e-03  1.71e-01  8.12e-01  
  3  +4.9850e-01  +7.2051e-01  2.22e-01  1.59e-02  2.38e-01  5.71e-03  6.85e-02  9.90e-01  
  4  +4.7877e-01  +6.2624e-01  1.47e-01  3.60e-03  5.63e-02  1.22e-02  1.28e-02  8.55e-01  
  5  +4.6491e-01  +5.1061e-01  4.57e-02  1.14e-03  1.78e-02  1.15e-04  4.56e-03  7.94e-01  
  6  +4.5120e-01  +4.5392e-01  2.72e-03  5.65e-05  8.83e-04  3.77e-06  2.65e-04  9.53e-01  
  7  +4.5011e-01  +4.5014e-01  2.89e-05  5.91e-07  9.24e-06  4.03e-08  2.85e-06  9.89e-01  
  8  +4.5010e-01  +4.5010e-01  2.89e-07  5.91e-09  9.24e-08  4.02e-10  2.85e-08  9.90e-01  
  9  +4.5010e-01  +4.5010e-01  2.89e-09  5.91e-11  9.24e-10  4.03e-12  2.85e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 288µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:47 PM: Optimal value: 4.501e-01
(CVXPY) Aug 30 12:02:47 PM: Compilation took 4.290e-03 seconds
(CVXPY) Aug 30 12:02:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:47 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:47 PM: Finished problem compilation (took 3.375e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 361
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9242e-01  +5.1044e+01  5.06e+01  8.58e-01  7.51e+00  1.00e+00  1.05e+00   ------   
  1  +5.9960e-01  +9.9278e+00  9.33e+00  2.81e-01  3.76e+00  4.17e-03  4.74e-01  6.83e-01  
  2  +5.3208e-01  +1.5717e+00  1.04e+00  5.99e-02  9.48e-01  8.79e-03  1.49e-01  8.91e-01  
  3  +5.2347e-01  +1.4616e+00  9.38e-01  4.11e-02  6.57e-01  1.11e-02  1.06e-01  3.55e-01  
  4  +5.0075e-01  +1.2159e+00  7.15e-01  2.41e-02  3.87e-01  8.94e-03  6.93e-02  5.04e-01  
  5  +4.6722e-01  +9.2566e-01  4.58e-01  1.00e-02  1.62e-01  7.07e-03  3.20e-02  6.17e-01  
  6  +4.3689e-01  +7.1571e-01  2.79e-01  5.79e-03  9.31e-02  3.57e-03  2.06e-02  4.21e-01  
  7  +3.9312e-01  +4.3481e-01  4.17e-02  9.05e-04  1.44e-02  2.71e-05  4.10e-03  9.05e-01  
  8  +3.8059e-01  +3.8145e-01  8.59e-04  1.84e-05  2.91e-04  9.76e-07  9.21e-05  9.82e-01  
  9  +3.8030e-01  +3.8031e-01  8.58e-06  1.83e-07  2.90e-06  9.75e-09  9.23e-07  9.90e-01  
 10  +3.8030e-01  +3.8030e-01  8.58e-08  1.83e-09  2.90e-08  9.75e-11  9.23e-09  9.90e-01  
 11  +3.8030e-01  +3.8030e-01  8.58e-10  1.83e-11  2.90e-10  9.75e-13  9.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 301.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:47 PM: Optimal value: 3.803e-01
(CVXPY) Aug 30 12:02:47 PM: Compilation took 3.375e-03 seconds
(CVXPY) Aug 30 12:02:47 PM: Solver (including time spent in interface) took 1.004e-03 seconds
Iteration: 2, Objective: 0.3803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 30 12:02:47 PM: Your problem has 62 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 30 12:02:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 30 12:02:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 30 12:02:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 30 12:02:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 30 12:02:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 30 12:02:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 30 12:02:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 30 12:02:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 30 12:02:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 30 12:02:47 PM: Finished problem compilation (took 3.363e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 112
  nnz(P)        = 0
  nnz(A)        = 368
  cones (total) = 1
    : Nonnegative = 1,  numel = 112

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9219e-01  +5.1028e+01  5.05e+01  8.58e-01  7.50e+00  1.00e+00  1.05e+00   ------   
  1  +5.9774e-01  +9.9573e+00  9.36e+00  2.84e-01  3.76e+00  4.17e-03  4.77e-01  6.81e-01  
  2  +5.3101e-01  +1.5484e+00  1.02e+00  5.85e-02  9.25e-01  8.95e-03  1.46e-01  9.02e-01  
  3  +5.2335e-01  +1.4469e+00  9.24e-01  4.06e-02  6.48e-01  1.10e-02  1.05e-01  3.30e-01  
  4  +5.0350e-01  +1.2543e+00  7.51e-01  2.69e-02  4.29e-01  8.69e-03  7.59e-02  4.49e-01  
  5  +4.6769e-01  +9.2543e-01  4.58e-01  1.01e-02  1.63e-01  7.09e-03  3.20e-02  6.44e-01  
  6  +4.3625e-01  +7.0837e-01  2.72e-01  5.78e-03  9.27e-02  3.29e-03  2.05e-02  4.38e-01  
  7  +3.9239e-01  +4.3250e-01  4.01e-02  8.90e-04  1.41e-02  2.50e-05  4.02e-03  9.20e-01  
  8  +3.8054e-01  +3.8128e-01  7.34e-04  1.61e-05  2.55e-04  8.86e-07  7.96e-05  9.85e-01  
  9  +3.8030e-01  +3.8031e-01  7.33e-06  1.61e-07  2.54e-06  8.85e-09  7.97e-07  9.90e-01  
 10  +3.8030e-01  +3.8030e-01  7.33e-08  1.61e-09  2.54e-08  8.85e-11  7.97e-09  9.90e-01  
 11  +3.8030e-01  +3.8030e-01  7.33e-10  1.61e-11  2.54e-10  8.85e-13  7.97e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 258.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 30 12:02:47 PM: Problem status: optimal
(CVXPY) Aug 30 12:02:47 PM: Optimal value: 3.803e-01
(CVXPY) Aug 30 12:02:47 PM: Compilation took 3.363e-03 seconds
(CVXPY) Aug 30 12:02:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.62
  Our objective: 0.24

IF 
    (x1 = 1 AND x2 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x2 = 1 AND x1 = 0) <-- (term's our objective: 0.060000000000000026)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.11999999999999997)
THEN
 target = 1.0 ELSE target = 0.0

Best over terms:
  Our final objective: 0.11999999999999997
    Its accruacy: 0.56
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.11999999999999997
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

