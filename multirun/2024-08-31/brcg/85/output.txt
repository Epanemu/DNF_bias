Command:
python test_script.py -s smallest_subclass -d 3 -n 50 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 3.

Computed total variation: 0.4
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:12 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:12 PM: Finished problem compilation (took 4.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 157
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8895e-01  +2.6043e+01  2.56e+01  8.08e-01  5.02e+00  1.00e+00  1.08e+00   ------   
  1  +6.0202e-01  +5.0639e+00  4.46e+00  2.52e-01  2.39e+00  4.20e-03  4.69e-01  7.01e-01  
  2  +5.0710e-01  +1.0691e+00  5.62e-01  4.91e-02  5.27e-01  8.87e-03  1.33e-01  8.81e-01  
  3  +4.3849e-01  +8.5150e-01  4.13e-01  1.76e-02  1.95e-01  1.01e-02  5.49e-02  6.63e-01  
  4  +3.6446e-01  +4.3269e-01  6.82e-02  3.04e-03  3.26e-02  6.95e-05  1.36e-02  8.69e-01  
  5  +3.4145e-01  +3.4544e-01  3.98e-03  1.71e-04  1.83e-03  6.54e-06  8.84e-04  9.41e-01  
  6  +3.4011e-01  +3.4015e-01  3.97e-05  1.71e-06  1.82e-05  6.57e-08  8.89e-06  9.90e-01  
  7  +3.4010e-01  +3.4010e-01  3.97e-07  1.71e-08  1.82e-07  6.57e-10  8.89e-08  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  3.97e-09  1.71e-10  1.82e-09  6.57e-12  8.89e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:12 PM: Optimal value: 3.401e-01
(CVXPY) Aug 31 04:45:12 PM: Compilation took 4.510e-03 seconds
(CVXPY) Aug 31 04:45:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:12 PM: Your problem has 35 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:12 PM: Finished problem compilation (took 2.506e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 35
  constraints   = 60
  nnz(P)        = 0
  nnz(A)        = 183
  cones (total) = 1
    : Nonnegative = 1,  numel = 60

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8213e-01  +2.6567e+01  2.61e+01  8.16e-01  5.23e+00  1.00e+00  1.13e+00   ------   
  1  +5.7426e-01  +5.1752e+00  4.60e+00  2.65e-01  2.52e+00  4.12e-03  5.01e-01  6.94e-01  
  2  +4.8679e-01  +1.4024e+00  9.16e-01  6.84e-02  7.55e-01  9.46e-03  1.81e-01  7.69e-01  
  3  +3.8437e-01  +9.1041e-01  5.26e-01  2.45e-02  2.74e-01  6.87e-03  7.84e-02  6.81e-01  
  4  +3.2317e-01  +4.4112e-01  1.18e-01  5.93e-03  6.41e-02  1.17e-03  2.51e-02  7.36e-01  
  5  +3.0200e-01  +3.1075e-01  8.75e-03  4.53e-04  4.84e-03  8.03e-05  2.31e-03  9.25e-01  
  6  +3.0023e-01  +3.0036e-01  1.32e-04  6.92e-06  7.38e-05  8.61e-07  3.64e-05  9.85e-01  
  7  +3.0020e-01  +3.0020e-01  2.34e-06  1.24e-07  1.32e-06  8.77e-09  7.00e-07  9.82e-01  
  8  +3.0020e-01  +3.0020e-01  2.33e-08  1.24e-09  1.32e-08  8.75e-11  7.01e-09  9.90e-01  
  9  +3.0020e-01  +3.0020e-01  2.33e-10  1.24e-11  1.32e-10  8.76e-13  7.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:12 PM: Optimal value: 3.002e-01
(CVXPY) Aug 31 04:45:12 PM: Compilation took 2.506e-03 seconds
(CVXPY) Aug 31 04:45:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:12 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:12 PM: Finished problem compilation (took 2.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 194
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8292e-01  +2.6514e+01  2.60e+01  8.19e-01  5.34e+00  1.00e+00  1.14e+00   ------   
  1  +5.7289e-01  +5.2316e+00  4.66e+00  2.75e-01  2.62e+00  4.05e-03  5.21e-01  6.84e-01  
  2  +4.8550e-01  +1.3607e+00  8.75e-01  6.77e-02  7.50e-01  1.03e-02  1.81e-01  7.97e-01  
  3  +3.8470e-01  +8.7661e-01  4.92e-01  2.35e-02  2.65e-01  7.22e-03  7.61e-02  6.63e-01  
  4  +3.1994e-01  +4.1908e-01  9.91e-02  5.00e-03  5.46e-02  9.35e-04  2.12e-02  7.81e-01  
  5  +3.0269e-01  +3.1382e-01  1.11e-02  5.81e-04  6.28e-03  8.85e-05  2.82e-03  8.74e-01  
  6  +3.0025e-01  +3.0044e-01  1.94e-04  1.03e-05  1.10e-04  1.25e-06  5.18e-05  9.90e-01  
  7  +3.0020e-01  +3.0021e-01  5.14e-06  2.78e-07  2.98e-06  1.70e-08  1.50e-06  9.72e-01  
  8  +3.0020e-01  +3.0020e-01  5.12e-08  2.77e-09  2.96e-08  1.69e-10  1.50e-08  9.90e-01  
  9  +3.0020e-01  +3.0020e-01  5.12e-10  2.77e-11  2.97e-10  1.70e-12  1.50e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 162.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:12 PM: Optimal value: 3.002e-01
(CVXPY) Aug 31 04:45:12 PM: Compilation took 2.992e-03 seconds
(CVXPY) Aug 31 04:45:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.7
  Our objective: 0.4

IF 
    (x0 = 0)                       <-- (term's our objective: 0.19999999999999996)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0) <-- (term's our objective: 0.19999999999999996)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.3986220359802246
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

