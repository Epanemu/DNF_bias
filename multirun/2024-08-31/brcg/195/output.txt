Command:
python test_script.py -s smallest_subclass -d 5 -n 50000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.03576
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 5.

Computed total variation: 0.04404
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:06 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:06 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:06 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:06 PM: Finished problem compilation (took 6.999e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 200011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.9962e-01  +5.0087e+03  5.01e+03  3.68e-01  1.22e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4642e-01  +7.1491e+02  7.14e+02  1.49e-01  6.20e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1139e-01  +1.7344e+02  1.73e+02  1.36e-01  5.62e+01  2.41e-05  2.33e-01  8.02e-02  
  4  +5.0054e-01  +7.3226e+00  6.82e+00  2.02e-02  8.18e+00  2.53e-06  1.88e-01  5.16e-01  
  5  +5.0000e-01  +9.0436e-01  4.04e-01  1.23e-03  5.11e-01  2.30e-05  1.54e-01  8.74e-01  
  6  +5.0000e-01  +5.5209e-01  5.21e-02  1.56e-04  6.50e-02  3.45e-06  1.94e-02  8.76e-01  
  7  +4.9999e-01  +5.4551e-01  4.55e-02  1.36e-04  5.68e-02  6.81e-06  6.07e-03  7.50e-01  
  8  +4.9968e-01  +5.6022e-01  6.05e-02  6.00e-05  2.51e-02  2.18e-04  2.19e-04  9.75e-01  
  9  +4.9710e-01  +5.5360e-01  5.65e-02  7.47e-06  3.13e-03  1.73e-03  2.43e-05  8.93e-01  
 10  +4.9172e-01  +5.3193e-01  4.02e-02  1.90e-06  7.95e-04  3.53e-03  6.16e-06  7.66e-01  
 11  +4.9104e-01  +5.0668e-01  1.56e-02  7.77e-07  3.25e-04  2.57e-04  2.72e-06  7.60e-01  
 12  +4.8725e-01  +4.8917e-01  1.91e-03  7.93e-08  3.32e-05  1.82e-05  3.10e-07  9.07e-01  
 13  +4.8657e-01  +4.8660e-01  3.05e-05  1.22e-09  5.12e-07  1.86e-07  4.98e-09  9.88e-01  
 14  +4.8656e-01  +4.8656e-01  3.05e-07  1.22e-11  5.12e-09  1.86e-09  4.98e-11  9.90e-01  
 15  +4.8656e-01  +4.8656e-01  3.08e-09  1.23e-13  5.15e-11  2.54e-11  6.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 211.2319ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:06 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:06 PM: Optimal value: 4.866e-01
(CVXPY) Aug 31 04:49:06 PM: Compilation took 6.999e-02 seconds
(CVXPY) Aug 31 04:49:06 PM: Solver (including time spent in interface) took 2.350e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4866
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:06 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:06 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:06 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:06 PM: Finished problem compilation (took 7.601e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 225292
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.12e+02  1.00e+00  1.00e+00   ------   
  1  +5.9961e-01  +5.0089e+03  5.01e+03  3.68e-01  1.24e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4640e-01  +7.1472e+02  7.14e+02  1.49e-01  6.30e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1138e-01  +1.7334e+02  1.73e+02  1.36e-01  5.70e+01  2.41e-05  2.33e-01  8.05e-02  
  4  +5.0053e-01  +7.2203e+00  6.72e+00  1.99e-02  8.19e+00  2.55e-06  1.87e-01  5.24e-01  
  5  +5.0002e-01  +1.2234e+00  7.23e-01  2.19e-03  9.27e-01  2.29e-05  1.64e-01  5.65e-01  
  6  +5.0002e-01  +8.7636e-01  3.76e-01  1.13e-03  4.77e-01  8.99e-06  9.32e-02  9.01e-01  
  7  +5.0000e-01  +5.9799e-01  9.80e-02  2.92e-04  1.24e-01  2.77e-06  2.75e-02  7.54e-01  
  8  +5.0000e-01  +6.0486e-01  1.05e-01  3.13e-04  1.33e-01  2.81e-06  2.15e-02  4.31e-01  
  9  +5.0001e-01  +6.1657e-01  1.17e-01  3.47e-04  1.47e-01  1.84e-06  1.30e-02  8.87e-01  
 10  +5.0001e-01  +6.0164e-01  1.02e-01  3.01e-04  1.27e-01  1.49e-06  6.98e-03  7.10e-01  
 11  +5.0001e-01  +5.8239e-01  8.24e-02  2.39e-04  1.01e-01  1.02e-06  3.40e-03  8.43e-01  
 12  +5.0000e-01  +5.7799e-01  7.80e-02  2.23e-04  9.45e-02  9.40e-07  2.64e-03  3.93e-01  
 13  +5.0000e-01  +5.6342e-01  6.34e-02  1.68e-04  7.14e-02  5.39e-07  1.29e-03  9.90e-01  
 14  +4.9996e-01  +5.6286e-01  6.29e-02  7.33e-06  3.12e-03  2.95e-05  2.26e-05  9.85e-01  
 15  +4.9986e-01  +5.6159e-01  6.17e-02  3.19e-06  1.36e-03  6.28e-05  9.77e-06  6.18e-01  
 16  +4.9935e-01  +5.5836e-01  5.90e-02  3.19e-06  1.36e-03  5.67e-05  9.76e-06  9.33e-03  
 17  +4.9782e-01  +5.4871e-01  5.09e-02  3.06e-06  1.30e-03  3.84e-05  9.40e-06  1.03e-01  
 18  +4.9610e-01  +5.3793e-01  4.18e-02  2.55e-06  1.09e-03  2.01e-05  7.85e-06  3.67e-01  
 19  +4.9554e-01  +5.3488e-01  3.93e-02  2.48e-06  1.06e-03  1.50e-05  7.81e-06  1.24e-01  
 20  +4.9535e-01  +5.3233e-01  3.70e-02  2.47e-06  1.05e-03  1.30e-05  7.81e-06  7.37e-03  
 21  +4.9275e-01  +5.1668e-01  2.39e-02  1.40e-06  5.95e-04  4.64e-06  4.34e-06  6.73e-01  
 22  +4.9279e-01  +5.1749e-01  2.47e-02  1.40e-06  5.95e-04  4.40e-06  4.32e-06  1.00e-01  
 23  +4.9236e-01  +5.1604e-01  2.37e-02  1.38e-06  5.87e-04  3.56e-06  4.31e-06  1.00e-01  
 24  +4.9224e-01  +5.1565e-01  2.34e-02  1.33e-06  5.65e-04  3.51e-06  4.10e-06  7.15e-02  
 25  +4.9034e-01  +5.0943e-01  1.91e-02  7.11e-07  3.02e-04  2.60e-06  2.07e-06  7.55e-01  
 26  +4.8918e-01  +5.0592e-01  1.67e-02  6.94e-07  2.95e-04  1.82e-06  2.07e-06  5.85e-02  
 27  +4.8921e-01  +5.0696e-01  1.77e-02  6.51e-07  2.77e-04  1.18e-06  1.90e-06  5.11e-01  
 28  +4.8766e-01  +5.0199e-01  1.43e-02  4.61e-07  1.96e-04  1.45e-07  1.34e-06  9.90e-01  
 29  +4.8435e-01  +4.9079e-01  6.44e-03  1.98e-07  8.39e-05  6.62e-08  5.80e-07  6.21e-01  
 30  +4.8193e-01  +4.8244e-01  5.08e-04  1.50e-08  6.36e-06  7.98e-09  4.43e-08  9.90e-01  
 31  +4.8170e-01  +4.8171e-01  5.16e-06  1.52e-10  6.46e-08  8.08e-11  4.50e-10  9.90e-01  
 32  +4.8170e-01  +4.8170e-01  5.16e-08  1.52e-12  6.46e-10  8.08e-13  4.50e-12  9.90e-01  
 33  +4.8170e-01  +4.8170e-01  5.18e-10  1.51e-14  6.47e-12  9.01e-15  4.99e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 554.9468ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:07 PM: Optimal value: 4.817e-01
(CVXPY) Aug 31 04:49:07 PM: Compilation took 7.601e-02 seconds
(CVXPY) Aug 31 04:49:07 PM: Solver (including time spent in interface) took 5.815e-01 seconds
Iteration: 2, Objective: 0.4817
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:07 PM: Your problem has 25031 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:07 PM: Finished problem compilation (took 8.565e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25031
  constraints   = 50031
  nnz(P)        = 0
  nnz(A)        = 248495
  cones (total) = 1
    : Nonnegative = 1,  numel = 50031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.14e+02  1.00e+00  1.00e+00   ------   
  1  +5.9960e-01  +5.0106e+03  5.01e+03  3.68e-01  1.26e+02  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4634e-01  +7.1427e+02  7.14e+02  1.50e-01  6.38e+01  9.85e-03  2.36e-01  7.77e-01  
  3  +5.1136e-01  +1.7318e+02  1.73e+02  1.36e-01  5.78e+01  2.42e-05  2.33e-01  8.09e-02  
  4  +5.0054e-01  +7.2492e+00  6.75e+00  2.00e-02  8.33e+00  2.55e-06  1.88e-01  5.23e-01  
  5  +5.0001e-01  +1.0770e+00  5.77e-01  1.75e-03  7.50e-01  2.35e-05  1.59e-01  7.00e-01  
  6  +5.0000e-01  +6.8645e-01  1.86e-01  5.59e-04  2.40e-01  6.85e-06  5.71e-02  7.07e-01  
  7  +5.0000e-01  +6.0068e-01  1.01e-01  3.01e-04  1.29e-01  3.38e-06  2.41e-02  7.96e-01  
  8  +5.0000e-01  +6.0792e-01  1.08e-01  3.23e-04  1.38e-01  3.12e-06  2.13e-02  3.32e-01  
  9  +5.0000e-01  +5.9077e-01  9.08e-02  2.69e-04  1.16e-01  3.84e-06  6.61e-03  9.44e-01  
 10  +4.9998e-01  +5.7423e-01  7.42e-02  1.63e-04  7.01e-02  1.73e-05  8.42e-04  9.90e-01  
 11  +4.9926e-01  +5.7259e-01  7.33e-02  9.28e-06  4.00e-03  4.85e-04  2.89e-05  9.66e-01  
 12  +4.9843e-01  +5.6603e-01  6.76e-02  4.98e-06  2.14e-03  7.14e-04  1.54e-05  5.46e-01  
 13  +4.9747e-01  +5.5603e-01  5.86e-02  3.73e-06  1.60e-03  5.46e-04  1.15e-05  4.32e-01  
 14  +4.9741e-01  +5.5156e-01  5.41e-02  3.47e-06  1.49e-03  2.74e-04  1.06e-05  4.24e-01  
 15  +4.9665e-01  +5.4663e-01  5.00e-02  3.02e-06  1.30e-03  2.01e-04  9.16e-06  3.17e-01  
 16  +4.9655e-01  +5.4567e-01  4.91e-02  2.95e-06  1.27e-03  1.70e-04  8.90e-06  1.42e-01  
 17  +4.9494e-01  +5.3551e-01  4.06e-02  2.11e-06  9.08e-04  1.99e-06  6.31e-06  9.28e-01  
 18  +4.9385e-01  +5.3144e-01  3.76e-02  1.73e-06  7.46e-04  1.90e-06  5.18e-06  2.25e-01  
 19  +4.9302e-01  +5.2896e-01  3.59e-02  1.71e-06  7.37e-04  1.71e-06  5.17e-06  1.33e-02  
 20  +4.8819e-01  +5.1109e-01  2.29e-02  8.63e-07  3.71e-04  9.75e-07  2.63e-06  6.25e-01  
 21  +4.8177e-01  +4.8806e-01  6.29e-03  2.14e-07  9.19e-05  1.48e-07  6.70e-07  8.43e-01  
 22  +4.7926e-01  +4.7971e-01  4.52e-04  1.47e-08  6.32e-06  7.72e-09  4.76e-08  9.54e-01  
 23  +4.7904e-01  +4.7905e-01  4.73e-06  1.53e-10  6.60e-08  7.89e-11  5.01e-10  9.90e-01  
 24  +4.7904e-01  +4.7904e-01  4.73e-08  1.53e-12  6.60e-10  7.89e-13  5.01e-12  9.90e-01  
 25  +4.7904e-01  +4.7904e-01  4.76e-10  1.55e-14  6.64e-12  1.00e-14  6.30e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 442.6863ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:08 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:08 PM: Optimal value: 4.790e-01
(CVXPY) Aug 31 04:49:08 PM: Compilation took 8.565e-02 seconds
(CVXPY) Aug 31 04:49:08 PM: Solver (including time spent in interface) took 4.676e-01 seconds
Iteration: 3, Objective: 0.4790
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:08 PM: Your problem has 25036 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:08 PM: Finished problem compilation (took 9.476e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25036
  constraints   = 50036
  nnz(P)        = 0
  nnz(A)        = 254796
  cones (total) = 1
    : Nonnegative = 1,  numel = 50036

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.9956e-01  +5.0108e+03  5.01e+03  3.68e-01  1.26e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4633e-01  +7.1412e+02  7.14e+02  1.50e-01  6.39e+01  9.85e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7325e+02  1.73e+02  1.36e-01  5.79e+01  2.42e-05  2.33e-01  8.09e-02  
  4  +5.0054e-01  +7.2604e+00  6.76e+00  2.00e-02  8.36e+00  2.55e-06  1.88e-01  5.23e-01  
  5  +5.0000e-01  +9.3284e-01  4.33e-01  1.31e-03  5.64e-01  2.40e-05  1.51e-01  9.05e-01  
  6  +5.0000e-01  +7.4145e-01  2.41e-01  7.27e-04  3.13e-01  1.29e-05  7.98e-02  5.42e-01  
  7  +5.0000e-01  +6.6026e-01  1.60e-01  4.81e-04  2.07e-01  8.43e-06  4.70e-02  5.01e-01  
  8  +5.0000e-01  +5.8569e-01  8.57e-02  2.56e-04  1.10e-01  4.57e-06  1.59e-02  8.91e-01  
  9  +5.0000e-01  +5.9407e-01  9.41e-02  2.80e-04  1.20e-01  7.57e-06  6.59e-03  8.07e-01  
 10  +4.9995e-01  +5.7577e-01  7.58e-02  1.53e-04  6.61e-02  4.02e-05  7.29e-04  9.90e-01  
 11  +4.9889e-01  +5.7355e-01  7.47e-02  1.24e-05  5.34e-03  7.17e-04  3.92e-05  9.46e-01  
 12  +4.9656e-01  +5.6228e-01  6.57e-02  4.15e-06  1.79e-03  1.63e-03  1.30e-05  7.20e-01  
 13  +4.9582e-01  +5.5532e-01  5.95e-02  3.53e-06  1.53e-03  1.35e-03  1.10e-05  2.49e-01  
 14  +4.9617e-01  +5.5290e-01  5.67e-02  3.38e-06  1.46e-03  8.86e-04  1.04e-05  3.01e-01  
 15  +4.9414e-01  +5.4269e-01  4.86e-02  2.41e-06  1.04e-03  7.93e-04  7.37e-06  3.50e-01  
 16  +4.9264e-01  +5.3615e-01  4.35e-02  1.94e-06  8.38e-04  6.98e-04  5.96e-06  2.43e-01  
 17  +4.9023e-01  +5.2064e-01  3.04e-02  1.34e-06  5.78e-04  2.83e-05  4.17e-06  7.83e-01  
 18  +4.8608e-01  +5.0519e-01  1.91e-02  7.52e-07  3.24e-04  1.50e-05  2.38e-06  5.02e-01  
 19  +4.8464e-01  +4.9997e-01  1.53e-02  5.78e-07  2.49e-04  1.19e-05  1.84e-06  2.42e-01  
 20  +4.8424e-01  +4.9871e-01  1.45e-02  5.53e-07  2.39e-04  9.33e-06  1.83e-06  1.05e-01  
 21  +4.8199e-01  +4.8984e-01  7.85e-03  2.83e-07  1.22e-04  1.32e-06  9.39e-07  8.66e-01  
 22  +4.8114e-01  +4.8723e-01  6.09e-03  2.10e-07  9.04e-05  8.87e-07  6.86e-07  4.21e-01  
 23  +4.7885e-01  +4.7950e-01  6.49e-04  2.20e-08  9.47e-06  1.08e-08  7.40e-08  9.89e-01  
 24  +4.7856e-01  +4.7857e-01  8.51e-06  2.88e-10  1.24e-07  1.31e-10  9.80e-10  9.88e-01  
 25  +4.7856e-01  +4.7856e-01  8.53e-08  2.88e-12  1.24e-09  1.32e-12  9.82e-12  9.90e-01  
 26  +4.7856e-01  +4.7856e-01  8.54e-10  2.88e-14  1.24e-11  1.38e-14  1.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 508.0862ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:08 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:08 PM: Optimal value: 4.786e-01
(CVXPY) Aug 31 04:49:08 PM: Compilation took 9.476e-02 seconds
(CVXPY) Aug 31 04:49:08 PM: Solver (including time spent in interface) took 5.337e-01 seconds
FULL MODEL:
  Accruacy: 0.52126
  Our objective: 0.04252000000000003

IF 
    (x1 = 1 AND x3 = 1 AND x4 = 1)                       <-- (term's our objective: 0.0038000000000000533)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.03680000000000005)
 OR (x1 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.001920000000000057)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.982301712036133
Best over terms:
  Our final objective: 0.03680000000000005
    Its accruacy: 0.5184
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.03680000000000005
  Highest accruacy: 0.5184
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

