Command:
python test_script.py -s smallest_subclass -d 8 -n 10 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 8.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:00 PM: Your problem has 22 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:00 PM: Finished problem compilation (took 5.498e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 22
  constraints   = 27
  nnz(P)        = 0
  nnz(A)        = 72
  cones (total) = 1
    : Nonnegative = 1,  numel = 27

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5901e-01  +6.0359e+00  5.58e+00  7.62e-01  2.63e+00  1.00e+00  1.27e+00   ------   
  1  +4.6046e-01  +1.2726e+00  8.12e-01  2.98e-01  1.20e+00  3.63e-03  6.21e-01  6.94e-01  
  2  +3.0600e-01  +4.9236e-01  1.86e-01  7.01e-02  3.16e-01  9.92e-03  2.10e-01  7.80e-01  
  3  +2.1740e-01  +2.6957e-01  5.22e-02  1.38e-02  7.00e-02  3.59e-03  5.75e-02  8.58e-01  
  4  +2.0058e-01  +2.0184e-01  1.26e-03  3.44e-04  1.74e-03  7.53e-05  1.52e-03  9.74e-01  
  5  +2.0020e-01  +2.0022e-01  1.26e-05  3.44e-06  1.74e-05  7.52e-07  1.52e-05  9.90e-01  
  6  +2.0020e-01  +2.0020e-01  1.26e-07  3.44e-08  1.74e-07  7.52e-09  1.52e-07  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  1.26e-09  3.44e-10  1.74e-09  7.52e-11  1.52e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:00 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:00 PM: Optimal value: 2.002e-01
(CVXPY) Aug 31 04:58:00 PM: Compilation took 5.498e-03 seconds
(CVXPY) Aug 31 04:58:00 PM: Solver (including time spent in interface) took 9.913e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:00 PM: Your problem has 32 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:00 PM: Finished problem compilation (took 2.179e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 37
  nnz(P)        = 0
  nnz(A)        = 101
  cones (total) = 1
    : Nonnegative = 1,  numel = 37

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.5506e-01  +6.4708e+00  6.12e+00  7.92e-01  2.72e+00  1.00e+00  1.33e+00   ------   
  1  +1.9770e-01  +1.0824e+00  8.85e-01  3.04e-01  1.14e+00  3.88e-03  5.92e-01  7.14e-01  
  2  +7.7179e-02  +2.4808e-01  1.71e-01  6.33e-02  2.68e-01  8.64e-03  1.74e-01  8.07e-01  
  3  +3.0716e-02  +1.2085e-01  9.01e-02  2.45e-02  1.22e-01  5.42e-03  8.26e-02  6.39e-01  
  4  +1.0775e-03  +4.0856e-03  3.01e-03  8.04e-04  4.05e-03  1.66e-04  2.91e-03  9.73e-01  
  5  +2.7856e-04  +4.5480e-04  1.76e-04  5.00e-05  2.45e-04  6.20e-06  1.83e-04  9.37e-01  
  6  +2.0684e-04  +2.1985e-04  1.30e-05  4.03e-06  1.81e-05  4.25e-07  1.85e-05  9.59e-01  
  7  +2.0008e-04  +2.0023e-04  1.52e-07  4.74e-08  2.12e-07  4.85e-09  2.25e-07  9.88e-01  
  8  +2.0000e-04  +2.0000e-04  1.52e-09  4.74e-10  2.12e-09  4.85e-11  2.25e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 111.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:00 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:00 PM: Optimal value: 2.000e-04
(CVXPY) Aug 31 04:58:00 PM: Compilation took 2.179e-03 seconds
(CVXPY) Aug 31 04:58:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:00 PM: Your problem has 34 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:00 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 39
  nnz(P)        = 0
  nnz(A)        = 107
  cones (total) = 1
    : Nonnegative = 1,  numel = 39

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.4339e-01  +6.4191e+00  6.08e+00  7.97e-01  2.73e+00  1.00e+00  1.32e+00   ------   
  1  +1.4380e-01  +1.0479e+00  9.04e-01  3.08e-01  1.13e+00  4.02e-03  5.83e-01  7.03e-01  
  2  +2.6226e-02  +1.0766e-01  8.14e-02  3.08e-02  1.27e-01  9.13e-03  8.33e-02  9.79e-01  
  3  +1.4267e-03  +5.0767e-03  3.65e-03  1.39e-03  5.83e-03  2.90e-04  4.00e-03  9.62e-01  
  4  +3.3441e-04  +6.0077e-04  2.66e-04  1.05e-04  4.34e-04  1.80e-05  3.03e-04  9.25e-01  
  5  +2.1164e-04  +2.5941e-04  4.78e-05  1.56e-05  6.90e-05  1.60e-06  6.84e-05  9.90e-01  
  6  +2.0057e-04  +2.0183e-04  1.25e-06  4.09e-07  1.81e-06  2.97e-08  1.94e-06  9.72e-01  
  7  +2.0001e-04  +2.0002e-04  1.25e-08  4.08e-09  1.81e-08  2.97e-10  1.95e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  1.25e-10  4.08e-11  1.81e-10  2.97e-12  1.95e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 115.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:00 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:00 PM: Optimal value: 2.000e-04
(CVXPY) Aug 31 04:58:00 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 31 04:58:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x3 = 1 AND x4 = 1 AND x7 = 1) <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9088873863220215
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 7
  Shortest hamming distance: 7
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

