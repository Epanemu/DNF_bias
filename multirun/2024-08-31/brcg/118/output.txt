Command:
python test_script.py -s smallest_subclass -d 3 -n 50000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15380000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 3.

Computed total variation: 0.15380000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:02 PM: Your problem has 25007 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:02 PM: Finished problem compilation (took 5.289e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25007
  constraints   = 50007
  nnz(P)        = 0
  nnz(A)        = 150007
  cones (total) = 1
    : Nonnegative = 1,  numel = 50007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.76e+02  1.00e+00  1.00e+00   ------   
  1  +6.2016e-01  +4.6339e+03  4.63e+03  3.09e-01  9.19e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5598e-01  +7.9405e+02  7.93e+02  1.40e-01  4.97e+01  6.67e-03  2.21e-01  6.61e-01  
  3  +5.1052e-01  +1.4925e+02  1.49e+02  1.26e-01  4.45e+01  1.26e-05  2.20e-01  4.41e-02  
  4  +5.0007e-01  +1.7448e+00  1.24e+00  3.71e-03  1.31e+00  1.00e-06  1.63e-01  9.90e-01  
  5  +5.0001e-01  +7.3928e-01  2.39e-01  7.13e-04  2.52e-01  4.34e-07  5.68e-02  7.35e-01  
  6  +4.9997e-01  +6.9772e-01  1.98e-01  5.76e-04  2.04e-01  1.62e-06  8.51e-03  9.13e-01  
  7  +4.9659e-01  +6.9393e-01  1.97e-01  3.80e-05  1.35e-02  1.13e-04  1.13e-04  9.87e-01  
  8  +4.8276e-01  +6.0756e-01  1.25e-01  6.31e-06  2.24e-03  3.54e-04  1.89e-05  8.37e-01  
  9  +4.6399e-01  +5.0227e-01  3.83e-02  2.00e-06  7.10e-04  5.22e-06  6.78e-06  8.17e-01  
 10  +4.5509e-01  +4.6003e-01  4.94e-03  2.27e-07  8.06e-05  4.62e-07  8.73e-07  8.88e-01  
 11  +4.5329e-01  +4.5339e-01  9.81e-05  4.12e-09  1.46e-06  5.85e-09  1.74e-08  9.87e-01  
 12  +4.5326e-01  +4.5326e-01  9.81e-07  4.11e-11  1.46e-08  5.85e-11  1.74e-10  9.90e-01  
 13  +4.5326e-01  +4.5326e-01  9.87e-09  4.14e-13  1.47e-10  7.67e-13  2.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 152.8ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:02 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:02 PM: Optimal value: 4.533e-01
(CVXPY) Aug 31 04:46:02 PM: Compilation took 5.289e-02 seconds
(CVXPY) Aug 31 04:46:02 PM: Solver (including time spent in interface) took 1.713e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4533
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:02 PM: Your problem has 25010 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:02 PM: Finished problem compilation (took 5.429e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25010
  constraints   = 50010
  nnz(P)        = 0
  nnz(A)        = 170953
  cones (total) = 1
    : Nonnegative = 1,  numel = 50010

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.85e+02  1.00e+00  1.00e+00   ------   
  1  +6.2013e-01  +4.6344e+03  4.63e+03  3.09e-01  9.63e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5595e-01  +7.9370e+02  7.93e+02  1.40e-01  5.21e+01  6.67e-03  2.21e-01  6.62e-01  
  3  +5.1049e-01  +1.4893e+02  1.48e+02  1.26e-01  4.66e+01  1.26e-05  2.20e-01  4.44e-02  
  4  +5.0024e-01  +4.2269e+00  3.73e+00  1.11e-02  4.03e+00  1.26e-06  1.97e-01  4.00e-01  
  5  +5.0005e-01  +1.6111e+00  1.11e+00  3.31e-03  1.22e+00  8.44e-07  1.56e-01  3.22e-01  
  6  +5.0002e-01  +1.0590e+00  5.59e-01  1.67e-03  6.15e-01  4.92e-07  9.57e-02  4.69e-01  
  7  +5.0000e-01  +7.6910e-01  2.69e-01  8.01e-04  2.96e-01  3.66e-07  3.60e-02  6.58e-01  
  8  +4.9991e-01  +7.5764e-01  2.58e-01  6.38e-04  2.37e-01  2.38e-06  3.57e-03  9.90e-01  
  9  +4.9636e-01  +7.2869e-01  2.32e-01  3.40e-05  1.27e-02  7.83e-05  9.37e-05  9.74e-01  
 10  +4.9431e-01  +7.1736e-01  2.23e-01  2.20e-05  8.23e-03  1.07e-04  6.01e-05  3.92e-01  
 11  +4.9462e-01  +7.1175e-01  2.17e-01  2.16e-05  8.08e-03  9.07e-05  5.89e-05  1.25e-01  
 12  +4.8977e-01  +6.7895e-01  1.89e-01  1.08e-05  4.03e-03  1.12e-04  2.92e-05  6.67e-01  
 13  +4.8962e-01  +6.7668e-01  1.87e-01  1.06e-05  3.96e-03  1.02e-04  2.88e-05  8.31e-02  
 14  +4.9016e-01  +6.7178e-01  1.82e-01  1.03e-05  3.85e-03  5.98e-05  2.82e-05  3.42e-01  
 15  +4.8282e-01  +6.3412e-01  1.51e-01  6.98e-06  2.60e-03  3.99e-05  1.93e-05  5.38e-01  
 16  +4.7131e-01  +5.8954e-01  1.18e-01  4.74e-06  1.76e-03  4.49e-07  1.34e-05  9.08e-01  
 17  +4.4272e-01  +4.8348e-01  4.08e-02  1.39e-06  5.14e-04  4.15e-07  4.18e-06  9.24e-01  
 18  +4.2673e-01  +4.3364e-01  6.91e-03  2.21e-07  8.19e-05  7.66e-08  6.95e-07  9.30e-01  
 19  +4.2324e-01  +4.2332e-01  7.75e-05  2.45e-09  9.07e-07  7.69e-10  7.77e-09  9.89e-01  
 20  +4.2320e-01  +4.2320e-01  7.75e-07  2.44e-11  9.07e-09  7.69e-12  7.77e-11  9.90e-01  
 21  +4.2320e-01  +4.2320e-01  7.76e-09  2.45e-13  9.07e-11  8.03e-14  8.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 298.0997ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:02 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:02 PM: Optimal value: 4.232e-01
(CVXPY) Aug 31 04:46:02 PM: Compilation took 5.429e-02 seconds
(CVXPY) Aug 31 04:46:02 PM: Solver (including time spent in interface) took 3.171e-01 seconds
FULL MODEL:
  Accruacy: 0.5769
  Our objective: 0.15380000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.15380000000000002)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4611499309539795
Best over terms:
  Our final objective: 0.15380000000000002
    Its accruacy: 0.5769
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15380000000000002
  Highest accruacy: 0.5769
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

