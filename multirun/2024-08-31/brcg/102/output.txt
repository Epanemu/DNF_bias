Command:
python test_script.py -s smallest_subclass -d 3 -n 1000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.218
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 3.

Computed total variation: 0.218
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:38 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:38 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 3007
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +5.0088e+02  5.00e+02  9.50e-01  2.43e+01  1.00e+00  1.00e+00   ------   
  1  +6.1952e-01  +9.3125e+01  9.25e+01  2.96e-01  1.25e+01  4.25e-03  4.37e-01  6.94e-01  
  2  +5.5389e-01  +1.5915e+01  1.54e+01  1.20e-01  5.99e+00  6.80e-03  2.15e-01  6.81e-01  
  3  +5.0129e-01  +1.6805e+00  1.18e+00  2.45e-02  1.17e+00  8.35e-04  2.02e-01  3.22e-01  
  4  +4.9986e-01  +7.4036e-01  2.40e-01  4.98e-03  2.45e-01  2.68e-04  4.29e-02  8.45e-01  
  5  +4.8055e-01  +8.2478e-01  3.44e-01  1.02e-03  5.18e-02  4.79e-03  2.97e-03  9.61e-01  
  6  +4.5572e-01  +5.7673e-01  1.21e-01  3.41e-04  1.71e-02  4.54e-05  1.12e-03  7.60e-01  
  7  +4.3334e-01  +4.4870e-01  1.54e-02  3.94e-05  1.96e-03  2.92e-06  1.43e-04  8.94e-01  
  8  +4.2889e-01  +4.3140e-01  2.51e-03  5.52e-06  2.75e-04  8.89e-07  2.36e-05  9.44e-01  
  9  +4.2811e-01  +4.2815e-01  3.50e-05  7.37e-08  3.68e-06  1.27e-08  3.30e-07  9.87e-01  
 10  +4.2810e-01  +4.2810e-01  3.50e-07  7.36e-10  3.67e-08  1.27e-10  3.30e-09  9.90e-01  
 11  +4.2810e-01  +4.2810e-01  3.50e-09  7.36e-12  3.67e-10  1.28e-12  3.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0322ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:38 PM: Optimal value: 4.281e-01
(CVXPY) Aug 31 04:45:38 PM: Compilation took 5.001e-03 seconds
(CVXPY) Aug 31 04:45:38 PM: Solver (including time spent in interface) took 3.018e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:38 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:38 PM: Finished problem compilation (took 5.754e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 3678
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0141e+02  5.01e+02  9.51e-01  2.64e+01  1.00e+00  1.02e+00   ------   
  1  +6.1761e-01  +9.4026e+01  9.34e+01  3.03e-01  1.37e+01  4.21e-03  4.54e-01  6.88e-01  
  2  +5.5238e-01  +1.5654e+01  1.51e+01  1.19e-01  6.37e+00  7.21e-03  2.18e-01  6.98e-01  
  3  +5.0207e-01  +1.9926e+00  1.49e+00  3.13e-02  1.59e+00  1.13e-03  2.05e-01  3.03e-01  
  4  +5.0021e-01  +8.9231e-01  3.92e-01  8.28e-03  4.34e-01  3.97e-04  6.20e-02  7.30e-01  
  5  +4.9727e-01  +9.0806e-01  4.11e-01  5.08e-03  2.73e-01  1.23e-03  1.66e-02  7.74e-01  
  6  +4.7515e-01  +7.6832e-01  2.93e-01  7.39e-04  4.03e-02  5.84e-03  2.03e-03  8.80e-01  
  7  +4.8002e-01  +7.6895e-01  2.89e-01  6.92e-04  3.79e-02  4.39e-03  1.87e-03  3.35e-01  
  8  +4.7807e-01  +7.6209e-01  2.84e-01  6.50e-04  3.55e-02  4.25e-03  1.75e-03  1.01e-01  
  9  +4.7339e-01  +7.4744e-01  2.74e-01  5.79e-04  3.16e-02  3.63e-03  1.56e-03  2.37e-01  
 10  +4.4333e-01  +6.0695e-01  1.64e-01  2.91e-04  1.57e-02  1.33e-03  8.32e-04  6.37e-01  
 11  +4.2921e-01  +5.4654e-01  1.17e-01  2.05e-04  1.10e-02  8.51e-04  6.13e-04  3.08e-01  
 12  +4.0491e-01  +4.4273e-01  3.78e-02  6.64e-05  3.54e-03  7.79e-06  2.17e-04  9.58e-01  
 13  +3.9179e-01  +3.9334e-01  1.55e-03  2.71e-06  1.44e-04  8.09e-07  9.44e-06  9.90e-01  
 14  +3.9111e-01  +3.9112e-01  1.61e-05  2.80e-08  1.49e-06  8.34e-09  9.86e-08  9.90e-01  
 15  +3.9110e-01  +3.9110e-01  1.61e-07  2.80e-10  1.49e-08  8.34e-11  9.86e-10  9.90e-01  
 16  +3.9110e-01  +3.9110e-01  1.61e-09  2.80e-12  1.49e-10  8.34e-13  9.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7745ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:38 PM: Optimal value: 3.911e-01
(CVXPY) Aug 31 04:45:38 PM: Compilation took 5.754e-03 seconds
(CVXPY) Aug 31 04:45:38 PM: Solver (including time spent in interface) took 2.936e-03 seconds
FULL MODEL:
  Accruacy: 0.609
  Our objective: 0.218

IF 
    (x1 = 0 AND x2 = 0) <-- (term's our objective: 0.218)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.887009859085083
Best over terms:
  Our final objective: 0.218
    Its accruacy: 0.609
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.218
  Highest accruacy: 0.609
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

