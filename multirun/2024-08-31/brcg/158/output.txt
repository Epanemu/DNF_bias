Command:
python test_script.py -s smallest_subclass -d 4 -n 50000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0768
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.07752
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:28 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:28 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:28 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:28 PM: Finished problem compilation (took 6.705e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  1.93e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5118e-01  +7.5402e+02  7.53e+02  1.44e-01  5.58e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1149e-01  +1.6847e+02  1.68e+02  1.31e-01  5.06e+01  1.85e-05  2.26e-01  5.77e-02  
  4  +5.0022e-01  +3.2731e+00  2.77e+00  8.28e-03  3.16e+00  1.57e-06  1.70e-01  7.87e-01  
  5  +5.0002e-01  +8.9960e-01  4.00e-01  1.21e-03  4.66e-01  9.81e-06  9.84e-02  9.90e-01  
  6  +5.0000e-01  +5.6585e-01  6.58e-02  1.97e-04  7.62e-02  3.25e-06  1.61e-02  8.49e-01  
  7  +4.9983e-01  +7.3029e-01  2.30e-01  3.03e-04  1.17e-01  1.45e-04  1.11e-03  9.70e-01  
  8  +4.9898e-01  +7.1162e-01  2.13e-01  6.28e-05  2.44e-02  7.13e-04  1.97e-04  8.31e-01  
  9  +4.9522e-01  +5.8625e-01  9.10e-02  5.92e-06  2.30e-03  2.49e-03  1.80e-05  9.90e-01  
 10  +4.8887e-01  +5.3394e-01  4.51e-02  2.67e-06  1.04e-03  3.22e-04  8.39e-06  7.98e-01  
 11  +4.8038e-01  +4.9158e-01  1.12e-02  5.73e-07  2.22e-04  4.61e-05  1.91e-06  8.11e-01  
 12  +4.7735e-01  +4.7877e-01  1.43e-03  6.59e-08  2.55e-05  4.67e-06  2.38e-07  8.95e-01  
 13  +4.7681e-01  +4.7689e-01  8.08e-05  3.28e-09  1.27e-06  1.45e-07  1.34e-08  9.69e-01  
 14  +4.7678e-01  +4.7678e-01  8.11e-07  3.29e-11  1.27e-08  1.45e-09  1.35e-10  9.90e-01  
 15  +4.7678e-01  +4.7678e-01  8.11e-09  3.29e-13  1.27e-10  1.45e-11  1.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 216.6024ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:29 PM: Optimal value: 4.768e-01
(CVXPY) Aug 31 04:47:29 PM: Compilation took 6.705e-02 seconds
(CVXPY) Aug 31 04:47:29 PM: Solver (including time spent in interface) took 2.373e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4768
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:29 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:29 PM: Finished problem compilation (took 8.210e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 228871
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  2.09e+02  1.00e+00  1.00e+00   ------   
  1  +6.0818e-01  +4.8447e+03  4.84e+03  3.42e-01  1.16e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5110e-01  +7.5326e+02  7.53e+02  1.44e-01  6.03e+01  8.23e-03  2.28e-01  7.24e-01  
  3  +5.1146e-01  +1.6821e+02  1.68e+02  1.31e-01  5.47e+01  1.85e-05  2.26e-01  5.82e-02  
  4  +5.0020e-01  +3.0442e+00  2.54e+00  7.61e-03  3.14e+00  1.60e-06  1.66e-01  8.47e-01  
  5  +5.0002e-01  +8.9915e-01  3.99e-01  1.21e-03  5.03e-01  8.56e-06  8.72e-02  9.90e-01  
  6  +5.0001e-01  +7.5148e-01  2.51e-01  7.56e-04  3.16e-01  5.57e-06  5.08e-02  5.83e-01  
  7  +5.0000e-01  +5.9894e-01  9.89e-02  2.96e-04  1.24e-01  4.67e-06  1.15e-02  8.35e-01  
  8  +5.0000e-01  +6.0421e-01  1.04e-01  3.11e-04  1.30e-01  6.40e-06  7.75e-03  4.25e-01  
  9  +5.0000e-01  +6.1564e-01  1.16e-01  3.35e-04  1.40e-01  1.00e-05  3.77e-03  7.96e-01  
 10  +5.0000e-01  +6.1458e-01  1.15e-01  3.27e-04  1.37e-01  9.53e-06  3.22e-03  3.00e-01  
 11  +4.9998e-01  +6.0825e-01  1.08e-01  2.01e-04  8.41e-02  2.46e-05  8.16e-04  9.90e-01  
 12  +4.9956e-01  +6.0753e-01  1.08e-01  1.99e-05  8.36e-03  3.41e-04  5.79e-05  9.29e-01  
 13  +4.9906e-01  +6.0161e-01  1.03e-01  1.13e-05  4.74e-03  4.57e-04  3.24e-05  6.06e-01  
 14  +4.9839e-01  +5.9569e-01  9.73e-02  7.95e-06  3.34e-03  5.06e-04  2.26e-05  4.27e-01  
 15  +4.9824e-01  +5.9422e-01  9.60e-02  6.94e-06  2.91e-03  4.37e-04  1.96e-05  3.35e-01  
 16  +4.9802e-01  +5.9281e-01  9.48e-02  6.85e-06  2.88e-03  3.80e-04  1.94e-05  1.14e-01  
 17  +4.9806e-01  +5.9272e-01  9.47e-02  6.82e-06  2.86e-03  3.59e-04  1.93e-05  5.96e-02  
 18  +4.9774e-01  +5.9102e-01  9.33e-02  6.11e-06  2.57e-03  3.44e-04  1.72e-05  2.03e-01  
 19  +4.9712e-01  +5.8746e-01  9.03e-02  4.93e-06  2.07e-03  2.17e-04  1.39e-05  5.81e-01  
 20  +4.9538e-01  +5.7852e-01  8.31e-02  4.33e-06  1.82e-03  1.12e-04  1.22e-05  4.88e-01  
 21  +4.9406e-01  +5.7351e-01  7.95e-02  3.87e-06  1.63e-03  1.01e-04  1.09e-05  1.80e-01  
 22  +4.9030e-01  +5.5942e-01  6.91e-02  2.98e-06  1.25e-03  6.67e-05  8.49e-06  4.30e-01  
 23  +4.8781e-01  +5.5049e-01  6.27e-02  2.55e-06  1.07e-03  4.75e-05  7.30e-06  3.04e-01  
 24  +4.8744e-01  +5.4937e-01  6.19e-02  2.54e-06  1.07e-03  4.55e-05  7.29e-06  1.50e-02  
 25  +4.8104e-01  +5.2715e-01  4.61e-02  1.70e-06  7.12e-04  2.30e-05  4.94e-06  5.10e-01  
 26  +4.6677e-01  +4.7862e-01  1.19e-02  3.79e-07  1.59e-04  2.56e-07  1.14e-06  9.25e-01  
 27  +4.6179e-01  +4.6271e-01  9.26e-04  2.86e-08  1.20e-05  1.68e-08  8.77e-08  9.28e-01  
 28  +4.6135e-01  +4.6136e-01  1.33e-05  4.10e-10  1.72e-07  2.15e-10  1.27e-09  9.89e-01  
 29  +4.6134e-01  +4.6134e-01  1.33e-07  4.10e-12  1.72e-09  2.15e-12  1.27e-11  9.90e-01  
 30  +4.6134e-01  +4.6134e-01  1.33e-09  4.10e-14  1.72e-11  2.26e-14  1.34e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 518.48ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:29 PM: Optimal value: 4.613e-01
(CVXPY) Aug 31 04:47:29 PM: Compilation took 8.210e-02 seconds
(CVXPY) Aug 31 04:47:29 PM: Solver (including time spent in interface) took 5.425e-01 seconds
FULL MODEL:
  Accruacy: 0.53876
  Our objective: 0.07751999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.07751999999999999)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.773360252380371
Best over terms:
  Our final objective: 0.07751999999999999
    Its accruacy: 0.53876
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.07751999999999999
  Highest accruacy: 0.53876
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

