Command:
python test_script.py -s smallest_subclass -d 5 -n 5000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0388
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.09280000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:33 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:33 PM: Finished problem compilation (took 8.526e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5007e+03  2.50e+03  9.78e-01  6.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.9956e-01  +5.0122e+02  5.01e+02  3.62e-01  3.80e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4614e-01  +7.1646e+01  7.11e+01  1.41e-01  1.85e+01  9.85e-03  2.35e-01  7.79e-01  
  3  +5.1040e-01  +1.6767e+01  1.63e+01  1.01e-01  1.29e+01  2.29e-05  2.31e-01  9.63e-02  
  4  +5.0009e-01  +9.3007e-01  4.30e-01  4.11e-03  5.36e-01  6.28e-06  1.26e-01  9.90e-01  
  5  +5.0002e-01  +5.5427e-01  5.43e-02  5.15e-04  6.76e-02  7.16e-07  1.97e-02  8.50e-01  
  6  +4.9999e-01  +5.4417e-01  4.42e-02  4.15e-04  5.44e-02  1.14e-06  6.76e-03  7.34e-01  
  7  +4.9899e-01  +5.5071e-01  5.17e-02  8.52e-05  1.13e-02  2.60e-05  2.85e-04  9.78e-01  
  8  +4.9591e-01  +5.3075e-01  3.48e-02  1.98e-05  2.62e-03  6.14e-05  6.49e-05  7.78e-01  
  9  +4.9132e-01  +5.0131e-01  9.99e-03  4.84e-06  6.39e-04  6.56e-07  1.74e-05  8.75e-01  
 10  +4.8872e-01  +4.9106e-01  2.34e-03  9.82e-07  1.30e-04  1.53e-07  3.94e-06  8.32e-01  
 11  +4.8793e-01  +4.8802e-01  8.84e-05  3.58e-08  4.73e-06  7.32e-09  1.49e-07  9.90e-01  
 12  +4.8790e-01  +4.8790e-01  8.86e-07  3.58e-10  4.74e-08  7.33e-11  1.49e-09  9.90e-01  
 13  +4.8790e-01  +4.8790e-01  8.86e-09  3.58e-12  4.74e-10  7.48e-13  1.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.7105ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:33 PM: Optimal value: 4.879e-01
(CVXPY) Aug 31 04:48:33 PM: Compilation took 8.526e-03 seconds
(CVXPY) Aug 31 04:48:33 PM: Solver (including time spent in interface) took 1.933e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4879
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:33 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:33 PM: Finished problem compilation (took 7.033e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 23358
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.78e-01  6.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.9938e-01  +5.0151e+02  5.01e+02  3.62e-01  3.91e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4589e-01  +7.1398e+01  7.09e+01  1.41e-01  1.90e+01  9.90e-03  2.35e-01  7.81e-01  
  3  +5.1028e-01  +1.6648e+01  1.61e+01  1.01e-01  1.32e+01  2.29e-05  2.31e-01  9.95e-02  
  4  +5.0034e-01  +1.3317e+00  8.31e-01  7.95e-03  1.06e+00  6.96e-06  1.59e-01  6.62e-01  
  5  +5.0011e-01  +7.9044e-01  2.90e-01  2.76e-03  3.72e-01  2.57e-06  7.73e-02  5.39e-01  
  6  +5.0009e-01  +6.7081e-01  1.71e-01  1.61e-03  2.18e-01  1.18e-06  3.50e-02  9.90e-01  
  7  +5.0004e-01  +6.2321e-01  1.23e-01  1.14e-03  1.54e-01  1.41e-06  1.43e-02  6.27e-01  
  8  +4.9926e-01  +5.7425e-01  7.50e-02  1.57e-04  2.14e-02  1.80e-05  5.17e-04  9.82e-01  
  9  +4.9636e-01  +5.5467e-01  5.83e-02  4.24e-05  5.77e-03  4.62e-05  1.34e-04  7.53e-01  
 10  +4.9450e-01  +5.4455e-01  5.01e-02  3.19e-05  4.34e-03  3.95e-05  1.01e-04  3.01e-01  
 11  +4.9383e-01  +5.4096e-01  4.71e-02  3.11e-05  4.23e-03  2.87e-05  9.98e-05  1.64e-01  
 12  +4.9329e-01  +5.4018e-01  4.69e-02  2.79e-05  3.79e-03  2.27e-05  8.88e-05  3.46e-01  
 13  +4.9208e-01  +5.3732e-01  4.52e-02  2.16e-05  2.93e-03  9.34e-06  6.74e-05  7.95e-01  
 14  +4.9157e-01  +5.3497e-01  4.34e-02  2.16e-05  2.94e-03  8.36e-06  6.72e-05  3.99e-02  
 15  +4.8562e-01  +5.0601e-01  2.04e-02  7.99e-06  1.09e-03  3.01e-06  2.43e-05  8.83e-01  
 16  +4.8573e-01  +5.0679e-01  2.11e-02  7.55e-06  1.03e-03  2.96e-06  2.36e-05  3.37e-01  
 17  +4.8542e-01  +5.0571e-01  2.03e-02  7.01e-06  9.54e-04  2.87e-06  2.17e-05  2.18e-01  
 18  +4.8436e-01  +4.9953e-01  1.52e-02  5.36e-06  7.29e-04  2.02e-06  1.60e-05  9.90e-01  
 19  +4.8193e-01  +4.9245e-01  1.05e-02  3.52e-06  4.78e-04  1.35e-06  1.05e-05  5.25e-01  
 20  +4.7784e-01  +4.7969e-01  1.85e-03  5.45e-07  7.40e-05  2.46e-07  1.63e-06  8.98e-01  
 21  +4.7711e-01  +4.7713e-01  1.94e-05  5.70e-09  7.74e-07  2.56e-09  1.71e-08  9.90e-01  
 22  +4.7710e-01  +4.7710e-01  1.94e-07  5.70e-11  7.74e-09  2.56e-11  1.71e-10  9.90e-01  
 23  +4.7710e-01  +4.7710e-01  1.94e-09  5.70e-13  7.75e-11  2.58e-13  1.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.1556ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:33 PM: Optimal value: 4.771e-01
(CVXPY) Aug 31 04:48:33 PM: Compilation took 7.033e-03 seconds
(CVXPY) Aug 31 04:48:33 PM: Solver (including time spent in interface) took 3.633e-02 seconds
Iteration: 2, Objective: 0.4771
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:33 PM: Your problem has 2531 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:33 PM: Finished problem compilation (took 9.449e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2531
  constraints   = 5031
  nnz(P)        = 0
  nnz(A)        = 25586
  cones (total) = 1
    : Nonnegative = 1,  numel = 5031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5014e+03  2.50e+03  9.79e-01  6.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.9915e-01  +5.0191e+02  5.01e+02  3.63e-01  3.95e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4567e-01  +7.1192e+01  7.06e+01  1.41e-01  1.91e+01  9.95e-03  2.35e-01  7.84e-01  
  3  +5.1022e-01  +1.6594e+01  1.61e+01  1.01e-01  1.32e+01  2.31e-05  2.31e-01  1.02e-01  
  4  +5.0031e-01  +1.2869e+00  7.87e-01  7.54e-03  1.02e+00  7.02e-06  1.55e-01  6.98e-01  
  5  +5.0009e-01  +7.6203e-01  2.62e-01  2.50e-03  3.40e-01  2.62e-06  6.72e-02  6.00e-01  
  6  +5.0011e-01  +7.8443e-01  2.84e-01  2.71e-03  3.68e-01  2.66e-06  6.45e-02  2.00e-01  
  7  +5.0006e-01  +7.2682e-01  2.27e-01  2.15e-03  2.92e-01  2.70e-06  3.78e-02  4.61e-01  
  8  +4.9992e-01  +7.0620e-01  2.06e-01  1.70e-03  2.31e-01  5.37e-06  1.06e-02  8.74e-01  
  9  +4.9751e-01  +6.6273e-01  1.65e-01  2.22e-04  3.05e-02  5.30e-05  7.31e-04  9.38e-01  
 10  +4.9704e-01  +6.3737e-01  1.40e-01  1.69e-04  2.33e-02  2.94e-05  5.57e-04  5.40e-01  
 11  +4.9515e-01  +6.1741e-01  1.22e-01  1.17e-04  1.60e-02  2.84e-05  3.83e-04  3.89e-01  
 12  +4.9384e-01  +6.0211e-01  1.08e-01  9.04e-05  1.24e-02  2.13e-05  2.92e-04  4.38e-01  
 13  +4.9265e-01  +5.9147e-01  9.88e-02  7.36e-05  1.01e-02  1.78e-05  2.32e-04  3.57e-01  
 14  +4.9195e-01  +5.8103e-01  8.91e-02  5.14e-05  7.07e-03  6.25e-06  1.59e-04  9.90e-01  
 15  +4.9132e-01  +5.7845e-01  8.71e-02  4.62e-05  6.36e-03  6.53e-06  1.43e-04  1.93e-01  
 16  +4.8844e-01  +5.6383e-01  7.54e-02  4.21e-05  5.79e-03  5.30e-06  1.32e-04  5.34e-01  
 17  +4.8130e-01  +5.3400e-01  5.27e-02  2.17e-05  2.98e-03  4.69e-06  6.90e-05  5.46e-01  
 18  +4.7452e-01  +5.0122e-01  2.67e-02  1.05e-05  1.44e-03  2.70e-06  3.45e-05  9.24e-01  
 19  +4.7247e-01  +4.9281e-01  2.03e-02  7.52e-06  1.03e-03  2.44e-06  2.47e-05  9.13e-01  
 20  +4.6763e-01  +4.7515e-01  7.51e-03  2.65e-06  3.64e-04  9.01e-07  8.99e-06  6.56e-01  
 21  +4.6754e-01  +4.7469e-01  7.16e-03  2.54e-06  3.48e-04  8.74e-07  8.61e-06  2.36e-01  
 22  +4.6499e-01  +4.6573e-01  7.40e-04  2.56e-07  3.52e-05  8.80e-08  8.89e-07  9.01e-01  
 23  +4.6470e-01  +4.6471e-01  8.02e-06  2.78e-09  3.81e-07  9.50e-10  9.65e-09  9.89e-01  
 24  +4.6470e-01  +4.6470e-01  8.04e-08  2.78e-11  3.82e-09  9.52e-12  9.67e-11  9.90e-01  
 25  +4.6470e-01  +4.6470e-01  8.04e-10  2.78e-13  3.82e-11  9.57e-14  9.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.0795ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:33 PM: Optimal value: 4.647e-01
(CVXPY) Aug 31 04:48:33 PM: Compilation took 9.449e-03 seconds
(CVXPY) Aug 31 04:48:33 PM: Solver (including time spent in interface) took 4.198e-02 seconds
Iteration: 3, Objective: 0.4647
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:33 PM: Your problem has 2541 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:33 PM: Finished problem compilation (took 8.155e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2541
  constraints   = 5041
  nnz(P)        = 0
  nnz(A)        = 27552
  cones (total) = 1
    : Nonnegative = 1,  numel = 5041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5011e+03  2.50e+03  9.79e-01  6.84e+01  1.00e+00  1.00e+00   ------   
  1  +5.9902e-01  +5.0207e+02  5.01e+02  3.64e-01  3.98e+01  3.99e-03  5.05e-01  6.44e-01  
  2  +5.4546e-01  +7.0966e+01  7.04e+01  1.41e-01  1.91e+01  9.99e-03  2.35e-01  7.86e-01  
  3  +5.1016e-01  +1.6527e+01  1.60e+01  1.00e-01  1.33e+01  2.31e-05  2.30e-01  1.04e-01  
  4  +5.0031e-01  +1.2924e+00  7.92e-01  7.61e-03  1.03e+00  7.10e-06  1.54e-01  7.02e-01  
  5  +5.0012e-01  +8.7135e-01  3.71e-01  3.55e-03  4.86e-01  3.76e-06  8.45e-02  4.74e-01  
  6  +5.0013e-01  +8.9522e-01  3.95e-01  3.77e-03  5.15e-01  4.20e-06  6.85e-02  3.55e-01  
  7  +4.9988e-01  +7.6272e-01  2.63e-01  2.27e-03  3.12e-01  7.20e-06  1.69e-02  8.33e-01  
  8  +4.9589e-01  +7.4733e-01  2.51e-01  3.26e-04  4.52e-02  8.69e-05  1.17e-03  9.49e-01  
  9  +4.9533e-01  +7.0447e-01  2.09e-01  2.46e-04  3.41e-02  3.98e-05  8.72e-04  6.02e-01  
 10  +4.9308e-01  +6.7282e-01  1.80e-01  1.77e-04  2.46e-02  3.05e-05  6.29e-04  4.60e-01  
 11  +4.9020e-01  +6.4362e-01  1.53e-01  1.33e-04  1.85e-02  2.58e-05  4.72e-04  3.20e-01  
 12  +4.8322e-01  +5.7901e-01  9.58e-02  6.33e-05  8.77e-03  1.42e-05  2.18e-04  7.30e-01  
 13  +4.8236e-01  +5.7946e-01  9.71e-02  5.30e-05  7.34e-03  1.61e-05  1.80e-04  2.36e-01  
 14  +4.8211e-01  +5.7807e-01  9.60e-02  5.29e-05  7.33e-03  1.57e-05  1.80e-04  2.42e-03  
 15  +4.8084e-01  +5.7108e-01  9.02e-02  5.17e-05  7.15e-03  1.35e-05  1.77e-04  6.10e-02  
 16  +4.6987e-01  +5.1825e-01  4.84e-02  2.31e-05  3.19e-03  5.09e-06  8.29e-05  7.30e-01  
 17  +4.6789e-01  +5.0800e-01  4.01e-02  1.82e-05  2.52e-03  4.25e-06  6.58e-05  3.07e-01  
 18  +4.6738e-01  +5.0528e-01  3.79e-02  1.68e-05  2.32e-03  4.02e-06  6.06e-05  1.80e-01  
 19  +4.6387e-01  +4.8704e-01  2.32e-02  9.67e-06  1.34e-03  2.33e-06  3.54e-05  8.08e-01  
 20  +4.5957e-01  +4.6871e-01  9.14e-03  3.67e-06  5.08e-04  8.90e-07  1.39e-05  6.97e-01  
 21  +4.5787e-01  +4.6144e-01  3.57e-03  1.37e-06  1.90e-04  3.79e-07  5.25e-06  7.05e-01  
 22  +4.5781e-01  +4.6106e-01  3.25e-03  1.31e-06  1.81e-04  3.10e-07  5.24e-06  1.97e-02  
 23  +4.5781e-01  +4.6111e-01  3.30e-03  1.32e-06  1.83e-04  3.20e-07  5.24e-06  9.44e-03  
 24  +4.5777e-01  +4.6113e-01  3.36e-03  1.28e-06  1.77e-04  3.52e-07  4.91e-06  1.60e-01  
 25  +4.5692e-01  +4.5774e-01  8.18e-04  3.12e-07  4.31e-05  8.95e-08  1.21e-06  9.90e-01  
 26  +4.5660e-01  +4.5662e-01  1.14e-05  4.32e-09  5.98e-07  1.17e-09  1.69e-08  9.90e-01  
 27  +4.5660e-01  +4.5660e-01  1.14e-07  4.32e-11  5.98e-09  1.17e-11  1.69e-10  9.90e-01  
 28  +4.5660e-01  +4.5660e-01  1.14e-09  4.32e-13  5.98e-11  1.20e-13  1.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.7218ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:33 PM: Optimal value: 4.566e-01
(CVXPY) Aug 31 04:48:33 PM: Compilation took 8.155e-03 seconds
(CVXPY) Aug 31 04:48:33 PM: Solver (including time spent in interface) took 4.515e-02 seconds
Iteration: 4, Objective: 0.4566
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:33 PM: Your problem has 2546 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:33 PM: Finished problem compilation (took 1.069e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2546
  constraints   = 5046
  nnz(P)        = 0
  nnz(A)        = 28565
  cones (total) = 1
    : Nonnegative = 1,  numel = 5046

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5010e+03  2.50e+03  9.79e-01  6.87e+01  1.00e+00  1.00e+00   ------   
  1  +5.9899e-01  +5.0209e+02  5.01e+02  3.64e-01  4.00e+01  3.99e-03  5.05e-01  6.44e-01  
  2  +5.4542e-01  +7.0921e+01  7.04e+01  1.41e-01  1.92e+01  9.99e-03  2.35e-01  7.86e-01  
  3  +5.1015e-01  +1.6518e+01  1.60e+01  1.00e-01  1.33e+01  2.32e-05  2.30e-01  1.04e-01  
  4  +5.0030e-01  +1.2787e+00  7.78e-01  7.48e-03  1.02e+00  7.09e-06  1.52e-01  7.11e-01  
  5  +5.0017e-01  +9.7329e-01  4.73e-01  4.53e-03  6.22e-01  4.66e-06  1.03e-01  3.48e-01  
  6  +5.0017e-01  +9.8653e-01  4.86e-01  4.65e-03  6.37e-01  4.88e-06  8.48e-02  3.81e-01  
  7  +5.0004e-01  +8.3546e-01  3.35e-01  3.14e-03  4.31e-01  5.08e-06  3.71e-02  6.54e-01  
  8  +4.9895e-01  +8.0823e-01  3.09e-01  1.20e-03  1.66e-01  2.79e-05  4.69e-03  9.04e-01  
  9  +4.9527e-01  +7.2248e-01  2.27e-01  2.77e-04  3.86e-02  7.62e-05  9.82e-04  8.65e-01  
 10  +4.9567e-01  +7.1657e-01  2.21e-01  2.66e-04  3.71e-02  5.80e-05  9.29e-04  2.56e-01  
 11  +4.9316e-01  +6.8597e-01  1.93e-01  1.91e-04  2.66e-02  5.43e-05  6.66e-04  3.49e-01  
 12  +4.9093e-01  +6.6241e-01  1.71e-01  1.46e-04  2.03e-02  4.79e-05  5.05e-04  3.32e-01  
 13  +4.9111e-01  +6.5712e-01  1.66e-01  1.37e-04  1.91e-02  3.25e-05  4.66e-04  3.68e-01  
 14  +4.8741e-01  +6.3033e-01  1.43e-01  9.24e-05  1.29e-02  3.22e-05  3.16e-04  3.55e-01  
 15  +4.8729e-01  +6.2957e-01  1.42e-01  9.24e-05  1.29e-02  3.18e-05  3.16e-04  4.29e-03  
 16  +4.8269e-01  +5.9950e-01  1.17e-01  7.86e-05  1.09e-02  1.49e-05  2.88e-04  3.65e-01  
 17  +4.7239e-01  +5.3524e-01  6.28e-02  3.23e-05  4.48e-03  8.71e-06  1.19e-04  7.15e-01  
 18  +4.7207e-01  +5.3330e-01  6.12e-02  3.06e-05  4.26e-03  8.18e-06  1.12e-04  1.73e-01  
 19  +4.7165e-01  +5.3064e-01  5.90e-02  2.95e-05  4.10e-03  7.55e-06  1.08e-04  1.27e-01  
 20  +4.6908e-01  +5.1725e-01  4.82e-02  2.33e-05  3.24e-03  6.03e-06  8.64e-05  2.60e-01  
 21  +4.6868e-01  +5.1485e-01  4.62e-02  2.17e-05  3.02e-03  5.55e-06  8.02e-05  2.42e-01  
 22  +4.6809e-01  +5.1160e-01  4.35e-02  2.07e-05  2.88e-03  4.64e-06  7.78e-05  3.06e-01  
 23  +4.6401e-01  +4.9078e-01  2.68e-02  1.20e-05  1.66e-03  2.75e-06  4.57e-05  6.71e-01  
 24  +4.6214e-01  +4.8247e-01  2.03e-02  8.77e-06  1.22e-03  2.10e-06  3.38e-05  4.73e-01  
 25  +4.5924e-01  +4.6949e-01  1.03e-02  4.36e-06  6.06e-04  1.04e-06  1.73e-05  5.81e-01  
 26  +4.5915e-01  +4.6909e-01  9.94e-03  4.23e-06  5.87e-04  1.01e-06  1.68e-05  6.97e-02  
 27  +4.5917e-01  +4.6909e-01  9.91e-03  4.19e-06  5.82e-04  1.01e-06  1.65e-05  1.36e-01  
 28  +4.5720e-01  +4.6053e-01  3.33e-03  1.34e-06  1.86e-04  3.60e-07  5.38e-06  9.14e-01  
 29  +4.5710e-01  +4.6000e-01  2.90e-03  1.24e-06  1.72e-04  2.71e-07  5.26e-06  1.19e-01  
 30  +4.5710e-01  +4.6007e-01  2.97e-03  1.26e-06  1.75e-04  2.83e-07  5.25e-06  1.05e-02  
 31  +4.5702e-01  +4.5999e-01  2.96e-03  1.19e-06  1.65e-04  3.03e-07  4.79e-06  1.98e-01  
 32  +4.5620e-01  +4.5675e-01  5.49e-04  2.21e-07  3.06e-05  5.37e-08  9.03e-07  9.90e-01  
 33  +4.5600e-01  +4.5601e-01  6.26e-06  2.51e-09  3.49e-07  5.87e-10  1.03e-08  9.90e-01  
 34  +4.5600e-01  +4.5600e-01  6.28e-08  2.52e-11  3.49e-09  5.88e-12  1.04e-10  9.90e-01  
 35  +4.5600e-01  +4.5600e-01  6.28e-10  2.52e-13  3.49e-11  6.00e-14  1.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.8233ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:33 PM: Optimal value: 4.560e-01
(CVXPY) Aug 31 04:48:33 PM: Compilation took 1.069e-02 seconds
(CVXPY) Aug 31 04:48:33 PM: Solver (including time spent in interface) took 6.387e-02 seconds
FULL MODEL:
  Accruacy: 0.5404
  Our objective: 0.08080000000000004

IF 
    (x1 = 1 AND x0 = 0 AND x4 = 0)                       <-- (term's our objective: 0.018800000000000025)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.03880000000000004)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0) <-- (term's our objective: 0.010000000000000012)
 OR (x2 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.009200000000000055)
 OR (x0 = 1 AND x2 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.0040000000000000105)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.711388111114502
Best over terms:
  Our final objective: 0.03880000000000004
    Its accruacy: 0.5194
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.03880000000000004
  Highest accruacy: 0.5194
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

