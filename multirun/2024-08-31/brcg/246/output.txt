Command:
python test_script.py -s smallest_subclass -d 7 -n 50 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 7.

Computed total variation: 0.8800000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:12 PM: Your problem has 40 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Finished problem compilation (took 4.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 65
  nnz(P)        = 0
  nnz(A)        = 265
  cones (total) = 1
    : Nonnegative = 1,  numel = 65

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9331e-01  +2.6094e+01  2.56e+01  8.29e-01  6.42e+00  1.00e+00  1.07e+00   ------   
  1  +5.7411e-01  +5.6471e+00  5.07e+00  3.40e-01  3.62e+00  3.81e-03  5.80e-01  6.19e-01  
  2  +4.9495e-01  +1.1110e+00  6.16e-01  6.94e-02  9.01e-01  1.67e-02  1.93e-01  9.90e-01  
  3  +4.3813e-01  +8.3105e-01  3.93e-01  2.37e-02  3.21e-01  1.44e-02  7.90e-02  7.07e-01  
  4  +4.0934e-01  +5.3341e-01  1.24e-01  7.26e-03  9.69e-02  3.71e-03  2.88e-02  6.60e-01  
  5  +3.8823e-01  +4.2417e-01  3.59e-02  1.71e-03  2.29e-02  7.14e-04  8.84e-03  8.39e-01  
  6  +3.8031e-01  +3.8113e-01  8.18e-04  3.83e-05  5.12e-04  1.25e-05  2.13e-04  9.78e-01  
  7  +3.8010e-01  +3.8011e-01  8.18e-06  3.83e-07  5.12e-06  1.25e-07  2.13e-06  9.90e-01  
  8  +3.8010e-01  +3.8010e-01  8.18e-08  3.83e-09  5.12e-08  1.25e-09  2.13e-08  9.90e-01  
  9  +3.8010e-01  +3.8010e-01  8.18e-10  3.83e-11  5.12e-10  1.25e-11  2.13e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 243.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:12 PM: Optimal value: 3.801e-01
(CVXPY) Aug 31 04:53:12 PM: Compilation took 4.998e-03 seconds
(CVXPY) Aug 31 04:53:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:12 PM: Your problem has 50 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Finished problem compilation (took 3.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 50
  constraints   = 75
  nnz(P)        = 0
  nnz(A)        = 340
  cones (total) = 1
    : Nonnegative = 1,  numel = 75

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8079e-01  +2.6852e+01  2.64e+01  8.41e-01  6.59e+00  1.00e+00  1.11e+00   ------   
  1  +5.2011e-01  +5.7812e+00  5.26e+00  3.54e-01  3.65e+00  3.83e-03  6.00e-01  6.15e-01  
  2  +4.3055e-01  +1.2914e+00  8.61e-01  7.89e-02  1.05e+00  1.93e-02  2.07e-01  9.31e-01  
  3  +3.6413e-01  +7.1422e-01  3.50e-01  2.44e-02  3.33e-01  8.24e-03  7.35e-02  7.59e-01  
  4  +3.2346e-01  +5.3339e-01  2.10e-01  9.40e-03  1.34e-01  6.22e-03  3.15e-02  6.64e-01  
  5  +2.8173e-01  +3.4688e-01  6.51e-02  2.71e-03  3.99e-02  1.59e-03  9.47e-03  7.87e-01  
  6  +2.6129e-01  +2.6364e-01  2.35e-03  9.73e-05  1.43e-03  2.22e-05  3.54e-04  9.83e-01  
  7  +2.6044e-01  +2.6063e-01  1.98e-04  8.36e-06  1.21e-04  1.56e-06  3.09e-05  9.14e-01  
  8  +2.6036e-01  +2.6037e-01  1.45e-05  6.21e-07  8.82e-06  1.23e-07  2.40e-06  9.44e-01  
  9  +2.6035e-01  +2.6035e-01  1.47e-07  6.29e-09  8.94e-08  1.24e-09  2.44e-08  9.90e-01  
 10  +2.6035e-01  +2.6035e-01  1.47e-09  6.30e-11  8.95e-10  1.24e-11  2.44e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 298.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:12 PM: Optimal value: 2.604e-01
(CVXPY) Aug 31 04:53:12 PM: Compilation took 3.011e-03 seconds
(CVXPY) Aug 31 04:53:12 PM: Solver (including time spent in interface) took 9.940e-04 seconds
Iteration: 2, Objective: 0.2604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:12 PM: Your problem has 60 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Finished problem compilation (took 6.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 85
  nnz(P)        = 0
  nnz(A)        = 384
  cones (total) = 1
    : Nonnegative = 1,  numel = 85

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7340e-01  +2.6989e+01  2.65e+01  8.52e-01  6.39e+00  1.00e+00  1.12e+00   ------   
  1  +4.6733e-01  +5.7374e+00  5.27e+00  3.56e-01  3.39e+00  3.92e-03  5.91e-01  6.22e-01  
  2  +3.2992e-01  +1.1513e+00  8.21e-01  5.82e-02  7.55e-01  2.04e-02  1.55e-01  9.72e-01  
  3  +2.4775e-01  +6.6152e-01  4.14e-01  2.38e-02  3.16e-01  1.01e-02  7.09e-02  6.47e-01  
  4  +1.9590e-01  +3.1882e-01  1.23e-01  6.67e-03  9.01e-02  2.89e-03  2.18e-02  7.04e-01  
  5  +1.7503e-01  +2.3030e-01  5.53e-02  2.74e-03  3.95e-02  8.02e-04  9.29e-03  8.59e-01  
  6  +1.6109e-01  +1.6294e-01  1.86e-03  9.13e-05  1.31e-03  2.19e-05  3.21e-04  9.66e-01  
  7  +1.6066e-01  +1.6095e-01  2.99e-04  1.54e-05  2.15e-04  2.76e-06  5.66e-05  8.52e-01  
  8  +1.6056e-01  +1.6057e-01  1.79e-05  9.51e-07  1.29e-05  1.46e-07  3.72e-06  9.61e-01  
  9  +1.6055e-01  +1.6055e-01  1.89e-07  1.01e-08  1.36e-07  1.54e-09  3.95e-08  9.89e-01  
 10  +1.6055e-01  +1.6055e-01  1.89e-09  1.01e-10  1.37e-09  1.54e-11  3.95e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0173ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:12 PM: Optimal value: 1.606e-01
(CVXPY) Aug 31 04:53:12 PM: Compilation took 6.008e-03 seconds
(CVXPY) Aug 31 04:53:12 PM: Solver (including time spent in interface) took 2.118e-03 seconds
Iteration: 3, Objective: 0.1606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:12 PM: Your problem has 70 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Finished problem compilation (took 3.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 70
  constraints   = 95
  nnz(P)        = 0
  nnz(A)        = 421
  cones (total) = 1
    : Nonnegative = 1,  numel = 95

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6553e-01  +2.7426e+01  2.70e+01  8.58e-01  6.21e+00  1.00e+00  1.13e+00   ------   
  1  +4.1812e-01  +6.0085e+00  5.59e+00  3.71e-01  3.34e+00  4.01e-03  6.06e-01  6.01e-01  
  2  +2.7914e-01  +1.2964e+00  1.02e+00  7.52e-02  8.99e-01  2.16e-02  1.92e-01  9.22e-01  
  3  +2.3152e-01  +8.8398e-01  6.52e-01  4.20e-02  5.16e-01  1.47e-02  1.18e-01  4.37e-01  
  4  +1.8630e-01  +4.2675e-01  2.40e-01  1.56e-02  1.96e-01  2.21e-03  4.81e-02  9.90e-01  
  5  +1.5468e-01  +2.6414e-01  1.09e-01  6.18e-03  8.29e-02  1.13e-03  2.05e-02  6.32e-01  
  6  +1.3061e-01  +1.6203e-01  3.14e-02  1.66e-03  2.23e-02  2.55e-04  5.83e-03  8.62e-01  
  7  +1.2135e-01  +1.2360e-01  2.24e-03  1.14e-04  1.56e-03  1.87e-05  4.09e-04  9.50e-01  
  8  +1.2080e-01  +1.2119e-01  3.96e-04  2.08e-05  2.79e-04  2.78e-06  7.85e-05  8.22e-01  
  9  +1.2067e-01  +1.2071e-01  3.92e-05  2.11e-06  2.77e-05  3.27e-07  8.53e-06  9.87e-01  
 10  +1.2065e-01  +1.2065e-01  4.44e-07  2.40e-08  3.14e-07  3.56e-09  9.78e-08  9.89e-01  
 11  +1.2065e-01  +1.2065e-01  4.44e-09  2.40e-10  3.14e-09  3.56e-11  9.78e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 349.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:12 PM: Optimal value: 1.207e-01
(CVXPY) Aug 31 04:53:12 PM: Compilation took 3.006e-03 seconds
(CVXPY) Aug 31 04:53:12 PM: Solver (including time spent in interface) took 1.002e-03 seconds
Iteration: 4, Objective: 0.1207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:12 PM: Your problem has 80 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Finished problem compilation (took 3.046e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 80
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 458
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5802e-01  +2.7273e+01  2.68e+01  8.64e-01  6.04e+00  1.00e+00  1.12e+00   ------   
  1  +3.5973e-01  +6.2405e+00  5.88e+00  3.81e-01  3.25e+00  4.21e-03  6.07e-01  5.77e-01  
  2  +2.1555e-01  +1.5662e+00  1.35e+00  9.58e-02  1.05e+00  2.30e-02  2.34e-01  8.37e-01  
  3  +1.6411e-01  +4.9673e-01  3.33e-01  2.39e-02  2.70e-01  7.12e-03  6.85e-02  7.58e-01  
  4  +1.2185e-01  +2.4186e-01  1.20e-01  7.32e-03  8.73e-02  2.66e-03  2.34e-02  7.71e-01  
  5  +9.6080e-02  +1.4389e-01  4.78e-02  2.50e-03  3.12e-02  7.43e-04  8.67e-03  7.79e-01  
  6  +8.1689e-02  +8.4180e-02  2.49e-03  1.24e-04  1.57e-03  3.30e-05  4.49e-04  9.51e-01  
  7  +8.1073e-02  +8.1525e-02  4.52e-04  2.35e-05  2.91e-04  4.79e-06  8.90e-05  8.25e-01  
  8  +8.0923e-02  +8.0977e-02  5.39e-05  2.89e-06  3.50e-05  4.88e-07  1.17e-05  9.28e-01  
  9  +8.0900e-02  +8.0901e-02  6.95e-07  3.74e-08  4.52e-07  5.98e-09  1.53e-07  9.90e-01  
 10  +8.0900e-02  +8.0900e-02  6.95e-09  3.74e-10  4.52e-09  5.98e-11  1.53e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 348.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:12 PM: Optimal value: 8.090e-02
(CVXPY) Aug 31 04:53:12 PM: Compilation took 3.046e-03 seconds
(CVXPY) Aug 31 04:53:12 PM: Solver (including time spent in interface) took 1.109e-03 seconds
Iteration: 5, Objective: 0.0809
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:12 PM: Your problem has 81 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:12 PM: Finished problem compilation (took 3.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 463
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5727e-01  +2.7268e+01  2.68e+01  8.65e-01  6.04e+00  1.00e+00  1.12e+00   ------   
  1  +3.5477e-01  +6.2849e+00  5.93e+00  3.84e-01  3.26e+00  4.22e-03  6.09e-01  5.73e-01  
  2  +2.1154e-01  +1.6370e+00  1.43e+00  1.01e-01  1.09e+00  2.33e-02  2.43e-01  8.20e-01  
  3  +1.6453e-01  +4.6898e-01  3.04e-01  2.22e-02  2.49e-01  6.72e-03  6.36e-02  7.84e-01  
  4  +1.1961e-01  +2.3320e-01  1.14e-01  6.78e-03  8.16e-02  2.56e-03  2.16e-02  8.06e-01  
  5  +9.2033e-02  +1.2229e-01  3.03e-02  1.61e-03  2.01e-02  3.29e-04  5.50e-03  8.75e-01  
  6  +8.1505e-02  +8.3309e-02  1.80e-03  9.13e-05  1.16e-03  1.80e-05  3.23e-04  9.50e-01  
  7  +8.0989e-02  +8.1166e-02  1.76e-04  9.44e-06  1.16e-04  1.02e-06  3.62e-05  9.59e-01  
  8  +8.0912e-02  +8.0937e-02  2.50e-05  1.35e-06  1.64e-05  1.85e-07  5.48e-06  9.17e-01  
  9  +8.0900e-02  +8.0900e-02  2.68e-07  1.45e-08  1.76e-07  1.96e-09  5.94e-08  9.89e-01  
 10  +8.0900e-02  +8.0900e-02  2.69e-09  1.45e-10  1.76e-09  1.97e-11  5.94e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 347.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:12 PM: Optimal value: 8.090e-02
(CVXPY) Aug 31 04:53:12 PM: Compilation took 3.008e-03 seconds
(CVXPY) Aug 31 04:53:12 PM: Solver (including time spent in interface) took 9.727e-04 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.8

IF 
    (x3 = 1 AND x0 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.27999999999999997)
 OR (x0 = 0 AND x2 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.23999999999999994)
 OR (x1 = 1 AND x5 = 1 AND x2 = 0)                                  <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.16000000000000003)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 0)                       <-- (term's our objective: 0.12)
 OR (x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.040000000000000036)
 OR (x0 = 1 AND x2 = 1 AND x5 = 1 AND x1 = 0 AND x6 = 0)            <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.07999999999999996)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.020266056060791
Best over terms:
  Our final objective: 0.27999999999999997
    Its accruacy: 0.64
    Its hamming distance: 6
  Shortest hamming distance: 4
    Its our objective: 0.23999999999999994
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

