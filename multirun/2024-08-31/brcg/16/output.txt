Command:
python test_script.py -s smallest_subclass -d 1 -n 500 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6000000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 1.

Computed total variation: 0.6000000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:43:40 PM: Your problem has 253 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:43:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:43:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:43:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:43:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:43:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:43:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:43:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:43:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:43:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:43:40 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:43:40 PM: Finished problem compilation (took 3.422e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:43:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 253
  constraints   = 503
  nnz(P)        = 0
  nnz(A)        = 1003
  cones (total) = 1
    : Nonnegative = 1,  numel = 503

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9558e-01  +2.5204e+02  2.52e+02  9.23e-01  1.38e+01  1.00e+00  1.02e+00   ------   
  1  +6.5752e-01  +4.0719e+01  4.01e+01  2.08e-01  5.59e+00  4.89e-03  3.32e-01  7.62e-01  
  2  +5.3430e-01  +5.5177e+00  4.98e+00  6.96e-02  2.09e+00  5.09e-03  1.41e-01  7.45e-01  
  3  +5.3023e-01  +6.2894e+00  5.76e+00  3.31e-02  1.04e+00  1.39e-02  6.48e-02  5.60e-01  
  4  +5.1094e-01  +5.4584e+00  4.95e+00  3.02e-02  9.50e-01  9.58e-03  6.00e-02  2.14e-01  
  5  +4.6275e-01  +4.4207e+00  3.96e+00  1.22e-02  3.91e-01  1.38e-02  2.48e-02  5.96e-01  
  6  +3.3237e-01  +1.3833e+00  1.05e+00  5.83e-03  1.74e-01  5.96e-05  1.53e-02  8.01e-01  
  7  +2.3677e-01  +4.4764e-01  2.11e-01  1.22e-03  3.45e-02  5.06e-05  4.81e-03  7.60e-01  
  8  +2.0212e-01  +2.1763e-01  1.55e-02  9.41e-05  2.61e-03  1.54e-05  6.11e-04  9.60e-01  
  9  +2.0012e-01  +2.0031e-01  1.82e-04  1.10e-06  3.05e-05  1.62e-07  7.49e-06  9.88e-01  
 10  +2.0010e-01  +2.0010e-01  1.82e-06  1.10e-08  3.05e-07  1.61e-09  7.49e-08  9.90e-01  
 11  +2.0010e-01  +2.0010e-01  1.82e-08  1.10e-10  3.05e-09  1.61e-11  7.49e-10  9.90e-01  
 12  +2.0010e-01  +2.0010e-01  1.82e-10  1.10e-12  3.05e-11  1.61e-13  7.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 884.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:43:40 PM: Problem status: optimal
(CVXPY) Aug 31 04:43:40 PM: Optimal value: 2.001e-01
(CVXPY) Aug 31 04:43:40 PM: Compilation took 3.422e-03 seconds
(CVXPY) Aug 31 04:43:40 PM: Solver (including time spent in interface) took 9.716e-04 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.8
  Our objective: 0.6000000000000001

IF 
    (x0 = 0) <-- (term's our objective: 0.6000000000000001)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7709536552429199
Best over terms:
  Our final objective: 0.6000000000000001
    Its accruacy: 0.8
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.6000000000000001
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

