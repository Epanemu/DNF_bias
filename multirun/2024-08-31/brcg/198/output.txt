Command:
python test_script.py -s smallest_subclass -d 5 -n 50000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.03824
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 5.

Computed total variation: 0.045040000000000004
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:28 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:28 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:28 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:28 PM: Finished problem compilation (took 7.232e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 200011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.9962e-01  +5.0087e+03  5.01e+03  3.68e-01  1.22e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4642e-01  +7.1491e+02  7.14e+02  1.49e-01  6.20e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1139e-01  +1.7343e+02  1.73e+02  1.36e-01  5.62e+01  2.41e-05  2.33e-01  8.03e-02  
  4  +5.0054e-01  +7.3053e+00  6.80e+00  2.01e-02  8.16e+00  2.54e-06  1.88e-01  5.17e-01  
  5  +5.0000e-01  +9.0472e-01  4.05e-01  1.23e-03  5.11e-01  2.32e-05  1.53e-01  8.88e-01  
  6  +5.0000e-01  +5.5850e-01  5.85e-02  1.75e-04  7.30e-02  4.16e-06  2.11e-02  8.65e-01  
  7  +4.9999e-01  +5.4455e-01  4.46e-02  1.33e-04  5.56e-02  7.55e-06  5.97e-03  7.66e-01  
  8  +4.9945e-01  +5.5875e-01  5.93e-02  4.17e-05  1.75e-02  3.70e-04  1.41e-04  9.85e-01  
  9  +4.9378e-01  +5.4488e-01  5.11e-02  3.61e-06  1.51e-03  3.54e-03  1.13e-05  9.32e-01  
 10  +4.9069e-01  +5.0797e-01  1.73e-02  8.49e-07  3.55e-04  1.10e-03  2.67e-06  8.87e-01  
 11  +4.8828e-01  +4.9159e-01  3.31e-03  1.52e-07  6.34e-05  1.50e-04  5.18e-07  8.44e-01  
 12  +4.8729e-01  +4.8748e-01  1.84e-04  7.36e-09  3.08e-06  1.85e-06  2.98e-08  9.87e-01  
 13  +4.8724e-01  +4.8724e-01  1.86e-06  7.41e-11  3.10e-08  1.87e-08  3.01e-10  9.90e-01  
 14  +4.8724e-01  +4.8724e-01  1.86e-08  7.41e-13  3.10e-10  1.87e-10  3.01e-12  9.90e-01  
 15  +4.8724e-01  +4.8724e-01  1.88e-10  7.47e-15  3.12e-12  2.70e-12  4.28e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 220.3596ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:29 PM: Optimal value: 4.872e-01
(CVXPY) Aug 31 04:49:29 PM: Compilation took 7.232e-02 seconds
(CVXPY) Aug 31 04:49:29 PM: Solver (including time spent in interface) took 2.437e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4872
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:29 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:29 PM: Finished problem compilation (took 8.323e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 227224
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.12e+02  1.00e+00  1.00e+00   ------   
  1  +5.9961e-01  +5.0089e+03  5.01e+03  3.68e-01  1.24e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4640e-01  +7.1471e+02  7.14e+02  1.49e-01  6.32e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1138e-01  +1.7332e+02  1.73e+02  1.36e-01  5.72e+01  2.41e-05  2.33e-01  8.05e-02  
  4  +5.0053e-01  +7.2021e+00  6.70e+00  1.98e-02  8.19e+00  2.55e-06  1.87e-01  5.25e-01  
  5  +5.0002e-01  +1.1509e+00  6.51e-01  1.97e-03  8.37e-01  2.33e-05  1.61e-01  6.36e-01  
  6  +5.0001e-01  +7.4949e-01  2.49e-01  7.45e-04  3.16e-01  5.50e-06  6.62e-02  9.90e-01  
  7  +5.0000e-01  +6.0382e-01  1.04e-01  3.10e-04  1.32e-01  2.71e-06  2.68e-02  6.29e-01  
  8  +5.0000e-01  +6.0299e-01  1.03e-01  3.07e-04  1.31e-01  2.55e-06  2.22e-02  3.15e-01  
  9  +5.0001e-01  +6.0977e-01  1.10e-01  3.27e-04  1.39e-01  2.13e-06  2.10e-02  2.97e-01  
 10  +5.0001e-01  +6.1864e-01  1.19e-01  3.53e-04  1.50e-01  8.84e-07  1.71e-02  7.59e-01  
 11  +5.0000e-01  +5.6633e-01  6.63e-02  1.95e-04  8.29e-02  1.42e-06  3.67e-03  8.02e-01  
 12  +4.9994e-01  +5.5823e-01  5.83e-02  3.39e-05  1.44e-02  3.88e-05  1.05e-04  9.73e-01  
 13  +4.9932e-01  +5.5672e-01  5.74e-02  3.28e-06  1.40e-03  4.16e-04  9.50e-06  9.10e-01  
 14  +4.9821e-01  +5.4795e-01  4.97e-02  2.80e-06  1.20e-03  2.85e-04  8.10e-06  3.12e-01  
 15  +4.9805e-01  +5.4657e-01  4.85e-02  2.78e-06  1.19e-03  2.48e-04  8.06e-06  8.15e-02  
 16  +4.9787e-01  +5.4548e-01  4.76e-02  2.65e-06  1.13e-03  2.10e-04  7.66e-06  1.82e-01  
 17  +4.9722e-01  +5.4273e-01  4.55e-02  2.31e-06  9.85e-04  1.95e-04  6.68e-06  2.06e-01  
 18  +4.9688e-01  +5.4075e-01  4.39e-02  2.30e-06  9.79e-04  1.65e-04  6.65e-06  7.71e-02  
 19  +4.9577e-01  +5.3654e-01  4.08e-02  1.92e-06  8.19e-04  1.49e-04  5.56e-06  2.37e-01  
 20  +4.9564e-01  +5.3610e-01  4.05e-02  1.92e-06  8.18e-04  1.46e-04  5.56e-06  6.94e-03  
 21  +4.9272e-01  +5.2555e-01  3.28e-02  1.32e-06  5.61e-04  7.57e-05  3.84e-06  5.71e-01  
 22  +4.9275e-01  +5.2557e-01  3.28e-02  1.31e-06  5.59e-04  7.20e-05  3.82e-06  4.66e-02  
 23  +4.9268e-01  +5.2517e-01  3.25e-02  1.31e-06  5.57e-04  6.77e-05  3.82e-06  3.58e-02  
 24  +4.9033e-01  +5.1672e-01  2.64e-02  1.01e-06  4.29e-04  4.19e-05  2.96e-06  3.67e-01  
 25  +4.9032e-01  +5.1653e-01  2.62e-02  9.92e-07  4.23e-04  3.56e-05  2.92e-06  1.37e-01  
 26  +4.8914e-01  +5.1243e-01  2.33e-02  8.54e-07  3.64e-04  2.78e-05  2.52e-06  2.24e-01  
 27  +4.8912e-01  +5.1227e-01  2.32e-02  8.49e-07  3.62e-04  2.52e-05  2.50e-06  8.17e-02  
 28  +4.8746e-01  +5.0597e-01  1.85e-02  6.33e-07  2.70e-04  2.69e-07  1.88e-06  9.00e-01  
 29  +4.8495e-01  +4.9787e-01  1.29e-02  4.25e-07  1.81e-04  1.82e-07  1.27e-06  5.29e-01  
 30  +4.8158e-01  +4.8709e-01  5.50e-03  1.71e-07  7.29e-05  8.07e-08  5.17e-07  8.24e-01  
 31  +4.7912e-01  +4.7931e-01  1.97e-04  6.02e-09  2.57e-06  2.52e-09  1.85e-08  9.71e-01  
 32  +4.7902e-01  +4.7902e-01  1.98e-06  6.03e-11  2.57e-08  2.52e-11  1.85e-10  9.90e-01  
 33  +4.7902e-01  +4.7902e-01  1.98e-08  6.03e-13  2.57e-10  2.52e-13  1.85e-12  9.90e-01  
 34  +4.7902e-01  +4.7902e-01  1.98e-10  6.13e-15  2.57e-12  2.79e-15  2.04e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 577.1536ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:30 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:30 PM: Optimal value: 4.790e-01
(CVXPY) Aug 31 04:49:30 PM: Compilation took 8.323e-02 seconds
(CVXPY) Aug 31 04:49:30 PM: Solver (including time spent in interface) took 6.023e-01 seconds
Iteration: 2, Objective: 0.4790
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:30 PM: Your problem has 25026 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:30 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:30 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:30 PM: Finished problem compilation (took 9.183e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25026
  constraints   = 50026
  nnz(P)        = 0
  nnz(A)        = 235228
  cones (total) = 1
    : Nonnegative = 1,  numel = 50026

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.9961e-01  +5.0090e+03  5.01e+03  3.68e-01  1.25e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4639e-01  +7.1465e+02  7.14e+02  1.49e-01  6.34e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7332e+02  1.73e+02  1.36e-01  5.74e+01  2.41e-05  2.33e-01  8.05e-02  
  4  +5.0053e-01  +7.2024e+00  6.70e+00  1.98e-02  8.22e+00  2.55e-06  1.87e-01  5.25e-01  
  5  +5.0001e-01  +1.0370e+00  5.37e-01  1.63e-03  6.93e-01  2.37e-05  1.56e-01  7.62e-01  
  6  +5.0001e-01  +7.3063e-01  2.31e-01  6.89e-04  2.94e-01  5.59e-06  6.18e-02  9.90e-01  
  7  +5.0000e-01  +5.9186e-01  9.19e-02  2.74e-04  1.17e-01  2.76e-06  2.23e-02  6.86e-01  
  8  +5.0000e-01  +5.9622e-01  9.62e-02  2.87e-04  1.22e-01  2.78e-06  1.91e-02  2.86e-01  
  9  +5.0001e-01  +6.0991e-01  1.10e-01  3.28e-04  1.40e-01  2.18e-06  1.63e-02  5.38e-01  
 10  +5.0000e-01  +5.8783e-01  8.78e-02  2.59e-04  1.10e-01  3.69e-06  5.02e-03  7.69e-01  
 11  +4.9998e-01  +5.7088e-01  7.09e-02  1.31e-04  5.58e-02  1.97e-05  5.66e-04  9.90e-01  
 12  +4.9919e-01  +5.6905e-01  6.99e-02  6.79e-06  2.90e-03  5.22e-04  2.06e-05  9.64e-01  
 13  +4.9821e-01  +5.6140e-01  6.32e-02  3.89e-06  1.66e-03  6.77e-04  1.17e-05  5.23e-01  
 14  +4.9824e-01  +5.5730e-01  5.91e-02  3.76e-06  1.61e-03  3.89e-04  1.13e-05  3.40e-01  
 15  +4.9765e-01  +5.5211e-01  5.45e-02  3.33e-06  1.42e-03  2.63e-04  9.91e-06  3.50e-01  
 16  +4.9623e-01  +5.4519e-01  4.90e-02  2.52e-06  1.08e-03  2.41e-04  7.45e-06  3.38e-01  
 17  +4.9621e-01  +5.4490e-01  4.87e-02  2.51e-06  1.08e-03  2.26e-04  7.43e-06  4.72e-02  
 18  +4.9559e-01  +5.4249e-01  4.69e-02  2.22e-06  9.51e-04  2.12e-04  6.57e-06  1.82e-01  
 19  +4.9428e-01  +5.3741e-01  4.31e-02  2.13e-06  9.13e-04  1.44e-04  6.51e-06  1.55e-01  
 20  +4.9407e-01  +5.3664e-01  4.26e-02  2.04e-06  8.72e-04  9.98e-05  6.16e-06  3.04e-01  
 21  +4.9353e-01  +5.3371e-01  4.02e-02  1.89e-06  8.06e-04  5.66e-05  5.66e-06  3.83e-01  
 22  +4.9087e-01  +5.2368e-01  3.28e-02  1.38e-06  5.91e-04  3.99e-05  4.17e-06  3.70e-01  
 23  +4.9085e-01  +5.2356e-01  3.27e-02  1.38e-06  5.90e-04  3.85e-05  4.16e-06  2.80e-02  
 24  +4.8847e-01  +5.1449e-01  2.60e-02  1.02e-06  4.38e-04  1.87e-05  3.12e-06  4.93e-01  
 25  +4.8861e-01  +5.1488e-01  2.63e-02  1.03e-06  4.39e-04  1.83e-05  3.12e-06  3.68e-02  
 26  +4.8131e-01  +4.8888e-01  7.57e-03  2.58e-07  1.10e-04  3.26e-06  8.05e-07  8.03e-01  
 27  +4.8080e-01  +4.8713e-01  6.34e-03  2.11e-07  9.04e-05  2.62e-06  6.62e-07  2.19e-01  
 28  +4.8072e-01  +4.8682e-01  6.10e-03  2.07e-07  8.84e-05  2.23e-06  6.60e-07  8.64e-02  
 29  +4.8062e-01  +4.8639e-01  5.78e-03  1.94e-07  8.28e-05  1.56e-06  6.15e-07  3.33e-01  
 30  +4.7929e-01  +4.8188e-01  2.60e-03  8.57e-08  3.66e-05  6.29e-07  2.75e-07  6.06e-01  
 31  +4.7838e-01  +4.7896e-01  5.83e-04  1.89e-08  8.10e-06  2.56e-08  6.14e-08  9.53e-01  
 32  +4.7812e-01  +4.7813e-01  1.03e-05  3.32e-10  1.42e-07  4.41e-10  1.08e-09  9.83e-01  
 33  +4.7812e-01  +4.7812e-01  1.03e-07  3.32e-12  1.42e-09  4.42e-12  1.08e-11  9.90e-01  
 34  +4.7812e-01  +4.7812e-01  1.03e-09  3.34e-14  1.42e-11  5.07e-14  1.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 570.8243ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:30 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:30 PM: Optimal value: 4.781e-01
(CVXPY) Aug 31 04:49:30 PM: Compilation took 9.183e-02 seconds
(CVXPY) Aug 31 04:49:30 PM: Solver (including time spent in interface) took 5.947e-01 seconds
FULL MODEL:
  Accruacy: 0.52174
  Our objective: 0.043480000000000046

IF 
    (x0 = 0 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.042159999999999975)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0) <-- (term's our objective: 0.00131999999999996)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.615093231201172
Best over terms:
  Our final objective: 0.042159999999999975
    Its accruacy: 0.52108
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.042159999999999975
  Highest accruacy: 0.52108
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

