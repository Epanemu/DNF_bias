Command:
python test_script.py -s smallest_subclass -d 5 -n 5000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0424
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.082
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:40 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Finished problem compilation (took 8.900e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5007e+03  2.50e+03  9.78e-01  6.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.9956e-01  +5.0122e+02  5.01e+02  3.62e-01  3.81e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4613e-01  +7.1636e+01  7.11e+01  1.41e-01  1.85e+01  9.85e-03  2.35e-01  7.79e-01  
  3  +5.1036e-01  +1.6735e+01  1.62e+01  1.01e-01  1.29e+01  2.29e-05  2.31e-01  9.69e-02  
  4  +5.0009e-01  +9.3468e-01  4.35e-01  4.15e-03  5.42e-01  6.40e-06  1.26e-01  9.90e-01  
  5  +5.0001e-01  +5.7580e-01  7.58e-02  7.19e-04  9.44e-02  1.33e-06  2.42e-02  8.24e-01  
  6  +4.9986e-01  +5.8732e-01  8.75e-02  7.56e-04  9.93e-02  5.16e-06  5.58e-03  8.33e-01  
  7  +4.9504e-01  +5.6275e-01  6.77e-02  5.38e-05  7.12e-03  1.17e-04  1.71e-04  9.71e-01  
  8  +4.8597e-01  +5.1133e-01  2.54e-02  1.22e-05  1.62e-03  6.17e-05  4.10e-05  8.28e-01  
  9  +4.7867e-01  +4.8209e-01  3.41e-03  1.41e-06  1.86e-04  3.57e-06  5.70e-06  9.09e-01  
 10  +4.7752e-01  +4.7758e-01  5.81e-05  2.35e-08  3.11e-06  4.59e-08  9.81e-08  9.86e-01  
 11  +4.7750e-01  +4.7750e-01  5.81e-07  2.35e-10  3.11e-08  4.59e-10  9.81e-10  9.90e-01  
 12  +4.7750e-01  +4.7750e-01  5.81e-09  2.35e-12  3.11e-10  4.64e-12  9.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.5162ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:40 PM: Optimal value: 4.775e-01
(CVXPY) Aug 31 04:48:40 PM: Compilation took 8.900e-03 seconds
(CVXPY) Aug 31 04:48:40 PM: Solver (including time spent in interface) took 2.001e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4775
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:40 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Finished problem compilation (took 6.979e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 23094
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5010e+03  2.50e+03  9.78e-01  6.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.9940e-01  +5.0145e+02  5.01e+02  3.62e-01  3.90e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4593e-01  +7.1432e+01  7.09e+01  1.41e-01  1.89e+01  9.89e-03  2.35e-01  7.81e-01  
  3  +5.1028e-01  +1.6645e+01  1.61e+01  1.01e-01  1.31e+01  2.29e-05  2.31e-01  9.93e-02  
  4  +5.0036e-01  +1.3647e+00  8.64e-01  8.27e-03  1.10e+00  7.04e-06  1.61e-01  6.45e-01  
  5  +5.0010e-01  +7.6101e-01  2.61e-01  2.48e-03  3.33e-01  2.31e-06  7.00e-02  5.93e-01  
  6  +5.0010e-01  +7.5188e-01  2.52e-01  2.39e-03  3.21e-01  2.24e-06  6.23e-02  1.80e-01  
  7  +5.0012e-01  +7.6404e-01  2.64e-01  2.50e-03  3.35e-01  1.98e-06  5.23e-02  4.80e-01  
  8  +5.0002e-01  +6.1294e-01  1.13e-01  1.05e-03  1.41e-01  1.64e-06  1.41e-02  7.68e-01  
  9  +4.9882e-01  +6.9607e-01  1.97e-01  3.42e-04  4.63e-02  2.85e-05  1.16e-03  9.90e-01  
 10  +4.9563e-01  +6.4642e-01  1.51e-01  1.12e-04  1.52e-02  5.54e-05  3.73e-04  6.88e-01  
 11  +4.9081e-01  +5.5018e-01  5.94e-02  4.10e-05  5.55e-03  1.02e-06  1.39e-04  8.65e-01  
 12  +4.8969e-01  +5.4260e-01  5.29e-02  3.18e-05  4.31e-03  1.43e-06  1.02e-04  3.76e-01  
 13  +4.8793e-01  +5.3252e-01  4.46e-02  1.93e-05  2.62e-03  2.76e-06  5.91e-05  7.15e-01  
 14  +4.8707e-01  +5.2860e-01  4.15e-02  1.92e-05  2.60e-03  2.42e-06  5.90e-05  2.10e-02  
 15  +4.8570e-01  +5.2369e-01  3.80e-02  1.46e-05  1.98e-03  4.04e-06  4.52e-05  9.90e-01  
 16  +4.7866e-01  +4.9470e-01  1.60e-02  5.48e-06  7.43e-04  1.80e-06  1.74e-05  7.13e-01  
 17  +4.7333e-01  +4.7433e-01  1.00e-03  3.31e-07  4.48e-05  7.59e-08  1.10e-06  9.59e-01  
 18  +4.7290e-01  +4.7291e-01  1.04e-05  3.42e-09  4.63e-07  7.62e-10  1.15e-08  9.90e-01  
 19  +4.7290e-01  +4.7290e-01  1.04e-07  3.42e-11  4.63e-09  7.62e-12  1.15e-10  9.90e-01  
 20  +4.7290e-01  +4.7290e-01  1.04e-09  3.42e-13  4.63e-11  7.74e-14  1.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.8064ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:40 PM: Optimal value: 4.729e-01
(CVXPY) Aug 31 04:48:40 PM: Compilation took 6.979e-03 seconds
(CVXPY) Aug 31 04:48:40 PM: Solver (including time spent in interface) took 3.002e-02 seconds
Iteration: 2, Objective: 0.4729
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:40 PM: Your problem has 2528 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Finished problem compilation (took 6.932e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2528
  constraints   = 5028
  nnz(P)        = 0
  nnz(A)        = 24995
  cones (total) = 1
    : Nonnegative = 1,  numel = 5028

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.78e-01  6.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.9923e-01  +5.0171e+02  5.01e+02  3.63e-01  3.96e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4576e-01  +7.1256e+01  7.07e+01  1.41e-01  1.91e+01  9.92e-03  2.35e-01  7.83e-01  
  3  +5.1024e-01  +1.6614e+01  1.61e+01  1.01e-01  1.33e+01  2.30e-05  2.31e-01  1.01e-01  
  4  +5.0035e-01  +1.3586e+00  8.58e-01  8.22e-03  1.11e+00  7.08e-06  1.60e-01  6.53e-01  
  5  +5.0009e-01  +7.4147e-01  2.41e-01  2.30e-03  3.13e-01  2.25e-06  6.38e-02  6.27e-01  
  6  +5.0010e-01  +7.5543e-01  2.55e-01  2.43e-03  3.31e-01  2.33e-06  5.58e-02  2.85e-01  
  7  +5.0003e-01  +6.8539e-01  1.85e-01  1.74e-03  2.38e-01  2.44e-06  2.61e-02  5.90e-01  
  8  +4.9962e-01  +6.4445e-01  1.45e-01  8.22e-04  1.13e-01  1.04e-05  3.40e-03  9.06e-01  
  9  +4.9728e-01  +6.2619e-01  1.29e-01  1.74e-04  2.40e-02  5.20e-05  5.62e-04  8.38e-01  
 10  +4.9678e-01  +6.1427e-01  1.17e-01  1.21e-04  1.67e-02  3.68e-05  3.85e-04  6.64e-01  
 11  +4.9523e-01  +6.0475e-01  1.10e-01  8.74e-05  1.20e-02  3.82e-05  2.77e-04  3.88e-01  
 12  +4.9346e-01  +5.9527e-01  1.02e-01  6.81e-05  9.39e-03  3.55e-05  2.17e-04  3.39e-01  
 13  +4.9245e-01  +5.8896e-01  9.65e-02  6.26e-05  8.63e-03  2.87e-05  2.00e-04  2.20e-01  
 14  +4.9085e-01  +5.7744e-01  8.66e-02  5.35e-05  7.37e-03  1.18e-05  1.72e-04  6.26e-01  
 15  +4.8113e-01  +5.3323e-01  5.21e-02  2.40e-05  3.30e-03  7.35e-06  8.02e-05  6.54e-01  
 16  +4.7218e-01  +4.9382e-01  2.16e-02  9.25e-06  1.27e-03  2.46e-06  3.27e-05  6.54e-01  
 17  +4.7105e-01  +4.8937e-01  1.83e-02  7.41e-06  1.02e-03  2.15e-06  2.62e-05  3.16e-01  
 18  +4.7098e-01  +4.8909e-01  1.81e-02  7.37e-06  1.01e-03  2.10e-06  2.61e-05  3.31e-02  
 19  +4.6903e-01  +4.8175e-01  1.27e-02  5.19e-06  7.13e-04  1.30e-06  1.91e-05  5.87e-01  
 20  +4.6603e-01  +4.6955e-01  3.52e-03  1.35e-06  1.86e-04  4.08e-07  5.12e-06  8.95e-01  
 21  +4.6568e-01  +4.6826e-01  2.57e-03  9.92e-07  1.36e-04  2.88e-07  3.78e-06  8.59e-01  
 22  +4.6513e-01  +4.6625e-01  1.12e-03  4.29e-07  5.89e-05  1.24e-07  1.65e-06  9.90e-01  
 23  +4.6471e-01  +4.6472e-01  1.37e-05  5.23e-09  7.19e-07  1.48e-09  2.03e-08  9.90e-01  
 24  +4.6470e-01  +4.6470e-01  1.37e-07  5.23e-11  7.19e-09  1.48e-11  2.03e-10  9.90e-01  
 25  +4.6470e-01  +4.6470e-01  1.37e-09  5.23e-13  7.19e-11  1.49e-13  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 36.6776ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:40 PM: Optimal value: 4.647e-01
(CVXPY) Aug 31 04:48:40 PM: Compilation took 6.932e-03 seconds
(CVXPY) Aug 31 04:48:40 PM: Solver (including time spent in interface) took 3.907e-02 seconds
Iteration: 3, Objective: 0.4647
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:40 PM: Your problem has 2536 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Finished problem compilation (took 1.000e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2536
  constraints   = 5036
  nnz(P)        = 0
  nnz(A)        = 27224
  cones (total) = 1
    : Nonnegative = 1,  numel = 5036

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.79e-01  6.90e+01  1.00e+00  1.00e+00   ------   
  1  +5.9913e-01  +5.0197e+02  5.01e+02  3.63e-01  4.02e+01  3.99e-03  5.04e-01  6.44e-01  
  2  +5.4563e-01  +7.1140e+01  7.06e+01  1.41e-01  1.94e+01  9.95e-03  2.35e-01  7.84e-01  
  3  +5.1022e-01  +1.6599e+01  1.61e+01  1.01e-01  1.35e+01  2.31e-05  2.31e-01  1.02e-01  
  4  +5.0031e-01  +1.2903e+00  7.90e-01  7.58e-03  1.04e+00  7.01e-06  1.55e-01  6.96e-01  
  5  +5.0009e-01  +7.5179e-01  2.52e-01  2.40e-03  3.32e-01  2.49e-06  6.56e-02  5.96e-01  
  6  +5.0008e-01  +7.4505e-01  2.45e-01  2.33e-03  3.23e-01  2.55e-06  5.62e-02  1.92e-01  
  7  +5.0012e-01  +7.8585e-01  2.86e-01  2.72e-03  3.76e-01  2.50e-06  5.37e-02  3.34e-01  
  8  +4.9999e-01  +6.6082e-01  1.61e-01  1.47e-03  2.03e-01  3.15e-06  1.44e-02  7.91e-01  
  9  +4.9745e-01  +6.7649e-01  1.79e-01  2.24e-04  3.14e-02  5.78e-05  7.26e-04  9.90e-01  
 10  +4.9404e-01  +6.4362e-01  1.50e-01  1.06e-04  1.49e-02  7.99e-05  3.41e-04  6.02e-01  
 11  +4.9007e-01  +6.0699e-01  1.17e-01  7.02e-05  9.82e-03  5.11e-05  2.29e-04  5.08e-01  
 12  +4.8511e-01  +5.7488e-01  8.98e-02  4.80e-05  6.71e-03  2.93e-05  1.60e-04  4.84e-01  
 13  +4.8162e-01  +5.5713e-01  7.55e-02  3.76e-05  5.25e-03  2.37e-05  1.27e-04  2.44e-01  
 14  +4.7899e-01  +5.3824e-01  5.93e-02  2.77e-05  3.87e-03  1.96e-06  9.59e-05  9.90e-01  
 15  +4.7195e-01  +5.0796e-01  3.60e-02  1.57e-05  2.19e-03  1.27e-06  5.65e-05  4.45e-01  
 16  +4.6349e-01  +4.7211e-01  8.62e-03  3.50e-06  4.88e-04  8.00e-07  1.36e-05  9.90e-01  
 17  +4.6065e-01  +4.6108e-01  4.22e-04  1.69e-07  2.36e-05  3.34e-08  6.95e-07  9.59e-01  
 18  +4.6050e-01  +4.6051e-01  4.27e-06  1.71e-09  2.39e-07  3.37e-10  7.07e-09  9.90e-01  
 19  +4.6050e-01  +4.6050e-01  4.27e-08  1.71e-11  2.39e-09  3.37e-12  7.07e-11  9.90e-01  
 20  +4.6050e-01  +4.6050e-01  4.27e-10  1.71e-13  2.39e-11  3.38e-14  7.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.8748ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:40 PM: Optimal value: 4.605e-01
(CVXPY) Aug 31 04:48:40 PM: Compilation took 1.000e-02 seconds
(CVXPY) Aug 31 04:48:40 PM: Solver (including time spent in interface) took 3.828e-02 seconds
Iteration: 4, Objective: 0.4605
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:40 PM: Your problem has 2546 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Finished problem compilation (took 1.194e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2546
  constraints   = 5046
  nnz(P)        = 0
  nnz(A)        = 28777
  cones (total) = 1
    : Nonnegative = 1,  numel = 5046

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.79e-01  6.93e+01  1.00e+00  1.00e+00   ------   
  1  +5.9914e-01  +5.0187e+02  5.01e+02  3.63e-01  4.03e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4558e-01  +7.1061e+01  7.05e+01  1.41e-01  1.94e+01  9.94e-03  2.35e-01  7.84e-01  
  3  +5.1021e-01  +1.6579e+01  1.61e+01  1.01e-01  1.35e+01  2.31e-05  2.30e-01  1.02e-01  
  4  +5.0031e-01  +1.2988e+00  7.98e-01  7.66e-03  1.06e+00  7.03e-06  1.55e-01  6.92e-01  
  5  +5.0011e-01  +8.0094e-01  3.01e-01  2.87e-03  3.99e-01  2.91e-06  7.54e-02  5.31e-01  
  6  +5.0008e-01  +7.6713e-01  2.67e-01  2.55e-03  3.54e-01  2.84e-06  5.69e-02  3.01e-01  
  7  +5.0011e-01  +7.9841e-01  2.98e-01  2.84e-03  3.94e-01  2.81e-06  5.19e-02  3.26e-01  
  8  +4.9999e-01  +7.0403e-01  2.04e-01  1.86e-03  2.58e-01  3.78e-06  1.74e-02  7.07e-01  
  9  +4.9834e-01  +6.8713e-01  1.89e-01  3.66e-04  5.15e-02  3.82e-05  1.24e-03  9.90e-01  
 10  +4.9789e-01  +6.5857e-01  1.61e-01  2.24e-04  3.15e-02  3.28e-05  7.30e-04  6.73e-01  
 11  +4.9663e-01  +6.4714e-01  1.51e-01  1.47e-04  2.07e-02  3.99e-05  4.72e-04  4.41e-01  
 12  +4.9577e-01  +6.2990e-01  1.34e-01  1.13e-04  1.59e-02  2.40e-05  3.62e-04  6.21e-01  
 13  +4.9285e-01  +6.1368e-01  1.21e-01  8.09e-05  1.14e-02  2.48e-05  2.62e-04  3.30e-01  
 14  +4.9165e-01  +6.0671e-01  1.15e-01  7.41e-05  1.04e-02  2.18e-05  2.41e-04  1.79e-01  
 15  +4.8676e-01  +5.7595e-01  8.92e-02  5.21e-05  7.31e-03  3.05e-06  1.73e-04  9.90e-01  
 16  +4.7975e-01  +5.4364e-01  6.39e-02  3.20e-05  4.50e-03  2.64e-06  1.10e-04  4.58e-01  
 17  +4.7835e-01  +5.3752e-01  5.92e-02  2.91e-05  4.09e-03  3.20e-06  1.01e-04  3.51e-01  
 18  +4.6907e-01  +4.9814e-01  2.91e-02  1.28e-05  1.80e-03  1.71e-06  4.70e-05  6.64e-01  
 19  +4.6306e-01  +4.7246e-01  9.40e-03  3.96e-06  5.55e-04  5.52e-07  1.53e-05  7.08e-01  
 20  +4.6221e-01  +4.6904e-01  6.83e-03  2.79e-06  3.91e-04  4.79e-07  1.08e-05  4.64e-01  
 21  +4.6115e-01  +4.6468e-01  3.53e-03  1.42e-06  2.00e-04  3.39e-07  5.63e-06  9.00e-01  
 22  +4.5999e-01  +4.6024e-01  2.47e-04  9.89e-08  1.39e-05  2.39e-08  4.00e-07  9.90e-01  
 23  +4.5990e-01  +4.5990e-01  2.55e-06  1.02e-09  1.43e-07  2.46e-10  4.13e-09  9.90e-01  
 24  +4.5990e-01  +4.5990e-01  2.55e-08  1.02e-11  1.43e-09  2.46e-12  4.13e-11  9.90e-01  
 25  +4.5990e-01  +4.5990e-01  2.55e-10  1.02e-13  1.43e-11  2.48e-14  4.17e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.1644ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:40 PM: Optimal value: 4.599e-01
(CVXPY) Aug 31 04:48:40 PM: Compilation took 1.194e-02 seconds
(CVXPY) Aug 31 04:48:40 PM: Solver (including time spent in interface) took 4.575e-02 seconds
Iteration: 5, Objective: 0.4599
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:40 PM: Your problem has 2547 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:40 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:40 PM: Finished problem compilation (took 1.300e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2547
  constraints   = 5047
  nnz(P)        = 0
  nnz(A)        = 28943
  cones (total) = 1
    : Nonnegative = 1,  numel = 5047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.79e-01  6.93e+01  1.00e+00  1.00e+00   ------   
  1  +5.9915e-01  +5.0176e+02  5.01e+02  3.63e-01  4.03e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4559e-01  +7.1063e+01  7.05e+01  1.41e-01  1.94e+01  9.93e-03  2.34e-01  7.84e-01  
  3  +5.1021e-01  +1.6576e+01  1.61e+01  1.01e-01  1.35e+01  2.30e-05  2.30e-01  1.02e-01  
  4  +5.0030e-01  +1.2859e+00  7.86e-01  7.54e-03  1.04e+00  7.03e-06  1.54e-01  7.00e-01  
  5  +5.0010e-01  +7.8359e-01  2.83e-01  2.71e-03  3.76e-01  2.80e-06  7.16e-02  5.52e-01  
  6  +5.0008e-01  +7.5973e-01  2.60e-01  2.47e-03  3.44e-01  2.86e-06  5.34e-02  3.22e-01  
  7  +5.0011e-01  +7.9703e-01  2.97e-01  2.82e-03  3.91e-01  2.86e-06  4.72e-02  3.86e-01  
  8  +4.9989e-01  +6.7066e-01  1.71e-01  1.41e-03  1.96e-01  5.45e-06  8.97e-03  8.51e-01  
  9  +4.9801e-01  +6.6236e-01  1.64e-01  2.81e-04  3.95e-02  4.37e-05  9.41e-04  9.46e-01  
 10  +4.9685e-01  +6.5203e-01  1.55e-01  1.79e-04  2.52e-02  5.38e-05  5.91e-04  4.91e-01  
 11  +4.9427e-01  +6.2857e-01  1.34e-01  1.04e-04  1.46e-02  5.01e-05  3.40e-04  6.65e-01  
 12  +4.8338e-01  +5.6617e-01  8.28e-02  4.02e-05  5.65e-03  3.56e-05  1.36e-04  7.65e-01  
 13  +4.7907e-01  +5.4550e-01  6.64e-02  3.14e-05  4.42e-03  1.94e-05  1.09e-04  4.52e-01  
 14  +4.7878e-01  +5.4420e-01  6.54e-02  3.11e-05  4.38e-03  1.83e-05  1.09e-04  4.77e-02  
 15  +4.7287e-01  +5.1839e-01  4.55e-02  2.12e-05  2.98e-03  7.95e-06  7.77e-05  5.48e-01  
 16  +4.6448e-01  +4.7981e-01  1.53e-02  6.67e-06  9.35e-04  2.31e-06  2.60e-05  7.12e-01  
 17  +4.6137e-01  +4.6610e-01  4.73e-03  2.01e-06  2.82e-04  6.49e-07  8.13e-06  7.66e-01  
 18  +4.6055e-01  +4.6268e-01  2.13e-03  9.13e-07  1.28e-04  1.87e-07  3.87e-06  7.86e-01  
 19  +4.6038e-01  +4.6230e-01  1.91e-03  7.95e-07  1.11e-04  1.78e-07  3.28e-06  4.44e-01  
 20  +4.5982e-01  +4.5987e-01  5.62e-05  2.33e-08  3.27e-06  4.91e-09  9.80e-08  9.71e-01  
 21  +4.5980e-01  +4.5980e-01  5.65e-07  2.34e-10  3.28e-08  4.93e-11  9.87e-10  9.90e-01  
 22  +4.5980e-01  +4.5980e-01  5.65e-09  2.34e-12  3.28e-10  4.93e-13  9.87e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.3701ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:40 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:40 PM: Optimal value: 4.598e-01
(CVXPY) Aug 31 04:48:40 PM: Compilation took 1.300e-02 seconds
(CVXPY) Aug 31 04:48:40 PM: Solver (including time spent in interface) took 4.621e-02 seconds
FULL MODEL:
  Accruacy: 0.5324
  Our objective: 0.06479999999999997

IF 
    (x2 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.008799999999999947)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.04240000000000002)
 OR (x1 = 1 AND x3 = 1 AND x0 = 0 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.007999999999999986)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0) <-- (term's our objective: 0.005600000000000015)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.341736316680908
Best over terms:
  Our final objective: 0.04240000000000002
    Its accruacy: 0.5212
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.04240000000000002
  Highest accruacy: 0.5212
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

