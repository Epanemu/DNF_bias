Command:
python test_script.py -s smallest_subclass -d 7 -n 10 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 7.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:07 PM: Your problem has 20 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:07 PM: Finished problem compilation (took 5.245e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 20
  constraints   = 25
  nnz(P)        = 0
  nnz(A)        = 65
  cones (total) = 1
    : Nonnegative = 1,  numel = 25

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2317e-01  +6.4243e+00  6.00e+00  7.52e-01  2.61e+00  1.00e+00  1.36e+00   ------   
  1  +4.0548e-01  +1.1662e+00  7.61e-01  2.50e-01  1.07e+00  3.49e-03  5.88e-01  7.68e-01  
  2  +2.0810e-01  +3.4574e-01  1.38e-01  4.25e-02  1.98e-01  8.71e-03  1.48e-01  8.81e-01  
  3  +2.0069e-01  +2.0629e-01  5.60e-03  1.75e-03  8.36e-03  4.87e-04  6.90e-03  9.74e-01  
  4  +2.0017e-01  +2.0038e-01  2.11e-04  6.64e-05  3.17e-04  1.77e-05  2.63e-04  9.62e-01  
  5  +2.0012e-01  +2.0018e-01  5.83e-05  1.61e-05  8.04e-05  3.27e-06  7.98e-05  8.90e-01  
  6  +2.0010e-01  +2.0010e-01  1.63e-06  4.26e-07  2.16e-06  7.50e-08  2.31e-06  9.74e-01  
  7  +2.0010e-01  +2.0010e-01  1.63e-08  4.25e-09  2.16e-08  7.52e-10  2.32e-08  9.90e-01  
  8  +2.0010e-01  +2.0010e-01  1.63e-10  4.25e-11  2.16e-10  7.52e-12  2.32e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 237.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:07 PM: Optimal value: 2.001e-01
(CVXPY) Aug 31 04:53:07 PM: Compilation took 5.245e-03 seconds
(CVXPY) Aug 31 04:53:07 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:07 PM: Your problem has 30 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:07 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 30
  constraints   = 35
  nnz(P)        = 0
  nnz(A)        = 97
  cones (total) = 1
    : Nonnegative = 1,  numel = 35

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.4689e-01  +6.2289e+00  5.88e+00  7.92e-01  2.73e+00  1.00e+00  1.32e+00   ------   
  1  +2.1191e-01  +9.6151e-01  7.50e-01  2.73e-01  1.02e+00  3.79e-03  5.35e-01  7.69e-01  
  2  +1.4254e-01  +2.8827e-01  1.46e-01  5.92e-02  2.62e-01  6.21e-03  1.60e-01  7.84e-01  
  3  +1.0310e-01  +1.3048e-01  2.74e-02  9.37e-03  4.57e-02  1.42e-03  3.01e-02  8.92e-01  
  4  +1.0027e-01  +1.0072e-01  4.55e-04  1.59e-04  7.71e-04  2.18e-05  5.20e-04  9.83e-01  
  5  +1.0021e-01  +1.0028e-01  6.73e-05  2.62e-05  1.18e-04  2.57e-06  8.69e-05  8.63e-01  
  6  +1.0020e-01  +1.0020e-01  4.28e-06  1.70e-06  7.38e-06  1.87e-07  5.79e-06  9.58e-01  
  7  +1.0020e-01  +1.0020e-01  4.29e-08  1.71e-08  7.41e-08  1.88e-09  5.82e-08  9.90e-01  
  8  +1.0020e-01  +1.0020e-01  4.30e-10  1.71e-10  7.41e-10  1.88e-11  5.82e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:07 PM: Optimal value: 1.002e-01
(CVXPY) Aug 31 04:53:07 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 31 04:53:07 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:08 PM: Your problem has 32 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:08 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 37
  nnz(P)        = 0
  nnz(A)        = 103
  cones (total) = 1
    : Nonnegative = 1,  numel = 37

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3480e-01  +6.2019e+00  5.87e+00  7.97e-01  2.74e+00  1.00e+00  1.30e+00   ------   
  1  +1.7995e-01  +9.3317e-01  7.53e-01  2.77e-01  1.03e+00  3.81e-03  5.27e-01  7.66e-01  
  2  +1.0932e-01  +2.6210e-01  1.53e-01  5.98e-02  2.72e-01  6.22e-03  1.59e-01  7.77e-01  
  3  +1.8677e-02  +7.5001e-02  5.63e-02  1.45e-02  7.86e-02  3.16e-03  4.92e-02  8.29e-01  
  4  +6.5524e-04  +1.7454e-03  1.09e-03  2.78e-04  1.51e-03  6.36e-05  9.88e-04  9.81e-01  
  5  +3.0312e-04  +3.4290e-04  3.98e-05  1.13e-05  5.89e-05  6.04e-07  4.05e-05  9.59e-01  
  6  +3.0003e-04  +3.0082e-04  7.96e-07  2.43e-07  1.20e-06  2.07e-08  8.76e-07  9.79e-01  
  7  +3.0000e-04  +3.0001e-04  7.96e-09  2.43e-09  1.20e-08  2.07e-10  8.77e-09  9.90e-01  
  8  +3.0000e-04  +3.0000e-04  7.96e-11  2.43e-11  1.20e-10  2.07e-12  8.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 111.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:08 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:08 PM: Optimal value: 3.000e-04
(CVXPY) Aug 31 04:53:08 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 31 04:53:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x4 = 0) <-- (term's our objective: 0.4)
 OR (x0 = 0 AND x5 = 0) <-- (term's our objective: 0.6)
 OR (x5 = 0 AND x6 = 0) <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.925006628036499
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.4
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

