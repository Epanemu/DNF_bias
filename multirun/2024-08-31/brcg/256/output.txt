Command:
python test_script.py -s smallest_subclass -d 7 -n 500 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 7.

Computed total variation: 0.34400000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:41 PM: Your problem has 265 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 265
  constraints   = 515
  nnz(P)        = 0
  nnz(A)        = 2515
  cones (total) = 1
    : Nonnegative = 1,  numel = 515

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9970e-01  +2.5067e+02  2.50e+02  9.36e-01  2.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.8752e-01  +5.2931e+01  5.23e+01  3.81e-01  1.38e+01  3.86e-03  5.48e-01  6.11e-01  
  2  +5.3525e-01  +6.7261e+00  6.19e+00  1.22e-01  5.53e+00  1.35e-02  2.44e-01  8.97e-01  
  3  +5.0285e-01  +1.4632e+00  9.60e-01  2.92e-02  1.29e+00  2.51e-05  2.04e-01  5.86e-01  
  4  +5.0054e-01  +6.2311e-01  1.23e-01  3.82e-03  1.75e-01  3.97e-06  4.13e-02  8.25e-01  
  5  +5.0011e-01  +5.8815e-01  8.80e-02  2.54e-03  1.17e-01  5.86e-06  1.48e-02  7.07e-01  
  6  +4.9607e-01  +5.6292e-01  6.69e-02  4.21e-04  1.98e-02  3.77e-05  1.38e-03  9.28e-01  
  7  +4.9098e-01  +5.3651e-01  4.55e-02  2.52e-04  1.19e-02  2.57e-05  8.63e-04  4.49e-01  
  8  +4.8633e-01  +5.1316e-01  2.68e-02  1.37e-04  6.44e-03  1.68e-05  5.11e-04  8.14e-01  
  9  +4.7961e-01  +4.8390e-01  4.29e-03  1.83e-05  8.58e-04  2.25e-06  7.62e-05  8.72e-01  
 10  +4.7819e-01  +4.7846e-01  2.68e-04  1.09e-06  5.09e-05  2.25e-07  4.76e-06  9.90e-01  
 11  +4.7810e-01  +4.7810e-01  2.69e-06  1.09e-08  5.10e-07  2.25e-09  4.78e-08  9.90e-01  
 12  +4.7810e-01  +4.7810e-01  2.69e-08  1.09e-10  5.10e-09  2.25e-11  4.78e-10  9.90e-01  
 13  +4.7810e-01  +4.7810e-01  2.69e-10  1.09e-12  5.10e-11  2.26e-13  4.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9098ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:41 PM: Optimal value: 4.781e-01
(CVXPY) Aug 31 04:53:41 PM: Compilation took 4.000e-03 seconds
(CVXPY) Aug 31 04:53:41 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4781
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:41 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Finished problem compilation (took 3.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 2904
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9934e-01  +2.5101e+02  2.51e+02  9.37e-01  2.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.8444e-01  +5.3144e+01  5.26e+01  3.85e-01  1.40e+01  3.85e-03  5.52e-01  6.09e-01  
  2  +5.3264e-01  +6.4686e+00  5.94e+00  1.17e-01  5.39e+00  1.40e-02  2.36e-01  9.27e-01  
  3  +5.0184e-01  +1.3679e+00  8.66e-01  2.67e-02  1.21e+00  2.69e-05  1.79e-01  7.62e-01  
  4  +4.9996e-01  +7.9763e-01  2.98e-01  9.15e-03  4.26e-01  1.47e-05  6.08e-02  6.91e-01  
  5  +4.8907e-01  +7.3956e-01  2.50e-01  2.46e-03  1.18e-01  7.25e-05  8.12e-03  9.21e-01  
  6  +4.8020e-01  +6.4204e-01  1.62e-01  1.24e-03  5.91e-02  5.81e-05  4.19e-03  5.60e-01  
  7  +4.7708e-01  +6.1599e-01  1.39e-01  9.17e-04  4.38e-02  6.19e-05  3.06e-03  4.28e-01  
  8  +4.6876e-01  +5.4647e-01  7.77e-02  3.97e-04  1.90e-02  5.45e-05  1.33e-03  8.53e-01  
  9  +4.6539e-01  +5.2988e-01  6.45e-02  2.99e-04  1.43e-02  4.94e-05  9.93e-04  4.19e-01  
 10  +4.6219e-01  +5.1515e-01  5.30e-02  2.17e-04  1.05e-02  4.50e-05  7.23e-04  3.82e-01  
 11  +4.5771e-01  +4.8959e-01  3.19e-02  1.36e-04  6.53e-03  3.15e-05  4.63e-04  9.90e-01  
 12  +4.4875e-01  +4.5532e-01  6.57e-03  2.50e-05  1.21e-03  5.76e-06  8.89e-05  8.50e-01  
 13  +4.4698e-01  +4.4852e-01  1.55e-03  5.77e-06  2.81e-04  1.32e-06  2.14e-05  7.64e-01  
 14  +4.4641e-01  +4.4644e-01  2.78e-05  1.03e-07  5.02e-06  2.52e-08  3.93e-07  9.89e-01  
 15  +4.4640e-01  +4.4640e-01  2.78e-07  1.03e-09  5.02e-08  2.52e-10  3.93e-09  9.90e-01  
 16  +4.4640e-01  +4.4640e-01  2.78e-09  1.03e-11  5.02e-10  2.52e-12  3.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1927ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:41 PM: Optimal value: 4.464e-01
(CVXPY) Aug 31 04:53:41 PM: Compilation took 3.001e-03 seconds
(CVXPY) Aug 31 04:53:41 PM: Solver (including time spent in interface) took 3.006e-03 seconds
Iteration: 2, Objective: 0.4464
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:41 PM: Your problem has 285 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Finished problem compilation (took 3.617e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 285
  constraints   = 535
  nnz(P)        = 0
  nnz(A)        = 3121
  cones (total) = 1
    : Nonnegative = 1,  numel = 535

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +2.5124e+02  2.51e+02  9.37e-01  2.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.8309e-01  +5.3179e+01  5.26e+01  3.88e-01  1.39e+01  3.85e-03  5.53e-01  6.09e-01  
  2  +5.3153e-01  +6.3541e+00  5.82e+00  1.15e-01  5.22e+00  1.42e-02  2.31e-01  9.40e-01  
  3  +5.0144e-01  +1.3254e+00  8.24e-01  2.57e-02  1.17e+00  2.80e-05  1.66e-01  8.46e-01  
  4  +4.9935e-01  +8.7612e-01  3.77e-01  1.12e-02  5.20e-01  2.48e-05  5.92e-02  7.08e-01  
  5  +4.8681e-01  +8.2801e-01  3.41e-01  3.33e-03  1.59e-01  1.02e-04  1.06e-02  8.89e-01  
  6  +4.7763e-01  +7.4927e-01  2.72e-01  1.88e-03  9.02e-02  1.18e-04  5.96e-03  5.60e-01  
  7  +4.6426e-01  +6.5543e-01  1.91e-01  1.03e-03  4.95e-02  1.01e-04  3.36e-03  4.99e-01  
  8  +4.5182e-01  +5.6505e-01  1.13e-01  5.72e-04  2.72e-02  8.52e-05  1.98e-03  9.57e-01  
  9  +4.2951e-01  +4.6409e-01  3.46e-02  1.46e-04  6.93e-03  2.44e-05  5.62e-04  7.44e-01  
 10  +4.2072e-01  +4.2783e-01  7.11e-03  2.86e-05  1.36e-03  4.81e-06  1.19e-04  7.96e-01  
 11  +4.1846e-01  +4.1862e-01  1.60e-04  6.38e-07  3.02e-05  1.30e-07  2.70e-06  9.90e-01  
 12  +4.1840e-01  +4.1840e-01  1.60e-06  6.37e-09  3.02e-07  1.30e-09  2.70e-08  9.90e-01  
 13  +4.1840e-01  +4.1840e-01  1.60e-08  6.37e-11  3.02e-09  1.30e-11  2.70e-10  9.90e-01  
 14  +4.1840e-01  +4.1840e-01  1.60e-10  6.37e-13  3.02e-11  1.30e-13  2.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7097ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:41 PM: Optimal value: 4.184e-01
(CVXPY) Aug 31 04:53:41 PM: Compilation took 3.617e-03 seconds
(CVXPY) Aug 31 04:53:41 PM: Solver (including time spent in interface) took 3.003e-03 seconds
Iteration: 3, Objective: 0.4184
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:41 PM: Your problem has 295 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Finished problem compilation (took 2.989e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 295
  constraints   = 545
  nnz(P)        = 0
  nnz(A)        = 3318
  cones (total) = 1
    : Nonnegative = 1,  numel = 545

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +2.5115e+02  2.51e+02  9.38e-01  2.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.8003e-01  +5.3273e+01  5.27e+01  3.91e-01  1.38e+01  3.85e-03  5.54e-01  6.08e-01  
  2  +5.2937e-01  +6.1348e+00  5.61e+00  1.10e-01  4.99e+00  1.46e-02  2.22e-01  9.66e-01  
  3  +5.0074e-01  +1.2730e+00  7.72e-01  2.44e-02  1.11e+00  1.49e-04  1.40e-01  9.90e-01  
  4  +4.9555e-01  +8.8028e-01  3.85e-01  8.65e-03  4.09e-01  1.98e-04  3.12e-02  8.54e-01  
  5  +4.7311e-01  +7.8238e-01  3.09e-01  2.24e-03  1.08e-01  5.63e-04  6.93e-03  8.22e-01  
  6  +4.4693e-01  +6.3905e-01  1.92e-01  1.01e-03  4.81e-02  3.25e-04  3.33e-03  6.74e-01  
  7  +4.1293e-01  +4.6675e-01  5.38e-02  2.53e-04  1.20e-02  3.82e-05  1.00e-03  7.90e-01  
  8  +4.0329e-01  +4.2518e-01  2.19e-02  9.97e-05  4.73e-03  1.57e-05  4.28e-04  6.45e-01  
  9  +3.9712e-01  +3.9845e-01  1.34e-03  5.98e-06  2.84e-04  9.02e-07  2.74e-05  9.52e-01  
 10  +3.9670e-01  +3.9672e-01  1.36e-05  6.06e-08  2.88e-06  9.12e-09  2.79e-07  9.90e-01  
 11  +3.9670e-01  +3.9670e-01  1.36e-07  6.06e-10  2.88e-08  9.12e-11  2.79e-09  9.90e-01  
 12  +3.9670e-01  +3.9670e-01  1.36e-09  6.06e-12  2.88e-10  9.12e-13  2.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5244ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:41 PM: Optimal value: 3.967e-01
(CVXPY) Aug 31 04:53:41 PM: Compilation took 2.989e-03 seconds
(CVXPY) Aug 31 04:53:41 PM: Solver (including time spent in interface) took 3.002e-03 seconds
Iteration: 4, Objective: 0.3967
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:41 PM: Your problem has 305 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Finished problem compilation (took 2.994e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 305
  constraints   = 555
  nnz(P)        = 0
  nnz(A)        = 3446
  cones (total) = 1
    : Nonnegative = 1,  numel = 555

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9899e-01  +2.5126e+02  2.51e+02  9.39e-01  2.30e+01  1.00e+00  1.01e+00   ------   
  1  +5.7729e-01  +5.3302e+01  5.27e+01  3.92e-01  1.37e+01  3.86e-03  5.54e-01  6.08e-01  
  2  +5.2751e-01  +5.9360e+00  5.41e+00  1.05e-01  4.73e+00  1.48e-02  2.13e-01  9.87e-01  
  3  +5.0080e-01  +1.3618e+00  8.61e-01  2.71e-02  1.23e+00  8.13e-04  1.24e-01  9.90e-01  
  4  +4.8981e-01  +1.0402e+00  5.50e-01  7.97e-03  3.82e-01  1.68e-03  2.38e-02  8.93e-01  
  5  +4.6480e-01  +8.6802e-01  4.03e-01  2.58e-03  1.24e-01  2.44e-03  7.59e-03  7.77e-01  
  6  +4.4671e-01  +7.4530e-01  2.99e-01  1.64e-03  7.84e-02  1.51e-03  5.04e-03  4.56e-01  
  7  +4.1157e-01  +5.2605e-01  1.14e-01  5.65e-04  2.67e-02  2.66e-04  1.97e-03  7.19e-01  
  8  +3.9437e-01  +4.3929e-01  4.49e-02  2.12e-04  1.01e-02  8.26e-05  7.99e-04  7.15e-01  
  9  +3.8860e-01  +4.1400e-01  2.54e-02  1.14e-04  5.44e-03  3.93e-05  4.40e-04  6.70e-01  
 10  +3.8195e-01  +3.8512e-01  3.17e-03  1.40e-05  6.67e-04  4.51e-06  5.61e-05  8.87e-01  
 11  +3.8101e-01  +3.8106e-01  4.79e-05  2.12e-07  1.01e-05  6.50e-08  8.55e-07  9.85e-01  
 12  +3.8100e-01  +3.8100e-01  4.82e-07  2.13e-09  1.01e-07  6.53e-10  8.59e-09  9.90e-01  
 13  +3.8100e-01  +3.8100e-01  4.82e-09  2.13e-11  1.01e-09  6.54e-12  8.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6124ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:41 PM: Optimal value: 3.810e-01
(CVXPY) Aug 31 04:53:41 PM: Compilation took 2.994e-03 seconds
(CVXPY) Aug 31 04:53:41 PM: Solver (including time spent in interface) took 3.998e-03 seconds
Iteration: 5, Objective: 0.3810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:41 PM: Your problem has 315 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Finished problem compilation (took 4.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 315
  constraints   = 565
  nnz(P)        = 0
  nnz(A)        = 3587
  cones (total) = 1
    : Nonnegative = 1,  numel = 565

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9883e-01  +2.5134e+02  2.51e+02  9.39e-01  2.29e+01  1.00e+00  1.01e+00   ------   
  1  +5.7469e-01  +5.3513e+01  5.29e+01  3.97e-01  1.36e+01  3.86e-03  5.57e-01  6.05e-01  
  2  +5.2625e-01  +6.0030e+00  5.48e+00  1.05e-01  4.71e+00  1.52e-02  2.14e-01  9.90e-01  
  3  +5.0199e-01  +1.3124e+00  8.10e-01  2.59e-02  1.20e+00  6.46e-04  9.29e-02  9.90e-01  
  4  +4.9037e-01  +1.3109e+00  8.21e-01  8.96e-03  4.33e-01  1.79e-03  2.44e-02  8.33e-01  
  5  +4.6453e-01  +9.5304e-01  4.89e-01  3.14e-03  1.51e-01  1.60e-03  8.98e-03  6.70e-01  
  6  +4.4447e-01  +8.2784e-01  3.83e-01  1.95e-03  9.35e-02  1.32e-03  5.87e-03  3.93e-01  
  7  +4.1609e-01  +5.9871e-01  1.83e-01  9.55e-04  4.50e-02  2.27e-04  3.29e-03  6.98e-01  
  8  +3.9136e-01  +4.5366e-01  6.23e-02  3.08e-04  1.45e-02  6.19e-05  1.20e-03  6.88e-01  
  9  +3.8295e-01  +4.1232e-01  2.94e-02  1.39e-04  6.59e-03  2.79e-05  5.77e-04  7.17e-01  
 10  +3.7598e-01  +3.7903e-01  3.05e-03  1.43e-05  6.75e-04  2.59e-06  6.34e-05  9.18e-01  
 11  +3.7513e-01  +3.7523e-01  9.80e-05  4.58e-07  2.17e-05  7.97e-08  2.07e-06  9.68e-01  
 12  +3.7510e-01  +3.7510e-01  9.94e-07  4.65e-09  2.20e-07  8.08e-10  2.10e-08  9.90e-01  
 13  +3.7510e-01  +3.7510e-01  9.96e-09  4.66e-11  2.20e-09  8.10e-12  2.11e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3156ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:41 PM: Optimal value: 3.751e-01
(CVXPY) Aug 31 04:53:41 PM: Compilation took 4.004e-03 seconds
(CVXPY) Aug 31 04:53:41 PM: Solver (including time spent in interface) took 4.000e-03 seconds
Iteration: 6, Objective: 0.3751
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:41 PM: Your problem has 325 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:41 PM: Finished problem compilation (took 3.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 325
  constraints   = 575
  nnz(P)        = 0
  nnz(A)        = 3694
  cones (total) = 1
    : Nonnegative = 1,  numel = 575

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9871e-01  +2.5137e+02  2.51e+02  9.40e-01  2.27e+01  1.00e+00  1.01e+00   ------   
  1  +5.7228e-01  +5.3628e+01  5.31e+01  4.00e-01  1.35e+01  3.85e-03  5.59e-01  6.04e-01  
  2  +5.2476e-01  +6.0812e+00  5.56e+00  1.06e-01  4.70e+00  1.55e-02  2.15e-01  9.90e-01  
  3  +5.0336e-01  +1.3119e+00  8.09e-01  2.42e-02  1.14e+00  1.16e-03  7.36e-02  9.25e-01  
  4  +4.9778e-01  +1.3869e+00  8.89e-01  1.18e-02  5.74e-01  2.41e-03  3.11e-02  6.65e-01  
  5  +4.7858e-01  +1.1013e+00  6.23e-01  4.69e-03  2.27e-01  2.56e-03  1.27e-02  6.51e-01  
  6  +4.6041e-01  +9.8297e-01  5.23e-01  2.89e-03  1.39e-01  2.34e-03  8.19e-03  4.35e-01  
  7  +4.3406e-01  +7.3300e-01  2.99e-01  1.66e-03  7.83e-02  3.85e-04  5.20e-03  6.64e-01  
  8  +3.9506e-01  +4.7003e-01  7.50e-02  3.81e-04  1.78e-02  4.91e-05  1.40e-03  8.06e-01  
  9  +3.9201e-01  +4.5820e-01  6.62e-02  3.20e-04  1.50e-02  4.79e-05  1.19e-03  3.04e-01  
 10  +3.8121e-01  +4.0932e-01  2.81e-02  1.29e-04  6.03e-03  2.13e-05  5.11e-04  6.44e-01  
 11  +3.7450e-01  +3.7886e-01  4.35e-03  1.96e-05  9.19e-04  3.42e-06  8.18e-05  8.99e-01  
 12  +3.7329e-01  +3.7361e-01  3.11e-04  1.40e-06  6.55e-05  2.40e-07  5.91e-06  9.29e-01  
 13  +3.7320e-01  +3.7320e-01  3.37e-06  1.51e-08  7.09e-07  2.59e-09  6.41e-08  9.89e-01  
 14  +3.7320e-01  +3.7320e-01  3.37e-08  1.51e-10  7.10e-09  2.59e-11  6.41e-10  9.90e-01  
 15  +3.7320e-01  +3.7320e-01  3.37e-10  1.51e-12  7.10e-11  2.59e-13  6.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6526ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:41 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:41 PM: Optimal value: 3.732e-01
(CVXPY) Aug 31 04:53:41 PM: Compilation took 3.008e-03 seconds
(CVXPY) Aug 31 04:53:41 PM: Solver (including time spent in interface) took 4.000e-03 seconds
Iteration: 7, Objective: 0.3732
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:42 PM: Your problem has 335 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:42 PM: Finished problem compilation (took 4.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 335
  constraints   = 585
  nnz(P)        = 0
  nnz(A)        = 3800
  cones (total) = 1
    : Nonnegative = 1,  numel = 585

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5140e+02  2.51e+02  9.40e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.7138e-01  +5.3702e+01  5.31e+01  4.02e-01  1.33e+01  3.85e-03  5.60e-01  6.03e-01  
  2  +5.2426e-01  +6.1131e+00  5.59e+00  1.06e-01  4.64e+00  1.56e-02  2.16e-01  9.90e-01  
  3  +5.0365e-01  +1.3097e+00  8.06e-01  2.34e-02  1.09e+00  1.31e-03  6.93e-02  9.07e-01  
  4  +4.9870e-01  +1.3414e+00  8.43e-01  1.17e-02  5.60e-01  2.54e-03  3.07e-02  6.11e-01  
  5  +4.8104e-01  +1.1159e+00  6.35e-01  4.94e-03  2.37e-01  2.80e-03  1.33e-02  6.50e-01  
  6  +4.6008e-01  +9.7870e-01  5.19e-01  2.81e-03  1.34e-01  2.57e-03  7.99e-03  4.86e-01  
  7  +4.3739e-01  +7.5902e-01  3.22e-01  1.92e-03  9.02e-02  4.71e-04  6.05e-03  5.55e-01  
  8  +4.0146e-01  +5.1771e-01  1.16e-01  6.05e-04  2.80e-02  1.25e-04  2.15e-03  6.98e-01  
  9  +3.9374e-01  +4.8235e-01  8.86e-02  4.28e-04  1.98e-02  9.56e-05  1.57e-03  5.23e-01  
 10  +3.8407e-01  +4.3670e-01  5.26e-02  2.41e-04  1.12e-02  5.66e-05  9.29e-04  4.54e-01  
 11  +3.7235e-01  +3.8265e-01  1.03e-02  4.53e-05  2.10e-03  1.02e-05  1.88e-04  8.32e-01  
 12  +3.6989e-01  +3.7199e-01  2.09e-03  9.13e-06  4.22e-04  2.04e-06  3.89e-05  8.16e-01  
 13  +3.6930e-01  +3.6959e-01  2.88e-04  1.23e-06  5.69e-05  2.68e-07  5.37e-06  9.29e-01  
 14  +3.6920e-01  +3.6920e-01  3.02e-06  1.29e-08  5.94e-07  2.79e-09  5.63e-08  9.90e-01  
 15  +3.6920e-01  +3.6920e-01  3.02e-08  1.29e-10  5.94e-09  2.79e-11  5.63e-10  9.90e-01  
 16  +3.6920e-01  +3.6920e-01  3.02e-10  1.29e-12  5.94e-11  2.80e-13  5.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9092ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:42 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:42 PM: Optimal value: 3.692e-01
(CVXPY) Aug 31 04:53:42 PM: Compilation took 4.009e-03 seconds
(CVXPY) Aug 31 04:53:42 PM: Solver (including time spent in interface) took 4.777e-03 seconds
Iteration: 8, Objective: 0.3692
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:42 PM: Your problem has 345 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:42 PM: Finished problem compilation (took 3.019e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 345
  constraints   = 595
  nnz(P)        = 0
  nnz(A)        = 3891
  cones (total) = 1
    : Nonnegative = 1,  numel = 595

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9862e-01  +2.5137e+02  2.51e+02  9.41e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.7004e-01  +5.3746e+01  5.32e+01  4.04e-01  1.32e+01  3.86e-03  5.61e-01  6.03e-01  
  2  +5.2349e-01  +6.1471e+00  5.62e+00  1.06e-01  4.57e+00  1.57e-02  2.16e-01  9.90e-01  
  3  +5.0463e-01  +1.4737e+00  9.69e-01  2.64e-02  1.23e+00  2.00e-03  7.44e-02  8.23e-01  
  4  +5.0088e-01  +1.4627e+00  9.62e-01  1.49e-02  7.06e-01  3.17e-03  3.90e-02  5.11e-01  
  5  +4.8706e-01  +1.2980e+00  8.11e-01  6.85e-03  3.28e-01  3.82e-03  1.81e-02  6.38e-01  
  6  +4.6491e-01  +1.0663e+00  6.01e-01  3.76e-03  1.78e-01  2.94e-03  1.06e-02  5.10e-01  
  7  +4.4798e-01  +9.2798e-01  4.80e-01  2.61e-03  1.23e-01  1.94e-03  7.73e-03  4.11e-01  
  8  +4.2223e-01  +7.0449e-01  2.82e-01  1.53e-03  7.08e-02  6.36e-04  5.00e-03  5.44e-01  
  9  +3.9120e-01  +4.9774e-01  1.07e-01  5.41e-04  2.48e-02  1.74e-04  2.00e-03  6.54e-01  
 10  +3.8254e-01  +4.5904e-01  7.65e-02  3.65e-04  1.67e-02  1.06e-04  1.41e-03  5.68e-01  
 11  +3.6769e-01  +3.8906e-01  2.14e-02  9.70e-05  4.44e-03  2.70e-05  4.09e-04  7.53e-01  
 12  +3.6241e-01  +3.6575e-01  3.34e-03  1.49e-05  6.82e-04  3.96e-06  6.58e-05  8.55e-01  
 13  +3.6144e-01  +3.6157e-01  1.33e-04  5.89e-07  2.69e-05  1.45e-07  2.64e-06  9.65e-01  
 14  +3.6140e-01  +3.6140e-01  1.33e-06  5.91e-09  2.71e-07  1.45e-09  2.66e-08  9.90e-01  
 15  +3.6140e-01  +3.6140e-01  1.33e-08  5.91e-11  2.71e-09  1.45e-11  2.66e-10  9.90e-01  
 16  +3.6140e-01  +3.6140e-01  1.33e-10  5.91e-13  2.71e-11  1.46e-13  2.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.8721ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:42 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:42 PM: Optimal value: 3.614e-01
(CVXPY) Aug 31 04:53:42 PM: Compilation took 3.019e-03 seconds
(CVXPY) Aug 31 04:53:42 PM: Solver (including time spent in interface) took 5.107e-03 seconds
Iteration: 9, Objective: 0.3614
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:42 PM: Your problem has 355 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:42 PM: Finished problem compilation (took 3.069e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 355
  constraints   = 605
  nnz(P)        = 0
  nnz(A)        = 4020
  cones (total) = 1
    : Nonnegative = 1,  numel = 605

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9858e-01  +2.5137e+02  2.51e+02  9.41e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.6875e-01  +5.3836e+01  5.33e+01  4.07e-01  1.31e+01  3.86e-03  5.62e-01  6.01e-01  
  2  +5.2226e-01  +6.1910e+00  5.67e+00  1.06e-01  4.54e+00  1.59e-02  2.17e-01  9.90e-01  
  3  +5.0436e-01  +1.3488e+00  8.44e-01  2.18e-02  1.02e+00  1.89e-03  6.08e-02  8.40e-01  
  4  +5.0174e-01  +1.4003e+00  8.99e-01  1.39e-02  6.61e-01  2.89e-03  3.64e-02  4.78e-01  
  5  +4.8974e-01  +1.3221e+00  8.32e-01  7.37e-03  3.51e-01  3.30e-03  1.94e-02  6.41e-01  
  6  +4.6737e-01  +1.0635e+00  5.96e-01  3.98e-03  1.87e-01  2.31e-03  1.12e-02  5.21e-01  
  7  +4.5056e-01  +9.2966e-01  4.79e-01  2.77e-03  1.29e-01  1.58e-03  8.21e-03  3.99e-01  
  8  +4.2788e-01  +7.4241e-01  3.15e-01  1.81e-03  8.35e-02  4.15e-04  5.89e-03  6.31e-01  
  9  +3.9212e-01  +5.0573e-01  1.14e-01  5.86e-04  2.67e-02  1.06e-04  2.16e-03  6.98e-01  
 10  +3.8075e-01  +4.5719e-01  7.64e-02  3.69e-04  1.68e-02  7.11e-05  1.43e-03  5.47e-01  
 11  +3.6824e-01  +3.9849e-01  3.03e-02  1.40e-04  6.37e-03  2.75e-05  5.81e-04  6.35e-01  
 12  +3.6106e-01  +3.6605e-01  4.99e-03  2.26e-05  1.03e-03  4.32e-06  9.87e-05  8.78e-01  
 13  +3.5996e-01  +3.6123e-01  1.27e-03  5.73e-06  2.61e-04  1.07e-06  2.55e-05  9.90e-01  
 14  +3.5953e-01  +3.5961e-01  8.26e-05  3.72e-07  1.69e-05  6.87e-08  1.67e-06  9.36e-01  
 15  +3.5950e-01  +3.5950e-01  8.47e-07  3.81e-09  1.73e-07  7.04e-10  1.71e-08  9.90e-01  
 16  +3.5950e-01  +3.5950e-01  8.48e-09  3.81e-11  1.74e-09  7.05e-12  1.71e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.3791ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:42 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:42 PM: Optimal value: 3.595e-01
(CVXPY) Aug 31 04:53:42 PM: Compilation took 3.069e-03 seconds
(CVXPY) Aug 31 04:53:42 PM: Solver (including time spent in interface) took 4.707e-03 seconds
FULL MODEL:
  Accruacy: 0.582
  Our objective: 0.16400000000000003

IF 
    (x6 = 1 AND x0 = 0 AND x4 = 0)                                             <-- (term's our objective: 0.06800000000000005)
 OR (x0 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x3 = 0)                       <-- (term's our objective: 0.02400000000000003)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.02000000000000002)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x4 = 0)            <-- (term's our objective: 0.020000000000000018)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.020000000000000018)
 OR (x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x6 = 0)            <-- (term's our objective: 0.012000000000000014)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x0 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.012000000000000014)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x3 = 0) <-- (term's our objective: 0.004000000000000007)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.2980992794036865
Best over terms:
  Our final objective: 0.06800000000000005
    Its accruacy: 0.534
    Its hamming distance: 6
  Shortest hamming distance: 3
    Its our objective: 0.02000000000000002
  Highest accruacy: 0.534
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

