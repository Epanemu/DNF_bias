Command:
python test_script.py -s smallest_subclass -d 4 -n 500 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.084
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.13999999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:44 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:44 PM: Finished problem compilation (took 3.994e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +2.5074e+02  2.50e+02  9.32e-01  1.85e+01  1.00e+00  1.01e+00   ------   
  1  +6.0729e-01  +4.8855e+01  4.82e+01  3.19e-01  1.01e+01  4.10e-03  4.76e-01  6.68e-01  
  2  +5.4778e-01  +7.6729e+00  7.13e+00  1.13e-01  4.28e+00  8.47e-03  2.17e-01  7.55e-01  
  3  +5.0109e-01  +1.2787e+00  7.78e-01  2.31e-02  8.48e-01  1.21e-03  1.94e-01  4.49e-01  
  4  +5.0006e-01  +6.5265e-01  1.53e-01  4.57e-03  1.72e-01  2.75e-04  4.23e-02  8.14e-01  
  5  +4.9347e-01  +6.7358e-01  1.80e-01  1.75e-03  6.74e-02  1.76e-03  5.72e-03  9.29e-01  
  6  +4.7814e-01  +5.7709e-01  9.90e-02  4.52e-04  1.74e-02  2.31e-03  1.47e-03  7.56e-01  
  7  +4.6337e-01  +4.8606e-01  2.27e-02  1.00e-04  3.85e-03  7.72e-05  3.66e-04  9.11e-01  
  8  +4.5756e-01  +4.6166e-01  4.11e-03  1.61e-05  6.19e-04  4.84e-06  6.57e-05  9.90e-01  
  9  +4.5612e-01  +4.5617e-01  4.84e-05  1.86e-07  7.15e-06  5.58e-08  7.78e-07  9.88e-01  
 10  +4.5610e-01  +4.5610e-01  4.84e-07  1.86e-09  7.15e-08  5.58e-10  7.78e-09  9.90e-01  
 11  +4.5610e-01  +4.5610e-01  4.84e-09  1.86e-11  7.15e-10  5.59e-12  7.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1676ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:44 PM: Optimal value: 4.561e-01
(CVXPY) Aug 31 04:46:44 PM: Compilation took 3.994e-03 seconds
(CVXPY) Aug 31 04:46:44 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4561
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:44 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:44 PM: Finished problem compilation (took 1.926e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 2231
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +2.5111e+02  2.51e+02  9.33e-01  1.95e+01  1.00e+00  1.01e+00   ------   
  1  +6.0427e-01  +4.9369e+01  4.88e+01  3.28e-01  1.07e+01  4.07e-03  4.87e-01  6.62e-01  
  2  +5.4514e-01  +7.4182e+00  6.87e+00  1.11e-01  4.37e+00  9.03e-03  2.16e-01  7.81e-01  
  3  +5.0124e-01  +1.3387e+00  8.37e-01  2.53e-02  9.72e-01  1.31e-03  1.89e-01  4.86e-01  
  4  +5.0002e-01  +8.2125e-01  3.21e-01  9.69e-03  3.81e-01  6.05e-04  7.10e-02  6.76e-01  
  5  +4.8847e-01  +1.2989e+00  8.10e-01  5.91e-03  2.38e-01  3.83e-03  1.94e-02  9.70e-01  
  6  +4.7627e-01  +7.9887e-01  3.23e-01  1.95e-03  7.89e-02  1.38e-03  6.80e-03  6.94e-01  
  7  +4.6604e-01  +5.8657e-01  1.21e-01  6.91e-04  2.79e-02  3.29e-04  2.49e-03  7.91e-01  
  8  +4.6204e-01  +5.6541e-01  1.03e-01  4.56e-04  1.84e-02  3.03e-04  1.57e-03  5.42e-01  
  9  +4.5790e-01  +5.3593e-01  7.80e-02  3.02e-04  1.22e-02  1.96e-04  1.05e-03  5.24e-01  
 10  +4.5350e-01  +4.9767e-01  4.42e-02  1.89e-04  7.62e-03  2.23e-05  6.89e-04  9.90e-01  
 11  +4.4357e-01  +4.5983e-01  1.63e-02  6.17e-05  2.49e-03  8.60e-06  2.37e-04  6.83e-01  
 12  +4.3842e-01  +4.3902e-01  5.99e-04  2.24e-06  9.03e-05  2.65e-07  9.05e-06  9.67e-01  
 13  +4.3820e-01  +4.3821e-01  6.00e-06  2.25e-08  9.05e-07  2.64e-09  9.11e-08  9.90e-01  
 14  +4.3820e-01  +4.3820e-01  6.00e-08  2.25e-10  9.05e-09  2.64e-11  9.11e-10  9.90e-01  
 15  +4.3820e-01  +4.3820e-01  6.00e-10  2.25e-12  9.05e-11  2.64e-13  9.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5942ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:44 PM: Optimal value: 4.382e-01
(CVXPY) Aug 31 04:46:44 PM: Compilation took 1.926e-03 seconds
(CVXPY) Aug 31 04:46:44 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 2, Objective: 0.4382
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:44 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:44 PM: Finished problem compilation (took 2.974e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2331
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9920e-01  +2.5104e+02  2.51e+02  9.33e-01  1.97e+01  1.00e+00  1.02e+00   ------   
  1  +6.0358e-01  +4.9501e+01  4.89e+01  3.30e-01  1.08e+01  4.06e-03  4.90e-01  6.60e-01  
  2  +5.4481e-01  +7.3937e+00  6.85e+00  1.11e-01  4.40e+00  9.16e-03  2.16e-01  7.86e-01  
  3  +5.0071e-01  +1.2649e+00  7.64e-01  2.32e-02  8.99e-01  1.18e-03  1.86e-01  5.42e-01  
  4  +4.9984e-01  +8.5304e-01  3.53e-01  1.06e-02  4.21e-01  6.46e-04  7.91e-02  6.28e-01  
  5  +4.8632e-01  +1.0294e+00  5.43e-01  4.28e-03  1.74e-01  3.54e-03  1.44e-02  9.90e-01  
  6  +4.7627e-01  +7.3663e-01  2.60e-01  1.60e-03  6.54e-02  1.36e-03  5.50e-03  7.32e-01  
  7  +4.7886e-01  +7.6310e-01  2.84e-01  1.54e-03  6.31e-02  1.32e-03  5.08e-03  2.99e-01  
  8  +4.6618e-01  +6.5648e-01  1.90e-01  8.54e-04  3.49e-02  8.88e-04  2.90e-03  4.74e-01  
  9  +4.5052e-01  +5.1805e-01  6.75e-02  2.97e-04  1.21e-02  8.45e-06  1.09e-03  9.30e-01  
 10  +4.3730e-01  +4.5609e-01  1.88e-02  7.83e-05  3.18e-03  3.56e-06  3.04e-04  7.44e-01  
 11  +4.3607e-01  +4.5335e-01  1.73e-02  6.66e-05  2.70e-03  5.72e-06  2.53e-04  3.01e-01  
 12  +4.3095e-01  +4.3262e-01  1.67e-03  6.34e-06  2.57e-04  1.71e-06  2.52e-05  9.90e-01  
 13  +4.3031e-01  +4.3033e-01  1.80e-05  6.82e-08  2.77e-06  1.78e-08  2.73e-07  9.90e-01  
 14  +4.3030e-01  +4.3030e-01  1.80e-07  6.82e-10  2.77e-08  1.78e-10  2.73e-09  9.90e-01  
 15  +4.3030e-01  +4.3030e-01  1.80e-09  6.82e-12  2.77e-10  1.78e-12  2.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6228ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:44 PM: Optimal value: 4.303e-01
(CVXPY) Aug 31 04:46:44 PM: Compilation took 2.974e-03 seconds
(CVXPY) Aug 31 04:46:44 PM: Solver (including time spent in interface) took 2.001e-03 seconds
Iteration: 3, Objective: 0.4303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:44 PM: Your problem has 274 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:44 PM: Finished problem compilation (took 3.994e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 274
  constraints   = 524
  nnz(P)        = 0
  nnz(A)        = 2421
  cones (total) = 1
    : Nonnegative = 1,  numel = 524

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +2.5103e+02  2.51e+02  9.33e-01  1.98e+01  1.00e+00  1.02e+00   ------   
  1  +6.0285e-01  +4.9561e+01  4.90e+01  3.31e-01  1.08e+01  4.06e-03  4.90e-01  6.59e-01  
  2  +5.4446e-01  +7.3579e+00  6.81e+00  1.10e-01  4.38e+00  9.22e-03  2.15e-01  7.90e-01  
  3  +5.0062e-01  +1.2633e+00  7.63e-01  2.32e-02  9.02e-01  1.19e-03  1.84e-01  5.57e-01  
  4  +4.9967e-01  +8.7914e-01  3.79e-01  1.14e-02  4.53e-01  7.23e-04  8.11e-02  6.07e-01  
  5  +4.8858e-01  +1.0728e+00  5.84e-01  5.47e-03  2.23e-01  3.09e-03  1.82e-02  9.90e-01  
  6  +4.7812e-01  +8.3404e-01  3.56e-01  2.34e-03  9.60e-02  2.24e-03  7.94e-03  6.17e-01  
  7  +4.7197e-01  +7.0622e-01  2.34e-01  1.18e-03  4.85e-02  9.72e-04  3.96e-03  7.88e-01  
  8  +4.5874e-01  +5.7611e-01  1.17e-01  5.79e-04  2.37e-02  1.20e-04  2.08e-03  7.68e-01  
  9  +4.3734e-01  +4.5734e-01  2.00e-02  8.85e-05  3.61e-03  1.16e-05  3.50e-04  8.78e-01  
 10  +4.3650e-01  +4.5573e-01  1.92e-02  7.77e-05  3.17e-03  1.29e-05  2.99e-04  2.40e-01  
 11  +4.3179e-01  +4.3580e-01  4.01e-03  1.60e-05  6.53e-04  4.13e-06  6.43e-05  9.90e-01  
 12  +4.3119e-01  +4.3358e-01  2.39e-03  9.38e-06  3.82e-04  2.54e-06  3.71e-05  4.57e-01  
 13  +4.3060e-01  +4.3137e-01  7.73e-04  3.04e-06  1.24e-04  8.15e-07  1.21e-05  9.90e-01  
 14  +4.3031e-01  +4.3032e-01  1.62e-05  6.36e-08  2.59e-06  1.64e-08  2.55e-07  9.82e-01  
 15  +4.3030e-01  +4.3030e-01  1.63e-07  6.37e-10  2.59e-08  1.65e-10  2.55e-09  9.90e-01  
 16  +4.3030e-01  +4.3030e-01  1.63e-09  6.37e-12  2.59e-10  1.65e-12  2.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.738ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:44 PM: Optimal value: 4.303e-01
(CVXPY) Aug 31 04:46:44 PM: Compilation took 3.994e-03 seconds
(CVXPY) Aug 31 04:46:44 PM: Solver (including time spent in interface) took 2.024e-03 seconds
Iteration: 4, Objective: 0.4303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:44 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:44 PM: Finished problem compilation (took 3.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 2452
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9913e-01  +2.5105e+02  2.51e+02  9.33e-01  1.98e+01  1.00e+00  1.02e+00   ------   
  1  +6.0238e-01  +4.9627e+01  4.90e+01  3.32e-01  1.08e+01  4.06e-03  4.92e-01  6.58e-01  
  2  +5.4432e-01  +7.3477e+00  6.80e+00  1.10e-01  4.37e+00  9.28e-03  2.15e-01  7.92e-01  
  3  +5.0036e-01  +1.2294e+00  7.29e-01  2.22e-02  8.65e-01  1.14e-03  1.82e-01  5.88e-01  
  4  +4.9954e-01  +9.2359e-01  4.24e-01  1.27e-02  5.06e-01  7.93e-04  9.18e-02  5.32e-01  
  5  +4.9067e-01  +1.1784e+00  6.88e-01  7.63e-03  3.10e-01  2.76e-03  2.58e-02  9.90e-01  
  6  +4.8805e-01  +9.1269e-01  4.25e-01  3.57e-03  1.46e-01  1.19e-03  1.19e-02  7.68e-01  
  7  +4.7647e-01  +7.4325e-01  2.67e-01  1.63e-03  6.70e-02  8.06e-04  5.56e-03  6.14e-01  
  8  +4.7573e-01  +7.1941e-01  2.44e-01  1.47e-03  6.04e-02  5.66e-04  4.99e-03  3.09e-01  
  9  +4.7393e-01  +7.0034e-01  2.26e-01  1.18e-03  4.84e-02  4.29e-04  3.96e-03  4.88e-01  
 10  +4.5135e-01  +5.2472e-01  7.34e-02  3.47e-04  1.42e-02  4.95e-06  1.29e-03  9.56e-01  
 11  +4.3891e-01  +4.6577e-01  2.69e-02  1.19e-04  4.84e-03  4.13e-06  4.66e-04  6.75e-01  
 12  +4.3406e-01  +4.4509e-01  1.10e-02  4.89e-05  1.99e-03  6.61e-06  2.03e-04  8.30e-01  
 13  +4.3257e-01  +4.3959e-01  7.02e-03  3.01e-05  1.22e-03  4.83e-06  1.23e-04  5.24e-01  
 14  +4.3249e-01  +4.3916e-01  6.67e-03  2.86e-05  1.16e-03  4.84e-06  1.18e-04  2.16e-01  
 15  +4.3121e-01  +4.3387e-01  2.66e-03  1.12e-05  4.55e-04  1.98e-06  4.64e-05  6.19e-01  
 16  +4.3063e-01  +4.3146e-01  8.37e-04  3.37e-06  1.38e-04  7.43e-07  1.36e-05  7.78e-01  
 17  +4.3042e-01  +4.3072e-01  3.01e-04  1.24e-06  5.06e-05  2.15e-07  5.11e-06  8.89e-01  
 18  +4.3032e-01  +4.3037e-01  5.03e-05  1.97e-07  8.05e-06  4.38e-08  7.92e-07  8.87e-01  
 19  +4.3030e-01  +4.3030e-01  5.10e-07  2.00e-09  8.16e-08  4.45e-10  8.03e-09  9.90e-01  
 20  +4.3030e-01  +4.3030e-01  5.10e-09  2.00e-11  8.16e-10  4.45e-12  8.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4142ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:44 PM: Optimal value: 4.303e-01
(CVXPY) Aug 31 04:46:44 PM: Compilation took 3.002e-03 seconds
(CVXPY) Aug 31 04:46:44 PM: Solver (including time spent in interface) took 2.993e-03 seconds
FULL MODEL:
  Accruacy: 0.57
  Our objective: 0.14

IF 
    (x1 = 1 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.020000000000000046)
 OR (x2 = 1 AND x3 = 1 AND x1 = 0)            <-- (term's our objective: 0.03600000000000002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.08399999999999998)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.5333871841430664
Best over terms:
  Our final objective: 0.08399999999999998
    Its accruacy: 0.542
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.08399999999999998
  Highest accruacy: 0.542
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

