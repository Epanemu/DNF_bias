Command:
python test_script.py -s smallest_subclass -d 8 -n 5000 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.006
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 8.

Computed total variation: 0.1924
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:02 PM: Your problem has 2517 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Finished problem compilation (took 1.376e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2517
  constraints   = 5017
  nnz(P)        = 0
  nnz(A)        = 27517
  cones (total) = 1
    : Nonnegative = 1,  numel = 5017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3495e+02  5.34e+02  4.16e-01  4.97e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3470e-01  +6.3377e+01  6.28e+01  1.59e-01  2.42e+01  1.47e-02  2.65e-01  9.01e-01  
  3  +5.0901e-01  +1.6337e+01  1.58e+01  1.06e-01  1.58e+01  3.91e-05  2.51e-01  2.27e-01  
  4  +5.0052e-01  +1.1571e+00  6.57e-01  6.37e-03  9.90e-01  6.15e-06  1.14e-01  9.35e-01  
  5  +5.0004e-01  +5.6560e-01  6.56e-02  6.20e-04  9.72e-02  5.66e-06  2.14e-02  9.90e-01  
  6  +5.0004e-01  +5.6472e-01  6.47e-02  6.03e-04  9.46e-02  9.54e-06  8.96e-03  6.89e-01  
  7  +4.9996e-01  +5.6160e-01  6.16e-02  3.22e-04  5.07e-02  5.19e-05  1.29e-03  8.68e-01  
  8  +4.9913e-01  +5.5955e-01  6.04e-02  3.85e-05  6.08e-03  5.20e-04  1.21e-04  9.06e-01  
  9  +4.9749e-01  +5.4702e-01  4.95e-02  3.08e-05  4.87e-03  3.18e-04  9.85e-05  3.59e-01  
 10  +4.9454e-01  +5.3043e-01  3.59e-02  2.09e-05  3.29e-03  1.71e-04  6.91e-05  4.14e-01  
 11  +4.9213e-01  +5.1714e-01  2.50e-02  1.38e-05  2.17e-03  1.72e-06  4.81e-05  8.19e-01  
 12  +4.8847e-01  +5.0131e-01  1.28e-02  6.05e-06  9.54e-04  8.70e-07  2.25e-05  6.11e-01  
 13  +4.8679e-01  +4.9424e-01  7.45e-03  3.21e-06  5.07e-04  6.55e-07  1.24e-05  9.90e-01  
 14  +4.8446e-01  +4.8491e-01  4.50e-04  1.82e-07  2.88e-05  3.59e-08  7.53e-07  9.57e-01  
 15  +4.8430e-01  +4.8431e-01  5.51e-06  2.22e-09  3.51e-07  4.53e-10  9.22e-09  9.90e-01  
 16  +4.8430e-01  +4.8430e-01  5.51e-08  2.22e-11  3.51e-09  4.53e-12  9.22e-11  9.90e-01  
 17  +4.8430e-01  +4.8430e-01  5.51e-10  2.22e-13  3.51e-11  4.64e-14  9.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.8396ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:02 PM: Optimal value: 4.843e-01
(CVXPY) Aug 31 05:00:02 PM: Compilation took 1.376e-02 seconds
(CVXPY) Aug 31 05:00:02 PM: Solver (including time spent in interface) took 4.630e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4843
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:02 PM: Your problem has 2527 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Finished problem compilation (took 1.200e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2527
  constraints   = 5027
  nnz(P)        = 0
  nnz(A)        = 31759
  cones (total) = 1
    : Nonnegative = 1,  numel = 5027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.80e-01  8.04e+01  1.00e+00  1.00e+00   ------   
  1  +5.8397e-01  +5.3522e+02  5.35e+02  4.16e-01  5.12e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3445e-01  +6.3128e+01  6.26e+01  1.58e-01  2.49e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0894e-01  +1.6254e+01  1.57e+01  1.05e-01  1.62e+01  3.93e-05  2.51e-01  2.32e-01  
  4  +5.0062e-01  +1.3448e+00  8.44e-01  8.20e-03  1.31e+00  6.64e-06  1.29e-01  8.28e-01  
  5  +5.0009e-01  +6.8516e-01  1.85e-01  1.75e-03  2.83e-01  5.86e-06  4.90e-02  7.55e-01  
  6  +5.0004e-01  +6.3878e-01  1.39e-01  1.30e-03  2.11e-01  7.02e-06  2.08e-02  6.40e-01  
  7  +4.9973e-01  +6.2406e-01  1.24e-01  6.60e-04  1.07e-01  3.78e-05  2.67e-03  8.93e-01  
  8  +4.9746e-01  +5.9296e-01  9.55e-02  9.06e-05  1.48e-02  2.16e-04  2.91e-04  9.90e-01  
  9  +4.9633e-01  +5.8426e-01  8.79e-02  7.70e-05  1.25e-02  1.86e-04  2.47e-04  2.32e-01  
 10  +4.9529e-01  +5.7710e-01  8.18e-02  6.48e-05  1.06e-02  1.50e-04  2.07e-04  3.07e-01  
 11  +4.9368e-01  +5.6783e-01  7.42e-02  4.93e-05  8.02e-03  1.12e-04  1.57e-04  4.39e-01  
 12  +4.9295e-01  +5.6542e-01  7.25e-02  4.13e-05  6.73e-03  4.74e-05  1.32e-04  6.46e-01  
 13  +4.9171e-01  +5.5992e-01  6.82e-02  3.88e-05  6.32e-03  3.60e-05  1.25e-04  2.04e-01  
 14  +4.8823e-01  +5.4463e-01  5.64e-02  2.67e-05  4.34e-03  2.70e-05  8.79e-05  4.28e-01  
 15  +4.8355e-01  +5.2443e-01  4.09e-02  1.71e-05  2.79e-03  1.09e-05  5.78e-05  6.40e-01  
 16  +4.8276e-01  +5.2010e-01  3.73e-02  1.57e-05  2.55e-03  7.74e-06  5.32e-05  3.44e-01  
 17  +4.7814e-01  +5.0169e-01  2.35e-02  9.49e-06  1.54e-03  3.77e-06  3.32e-05  5.37e-01  
 18  +4.7097e-01  +4.7413e-01  3.16e-03  1.16e-06  1.89e-04  3.35e-07  4.28e-06  9.04e-01  
 19  +4.6987e-01  +4.7005e-01  1.81e-04  6.57e-08  1.07e-05  2.07e-08  2.45e-07  9.90e-01  
 20  +4.6980e-01  +4.6980e-01  1.81e-06  6.59e-10  1.07e-07  2.08e-10  2.46e-09  9.90e-01  
 21  +4.6980e-01  +4.6980e-01  1.81e-08  6.59e-12  1.07e-09  2.08e-12  2.47e-11  9.90e-01  
 22  +4.6980e-01  +4.6980e-01  1.81e-10  6.58e-14  1.07e-11  2.09e-14  2.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.2119ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:02 PM: Optimal value: 4.698e-01
(CVXPY) Aug 31 05:00:02 PM: Compilation took 1.200e-02 seconds
(CVXPY) Aug 31 05:00:02 PM: Solver (including time spent in interface) took 5.952e-02 seconds
Iteration: 2, Objective: 0.4698
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:02 PM: Your problem has 2537 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Finished problem compilation (took 1.387e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2537
  constraints   = 5037
  nnz(P)        = 0
  nnz(A)        = 33574
  cones (total) = 1
    : Nonnegative = 1,  numel = 5037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8383e-01  +5.3534e+02  5.35e+02  4.17e-01  5.14e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3432e-01  +6.3002e+01  6.25e+01  1.58e-01  2.49e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0890e-01  +1.6213e+01  1.57e+01  1.05e-01  1.63e+01  3.94e-05  2.50e-01  2.36e-01  
  4  +5.0057e-01  +1.2713e+00  7.71e-01  7.50e-03  1.20e+00  6.54e-06  1.21e-01  8.73e-01  
  5  +5.0013e-01  +7.1319e-01  2.13e-01  2.03e-03  3.29e-01  6.08e-06  4.88e-02  7.02e-01  
  6  +5.0008e-01  +6.7666e-01  1.77e-01  1.65e-03  2.67e-01  8.70e-06  1.96e-02  6.83e-01  
  7  +4.9928e-01  +6.7759e-01  1.78e-01  3.34e-04  5.48e-02  1.19e-04  1.10e-03  9.90e-01  
  8  +4.9694e-01  +6.4574e-01  1.49e-01  1.26e-04  2.07e-02  2.28e-04  4.03e-04  6.61e-01  
  9  +4.9551e-01  +6.3400e-01  1.38e-01  9.81e-05  1.61e-02  2.32e-04  3.09e-04  2.81e-01  
 10  +4.9528e-01  +6.2870e-01  1.33e-01  9.78e-05  1.60e-02  2.02e-04  3.07e-04  6.03e-02  
 11  +4.9259e-01  +6.0128e-01  1.09e-01  6.44e-05  1.06e-02  1.24e-04  2.00e-04  5.88e-01  
 12  +4.9165e-01  +5.9332e-01  1.02e-01  5.68e-05  9.31e-03  7.14e-05  1.77e-04  4.37e-01  
 13  +4.8989e-01  +5.8327e-01  9.34e-02  4.92e-05  8.06e-03  5.74e-05  1.54e-04  2.44e-01  
 14  +4.8469e-01  +5.5059e-01  6.59e-02  3.37e-05  5.51e-03  5.75e-07  1.09e-04  8.69e-01  
 15  +4.7260e-01  +4.9621e-01  2.36e-02  9.95e-06  1.63e-03  1.17e-06  3.38e-05  8.37e-01  
 16  +4.6857e-01  +4.7876e-01  1.02e-02  4.06e-06  6.64e-04  1.11e-06  1.45e-05  9.90e-01  
 17  +4.6593e-01  +4.6836e-01  2.44e-03  9.57e-07  1.57e-04  2.57e-07  3.58e-06  7.93e-01  
 18  +4.6528e-01  +4.6601e-01  7.39e-04  2.83e-07  4.65e-05  7.92e-08  1.09e-06  7.89e-01  
 19  +4.6500e-01  +4.6502e-01  1.27e-05  4.85e-09  7.96e-07  1.34e-09  1.89e-08  9.83e-01  
 20  +4.6500e-01  +4.6500e-01  1.27e-07  4.85e-11  7.96e-09  1.34e-11  1.89e-10  9.90e-01  
 21  +4.6500e-01  +4.6500e-01  1.27e-09  4.85e-13  7.96e-11  1.35e-13  1.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.5973ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:02 PM: Optimal value: 4.650e-01
(CVXPY) Aug 31 05:00:02 PM: Compilation took 1.387e-02 seconds
(CVXPY) Aug 31 05:00:02 PM: Solver (including time spent in interface) took 5.806e-02 seconds
Iteration: 3, Objective: 0.4650
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:02 PM: Your problem has 2547 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Finished problem compilation (took 1.201e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2547
  constraints   = 5047
  nnz(P)        = 0
  nnz(A)        = 35055
  cones (total) = 1
    : Nonnegative = 1,  numel = 5047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8373e-01  +5.3540e+02  5.35e+02  4.17e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3419e-01  +6.2869e+01  6.23e+01  1.58e-01  2.49e+01  1.48e-02  2.64e-01  9.07e-01  
  3  +5.0886e-01  +1.6167e+01  1.57e+01  1.05e-01  1.63e+01  3.95e-05  2.50e-01  2.39e-01  
  4  +5.0057e-01  +1.2738e+00  7.73e-01  7.54e-03  1.21e+00  6.60e-06  1.20e-01  8.74e-01  
  5  +5.0016e-01  +7.5574e-01  2.56e-01  2.44e-03  3.96e-01  6.35e-06  5.21e-02  6.51e-01  
  6  +5.0013e-01  +7.5451e-01  2.54e-01  2.34e-03  3.81e-01  1.03e-05  2.13e-02  7.63e-01  
  7  +4.9966e-01  +6.9732e-01  1.98e-01  5.63e-04  9.24e-02  6.36e-05  1.86e-03  9.90e-01  
  8  +4.9789e-01  +6.7179e-01  1.74e-01  1.74e-04  2.86e-02  1.74e-04  5.38e-04  7.26e-01  
  9  +4.9559e-01  +6.3642e-01  1.41e-01  1.36e-04  2.24e-02  9.82e-05  4.21e-04  4.04e-01  
 10  +4.9451e-01  +6.2718e-01  1.33e-01  9.79e-05  1.61e-02  8.19e-05  2.99e-04  5.27e-01  
 11  +4.9420e-01  +6.2454e-01  1.30e-01  9.65e-05  1.59e-02  7.18e-05  2.95e-04  1.02e-01  
 12  +4.9257e-01  +6.1543e-01  1.23e-01  7.33e-05  1.20e-02  6.12e-05  2.24e-04  4.45e-01  
 13  +4.9007e-01  +5.9150e-01  1.01e-01  6.04e-05  9.92e-03  5.57e-06  1.85e-04  8.26e-01  
 14  +4.8859e-01  +5.8500e-01  9.64e-02  5.68e-05  9.32e-03  5.69e-06  1.75e-04  2.79e-01  
 15  +4.8024e-01  +5.4669e-01  6.65e-02  3.06e-05  5.02e-03  4.97e-06  9.68e-05  6.92e-01  
 16  +4.7347e-01  +5.1675e-01  4.33e-02  1.83e-05  3.00e-03  3.28e-06  5.90e-05  4.46e-01  
 17  +4.7268e-01  +5.1243e-01  3.98e-02  1.69e-05  2.77e-03  3.26e-06  5.52e-05  2.96e-01  
 18  +4.6604e-01  +4.8374e-01  1.77e-02  7.05e-06  1.16e-03  1.61e-06  2.35e-05  7.29e-01  
 19  +4.6260e-01  +4.7096e-01  8.36e-03  3.11e-06  5.10e-04  8.59e-07  1.06e-05  7.03e-01  
 20  +4.5983e-01  +4.6089e-01  1.06e-03  3.72e-07  6.09e-05  1.21e-07  1.32e-06  9.21e-01  
 21  +4.5941e-01  +4.5944e-01  2.66e-05  9.28e-09  1.52e-06  3.25e-09  3.32e-08  9.90e-01  
 22  +4.5940e-01  +4.5940e-01  2.66e-07  9.29e-11  1.52e-08  3.25e-11  3.32e-10  9.90e-01  
 23  +4.5940e-01  +4.5940e-01  2.67e-09  9.29e-13  1.52e-10  3.31e-13  3.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 58.2085ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:02 PM: Optimal value: 4.594e-01
(CVXPY) Aug 31 05:00:02 PM: Compilation took 1.201e-02 seconds
(CVXPY) Aug 31 05:00:02 PM: Solver (including time spent in interface) took 6.202e-02 seconds
Iteration: 4, Objective: 0.4594
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:02 PM: Your problem has 2557 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Finished problem compilation (took 1.750e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2557
  constraints   = 5057
  nnz(P)        = 0
  nnz(A)        = 35987
  cones (total) = 1
    : Nonnegative = 1,  numel = 5057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8354e-01  +5.3546e+02  5.35e+02  4.17e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3406e-01  +6.2738e+01  6.22e+01  1.58e-01  2.48e+01  1.49e-02  2.64e-01  9.09e-01  
  3  +5.0883e-01  +1.6130e+01  1.56e+01  1.05e-01  1.62e+01  3.96e-05  2.49e-01  2.42e-01  
  4  +5.0065e-01  +1.4093e+00  9.09e-01  8.86e-03  1.42e+00  6.96e-06  1.29e-01  8.06e-01  
  5  +5.0019e-01  +8.4548e-01  3.45e-01  3.30e-03  5.35e-01  6.79e-06  6.55e-02  5.96e-01  
  6  +5.0008e-01  +7.6280e-01  2.63e-01  2.39e-03  3.89e-01  1.10e-05  1.99e-02  8.16e-01  
  7  +4.9805e-01  +7.1544e-01  2.17e-01  2.90e-04  4.77e-02  1.62e-04  9.04e-04  9.68e-01  
  8  +4.9524e-01  +6.7175e-01  1.77e-01  1.85e-04  3.05e-02  1.36e-04  5.79e-04  4.72e-01  
  9  +4.9563e-01  +6.7456e-01  1.79e-01  1.46e-04  2.41e-02  8.86e-05  4.47e-04  6.38e-01  
 10  +4.9499e-01  +6.6557e-01  1.71e-01  1.41e-04  2.33e-02  6.51e-05  4.32e-04  2.27e-01  
 11  +4.9049e-01  +6.3363e-01  1.43e-01  8.61e-05  1.42e-02  6.36e-05  2.66e-04  4.69e-01  
 12  +4.8947e-01  +6.2749e-01  1.38e-01  7.77e-05  1.28e-02  5.44e-05  2.40e-04  2.36e-01  
 13  +4.8470e-01  +5.9161e-01  1.07e-01  6.40e-05  1.05e-02  3.23e-06  2.03e-04  7.93e-01  
 14  +4.7586e-01  +5.5108e-01  7.52e-02  3.71e-05  6.08e-03  3.29e-06  1.21e-04  5.42e-01  
 15  +4.6684e-01  +5.1069e-01  4.39e-02  1.93e-05  3.16e-03  2.07e-06  6.52e-05  5.09e-01  
 16  +4.6676e-01  +5.1035e-01  4.36e-02  1.91e-05  3.13e-03  2.14e-06  6.45e-05  3.95e-02  
 17  +4.6686e-01  +5.1081e-01  4.39e-02  1.88e-05  3.08e-03  2.59e-06  6.32e-05  1.76e-01  
 18  +4.6246e-01  +4.9318e-01  3.07e-02  1.25e-05  2.04e-03  2.75e-06  4.31e-05  7.76e-01  
 19  +4.5525e-01  +4.6358e-01  8.33e-03  3.20e-06  5.24e-04  7.95e-07  1.16e-05  8.19e-01  
 20  +4.5246e-01  +4.5315e-01  6.85e-04  2.57e-07  4.22e-05  6.42e-08  9.71e-07  9.43e-01  
 21  +4.5221e-01  +4.5222e-01  1.59e-05  5.95e-09  9.75e-07  1.42e-09  2.29e-08  9.83e-01  
 22  +4.5220e-01  +4.5220e-01  1.59e-07  5.95e-11  9.74e-09  1.42e-11  2.29e-10  9.90e-01  
 23  +4.5220e-01  +4.5220e-01  1.59e-09  5.95e-13  9.74e-11  1.42e-13  2.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.4771ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:02 PM: Optimal value: 4.522e-01
(CVXPY) Aug 31 05:00:02 PM: Compilation took 1.750e-02 seconds
(CVXPY) Aug 31 05:00:02 PM: Solver (including time spent in interface) took 6.360e-02 seconds
Iteration: 5, Objective: 0.4522
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:02 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:02 PM: Finished problem compilation (took 1.101e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 36987
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8339e-01  +5.3558e+02  5.35e+02  4.18e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3394e-01  +6.2628e+01  6.21e+01  1.58e-01  2.47e+01  1.49e-02  2.63e-01  9.10e-01  
  3  +5.0880e-01  +1.6100e+01  1.56e+01  1.05e-01  1.62e+01  3.97e-05  2.48e-01  2.44e-01  
  4  +5.0070e-01  +1.5037e+00  1.00e+00  9.78e-03  1.57e+00  7.21e-06  1.34e-01  7.65e-01  
  5  +5.0018e-01  +8.5251e-01  3.52e-01  3.37e-03  5.47e-01  6.92e-06  6.55e-02  6.19e-01  
  6  +5.0002e-01  +8.0003e-01  3.00e-01  2.61e-03  4.24e-01  1.44e-05  1.74e-02  8.61e-01  
  7  +4.9715e-01  +7.3764e-01  2.40e-01  2.91e-04  4.80e-02  1.82e-04  9.00e-04  9.70e-01  
  8  +4.9628e-01  +7.2043e-01  2.24e-01  2.45e-04  4.05e-02  1.45e-04  7.54e-04  3.33e-01  
  9  +4.9432e-01  +6.8897e-01  1.95e-01  1.59e-04  2.61e-02  9.23e-05  4.87e-04  6.85e-01  
 10  +4.9366e-01  +6.7495e-01  1.81e-01  1.39e-04  2.29e-02  4.20e-05  4.27e-04  5.98e-01  
 11  +4.8901e-01  +6.4580e-01  1.57e-01  9.46e-05  1.56e-02  3.17e-05  2.95e-04  5.64e-01  
 12  +4.8334e-01  +6.1508e-01  1.32e-01  7.43e-05  1.22e-02  1.92e-05  2.37e-04  4.65e-01  
 13  +4.7538e-01  +5.7604e-01  1.01e-01  5.08e-05  8.35e-03  1.38e-05  1.68e-04  3.62e-01  
 14  +4.6840e-01  +5.4161e-01  7.32e-02  3.42e-05  5.61e-03  5.24e-06  1.16e-04  9.68e-01  
 15  +4.5595e-01  +4.8721e-01  3.13e-02  1.31e-05  2.15e-03  2.23e-06  4.70e-05  6.66e-01  
 16  +4.5528e-01  +4.8513e-01  2.99e-02  1.22e-05  2.00e-03  2.26e-06  4.37e-05  1.79e-01  
 17  +4.5118e-01  +4.6897e-01  1.78e-02  6.99e-06  1.15e-03  1.53e-06  2.57e-05  5.98e-01  
 18  +4.4746e-01  +4.5422e-01  6.76e-03  2.58e-06  4.24e-04  7.52e-07  9.76e-06  9.90e-01  
 19  +4.4497e-01  +4.4516e-01  1.87e-04  7.10e-08  1.17e-05  1.96e-08  2.75e-07  9.84e-01  
 20  +4.4490e-01  +4.4490e-01  1.88e-06  7.11e-10  1.17e-07  1.96e-10  2.75e-09  9.90e-01  
 21  +4.4490e-01  +4.4490e-01  1.88e-08  7.11e-12  1.17e-09  1.96e-12  2.75e-11  9.90e-01  
 22  +4.4490e-01  +4.4490e-01  1.88e-10  7.11e-14  1.17e-11  1.97e-14  2.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.5831ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:03 PM: Optimal value: 4.449e-01
(CVXPY) Aug 31 05:00:03 PM: Compilation took 1.101e-02 seconds
(CVXPY) Aug 31 05:00:03 PM: Solver (including time spent in interface) took 5.997e-02 seconds
Iteration: 6, Objective: 0.4449
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:03 PM: Your problem has 2577 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:03 PM: Finished problem compilation (took 1.472e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2577
  constraints   = 5077
  nnz(P)        = 0
  nnz(A)        = 37932
  cones (total) = 1
    : Nonnegative = 1,  numel = 5077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8334e-01  +5.3555e+02  5.35e+02  4.18e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3391e-01  +6.2595e+01  6.21e+01  1.58e-01  2.46e+01  1.49e-02  2.63e-01  9.10e-01  
  3  +5.0879e-01  +1.6088e+01  1.56e+01  1.05e-01  1.61e+01  3.97e-05  2.48e-01  2.45e-01  
  4  +5.0062e-01  +1.3561e+00  8.56e-01  8.36e-03  1.35e+00  6.89e-06  1.23e-01  8.36e-01  
  5  +5.0023e-01  +8.8620e-01  3.86e-01  3.70e-03  6.00e-01  7.93e-06  6.32e-02  6.29e-01  
  6  +5.0005e-01  +7.7247e-01  2.72e-01  2.31e-03  3.76e-01  1.65e-05  1.40e-02  8.70e-01  
  7  +4.9798e-01  +7.4741e-01  2.49e-01  3.08e-04  5.09e-02  1.90e-04  9.47e-04  9.53e-01  
  8  +4.9600e-01  +7.1967e-01  2.24e-01  2.34e-04  3.86e-02  1.83e-04  7.18e-04  2.94e-01  
  9  +4.9511e-01  +7.0255e-01  2.07e-01  1.81e-04  2.98e-02  1.20e-04  5.52e-04  5.43e-01  
 10  +4.9373e-01  +6.9033e-01  1.97e-01  1.43e-04  2.37e-02  1.09e-04  4.39e-04  3.55e-01  
 11  +4.9176e-01  +6.6844e-01  1.77e-01  1.09e-04  1.79e-02  5.52e-05  3.33e-04  6.63e-01  
 12  +4.8738e-01  +6.3876e-01  1.51e-01  9.35e-05  1.54e-02  2.74e-05  2.92e-04  4.55e-01  
 13  +4.7843e-01  +5.9299e-01  1.15e-01  5.96e-05  9.80e-03  2.00e-05  1.93e-04  4.29e-01  
 14  +4.6826e-01  +5.4425e-01  7.60e-02  3.56e-05  5.85e-03  1.19e-05  1.20e-04  4.38e-01  
 15  +4.6562e-01  +5.3040e-01  6.48e-02  2.93e-05  4.82e-03  7.75e-06  9.95e-05  6.03e-01  
 16  +4.5554e-01  +4.8649e-01  3.10e-02  1.28e-05  2.09e-03  3.56e-06  4.53e-05  5.96e-01  
 17  +4.5465e-01  +4.8190e-01  2.73e-02  1.14e-05  1.87e-03  2.79e-06  4.23e-05  5.50e-01  
 18  +4.5434e-01  +4.8059e-01  2.63e-02  1.09e-05  1.79e-03  2.73e-06  4.03e-05  1.90e-01  
 19  +4.5158e-01  +4.6964e-01  1.81e-02  7.31e-06  1.20e-03  1.94e-06  2.70e-05  4.66e-01  
 20  +4.4915e-01  +4.6125e-01  1.21e-02  4.68e-06  7.68e-04  1.34e-06  1.74e-05  4.65e-01  
 21  +4.4539e-01  +4.4674e-01  1.35e-03  5.12e-07  8.41e-05  1.44e-07  1.97e-06  9.15e-01  
 22  +4.4491e-01  +4.4492e-01  1.58e-05  5.99e-09  9.84e-07  1.67e-09  2.32e-08  9.88e-01  
 23  +4.4490e-01  +4.4490e-01  1.58e-07  5.99e-11  9.84e-09  1.67e-11  2.32e-10  9.90e-01  
 24  +4.4490e-01  +4.4490e-01  1.58e-09  5.99e-13  9.84e-11  1.68e-13  2.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.2891ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:03 PM: Optimal value: 4.449e-01
(CVXPY) Aug 31 05:00:03 PM: Compilation took 1.472e-02 seconds
(CVXPY) Aug 31 05:00:03 PM: Solver (including time spent in interface) took 6.207e-02 seconds
Iteration: 7, Objective: 0.4449
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:03 PM: Your problem has 2587 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:03 PM: Finished problem compilation (took 1.401e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2587
  constraints   = 5087
  nnz(P)        = 0
  nnz(A)        = 38514
  cones (total) = 1
    : Nonnegative = 1,  numel = 5087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8328e-01  +5.3548e+02  5.35e+02  4.18e-01  5.14e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3388e-01  +6.2562e+01  6.20e+01  1.58e-01  2.45e+01  1.49e-02  2.63e-01  9.11e-01  
  3  +5.0878e-01  +1.6073e+01  1.56e+01  1.05e-01  1.61e+01  3.97e-05  2.47e-01  2.46e-01  
  4  +5.0060e-01  +1.3330e+00  8.32e-01  8.14e-03  1.31e+00  6.87e-06  1.21e-01  8.50e-01  
  5  +5.0023e-01  +8.9020e-01  3.90e-01  3.74e-03  6.07e-01  8.16e-06  6.07e-02  6.37e-01  
  6  +5.0004e-01  +7.8969e-01  2.90e-01  2.31e-03  3.75e-01  1.98e-05  1.20e-02  9.00e-01  
  7  +4.9779e-01  +7.6286e-01  2.65e-01  2.89e-04  4.78e-02  2.19e-04  8.76e-04  9.36e-01  
  8  +4.9490e-01  +7.2681e-01  2.32e-01  1.98e-04  3.27e-02  2.16e-04  6.03e-04  3.85e-01  
  9  +4.9461e-01  +7.1674e-01  2.22e-01  1.67e-04  2.76e-02  1.45e-04  5.06e-04  4.75e-01  
 10  +4.9183e-01  +6.8015e-01  1.88e-01  1.34e-04  2.20e-02  4.76e-05  4.10e-04  6.64e-01  
 11  +4.8829e-01  +6.5821e-01  1.70e-01  1.07e-04  1.77e-02  3.21e-05  3.34e-04  4.70e-01  
 12  +4.7856e-01  +6.0191e-01  1.23e-01  6.85e-05  1.13e-02  1.01e-05  2.21e-04  8.07e-01  
 13  +4.6991e-01  +5.6103e-01  9.11e-02  4.53e-05  7.44e-03  7.25e-06  1.51e-04  4.52e-01  
 14  +4.6660e-01  +5.4549e-01  7.89e-02  3.75e-05  6.16e-03  6.49e-06  1.26e-04  5.35e-01  
 15  +4.5502e-01  +4.9416e-01  3.91e-02  1.68e-05  2.75e-03  3.21e-06  5.93e-05  6.94e-01  
 16  +4.5434e-01  +4.9155e-01  3.72e-02  1.56e-05  2.56e-03  3.14e-06  5.52e-05  1.21e-01  
 17  +4.5202e-01  +4.8098e-01  2.90e-02  1.18e-05  1.93e-03  3.06e-06  4.24e-05  9.90e-01  
 18  +4.4721e-01  +4.6250e-01  1.53e-02  5.98e-06  9.80e-04  1.63e-06  2.22e-05  5.16e-01  
 19  +4.4265e-01  +4.4473e-01  2.08e-03  8.02e-07  1.31e-04  2.15e-07  3.11e-06  8.97e-01  
 20  +4.4191e-01  +4.4194e-01  3.03e-05  1.16e-08  1.91e-06  3.10e-09  4.56e-08  9.90e-01  
 21  +4.4190e-01  +4.4190e-01  3.03e-07  1.16e-10  1.91e-08  3.10e-11  4.56e-10  9.90e-01  
 22  +4.4190e-01  +4.4190e-01  3.03e-09  1.16e-12  1.91e-10  3.12e-13  4.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.1351ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:03 PM: Optimal value: 4.419e-01
(CVXPY) Aug 31 05:00:03 PM: Compilation took 1.401e-02 seconds
(CVXPY) Aug 31 05:00:03 PM: Solver (including time spent in interface) took 7.292e-02 seconds
Iteration: 8, Objective: 0.4419
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:03 PM: Your problem has 2597 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:03 PM: Finished problem compilation (took 1.794e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2597
  constraints   = 5097
  nnz(P)        = 0
  nnz(A)        = 39303
  cones (total) = 1
    : Nonnegative = 1,  numel = 5097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8306e-01  +5.3549e+02  5.35e+02  4.19e-01  5.14e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3373e-01  +6.2409e+01  6.19e+01  1.57e-01  2.44e+01  1.49e-02  2.62e-01  9.13e-01  
  3  +5.0874e-01  +1.6035e+01  1.55e+01  1.04e-01  1.60e+01  3.98e-05  2.46e-01  2.50e-01  
  4  +5.0056e-01  +1.2581e+00  7.58e-01  7.42e-03  1.20e+00  6.74e-06  1.13e-01  8.93e-01  
  5  +5.0030e-01  +9.4830e-01  4.48e-01  4.32e-03  6.99e-01  9.05e-06  5.99e-02  6.10e-01  
  6  +5.0010e-01  +8.2387e-01  3.24e-01  2.49e-03  4.06e-01  2.21e-05  1.18e-02  8.82e-01  
  7  +4.9861e-01  +8.0589e-01  3.07e-01  3.75e-04  6.21e-02  1.97e-04  1.12e-03  9.10e-01  
  8  +4.9499e-01  +7.5122e-01  2.56e-01  2.03e-04  3.35e-02  2.28e-04  6.08e-04  5.47e-01  
  9  +4.9404e-01  +7.3976e-01  2.46e-01  1.88e-04  3.11e-02  2.02e-04  5.67e-04  1.48e-01  
 10  +4.9297e-01  +7.1439e-01  2.21e-01  1.69e-04  2.79e-02  8.48e-05  5.11e-04  5.13e-01  
 11  +4.8721e-01  +6.7609e-01  1.89e-01  1.12e-04  1.85e-02  7.28e-05  3.46e-04  4.54e-01  
 12  +4.8246e-01  +6.4825e-01  1.66e-01  9.08e-05  1.49e-02  5.25e-05  2.84e-04  3.42e-01  
 13  +4.7502e-01  +6.0234e-01  1.27e-01  6.79e-05  1.12e-02  1.36e-05  2.20e-04  7.06e-01  
 14  +4.6738e-01  +5.6580e-01  9.84e-02  4.84e-05  7.94e-03  9.55e-06  1.62e-04  4.29e-01  
 15  +4.5186e-01  +4.9558e-01  4.37e-02  1.88e-05  3.08e-03  3.67e-06  6.73e-05  7.36e-01  
 16  +4.5010e-01  +4.8811e-01  3.80e-02  1.60e-05  2.62e-03  3.31e-06  5.80e-05  2.67e-01  
 17  +4.4308e-01  +4.5863e-01  1.56e-02  6.25e-06  1.02e-03  1.54e-06  2.38e-05  9.26e-01  
 18  +4.3993e-01  +4.4633e-01  6.40e-03  2.54e-06  4.17e-04  6.31e-07  1.00e-05  6.03e-01  
 19  +4.3927e-01  +4.4358e-01  4.31e-03  1.70e-06  2.79e-04  4.42e-07  6.74e-06  7.25e-01  
 20  +4.3773e-01  +4.3783e-01  9.21e-05  3.62e-08  5.94e-06  8.96e-09  1.46e-07  9.83e-01  
 21  +4.3770e-01  +4.3770e-01  9.21e-07  3.62e-10  5.94e-08  8.96e-11  1.47e-09  9.90e-01  
 22  +4.3770e-01  +4.3770e-01  9.21e-09  3.63e-12  5.94e-10  9.00e-13  1.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.5236ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:03 PM: Optimal value: 4.377e-01
(CVXPY) Aug 31 05:00:03 PM: Compilation took 1.794e-02 seconds
(CVXPY) Aug 31 05:00:03 PM: Solver (including time spent in interface) took 6.499e-02 seconds
Iteration: 9, Objective: 0.4377
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:03 PM: Your problem has 2607 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:03 PM: Finished problem compilation (took 1.570e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2607
  constraints   = 5107
  nnz(P)        = 0
  nnz(A)        = 40207
  cones (total) = 1
    : Nonnegative = 1,  numel = 5107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8290e-01  +5.3555e+02  5.35e+02  4.19e-01  5.14e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3357e-01  +6.2229e+01  6.17e+01  1.57e-01  2.43e+01  1.49e-02  2.61e-01  9.15e-01  
  3  +5.0870e-01  +1.5980e+01  1.55e+01  1.04e-01  1.60e+01  3.99e-05  2.46e-01  2.53e-01  
  4  +5.0062e-01  +1.3747e+00  8.74e-01  8.57e-03  1.38e+00  7.05e-06  1.21e-01  8.34e-01  
  5  +5.0030e-01  +9.9507e-01  4.95e-01  4.77e-03  7.73e-01  8.72e-06  6.70e-02  5.67e-01  
  6  +5.0012e-01  +9.0015e-01  4.00e-01  3.36e-03  5.49e-01  1.75e-05  1.87e-02  8.13e-01  
  7  +4.9797e-01  +8.5321e-01  3.55e-01  4.45e-04  7.37e-02  1.83e-04  1.34e-03  9.33e-01  
  8  +4.9673e-01  +8.3119e-01  3.34e-01  3.63e-04  6.02e-02  1.87e-04  1.09e-03  2.21e-01  
  9  +4.9668e-01  +7.9032e-01  2.94e-01  3.11e-04  5.15e-02  8.76e-05  9.30e-04  5.21e-01  
 10  +4.9107e-01  +7.3320e-01  2.42e-01  1.57e-04  2.60e-02  1.01e-04  4.74e-04  6.09e-01  
 11  +4.8775e-01  +7.0339e-01  2.16e-01  1.33e-04  2.20e-02  6.12e-05  4.07e-04  4.16e-01  
 12  +4.8318e-01  +6.7279e-01  1.90e-01  1.14e-04  1.88e-02  4.32e-05  3.55e-04  2.85e-01  
 13  +4.6514e-01  +5.6893e-01  1.04e-01  5.06e-05  8.32e-03  1.65e-05  1.68e-04  6.98e-01  
 14  +4.6240e-01  +5.5757e-01  9.52e-02  4.48e-05  7.35e-03  1.33e-05  1.50e-04  3.34e-01  
 15  +4.5469e-01  +5.2142e-01  6.67e-02  2.97e-05  4.87e-03  5.71e-06  1.03e-04  9.90e-01  
 16  +4.4785e-01  +4.9105e-01  4.32e-02  1.85e-05  3.04e-03  3.70e-06  6.64e-05  4.17e-01  
 17  +4.4487e-01  +4.7729e-01  3.24e-02  1.36e-05  2.24e-03  3.01e-06  4.96e-05  5.31e-01  
 18  +4.3902e-01  +4.5214e-01  1.31e-02  5.42e-06  8.88e-04  1.24e-06  2.05e-05  7.21e-01  
 19  +4.3523e-01  +4.3643e-01  1.20e-03  4.90e-07  8.02e-05  1.01e-07  1.94e-06  9.16e-01  
 20  +4.3481e-01  +4.3483e-01  2.19e-05  8.86e-09  1.45e-06  1.78e-09  3.63e-08  9.88e-01  
 21  +4.3480e-01  +4.3480e-01  2.19e-07  8.86e-11  1.45e-08  1.78e-11  3.63e-10  9.90e-01  
 22  +4.3480e-01  +4.3480e-01  2.19e-09  8.86e-13  1.45e-10  1.78e-13  3.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.6554ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:03 PM: Optimal value: 4.348e-01
(CVXPY) Aug 31 05:00:03 PM: Compilation took 1.570e-02 seconds
(CVXPY) Aug 31 05:00:03 PM: Solver (including time spent in interface) took 7.305e-02 seconds
Iteration: 10, Objective: 0.4348
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:03 PM: Your problem has 2617 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:03 PM: Finished problem compilation (took 2.400e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2617
  constraints   = 5117
  nnz(P)        = 0
  nnz(A)        = 40688
  cones (total) = 1
    : Nonnegative = 1,  numel = 5117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8265e-01  +5.3573e+02  5.35e+02  4.19e-01  5.13e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3341e-01  +6.2085e+01  6.16e+01  1.57e-01  2.42e+01  1.50e-02  2.61e-01  9.17e-01  
  3  +5.0867e-01  +1.5954e+01  1.54e+01  1.04e-01  1.59e+01  4.01e-05  2.45e-01  2.57e-01  
  4  +5.0062e-01  +1.3733e+00  8.73e-01  8.56e-03  1.38e+00  7.07e-06  1.20e-01  8.37e-01  
  5  +5.0028e-01  +9.7288e-01  4.73e-01  4.55e-03  7.37e-01  9.35e-06  5.96e-02  6.32e-01  
  6  +5.0006e-01  +9.1604e-01  4.16e-01  3.16e-03  5.17e-01  2.40e-05  1.47e-02  8.16e-01  
  7  +4.9753e-01  +8.7014e-01  3.73e-01  4.31e-04  7.14e-02  2.13e-04  1.29e-03  9.15e-01  
  8  +4.9474e-01  +8.2153e-01  3.27e-01  3.04e-04  5.03e-02  2.07e-04  9.09e-04  3.56e-01  
  9  +4.9244e-01  +7.7379e-01  2.81e-01  2.09e-04  3.46e-02  1.31e-04  6.26e-04  6.15e-01  
 10  +4.8892e-01  +7.4430e-01  2.55e-01  1.60e-04  2.64e-02  1.17e-04  4.85e-04  3.32e-01  
 11  +4.8476e-01  +6.9578e-01  2.11e-01  1.44e-04  2.38e-02  4.06e-05  4.47e-04  4.60e-01  
 12  +4.7700e-01  +6.4922e-01  1.72e-01  1.01e-04  1.67e-02  3.21e-05  3.22e-04  3.58e-01  
 13  +4.6946e-01  +6.0470e-01  1.35e-01  7.28e-05  1.20e-02  1.55e-05  2.38e-04  6.29e-01  
 14  +4.6318e-01  +5.7235e-01  1.09e-01  5.53e-05  9.07e-03  1.20e-05  1.85e-04  2.98e-01  
 15  +4.5314e-01  +5.2195e-01  6.88e-02  3.19e-05  5.23e-03  6.95e-06  1.10e-04  5.53e-01  
 16  +4.4722e-01  +4.9421e-01  4.70e-02  2.07e-05  3.39e-03  4.70e-06  7.27e-05  4.69e-01  
 17  +4.4506e-01  +4.8395e-01  3.89e-02  1.67e-05  2.74e-03  3.93e-06  5.92e-05  3.57e-01  
 18  +4.3717e-01  +4.4849e-01  1.13e-02  4.68e-06  7.66e-04  1.15e-06  1.71e-05  9.80e-01  
 19  +4.3558e-01  +4.4218e-01  6.60e-03  2.66e-06  4.35e-04  6.91e-07  9.83e-06  5.63e-01  
 20  +4.3407e-01  +4.3639e-01  2.31e-03  8.93e-07  1.46e-04  2.52e-07  3.41e-06  9.70e-01  
 21  +4.3332e-01  +4.3361e-01  2.93e-04  1.12e-07  1.84e-05  3.20e-08  4.35e-07  9.90e-01  
 22  +4.3320e-01  +4.3320e-01  2.99e-06  1.14e-09  1.87e-07  3.26e-10  4.44e-09  9.90e-01  
 23  +4.3320e-01  +4.3320e-01  2.99e-08  1.14e-11  1.87e-09  3.26e-12  4.44e-11  9.90e-01  
 24  +4.3320e-01  +4.3320e-01  3.00e-10  1.14e-13  1.87e-11  3.34e-14  4.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 79.2827ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:04 PM: Optimal value: 4.332e-01
(CVXPY) Aug 31 05:00:04 PM: Compilation took 2.400e-02 seconds
(CVXPY) Aug 31 05:00:04 PM: Solver (including time spent in interface) took 8.501e-02 seconds
Iteration: 11, Objective: 0.4332
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:04 PM: Your problem has 2627 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:04 PM: Finished problem compilation (took 1.922e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2627
  constraints   = 5127
  nnz(P)        = 0
  nnz(A)        = 41359
  cones (total) = 1
    : Nonnegative = 1,  numel = 5127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8258e-01  +5.3571e+02  5.35e+02  4.20e-01  5.13e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3337e-01  +6.2051e+01  6.15e+01  1.56e-01  2.41e+01  1.50e-02  2.61e-01  9.17e-01  
  3  +5.0866e-01  +1.5944e+01  1.54e+01  1.04e-01  1.59e+01  4.01e-05  2.45e-01  2.58e-01  
  4  +5.0063e-01  +1.3876e+00  8.87e-01  8.71e-03  1.40e+00  7.12e-06  1.20e-01  8.31e-01  
  5  +5.0034e-01  +1.0472e+00  5.47e-01  5.29e-03  8.56e-01  8.86e-06  7.00e-02  5.25e-01  
  6  +5.0011e-01  +9.1465e-01  4.15e-01  3.32e-03  5.42e-01  1.94e-05  1.65e-02  8.74e-01  
  7  +4.9791e-01  +8.7470e-01  3.77e-01  4.64e-04  7.69e-02  1.81e-04  1.38e-03  9.20e-01  
  8  +4.9529e-01  +8.2787e-01  3.33e-01  3.22e-04  5.33e-02  1.85e-04  9.59e-04  3.60e-01  
  9  +4.9267e-01  +7.9332e-01  3.01e-01  2.27e-04  3.76e-02  1.69e-04  6.77e-04  4.43e-01  
 10  +4.9072e-01  +7.5647e-01  2.66e-01  1.79e-04  2.96e-02  9.87e-05  5.37e-04  5.14e-01  
 11  +4.8741e-01  +7.1098e-01  2.24e-01  1.61e-04  2.65e-02  3.23e-05  4.91e-04  5.39e-01  
 12  +4.8553e-01  +6.9782e-01  2.12e-01  1.45e-04  2.40e-02  2.60e-05  4.46e-04  3.12e-01  
 13  +4.7469e-01  +6.3236e-01  1.58e-01  8.68e-05  1.43e-02  1.20e-05  2.76e-04  8.74e-01  
 14  +4.6201e-01  +5.6734e-01  1.05e-01  5.16e-05  8.46e-03  7.81e-06  1.71e-04  4.88e-01  
 15  +4.5614e-01  +5.3963e-01  8.35e-02  3.81e-05  6.24e-03  7.05e-06  1.29e-04  7.06e-01  
 16  +4.4821e-01  +5.0387e-01  5.57e-02  2.42e-05  3.96e-03  4.73e-06  8.45e-05  4.60e-01  
 17  +4.4496e-01  +4.8938e-01  4.44e-02  1.89e-05  3.09e-03  3.88e-06  6.69e-05  3.12e-01  
 18  +4.3726e-01  +4.5507e-01  1.78e-02  7.23e-06  1.18e-03  1.87e-06  2.65e-05  9.90e-01  
 19  +4.3251e-01  +4.3666e-01  4.15e-03  1.62e-06  2.65e-04  4.43e-07  6.25e-06  8.60e-01  
 20  +4.3106e-01  +4.3123e-01  1.72e-04  6.62e-08  1.08e-05  1.82e-08  2.60e-07  9.60e-01  
 21  +4.3100e-01  +4.3100e-01  1.73e-06  6.65e-10  1.09e-07  1.83e-10  2.62e-09  9.90e-01  
 22  +4.3100e-01  +4.3100e-01  1.73e-08  6.66e-12  1.09e-09  1.83e-12  2.62e-11  9.90e-01  
 23  +4.3100e-01  +4.3100e-01  1.73e-10  6.66e-14  1.09e-11  1.84e-14  2.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.536ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:04 PM: Optimal value: 4.310e-01
(CVXPY) Aug 31 05:00:04 PM: Compilation took 1.922e-02 seconds
(CVXPY) Aug 31 05:00:04 PM: Solver (including time spent in interface) took 7.608e-02 seconds
Iteration: 12, Objective: 0.4310
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:04 PM: Your problem has 2637 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:04 PM: Finished problem compilation (took 1.502e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2637
  constraints   = 5137
  nnz(P)        = 0
  nnz(A)        = 42129
  cones (total) = 1
    : Nonnegative = 1,  numel = 5137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8251e-01  +5.3559e+02  5.35e+02  4.20e-01  5.12e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3332e-01  +6.1983e+01  6.14e+01  1.56e-01  2.40e+01  1.50e-02  2.60e-01  9.18e-01  
  3  +5.0865e-01  +1.5923e+01  1.54e+01  1.04e-01  1.58e+01  4.01e-05  2.44e-01  2.59e-01  
  4  +5.0064e-01  +1.4029e+00  9.02e-01  8.87e-03  1.42e+00  7.19e-06  1.21e-01  8.25e-01  
  5  +5.0032e-01  +1.0441e+00  5.44e-01  5.26e-03  8.50e-01  9.33e-06  6.66e-02  5.67e-01  
  6  +5.0008e-01  +9.4274e-01  4.43e-01  3.39e-03  5.53e-01  2.23e-05  1.56e-02  8.57e-01  
  7  +4.9753e-01  +8.8879e-01  3.91e-01  4.52e-04  7.50e-02  1.96e-04  1.34e-03  9.26e-01  
  8  +4.9379e-01  +8.2179e-01  3.28e-01  2.86e-04  4.73e-02  1.91e-04  8.52e-04  4.42e-01  
  9  +4.9144e-01  +7.9432e-01  3.03e-01  1.94e-04  3.20e-02  1.68e-04  5.75e-04  5.63e-01  
 10  +4.8373e-01  +7.1272e-01  2.29e-01  1.31e-04  2.16e-02  5.39e-05  4.01e-04  6.97e-01  
 11  +4.7007e-01  +6.3042e-01  1.60e-01  8.26e-05  1.36e-02  3.10e-05  2.66e-04  4.38e-01  
 12  +4.5710e-01  +5.6311e-01  1.06e-01  5.03e-05  8.25e-03  1.65e-05  1.71e-04  4.85e-01  
 13  +4.5040e-01  +5.2897e-01  7.86e-02  3.55e-05  5.82e-03  7.48e-06  1.25e-04  8.64e-01  
 14  +4.3907e-01  +4.7777e-01  3.87e-02  1.66e-05  2.71e-03  3.56e-06  6.18e-05  6.20e-01  
 15  +4.3780e-01  +4.7207e-01  3.43e-02  1.46e-05  2.38e-03  3.19e-06  5.49e-05  2.24e-01  
 16  +4.3608e-01  +4.6374e-01  2.77e-02  1.15e-05  1.88e-03  2.77e-06  4.38e-05  6.76e-01  
 17  +4.3007e-01  +4.3895e-01  8.88e-03  3.63e-06  5.93e-04  8.85e-07  1.45e-05  7.64e-01  
 18  +4.2751e-01  +4.2866e-01  1.15e-03  4.64e-07  7.59e-05  1.14e-07  1.92e-06  9.90e-01  
 19  +4.2710e-01  +4.2712e-01  1.38e-05  5.57e-09  9.11e-07  1.36e-09  2.31e-08  9.88e-01  
 20  +4.2710e-01  +4.2710e-01  1.38e-07  5.57e-11  9.11e-09  1.36e-11  2.31e-10  9.90e-01  
 21  +4.2710e-01  +4.2710e-01  1.38e-09  5.57e-13  9.11e-11  1.37e-13  2.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.8061ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:04 PM: Optimal value: 4.271e-01
(CVXPY) Aug 31 05:00:04 PM: Compilation took 1.502e-02 seconds
(CVXPY) Aug 31 05:00:04 PM: Solver (including time spent in interface) took 6.199e-02 seconds
Iteration: 13, Objective: 0.4271
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:04 PM: Your problem has 2642 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:04 PM: Finished problem compilation (took 1.773e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2642
  constraints   = 5142
  nnz(P)        = 0
  nnz(A)        = 42516
  cones (total) = 1
    : Nonnegative = 1,  numel = 5142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8241e-01  +5.3561e+02  5.35e+02  4.20e-01  5.12e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3324e-01  +6.1908e+01  6.14e+01  1.56e-01  2.40e+01  1.50e-02  2.60e-01  9.19e-01  
  3  +5.0863e-01  +1.5900e+01  1.54e+01  1.03e-01  1.58e+01  4.02e-05  2.43e-01  2.61e-01  
  4  +5.0065e-01  +1.4250e+00  9.24e-01  9.09e-03  1.46e+00  7.27e-06  1.22e-01  8.16e-01  
  5  +5.0035e-01  +1.0819e+00  5.82e-01  5.63e-03  9.09e-01  9.42e-06  6.91e-02  5.41e-01  
  6  +5.0011e-01  +9.7251e-01  4.72e-01  3.69e-03  6.02e-01  2.10e-05  1.74e-02  8.50e-01  
  7  +4.9752e-01  +9.0747e-01  4.10e-01  4.79e-04  7.94e-02  1.87e-04  1.41e-03  9.35e-01  
  8  +4.9309e-01  +8.2497e-01  3.32e-01  2.84e-04  4.71e-02  1.78e-04  8.44e-04  4.89e-01  
  9  +4.9323e-01  +7.9066e-01  2.97e-01  2.11e-04  3.49e-02  4.82e-05  6.26e-04  8.61e-01  
 10  +4.8811e-01  +7.4978e-01  2.62e-01  1.57e-04  2.60e-02  4.06e-05  4.73e-04  4.28e-01  
 11  +4.7401e-01  +6.5595e-01  1.82e-01  1.01e-04  1.66e-02  1.96e-05  3.20e-04  5.55e-01  
 12  +4.5867e-01  +5.7385e-01  1.15e-01  5.72e-05  9.39e-03  1.11e-05  1.93e-04  4.71e-01  
 13  +4.5547e-01  +5.5903e-01  1.04e-01  4.97e-05  8.16e-03  9.81e-06  1.70e-04  2.63e-01  
 14  +4.4479e-01  +5.0773e-01  6.29e-02  2.85e-05  4.67e-03  5.65e-06  1.02e-04  5.47e-01  
 15  +4.3917e-01  +4.8154e-01  4.24e-02  1.86e-05  3.04e-03  3.84e-06  6.85e-05  4.50e-01  
 16  +4.3318e-01  +4.5306e-01  1.99e-02  8.41e-06  1.38e-03  2.01e-06  3.18e-05  9.90e-01  
 17  +4.3012e-01  +4.4015e-01  1.00e-02  4.21e-06  6.89e-04  1.02e-06  1.63e-05  6.42e-01  
 18  +4.2805e-01  +4.3163e-01  3.57e-03  1.49e-06  2.44e-04  3.63e-07  5.86e-06  6.54e-01  
 19  +4.2705e-01  +4.2749e-01  4.46e-04  1.86e-07  3.05e-05  4.51e-08  7.37e-07  8.85e-01  
 20  +4.2690e-01  +4.2691e-01  7.35e-06  3.07e-09  5.01e-07  7.39e-10  1.21e-08  9.86e-01  
 21  +4.2690e-01  +4.2690e-01  7.39e-08  3.08e-11  5.04e-09  7.43e-12  1.22e-10  9.90e-01  
 22  +4.2690e-01  +4.2690e-01  7.42e-10  3.09e-13  5.06e-11  7.47e-14  1.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.824ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:04 PM: Optimal value: 4.269e-01
(CVXPY) Aug 31 05:00:04 PM: Compilation took 1.773e-02 seconds
(CVXPY) Aug 31 05:00:04 PM: Solver (including time spent in interface) took 6.801e-02 seconds
Iteration: 14, Objective: 0.4269
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:04 PM: Your problem has 2652 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:04 PM: Finished problem compilation (took 1.496e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2652
  constraints   = 5152
  nnz(P)        = 0
  nnz(A)        = 42944
  cones (total) = 1
    : Nonnegative = 1,  numel = 5152

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8231e-01  +5.3570e+02  5.35e+02  4.20e-01  5.11e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3319e-01  +6.1860e+01  6.13e+01  1.56e-01  2.39e+01  1.50e-02  2.60e-01  9.19e-01  
  3  +5.0862e-01  +1.5893e+01  1.54e+01  1.03e-01  1.58e+01  4.03e-05  2.43e-01  2.62e-01  
  4  +5.0065e-01  +1.4267e+00  9.26e-01  9.12e-03  1.46e+00  7.28e-06  1.21e-01  8.16e-01  
  5  +5.0034e-01  +1.0743e+00  5.74e-01  5.55e-03  8.97e-01  9.56e-06  6.73e-02  5.57e-01  
  6  +5.0008e-01  +9.7449e-01  4.74e-01  3.54e-03  5.78e-01  2.35e-05  1.57e-02  8.58e-01  
  7  +4.9728e-01  +9.1357e-01  4.16e-01  4.64e-04  7.69e-02  2.02e-04  1.37e-03  9.26e-01  
  8  +4.9332e-01  +8.4556e-01  3.52e-01  2.97e-04  4.91e-02  1.98e-04  8.78e-04  4.31e-01  
  9  +4.9300e-01  +7.9499e-01  3.02e-01  2.23e-04  3.69e-02  5.15e-05  6.63e-04  8.08e-01  
 10  +4.8959e-01  +7.6983e-01  2.80e-01  1.81e-04  2.98e-02  4.84e-05  5.42e-04  2.88e-01  
 11  +4.7961e-01  +6.8869e-01  2.09e-01  1.31e-04  2.16e-02  1.52e-05  4.10e-04  7.32e-01  
 12  +4.6499e-01  +6.0966e-01  1.45e-01  7.63e-05  1.25e-02  1.06e-05  2.52e-04  4.89e-01  
 13  +4.5669e-01  +5.6943e-01  1.13e-01  5.55e-05  9.09e-03  8.30e-06  1.89e-04  3.92e-01  
 14  +4.4797e-01  +5.2907e-01  8.11e-02  3.74e-05  6.12e-03  6.73e-06  1.32e-04  8.46e-01  
 15  +4.3918e-01  +4.8942e-01  5.02e-02  2.20e-05  3.60e-03  4.30e-06  8.10e-05  5.56e-01  
 16  +4.3594e-01  +4.7500e-01  3.91e-02  1.68e-05  2.74e-03  3.40e-06  6.28e-05  3.04e-01  
 17  +4.3085e-01  +4.5114e-01  2.03e-02  8.47e-06  1.39e-03  2.08e-06  3.24e-05  9.90e-01  
 18  +4.2598e-01  +4.3112e-01  5.14e-03  2.13e-06  3.49e-04  5.18e-07  8.45e-06  7.94e-01  
 19  +4.2469e-01  +4.2587e-01  1.18e-03  4.91e-07  8.03e-05  1.19e-07  1.97e-06  8.12e-01  
 20  +4.2431e-01  +4.2433e-01  1.99e-05  8.26e-09  1.35e-06  1.97e-09  3.32e-08  9.90e-01  
 21  +4.2430e-01  +4.2430e-01  1.99e-07  8.27e-11  1.35e-08  1.97e-11  3.32e-10  9.90e-01  
 22  +4.2430e-01  +4.2430e-01  1.99e-09  8.28e-13  1.35e-10  1.97e-13  3.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 65.7765ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:04 PM: Optimal value: 4.243e-01
(CVXPY) Aug 31 05:00:04 PM: Compilation took 1.496e-02 seconds
(CVXPY) Aug 31 05:00:04 PM: Solver (including time spent in interface) took 7.000e-02 seconds
Iteration: 15, Objective: 0.4243
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:04 PM: Your problem has 2662 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:04 PM: Finished problem compilation (took 1.599e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2662
  constraints   = 5162
  nnz(P)        = 0
  nnz(A)        = 43311
  cones (total) = 1
    : Nonnegative = 1,  numel = 5162

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8223e-01  +5.3567e+02  5.35e+02  4.20e-01  5.10e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3312e-01  +6.1789e+01  6.13e+01  1.56e-01  2.38e+01  1.50e-02  2.59e-01  9.20e-01  
  3  +5.0861e-01  +1.5876e+01  1.54e+01  1.03e-01  1.57e+01  4.03e-05  2.43e-01  2.63e-01  
  4  +5.0065e-01  +1.4313e+00  9.31e-01  9.17e-03  1.47e+00  7.31e-06  1.21e-01  8.15e-01  
  5  +5.0030e-01  +1.0364e+00  5.36e-01  5.18e-03  8.36e-01  1.01e-05  5.95e-02  6.24e-01  
  6  +4.9992e-01  +1.0057e+00  5.06e-01  2.99e-03  4.89e-01  3.61e-05  1.11e-02  8.87e-01  
  7  +4.9613e-01  +9.3598e-01  4.40e-01  4.09e-04  6.78e-02  2.57e-04  1.20e-03  8.97e-01  
  8  +4.9354e-01  +8.9531e-01  4.02e-01  3.27e-04  5.40e-02  2.37e-04  9.62e-04  2.65e-01  
  9  +4.8884e-01  +8.1131e-01  3.22e-01  2.04e-04  3.37e-02  1.38e-04  6.11e-04  6.52e-01  
 10  +4.8179e-01  +7.3516e-01  2.53e-01  1.60e-04  2.63e-02  5.86e-05  4.93e-04  4.83e-01  
 11  +4.6902e-01  +6.5178e-01  1.83e-01  1.01e-04  1.66e-02  3.32e-05  3.29e-04  4.84e-01  
 12  +4.5525e-01  +5.7453e-01  1.19e-01  6.03e-05  9.87e-03  1.75e-05  2.08e-04  4.88e-01  
 13  +4.5252e-01  +5.6103e-01  1.09e-01  5.33e-05  8.73e-03  1.49e-05  1.86e-04  2.36e-01  
 14  +4.4563e-01  +5.2588e-01  8.03e-02  3.74e-05  6.11e-03  9.38e-06  1.34e-04  5.58e-01  
 15  +4.3776e-01  +4.8647e-01  4.87e-02  2.15e-05  3.52e-03  4.99e-06  7.94e-05  7.92e-01  
 16  +4.3519e-01  +4.7496e-01  3.98e-02  1.72e-05  2.81e-03  4.11e-06  6.42e-05  2.30e-01  
 17  +4.3279e-01  +4.6212e-01  2.93e-02  1.25e-05  2.04e-03  2.99e-06  4.70e-05  9.90e-01  
 18  +4.3069e-01  +4.5352e-01  2.28e-02  9.60e-06  1.57e-03  2.34e-06  3.65e-05  3.65e-01  
 19  +4.2559e-01  +4.3232e-01  6.72e-03  2.79e-06  4.55e-04  6.85e-07  1.10e-05  8.57e-01  
 20  +4.2441e-01  +4.2741e-01  3.01e-03  1.24e-06  2.03e-04  3.05e-07  4.94e-06  6.25e-01  
 21  +4.2414e-01  +4.2630e-01  2.16e-03  8.92e-07  1.46e-04  2.18e-07  3.56e-06  4.03e-01  
 22  +4.2359e-01  +4.2410e-01  5.09e-04  2.09e-07  3.41e-05  5.05e-08  8.39e-07  9.76e-01  
 23  +4.2345e-01  +4.2357e-01  1.25e-04  5.01e-08  8.18e-06  1.23e-08  2.05e-07  9.13e-01  
 24  +4.2341e-01  +4.2343e-01  2.16e-05  8.63e-09  1.41e-06  2.12e-09  3.55e-08  8.31e-01  
 25  +4.2340e-01  +4.2340e-01  9.45e-07  3.78e-10  6.18e-08  9.25e-11  1.55e-09  9.90e-01  
 26  +4.2340e-01  +4.2340e-01  9.50e-09  3.80e-12  6.21e-10  9.30e-13  1.56e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 76.7243ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:04 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:04 PM: Optimal value: 4.234e-01
(CVXPY) Aug 31 05:00:04 PM: Compilation took 1.599e-02 seconds
(CVXPY) Aug 31 05:00:04 PM: Solver (including time spent in interface) took 8.092e-02 seconds
Iteration: 16, Objective: 0.4234
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:05 PM: Your problem has 2672 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:05 PM: Finished problem compilation (took 1.600e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2672
  constraints   = 5172
  nnz(P)        = 0
  nnz(A)        = 43727
  cones (total) = 1
    : Nonnegative = 1,  numel = 5172

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8215e-01  +5.3563e+02  5.35e+02  4.20e-01  5.09e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3307e-01  +6.1725e+01  6.12e+01  1.56e-01  2.37e+01  1.50e-02  2.59e-01  9.21e-01  
  3  +5.0859e-01  +1.5855e+01  1.53e+01  1.03e-01  1.57e+01  4.03e-05  2.42e-01  2.65e-01  
  4  +5.0065e-01  +1.4270e+00  9.26e-01  9.14e-03  1.46e+00  7.33e-06  1.20e-01  8.18e-01  
  5  +5.0029e-01  +1.0389e+00  5.39e-01  5.18e-03  8.36e-01  1.12e-05  5.48e-02  6.84e-01  
  6  +4.9960e-01  +1.0384e+00  5.39e-01  2.09e-03  3.44e-01  6.18e-05  6.79e-03  9.59e-01  
  7  +4.9507e-01  +9.5506e-01  4.60e-01  3.90e-04  6.45e-02  2.81e-04  1.14e-03  8.34e-01  
  8  +4.9047e-01  +8.8604e-01  3.96e-01  2.79e-04  4.61e-02  2.27e-04  8.29e-04  3.96e-01  
  9  +4.8966e-01  +8.3591e-01  3.46e-01  2.39e-04  3.95e-02  1.08e-04  7.14e-04  4.84e-01  
 10  +4.8448e-01  +7.7989e-01  2.95e-01  1.87e-04  3.08e-02  7.31e-05  5.70e-04  3.93e-01  
 11  +4.6884e-01  +6.6099e-01  1.92e-01  1.05e-04  1.72e-02  2.85e-05  3.41e-04  6.44e-01  
 12  +4.5333e-01  +5.7198e-01  1.19e-01  5.98e-05  9.79e-03  1.37e-05  2.08e-04  5.20e-01  
 13  +4.5140e-01  +5.6233e-01  1.11e-01  5.44e-05  8.90e-03  1.24e-05  1.91e-04  2.39e-01  
 14  +4.4509e-01  +5.3020e-01  8.51e-02  4.02e-05  6.57e-03  8.84e-06  1.44e-04  4.40e-01  
 15  +4.3500e-01  +4.7978e-01  4.48e-02  1.99e-05  3.26e-03  4.30e-06  7.47e-05  8.16e-01  
 16  +4.3346e-01  +4.7286e-01  3.94e-02  1.73e-05  2.82e-03  3.81e-06  6.50e-05  1.95e-01  
 17  +4.2850e-01  +4.4938e-01  2.09e-02  8.94e-06  1.46e-03  2.08e-06  3.44e-05  9.90e-01  
 18  +4.2637e-01  +4.4061e-01  1.42e-02  6.07e-06  9.90e-04  1.38e-06  2.37e-05  7.95e-01  
 19  +4.2428e-01  +4.3179e-01  7.51e-03  3.17e-06  5.17e-04  7.36e-07  1.26e-05  7.40e-01  
 20  +4.2218e-01  +4.2344e-01  1.26e-03  5.26e-07  8.59e-05  1.24e-07  2.12e-06  8.43e-01  
 21  +4.2180e-01  +4.2197e-01  1.61e-04  6.70e-08  1.09e-05  1.58e-08  2.71e-07  8.75e-01  
 22  +4.2175e-01  +4.2175e-01  2.19e-06  9.12e-10  1.49e-07  2.13e-10  3.69e-09  9.90e-01  
 23  +4.2175e-01  +4.2175e-01  2.19e-08  9.12e-12  1.49e-09  2.13e-12  3.69e-11  9.90e-01  
 24  +4.2175e-01  +4.2175e-01  2.20e-10  9.14e-14  1.49e-11  2.15e-14  3.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.8535ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:05 PM: Optimal value: 4.218e-01
(CVXPY) Aug 31 05:00:05 PM: Compilation took 1.600e-02 seconds
(CVXPY) Aug 31 05:00:05 PM: Solver (including time spent in interface) took 7.623e-02 seconds
Iteration: 17, Objective: 0.4218
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:05 PM: Your problem has 2682 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:05 PM: Finished problem compilation (took 1.600e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2682
  constraints   = 5182
  nnz(P)        = 0
  nnz(A)        = 44031
  cones (total) = 1
    : Nonnegative = 1,  numel = 5182

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8200e-01  +5.3570e+02  5.35e+02  4.21e-01  5.09e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3302e-01  +6.1687e+01  6.12e+01  1.55e-01  2.36e+01  1.51e-02  2.59e-01  9.22e-01  
  3  +5.0858e-01  +1.5850e+01  1.53e+01  1.03e-01  1.56e+01  4.04e-05  2.42e-01  2.66e-01  
  4  +5.0063e-01  +1.3954e+00  8.95e-01  8.84e-03  1.41e+00  7.27e-06  1.17e-01  8.35e-01  
  5  +5.0034e-01  +1.0945e+00  5.94e-01  5.73e-03  9.23e-01  1.15e-05  5.78e-02  6.41e-01  
  6  +4.9976e-01  +9.6533e-01  4.66e-01  2.15e-03  3.53e-01  4.99e-05  7.24e-03  9.24e-01  
  7  +4.9558e-01  +9.0519e-01  4.10e-01  3.45e-04  5.72e-02  2.89e-04  1.00e-03  8.63e-01  
  8  +4.9247e-01  +8.6357e-01  3.71e-01  2.72e-04  4.49e-02  2.15e-04  7.98e-04  4.03e-01  
  9  +4.8707e-01  +8.0433e-01  3.17e-01  1.98e-04  3.26e-02  1.50e-04  5.96e-04  4.52e-01  
 10  +4.7703e-01  +7.0960e-01  2.33e-01  1.43e-04  2.34e-02  3.70e-05  4.49e-04  6.36e-01  
 11  +4.6388e-01  +6.3139e-01  1.68e-01  9.13e-05  1.49e-02  2.31e-05  3.05e-04  4.26e-01  
 12  +4.5035e-01  +5.5792e-01  1.08e-01  5.41e-05  8.84e-03  1.25e-05  1.92e-04  4.88e-01  
 13  +4.4779e-01  +5.4528e-01  9.75e-02  4.77e-05  7.79e-03  1.09e-05  1.70e-04  2.39e-01  
 14  +4.3384e-01  +4.7555e-01  4.17e-02  1.89e-05  3.09e-03  3.92e-06  7.19e-05  7.94e-01  
 15  +4.3291e-01  +4.7148e-01  3.86e-02  1.72e-05  2.81e-03  3.66e-06  6.53e-05  1.79e-01  
 16  +4.2970e-01  +4.5654e-01  2.68e-02  1.16e-05  1.89e-03  2.60e-06  4.44e-05  8.49e-01  
 17  +4.2843e-01  +4.5115e-01  2.27e-02  9.69e-06  1.58e-03  2.21e-06  3.75e-05  1.88e-01  
 18  +4.2636e-01  +4.4149e-01  1.51e-02  6.40e-06  1.04e-03  1.52e-06  2.51e-05  9.90e-01  
 19  +4.2281e-01  +4.2734e-01  4.53e-03  1.89e-06  3.08e-04  4.43e-07  7.66e-06  7.85e-01  
 20  +4.2143e-01  +4.2182e-01  3.87e-04  1.61e-07  2.62e-05  3.75e-08  6.62e-07  9.33e-01  
 21  +4.2130e-01  +4.2131e-01  1.04e-05  4.31e-09  7.03e-07  9.88e-10  1.78e-08  9.90e-01  
 22  +4.2130e-01  +4.2130e-01  1.04e-07  4.33e-11  7.06e-09  9.91e-12  1.79e-10  9.90e-01  
 23  +4.2130e-01  +4.2130e-01  1.05e-09  4.34e-13  7.08e-11  9.98e-14  1.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.7468ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:05 PM: Optimal value: 4.213e-01
(CVXPY) Aug 31 05:00:05 PM: Compilation took 1.600e-02 seconds
(CVXPY) Aug 31 05:00:05 PM: Solver (including time spent in interface) took 7.401e-02 seconds
Iteration: 18, Objective: 0.4213
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:05 PM: Your problem has 2692 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:05 PM: Finished problem compilation (took 1.700e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2692
  constraints   = 5192
  nnz(P)        = 0
  nnz(A)        = 44550
  cones (total) = 1
    : Nonnegative = 1,  numel = 5192

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8193e-01  +5.3569e+02  5.35e+02  4.21e-01  5.08e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3297e-01  +6.1638e+01  6.11e+01  1.55e-01  2.36e+01  1.51e-02  2.59e-01  9.22e-01  
  3  +5.0857e-01  +1.5831e+01  1.53e+01  1.03e-01  1.56e+01  4.04e-05  2.42e-01  2.67e-01  
  4  +5.0066e-01  +1.4520e+00  9.51e-01  9.40e-03  1.50e+00  7.41e-06  1.21e-01  8.09e-01  
  5  +5.0033e-01  +1.0948e+00  5.94e-01  5.75e-03  9.26e-01  1.05e-05  6.20e-02  6.02e-01  
  6  +4.9988e-01  +1.0125e+00  5.13e-01  2.88e-03  4.71e-01  3.80e-05  1.04e-02  9.00e-01  
  7  +4.9573e-01  +9.4606e-01  4.50e-01  4.01e-04  6.64e-02  2.64e-04  1.17e-03  8.90e-01  
  8  +4.9229e-01  +8.9699e-01  4.05e-01  3.09e-04  5.11e-02  2.39e-04  9.10e-04  3.01e-01  
  9  +4.8663e-01  +8.2671e-01  3.40e-01  2.18e-04  3.59e-02  1.74e-04  6.56e-04  4.46e-01  
 10  +4.8329e-01  +7.7568e-01  2.92e-01  1.87e-04  3.07e-02  8.11e-05  5.72e-04  4.55e-01  
 11  +4.6821e-01  +6.6313e-01  1.95e-01  1.08e-04  1.77e-02  2.94e-05  3.53e-04  6.55e-01  
 12  +4.5059e-01  +5.6349e-01  1.13e-01  5.68e-05  9.28e-03  1.38e-05  2.01e-04  5.14e-01  
 13  +4.4890e-01  +5.5493e-01  1.06e-01  5.24e-05  8.56e-03  1.26e-05  1.86e-04  1.65e-01  
 14  +4.3887e-01  +5.0346e-01  6.46e-02  3.01e-05  4.92e-03  6.46e-06  1.12e-04  7.02e-01  
 15  +4.3319e-01  +4.7654e-01  4.34e-02  1.96e-05  3.19e-03  4.33e-06  7.47e-05  3.72e-01  
 16  +4.3159e-01  +4.6911e-01  3.75e-02  1.66e-05  2.71e-03  3.74e-06  6.37e-05  2.65e-01  
 17  +4.2855e-01  +4.5478e-01  2.62e-02  1.14e-05  1.86e-03  2.61e-06  4.43e-05  4.95e-01  
 18  +4.2733e-01  +4.4943e-01  2.21e-02  9.52e-06  1.55e-03  2.21e-06  3.72e-05  1.95e-01  
 19  +4.2511e-01  +4.3855e-01  1.34e-02  5.72e-06  9.33e-04  1.32e-06  2.26e-05  9.90e-01  
 20  +4.2130e-01  +4.2325e-01  1.95e-03  8.23e-07  1.34e-04  1.78e-07  3.36e-06  9.90e-01  
 21  +4.2067e-01  +4.2071e-01  4.71e-05  1.98e-08  3.23e-06  4.29e-09  8.14e-08  9.78e-01  
 22  +4.2065e-01  +4.2065e-01  4.71e-07  1.98e-10  3.23e-08  4.29e-11  8.15e-10  9.90e-01  
 23  +4.2065e-01  +4.2065e-01  4.86e-09  2.04e-12  3.33e-10  4.44e-13  8.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.4766ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:05 PM: Optimal value: 4.207e-01
(CVXPY) Aug 31 05:00:05 PM: Compilation took 1.700e-02 seconds
(CVXPY) Aug 31 05:00:05 PM: Solver (including time spent in interface) took 7.725e-02 seconds
Iteration: 19, Objective: 0.4207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:05 PM: Your problem has 2702 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:05 PM: Finished problem compilation (took 1.901e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2702
  constraints   = 5202
  nnz(P)        = 0
  nnz(A)        = 44880
  cones (total) = 1
    : Nonnegative = 1,  numel = 5202

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8191e-01  +5.3563e+02  5.35e+02  4.21e-01  5.07e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3295e-01  +6.1614e+01  6.11e+01  1.55e-01  2.35e+01  1.51e-02  2.58e-01  9.23e-01  
  3  +5.0856e-01  +1.5819e+01  1.53e+01  1.03e-01  1.56e+01  4.04e-05  2.41e-01  2.68e-01  
  4  +5.0066e-01  +1.4419e+00  9.41e-01  9.31e-03  1.49e+00  7.40e-06  1.20e-01  8.14e-01  
  5  +5.0033e-01  +1.0970e+00  5.97e-01  5.77e-03  9.28e-01  1.10e-05  5.97e-02  6.23e-01  
  6  +4.9988e-01  +1.0281e+00  5.28e-01  2.94e-03  4.81e-01  3.92e-05  1.06e-02  8.78e-01  
  7  +4.9574e-01  +9.5869e-01  4.63e-01  4.16e-04  6.88e-02  2.67e-04  1.22e-03  8.88e-01  
  8  +4.9294e-01  +9.1470e-01  4.22e-01  3.35e-04  5.53e-02  2.38e-04  9.83e-04  2.73e-01  
  9  +4.8674e-01  +8.3655e-01  3.50e-01  2.27e-04  3.73e-02  1.83e-04  6.81e-04  4.46e-01  
 10  +4.8342e-01  +7.9431e-01  3.11e-01  1.97e-04  3.24e-02  1.24e-04  6.02e-04  2.88e-01  
 11  +4.7527e-01  +7.1063e-01  2.35e-01  1.46e-04  2.40e-02  2.37e-05  4.67e-04  7.03e-01  
 12  +4.5413e-01  +5.8409e-01  1.30e-01  6.64e-05  1.08e-02  1.17e-05  2.30e-04  5.90e-01  
 13  +4.4675e-01  +5.4627e-01  9.95e-02  4.87e-05  7.94e-03  8.76e-06  1.75e-04  3.52e-01  
 14  +4.3900e-01  +5.0682e-01  6.78e-02  3.13e-05  5.11e-03  6.03e-06  1.16e-04  6.76e-01  
 15  +4.3404e-01  +4.8347e-01  4.94e-02  2.21e-05  3.60e-03  4.48e-06  8.39e-05  5.13e-01  
 16  +4.3157e-01  +4.7213e-01  4.06e-02  1.79e-05  2.91e-03  3.71e-06  6.88e-05  2.61e-01  
 17  +4.2973e-01  +4.6355e-01  3.38e-02  1.47e-05  2.39e-03  3.14e-06  5.72e-05  3.09e-01  
 18  +4.2523e-01  +4.4256e-01  1.73e-02  7.38e-06  1.20e-03  1.70e-06  2.96e-05  9.90e-01  
 19  +4.2141e-01  +4.2696e-01  5.55e-03  2.34e-06  3.81e-04  5.34e-07  9.73e-06  7.11e-01  
 20  +4.1965e-01  +4.1979e-01  1.40e-04  5.86e-08  9.54e-06  1.27e-08  2.48e-07  9.82e-01  
 21  +4.1960e-01  +4.1960e-01  1.40e-06  5.87e-10  9.55e-08  1.27e-10  2.49e-09  9.90e-01  
 22  +4.1960e-01  +4.1960e-01  1.40e-08  5.87e-12  9.55e-10  1.27e-12  2.49e-11  9.90e-01  
 23  +4.1960e-01  +4.1960e-01  1.48e-10  6.20e-14  1.01e-11  1.35e-14  2.64e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 77.2541ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:05 PM: Optimal value: 4.196e-01
(CVXPY) Aug 31 05:00:05 PM: Compilation took 1.901e-02 seconds
(CVXPY) Aug 31 05:00:05 PM: Solver (including time spent in interface) took 8.153e-02 seconds
Iteration: 20, Objective: 0.4196
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:05 PM: Your problem has 2705 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:05 PM: Finished problem compilation (took 1.910e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2705
  constraints   = 5205
  nnz(P)        = 0
  nnz(A)        = 44964
  cones (total) = 1
    : Nonnegative = 1,  numel = 5205

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8180e-01  +5.3571e+02  5.35e+02  4.21e-01  5.07e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3290e-01  +6.1574e+01  6.10e+01  1.55e-01  2.34e+01  1.51e-02  2.58e-01  9.23e-01  
  3  +5.0855e-01  +1.5813e+01  1.53e+01  1.03e-01  1.55e+01  4.05e-05  2.41e-01  2.69e-01  
  4  +5.0067e-01  +1.4620e+00  9.61e-01  9.51e-03  1.52e+00  7.46e-06  1.21e-01  8.06e-01  
  5  +5.0035e-01  +1.1217e+00  6.21e-01  6.02e-03  9.67e-01  1.09e-05  6.23e-02  5.96e-01  
  6  +4.9986e-01  +1.0454e+00  5.46e-01  2.95e-03  4.83e-01  4.00e-05  1.04e-02  8.98e-01  
  7  +4.9555e-01  +9.7193e-01  4.76e-01  4.22e-04  6.97e-02  2.65e-04  1.23e-03  8.86e-01  
  8  +4.9257e-01  +9.2611e-01  4.34e-01  3.32e-04  5.48e-02  2.34e-04  9.74e-04  3.08e-01  
  9  +4.8732e-01  +8.5400e-01  3.67e-01  2.42e-04  3.98e-02  1.72e-04  7.24e-04  4.08e-01  
 10  +4.8271e-01  +8.0570e-01  3.23e-01  2.00e-04  3.29e-02  1.28e-04  6.12e-04  2.83e-01  
 11  +4.7151e-01  +6.9528e-01  2.24e-01  1.36e-04  2.22e-02  2.06e-05  4.40e-04  7.10e-01  
 12  +4.5101e-01  +5.7205e-01  1.21e-01  6.25e-05  1.02e-02  9.14e-06  2.21e-04  6.43e-01  
 13  +4.4782e-01  +5.5565e-01  1.08e-01  5.42e-05  8.84e-03  8.27e-06  1.94e-04  2.32e-01  
 14  +4.3898e-01  +5.1020e-01  7.12e-02  3.36e-05  5.47e-03  5.82e-06  1.25e-04  7.16e-01  
 15  +4.3622e-01  +4.9706e-01  6.08e-02  2.81e-05  4.57e-03  5.06e-06  1.06e-04  2.48e-01  
 16  +4.3122e-01  +4.7267e-01  4.15e-02  1.84e-05  3.00e-03  3.74e-06  7.11e-05  7.08e-01  
 17  +4.2963e-01  +4.6518e-01  3.55e-02  1.56e-05  2.54e-03  3.29e-06  6.08e-05  3.86e-01  
 18  +4.2552e-01  +4.4640e-01  2.09e-02  9.04e-06  1.47e-03  2.01e-06  3.63e-05  9.90e-01  
 19  +4.2190e-01  +4.3136e-01  9.46e-03  4.04e-06  6.58e-04  9.01e-07  1.67e-05  5.81e-01  
 20  +4.1914e-01  +4.1987e-01  7.30e-04  3.09e-07  5.03e-05  6.64e-08  1.32e-06  9.70e-01  
 21  +4.1890e-01  +4.1891e-01  7.68e-06  3.24e-09  5.28e-07  6.96e-10  1.39e-08  9.90e-01  
 22  +4.1890e-01  +4.1890e-01  7.69e-08  3.25e-11  5.29e-09  6.97e-12  1.39e-10  9.90e-01  
 23  +4.1890e-01  +4.1890e-01  8.05e-10  3.40e-13  5.54e-11  7.31e-14  1.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.2399ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:05 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:05 PM: Optimal value: 4.189e-01
(CVXPY) Aug 31 05:00:05 PM: Compilation took 1.910e-02 seconds
(CVXPY) Aug 31 05:00:05 PM: Solver (including time spent in interface) took 7.918e-02 seconds
Iteration: 21, Objective: 0.4189
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:06 PM: Your problem has 2708 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:06 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:06 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:06 PM: Finished problem compilation (took 1.905e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2708
  constraints   = 5208
  nnz(P)        = 0
  nnz(A)        = 45140
  cones (total) = 1
    : Nonnegative = 1,  numel = 5208

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8179e-01  +5.3572e+02  5.35e+02  4.21e-01  5.07e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3290e-01  +6.1576e+01  6.10e+01  1.55e-01  2.34e+01  1.51e-02  2.58e-01  9.23e-01  
  3  +5.0856e-01  +1.5816e+01  1.53e+01  1.03e-01  1.55e+01  4.05e-05  2.41e-01  2.69e-01  
  4  +5.0067e-01  +1.4609e+00  9.60e-01  9.50e-03  1.52e+00  7.46e-06  1.21e-01  8.06e-01  
  5  +5.0035e-01  +1.1233e+00  6.23e-01  6.03e-03  9.70e-01  1.09e-05  6.25e-02  5.94e-01  
  6  +4.9986e-01  +1.0448e+00  5.45e-01  2.94e-03  4.80e-01  4.02e-05  1.04e-02  9.01e-01  
  7  +4.9556e-01  +9.7188e-01  4.76e-01  4.20e-04  6.95e-02  2.65e-04  1.22e-03  8.85e-01  
  8  +4.9245e-01  +9.2505e-01  4.33e-01  3.29e-04  5.42e-02  2.36e-04  9.64e-04  3.09e-01  
  9  +4.8731e-01  +8.5403e-01  3.67e-01  2.41e-04  3.97e-02  1.73e-04  7.22e-04  4.04e-01  
 10  +4.8253e-01  +8.0353e-01  3.21e-01  1.98e-04  3.26e-02  1.26e-04  6.07e-04  2.94e-01  
 11  +4.7030e-01  +6.9137e-01  2.21e-01  1.30e-04  2.13e-02  3.05e-05  4.24e-04  6.54e-01  
 12  +4.5063e-01  +5.7168e-01  1.21e-01  6.25e-05  1.02e-02  1.22e-05  2.22e-04  6.22e-01  
 13  +4.4773e-01  +5.5650e-01  1.09e-01  5.47e-05  8.92e-03  1.07e-05  1.96e-04  2.22e-01  
 14  +4.3965e-01  +5.1414e-01  7.45e-02  3.53e-05  5.75e-03  6.84e-06  1.31e-04  6.63e-01  
 15  +4.3649e-01  +4.9890e-01  6.24e-02  2.89e-05  4.71e-03  5.75e-06  1.09e-04  2.55e-01  
 16  +4.3196e-01  +4.7613e-01  4.42e-02  1.97e-05  3.21e-03  4.17e-06  7.57e-05  7.40e-01  
 17  +4.2904e-01  +4.6267e-01  3.36e-02  1.48e-05  2.41e-03  3.19e-06  5.80e-05  5.07e-01  
 18  +4.2548e-01  +4.4616e-01  2.07e-02  8.92e-06  1.45e-03  2.01e-06  3.58e-05  9.90e-01  
 19  +4.2192e-01  +4.3140e-01  9.48e-03  4.04e-06  6.58e-04  9.15e-07  1.68e-05  5.73e-01  
 20  +4.1908e-01  +4.1959e-01  5.13e-04  2.17e-07  3.53e-05  4.60e-08  9.26e-07  9.90e-01  
 21  +4.1890e-01  +4.1891e-01  5.19e-06  2.19e-09  3.57e-07  4.64e-10  9.39e-09  9.90e-01  
 22  +4.1890e-01  +4.1890e-01  5.20e-08  2.20e-11  3.58e-09  4.65e-12  9.41e-11  9.90e-01  
 23  +4.1890e-01  +4.1890e-01  5.47e-10  2.31e-13  3.77e-11  4.91e-14  9.93e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.2408ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:06 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:06 PM: Optimal value: 4.189e-01
(CVXPY) Aug 31 05:00:06 PM: Compilation took 1.905e-02 seconds
(CVXPY) Aug 31 05:00:06 PM: Solver (including time spent in interface) took 7.976e-02 seconds
Iteration: 22, Objective: 0.4189
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:06 PM: Your problem has 2711 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:06 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:06 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:06 PM: Finished problem compilation (took 2.131e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:06 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2711
  constraints   = 5211
  nnz(P)        = 0
  nnz(A)        = 45219
  cones (total) = 1
    : Nonnegative = 1,  numel = 5211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8178e-01  +5.3574e+02  5.35e+02  4.22e-01  5.07e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3288e-01  +6.1562e+01  6.10e+01  1.55e-01  2.34e+01  1.51e-02  2.58e-01  9.24e-01  
  3  +5.0855e-01  +1.5813e+01  1.53e+01  1.03e-01  1.55e+01  4.05e-05  2.41e-01  2.69e-01  
  4  +5.0067e-01  +1.4612e+00  9.61e-01  9.51e-03  1.52e+00  7.46e-06  1.21e-01  8.06e-01  
  5  +5.0035e-01  +1.1238e+00  6.23e-01  6.04e-03  9.70e-01  1.09e-05  6.22e-02  5.96e-01  
  6  +4.9983e-01  +1.0424e+00  5.43e-01  2.79e-03  4.57e-01  4.25e-05  9.70e-03  9.10e-01  
  7  +4.9537e-01  +9.6948e-01  4.74e-01  4.08e-04  6.75e-02  2.72e-04  1.19e-03  8.79e-01  
  8  +4.9162e-01  +9.1655e-01  4.25e-01  3.07e-04  5.06e-02  2.37e-04  9.02e-04  3.55e-01  
  9  +4.8576e-01  +8.3911e-01  3.53e-01  2.22e-04  3.65e-02  1.60e-04  6.68e-04  4.35e-01  
 10  +4.7486e-01  +7.1803e-01  2.43e-01  1.51e-04  2.47e-02  2.75e-05  4.79e-04  6.86e-01  
 11  +4.6966e-01  +6.8385e-01  2.14e-01  1.28e-04  2.09e-02  2.13e-05  4.18e-04  2.95e-01  
 12  +4.5010e-01  +5.6932e-01  1.19e-01  6.13e-05  1.00e-02  1.05e-05  2.18e-04  5.35e-01  
 13  +4.4627e-01  +5.4929e-01  1.03e-01  5.15e-05  8.39e-03  9.01e-06  1.86e-04  2.53e-01  
 14  +4.3745e-01  +5.0367e-01  6.62e-02  3.12e-05  5.08e-03  5.75e-06  1.17e-04  6.01e-01  
 15  +4.3489e-01  +4.9137e-01  5.65e-02  2.60e-05  4.23e-03  4.96e-06  9.85e-05  2.73e-01  
 16  +4.3034e-01  +4.6951e-01  3.92e-02  1.74e-05  2.84e-03  3.53e-06  6.77e-05  5.23e-01  
 17  +4.2913e-01  +4.6356e-01  3.44e-02  1.51e-05  2.46e-03  3.17e-06  5.90e-05  3.25e-01  
 18  +4.2626e-01  +4.4993e-01  2.37e-02  1.02e-05  1.67e-03  2.25e-06  4.07e-05  7.74e-01  
 19  +4.2199e-01  +4.3195e-01  9.96e-03  4.22e-06  6.87e-04  9.43e-07  1.74e-05  7.58e-01  
 20  +4.1900e-01  +4.1960e-01  6.03e-04  2.53e-07  4.11e-05  5.41e-08  1.08e-06  9.64e-01  
 21  +4.1880e-01  +4.1881e-01  6.67e-06  2.80e-09  4.55e-07  5.97e-10  1.20e-08  9.89e-01  
 22  +4.1880e-01  +4.1880e-01  6.67e-08  2.80e-11  4.55e-09  5.97e-12  1.20e-10  9.90e-01  
 23  +4.1880e-01  +4.1880e-01  7.03e-10  2.95e-13  4.79e-11  6.32e-14  1.26e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.3986ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:06 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:06 PM: Optimal value: 4.188e-01
(CVXPY) Aug 31 05:00:06 PM: Compilation took 2.131e-02 seconds
(CVXPY) Aug 31 05:00:06 PM: Solver (including time spent in interface) took 9.784e-02 seconds
Iteration: 23, Objective: 0.4188
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:00:06 PM: Your problem has 2712 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 05:00:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:00:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:00:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:00:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:00:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:00:06 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:00:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:00:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:00:06 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:00:06 PM: Finished problem compilation (took 1.918e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2712
  constraints   = 5212
  nnz(P)        = 0
  nnz(A)        = 45253
  cones (total) = 1
    : Nonnegative = 1,  numel = 5212

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8178e-01  +5.3574e+02  5.35e+02  4.22e-01  5.07e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3288e-01  +6.1562e+01  6.10e+01  1.55e-01  2.34e+01  1.51e-02  2.58e-01  9.24e-01  
  3  +5.0855e-01  +1.5812e+01  1.53e+01  1.03e-01  1.55e+01  4.05e-05  2.41e-01  2.70e-01  
  4  +5.0067e-01  +1.4630e+00  9.62e-01  9.53e-03  1.52e+00  7.46e-06  1.21e-01  8.06e-01  
  5  +5.0035e-01  +1.1224e+00  6.22e-01  6.03e-03  9.68e-01  1.09e-05  6.22e-02  5.96e-01  
  6  +4.9982e-01  +1.0433e+00  5.44e-01  2.79e-03  4.56e-01  4.27e-05  9.67e-03  9.11e-01  
  7  +4.9534e-01  +9.6975e-01  4.74e-01  4.07e-04  6.73e-02  2.72e-04  1.19e-03  8.79e-01  
  8  +4.9155e-01  +9.1618e-01  4.25e-01  3.05e-04  5.03e-02  2.36e-04  8.96e-04  3.63e-01  
  9  +4.8567e-01  +8.3831e-01  3.53e-01  2.20e-04  3.62e-02  1.58e-04  6.64e-04  4.39e-01  
 10  +4.7629e-01  +7.3183e-01  2.56e-01  1.62e-04  2.65e-02  3.95e-05  5.12e-04  5.94e-01  
 11  +4.7258e-01  +7.0525e-01  2.33e-01  1.43e-04  2.35e-02  3.11e-05  4.63e-04  2.43e-01  
 12  +4.5496e-01  +5.9775e-01  1.43e-01  7.57e-05  1.24e-02  1.68e-05  2.64e-04  5.02e-01  
 13  +4.5019e-01  +5.7067e-01  1.20e-01  6.12e-05  9.99e-03  1.24e-05  2.17e-04  4.63e-01  
 14  +4.3574e-01  +4.9469e-01  5.89e-02  2.75e-05  4.49e-03  4.98e-06  1.04e-04  8.45e-01  
 15  +4.3494e-01  +4.9000e-01  5.51e-02  2.54e-05  4.13e-03  4.83e-06  9.61e-05  3.95e-01  
 16  +4.3151e-01  +4.7442e-01  4.29e-02  1.91e-05  3.12e-03  3.88e-06  7.36e-05  4.39e-01  
 17  +4.2912e-01  +4.6322e-01  3.41e-02  1.49e-05  2.43e-03  3.17e-06  5.83e-05  4.66e-01  
 18  +4.2648e-01  +4.5095e-01  2.45e-02  1.06e-05  1.72e-03  2.34e-06  4.20e-05  7.16e-01  
 19  +4.2193e-01  +4.3173e-01  9.80e-03  4.15e-06  6.76e-04  9.29e-07  1.71e-05  7.78e-01  
 20  +4.1912e-01  +4.2010e-01  9.78e-04  4.10e-07  6.67e-05  8.99e-08  1.75e-06  9.21e-01  
 21  +4.1880e-01  +4.1882e-01  1.18e-05  4.96e-09  8.07e-07  1.08e-09  2.12e-08  9.88e-01  
 22  +4.1880e-01  +4.1880e-01  1.18e-07  4.96e-11  8.07e-09  1.08e-11  2.12e-10  9.90e-01  
 23  +4.1880e-01  +4.1880e-01  1.24e-09  5.19e-13  8.44e-11  1.14e-13  2.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 74.4421ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:00:06 PM: Problem status: optimal
(CVXPY) Aug 31 05:00:06 PM: Optimal value: 4.188e-01
(CVXPY) Aug 31 05:00:06 PM: Compilation took 1.918e-02 seconds
(CVXPY) Aug 31 05:00:06 PM: Solver (including time spent in interface) took 8.015e-02 seconds
FULL MODEL:
  Accruacy: 0.533
  Our objective: 0.066

IF 
    (x3 = 0 AND x4 = 0)                                                                   <-- (term's our objective: 0.03359999999999999)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x3 = 0)            <-- (term's our objective: 0.0068000000000000334)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x1 = 0 AND x7 = 0)            <-- (term's our objective: 0.00440000000000003)
 OR (x3 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x6 = 0)            <-- (term's our objective: 0.004799999999999965)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x6 = 0)            <-- (term's our objective: 0.004799999999999986)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x5 = 0) <-- (term's our objective: 0.003999999999999962)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.002800000000000005)
 OR (x1 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.00319999999999996)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0) <-- (term's our objective: 0.0024000000000000037)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x2 = 0 AND x6 = 0) <-- (term's our objective: 0.0024000000000000267)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.491313219070435
Best over terms:
  Our final objective: 0.03359999999999999
    Its accruacy: 0.5168
    Its hamming distance: 6
  Shortest hamming distance: 6
    Its our objective: 0.03359999999999999
  Highest accruacy: 0.5168
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

