Command:
python test_script.py -s smallest_subclass -d 3 -n 100 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 3.

Computed total variation: 0.21999999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:26 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:26 PM: Finished problem compilation (took 3.989e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9574e-01  +5.0830e+01  5.03e+01  8.54e-01  7.22e+00  1.00e+00  1.04e+00   ------   
  1  +6.1454e-01  +9.7254e+00  9.11e+00  2.68e-01  3.57e+00  4.23e-03  4.52e-01  6.94e-01  
  2  +5.3805e-01  +1.6937e+00  1.16e+00  6.80e-02  1.03e+00  7.78e-03  1.66e-01  8.24e-01  
  3  +4.9794e-01  +7.2735e-01  2.29e-01  1.46e-02  2.22e-01  6.58e-03  5.32e-02  9.90e-01  
  4  +4.7829e-01  +6.8711e-01  2.09e-01  5.26e-03  8.25e-02  1.31e-02  1.79e-02  6.96e-01  
  5  +4.5775e-01  +5.5155e-01  9.38e-02  2.07e-03  3.24e-02  2.88e-03  8.23e-03  6.88e-01  
  6  +4.3703e-01  +4.5876e-01  2.17e-02  4.23e-04  6.60e-03  4.56e-04  1.87e-03  7.97e-01  
  7  +4.3044e-01  +4.3135e-01  9.16e-04  1.79e-05  2.78e-04  5.74e-06  8.25e-05  9.90e-01  
  8  +4.3010e-01  +4.3011e-01  9.16e-06  1.79e-07  2.78e-06  5.74e-08  8.26e-07  9.90e-01  
  9  +4.3010e-01  +4.3010e-01  9.16e-08  1.79e-09  2.78e-08  5.74e-10  8.26e-09  9.90e-01  
 10  +4.3010e-01  +4.3010e-01  9.16e-10  1.79e-11  2.78e-10  5.74e-12  8.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 250.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:26 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:26 PM: Optimal value: 4.301e-01
(CVXPY) Aug 31 04:45:26 PM: Compilation took 3.989e-03 seconds
(CVXPY) Aug 31 04:45:26 PM: Solver (including time spent in interface) took 1.012e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:26 PM: Your problem has 60 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:26 PM: Finished problem compilation (took 3.142e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 110
  nnz(P)        = 0
  nnz(A)        = 343
  cones (total) = 1
    : Nonnegative = 1,  numel = 110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9361e-01  +5.1087e+01  5.06e+01  8.57e-01  7.38e+00  1.00e+00  1.05e+00   ------   
  1  +6.0398e-01  +9.8504e+00  9.25e+00  2.75e-01  3.66e+00  4.20e-03  4.66e-01  6.89e-01  
  2  +5.3364e-01  +1.6018e+00  1.07e+00  6.11e-02  9.54e-01  8.40e-03  1.51e-01  8.74e-01  
  3  +5.1131e-01  +1.1069e+00  5.96e-01  2.54e-02  4.01e-01  9.46e-03  7.08e-02  5.94e-01  
  4  +4.9441e-01  +1.0354e+00  5.41e-01  1.66e-02  2.64e-01  7.42e-03  5.01e-02  5.49e-01  
  5  +4.6182e-01  +7.1141e-01  2.50e-01  6.04e-03  9.61e-02  3.26e-03  2.00e-02  6.48e-01  
  6  +4.4034e-01  +5.9849e-01  1.58e-01  2.85e-03  4.55e-02  2.70e-03  9.52e-03  5.63e-01  
  7  +4.2782e-01  +5.4662e-01  1.19e-01  2.01e-03  3.20e-02  1.62e-03  6.92e-03  4.63e-01  
  8  +3.9860e-01  +4.1793e-01  1.93e-02  3.35e-04  5.29e-03  1.44e-05  1.28e-03  9.50e-01  
  9  +3.9037e-01  +3.9077e-01  3.96e-04  6.64e-06  1.05e-04  4.08e-07  2.61e-05  9.81e-01  
 10  +3.9020e-01  +3.9021e-01  3.95e-06  6.64e-08  1.05e-06  4.08e-09  2.61e-07  9.90e-01  
 11  +3.9020e-01  +3.9020e-01  3.95e-08  6.64e-10  1.05e-08  4.08e-11  2.61e-09  9.90e-01  
 12  +3.9020e-01  +3.9020e-01  3.95e-10  6.64e-12  1.05e-10  4.08e-13  2.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 330µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:26 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:26 PM: Optimal value: 3.902e-01
(CVXPY) Aug 31 04:45:26 PM: Compilation took 3.142e-03 seconds
(CVXPY) Aug 31 04:45:26 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.61
  Our objective: 0.21999999999999997

IF 
    (x1 = 1 AND x2 = 1 AND x0 = 0) <-- (term's our objective: 0.09999999999999999)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.11999999999999997)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8829660415649414
Best over terms:
  Our final objective: 0.11999999999999997
    Its accruacy: 0.56
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.11999999999999997
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

