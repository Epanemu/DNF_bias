Command:
python test_script.py -s smallest_subclass -d 3 -n 50 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 3.

Computed total variation: 0.4
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:15 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:15 PM: Finished problem compilation (took 4.521e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 157
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9133e-01  +2.5758e+01  2.53e+01  8.07e-01  4.99e+00  1.00e+00  1.07e+00   ------   
  1  +6.0944e-01  +5.0815e+00  4.47e+00  2.55e-01  2.39e+00  4.21e-03  4.67e-01  6.95e-01  
  2  +5.2332e-01  +9.2897e-01  4.06e-01  4.14e-02  4.37e-01  8.67e-03  1.18e-01  9.54e-01  
  3  +5.1698e-01  +8.7421e-01  3.57e-01  2.72e-02  2.93e-01  9.46e-03  8.03e-02  3.69e-01  
  4  +4.9932e-01  +7.8706e-01  2.88e-01  1.72e-02  1.87e-01  6.49e-03  5.62e-02  5.42e-01  
  5  +4.7319e-01  +6.1449e-01  1.41e-01  6.35e-03  6.98e-02  3.53e-03  2.31e-02  6.04e-01  
  6  +4.4556e-01  +4.5844e-01  1.29e-02  5.66e-04  6.21e-03  1.42e-04  2.60e-03  9.66e-01  
  7  +4.4020e-01  +4.4044e-01  2.45e-04  1.01e-05  1.11e-04  2.28e-06  5.14e-05  9.85e-01  
  8  +4.4010e-01  +4.4010e-01  2.45e-06  1.01e-07  1.11e-06  2.28e-08  5.14e-07  9.90e-01  
  9  +4.4010e-01  +4.4010e-01  2.45e-08  1.01e-09  1.11e-08  2.28e-10  5.14e-09  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  2.45e-10  1.01e-11  1.11e-10  2.28e-12  5.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 179.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:15 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:15 PM: Optimal value: 4.401e-01
(CVXPY) Aug 31 04:45:15 PM: Compilation took 4.521e-03 seconds
(CVXPY) Aug 31 04:45:15 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:15 PM: Your problem has 39 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:15 PM: Finished problem compilation (took 3.921e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 39
  constraints   = 64
  nnz(P)        = 0
  nnz(A)        = 214
  cones (total) = 1
    : Nonnegative = 1,  numel = 64

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6891e-01  +2.6566e+01  2.61e+01  8.23e-01  5.39e+00  1.00e+00  1.14e+00   ------   
  1  +5.4207e-01  +5.3571e+00  4.82e+00  2.90e-01  2.71e+00  4.04e-03  5.40e-01  6.68e-01  
  2  +4.6463e-01  +1.3847e+00  9.20e-01  7.59e-02  8.37e-01  1.11e-02  2.02e-01  7.86e-01  
  3  +3.7907e-01  +9.5015e-01  5.71e-01  3.13e-02  3.50e-01  8.20e-03  1.04e-01  6.07e-01  
  4  +3.2018e-01  +4.3024e-01  1.10e-01  6.41e-03  7.01e-02  9.83e-04  2.91e-02  7.71e-01  
  5  +3.0131e-01  +3.0676e-01  5.46e-03  3.18e-04  3.45e-03  5.06e-05  1.84e-03  9.52e-01  
  6  +3.0041e-01  +3.0105e-01  6.44e-04  3.76e-05  4.07e-04  6.29e-06  2.18e-04  8.83e-01  
  7  +3.0036e-01  +3.0091e-01  5.53e-04  2.54e-05  2.81e-04  6.21e-06  1.42e-04  5.14e-01  
  8  +3.0023e-01  +3.0032e-01  8.72e-05  4.05e-06  4.49e-05  6.14e-07  2.28e-05  9.90e-01  
  9  +3.0020e-01  +3.0020e-01  9.58e-07  4.38e-08  4.86e-07  6.24e-09  2.48e-07  9.90e-01  
 10  +3.0020e-01  +3.0020e-01  9.58e-09  4.38e-10  4.86e-09  6.24e-11  2.48e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 169.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:15 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:15 PM: Optimal value: 3.002e-01
(CVXPY) Aug 31 04:45:15 PM: Compilation took 3.921e-03 seconds
(CVXPY) Aug 31 04:45:15 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:15 PM: Your problem has 40 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:15 PM: Finished problem compilation (took 3.018e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 65
  nnz(P)        = 0
  nnz(A)        = 218
  cones (total) = 1
    : Nonnegative = 1,  numel = 65

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6673e-01  +2.6493e+01  2.60e+01  8.24e-01  5.37e+00  1.00e+00  1.13e+00   ------   
  1  +5.3217e-01  +5.3647e+00  4.83e+00  2.93e-01  2.71e+00  4.03e-03  5.41e-01  6.64e-01  
  2  +4.4967e-01  +1.2927e+00  8.43e-01  6.83e-02  7.52e-01  1.15e-02  1.84e-01  8.25e-01  
  3  +3.7200e-01  +8.4108e-01  4.69e-01  2.77e-02  3.07e-01  6.80e-03  9.37e-02  5.66e-01  
  4  +3.1634e-01  +4.0447e-01  8.81e-02  5.53e-03  5.96e-02  7.35e-04  2.49e-02  7.64e-01  
  5  +3.0084e-01  +3.0368e-01  2.84e-03  1.82e-04  1.95e-03  2.34e-05  9.84e-04  9.69e-01  
  6  +3.0039e-01  +3.0090e-01  5.12e-04  3.25e-05  3.48e-04  4.51e-06  1.75e-04  8.26e-01  
  7  +3.0035e-01  +3.0086e-01  5.13e-04  2.42e-05  2.66e-04  4.85e-06  1.34e-04  4.41e-01  
  8  +3.0022e-01  +3.0028e-01  5.77e-05  2.71e-06  2.98e-05  3.61e-07  1.53e-05  9.90e-01  
  9  +3.0020e-01  +3.0020e-01  6.16e-07  2.84e-08  3.13e-07  3.73e-09  1.62e-07  9.89e-01  
 10  +3.0020e-01  +3.0020e-01  6.16e-09  2.84e-10  3.13e-09  3.73e-11  1.62e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 322.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:15 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:15 PM: Optimal value: 3.002e-01
(CVXPY) Aug 31 04:45:15 PM: Compilation took 3.018e-03 seconds
(CVXPY) Aug 31 04:45:15 PM: Solver (including time spent in interface) took 6.044e-04 seconds
FULL MODEL:
  Accruacy: 0.7
  Our objective: 0.3999999999999999

IF 
    (x1 = 0 AND x2 = 0) <-- (term's our objective: 0.28)
 OR (x1 = 1 AND x2 = 1) <-- (term's our objective: 0.12000000000000002)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.88130784034729
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

