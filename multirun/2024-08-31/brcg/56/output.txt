Command:
python test_script.py -s smallest_subclass -d 2 -n 500 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.34400000000000003
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 2.

Computed total variation: 0.34400000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:32 PM: Your problem has 255 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:32 PM: Finished problem compilation (took 2.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 255
  constraints   = 505
  nnz(P)        = 0
  nnz(A)        = 1255
  cones (total) = 1
    : Nonnegative = 1,  numel = 505

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9869e-01  +2.5099e+02  2.50e+02  9.27e-01  1.53e+01  1.00e+00  1.01e+00   ------   
  1  +6.3571e-01  +4.4153e+01  4.35e+01  2.53e-01  7.15e+00  4.49e-03  3.92e-01  7.25e-01  
  2  +5.5387e-01  +8.0545e+00  7.50e+00  1.04e-01  3.34e+00  5.56e-03  2.00e-01  6.39e-01  
  3  +4.9825e-01  +1.2775e+00  7.79e-01  2.29e-02  7.00e-01  4.90e-03  1.64e-01  5.99e-01  
  4  +4.8301e-01  +9.3997e-01  4.57e-01  6.95e-03  2.22e-01  1.22e-02  2.38e-02  9.01e-01  
  5  +4.2778e-01  +7.8787e-01  3.60e-01  1.60e-03  5.16e-02  3.49e-02  5.07e-03  7.91e-01  
  6  +4.0529e-01  +5.3059e-01  1.25e-01  6.22e-04  1.97e-02  2.65e-04  2.57e-03  7.42e-01  
  7  +3.7759e-01  +3.9686e-01  1.93e-02  8.71e-05  2.75e-03  2.56e-06  4.09e-04  9.84e-01  
  8  +3.7219e-01  +3.7249e-01  3.05e-04  1.37e-06  4.33e-05  4.67e-08  6.76e-06  9.84e-01  
  9  +3.7210e-01  +3.7210e-01  3.05e-06  1.37e-08  4.33e-07  4.66e-10  6.76e-08  9.90e-01  
 10  +3.7210e-01  +3.7210e-01  3.05e-08  1.37e-10  4.33e-09  4.66e-12  6.76e-10  9.90e-01  
 11  +3.7210e-01  +3.7210e-01  3.05e-10  1.37e-12  4.33e-11  4.67e-14  6.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 927µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:33 PM: Optimal value: 3.721e-01
(CVXPY) Aug 31 04:44:33 PM: Compilation took 2.998e-03 seconds
(CVXPY) Aug 31 04:44:33 PM: Solver (including time spent in interface) took 2.028e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3721
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:33 PM: Your problem has 256 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:33 PM: Finished problem compilation (took 4.091e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 256
  constraints   = 506
  nnz(P)        = 0
  nnz(A)        = 1368
  cones (total) = 1
    : Nonnegative = 1,  numel = 506

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9790e-01  +2.5183e+02  2.51e+02  9.27e-01  1.60e+01  1.00e+00  1.01e+00   ------   
  1  +6.3252e-01  +4.4439e+01  4.38e+01  2.55e-01  7.52e+00  4.47e-03  3.97e-01  7.23e-01  
  2  +5.5309e-01  +7.9943e+00  7.44e+00  1.02e-01  3.43e+00  5.74e-03  1.96e-01  6.56e-01  
  3  +4.9880e-01  +1.4737e+00  9.75e-01  2.82e-02  9.03e-01  5.51e-03  1.59e-01  5.86e-01  
  4  +4.8639e-01  +9.6190e-01  4.76e-01  7.66e-03  2.58e-01  1.03e-02  2.45e-02  8.79e-01  
  5  +4.4555e-01  +8.3206e-01  3.87e-01  2.00e-03  6.85e-02  2.89e-02  5.70e-03  7.72e-01  
  6  +4.4222e-01  +8.3168e-01  3.89e-01  1.88e-03  6.42e-02  2.51e-02  5.31e-03  2.51e-01  
  7  +4.1318e-01  +7.3490e-01  3.22e-01  1.14e-03  3.89e-02  2.14e-02  3.29e-03  4.92e-01  
  8  +3.6830e-01  +4.7707e-01  1.09e-01  4.18e-04  1.40e-02  1.81e-04  1.40e-03  7.38e-01  
  9  +3.3191e-01  +3.4071e-01  8.81e-03  3.24e-05  1.07e-03  1.64e-06  1.26e-04  9.29e-01  
 10  +3.2814e-01  +3.2824e-01  9.58e-05  3.52e-07  1.17e-05  1.80e-08  1.41e-06  9.89e-01  
 11  +3.2810e-01  +3.2810e-01  9.57e-07  3.52e-09  1.17e-07  1.80e-10  1.41e-08  9.90e-01  
 12  +3.2810e-01  +3.2810e-01  9.57e-09  3.52e-11  1.17e-09  1.80e-12  1.41e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 934.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:33 PM: Optimal value: 3.281e-01
(CVXPY) Aug 31 04:44:33 PM: Compilation took 4.091e-03 seconds
(CVXPY) Aug 31 04:44:33 PM: Solver (including time spent in interface) took 1.004e-03 seconds
FULL MODEL:
  Accruacy: 0.672
  Our objective: 0.344

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.344)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7823381423950195
Best over terms:
  Our final objective: 0.344
    Its accruacy: 0.672
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.344
  Highest accruacy: 0.672
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

