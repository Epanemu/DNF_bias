Command:
python test_script.py -s smallest_subclass -d 1 -n 10000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.592
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 1.

Computed total variation: 0.592
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:00 PM: Your problem has 5003 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:00 PM: Finished problem compilation (took 8.767e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5003
  constraints   = 10003
  nnz(P)        = 0
  nnz(A)        = 20003
  cones (total) = 1
    : Nonnegative = 1,  numel = 10003

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9985e-01  +5.0020e+03  5.00e+03  9.82e-01  6.39e+01  1.00e+00  1.00e+00   ------   
  1  +6.6413e-01  +8.0782e+02  8.07e+02  2.20e-01  2.62e+01  4.90e-03  3.30e-01  7.58e-01  
  2  +5.5452e-01  +1.4826e+02  1.48e+02  1.28e-01  1.68e+01  4.12e-03  2.10e-01  5.01e-01  
  3  +5.0003e-01  +4.0002e+00  3.50e+00  2.28e-02  2.84e+00  9.64e-04  1.98e-01  3.35e-01  
  4  +4.9167e-01  +3.2555e+00  2.76e+00  6.45e-03  8.91e-01  6.64e-03  1.54e-02  9.90e-01  
  5  +3.9377e-01  +2.8802e+00  2.49e+00  5.51e-04  7.76e-02  7.21e-02  1.17e-03  9.34e-01  
  6  +3.6791e-01  +1.6455e+00  1.28e+00  3.90e-04  5.34e-02  4.82e-04  9.23e-04  4.12e-01  
  7  +2.6625e-01  +6.3100e-01  3.65e-01  1.03e-04  1.36e-02  3.98e-06  3.19e-04  7.09e-01  
  8  +2.0935e-01  +2.5162e-01  4.23e-02  1.31e-05  1.68e-03  2.04e-06  7.57e-05  9.21e-01  
  9  +2.0423e-01  +2.0502e-01  7.93e-04  2.45e-07  3.14e-05  1.86e-08  1.56e-06  9.80e-01  
 10  +2.0410e-01  +2.0411e-01  7.90e-06  2.45e-09  3.13e-07  1.85e-10  1.56e-08  9.90e-01  
 11  +2.0410e-01  +2.0410e-01  7.90e-08  2.45e-11  3.13e-09  1.85e-12  1.56e-10  9.90e-01  
 12  +2.0410e-01  +2.0410e-01  7.90e-10  2.44e-13  3.13e-11  1.85e-14  1.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.6296ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:00 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:00 PM: Optimal value: 2.041e-01
(CVXPY) Aug 31 04:44:00 PM: Compilation took 8.767e-03 seconds
(CVXPY) Aug 31 04:44:00 PM: Solver (including time spent in interface) took 2.210e-02 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.796
  Our objective: 0.592

IF 
    (x0 = 0) <-- (term's our objective: 0.592)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8755295276641846
Best over terms:
  Our final objective: 0.592
    Its accruacy: 0.796
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.592
  Highest accruacy: 0.796
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

