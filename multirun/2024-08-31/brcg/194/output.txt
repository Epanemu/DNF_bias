Command:
python test_script.py -s smallest_subclass -d 5 -n 10000 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.040400000000000005
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.05639999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:02 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:02 PM: Finished problem compilation (took 1.490e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  9.26e+01  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +1.0021e+03  1.00e+03  3.64e-01  5.41e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4629e-01  +1.4312e+02  1.43e+02  1.45e-01  2.69e+01  9.84e-03  2.35e-01  7.78e-01  
  3  +5.1094e-01  +3.4167e+01  3.37e+01  1.16e-01  2.11e+01  2.36e-05  2.32e-01  8.71e-02  
  4  +5.0019e-01  +1.1990e+00  6.99e-01  4.71e-03  8.70e-01  4.11e-06  1.38e-01  9.90e-01  
  5  +5.0002e-01  +6.0453e-01  1.05e-01  6.97e-04  1.30e-01  1.03e-06  3.53e-02  8.02e-01  
  6  +5.0001e-01  +5.7036e-01  7.04e-02  4.69e-04  8.72e-02  9.62e-07  1.48e-02  6.77e-01  
  7  +4.9992e-01  +5.4371e-01  4.38e-02  2.46e-04  4.58e-02  4.01e-06  1.55e-03  9.13e-01  
  8  +4.9703e-01  +5.3290e-01  3.59e-02  1.29e-05  2.42e-03  1.21e-04  4.05e-05  9.74e-01  
  9  +4.9237e-01  +5.1296e-01  2.06e-02  5.62e-06  1.05e-03  7.06e-05  1.82e-05  6.12e-01  
 10  +4.8955e-01  +5.0242e-01  1.29e-02  3.17e-06  5.93e-04  7.32e-07  1.10e-05  9.07e-01  
 11  +4.8645e-01  +4.8912e-01  2.67e-03  5.81e-07  1.09e-04  1.38e-07  2.21e-06  8.10e-01  
 12  +4.8591e-01  +4.8709e-01  1.18e-03  2.44e-07  4.55e-05  5.74e-08  9.66e-07  9.90e-01  
 13  +4.8551e-01  +4.8552e-01  1.46e-05  2.94e-09  5.49e-07  7.06e-10  1.20e-08  9.88e-01  
 14  +4.8550e-01  +4.8550e-01  1.46e-07  2.94e-11  5.49e-09  7.06e-12  1.20e-10  9.90e-01  
 15  +4.8550e-01  +4.8550e-01  1.47e-09  2.94e-13  5.50e-11  7.98e-14  1.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.7806ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:02 PM: Optimal value: 4.855e-01
(CVXPY) Aug 31 04:49:02 PM: Compilation took 1.490e-02 seconds
(CVXPY) Aug 31 04:49:02 PM: Solver (including time spent in interface) took 4.200e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4855
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:02 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:02 PM: Finished problem compilation (took 1.700e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 45217
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0012e+03  5.00e+03  9.85e-01  9.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.9954e-01  +1.0023e+03  1.00e+03  3.65e-01  5.50e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4620e-01  +1.4293e+02  1.42e+02  1.45e-01  2.72e+01  9.86e-03  2.35e-01  7.79e-01  
  3  +5.1089e-01  +3.4064e+01  3.36e+01  1.16e-01  2.14e+01  2.36e-05  2.32e-01  8.83e-02  
  4  +5.0031e-01  +1.6038e+00  1.10e+00  7.44e-03  1.39e+00  4.47e-06  1.61e-01  7.39e-01  
  5  +5.0004e-01  +7.0590e-01  2.06e-01  1.37e-03  2.59e-01  1.57e-06  6.07e-02  7.17e-01  
  6  +5.0002e-01  +6.4807e-01  1.48e-01  9.88e-04  1.87e-01  1.18e-06  3.91e-02  4.34e-01  
  7  +5.0003e-01  +6.5600e-01  1.56e-01  1.04e-03  1.97e-01  1.07e-06  3.80e-02  2.09e-01  
  8  +5.0000e-01  +5.7781e-01  7.78e-02  5.17e-04  9.76e-02  9.02e-07  1.17e-02  7.46e-01  
  9  +4.9970e-01  +6.0777e-01  1.08e-01  2.70e-04  5.13e-02  1.15e-05  9.77e-04  9.90e-01  
 10  +4.9595e-01  +5.7599e-01  8.00e-02  2.12e-05  4.04e-03  1.16e-04  6.69e-05  9.32e-01  
 11  +4.9537e-01  +5.6258e-01  6.72e-02  1.86e-05  3.54e-03  6.22e-05  5.83e-05  3.34e-01  
 12  +4.9508e-01  +5.5729e-01  6.22e-02  1.83e-05  3.48e-03  4.99e-05  5.82e-05  4.71e-02  
 13  +4.9429e-01  +5.5069e-01  5.64e-02  1.57e-05  2.98e-03  4.09e-05  4.95e-05  2.38e-01  
 14  +4.9386e-01  +5.4347e-01  4.96e-02  1.38e-05  2.63e-03  2.29e-05  4.30e-05  3.83e-01  
 15  +4.9359e-01  +5.4132e-01  4.77e-02  1.30e-05  2.47e-03  2.01e-05  4.01e-05  1.49e-01  
 16  +4.9453e-01  +5.4064e-01  4.61e-02  1.21e-05  2.30e-03  3.29e-06  3.65e-05  7.90e-01  
 17  +4.9376e-01  +5.3575e-01  4.20e-02  1.05e-05  2.00e-03  2.05e-06  3.15e-05  6.76e-01  
 18  +4.8667e-01  +5.0246e-01  1.58e-02  2.73e-06  5.18e-04  1.17e-06  7.97e-06  8.29e-01  
 19  +4.8481e-01  +4.9820e-01  1.34e-02  2.52e-06  4.79e-04  7.90e-07  7.61e-06  4.37e-01  
 20  +4.8054e-01  +4.8541e-01  4.87e-03  7.24e-07  1.37e-04  3.76e-07  2.14e-06  7.42e-01  
 21  +4.7858e-01  +4.7898e-01  4.03e-04  5.92e-08  1.12e-05  3.09e-08  1.77e-07  9.26e-01  
 22  +4.7840e-01  +4.7841e-01  4.62e-06  6.78e-10  1.29e-07  3.63e-10  2.02e-09  9.90e-01  
 23  +4.7840e-01  +4.7840e-01  4.62e-08  6.78e-12  1.29e-09  3.63e-12  2.02e-11  9.90e-01  
 24  +4.7840e-01  +4.7840e-01  4.62e-10  6.79e-14  1.29e-11  3.66e-14  2.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 66.0165ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:02 PM: Optimal value: 4.784e-01
(CVXPY) Aug 31 04:49:02 PM: Compilation took 1.700e-02 seconds
(CVXPY) Aug 31 04:49:02 PM: Solver (including time spent in interface) took 7.101e-02 seconds
Iteration: 2, Objective: 0.4784
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:02 PM: Your problem has 5031 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:02 PM: Finished problem compilation (took 1.410e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5031
  constraints   = 10031
  nnz(P)        = 0
  nnz(A)        = 49365
  cones (total) = 1
    : Nonnegative = 1,  numel = 10031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  9.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.9943e-01  +1.0027e+03  1.00e+03  3.65e-01  5.56e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4609e-01  +1.4270e+02  1.42e+02  1.45e-01  2.75e+01  9.88e-03  2.35e-01  7.80e-01  
  3  +5.1088e-01  +3.4037e+01  3.35e+01  1.16e-01  2.16e+01  2.37e-05  2.32e-01  8.89e-02  
  4  +5.0025e-01  +1.4113e+00  9.11e-01  6.15e-03  1.16e+00  4.36e-06  1.50e-01  8.47e-01  
  5  +5.0004e-01  +6.8870e-01  1.89e-01  1.26e-03  2.41e-01  1.47e-06  5.49e-02  7.03e-01  
  6  +5.0003e-01  +6.6146e-01  1.61e-01  1.08e-03  2.06e-01  1.31e-06  4.16e-02  3.04e-01  
  7  +5.0004e-01  +6.7161e-01  1.72e-01  1.15e-03  2.19e-01  1.21e-06  3.61e-02  3.72e-01  
  8  +5.0001e-01  +6.0249e-01  1.02e-01  6.77e-04  1.29e-01  1.29e-06  1.14e-02  7.62e-01  
  9  +4.9959e-01  +6.1036e-01  1.11e-01  2.13e-04  4.08e-02  1.66e-05  7.52e-04  9.90e-01  
 10  +4.9728e-01  +5.8400e-01  8.67e-02  3.67e-05  7.05e-03  7.41e-05  1.19e-04  8.43e-01  
 11  +4.9813e-01  +5.8863e-01  9.05e-02  3.54e-05  6.80e-03  6.32e-05  1.11e-04  2.90e-01  
 12  +4.9689e-01  +5.7531e-01  7.84e-02  2.64e-05  5.07e-03  5.18e-05  8.16e-05  3.87e-01  
 13  +4.9677e-01  +5.7198e-01  7.52e-02  2.56e-05  4.92e-03  4.10e-05  7.90e-05  1.63e-01  
 14  +4.9463e-01  +5.5632e-01  6.17e-02  1.66e-05  3.19e-03  2.68e-05  5.08e-05  5.90e-01  
 15  +4.9417e-01  +5.5336e-01  5.92e-02  1.65e-05  3.17e-03  2.37e-05  5.07e-05  3.42e-02  
 16  +4.9093e-01  +5.3835e-01  4.74e-02  1.04e-05  2.01e-03  2.18e-05  3.17e-05  4.05e-01  
 17  +4.9074e-01  +5.3750e-01  4.68e-02  1.04e-05  1.99e-03  2.03e-05  3.15e-05  4.75e-02  
 18  +4.8933e-01  +5.2949e-01  4.02e-02  8.93e-06  1.72e-03  3.52e-06  2.78e-05  7.03e-01  
 19  +4.8257e-01  +5.0217e-01  1.96e-02  3.55e-06  6.81e-04  1.52e-06  1.10e-05  8.05e-01  
 20  +4.7821e-01  +4.8567e-01  7.46e-03  1.27e-06  2.44e-04  5.15e-07  3.99e-06  9.21e-01  
 21  +4.7716e-01  +4.8225e-01  5.09e-03  8.18e-07  1.57e-04  3.75e-07  2.56e-06  5.98e-01  
 22  +4.7714e-01  +4.8217e-01  5.03e-03  8.02e-07  1.54e-04  3.75e-07  2.51e-06  8.58e-02  
 23  +4.7706e-01  +4.8191e-01  4.85e-03  7.89e-07  1.52e-04  3.55e-07  2.48e-06  1.43e-01  
 24  +4.7596e-01  +4.7837e-01  2.41e-03  3.81e-07  7.32e-05  1.79e-07  1.20e-06  6.18e-01  
 25  +4.7525e-01  +4.7605e-01  7.92e-04  1.25e-07  2.40e-05  6.01e-08  3.96e-07  7.68e-01  
 26  +4.7491e-01  +4.7495e-01  3.29e-05  5.19e-09  9.97e-07  2.50e-09  1.65e-08  9.63e-01  
 27  +4.7490e-01  +4.7490e-01  3.38e-07  5.33e-11  1.02e-08  2.56e-11  1.69e-10  9.90e-01  
 28  +4.7490e-01  +4.7490e-01  3.38e-09  5.33e-13  1.02e-10  2.60e-13  1.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.5674ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:02 PM: Optimal value: 4.749e-01
(CVXPY) Aug 31 04:49:02 PM: Compilation took 1.410e-02 seconds
(CVXPY) Aug 31 04:49:02 PM: Solver (including time spent in interface) took 8.653e-02 seconds
Iteration: 3, Objective: 0.4749
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:02 PM: Your problem has 5033 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:02 PM: Finished problem compilation (took 1.600e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5033
  constraints   = 10033
  nnz(P)        = 0
  nnz(A)        = 49999
  cones (total) = 1
    : Nonnegative = 1,  numel = 10033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  9.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.9934e-01  +1.0031e+03  1.00e+03  3.65e-01  5.57e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4600e-01  +1.4254e+02  1.42e+02  1.45e-01  2.75e+01  9.90e-03  2.36e-01  7.80e-01  
  3  +5.1086e-01  +3.4020e+01  3.35e+01  1.16e-01  2.16e+01  2.37e-05  2.32e-01  8.95e-02  
  4  +5.0021e-01  +1.2809e+00  7.81e-01  5.27e-03  1.00e+00  4.30e-06  1.41e-01  9.38e-01  
  5  +5.0004e-01  +7.0128e-01  2.01e-01  1.35e-03  2.57e-01  1.55e-06  5.64e-02  6.48e-01  
  6  +5.0003e-01  +6.7572e-01  1.76e-01  1.18e-03  2.25e-01  1.43e-06  4.07e-02  3.86e-01  
  7  +5.0003e-01  +6.6753e-01  1.68e-01  1.12e-03  2.14e-01  1.47e-06  2.78e-02  4.55e-01  
  8  +4.9998e-01  +6.2858e-01  1.29e-01  7.78e-04  1.49e-01  2.81e-06  6.04e-03  9.45e-01  
  9  +4.9836e-01  +6.0820e-01  1.10e-01  6.19e-05  1.19e-02  6.34e-05  2.05e-04  9.69e-01  
 10  +4.9671e-01  +5.8700e-01  9.03e-02  4.19e-05  8.06e-03  5.34e-05  1.39e-04  4.02e-01  
 11  +4.9723e-01  +5.9053e-01  9.33e-02  4.25e-05  8.17e-03  5.20e-05  1.38e-04  8.45e-02  
 12  +4.9729e-01  +5.8845e-01  9.12e-02  3.60e-05  6.92e-03  4.23e-05  1.16e-04  3.90e-01  
 13  +4.9717e-01  +5.8550e-01  8.83e-02  3.56e-05  6.85e-03  3.57e-05  1.14e-04  1.06e-01  
 14  +4.9587e-01  +5.7529e-01  7.94e-02  2.64e-05  5.09e-03  3.01e-05  8.42e-05  4.22e-01  
 15  +4.9299e-01  +5.5285e-01  5.99e-02  1.69e-05  3.25e-03  8.77e-06  5.30e-05  7.83e-01  
 16  +4.9137e-01  +5.4564e-01  5.43e-02  1.32e-05  2.54e-03  8.45e-06  4.12e-05  2.61e-01  
 17  +4.9081e-01  +5.4351e-01  5.27e-02  1.31e-05  2.53e-03  7.90e-06  4.12e-05  1.01e-02  
 18  +4.8557e-01  +5.2248e-01  3.69e-02  7.60e-06  1.46e-03  5.14e-06  2.41e-05  5.27e-01  
 19  +4.8560e-01  +5.1976e-01  3.42e-02  7.00e-06  1.35e-03  2.51e-06  2.24e-05  6.75e-01  
 20  +4.8246e-01  +5.0722e-01  2.48e-02  4.88e-06  9.38e-04  1.35e-06  1.59e-05  8.23e-01  
 21  +4.7578e-01  +4.8181e-01  6.03e-03  1.10e-06  2.11e-04  2.95e-07  3.67e-06  8.55e-01  
 22  +4.7485e-01  +4.7863e-01  3.79e-03  6.68e-07  1.28e-04  1.89e-07  2.26e-06  4.13e-01  
 23  +4.7485e-01  +4.7863e-01  3.79e-03  6.65e-07  1.28e-04  1.91e-07  2.25e-06  3.64e-02  
 24  +4.7473e-01  +4.7823e-01  3.50e-03  6.15e-07  1.18e-04  1.81e-07  2.09e-06  1.75e-01  
 25  +4.7406e-01  +4.7592e-01  1.85e-03  3.20e-07  6.15e-05  1.02e-07  1.09e-06  5.80e-01  
 26  +4.7334e-01  +4.7344e-01  9.88e-05  1.70e-08  3.26e-06  6.36e-09  5.88e-08  9.90e-01  
 27  +4.7330e-01  +4.7330e-01  9.89e-07  1.70e-10  3.27e-08  6.36e-11  5.89e-10  9.90e-01  
 28  +4.7330e-01  +4.7330e-01  9.89e-09  1.70e-12  3.27e-10  6.36e-13  5.89e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 88.9337ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:02 PM: Optimal value: 4.733e-01
(CVXPY) Aug 31 04:49:02 PM: Compilation took 1.600e-02 seconds
(CVXPY) Aug 31 04:49:02 PM: Solver (including time spent in interface) took 9.526e-02 seconds
Iteration: 4, Objective: 0.4733
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:02 PM: Your problem has 5036 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:02 PM: Finished problem compilation (took 1.622e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5036
  constraints   = 10036
  nnz(P)        = 0
  nnz(A)        = 50807
  cones (total) = 1
    : Nonnegative = 1,  numel = 10036

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  9.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.9933e-01  +1.0031e+03  1.00e+03  3.65e-01  5.57e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4600e-01  +1.4254e+02  1.42e+02  1.45e-01  2.75e+01  9.90e-03  2.36e-01  7.80e-01  
  3  +5.1086e-01  +3.4020e+01  3.35e+01  1.16e-01  2.16e+01  2.37e-05  2.32e-01  8.95e-02  
  4  +5.0022e-01  +1.3360e+00  8.36e-01  5.64e-03  1.07e+00  4.33e-06  1.45e-01  8.99e-01  
  5  +5.0004e-01  +6.8323e-01  1.83e-01  1.23e-03  2.34e-01  1.46e-06  5.25e-02  6.95e-01  
  6  +5.0003e-01  +6.6659e-01  1.67e-01  1.11e-03  2.13e-01  1.41e-06  3.84e-02  3.77e-01  
  7  +5.0003e-01  +6.6724e-01  1.67e-01  1.12e-03  2.13e-01  1.48e-06  2.75e-02  4.44e-01  
  8  +5.0001e-01  +6.5180e-01  1.52e-01  9.69e-04  1.85e-01  2.13e-06  9.99e-03  8.24e-01  
  9  +4.9877e-01  +5.9430e-01  9.55e-02  6.97e-05  1.34e-02  4.72e-05  2.33e-04  9.86e-01  
 10  +4.9747e-01  +5.8182e-01  8.43e-02  4.41e-05  8.50e-03  5.23e-05  1.47e-04  4.34e-01  
 11  +4.9773e-01  +5.8344e-01  8.57e-02  4.49e-05  8.64e-03  5.08e-05  1.47e-04  5.70e-02  
 12  +4.9707e-01  +5.7912e-01  8.21e-02  3.43e-05  6.61e-03  4.97e-05  1.10e-04  3.90e-01  
 13  +4.9699e-01  +5.7756e-01  8.06e-02  3.41e-05  6.56e-03  4.35e-05  1.09e-04  1.00e-01  
 14  +4.9642e-01  +5.7426e-01  7.78e-02  2.93e-05  5.65e-03  4.05e-05  9.33e-05  2.52e-01  
 15  +4.9613e-01  +5.7103e-01  7.49e-02  2.82e-05  5.43e-03  2.49e-05  8.96e-05  3.43e-01  
 16  +4.9332e-01  +5.5588e-01  6.26e-02  1.75e-05  3.36e-03  1.94e-05  5.47e-05  5.91e-01  
 17  +4.9288e-01  +5.5450e-01  6.16e-02  1.60e-05  3.08e-03  1.83e-05  5.00e-05  1.69e-01  
 18  +4.9120e-01  +5.4763e-01  5.64e-02  1.51e-05  2.90e-03  1.14e-05  4.89e-05  2.46e-01  
 19  +4.9094e-01  +5.4648e-01  5.55e-02  1.47e-05  2.83e-03  1.08e-05  4.76e-05  6.38e-02  
 20  +4.9028e-01  +5.4362e-01  5.33e-02  1.38e-05  2.65e-03  9.94e-06  4.45e-05  1.11e-01  
 21  +4.8968e-01  +5.4127e-01  5.16e-02  1.26e-05  2.42e-03  5.97e-06  4.04e-05  4.84e-01  
 22  +4.8545e-01  +5.2381e-01  3.84e-02  8.40e-06  1.62e-03  3.94e-06  2.73e-05  4.36e-01  
 23  +4.7934e-01  +4.9857e-01  1.92e-02  3.77e-06  7.25e-04  1.13e-06  1.26e-05  8.32e-01  
 24  +4.7399e-01  +4.7817e-01  4.18e-03  7.71e-07  1.48e-04  2.14e-07  2.71e-06  8.02e-01  
 25  +4.7400e-01  +4.7819e-01  4.19e-03  7.70e-07  1.48e-04  2.16e-07  2.71e-06  1.45e-02  
 26  +4.7388e-01  +4.7768e-01  3.79e-03  6.94e-07  1.34e-04  2.12e-07  2.45e-06  4.40e-01  
 27  +4.7348e-01  +4.7621e-01  2.73e-03  4.96e-07  9.54e-05  1.58e-07  1.77e-06  4.73e-01  
 28  +4.7252e-01  +4.7281e-01  2.90e-04  5.25e-08  1.01e-05  1.77e-08  1.91e-07  9.90e-01  
 29  +4.7240e-01  +4.7240e-01  2.94e-06  5.32e-10  1.02e-07  1.79e-10  1.94e-09  9.90e-01  
 30  +4.7240e-01  +4.7240e-01  2.94e-08  5.32e-12  1.02e-09  1.79e-12  1.94e-11  9.90e-01  
 31  +4.7240e-01  +4.7240e-01  2.94e-10  5.32e-14  1.02e-11  1.79e-14  1.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97.8021ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:03 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:03 PM: Optimal value: 4.724e-01
(CVXPY) Aug 31 04:49:03 PM: Compilation took 1.622e-02 seconds
(CVXPY) Aug 31 04:49:03 PM: Solver (including time spent in interface) took 1.035e-01 seconds
Iteration: 5, Objective: 0.4724
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:03 PM: Your problem has 5037 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:03 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5037
  constraints   = 10037
  nnz(P)        = 0
  nnz(A)        = 50990
  cones (total) = 1
    : Nonnegative = 1,  numel = 10037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  9.54e+01  1.00e+00  1.00e+00   ------   
  1  +5.9934e-01  +1.0031e+03  1.00e+03  3.65e-01  5.57e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4600e-01  +1.4253e+02  1.42e+02  1.45e-01  2.75e+01  9.90e-03  2.36e-01  7.80e-01  
  3  +5.1086e-01  +3.4017e+01  3.35e+01  1.16e-01  2.16e+01  2.37e-05  2.32e-01  8.95e-02  
  4  +5.0023e-01  +1.3397e+00  8.39e-01  5.67e-03  1.08e+00  4.33e-06  1.45e-01  8.97e-01  
  5  +5.0004e-01  +7.0855e-01  2.09e-01  1.40e-03  2.67e-01  1.57e-06  5.83e-02  6.53e-01  
  6  +5.0003e-01  +6.7789e-01  1.78e-01  1.19e-03  2.28e-01  1.43e-06  4.28e-02  3.38e-01  
  7  +5.0004e-01  +6.8188e-01  1.82e-01  1.21e-03  2.32e-01  1.41e-06  3.13e-02  4.93e-01  
  8  +5.0001e-01  +6.4768e-01  1.48e-01  9.65e-04  1.85e-01  1.97e-06  1.28e-02  6.34e-01  
  9  +4.9934e-01  +6.0488e-01  1.06e-01  1.54e-04  2.97e-02  2.63e-05  5.41e-04  9.75e-01  
 10  +4.9837e-01  +5.9419e-01  9.58e-02  7.39e-05  1.42e-02  4.55e-05  2.50e-04  5.71e-01  
 11  +4.9848e-01  +5.9439e-01  9.59e-02  7.39e-05  1.42e-02  4.26e-05  2.50e-04  6.48e-02  
 12  +4.9756e-01  +5.8549e-01  8.79e-02  4.95e-05  9.53e-03  4.83e-05  1.64e-04  4.19e-01  
 13  +4.9744e-01  +5.8312e-01  8.57e-02  4.24e-05  8.17e-03  4.00e-05  1.37e-04  3.80e-01  
 14  +4.9754e-01  +5.7841e-01  8.09e-02  3.55e-05  6.83e-03  1.40e-05  1.12e-04  7.36e-01  
 15  +4.9649e-01  +5.7272e-01  7.62e-02  2.65e-05  5.10e-03  9.27e-06  8.30e-05  6.61e-01  
 16  +4.9378e-01  +5.5770e-01  6.39e-02  1.73e-05  3.33e-03  6.78e-06  5.39e-05  6.11e-01  
 17  +4.9253e-01  +5.5411e-01  6.16e-02  1.51e-05  2.92e-03  4.62e-06  4.72e-05  5.30e-01  
 18  +4.9178e-01  +5.5063e-01  5.89e-02  1.43e-05  2.75e-03  4.15e-06  4.47e-05  1.50e-01  
 19  +4.8687e-01  +5.2828e-01  4.14e-02  9.57e-06  1.84e-03  1.33e-06  3.09e-05  9.48e-01  
 20  +4.8197e-01  +5.0913e-01  2.72e-02  5.58e-06  1.07e-03  1.06e-06  1.84e-05  6.61e-01  
 21  +4.8076e-01  +5.0354e-01  2.28e-02  4.47e-06  8.60e-04  1.15e-06  1.48e-05  7.25e-01  
 22  +4.7457e-01  +4.8026e-01  5.69e-03  1.05e-06  2.03e-04  2.54e-07  3.66e-06  7.90e-01  
 23  +4.7457e-01  +4.8027e-01  5.70e-03  1.05e-06  2.02e-04  2.58e-07  3.65e-06  3.40e-02  
 24  +4.7448e-01  +4.7988e-01  5.40e-03  9.92e-07  1.91e-04  2.65e-07  3.45e-06  2.51e-01  
 25  +4.7312e-01  +4.7494e-01  1.82e-03  3.29e-07  6.33e-05  1.06e-07  1.17e-06  9.04e-01  
 26  +4.7242e-01  +4.7248e-01  5.65e-05  1.02e-08  1.96e-06  3.20e-09  3.68e-08  9.70e-01  
 27  +4.7240e-01  +4.7240e-01  5.65e-07  1.02e-10  1.96e-08  3.20e-11  3.68e-10  9.90e-01  
 28  +4.7240e-01  +4.7240e-01  5.65e-09  1.02e-12  1.96e-10  3.21e-13  3.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.8054ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:03 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:03 PM: Optimal value: 4.724e-01
(CVXPY) Aug 31 04:49:03 PM: Compilation took 1.501e-02 seconds
(CVXPY) Aug 31 04:49:03 PM: Solver (including time spent in interface) took 8.729e-02 seconds
FULL MODEL:
  Accruacy: 0.5258
  Our objective: 0.05160000000000006

IF 
    (x3 = 1 AND x0 = 0 AND x1 = 0 AND x4 = 0)            <-- (term's our objective: 0.0059999999999999915)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.040400000000000005)
 OR (x2 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.003799999999999963)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.0013999999999999846)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.5068306922912598
Best over terms:
  Our final objective: 0.040400000000000005
    Its accruacy: 0.5202
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.040400000000000005
  Highest accruacy: 0.5202
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

