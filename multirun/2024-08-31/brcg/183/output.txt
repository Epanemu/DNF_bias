Command:
python test_script.py -s smallest_subclass -d 5 -n 1000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.06999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 5.

Computed total variation: 0.174
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:23 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:23 PM: Finished problem compilation (took 4.980e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 4011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9985e-01  +5.0062e+02  5.00e+02  9.52e-01  2.86e+01  1.00e+00  1.00e+00   ------   
  1  +5.9925e-01  +1.0057e+02  1.00e+02  3.51e-01  1.65e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4487e-01  +1.4464e+01  1.39e+01  1.27e-01  7.36e+00  9.97e-03  2.31e-01  7.91e-01  
  3  +5.0573e-01  +2.7885e+00  2.28e+00  4.65e-02  2.57e+00  1.71e-05  2.20e-01  2.24e-01  
  4  +5.0013e-01  +6.2211e-01  1.22e-01  2.64e-03  1.53e-01  6.85e-06  4.28e-02  9.89e-01  
  5  +4.9976e-01  +6.0405e-01  1.04e-01  2.08e-03  1.21e-01  1.27e-05  1.40e-02  7.55e-01  
  6  +4.9171e-01  +5.8741e-01  9.57e-02  2.68e-04  1.58e-02  1.50e-04  9.01e-04  9.49e-01  
  7  +4.7951e-01  +5.0731e-01  2.78e-02  6.15e-05  3.63e-03  1.15e-05  2.32e-04  8.73e-01  
  8  +4.7267e-01  +4.8011e-01  7.44e-03  1.52e-05  8.95e-04  2.65e-06  6.24e-05  7.96e-01  
  9  +4.7031e-01  +4.7088e-01  5.73e-04  1.15e-06  6.77e-05  2.57e-07  4.89e-06  9.90e-01  
 10  +4.7010e-01  +4.7011e-01  5.74e-06  1.15e-08  6.77e-07  2.56e-09  4.90e-08  9.90e-01  
 11  +4.7010e-01  +4.7010e-01  5.74e-08  1.15e-10  6.77e-09  2.56e-11  4.90e-10  9.90e-01  
 12  +4.7010e-01  +4.7010e-01  5.74e-10  1.15e-12  6.77e-11  2.57e-13  4.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.8424ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:23 PM: Optimal value: 4.701e-01
(CVXPY) Aug 31 04:48:23 PM: Compilation took 4.980e-03 seconds
(CVXPY) Aug 31 04:48:23 PM: Solver (including time spent in interface) took 5.081e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:23 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:23 PM: Finished problem compilation (took 4.016e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 4664
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9975e-01  +5.0119e+02  5.01e+02  9.53e-01  2.92e+01  1.00e+00  1.01e+00   ------   
  1  +5.9828e-01  +1.0080e+02  1.00e+02  3.54e-01  1.68e+01  3.98e-03  5.08e-01  6.44e-01  
  2  +5.4363e-01  +1.4215e+01  1.37e+01  1.25e-01  7.30e+00  1.02e-02  2.29e-01  8.04e-01  
  3  +5.0485e-01  +2.6095e+00  2.10e+00  4.33e-02  2.43e+00  1.67e-05  2.15e-01  2.79e-01  
  4  +5.0100e-01  +9.7993e-01  4.79e-01  1.04e-02  6.04e-01  7.62e-06  1.01e-01  6.08e-01  
  5  +5.0007e-01  +6.9443e-01  1.94e-01  4.06e-03  2.39e-01  6.76e-06  2.89e-02  7.96e-01  
  6  +4.9249e-01  +7.0454e-01  2.12e-01  7.82e-04  4.71e-02  7.39e-05  2.38e-03  9.47e-01  
  7  +4.7967e-01  +5.8383e-01  1.04e-01  3.15e-04  1.89e-02  3.16e-05  1.04e-03  6.95e-01  
  8  +4.7377e-01  +5.5206e-01  7.83e-02  2.01e-04  1.20e-02  2.60e-05  7.00e-04  5.11e-01  
  9  +4.7010e-01  +5.3015e-01  6.00e-02  1.38e-04  8.25e-03  2.40e-05  4.94e-04  7.98e-01  
 10  +4.6770e-01  +5.1766e-01  5.00e-02  1.17e-04  6.98e-03  1.99e-05  4.28e-04  3.51e-01  
 11  +4.5798e-01  +4.7110e-01  1.31e-02  2.86e-05  1.71e-03  4.54e-06  1.16e-04  8.22e-01  
 12  +4.5437e-01  +4.5484e-01  4.71e-04  1.01e-06  6.05e-05  8.91e-08  4.54e-06  9.75e-01  
 13  +4.5420e-01  +4.5421e-01  4.82e-06  1.04e-08  6.18e-07  9.15e-10  4.70e-08  9.90e-01  
 14  +4.5420e-01  +4.5420e-01  4.82e-08  1.04e-10  6.19e-09  9.15e-12  4.70e-10  9.90e-01  
 15  +4.5420e-01  +4.5420e-01  4.82e-10  1.04e-12  6.19e-11  9.15e-14  4.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2048ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:23 PM: Optimal value: 4.542e-01
(CVXPY) Aug 31 04:48:23 PM: Compilation took 4.016e-03 seconds
(CVXPY) Aug 31 04:48:23 PM: Solver (including time spent in interface) took 6.032e-03 seconds
Iteration: 2, Objective: 0.4542
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:23 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:23 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 5508
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +5.0124e+02  5.01e+02  9.53e-01  3.04e+01  1.00e+00  1.01e+00   ------   
  1  +5.9760e-01  +1.0109e+02  1.00e+02  3.57e-01  1.74e+01  3.98e-03  5.11e-01  6.42e-01  
  2  +5.4295e-01  +1.4096e+01  1.36e+01  1.25e-01  7.46e+00  1.04e-02  2.29e-01  8.11e-01  
  3  +5.0479e-01  +2.6074e+00  2.10e+00  4.35e-02  2.53e+00  1.72e-05  2.14e-01  2.94e-01  
  4  +5.0086e-01  +9.2903e-01  4.28e-01  9.34e-03  5.64e-01  7.43e-06  9.05e-02  6.55e-01  
  5  +4.9991e-01  +7.7612e-01  2.76e-01  5.21e-03  3.17e-01  1.29e-05  2.58e-02  8.70e-01  
  6  +4.9378e-01  +7.3751e-01  2.44e-01  1.14e-03  7.14e-02  6.70e-05  3.60e-03  8.82e-01  
  7  +4.9489e-01  +7.4268e-01  2.48e-01  1.09e-03  6.81e-02  6.98e-05  3.33e-03  3.04e-01  
  8  +4.8190e-01  +6.3970e-01  1.58e-01  3.77e-04  2.36e-02  8.61e-05  1.16e-03  7.11e-01  
  9  +4.7961e-01  +6.2682e-01  1.47e-01  3.56e-04  2.22e-02  7.41e-05  1.11e-03  2.09e-01  
 10  +4.6876e-01  +5.7861e-01  1.10e-01  2.40e-04  1.50e-02  5.31e-05  7.77e-04  4.10e-01  
 11  +4.4693e-01  +4.7809e-01  3.12e-02  6.28e-05  3.89e-03  9.88e-06  2.26e-04  8.50e-01  
 12  +4.3955e-01  +4.4871e-01  9.16e-03  1.78e-05  1.10e-03  2.94e-06  6.86e-05  7.32e-01  
 13  +4.3648e-01  +4.3696e-01  4.80e-04  9.18e-07  5.67e-05  1.42e-07  3.70e-06  9.50e-01  
 14  +4.3630e-01  +4.3631e-01  5.32e-06  1.02e-08  6.28e-07  1.63e-09  4.11e-08  9.89e-01  
 15  +4.3630e-01  +4.3630e-01  5.32e-08  1.02e-10  6.28e-09  1.62e-11  4.11e-10  9.90e-01  
 16  +4.3630e-01  +4.3630e-01  5.32e-10  1.02e-12  6.28e-11  1.63e-13  4.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4837ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:23 PM: Optimal value: 4.363e-01
(CVXPY) Aug 31 04:48:23 PM: Compilation took 3.999e-03 seconds
(CVXPY) Aug 31 04:48:23 PM: Solver (including time spent in interface) took 5.045e-03 seconds
Iteration: 3, Objective: 0.4363
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:23 PM: Your problem has 541 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:23 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:23 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:23 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 1041
  nnz(P)        = 0
  nnz(A)        = 5903
  cones (total) = 1
    : Nonnegative = 1,  numel = 1041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9969e-01  +5.0118e+02  5.01e+02  9.53e-01  3.05e+01  1.00e+00  1.01e+00   ------   
  1  +5.9605e-01  +1.0136e+02  1.01e+02  3.61e-01  1.75e+01  3.97e-03  5.14e-01  6.40e-01  
  2  +5.4199e-01  +1.3904e+01  1.34e+01  1.24e-01  7.37e+00  1.06e-02  2.27e-01  8.22e-01  
  3  +5.0470e-01  +2.6050e+00  2.10e+00  4.36e-02  2.54e+00  1.79e-05  2.11e-01  3.12e-01  
  4  +5.0093e-01  +9.7865e-01  4.78e-01  1.04e-02  6.33e-01  7.96e-06  9.21e-02  6.31e-01  
  5  +5.0001e-01  +8.9495e-01  3.95e-01  7.36e-03  4.51e-01  1.46e-05  3.45e-02  7.32e-01  
  6  +4.8997e-01  +7.9220e-01  3.02e-01  1.09e-03  6.86e-02  8.91e-05  3.39e-03  9.27e-01  
  7  +4.8582e-01  +7.6825e-01  2.82e-01  8.42e-04  5.28e-02  9.79e-05  2.55e-03  3.27e-01  
  8  +4.8087e-01  +7.3346e-01  2.53e-01  6.51e-04  4.08e-02  9.70e-05  1.98e-03  3.27e-01  
  9  +4.6497e-01  +6.0454e-01  1.40e-01  3.44e-04  2.14e-02  4.64e-05  1.12e-03  8.69e-01  
 10  +4.5772e-01  +5.7110e-01  1.13e-01  2.56e-04  1.60e-02  3.94e-05  8.62e-04  2.95e-01  
 11  +4.4937e-01  +5.2688e-01  7.75e-02  1.70e-04  1.06e-02  3.68e-05  5.95e-04  9.90e-01  
 12  +4.3508e-01  +4.6793e-01  3.28e-02  6.66e-05  4.13e-03  1.47e-05  2.50e-04  6.37e-01  
 13  +4.2584e-01  +4.2977e-01  3.93e-03  7.78e-06  4.82e-04  1.51e-06  3.13e-05  8.82e-01  
 14  +4.2569e-01  +4.2927e-01  3.58e-03  6.92e-06  4.29e-04  1.44e-06  2.77e-05  1.86e-01  
 15  +4.2531e-01  +4.2774e-01  2.42e-03  4.69e-06  2.91e-04  1.11e-06  1.89e-05  6.16e-01  
 16  +4.2446e-01  +4.2463e-01  1.63e-04  3.14e-07  1.95e-05  7.93e-08  1.28e-06  9.90e-01  
 17  +4.2440e-01  +4.2440e-01  1.99e-06  3.83e-09  2.37e-07  9.66e-10  1.56e-08  9.88e-01  
 18  +4.2440e-01  +4.2440e-01  1.99e-08  3.83e-11  2.37e-09  9.66e-12  1.56e-10  9.90e-01  
 19  +4.2440e-01  +4.2440e-01  1.99e-10  3.83e-13  2.37e-11  9.69e-14  1.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.1811ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:23 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:23 PM: Optimal value: 4.244e-01
(CVXPY) Aug 31 04:48:23 PM: Compilation took 5.001e-03 seconds
(CVXPY) Aug 31 04:48:23 PM: Solver (including time spent in interface) took 9.011e-03 seconds
Iteration: 4, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:24 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:24 PM: Finished problem compilation (took 6.550e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 6192
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9966e-01  +5.0117e+02  5.01e+02  9.54e-01  3.06e+01  1.00e+00  1.01e+00   ------   
  1  +5.9458e-01  +1.0182e+02  1.01e+02  3.64e-01  1.76e+01  3.96e-03  5.17e-01  6.37e-01  
  2  +5.4108e-01  +1.3736e+01  1.32e+01  1.23e-01  7.31e+00  1.08e-02  2.26e-01  8.32e-01  
  3  +5.0471e-01  +2.6255e+00  2.12e+00  4.41e-02  2.57e+00  1.88e-05  2.09e-01  3.27e-01  
  4  +5.0112e-01  +1.0794e+00  5.78e-01  1.26e-02  7.66e-01  9.00e-06  1.01e-01  5.75e-01  
  5  +5.0006e-01  +1.0630e+00  5.63e-01  9.54e-03  5.87e-01  2.19e-05  3.91e-02  8.00e-01  
  6  +4.9099e-01  +8.6759e-01  3.77e-01  1.58e-03  9.91e-02  8.41e-05  5.08e-03  9.07e-01  
  7  +4.8324e-01  +7.8311e-01  3.00e-01  9.60e-04  6.03e-02  8.63e-05  3.01e-03  5.43e-01  
  8  +4.8241e-01  +7.7162e-01  2.89e-01  8.97e-04  5.63e-02  8.62e-05  2.79e-03  1.49e-01  
  9  +4.8330e-01  +7.5170e-01  2.68e-01  8.11e-04  5.10e-02  8.88e-05  2.48e-03  5.88e-01  
 10  +4.8167e-01  +7.3955e-01  2.58e-01  7.65e-04  4.81e-02  8.59e-05  2.35e-03  1.27e-01  
 11  +4.7961e-01  +7.1994e-01  2.40e-01  7.08e-04  4.44e-02  8.08e-05  2.19e-03  3.25e-01  
 12  +4.6006e-01  +6.0497e-01  1.45e-01  3.24e-04  2.03e-02  5.68e-05  1.05e-03  5.84e-01  
 13  +4.5306e-01  +5.7123e-01  1.18e-01  2.49e-04  1.56e-02  4.81e-05  8.30e-04  2.88e-01  
 14  +4.4357e-01  +5.1642e-01  7.29e-02  1.53e-04  9.54e-03  3.78e-05  5.32e-04  9.90e-01  
 15  +4.3394e-01  +4.7701e-01  4.31e-02  8.62e-05  5.36e-03  2.20e-05  3.11e-04  4.49e-01  
 16  +4.2780e-01  +4.5130e-01  2.35e-02  4.56e-05  2.83e-03  1.27e-05  1.70e-04  7.40e-01  
 17  +4.2080e-01  +4.2407e-01  3.27e-03  6.26e-06  3.89e-04  1.70e-06  2.43e-05  9.15e-01  
 18  +4.1966e-01  +4.1982e-01  1.60e-04  3.06e-07  1.90e-05  8.74e-08  1.20e-06  9.90e-01  
 19  +4.1960e-01  +4.1960e-01  1.60e-06  3.06e-09  1.90e-07  8.74e-10  1.20e-08  9.90e-01  
 20  +4.1960e-01  +4.1960e-01  1.60e-08  3.06e-11  1.90e-09  8.75e-12  1.20e-10  9.90e-01  
 21  +4.1960e-01  +4.1960e-01  1.60e-10  3.06e-13  1.90e-11  8.75e-14  1.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8262ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:24 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:24 PM: Optimal value: 4.196e-01
(CVXPY) Aug 31 04:48:24 PM: Compilation took 6.550e-03 seconds
(CVXPY) Aug 31 04:48:24 PM: Solver (including time spent in interface) took 8.101e-03 seconds
FULL MODEL:
  Accruacy: 0.57
  Our objective: 0.14000000000000004

IF 
    (x0 = 1 AND x1 = 1 AND x2 = 1)                       <-- (term's our objective: 0.038000000000000006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.06999999999999995)
 OR (x0 = 1 AND x2 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.018000000000000033)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.01400000000000004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.9515655040740967
Best over terms:
  Our final objective: 0.06999999999999995
    Its accruacy: 0.535
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.06999999999999995
  Highest accruacy: 0.535
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

