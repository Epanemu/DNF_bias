Command:
python test_script.py -s smallest_subclass -d 2 -n 5000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30519999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 2.

Computed total variation: 0.30519999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:46 PM: Your problem has 2505 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:46 PM: Finished problem compilation (took 6.792e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2505
  constraints   = 5005
  nnz(P)        = 0
  nnz(A)        = 12505
  cones (total) = 1
    : Nonnegative = 1,  numel = 5005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9997e-01  +2.5009e+03  2.50e+03  9.76e-01  4.96e+01  1.00e+00  1.00e+00   ------   
  1  +6.3742e-01  +4.3723e+02  4.37e+02  2.65e-01  2.34e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5881e-01  +8.1553e+01  8.10e+01  1.30e-01  1.32e+01  5.30e-03  2.15e-01  5.91e-01  
  3  +5.0211e-01  +4.3369e+00  3.83e+00  3.46e-02  3.32e+00  2.57e-06  2.10e-01  1.67e-01  
  4  +5.0003e-01  +9.1142e-01  4.11e-01  3.87e-03  3.86e-01  1.43e-06  7.34e-02  8.29e-01  
  5  +4.8664e-01  +2.4562e+00  1.97e+00  2.19e-03  2.24e-01  7.10e-05  6.01e-03  9.72e-01  
  6  +4.5593e-01  +1.2181e+00  7.62e-01  3.52e-04  3.60e-02  9.35e-05  9.83e-04  8.38e-01  
  7  +4.2111e-01  +5.2275e-01  1.02e-01  4.98e-05  5.03e-03  9.58e-06  1.66e-04  9.66e-01  
  8  +3.9348e-01  +4.1181e-01  1.83e-02  8.09e-06  8.12e-04  1.75e-06  3.54e-05  8.75e-01  
  9  +3.8882e-01  +3.8926e-01  4.43e-04  1.95e-07  1.96e-05  4.07e-08  8.86e-07  9.75e-01  
 10  +3.8870e-01  +3.8871e-01  4.43e-06  1.95e-09  1.96e-07  4.07e-10  8.88e-09  9.90e-01  
 11  +3.8870e-01  +3.8870e-01  4.43e-08  1.95e-11  1.96e-09  4.07e-12  8.88e-11  9.90e-01  
 12  +3.8870e-01  +3.8870e-01  4.43e-10  1.95e-13  1.96e-11  4.07e-14  8.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.13ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:46 PM: Optimal value: 3.887e-01
(CVXPY) Aug 31 04:44:46 PM: Compilation took 6.792e-03 seconds
(CVXPY) Aug 31 04:44:46 PM: Solver (including time spent in interface) took 1.264e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3887
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:46 PM: Your problem has 2506 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:46 PM: Finished problem compilation (took 5.016e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2506
  constraints   = 5006
  nnz(P)        = 0
  nnz(A)        = 13502
  cones (total) = 1
    : Nonnegative = 1,  numel = 5006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9990e-01  +2.5018e+03  2.50e+03  9.76e-01  5.15e+01  1.00e+00  1.00e+00   ------   
  1  +6.3708e-01  +4.3758e+02  4.37e+02  2.66e-01  2.43e+01  4.49e-03  3.89e-01  7.24e-01  
  2  +5.5860e-01  +8.1332e+01  8.08e+01  1.29e-01  1.36e+01  5.33e-03  2.14e-01  5.94e-01  
  3  +5.0215e-01  +4.4944e+00  3.99e+00  3.59e-02  3.58e+00  5.60e-05  2.09e-01  1.67e-01  
  4  +4.9996e-01  +8.1709e-01  3.17e-01  2.98e-03  3.09e-01  1.63e-05  5.32e-02  9.25e-01  
  5  +4.9944e-01  +9.0003e-01  4.01e-01  3.42e-03  3.57e-01  4.89e-05  2.14e-02  6.94e-01  
  6  +4.9204e-01  +8.7901e-01  3.87e-01  7.59e-04  8.10e-02  4.42e-04  2.14e-03  9.02e-01  
  7  +4.7125e-01  +7.7765e-01  3.06e-01  2.06e-04  2.20e-02  1.17e-03  5.43e-04  7.62e-01  
  8  +4.7125e-01  +8.0007e-01  3.29e-01  1.98e-04  2.11e-02  1.13e-03  5.13e-04  2.44e-01  
  9  +4.6936e-01  +8.0160e-01  3.32e-01  1.87e-04  2.00e-02  1.03e-03  4.85e-04  1.78e-01  
 10  +4.5147e-01  +7.5446e-01  3.03e-01  1.43e-04  1.52e-02  1.03e-05  4.43e-04  8.35e-01  
 11  +4.2628e-01  +6.3296e-01  2.07e-01  9.53e-05  1.00e-02  1.89e-05  2.92e-04  8.61e-01  
 12  +3.9169e-01  +5.1835e-01  1.27e-01  4.74e-05  4.97e-03  1.34e-05  1.48e-04  5.94e-01  
 13  +3.5192e-01  +3.6167e-01  9.75e-03  3.52e-06  3.67e-04  1.21e-07  1.26e-05  9.49e-01  
 14  +3.4755e-01  +3.4766e-01  1.07e-04  3.86e-08  4.02e-06  1.53e-09  1.43e-07  9.89e-01  
 15  +3.4750e-01  +3.4750e-01  1.07e-06  3.86e-10  4.02e-08  1.53e-11  1.43e-09  9.90e-01  
 16  +3.4750e-01  +3.4750e-01  1.07e-08  3.86e-12  4.02e-10  1.53e-13  1.43e-11  9.90e-01  
 17  +3.4750e-01  +3.4750e-01  1.07e-10  3.86e-14  4.02e-12  1.53e-15  1.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.043ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:46 PM: Optimal value: 3.475e-01
(CVXPY) Aug 31 04:44:46 PM: Compilation took 5.016e-03 seconds
(CVXPY) Aug 31 04:44:46 PM: Solver (including time spent in interface) took 1.657e-02 seconds
FULL MODEL:
  Accruacy: 0.6526
  Our objective: 0.30519999999999997

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.30519999999999997)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7894494533538818
Best over terms:
  Our final objective: 0.30519999999999997
    Its accruacy: 0.6526
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30519999999999997
  Highest accruacy: 0.6526
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

