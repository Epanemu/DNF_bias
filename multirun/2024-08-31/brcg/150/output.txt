Command:
python test_script.py -s smallest_subclass -d 4 -n 10000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.06839999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.07459999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:07 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:07 PM: Finished problem compilation (took 1.200e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.84e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +6.0819e-01  +9.6886e+02  9.68e+02  3.38e-01  4.77e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5105e-01  +1.5092e+02  1.50e+02  1.40e-01  2.42e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1089e-01  +3.2799e+01  3.23e+01  1.12e-01  1.89e+01  1.78e-05  2.25e-01  6.42e-02  
  4  +5.0006e-01  +1.0394e+00  5.39e-01  3.62e-03  6.20e-01  3.64e-06  1.45e-01  9.90e-01  
  5  +5.0001e-01  +5.9164e-01  9.16e-02  6.12e-04  1.05e-01  7.07e-07  2.85e-02  8.16e-01  
  6  +4.9994e-01  +6.1168e-01  1.12e-01  7.24e-04  1.25e-01  2.32e-06  8.77e-03  7.52e-01  
  7  +4.9586e-01  +5.9393e-01  9.81e-02  5.32e-05  9.23e-03  9.34e-05  1.69e-04  9.83e-01  
  8  +4.8701e-01  +5.4207e-01  5.51e-02  1.40e-05  2.43e-03  1.23e-04  4.56e-05  7.58e-01  
  9  +4.7734e-01  +4.9532e-01  1.80e-02  4.10e-06  7.09e-04  1.82e-05  1.53e-05  7.55e-01  
 10  +4.7190e-01  +4.7303e-01  1.13e-03  2.33e-07  4.03e-05  1.82e-07  9.65e-07  9.72e-01  
 11  +4.7150e-01  +4.7152e-01  1.22e-05  2.50e-09  4.33e-07  1.93e-09  1.05e-08  9.89e-01  
 12  +4.7150e-01  +4.7150e-01  1.22e-07  2.50e-11  4.33e-09  1.93e-11  1.05e-10  9.90e-01  
 13  +4.7150e-01  +4.7150e-01  1.22e-09  2.50e-13  4.33e-11  1.96e-13  1.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.7078ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:07 PM: Optimal value: 4.715e-01
(CVXPY) Aug 31 04:47:07 PM: Compilation took 1.200e-02 seconds
(CVXPY) Aug 31 04:47:07 PM: Solver (including time spent in interface) took 3.500e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4715
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:07 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:07 PM: Finished problem compilation (took 1.300e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 45513
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0012e+03  5.00e+03  9.84e-01  9.24e+01  1.00e+00  1.00e+00   ------   
  1  +6.0799e-01  +9.7065e+02  9.70e+02  3.40e-01  5.15e+01  4.09e-03  4.76e-01  6.66e-01  
  2  +5.5077e-01  +1.5047e+02  1.50e+02  1.41e-01  2.61e+01  8.32e-03  2.29e-01  7.27e-01  
  3  +5.1081e-01  +3.2643e+01  3.21e+01  1.12e-01  2.03e+01  1.80e-05  2.26e-01  6.64e-02  
  4  +5.0046e-01  +2.2577e+00  1.76e+00  1.18e-02  2.14e+00  4.34e-06  1.93e-01  4.04e-01  
  5  +5.0004e-01  +7.4772e-01  2.48e-01  1.66e-03  3.06e-01  1.15e-06  6.97e-02  7.64e-01  
  6  +5.0002e-01  +6.9641e-01  1.96e-01  1.31e-03  2.43e-01  1.01e-06  4.54e-02  4.32e-01  
  7  +5.0001e-01  +6.8196e-01  1.82e-01  1.21e-03  2.25e-01  1.12e-06  3.11e-02  3.59e-01  
  8  +5.0003e-01  +6.9975e-01  2.00e-01  1.33e-03  2.46e-01  9.07e-07  2.83e-02  4.10e-01  
  9  +4.9991e-01  +6.2331e-01  1.23e-01  6.87e-04  1.27e-01  2.52e-06  4.13e-03  8.90e-01  
 10  +4.9638e-01  +5.9968e-01  1.03e-01  4.03e-05  7.52e-03  6.46e-05  1.26e-04  9.74e-01  
 11  +4.9554e-01  +5.9382e-01  9.83e-02  3.52e-05  6.56e-03  5.93e-05  1.08e-04  2.27e-01  
 12  +4.9509e-01  +5.9032e-01  9.52e-02  3.32e-05  6.18e-03  5.02e-05  1.01e-04  1.81e-01  
 13  +4.9326e-01  +5.7722e-01  8.40e-02  2.70e-05  5.04e-03  3.20e-05  8.25e-05  4.05e-01  
 14  +4.9081e-01  +5.6385e-01  7.30e-02  1.92e-05  3.58e-03  2.51e-05  5.85e-05  4.53e-01  
 15  +4.9042e-01  +5.6170e-01  7.13e-02  1.92e-05  3.57e-03  2.30e-05  5.84e-05  3.54e-02  
 16  +4.8936e-01  +5.5739e-01  6.80e-02  1.65e-05  3.07e-03  2.01e-05  4.98e-05  2.78e-01  
 17  +4.8905e-01  +5.5499e-01  6.59e-02  1.61e-05  2.99e-03  1.61e-05  4.84e-05  1.77e-01  
 18  +4.8168e-01  +5.2177e-01  4.01e-02  8.29e-06  1.54e-03  3.00e-06  2.50e-05  8.63e-01  
 19  +4.8142e-01  +5.2060e-01  3.92e-02  7.78e-06  1.45e-03  2.92e-06  2.34e-05  1.53e-01  
 20  +4.8072e-01  +5.1745e-01  3.67e-02  7.59e-06  1.41e-03  2.45e-06  2.30e-05  1.82e-01  
 21  +4.7683e-01  +5.0341e-01  2.66e-02  4.87e-06  9.06e-04  1.89e-06  1.46e-05  4.03e-01  
 22  +4.6873e-01  +4.7465e-01  5.92e-03  9.29e-07  1.73e-04  4.58e-07  2.79e-06  8.68e-01  
 23  +4.6848e-01  +4.7322e-01  4.74e-03  7.94e-07  1.48e-04  2.81e-07  2.66e-06  2.05e-01  
 24  +4.6846e-01  +4.7317e-01  4.71e-03  7.89e-07  1.47e-04  2.80e-07  2.64e-06  1.88e-02  
 25  +4.6835e-01  +4.7281e-01  4.47e-03  7.46e-07  1.39e-04  2.75e-07  2.45e-06  1.38e-01  
 26  +4.6741e-01  +4.7075e-01  3.34e-03  4.99e-07  9.28e-05  2.69e-07  1.50e-06  6.18e-01  
 27  +4.6594e-01  +4.6602e-01  8.47e-05  1.26e-08  2.34e-06  6.92e-09  3.78e-08  9.90e-01  
 28  +4.6590e-01  +4.6590e-01  8.48e-07  1.26e-10  2.34e-08  6.92e-11  3.78e-10  9.90e-01  
 29  +4.6590e-01  +4.6590e-01  8.48e-09  1.26e-12  2.34e-10  7.04e-13  3.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 79.5145ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:07 PM: Optimal value: 4.659e-01
(CVXPY) Aug 31 04:47:07 PM: Compilation took 1.300e-02 seconds
(CVXPY) Aug 31 04:47:07 PM: Solver (including time spent in interface) took 8.500e-02 seconds
Iteration: 2, Objective: 0.4659
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:07 PM: Your problem has 5020 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:07 PM: Finished problem compilation (took 1.711e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5020
  constraints   = 10020
  nnz(P)        = 0
  nnz(A)        = 46176
  cones (total) = 1
    : Nonnegative = 1,  numel = 10020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0010e+03  5.00e+03  9.84e-01  9.26e+01  1.00e+00  1.00e+00   ------   
  1  +6.0797e-01  +9.7069e+02  9.70e+02  3.40e-01  5.16e+01  4.09e-03  4.76e-01  6.66e-01  
  2  +5.5072e-01  +1.5035e+02  1.50e+02  1.41e-01  2.61e+01  8.32e-03  2.29e-01  7.27e-01  
  3  +5.1080e-01  +3.2631e+01  3.21e+01  1.12e-01  2.04e+01  1.80e-05  2.26e-01  6.66e-02  
  4  +5.0038e-01  +2.0245e+00  1.52e+00  1.02e-02  1.87e+00  4.24e-06  1.88e-01  4.59e-01  
  5  +5.0003e-01  +7.0181e-01  2.02e-01  1.35e-03  2.50e-01  9.60e-07  5.78e-02  7.97e-01  
  6  +5.0002e-01  +6.8184e-01  1.82e-01  1.22e-03  2.25e-01  9.87e-07  3.86e-02  4.33e-01  
  7  +5.0003e-01  +6.9422e-01  1.94e-01  1.30e-03  2.40e-01  9.70e-07  3.55e-02  2.39e-01  
  8  +5.0001e-01  +6.7835e-01  1.78e-01  1.18e-03  2.19e-01  1.21e-06  2.17e-02  4.10e-01  
  9  +4.9998e-01  +6.7942e-01  1.79e-01  1.05e-03  1.94e-01  1.84e-06  6.91e-03  9.90e-01  
 10  +4.9732e-01  +6.2894e-01  1.32e-01  5.21e-05  9.75e-03  5.10e-05  1.60e-04  9.78e-01  
 11  +4.9366e-01  +5.9639e-01  1.03e-01  3.22e-05  6.02e-03  4.31e-05  9.86e-05  4.66e-01  
 12  +4.9325e-01  +5.8961e-01  9.64e-02  2.87e-05  5.36e-03  3.07e-05  8.63e-05  3.42e-01  
 13  +4.9340e-01  +5.8539e-01  9.20e-02  2.59e-05  4.84e-03  1.67e-05  7.70e-05  4.92e-01  
 14  +4.9142e-01  +5.7449e-01  8.31e-02  2.06e-05  3.85e-03  1.21e-05  6.12e-05  4.43e-01  
 15  +4.9063e-01  +5.7156e-01  8.09e-02  2.03e-05  3.79e-03  1.06e-05  6.06e-05  1.03e-01  
 16  +4.8482e-01  +5.4661e-01  6.18e-02  1.25e-05  2.34e-03  8.05e-06  3.79e-05  4.82e-01  
 17  +4.7479e-01  +5.0270e-01  2.79e-02  5.23e-06  9.76e-04  5.79e-07  1.63e-05  9.90e-01  
 18  +4.7258e-01  +4.9504e-01  2.25e-02  3.95e-06  7.37e-04  7.08e-07  1.23e-05  4.10e-01  
 19  +4.7185e-01  +4.9262e-01  2.08e-02  3.57e-06  6.65e-04  7.42e-07  1.11e-05  1.84e-01  
 20  +4.7081e-01  +4.8888e-01  1.81e-02  3.08e-06  5.75e-04  1.20e-06  9.94e-06  8.75e-01  
 21  +4.6903e-01  +4.8257e-01  1.35e-02  2.27e-06  4.23e-04  9.83e-07  7.30e-06  6.90e-01  
 22  +4.6557e-01  +4.7120e-01  5.63e-03  9.18e-07  1.71e-04  4.39e-07  2.95e-06  7.97e-01  
 23  +4.6343e-01  +4.6447e-01  1.03e-03  1.69e-07  3.14e-05  6.54e-08  5.49e-07  9.72e-01  
 24  +4.6292e-01  +4.6296e-01  4.13e-05  6.62e-09  1.23e-06  2.76e-09  2.16e-08  9.72e-01  
 25  +4.6290e-01  +4.6290e-01  4.13e-07  6.63e-11  1.24e-08  2.76e-11  2.16e-10  9.90e-01  
 26  +4.6290e-01  +4.6290e-01  4.14e-09  6.63e-13  1.24e-10  2.82e-13  2.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.4067ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:07 PM: Optimal value: 4.629e-01
(CVXPY) Aug 31 04:47:07 PM: Compilation took 1.711e-02 seconds
(CVXPY) Aug 31 04:47:07 PM: Solver (including time spent in interface) took 7.759e-02 seconds
Iteration: 3, Objective: 0.4629
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:07 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:07 PM: Finished problem compilation (took 1.511e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 46514
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0011e+03  5.00e+03  9.84e-01  9.26e+01  1.00e+00  1.00e+00   ------   
  1  +6.0797e-01  +9.7070e+02  9.70e+02  3.40e-01  5.16e+01  4.09e-03  4.76e-01  6.66e-01  
  2  +5.5072e-01  +1.5036e+02  1.50e+02  1.41e-01  2.61e+01  8.32e-03  2.29e-01  7.27e-01  
  3  +5.1080e-01  +3.2626e+01  3.21e+01  1.12e-01  2.04e+01  1.80e-05  2.26e-01  6.66e-02  
  4  +5.0041e-01  +2.1011e+00  1.60e+00  1.08e-02  1.96e+00  4.27e-06  1.90e-01  4.40e-01  
  5  +5.0003e-01  +7.2196e-01  2.22e-01  1.49e-03  2.75e-01  1.04e-06  6.28e-02  7.79e-01  
  6  +5.0002e-01  +6.8023e-01  1.80e-01  1.21e-03  2.24e-01  9.86e-07  3.88e-02  4.62e-01  
  7  +5.0001e-01  +6.7840e-01  1.78e-01  1.19e-03  2.21e-01  1.13e-06  2.89e-02  3.15e-01  
  8  +5.0003e-01  +7.0271e-01  2.03e-01  1.34e-03  2.48e-01  9.12e-07  2.04e-02  7.16e-01  
  9  +4.9982e-01  +6.2707e-01  1.27e-01  4.70e-04  8.75e-02  4.47e-06  1.86e-03  9.27e-01  
 10  +4.9612e-01  +6.0146e-01  1.05e-01  3.19e-05  5.98e-03  6.76e-05  9.73e-05  9.48e-01  
 11  +4.9511e-01  +5.9475e-01  9.96e-02  2.95e-05  5.51e-03  5.65e-05  8.88e-05  1.89e-01  
 12  +4.9391e-01  +5.8586e-01  9.19e-02  2.56e-05  4.80e-03  3.70e-05  7.64e-05  3.87e-01  
 13  +4.9328e-01  +5.8234e-01  8.91e-02  2.40e-05  4.50e-03  2.89e-05  7.14e-05  2.48e-01  
 14  +4.9041e-01  +5.6890e-01  7.85e-02  1.81e-05  3.39e-03  2.60e-05  5.39e-05  3.08e-01  
 15  +4.8994e-01  +5.6723e-01  7.73e-02  1.80e-05  3.37e-03  2.47e-05  5.39e-05  2.06e-02  
 16  +4.8982e-01  +5.6619e-01  7.64e-02  1.80e-05  3.36e-03  2.25e-05  5.37e-05  6.75e-02  
 17  +4.8188e-01  +5.3315e-01  5.13e-02  1.02e-05  1.91e-03  9.55e-06  3.13e-05  6.48e-01  
 18  +4.8158e-01  +5.3174e-01  5.02e-02  9.97e-06  1.86e-03  8.16e-06  3.06e-05  1.68e-01  
 19  +4.7350e-01  +5.0007e-01  2.66e-02  4.85e-06  9.06e-04  2.93e-06  1.52e-05  6.83e-01  
 20  +4.6884e-01  +4.8296e-01  1.41e-02  2.35e-06  4.39e-04  1.43e-06  7.38e-06  6.71e-01  
 21  +4.6858e-01  +4.8171e-01  1.31e-02  2.26e-06  4.21e-04  1.20e-06  7.34e-06  9.45e-02  
 22  +4.6839e-01  +4.8098e-01  1.26e-02  2.16e-06  4.02e-04  1.14e-06  7.00e-06  1.18e-01  
 23  +4.6626e-01  +4.7339e-01  7.13e-03  1.18e-06  2.20e-04  5.80e-07  3.76e-06  8.86e-01  
 24  +4.6421e-01  +4.6675e-01  2.54e-03  4.22e-07  7.88e-05  1.39e-07  1.40e-06  8.73e-01  
 25  +4.6343e-01  +4.6474e-01  1.31e-03  2.10e-07  3.92e-05  8.89e-08  6.80e-07  7.27e-01  
 26  +4.6291e-01  +4.6294e-01  2.47e-05  3.96e-09  7.38e-07  1.60e-09  1.29e-08  9.81e-01  
 27  +4.6290e-01  +4.6290e-01  2.47e-07  3.96e-11  7.38e-09  1.60e-11  1.29e-10  9.90e-01  
 28  +4.6290e-01  +4.6290e-01  2.47e-09  3.96e-13  7.38e-11  1.60e-13  1.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 77.7596ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:07 PM: Optimal value: 4.629e-01
(CVXPY) Aug 31 04:47:07 PM: Compilation took 1.511e-02 seconds
(CVXPY) Aug 31 04:47:07 PM: Solver (including time spent in interface) took 8.280e-02 seconds
FULL MODEL:
  Accruacy: 0.5373
  Our objective: 0.07459999999999997

IF 
    (x1 = 1 AND x2 = 1 AND x3 = 0)            <-- (term's our objective: 0.0061999999999999555)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.06839999999999999)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.7367358207702637
Best over terms:
  Our final objective: 0.06839999999999999
    Its accruacy: 0.5342
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.06839999999999999
  Highest accruacy: 0.5342
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

