Command:
python test_script.py -s smallest_subclass -d 5 -n 100 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.06
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.45999999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:58 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:58 PM: Finished problem compilation (took 3.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9620e-01  +5.1273e+01  5.08e+01  8.62e-01  8.47e+00  1.00e+00  1.05e+00   ------   
  1  +5.9209e-01  +1.0462e+01  9.87e+00  3.17e-01  4.66e+00  3.96e-03  5.23e-01  6.49e-01  
  2  +5.2093e-01  +1.4547e+00  9.34e-01  6.00e-02  1.07e+00  1.18e-02  1.53e-01  9.90e-01  
  3  +5.0900e-01  +1.3810e+00  8.72e-01  3.90e-02  7.10e-01  1.41e-02  1.01e-01  3.96e-01  
  4  +4.6976e-01  +1.0292e+00  5.59e-01  1.48e-02  2.75e-01  1.27e-02  4.28e-02  6.38e-01  
  5  +4.2430e-01  +5.6569e-01  1.41e-01  3.91e-03  7.01e-02  6.29e-04  1.44e-02  8.26e-01  
  6  +3.9735e-01  +4.5653e-01  5.92e-02  1.34e-03  2.39e-02  2.34e-04  5.93e-03  6.79e-01  
  7  +3.8314e-01  +3.9303e-01  9.89e-03  2.14e-04  3.81e-03  4.14e-05  1.06e-03  9.90e-01  
  8  +3.8013e-01  +3.8025e-01  1.14e-04  2.44e-06  4.35e-05  4.45e-07  1.24e-05  9.88e-01  
  9  +3.8010e-01  +3.8010e-01  1.14e-06  2.44e-08  4.35e-07  4.45e-09  1.24e-07  9.90e-01  
 10  +3.8010e-01  +3.8010e-01  1.14e-08  2.44e-10  4.35e-09  4.45e-11  1.24e-09  9.90e-01  
 11  +3.8010e-01  +3.8010e-01  1.14e-10  2.44e-12  4.35e-11  4.45e-13  1.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 347µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:58 PM: Optimal value: 3.801e-01
(CVXPY) Aug 31 04:47:58 PM: Compilation took 3.992e-03 seconds
(CVXPY) Aug 31 04:47:58 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:58 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:58 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 523
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9244e-01  +5.1402e+01  5.09e+01  8.70e-01  8.74e+00  1.00e+00  1.06e+00   ------   
  1  +5.7208e-01  +1.0602e+01  1.00e+01  3.34e-01  4.74e+00  3.94e-03  5.42e-01  6.40e-01  
  2  +5.0529e-01  +1.6994e+00  1.19e+00  6.92e-02  1.25e+00  1.35e-02  1.73e-01  9.48e-01  
  3  +4.4876e-01  +1.4385e+00  9.90e-01  3.03e-02  5.63e-01  1.62e-02  8.39e-02  6.17e-01  
  4  +3.9105e-01  +7.5311e-01  3.62e-01  9.81e-03  1.79e-01  5.01e-03  3.25e-02  6.42e-01  
  5  +3.8113e-01  +6.9024e-01  3.09e-01  8.07e-03  1.47e-01  4.10e-03  2.81e-02  2.44e-01  
  6  +3.4785e-01  +4.4151e-01  9.37e-02  2.43e-03  4.32e-02  9.68e-04  1.03e-02  6.79e-01  
  7  +3.3244e-01  +3.4343e-01  1.10e-02  2.82e-04  4.96e-03  9.25e-05  1.39e-03  8.74e-01  
  8  +3.3025e-01  +3.3047e-01  2.20e-04  5.66e-06  9.97e-05  1.38e-06  2.89e-05  9.80e-01  
  9  +3.3020e-01  +3.3021e-01  1.08e-05  2.78e-07  4.89e-06  2.64e-08  1.62e-06  9.53e-01  
 10  +3.3020e-01  +3.3020e-01  1.07e-07  2.77e-09  4.86e-08  2.68e-10  1.65e-08  9.90e-01  
 11  +3.3020e-01  +3.3020e-01  1.07e-09  2.77e-11  4.86e-10  2.67e-12  1.65e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 362.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:58 PM: Optimal value: 3.302e-01
(CVXPY) Aug 31 04:47:58 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 31 04:47:58 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 2, Objective: 0.3302
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:58 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:58 PM: Finished problem compilation (took 1.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 602
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8937e-01  +5.1622e+01  5.11e+01  8.74e-01  8.73e+00  1.00e+00  1.06e+00   ------   
  1  +5.5031e-01  +1.0932e+01  1.04e+01  3.56e-01  4.86e+00  3.90e-03  5.65e-01  6.20e-01  
  2  +4.8920e-01  +1.7789e+00  1.29e+00  7.41e-02  1.33e+00  1.56e-02  1.87e-01  9.62e-01  
  3  +4.2641e-01  +1.2804e+00  8.54e-01  2.96e-02  5.45e-01  1.41e-02  8.32e-02  6.23e-01  
  4  +3.6616e-01  +7.0146e-01  3.35e-01  9.06e-03  1.65e-01  5.84e-03  2.91e-02  6.94e-01  
  5  +3.3602e-01  +5.1008e-01  1.74e-01  4.44e-03  8.00e-02  2.73e-03  1.56e-02  5.08e-01  
  6  +3.1318e-01  +3.7303e-01  5.98e-02  1.52e-03  2.71e-02  7.79e-04  5.84e-03  6.83e-01  
  7  +3.0115e-01  +3.0383e-01  2.67e-03  6.86e-05  1.21e-03  1.70e-05  2.84e-04  9.68e-01  
  8  +3.0049e-01  +3.0078e-01  2.86e-04  7.36e-06  1.30e-04  1.35e-06  3.28e-05  8.91e-01  
  9  +3.0041e-01  +3.0042e-01  1.73e-05  4.30e-07  7.55e-06  5.65e-08  2.20e-06  9.55e-01  
 10  +3.0040e-01  +3.0040e-01  1.76e-07  4.34e-09  7.62e-08  5.67e-10  2.26e-08  9.90e-01  
 11  +3.0040e-01  +3.0040e-01  1.76e-09  4.34e-11  7.63e-10  5.68e-12  2.27e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 404.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:58 PM: Optimal value: 3.004e-01
(CVXPY) Aug 31 04:47:58 PM: Compilation took 1.999e-03 seconds
(CVXPY) Aug 31 04:47:58 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 3, Objective: 0.3004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:58 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:58 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 640
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8847e-01  +5.1654e+01  5.12e+01  8.77e-01  8.65e+00  1.00e+00  1.07e+00   ------   
  1  +5.4145e-01  +1.1042e+01  1.05e+01  3.67e-01  4.85e+00  3.86e-03  5.81e-01  6.12e-01  
  2  +4.7887e-01  +1.7932e+00  1.31e+00  7.40e-02  1.30e+00  1.69e-02  1.91e-01  9.76e-01  
  3  +3.8905e-01  +1.2066e+00  8.18e-01  2.38e-02  4.29e-01  1.60e-02  7.11e-02  7.09e-01  
  4  +3.3188e-01  +6.1348e-01  2.82e-01  7.96e-03  1.40e-01  3.73e-03  2.80e-02  6.69e-01  
  5  +3.1030e-01  +4.7279e-01  1.62e-01  4.50e-03  7.80e-02  1.91e-03  1.77e-02  4.62e-01  
  6  +2.8470e-01  +3.0361e-01  1.89e-02  5.28e-04  9.02e-03  1.40e-04  2.49e-03  8.81e-01  
  7  +2.8071e-01  +2.8150e-01  7.92e-04  2.21e-05  3.77e-04  3.86e-06  1.13e-04  9.65e-01  
  8  +2.8053e-01  +2.8064e-01  1.13e-04  3.15e-06  5.36e-05  4.52e-07  1.71e-05  8.88e-01  
  9  +2.8050e-01  +2.8050e-01  1.36e-06  3.81e-08  6.48e-07  4.92e-09  2.12e-07  9.88e-01  
 10  +2.8050e-01  +2.8050e-01  1.36e-08  3.81e-10  6.49e-09  4.92e-11  2.12e-09  9.90e-01  
 11  +2.8050e-01  +2.8050e-01  1.37e-10  3.81e-12  6.49e-11  4.93e-13  2.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 472.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:58 PM: Optimal value: 2.805e-01
(CVXPY) Aug 31 04:47:58 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 31 04:47:58 PM: Solver (including time spent in interface) took 9.918e-04 seconds
Iteration: 4, Objective: 0.2805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:58 PM: Your problem has 96 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:58 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:58 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:58 PM: Finished problem compilation (took 2.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 96
  constraints   = 146
  nnz(P)        = 0
  nnz(A)        = 706
  cones (total) = 1
    : Nonnegative = 1,  numel = 146

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8701e-01  +5.1749e+01  5.13e+01  8.81e-01  8.59e+00  1.00e+00  1.07e+00   ------   
  1  +5.2949e-01  +1.1254e+01  1.07e+01  3.80e-01  4.85e+00  3.87e-03  5.91e-01  6.01e-01  
  2  +4.6415e-01  +1.7887e+00  1.32e+00  7.58e-02  1.31e+00  1.80e-02  1.98e-01  9.90e-01  
  3  +3.8354e-01  +1.2174e+00  8.34e-01  2.75e-02  4.86e-01  1.51e-02  8.30e-02  6.79e-01  
  4  +3.3336e-01  +7.0553e-01  3.72e-01  1.10e-02  1.92e-01  5.92e-03  3.74e-02  5.92e-01  
  5  +2.9901e-01  +4.3993e-01  1.41e-01  4.01e-03  6.92e-02  2.04e-03  1.54e-02  6.27e-01  
  6  +2.8311e-01  +3.4392e-01  6.08e-02  1.70e-03  2.92e-02  7.39e-04  7.04e-03  6.15e-01  
  7  +2.7138e-01  +2.7426e-01  2.88e-03  8.03e-05  1.37e-03  2.36e-05  3.59e-04  9.55e-01  
  8  +2.7076e-01  +2.7098e-01  2.26e-04  6.35e-06  1.08e-04  1.50e-06  2.92e-05  9.30e-01  
  9  +2.7070e-01  +2.7070e-01  3.71e-06  1.05e-07  1.78e-06  2.33e-08  4.84e-07  9.85e-01  
 10  +2.7070e-01  +2.7070e-01  3.71e-08  1.05e-09  1.78e-08  2.33e-10  4.84e-09  9.90e-01  
 11  +2.7070e-01  +2.7070e-01  3.72e-10  1.05e-11  1.78e-10  2.33e-12  4.84e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 494.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:58 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:58 PM: Optimal value: 2.707e-01
(CVXPY) Aug 31 04:47:58 PM: Compilation took 2.000e-03 seconds
(CVXPY) Aug 31 04:47:58 PM: Solver (including time spent in interface) took 9.997e-04 seconds
FULL MODEL:
  Accruacy: 0.71
  Our objective: 0.42

IF 
    (x3 = 1 AND x2 = 0 AND x4 = 0)                       <-- (term's our objective: 0.060000000000000026)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.14000000000000004)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x3 = 0)            <-- (term's our objective: 0.09999999999999999)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.04000000000000005)
 OR (x1 = 1 AND x3 = 1 AND x0 = 0 AND x4 = 0)            <-- (term's our objective: 0.06000000000000005)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0 AND x4 = 0) <-- (term's our objective: 0.040000000000000036)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.916712760925293
Best over terms:
  Our final objective: 0.14000000000000004
    Its accruacy: 0.57
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.14000000000000004
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

