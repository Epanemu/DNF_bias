Command:
python test_script.py -s smallest_subclass -d 5 -n 5000 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0368
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.07719999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:43 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:43 PM: Finished problem compilation (took 9.963e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5007e+03  2.50e+03  9.78e-01  6.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.9956e-01  +5.0122e+02  5.01e+02  3.62e-01  3.80e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4613e-01  +7.1639e+01  7.11e+01  1.41e-01  1.85e+01  9.85e-03  2.35e-01  7.79e-01  
  3  +5.1037e-01  +1.6745e+01  1.62e+01  1.01e-01  1.29e+01  2.29e-05  2.31e-01  9.67e-02  
  4  +5.0009e-01  +9.3327e-01  4.33e-01  4.14e-03  5.40e-01  6.36e-06  1.26e-01  9.90e-01  
  5  +5.0001e-01  +5.7377e-01  7.38e-02  7.00e-04  9.19e-02  1.22e-06  2.44e-02  8.17e-01  
  6  +4.9989e-01  +5.8691e-01  8.70e-02  7.63e-04  1.00e-01  4.49e-06  6.06e-03  8.23e-01  
  7  +4.9561e-01  +5.6266e-01  6.71e-02  5.53e-05  7.32e-03  1.04e-04  1.78e-04  9.72e-01  
  8  +4.8718e-01  +5.1540e-01  2.82e-02  1.33e-05  1.76e-03  7.61e-05  4.41e-05  8.01e-01  
  9  +4.8080e-01  +4.8682e-01  6.01e-03  2.62e-06  3.46e-04  8.61e-06  9.90e-06  8.40e-01  
 10  +4.7882e-01  +4.7917e-01  3.48e-04  1.41e-07  1.86e-05  8.45e-08  5.84e-07  9.90e-01  
 11  +4.7870e-01  +4.7870e-01  3.48e-06  1.41e-09  1.86e-07  8.45e-10  5.85e-09  9.90e-01  
 12  +4.7870e-01  +4.7870e-01  3.48e-08  1.41e-11  1.86e-09  8.45e-12  5.85e-11  9.90e-01  
 13  +4.7870e-01  +4.7870e-01  3.48e-10  1.41e-13  1.86e-11  8.58e-14  5.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.2204ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:43 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:43 PM: Optimal value: 4.787e-01
(CVXPY) Aug 31 04:48:43 PM: Compilation took 9.963e-03 seconds
(CVXPY) Aug 31 04:48:43 PM: Solver (including time spent in interface) took 2.000e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4787
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:43 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:43 PM: Finished problem compilation (took 6.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 23179
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.78e-01  6.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.9940e-01  +5.0143e+02  5.01e+02  3.62e-01  3.90e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4592e-01  +7.1419e+01  7.09e+01  1.41e-01  1.89e+01  9.89e-03  2.35e-01  7.81e-01  
  3  +5.1028e-01  +1.6644e+01  1.61e+01  1.01e-01  1.31e+01  2.29e-05  2.31e-01  9.94e-02  
  4  +5.0018e-01  +1.0984e+00  5.98e-01  5.73e-03  7.65e-01  6.75e-06  1.41e-01  8.30e-01  
  5  +5.0006e-01  +7.1040e-01  2.10e-01  2.00e-03  2.69e-01  2.60e-06  5.82e-02  6.00e-01  
  6  +5.0005e-01  +7.1151e-01  2.11e-01  2.01e-03  2.70e-01  2.67e-06  4.89e-02  2.63e-01  
  7  +5.0006e-01  +7.2107e-01  2.21e-01  2.09e-03  2.81e-01  2.66e-06  3.56e-02  5.13e-01  
  8  +4.9987e-01  +6.1201e-01  1.12e-01  9.24e-04  1.24e-01  5.08e-06  5.77e-03  8.63e-01  
  9  +4.9588e-01  +5.9168e-01  9.58e-02  8.19e-05  1.11e-02  8.96e-05  2.57e-04  9.60e-01  
 10  +4.9277e-01  +5.7117e-01  7.84e-02  5.67e-05  7.71e-03  7.30e-05  1.83e-04  3.43e-01  
 11  +4.8958e-01  +5.5226e-01  6.27e-02  3.82e-05  5.19e-03  4.71e-05  1.28e-04  4.60e-01  
 12  +4.8908e-01  +5.4856e-01  5.95e-02  3.73e-05  5.06e-03  3.56e-05  1.25e-04  1.67e-01  
 13  +4.8591e-01  +5.3165e-01  4.57e-02  2.49e-05  3.38e-03  2.59e-05  8.49e-05  3.97e-01  
 14  +4.8532e-01  +5.2736e-01  4.20e-02  2.26e-05  3.07e-03  1.40e-05  7.64e-05  4.68e-01  
 15  +4.8123e-01  +5.0609e-01  2.49e-02  1.21e-05  1.64e-03  7.14e-06  4.10e-05  5.66e-01  
 16  +4.8128e-01  +5.0615e-01  2.49e-02  1.19e-05  1.62e-03  6.44e-06  4.00e-05  1.76e-01  
 17  +4.7662e-01  +4.8286e-01  6.24e-03  2.58e-06  3.50e-04  1.81e-06  8.45e-06  8.46e-01  
 18  +4.7538e-01  +4.7978e-01  4.40e-03  1.49e-06  2.02e-04  1.22e-06  4.90e-06  5.37e-01  
 19  +4.7520e-01  +4.7914e-01  3.94e-03  1.43e-06  1.94e-04  8.74e-07  4.76e-06  2.38e-01  
 20  +4.7359e-01  +4.7385e-01  2.60e-04  8.68e-08  1.18e-05  3.48e-08  2.94e-07  9.56e-01  
 21  +4.7350e-01  +4.7350e-01  2.67e-06  8.84e-10  1.20e-07  3.55e-10  3.00e-09  9.90e-01  
 22  +4.7350e-01  +4.7350e-01  2.67e-08  8.84e-12  1.20e-09  3.55e-12  3.00e-11  9.90e-01  
 23  +4.7350e-01  +4.7350e-01  2.67e-10  8.85e-14  1.20e-11  3.72e-14  3.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.4165ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:44 PM: Optimal value: 4.735e-01
(CVXPY) Aug 31 04:48:44 PM: Compilation took 6.999e-03 seconds
(CVXPY) Aug 31 04:48:44 PM: Solver (including time spent in interface) took 3.400e-02 seconds
Iteration: 2, Objective: 0.4735
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:44 PM: Your problem has 2531 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:44 PM: Finished problem compilation (took 8.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2531
  constraints   = 5031
  nnz(P)        = 0
  nnz(A)        = 26589
  cones (total) = 1
    : Nonnegative = 1,  numel = 5031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5010e+03  2.50e+03  9.79e-01  6.91e+01  1.00e+00  1.00e+00   ------   
  1  +5.9915e-01  +5.0204e+02  5.01e+02  3.63e-01  4.03e+01  3.99e-03  5.04e-01  6.44e-01  
  2  +5.4566e-01  +7.1187e+01  7.06e+01  1.41e-01  1.95e+01  9.96e-03  2.35e-01  7.84e-01  
  3  +5.1024e-01  +1.6620e+01  1.61e+01  1.01e-01  1.35e+01  2.31e-05  2.31e-01  1.01e-01  
  4  +5.0015e-01  +1.0354e+00  5.35e-01  5.13e-03  7.08e-01  6.71e-06  1.34e-01  8.95e-01  
  5  +5.0007e-01  +7.8565e-01  2.86e-01  2.73e-03  3.78e-01  3.79e-06  7.42e-02  5.00e-01  
  6  +5.0006e-01  +7.6605e-01  2.66e-01  2.54e-03  3.51e-01  3.76e-06  5.67e-02  3.29e-01  
  7  +5.0002e-01  +7.4181e-01  2.42e-01  2.26e-03  3.13e-01  4.15e-06  2.75e-02  7.36e-01  
  8  +4.9925e-01  +6.3632e-01  1.37e-01  5.81e-04  8.11e-02  2.00e-05  2.25e-03  9.37e-01  
  9  +4.9792e-01  +6.2443e-01  1.27e-01  2.56e-04  3.59e-02  4.22e-05  8.92e-04  6.27e-01  
 10  +4.9839e-01  +6.2638e-01  1.28e-01  2.08e-04  2.92e-02  1.72e-05  6.97e-04  8.54e-01  
 11  +4.9774e-01  +6.2095e-01  1.23e-01  1.66e-04  2.33e-02  1.93e-05  5.49e-04  2.40e-01  
 12  +4.9771e-01  +6.1828e-01  1.21e-01  1.43e-04  2.01e-02  9.72e-06  4.73e-04  7.09e-01  
 13  +4.9764e-01  +6.1706e-01  1.19e-01  1.43e-04  2.01e-02  9.38e-06  4.71e-04  3.21e-02  
 14  +4.9194e-01  +5.7587e-01  8.39e-02  5.02e-05  7.04e-03  1.05e-05  1.63e-04  9.90e-01  
 15  +4.8999e-01  +5.6883e-01  7.88e-02  3.92e-05  5.49e-03  9.50e-06  1.24e-04  5.09e-01  
 16  +4.8867e-01  +5.6295e-01  7.43e-02  3.86e-05  5.42e-03  8.35e-06  1.24e-04  1.60e-02  
 17  +4.8509e-01  +5.4703e-01  6.19e-02  2.85e-05  3.99e-03  7.10e-06  9.26e-05  3.43e-01  
 18  +4.8468e-01  +5.4493e-01  6.03e-02  2.81e-05  3.94e-03  6.63e-06  9.15e-05  9.96e-02  
 19  +4.8202e-01  +5.3269e-01  5.07e-02  2.30e-05  3.22e-03  5.25e-06  7.57e-05  3.40e-01  
 20  +4.7692e-01  +5.0806e-01  3.11e-02  1.32e-05  1.85e-03  2.85e-06  4.47e-05  9.90e-01  
 21  +4.7549e-01  +5.0209e-01  2.66e-02  1.09e-05  1.53e-03  2.51e-06  3.71e-05  2.66e-01  
 22  +4.7236e-01  +4.8969e-01  1.73e-02  6.69e-06  9.36e-04  1.70e-06  2.31e-05  4.67e-01  
 23  +4.6957e-01  +4.7844e-01  8.87e-03  3.31e-06  4.63e-04  9.66e-07  1.17e-05  8.46e-01  
 24  +4.6740e-01  +4.7035e-01  2.94e-03  1.08e-06  1.51e-04  3.19e-07  3.94e-06  7.12e-01  
 25  +4.6662e-01  +4.6744e-01  8.18e-04  2.99e-07  4.19e-05  9.34e-08  1.11e-06  8.69e-01  
 26  +4.6648e-01  +4.6694e-01  4.54e-04  1.66e-07  2.32e-05  5.30e-08  6.18e-07  7.09e-01  
 27  +4.6630e-01  +4.6631e-01  5.17e-06  1.89e-09  2.64e-07  5.89e-10  7.07e-09  9.89e-01  
 28  +4.6630e-01  +4.6630e-01  5.17e-08  1.89e-11  2.64e-09  5.89e-12  7.07e-11  9.90e-01  
 29  +4.6630e-01  +4.6630e-01  5.17e-10  1.89e-13  2.64e-11  5.90e-14  7.08e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.0801ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:44 PM: Optimal value: 4.663e-01
(CVXPY) Aug 31 04:48:44 PM: Compilation took 8.992e-03 seconds
(CVXPY) Aug 31 04:48:44 PM: Solver (including time spent in interface) took 4.800e-02 seconds
Iteration: 3, Objective: 0.4663
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:44 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:44 PM: Finished problem compilation (took 1.101e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 28730
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.79e-01  7.02e+01  1.00e+00  1.00e+00   ------   
  1  +5.9900e-01  +5.0245e+02  5.02e+02  3.64e-01  4.09e+01  3.99e-03  5.05e-01  6.44e-01  
  2  +5.4560e-01  +7.1155e+01  7.06e+01  1.42e-01  1.97e+01  1.00e-02  2.36e-01  7.85e-01  
  3  +5.1024e-01  +1.6630e+01  1.61e+01  1.01e-01  1.37e+01  2.33e-05  2.31e-01  1.02e-01  
  4  +5.0013e-01  +1.0111e+00  5.11e-01  4.91e-03  6.87e-01  6.69e-06  1.31e-01  9.22e-01  
  5  +5.0006e-01  +7.7050e-01  2.70e-01  2.59e-03  3.63e-01  3.83e-06  7.17e-02  4.76e-01  
  6  +5.0004e-01  +7.5257e-01  2.53e-01  2.41e-03  3.39e-01  3.89e-06  5.48e-02  3.08e-01  
  7  +5.0000e-01  +7.3914e-01  2.39e-01  2.23e-03  3.13e-01  4.57e-06  2.66e-02  7.33e-01  
  8  +4.9918e-01  +6.4227e-01  1.43e-01  6.01e-04  8.50e-02  2.21e-05  2.33e-03  9.29e-01  
  9  +4.9727e-01  +6.2270e-01  1.25e-01  2.05e-04  2.91e-02  5.24e-05  7.02e-04  7.88e-01  
 10  +4.9770e-01  +6.2227e-01  1.25e-01  1.71e-04  2.43e-02  2.35e-05  5.67e-04  7.50e-01  
 11  +4.9747e-01  +6.2000e-01  1.23e-01  1.55e-04  2.21e-02  2.24e-05  5.10e-04  2.07e-01  
 12  +4.9681e-01  +6.1323e-01  1.16e-01  1.17e-04  1.66e-02  1.57e-05  3.78e-04  6.58e-01  
 13  +4.9627e-01  +6.0859e-01  1.12e-01  1.05e-04  1.49e-02  1.24e-05  3.37e-04  3.78e-01  
 14  +4.9373e-01  +5.9246e-01  9.87e-02  6.98e-05  9.92e-03  1.27e-05  2.24e-04  4.39e-01  
 15  +4.9317e-01  +5.9026e-01  9.71e-02  6.36e-05  9.04e-03  1.17e-05  2.03e-04  2.61e-01  
 16  +4.8930e-01  +5.6825e-01  7.89e-02  5.06e-05  7.19e-03  3.24e-06  1.67e-04  9.90e-01  
 17  +4.8340e-01  +5.4177e-01  5.84e-02  2.90e-05  4.12e-03  3.15e-06  9.64e-05  5.34e-01  
 18  +4.8240e-01  +5.3702e-01  5.46e-02  2.64e-05  3.75e-03  3.25e-06  8.76e-05  2.21e-01  
 19  +4.8100e-01  +5.2929e-01  4.83e-02  2.24e-05  3.18e-03  3.56e-06  7.42e-05  5.06e-01  
 20  +4.7875e-01  +5.1908e-01  4.03e-02  1.77e-05  2.51e-03  3.26e-06  5.91e-05  4.29e-01  
 21  +4.7779e-01  +5.1475e-01  3.70e-02  1.56e-05  2.22e-03  3.26e-06  5.22e-05  3.81e-01  
 22  +4.7562e-01  +5.0523e-01  2.96e-02  1.19e-05  1.69e-03  3.03e-06  3.97e-05  7.96e-01  
 23  +4.7367e-01  +4.9769e-01  2.40e-02  9.25e-06  1.31e-03  2.49e-06  3.12e-05  2.56e-01  
 24  +4.6959e-01  +4.8185e-01  1.23e-02  4.52e-06  6.41e-04  1.30e-06  1.57e-05  6.73e-01  
 25  +4.6655e-01  +4.7014e-01  3.60e-03  1.30e-06  1.84e-04  3.89e-07  4.63e-06  8.05e-01  
 26  +4.6616e-01  +4.6869e-01  2.53e-03  9.11e-07  1.29e-04  2.78e-07  3.27e-06  3.75e-01  
 27  +4.6593e-01  +4.6772e-01  1.79e-03  6.42e-07  9.11e-05  2.18e-07  2.32e-06  7.95e-01  
 28  +4.6523e-01  +4.6530e-01  7.13e-05  2.55e-08  3.62e-06  8.45e-09  9.34e-08  9.90e-01  
 29  +4.6520e-01  +4.6520e-01  7.15e-07  2.56e-10  3.63e-08  8.46e-11  9.39e-10  9.90e-01  
 30  +4.6520e-01  +4.6520e-01  7.15e-09  2.56e-12  3.63e-10  8.46e-13  9.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.7576ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:44 PM: Optimal value: 4.652e-01
(CVXPY) Aug 31 04:48:44 PM: Compilation took 1.101e-02 seconds
(CVXPY) Aug 31 04:48:44 PM: Solver (including time spent in interface) took 5.194e-02 seconds
Iteration: 4, Objective: 0.4652
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:44 PM: Your problem has 2541 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:44 PM: Finished problem compilation (took 1.100e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2541
  constraints   = 5041
  nnz(P)        = 0
  nnz(A)        = 29234
  cones (total) = 1
    : Nonnegative = 1,  numel = 5041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.79e-01  7.04e+01  1.00e+00  1.00e+00   ------   
  1  +5.9900e-01  +5.0241e+02  5.02e+02  3.64e-01  4.10e+01  3.99e-03  5.05e-01  6.44e-01  
  2  +5.4560e-01  +7.1150e+01  7.06e+01  1.42e-01  1.98e+01  1.00e-02  2.35e-01  7.84e-01  
  3  +5.1024e-01  +1.6627e+01  1.61e+01  1.01e-01  1.37e+01  2.32e-05  2.31e-01  1.02e-01  
  4  +5.0012e-01  +9.9850e-01  4.98e-01  4.79e-03  6.72e-01  6.68e-06  1.29e-01  9.35e-01  
  5  +5.0005e-01  +7.6448e-01  2.64e-01  2.53e-03  3.56e-01  3.85e-06  7.03e-02  4.81e-01  
  6  +5.0004e-01  +7.5497e-01  2.55e-01  2.43e-03  3.43e-01  3.95e-06  5.41e-02  3.35e-01  
  7  +4.9999e-01  +7.2659e-01  2.27e-01  2.13e-03  2.99e-01  4.68e-06  2.70e-02  6.39e-01  
  8  +4.9919e-01  +6.4935e-01  1.50e-01  6.87e-04  9.73e-02  2.19e-05  2.74e-03  9.18e-01  
  9  +4.9724e-01  +6.2659e-01  1.29e-01  2.23e-04  3.17e-02  5.42e-05  7.69e-04  8.09e-01  
 10  +4.9777e-01  +6.2672e-01  1.29e-01  2.00e-04  2.85e-02  3.32e-05  6.73e-04  5.35e-01  
 11  +4.9597e-01  +6.0739e-01  1.11e-01  1.06e-04  1.51e-02  2.79e-05  3.45e-04  8.37e-01  
 12  +4.9586e-01  +6.0638e-01  1.11e-01  1.04e-04  1.48e-02  2.53e-05  3.38e-04  1.15e-01  
 13  +4.9504e-01  +6.0117e-01  1.06e-01  8.95e-05  1.28e-02  2.46e-05  2.89e-04  2.15e-01  
 14  +4.9397e-01  +5.9535e-01  1.01e-01  7.35e-05  1.05e-02  2.09e-05  2.36e-04  3.92e-01  
 15  +4.9012e-01  +5.7974e-01  8.96e-02  5.06e-05  7.22e-03  9.09e-06  1.64e-04  8.71e-01  
 16  +4.8509e-01  +5.5006e-01  6.50e-02  3.44e-05  4.90e-03  5.10e-06  1.13e-04  6.60e-01  
 17  +4.8335e-01  +5.4178e-01  5.84e-02  2.95e-05  4.20e-03  4.64e-06  9.74e-05  2.81e-01  
 18  +4.8099e-01  +5.2937e-01  4.84e-02  2.21e-05  3.15e-03  4.19e-06  7.35e-05  9.49e-01  
 19  +4.7772e-01  +5.1522e-01  3.75e-02  1.61e-05  2.29e-03  3.32e-06  5.39e-05  3.66e-01  
 20  +4.7622e-01  +5.0894e-01  3.27e-02  1.34e-05  1.91e-03  3.00e-06  4.51e-05  2.54e-01  
 21  +4.7574e-01  +5.0652e-01  3.08e-02  1.26e-05  1.79e-03  2.96e-06  4.24e-05  3.74e-01  
 22  +4.7235e-01  +4.9302e-01  2.07e-02  8.05e-06  1.15e-03  2.02e-06  2.76e-05  4.42e-01  
 23  +4.7241e-01  +4.9301e-01  2.06e-02  7.91e-06  1.13e-03  2.11e-06  2.71e-05  1.92e-01  
 24  +4.6689e-01  +4.7135e-01  4.46e-03  1.65e-06  2.35e-04  4.33e-07  5.87e-06  8.50e-01  
 25  +4.6651e-01  +4.6994e-01  3.43e-03  1.24e-06  1.76e-04  3.57e-07  4.41e-06  3.96e-01  
 26  +4.6600e-01  +4.6798e-01  1.99e-03  7.15e-07  1.02e-04  2.28e-07  2.58e-06  7.12e-01  
 27  +4.6525e-01  +4.6536e-01  1.09e-04  3.91e-08  5.57e-06  1.26e-08  1.43e-07  9.89e-01  
 28  +4.6520e-01  +4.6520e-01  1.14e-06  4.07e-10  5.79e-08  1.30e-10  1.49e-09  9.90e-01  
 29  +4.6520e-01  +4.6520e-01  1.14e-08  4.08e-12  5.80e-10  1.30e-12  1.50e-11  9.90e-01  
 30  +4.6520e-01  +4.6520e-01  1.14e-10  4.07e-14  5.80e-12  1.32e-14  1.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.5334ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:44 PM: Optimal value: 4.652e-01
(CVXPY) Aug 31 04:48:44 PM: Compilation took 1.100e-02 seconds
(CVXPY) Aug 31 04:48:44 PM: Solver (including time spent in interface) took 5.501e-02 seconds
Iteration: 5, Objective: 0.4652
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:44 PM: Your problem has 2544 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:44 PM: Finished problem compilation (took 1.172e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2544
  constraints   = 5044
  nnz(P)        = 0
  nnz(A)        = 29642
  cones (total) = 1
    : Nonnegative = 1,  numel = 5044

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.79e-01  7.04e+01  1.00e+00  1.00e+00   ------   
  1  +5.9896e-01  +5.0249e+02  5.02e+02  3.64e-01  4.10e+01  3.99e-03  5.05e-01  6.44e-01  
  2  +5.4558e-01  +7.1139e+01  7.06e+01  1.42e-01  1.98e+01  1.00e-02  2.35e-01  7.85e-01  
  3  +5.1023e-01  +1.6624e+01  1.61e+01  1.01e-01  1.37e+01  2.33e-05  2.31e-01  1.02e-01  
  4  +5.0015e-01  +1.0429e+00  5.43e-01  5.21e-03  7.32e-01  6.73e-06  1.34e-01  8.90e-01  
  5  +5.0006e-01  +7.5506e-01  2.55e-01  2.44e-03  3.44e-01  3.48e-06  6.74e-02  5.16e-01  
  6  +5.0003e-01  +7.3935e-01  2.39e-01  2.28e-03  3.22e-01  3.75e-06  4.72e-02  3.87e-01  
  7  +4.9986e-01  +7.5273e-01  2.53e-01  2.03e-03  2.86e-01  8.16e-06  1.22e-02  9.90e-01  
  8  +4.9647e-01  +6.8643e-01  1.90e-01  2.26e-04  3.22e-02  8.10e-05  7.72e-04  9.43e-01  
  9  +4.9701e-01  +6.7571e-01  1.79e-01  2.10e-04  3.00e-02  5.91e-05  7.13e-04  2.67e-01  
 10  +4.9434e-01  +6.4032e-01  1.46e-01  1.22e-04  1.74e-02  5.82e-05  4.12e-04  5.19e-01  
 11  +4.9353e-01  +6.2270e-01  1.29e-01  9.75e-05  1.39e-02  3.69e-05  3.25e-04  4.71e-01  
 12  +4.9231e-01  +6.1263e-01  1.20e-01  8.19e-05  1.17e-02  3.33e-05  2.71e-04  2.56e-01  
 13  +4.9118e-01  +6.0310e-01  1.12e-01  7.77e-05  1.11e-02  2.27e-05  2.65e-04  2.29e-01  
 14  +4.8863e-01  +5.8346e-01  9.48e-02  5.97e-05  8.51e-03  1.42e-05  2.02e-04  5.03e-01  
 15  +4.8135e-01  +5.4273e-01  6.14e-02  3.23e-05  4.61e-03  9.12e-06  1.12e-04  4.94e-01  
 16  +4.8176e-01  +5.4411e-01  6.24e-02  3.16e-05  4.51e-03  8.83e-06  1.08e-04  1.89e-01  
 17  +4.8108e-01  +5.3852e-01  5.74e-02  2.81e-05  4.00e-03  6.37e-06  9.55e-05  5.34e-01  
 18  +4.7635e-01  +5.1569e-01  3.93e-02  1.73e-05  2.46e-03  4.36e-06  5.93e-05  4.87e-01  
 19  +4.7544e-01  +5.1159e-01  3.62e-02  1.53e-05  2.18e-03  4.01e-06  5.25e-05  2.35e-01  
 20  +4.7461e-01  +5.0748e-01  3.29e-02  1.39e-05  1.98e-03  3.38e-06  4.86e-05  5.24e-01  
 21  +4.6962e-01  +4.8650e-01  1.69e-02  6.73e-06  9.58e-04  1.71e-06  2.41e-05  6.21e-01  
 22  +4.6924e-01  +4.8489e-01  1.57e-02  6.21e-06  8.84e-04  1.60e-06  2.23e-05  2.00e-01  
 23  +4.6789e-01  +4.7952e-01  1.16e-02  4.55e-06  6.47e-04  1.19e-06  1.65e-05  3.24e-01  
 24  +4.6792e-01  +4.7949e-01  1.16e-02  4.49e-06  6.39e-04  1.21e-06  1.63e-05  1.51e-01  
 25  +4.6420e-01  +4.6501e-01  8.04e-04  3.03e-07  4.32e-05  6.72e-08  1.15e-06  9.69e-01  
 26  +4.6391e-01  +4.6394e-01  3.09e-05  1.16e-08  1.66e-06  2.49e-09  4.51e-08  9.62e-01  
 27  +4.6390e-01  +4.6390e-01  3.09e-07  1.16e-10  1.66e-08  2.49e-11  4.51e-10  9.90e-01  
 28  +4.6390e-01  +4.6390e-01  3.09e-09  1.16e-12  1.66e-10  2.49e-13  4.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.2114ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:44 PM: Optimal value: 4.639e-01
(CVXPY) Aug 31 04:48:44 PM: Compilation took 1.172e-02 seconds
(CVXPY) Aug 31 04:48:44 PM: Solver (including time spent in interface) took 5.000e-02 seconds
Iteration: 6, Objective: 0.4639
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:44 PM: Your problem has 2549 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:44 PM: Finished problem compilation (took 1.204e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2549
  constraints   = 5049
  nnz(P)        = 0
  nnz(A)        = 30502
  cones (total) = 1
    : Nonnegative = 1,  numel = 5049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.79e-01  7.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.9895e-01  +5.0255e+02  5.02e+02  3.65e-01  4.12e+01  3.99e-03  5.05e-01  6.44e-01  
  2  +5.4554e-01  +7.1094e+01  7.05e+01  1.42e-01  1.98e+01  1.00e-02  2.36e-01  7.85e-01  
  3  +5.1023e-01  +1.6617e+01  1.61e+01  1.01e-01  1.38e+01  2.33e-05  2.31e-01  1.02e-01  
  4  +5.0015e-01  +1.0470e+00  5.47e-01  5.26e-03  7.40e-01  6.74e-06  1.35e-01  8.87e-01  
  5  +5.0006e-01  +7.6877e-01  2.69e-01  2.57e-03  3.64e-01  3.63e-06  6.98e-02  5.09e-01  
  6  +5.0005e-01  +7.7411e-01  2.74e-01  2.62e-03  3.70e-01  3.94e-06  5.29e-02  3.90e-01  
  7  +4.9992e-01  +7.1887e-01  2.19e-01  1.95e-03  2.76e-01  6.14e-06  1.62e-02  8.36e-01  
  8  +4.9640e-01  +6.6471e-01  1.68e-01  2.16e-04  3.10e-02  8.32e-05  7.48e-04  9.74e-01  
  9  +4.9630e-01  +6.5060e-01  1.54e-01  1.74e-04  2.49e-02  5.51e-05  5.88e-04  4.92e-01  
 10  +4.9614e-01  +6.4716e-01  1.51e-01  1.52e-04  2.18e-02  5.24e-05  5.08e-04  2.49e-01  
 11  +4.9598e-01  +6.3711e-01  1.41e-01  1.40e-04  2.01e-02  3.55e-05  4.66e-04  3.22e-01  
 12  +4.9229e-01  +6.0462e-01  1.12e-01  7.98e-05  1.14e-02  3.11e-05  2.64e-04  5.81e-01  
 13  +4.9198e-01  +6.0368e-01  1.12e-01  7.25e-05  1.04e-02  2.81e-05  2.38e-04  2.59e-01  
 14  +4.8856e-01  +5.7959e-01  9.10e-02  5.73e-05  8.20e-03  8.43e-06  1.93e-04  6.82e-01  
 15  +4.8183e-01  +5.4411e-01  6.23e-02  3.22e-05  4.61e-03  5.98e-06  1.10e-04  5.26e-01  
 16  +4.8136e-01  +5.4189e-01  6.05e-02  3.05e-05  4.36e-03  5.78e-06  1.04e-04  1.42e-01  
 17  +4.7950e-01  +5.3292e-01  5.34e-02  2.55e-05  3.65e-03  5.09e-06  8.74e-05  2.67e-01  
 18  +4.7923e-01  +5.3118e-01  5.19e-02  2.45e-05  3.51e-03  4.83e-06  8.37e-05  2.86e-01  
 19  +4.7435e-01  +5.0948e-01  3.51e-02  1.49e-05  2.12e-03  3.38e-06  5.14e-05  4.70e-01  
 20  +4.7080e-01  +4.9467e-01  2.39e-02  9.53e-06  1.36e-03  2.32e-06  3.35e-05  3.89e-01  
 21  +4.7074e-01  +4.9411e-01  2.34e-02  9.38e-06  1.34e-03  2.29e-06  3.31e-05  1.21e-01  
 22  +4.6958e-01  +4.8917e-01  1.96e-02  7.74e-06  1.11e-03  1.95e-06  2.75e-05  2.78e-01  
 23  +4.6799e-01  +4.8225e-01  1.43e-02  5.48e-06  7.83e-04  1.51e-06  1.96e-05  5.91e-01  
 24  +4.6577e-01  +4.7370e-01  7.94e-03  2.98e-06  4.25e-04  8.44e-07  1.08e-05  4.65e-01  
 25  +4.6371e-01  +4.6576e-01  2.05e-03  7.59e-07  1.08e-04  2.32e-07  2.82e-06  9.90e-01  
 26  +4.6294e-01  +4.6305e-01  1.08e-04  3.97e-08  5.68e-06  1.18e-08  1.50e-07  9.48e-01  
 27  +4.6290e-01  +4.6290e-01  1.09e-06  4.01e-10  5.72e-08  1.18e-10  1.51e-09  9.90e-01  
 28  +4.6290e-01  +4.6290e-01  1.09e-08  4.01e-12  5.72e-10  1.18e-12  1.51e-11  9.90e-01  
 29  +4.6290e-01  +4.6290e-01  1.09e-10  4.00e-14  5.72e-12  1.19e-14  1.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.2413ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:44 PM: Optimal value: 4.629e-01
(CVXPY) Aug 31 04:48:44 PM: Compilation took 1.204e-02 seconds
(CVXPY) Aug 31 04:48:44 PM: Solver (including time spent in interface) took 5.817e-02 seconds
FULL MODEL:
  Accruacy: 0.535
  Our objective: 0.07000000000000006

IF 
    (x1 = 1 AND x0 = 0 AND x4 = 0)                       <-- (term's our objective: 0.010400000000000006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.0368)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.009199999999999972)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0) <-- (term's our objective: 0.006000000000000033)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x0 = 0 AND x3 = 0) <-- (term's our objective: 0.004799999999999985)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.002800000000000049)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.764738082885742
Best over terms:
  Our final objective: 0.0368
    Its accruacy: 0.5184
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.0368
  Highest accruacy: 0.5184
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

