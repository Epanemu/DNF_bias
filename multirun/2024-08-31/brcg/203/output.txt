Command:
python test_script.py -s smallest_subclass -d 6 -n 10 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 6.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:45 PM: Your problem has 18 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:45 PM: Finished problem compilation (took 3.930e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 18
  constraints   = 23
  nnz(P)        = 0
  nnz(A)        = 58
  cones (total) = 1
    : Nonnegative = 1,  numel = 23

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.6882e-01  +6.2266e+00  5.86e+00  7.48e-01  2.59e+00  1.00e+00  1.35e+00   ------   
  1  +3.2663e-01  +9.7668e-01  6.50e-01  2.12e-01  8.98e-01  3.57e-03  5.04e-01  8.27e-01  
  2  +1.7870e-01  +2.6668e-01  8.80e-02  3.22e-02  1.38e-01  3.81e-03  1.05e-01  8.54e-01  
  3  +1.5262e-01  +1.6239e-01  9.77e-03  3.50e-03  1.51e-02  4.57e-04  1.37e-02  8.98e-01  
  4  +1.5018e-01  +1.5030e-01  1.20e-04  4.37e-05  1.87e-04  5.40e-06  1.76e-04  9.87e-01  
  5  +1.5015e-01  +1.5015e-01  1.20e-06  4.37e-07  1.87e-06  5.40e-08  1.76e-06  9.90e-01  
  6  +1.5015e-01  +1.5015e-01  1.20e-08  4.37e-09  1.87e-08  5.40e-10  1.76e-08  9.90e-01  
  7  +1.5015e-01  +1.5015e-01  1.20e-10  4.37e-11  1.87e-10  5.40e-12  1.76e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:45 PM: Optimal value: 1.502e-01
(CVXPY) Aug 31 04:49:45 PM: Compilation took 3.930e-03 seconds
(CVXPY) Aug 31 04:49:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:45 PM: Your problem has 28 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:45 PM: Finished problem compilation (took 2.048e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 28
  constraints   = 33
  nnz(P)        = 0
  nnz(A)        = 93
  cones (total) = 1
    : Nonnegative = 1,  numel = 33

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.5774e-01  +5.9615e+00  5.70e+00  7.89e-01  2.81e+00  1.00e+00  1.28e+00   ------   
  1  +8.4461e-02  +8.0979e-01  7.25e-01  2.60e-01  9.89e-01  4.04e-03  4.85e-01  7.71e-01  
  2  +4.8107e-02  +1.5066e-01  1.03e-01  4.46e-02  1.85e-01  6.48e-03  1.12e-01  8.64e-01  
  3  +5.1947e-03  +2.0513e-02  1.53e-02  5.74e-03  2.59e-02  1.05e-03  1.62e-02  8.91e-01  
  4  +2.7396e-04  +4.7908e-04  2.05e-04  7.87e-05  3.53e-04  1.10e-05  2.25e-04  9.86e-01  
  5  +2.0576e-04  +2.1777e-04  1.20e-05  5.64e-06  2.25e-05  1.67e-07  1.66e-05  9.28e-01  
  6  +2.0007e-04  +2.0020e-04  1.37e-07  6.56e-08  2.57e-07  2.62e-09  2.00e-07  9.89e-01  
  7  +2.0000e-04  +2.0000e-04  1.37e-09  6.56e-10  2.57e-09  2.61e-11  2.00e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 107.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:45 PM: Optimal value: 2.000e-04
(CVXPY) Aug 31 04:49:45 PM: Compilation took 2.048e-03 seconds
(CVXPY) Aug 31 04:49:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:45 PM: Your problem has 29 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:45 PM: Finished problem compilation (took 3.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 29
  constraints   = 34
  nnz(P)        = 0
  nnz(A)        = 97
  cones (total) = 1
    : Nonnegative = 1,  numel = 34

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.4879e-01  +5.9366e+00  5.69e+00  7.91e-01  2.84e+00  1.00e+00  1.27e+00   ------   
  1  +6.5097e-02  +8.0351e-01  7.38e-01  2.67e-01  1.01e+00  4.08e-03  4.87e-01  7.62e-01  
  2  +3.3966e-02  +1.3686e-01  1.03e-01  4.65e-02  1.90e-01  6.80e-03  1.14e-01  8.67e-01  
  3  +1.7756e-03  +7.9143e-03  6.14e-03  2.65e-03  1.12e-02  4.32e-04  7.13e-03  9.56e-01  
  4  +2.2726e-04  +3.2366e-04  9.64e-05  4.33e-05  1.81e-04  4.33e-06  1.17e-04  9.84e-01  
  5  +2.0105e-04  +2.0677e-04  5.72e-06  3.01e-06  1.14e-05  2.02e-07  8.34e-06  9.33e-01  
  6  +2.0001e-04  +2.0007e-04  6.07e-08  3.21e-08  1.21e-07  2.17e-09  8.95e-08  9.89e-01  
  7  +2.0000e-04  +2.0000e-04  6.07e-10  3.22e-10  1.21e-09  2.17e-11  8.95e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 107.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:45 PM: Optimal value: 2.000e-04
(CVXPY) Aug 31 04:49:45 PM: Compilation took 3.010e-03 seconds
(CVXPY) Aug 31 04:49:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 1 AND x4 = 0) <-- (term's our objective: 0.4)
 OR (x1 = 0 AND x2 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8034734725952148
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

