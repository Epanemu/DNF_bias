Command:
python test_script.py -s smallest_subclass -d 4 -n 500 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.192
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:42 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:42 PM: Finished problem compilation (took 5.167e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +2.5067e+02  2.50e+02  9.32e-01  1.85e+01  1.00e+00  1.01e+00   ------   
  1  +6.0733e-01  +4.8851e+01  4.82e+01  3.19e-01  1.01e+01  4.10e-03  4.76e-01  6.67e-01  
  2  +5.4786e-01  +7.6823e+00  7.13e+00  1.13e-01  4.29e+00  8.46e-03  2.18e-01  7.54e-01  
  3  +5.0121e-01  +1.2741e+00  7.73e-01  2.30e-02  8.44e-01  1.12e-03  1.96e-01  4.38e-01  
  4  +5.0022e-01  +6.6574e-01  1.66e-01  4.98e-03  1.88e-01  2.50e-04  4.87e-02  7.87e-01  
  5  +4.8964e-01  +8.6084e-01  3.71e-01  2.09e-03  8.06e-02  2.84e-03  6.80e-03  9.86e-01  
  6  +4.7551e-01  +5.7898e-01  1.03e-01  4.63e-04  1.78e-02  4.23e-04  1.60e-03  8.46e-01  
  7  +4.6348e-01  +4.9181e-01  2.83e-02  1.21e-04  4.65e-03  3.90e-06  4.76e-04  9.90e-01  
  8  +4.5459e-01  +4.5600e-01  1.41e-03  5.63e-06  2.16e-04  4.50e-07  2.43e-05  9.63e-01  
  9  +4.5411e-01  +4.5412e-01  1.47e-05  5.88e-08  2.26e-06  4.74e-09  2.55e-07  9.90e-01  
 10  +4.5410e-01  +4.5410e-01  1.47e-07  5.88e-10  2.26e-08  4.74e-11  2.55e-09  9.90e-01  
 11  +4.5410e-01  +4.5410e-01  1.47e-09  5.88e-12  2.26e-10  4.74e-13  2.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1519ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:42 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:42 PM: Optimal value: 4.541e-01
(CVXPY) Aug 31 04:46:42 PM: Compilation took 5.167e-03 seconds
(CVXPY) Aug 31 04:46:42 PM: Solver (including time spent in interface) took 9.308e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4541
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:43 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:43 PM: Finished problem compilation (took 4.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 2352
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9851e-01  +2.5161e+02  2.51e+02  9.33e-01  2.00e+01  1.00e+00  1.02e+00   ------   
  1  +6.0316e-01  +4.9359e+01  4.88e+01  3.28e-01  1.09e+01  4.07e-03  4.89e-01  6.63e-01  
  2  +5.4404e-01  +7.2994e+00  6.76e+00  1.08e-01  4.35e+00  9.11e-03  2.11e-01  7.94e-01  
  3  +5.0257e-01  +1.6079e+00  1.11e+00  3.34e-02  1.31e+00  2.04e-03  1.86e-01  4.31e-01  
  4  +4.9978e-01  +9.5615e-01  4.56e-01  1.33e-02  5.34e-01  1.23e-03  6.69e-02  7.15e-01  
  5  +4.8232e-01  +1.0974e+00  6.15e-01  4.14e-03  1.73e-01  6.19e-03  1.24e-02  9.51e-01  
  6  +4.7116e-01  +9.1093e-01  4.40e-01  2.44e-03  1.02e-01  3.98e-03  7.57e-03  4.88e-01  
  7  +4.6400e-01  +7.9295e-01  3.29e-01  1.88e-03  7.81e-02  1.99e-03  6.09e-03  3.34e-01  
  8  +4.6907e-01  +8.0229e-01  3.33e-01  1.77e-03  7.36e-02  1.27e-03  5.58e-03  5.05e-01  
  9  +4.5504e-01  +6.8815e-01  2.33e-01  1.14e-03  4.75e-02  6.58e-04  3.81e-03  4.70e-01  
 10  +4.2690e-01  +4.9252e-01  6.56e-02  3.08e-04  1.27e-02  5.98e-06  1.18e-03  8.98e-01  
 11  +4.1150e-01  +4.1591e-01  4.42e-03  2.02e-05  8.29e-04  7.25e-07  8.83e-05  9.37e-01  
 12  +4.1022e-01  +4.1027e-01  5.15e-05  2.35e-07  9.65e-06  9.69e-09  1.06e-06  9.89e-01  
 13  +4.1020e-01  +4.1020e-01  5.15e-07  2.35e-09  9.64e-08  9.68e-11  1.06e-08  9.90e-01  
 14  +4.1020e-01  +4.1020e-01  5.15e-09  2.35e-11  9.64e-10  9.69e-13  1.06e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7553ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:43 PM: Optimal value: 4.102e-01
(CVXPY) Aug 31 04:46:43 PM: Compilation took 4.008e-03 seconds
(CVXPY) Aug 31 04:46:43 PM: Solver (including time spent in interface) took 1.997e-03 seconds
Iteration: 2, Objective: 0.4102
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:43 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:43 PM: Finished problem compilation (took 2.995e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 2560
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9838e-01  +2.5102e+02  2.51e+02  9.34e-01  2.03e+01  1.00e+00  1.02e+00   ------   
  1  +5.9977e-01  +4.9743e+01  4.91e+01  3.34e-01  1.11e+01  4.05e-03  4.95e-01  6.57e-01  
  2  +5.4142e-01  +7.0281e+00  6.49e+00  1.05e-01  4.29e+00  9.63e-03  2.07e-01  8.21e-01  
  3  +5.0172e-01  +1.5477e+00  1.05e+00  3.18e-02  1.26e+00  2.10e-03  1.74e-01  5.30e-01  
  4  +4.9806e-01  +1.0863e+00  5.88e-01  1.57e-02  6.40e-01  1.97e-03  6.47e-02  6.95e-01  
  5  +4.8139e-01  +9.5318e-01  4.72e-01  4.49e-03  1.89e-01  4.60e-03  1.46e-02  8.60e-01  
  6  +4.7292e-01  +9.5148e-01  4.79e-01  2.85e-03  1.20e-01  6.07e-03  8.91e-03  4.91e-01  
  7  +4.6405e-01  +8.0353e-01  3.39e-01  1.84e-03  7.75e-02  1.93e-03  5.92e-03  6.45e-01  
  8  +4.4383e-01  +6.3507e-01  1.91e-01  9.33e-04  3.90e-02  8.51e-04  3.25e-03  5.29e-01  
  9  +4.2621e-01  +5.0724e-01  8.10e-02  3.82e-04  1.59e-02  6.65e-05  1.48e-03  9.09e-01  
 10  +4.1730e-01  +4.6031e-01  4.30e-02  1.90e-04  7.89e-03  4.04e-05  7.66e-04  9.39e-01  
 11  +4.1304e-01  +4.4146e-01  2.84e-02  1.25e-04  5.19e-03  2.63e-05  5.19e-04  9.16e-01  
 12  +4.0745e-01  +4.1799e-01  1.05e-02  4.48e-05  1.86e-03  9.77e-06  1.94e-04  6.78e-01  
 13  +4.0436e-01  +4.0457e-01  2.06e-04  8.72e-07  3.62e-05  1.67e-07  3.92e-06  9.81e-01  
 14  +4.0430e-01  +4.0430e-01  2.06e-06  8.72e-09  3.61e-07  1.67e-09  3.92e-08  9.90e-01  
 15  +4.0430e-01  +4.0430e-01  2.06e-08  8.72e-11  3.61e-09  1.67e-11  3.92e-10  9.90e-01  
 16  +4.0430e-01  +4.0430e-01  2.06e-10  8.72e-13  3.61e-11  1.67e-13  3.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8505ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:43 PM: Optimal value: 4.043e-01
(CVXPY) Aug 31 04:46:43 PM: Compilation took 2.995e-03 seconds
(CVXPY) Aug 31 04:46:43 PM: Solver (including time spent in interface) took 2.002e-03 seconds
Iteration: 3, Objective: 0.4043
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:43 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:43 PM: Finished problem compilation (took 1.957e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 2625
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9838e-01  +2.5102e+02  2.51e+02  9.34e-01  2.04e+01  1.00e+00  1.02e+00   ------   
  1  +5.9949e-01  +4.9822e+01  4.92e+01  3.35e-01  1.12e+01  4.06e-03  4.96e-01  6.56e-01  
  2  +5.4105e-01  +6.9912e+00  6.45e+00  1.05e-01  4.27e+00  9.70e-03  2.06e-01  8.24e-01  
  3  +5.0142e-01  +1.5176e+00  1.02e+00  3.09e-02  1.23e+00  2.10e-03  1.70e-01  5.61e-01  
  4  +4.9718e-01  +1.0792e+00  5.82e-01  1.48e-02  6.07e-01  2.16e-03  5.86e-02  7.26e-01  
  5  +4.8661e-01  +9.5445e-01  4.68e-01  6.13e-03  2.57e-01  3.57e-03  2.06e-02  6.86e-01  
  6  +4.8559e-01  +9.9440e-01  5.09e-01  4.52e-03  1.91e-01  3.09e-03  1.42e-02  6.71e-01  
  7  +4.7524e-01  +8.5787e-01  3.83e-01  2.53e-03  1.07e-01  1.49e-03  8.10e-03  7.31e-01  
  8  +4.6030e-01  +7.2517e-01  2.65e-01  1.54e-03  6.47e-02  6.86e-04  5.16e-03  5.68e-01  
  9  +4.4151e-01  +5.9997e-01  1.58e-01  7.91e-04  3.31e-02  3.66e-04  2.82e-03  5.30e-01  
 10  +4.2835e-01  +5.2320e-01  9.48e-02  4.49e-04  1.87e-02  1.76e-04  1.71e-03  5.30e-01  
 11  +4.1398e-01  +4.4505e-01  3.11e-02  1.38e-04  5.72e-03  3.26e-05  5.63e-04  9.37e-01  
 12  +4.1258e-01  +4.3773e-01  2.51e-02  1.16e-04  4.81e-03  2.20e-05  5.07e-04  2.75e-01  
 13  +4.1196e-01  +4.3648e-01  2.45e-02  1.10e-04  4.57e-03  2.27e-05  4.61e-04  2.27e-01  
 14  +4.1078e-01  +4.3218e-01  2.14e-02  9.27e-05  3.86e-03  1.99e-05  3.91e-04  5.37e-01  
 15  +4.0510e-01  +4.0778e-01  2.68e-03  1.14e-05  4.74e-04  2.32e-06  5.08e-05  8.77e-01  
 16  +4.0431e-01  +4.0436e-01  4.85e-05  2.06e-07  8.57e-06  4.11e-08  9.31e-07  9.82e-01  
 17  +4.0430e-01  +4.0430e-01  4.85e-07  2.06e-09  8.57e-08  4.11e-10  9.32e-09  9.90e-01  
 18  +4.0430e-01  +4.0430e-01  4.85e-09  2.06e-11  8.57e-10  4.11e-12  9.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1905ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:43 PM: Optimal value: 4.043e-01
(CVXPY) Aug 31 04:46:43 PM: Compilation took 1.957e-03 seconds
(CVXPY) Aug 31 04:46:43 PM: Solver (including time spent in interface) took 1.970e-03 seconds
Iteration: 4, Objective: 0.4043
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:43 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:43 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 2682
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9838e-01  +2.5104e+02  2.51e+02  9.34e-01  2.04e+01  1.00e+00  1.02e+00   ------   
  1  +5.9881e-01  +5.0014e+01  4.94e+01  3.37e-01  1.12e+01  4.05e-03  4.98e-01  6.54e-01  
  2  +5.4073e-01  +6.9728e+00  6.43e+00  1.04e-01  4.27e+00  9.87e-03  2.06e-01  8.29e-01  
  3  +5.0218e-01  +1.6287e+00  1.13e+00  3.41e-02  1.36e+00  2.25e-03  1.73e-01  5.17e-01  
  4  +4.9810e-01  +1.0920e+00  5.94e-01  1.55e-02  6.38e-01  2.04e-03  6.16e-02  7.07e-01  
  5  +4.8598e-01  +9.6961e-01  4.84e-01  5.68e-03  2.39e-01  3.87e-03  1.87e-02  7.52e-01  
  6  +4.8584e-01  +1.0236e+00  5.38e-01  4.50e-03  1.91e-01  3.40e-03  1.39e-02  6.09e-01  
  7  +4.7400e-01  +8.7044e-01  3.96e-01  2.49e-03  1.05e-01  2.12e-03  7.99e-03  6.05e-01  
  8  +4.6298e-01  +7.5240e-01  2.89e-01  1.74e-03  7.32e-02  8.07e-04  5.78e-03  5.57e-01  
  9  +4.3660e-01  +5.6182e-01  1.25e-01  6.15e-04  2.57e-02  2.60e-04  2.24e-03  7.08e-01  
 10  +4.2855e-01  +5.1954e-01  9.10e-02  4.32e-04  1.81e-02  1.67e-04  1.64e-03  3.72e-01  
 11  +4.1380e-01  +4.4471e-01  3.09e-02  1.38e-04  5.77e-03  4.63e-05  5.68e-04  7.19e-01  
 12  +4.1292e-01  +4.3930e-01  2.64e-02  1.23e-04  5.11e-03  3.25e-05  5.36e-04  1.65e-01  
 13  +4.1277e-01  +4.3953e-01  2.68e-02  1.23e-04  5.14e-03  3.35e-05  5.24e-04  6.94e-02  
 14  +4.1231e-01  +4.3975e-01  2.74e-02  1.19e-04  4.97e-03  3.30e-05  4.95e-04  3.50e-01  
 15  +4.0662e-01  +4.1439e-01  7.77e-03  3.33e-05  1.39e-03  8.64e-06  1.46e-04  7.58e-01  
 16  +4.0521e-01  +4.0812e-01  2.90e-03  1.24e-05  5.16e-04  2.97e-06  5.53e-05  7.85e-01  
 17  +4.0432e-01  +4.0438e-01  6.18e-05  2.63e-07  1.10e-05  6.16e-08  1.19e-06  9.79e-01  
 18  +4.0430e-01  +4.0430e-01  6.18e-07  2.63e-09  1.09e-07  6.16e-10  1.19e-08  9.90e-01  
 19  +4.0430e-01  +4.0430e-01  6.18e-09  2.63e-11  1.09e-09  6.16e-12  1.19e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1656ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:43 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:43 PM: Optimal value: 4.043e-01
(CVXPY) Aug 31 04:46:43 PM: Compilation took 2.999e-03 seconds
(CVXPY) Aug 31 04:46:43 PM: Solver (including time spent in interface) took 2.999e-03 seconds
FULL MODEL:
  Accruacy: 0.596
  Our objective: 0.192

IF 
    (x0 = 1 AND x1 = 1)                       <-- (term's our objective: 0.06000000000000005)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.12000000000000002)
 OR (x0 = 1 AND x3 = 1 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.011999999999999948)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.233095645904541
Best over terms:
  Our final objective: 0.12000000000000002
    Its accruacy: 0.56
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.12000000000000002
  Highest accruacy: 0.56
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

