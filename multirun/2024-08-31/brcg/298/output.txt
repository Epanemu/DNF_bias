Command:
python test_script.py -s smallest_subclass -d 8 -n 500 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.016
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 8.

Computed total variation: 0.532
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:45 PM: Your problem has 267 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Finished problem compilation (took 3.868e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 267
  constraints   = 517
  nnz(P)        = 0
  nnz(A)        = 2767
  cones (total) = 1
    : Nonnegative = 1,  numel = 517

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +2.5091e+02  2.50e+02  9.37e-01  2.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.8341e-01  +5.3874e+01  5.33e+01  3.95e-01  1.49e+01  3.82e-03  5.64e-01  5.98e-01  
  2  +5.3148e-01  +6.4673e+00  5.94e+00  1.24e-01  5.89e+00  1.52e-02  2.52e-01  9.40e-01  
  3  +5.0226e-01  +1.4323e+00  9.30e-01  2.86e-02  1.34e+00  3.14e-05  1.92e-01  7.59e-01  
  4  +5.0001e-01  +6.8159e-01  1.82e-01  5.63e-03  2.72e-01  1.09e-05  4.28e-02  8.09e-01  
  5  +4.9427e-01  +7.0251e-01  2.08e-01  2.76e-03  1.36e-01  5.18e-05  9.20e-03  8.30e-01  
  6  +4.7661e-01  +5.7971e-01  1.03e-01  5.99e-04  2.96e-02  7.40e-05  2.00e-03  8.16e-01  
  7  +4.6134e-01  +5.2518e-01  6.38e-02  2.82e-04  1.39e-02  4.97e-05  1.07e-03  6.02e-01  
  8  +4.4802e-01  +4.6737e-01  1.94e-02  8.07e-05  3.96e-03  1.46e-05  3.43e-04  9.11e-01  
  9  +4.4291e-01  +4.4532e-01  2.41e-03  9.94e-06  4.87e-04  2.12e-06  4.42e-05  9.90e-01  
 10  +4.4211e-01  +4.4213e-01  2.59e-05  1.07e-07  5.22e-06  2.25e-08  4.77e-07  9.89e-01  
 11  +4.4210e-01  +4.4210e-01  2.59e-07  1.07e-09  5.22e-08  2.25e-10  4.77e-09  9.90e-01  
 12  +4.4210e-01  +4.4210e-01  2.59e-09  1.07e-11  5.22e-10  2.25e-12  4.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.326ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:45 PM: Optimal value: 4.421e-01
(CVXPY) Aug 31 04:58:45 PM: Compilation took 3.868e-03 seconds
(CVXPY) Aug 31 04:58:45 PM: Solver (including time spent in interface) took 2.162e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:45 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 3183
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +2.5122e+02  2.51e+02  9.38e-01  2.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.7992e-01  +5.4076e+01  5.35e+01  4.00e-01  1.51e+01  3.81e-03  5.69e-01  5.96e-01  
  2  +5.2816e-01  +6.1430e+00  5.61e+00  1.18e-01  5.70e+00  1.59e-02  2.42e-01  9.80e-01  
  3  +5.0107e-01  +1.3277e+00  8.27e-01  2.60e-02  1.25e+00  1.80e-04  1.51e-01  9.90e-01  
  4  +4.9660e-01  +8.2640e-01  3.30e-01  8.43e-03  4.19e-01  1.84e-04  3.27e-02  8.27e-01  
  5  +4.8119e-01  +7.5363e-01  2.72e-01  2.64e-03  1.34e-01  4.78e-04  8.14e-03  7.95e-01  
  6  +4.6314e-01  +6.6679e-01  2.04e-01  1.30e-03  6.58e-02  3.66e-04  4.04e-03  7.39e-01  
  7  +4.3485e-01  +5.0905e-01  7.42e-02  3.96e-04  2.00e-02  7.86e-05  1.36e-03  7.87e-01  
  8  +4.2041e-01  +4.3596e-01  1.56e-02  8.05e-05  4.06e-03  1.41e-05  2.96e-04  8.11e-01  
  9  +4.1647e-01  +4.1707e-01  5.98e-04  3.12e-06  1.57e-04  4.15e-07  1.19e-05  9.85e-01  
 10  +4.1630e-01  +4.1631e-01  6.00e-06  3.12e-08  1.57e-06  4.15e-09  1.20e-07  9.90e-01  
 11  +4.1630e-01  +4.1630e-01  6.00e-08  3.12e-10  1.57e-08  4.15e-11  1.20e-09  9.90e-01  
 12  +4.1630e-01  +4.1630e-01  6.00e-10  3.12e-12  1.57e-10  4.15e-13  1.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.175ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:45 PM: Optimal value: 4.163e-01
(CVXPY) Aug 31 04:58:45 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 31 04:58:45 PM: Solver (including time spent in interface) took 3.110e-03 seconds
Iteration: 2, Objective: 0.4163
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:45 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Finished problem compilation (took 2.995e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 3418
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9913e-01  +2.5123e+02  2.51e+02  9.38e-01  2.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.7756e-01  +5.4103e+01  5.35e+01  4.02e-01  1.50e+01  3.81e-03  5.69e-01  5.96e-01  
  2  +5.2631e-01  +6.1222e+00  5.60e+00  1.16e-01  5.56e+00  1.62e-02  2.37e-01  9.90e-01  
  3  +5.0234e-01  +1.3305e+00  8.28e-01  2.77e-02  1.35e+00  4.87e-04  1.09e-01  9.90e-01  
  4  +4.8992e-01  +1.1098e+00  6.20e-01  7.07e-03  3.63e-01  1.36e-03  1.98e-02  8.99e-01  
  5  +4.6821e-01  +8.8729e-01  4.19e-01  2.69e-03  1.38e-01  1.47e-03  7.66e-03  6.60e-01  
  6  +4.4572e-01  +7.4293e-01  2.97e-01  1.49e-03  7.61e-02  8.88e-04  4.49e-03  5.83e-01  
  7  +4.1988e-01  +5.7818e-01  1.58e-01  7.36e-04  3.72e-02  3.04e-04  2.43e-03  6.18e-01  
  8  +3.9589e-01  +4.4187e-01  4.60e-02  2.08e-04  1.04e-02  3.17e-05  7.69e-04  9.90e-01  
  9  +3.8415e-01  +3.8880e-01  4.65e-03  2.05e-05  1.03e-03  2.47e-06  8.60e-05  9.15e-01  
 10  +3.8254e-01  +3.8265e-01  1.09e-04  4.70e-07  2.36e-05  6.84e-08  2.12e-06  9.86e-01  
 11  +3.8250e-01  +3.8250e-01  1.09e-06  4.69e-09  2.36e-07  6.83e-10  2.12e-08  9.90e-01  
 12  +3.8250e-01  +3.8250e-01  1.09e-08  4.69e-11  2.36e-09  6.83e-12  2.12e-10  9.90e-01  
 13  +3.8250e-01  +3.8250e-01  1.09e-10  4.69e-13  2.36e-11  6.84e-14  2.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4532ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:45 PM: Optimal value: 3.825e-01
(CVXPY) Aug 31 04:58:45 PM: Compilation took 2.995e-03 seconds
(CVXPY) Aug 31 04:58:45 PM: Solver (including time spent in interface) took 2.999e-03 seconds
Iteration: 3, Objective: 0.3825
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:45 PM: Your problem has 297 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 297
  constraints   = 547
  nnz(P)        = 0
  nnz(A)        = 3695
  cones (total) = 1
    : Nonnegative = 1,  numel = 547

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9896e-01  +2.5160e+02  2.51e+02  9.39e-01  2.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.7486e-01  +5.4288e+01  5.37e+01  4.05e-01  1.50e+01  3.81e-03  5.72e-01  5.94e-01  
  2  +5.2473e-01  +6.2041e+00  5.68e+00  1.17e-01  5.60e+00  1.65e-02  2.39e-01  9.90e-01  
  3  +5.0486e-01  +1.5675e+00  1.06e+00  3.38e-02  1.69e+00  1.85e-03  1.02e-01  8.22e-01  
  4  +5.0110e-01  +1.6302e+00  1.13e+00  1.91e-02  9.84e-01  3.16e-03  5.01e-02  6.39e-01  
  5  +4.8285e-01  +1.3235e+00  8.41e-01  6.00e-03  3.14e-01  5.23e-03  1.57e-02  7.04e-01  
  6  +4.5936e-01  +1.0210e+00  5.62e-01  3.02e-03  1.57e-01  3.37e-03  8.26e-03  5.76e-01  
  7  +4.3952e-01  +8.1689e-01  3.77e-01  1.97e-03  1.02e-01  1.11e-03  5.72e-03  5.65e-01  
  8  +3.9824e-01  +5.2860e-01  1.30e-01  6.05e-04  3.07e-02  1.08e-04  1.97e-03  8.61e-01  
  9  +3.8749e-01  +4.8537e-01  9.79e-02  4.23e-04  2.15e-02  8.57e-05  1.42e-03  3.73e-01  
 10  +3.7377e-01  +4.2710e-01  5.33e-02  2.20e-04  1.12e-02  4.97e-05  7.82e-04  6.05e-01  
 11  +3.5876e-01  +3.6430e-01  5.54e-03  2.21e-05  1.12e-03  5.12e-06  8.45e-05  9.64e-01  
 12  +3.5697e-01  +3.5746e-01  4.88e-04  1.95e-06  9.84e-05  4.48e-07  7.54e-06  9.15e-01  
 13  +3.5680e-01  +3.5681e-01  9.50e-06  3.78e-08  1.91e-06  8.97e-09  1.47e-07  9.84e-01  
 14  +3.5680e-01  +3.5680e-01  9.50e-08  3.78e-10  1.91e-08  8.97e-11  1.47e-09  9.90e-01  
 15  +3.5680e-01  +3.5680e-01  9.51e-10  3.79e-12  1.91e-10  8.97e-13  1.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6938ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:45 PM: Optimal value: 3.568e-01
(CVXPY) Aug 31 04:58:45 PM: Compilation took 4.000e-03 seconds
(CVXPY) Aug 31 04:58:45 PM: Solver (including time spent in interface) took 3.999e-03 seconds
Iteration: 4, Objective: 0.3568
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:45 PM: Your problem has 307 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Finished problem compilation (took 3.348e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 307
  constraints   = 557
  nnz(P)        = 0
  nnz(A)        = 3815
  cones (total) = 1
    : Nonnegative = 1,  numel = 557

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9880e-01  +2.5189e+02  2.51e+02  9.40e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.7120e-01  +5.4418e+01  5.38e+01  4.08e-01  1.49e+01  3.82e-03  5.73e-01  5.94e-01  
  2  +5.2281e-01  +6.3323e+00  5.81e+00  1.16e-01  5.53e+00  1.69e-02  2.37e-01  9.90e-01  
  3  +5.0537e-01  +1.6007e+00  1.10e+00  3.07e-02  1.55e+00  2.67e-03  8.40e-02  7.73e-01  
  4  +5.0296e-01  +1.6601e+00  1.16e+00  2.09e-02  1.08e+00  3.87e-03  5.32e-02  4.30e-01  
  5  +4.8832e-01  +1.6224e+00  1.13e+00  8.90e-03  4.66e-01  6.21e-03  2.23e-02  7.20e-01  
  6  +4.6316e-01  +1.2131e+00  7.50e-01  4.52e-03  2.34e-01  3.82e-03  1.20e-02  5.67e-01  
  7  +4.4424e-01  +1.0284e+00  5.84e-01  3.08e-03  1.59e-01  2.49e-03  8.52e-03  4.22e-01  
  8  +4.0889e-01  +6.8548e-01  2.77e-01  1.47e-03  7.42e-02  2.20e-05  4.59e-03  8.39e-01  
  9  +3.7890e-01  +5.1086e-01  1.32e-01  6.31e-04  3.15e-02  2.69e-05  2.15e-03  5.98e-01  
 10  +3.6297e-01  +4.3114e-01  6.82e-02  3.12e-04  1.56e-02  2.70e-05  1.13e-03  6.02e-01  
 11  +3.5118e-01  +3.7387e-01  2.27e-02  1.02e-04  5.08e-03  9.59e-06  3.89e-04  6.78e-01  
 12  +3.4577e-01  +3.4853e-01  2.76e-03  1.22e-05  6.14e-04  1.46e-06  4.81e-05  9.01e-01  
 13  +3.4509e-01  +3.4551e-01  4.22e-04  1.86e-06  9.30e-05  2.81e-07  7.36e-06  8.97e-01  
 14  +3.4496e-01  +3.4497e-01  1.81e-05  7.98e-08  3.99e-06  1.38e-08  3.17e-07  9.71e-01  
 15  +3.4495e-01  +3.4495e-01  1.82e-07  8.00e-10  4.00e-08  1.38e-10  3.18e-09  9.90e-01  
 16  +3.4495e-01  +3.4495e-01  1.82e-09  8.01e-12  4.01e-10  1.39e-12  3.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6277ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:45 PM: Optimal value: 3.450e-01
(CVXPY) Aug 31 04:58:45 PM: Compilation took 3.348e-03 seconds
(CVXPY) Aug 31 04:58:45 PM: Solver (including time spent in interface) took 4.309e-03 seconds
Iteration: 5, Objective: 0.3450
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:45 PM: Your problem has 317 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Finished problem compilation (took 3.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 317
  constraints   = 567
  nnz(P)        = 0
  nnz(A)        = 3940
  cones (total) = 1
    : Nonnegative = 1,  numel = 567

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9880e-01  +2.5219e+02  2.52e+02  9.40e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.6853e-01  +5.4515e+01  5.39e+01  4.09e-01  1.47e+01  3.83e-03  5.73e-01  5.94e-01  
  2  +5.2093e-01  +6.4407e+00  5.92e+00  1.15e-01  5.43e+00  1.72e-02  2.35e-01  9.90e-01  
  3  +5.0512e-01  +1.7027e+00  1.20e+00  2.96e-02  1.51e+00  3.55e-03  7.73e-02  7.30e-01  
  4  +4.9944e-01  +1.7952e+00  1.30e+00  1.74e-02  9.03e-01  5.77e-03  4.30e-02  5.29e-01  
  5  +4.7859e-01  +1.6286e+00  1.15e+00  7.66e-03  4.01e-01  8.17e-03  1.92e-02  6.44e-01  
  6  +4.5271e-01  +1.2423e+00  7.90e-01  4.64e-03  2.40e-01  4.30e-03  1.23e-02  4.75e-01  
  7  +4.2757e-01  +1.0053e+00  5.78e-01  3.03e-03  1.55e-01  2.77e-03  8.49e-03  3.88e-01  
  8  +3.8030e-01  +5.9745e-01  2.17e-01  1.12e-03  5.57e-02  1.89e-04  3.69e-03  7.94e-01  
  9  +3.6137e-01  +5.0255e-01  1.41e-01  6.77e-04  3.34e-02  1.24e-04  2.40e-03  4.44e-01  
 10  +3.4159e-01  +4.0028e-01  5.87e-02  2.72e-04  1.33e-02  5.00e-05  1.06e-03  6.56e-01  
 11  +3.3371e-01  +3.6200e-01  2.83e-02  1.24e-04  6.11e-03  2.69e-05  5.16e-04  8.99e-01  
 12  +3.2591e-01  +3.2836e-01  2.45e-03  1.06e-05  5.19e-04  2.22e-06  4.69e-05  9.15e-01  
 13  +3.2512e-01  +3.2516e-01  4.66e-05  1.99e-07  9.76e-06  3.67e-08  9.02e-07  9.90e-01  
 14  +3.2510e-01  +3.2510e-01  4.65e-07  1.99e-09  9.76e-08  3.67e-10  9.03e-09  9.90e-01  
 15  +3.2510e-01  +3.2510e-01  4.65e-09  1.99e-11  9.76e-10  3.67e-12  9.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3993ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:45 PM: Optimal value: 3.251e-01
(CVXPY) Aug 31 04:58:45 PM: Compilation took 3.002e-03 seconds
(CVXPY) Aug 31 04:58:45 PM: Solver (including time spent in interface) took 3.998e-03 seconds
Iteration: 6, Objective: 0.3251
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:45 PM: Your problem has 325 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:45 PM: Finished problem compilation (took 4.015e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 325
  constraints   = 575
  nnz(P)        = 0
  nnz(A)        = 4074
  cones (total) = 1
    : Nonnegative = 1,  numel = 575

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9873e-01  +2.5216e+02  2.52e+02  9.41e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.6634e-01  +5.4549e+01  5.40e+01  4.10e-01  1.46e+01  3.83e-03  5.72e-01  5.93e-01  
  2  +5.1966e-01  +6.4970e+00  5.98e+00  1.15e-01  5.38e+00  1.73e-02  2.34e-01  9.90e-01  
  3  +5.0424e-01  +1.6673e+00  1.16e+00  2.71e-02  1.38e+00  3.80e-03  6.97e-02  7.36e-01  
  4  +4.9099e-01  +1.8512e+00  1.36e+00  1.23e-02  6.41e-01  8.01e-03  3.00e-02  7.06e-01  
  5  +4.6933e-01  +1.5355e+00  1.07e+00  7.05e-03  3.67e-01  6.89e-03  1.79e-02  4.79e-01  
  6  +4.3065e-01  +1.0613e+00  6.31e-01  3.33e-03  1.70e-01  3.12e-03  9.15e-03  6.17e-01  
  7  +3.9453e-01  +7.3740e-01  3.43e-01  2.00e-03  9.91e-02  2.45e-05  6.37e-03  7.81e-01  
  8  +3.5800e-01  +5.1949e-01  1.61e-01  8.09e-04  3.97e-02  2.31e-05  2.87e-03  5.91e-01  
  9  +3.3794e-01  +4.2118e-01  8.32e-02  3.93e-04  1.92e-02  2.27e-05  1.53e-03  5.60e-01  
 10  +3.2162e-01  +3.4041e-01  1.88e-02  8.63e-05  4.20e-03  5.78e-06  3.67e-04  7.82e-01  
 11  +3.1779e-01  +3.2253e-01  4.74e-03  2.15e-05  1.05e-03  3.64e-06  9.56e-05  9.61e-01  
 12  +3.1642e-01  +3.1680e-01  3.74e-04  1.70e-06  8.25e-05  2.80e-07  7.67e-06  9.24e-01  
 13  +3.1630e-01  +3.1631e-01  4.48e-06  2.03e-08  9.88e-07  3.35e-09  9.23e-08  9.89e-01  
 14  +3.1630e-01  +3.1630e-01  4.48e-08  2.03e-10  9.88e-09  3.35e-11  9.23e-10  9.90e-01  
 15  +3.1630e-01  +3.1630e-01  4.48e-10  2.03e-12  9.88e-11  3.35e-13  9.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7136ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:45 PM: Optimal value: 3.163e-01
(CVXPY) Aug 31 04:58:45 PM: Compilation took 4.015e-03 seconds
(CVXPY) Aug 31 04:58:45 PM: Solver (including time spent in interface) took 3.994e-03 seconds
Iteration: 7, Objective: 0.3163
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 335 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 5.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 335
  constraints   = 585
  nnz(P)        = 0
  nnz(A)        = 4162
  cones (total) = 1
    : Nonnegative = 1,  numel = 585

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9859e-01  +2.5211e+02  2.52e+02  9.41e-01  2.40e+01  1.00e+00  1.02e+00   ------   
  1  +5.6336e-01  +5.4635e+01  5.41e+01  4.13e-01  1.44e+01  3.83e-03  5.74e-01  5.92e-01  
  2  +5.1789e-01  +6.5911e+00  6.07e+00  1.15e-01  5.33e+00  1.76e-02  2.34e-01  9.90e-01  
  3  +5.0325e-01  +1.7406e+00  1.24e+00  2.68e-02  1.37e+00  4.36e-03  6.78e-02  7.34e-01  
  4  +4.8623e-01  +1.8212e+00  1.33e+00  1.15e-02  5.98e-01  8.98e-03  2.78e-02  6.84e-01  
  5  +4.5900e-01  +1.5017e+00  1.04e+00  6.39e-03  3.32e-01  7.92e-03  1.61e-02  4.92e-01  
  6  +4.3320e-01  +1.2041e+00  7.71e-01  4.35e-03  2.23e-01  4.72e-03  1.16e-02  3.74e-01  
  7  +3.8536e-01  +7.2666e-01  3.41e-01  1.92e-03  9.56e-02  4.09e-05  5.97e-03  8.06e-01  
  8  +3.5478e-01  +5.4487e-01  1.90e-01  9.88e-04  4.85e-02  3.84e-05  3.39e-03  4.93e-01  
  9  +3.3454e-01  +4.4004e-01  1.06e-01  5.20e-04  2.54e-02  3.12e-05  1.95e-03  5.05e-01  
 10  +3.1497e-01  +3.4065e-01  2.57e-02  1.22e-04  5.95e-03  9.52e-06  5.11e-04  7.83e-01  
 11  +3.0926e-01  +3.1292e-01  3.66e-03  1.73e-05  8.39e-04  2.01e-06  7.57e-05  9.12e-01  
 12  +3.0828e-01  +3.0857e-01  2.81e-04  1.33e-06  6.43e-05  1.60e-07  5.91e-06  9.35e-01  
 13  +3.0820e-01  +3.0820e-01  3.48e-06  1.65e-08  7.98e-07  2.02e-09  7.34e-08  9.88e-01  
 14  +3.0820e-01  +3.0820e-01  3.48e-08  1.65e-10  7.98e-09  2.02e-11  7.34e-10  9.90e-01  
 15  +3.0820e-01  +3.0820e-01  3.48e-10  1.65e-12  7.98e-11  2.02e-13  7.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9178ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 3.082e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 5.004e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 3.930e-03 seconds
Iteration: 8, Objective: 0.3082
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 345 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 2.994e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 345
  constraints   = 595
  nnz(P)        = 0
  nnz(A)        = 4275
  cones (total) = 1
    : Nonnegative = 1,  numel = 595

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9858e-01  +2.5217e+02  2.52e+02  9.42e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.6179e-01  +5.4670e+01  5.41e+01  4.13e-01  1.43e+01  3.84e-03  5.73e-01  5.93e-01  
  2  +5.1681e-01  +6.6314e+00  6.11e+00  1.15e-01  5.24e+00  1.78e-02  2.33e-01  9.90e-01  
  3  +5.0269e-01  +1.8955e+00  1.39e+00  2.86e-02  1.45e+00  5.02e-03  7.12e-02  7.13e-01  
  4  +4.8263e-01  +1.8997e+00  1.42e+00  1.16e-02  6.03e-01  9.89e-03  2.81e-02  6.85e-01  
  5  +4.5460e-01  +1.5680e+00  1.11e+00  6.80e-03  3.51e-01  8.23e-03  1.72e-02  4.67e-01  
  6  +4.2723e-01  +1.2323e+00  8.05e-01  4.48e-03  2.28e-01  4.81e-03  1.20e-02  3.99e-01  
  7  +3.7608e-01  +7.0240e-01  3.26e-01  1.79e-03  8.82e-02  1.91e-04  5.55e-03  7.98e-01  
  8  +3.3792e-01  +4.7506e-01  1.37e-01  7.05e-04  3.43e-02  8.40e-05  2.50e-03  6.59e-01  
  9  +3.1961e-01  +3.8132e-01  6.17e-02  3.04e-04  1.47e-02  3.96e-05  1.18e-03  5.98e-01  
 10  +3.0854e-01  +3.2485e-01  1.63e-02  7.97e-05  3.84e-03  1.21e-05  3.34e-04  8.61e-01  
 11  +3.0560e-01  +3.1122e-01  5.62e-03  2.71e-05  1.31e-03  4.35e-06  1.17e-04  7.59e-01  
 12  +3.0498e-01  +3.0860e-01  3.61e-03  1.67e-05  8.13e-04  2.92e-06  7.29e-05  8.05e-01  
 13  +3.0385e-01  +3.0402e-01  1.64e-04  7.50e-07  3.67e-05  1.31e-07  3.34e-06  9.56e-01  
 14  +3.0380e-01  +3.0380e-01  1.67e-06  7.63e-09  3.73e-07  1.32e-09  3.40e-08  9.90e-01  
 15  +3.0380e-01  +3.0380e-01  1.67e-08  7.63e-11  3.73e-09  1.32e-11  3.40e-10  9.90e-01  
 16  +3.0380e-01  +3.0380e-01  1.67e-10  7.63e-13  3.73e-11  1.32e-13  3.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1943ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 3.038e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 2.994e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 6.020e-03 seconds
Iteration: 9, Objective: 0.3038
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 355 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 3.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 355
  constraints   = 605
  nnz(P)        = 0
  nnz(A)        = 4374
  cones (total) = 1
    : Nonnegative = 1,  numel = 605

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9855e-01  +2.5219e+02  2.52e+02  9.42e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +5.6026e-01  +5.4688e+01  5.41e+01  4.15e-01  1.41e+01  3.84e-03  5.73e-01  5.93e-01  
  2  +5.1544e-01  +6.6931e+00  6.18e+00  1.14e-01  5.16e+00  1.79e-02  2.32e-01  9.90e-01  
  3  +5.0137e-01  +1.9888e+00  1.49e+00  2.86e-02  1.45e+00  5.62e-03  7.06e-02  7.10e-01  
  4  +4.7635e-01  +1.9235e+00  1.45e+00  1.09e-02  5.66e-01  1.11e-02  2.65e-02  6.91e-01  
  5  +4.4334e-01  +1.5043e+00  1.06e+00  6.15e-03  3.15e-01  8.09e-03  1.57e-02  4.85e-01  
  6  +4.1229e-01  +1.1295e+00  7.17e-01  3.95e-03  1.99e-01  3.90e-03  1.08e-02  4.32e-01  
  7  +3.5970e-01  +6.3381e-01  2.74e-01  1.45e-03  7.09e-02  6.35e-04  4.65e-03  7.09e-01  
  8  +3.2642e-01  +4.5031e-01  1.24e-01  6.20e-04  3.00e-02  2.23e-04  2.23e-03  6.73e-01  
  9  +3.0967e-01  +3.6332e-01  5.37e-02  2.61e-04  1.26e-02  8.92e-05  1.01e-03  6.10e-01  
 10  +3.0288e-01  +3.2881e-01  2.59e-02  1.23e-04  5.99e-03  3.77e-05  4.98e-04  6.54e-01  
 11  +2.9683e-01  +3.0010e-01  3.27e-03  1.55e-05  7.51e-04  3.84e-06  6.56e-05  9.11e-01  
 12  +2.9596e-01  +2.9636e-01  3.97e-04  1.89e-06  9.10e-05  3.88e-07  8.21e-06  9.25e-01  
 13  +2.9584e-01  +2.9586e-01  2.03e-05  9.63e-08  4.64e-06  1.69e-08  4.22e-07  9.88e-01  
 14  +2.9583e-01  +2.9583e-01  2.04e-07  9.67e-10  4.67e-08  1.70e-10  4.25e-09  9.90e-01  
 15  +2.9583e-01  +2.9583e-01  2.04e-09  9.68e-12  4.67e-10  1.70e-12  4.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2112ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 2.958e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 3.003e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 5.989e-03 seconds
Iteration: 10, Objective: 0.2958
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 356 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 3.020e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 356
  constraints   = 606
  nnz(P)        = 0
  nnz(A)        = 4392
  cones (total) = 1
    : Nonnegative = 1,  numel = 606

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9854e-01  +2.5219e+02  2.52e+02  9.42e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +5.6000e-01  +5.4693e+01  5.41e+01  4.15e-01  1.41e+01  3.84e-03  5.73e-01  5.93e-01  
  2  +5.1525e-01  +6.6986e+00  6.18e+00  1.14e-01  5.15e+00  1.79e-02  2.31e-01  9.90e-01  
  3  +5.0123e-01  +2.0163e+00  1.52e+00  2.90e-02  1.46e+00  5.74e-03  7.12e-02  7.07e-01  
  4  +4.7586e-01  +1.9276e+00  1.45e+00  1.10e-02  5.69e-01  1.10e-02  2.67e-02  6.90e-01  
  5  +4.4286e-01  +1.5097e+00  1.07e+00  6.21e-03  3.18e-01  8.10e-03  1.59e-02  4.83e-01  
  6  +4.1134e-01  +1.1278e+00  7.16e-01  3.94e-03  1.98e-01  3.85e-03  1.08e-02  4.44e-01  
  7  +3.5943e-01  +6.3882e-01  2.79e-01  1.48e-03  7.20e-02  7.05e-04  4.70e-03  6.94e-01  
  8  +3.2681e-01  +4.6402e-01  1.37e-01  6.82e-04  3.30e-02  2.65e-04  2.43e-03  6.59e-01  
  9  +3.0955e-01  +3.7532e-01  6.58e-02  3.16e-04  1.53e-02  1.18e-04  1.21e-03  5.64e-01  
 10  +2.9957e-01  +3.2493e-01  2.54e-02  1.20e-04  5.82e-03  4.02e-05  4.89e-04  6.81e-01  
 11  +2.9462e-01  +3.0061e-01  5.99e-03  2.83e-05  1.37e-03  8.21e-06  1.19e-04  8.21e-01  
 12  +2.9329e-01  +2.9458e-01  1.29e-03  6.09e-06  2.94e-04  1.69e-06  2.60e-05  8.01e-01  
 13  +2.9300e-01  +2.9331e-01  3.07e-04  1.45e-06  6.97e-05  2.91e-07  6.23e-06  9.40e-01  
 14  +2.9290e-01  +2.9291e-01  4.43e-06  2.08e-08  1.00e-06  4.17e-09  8.98e-08  9.86e-01  
 15  +2.9290e-01  +2.9290e-01  4.43e-08  2.08e-10  1.00e-08  4.17e-11  8.98e-10  9.90e-01  
 16  +2.9290e-01  +2.9290e-01  4.43e-10  2.08e-12  1.00e-10  4.17e-13  8.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.3484ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 2.929e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 3.020e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 6.901e-03 seconds
Iteration: 11, Objective: 0.2929
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 366 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 3.031e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 366
  constraints   = 616
  nnz(P)        = 0
  nnz(A)        = 4477
  cones (total) = 1
    : Nonnegative = 1,  numel = 616

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9840e-01  +2.5218e+02  2.52e+02  9.43e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.5615e-01  +5.4810e+01  5.43e+01  4.17e-01  1.40e+01  3.85e-03  5.73e-01  5.91e-01  
  2  +5.1224e-01  +6.7929e+00  6.28e+00  1.13e-01  5.09e+00  1.83e-02  2.31e-01  9.90e-01  
  3  +4.9700e-01  +2.0238e+00  1.53e+00  2.62e-02  1.32e+00  6.44e-03  6.43e-02  7.46e-01  
  4  +4.6312e-01  +1.8987e+00  1.44e+00  1.04e-02  5.35e-01  1.11e-02  2.55e-02  6.92e-01  
  5  +4.3264e-01  +1.4878e+00  1.06e+00  6.46e-03  3.27e-01  6.58e-03  1.68e-02  4.81e-01  
  6  +4.0444e-01  +1.1762e+00  7.72e-01  4.33e-03  2.16e-01  4.18e-03  1.19e-02  3.64e-01  
  7  +3.5805e-01  +7.1063e-01  3.53e-01  1.95e-03  9.47e-02  7.73e-04  6.16e-03  7.05e-01  
  8  +3.2642e-01  +5.1165e-01  1.85e-01  9.73e-04  4.68e-02  3.40e-04  3.43e-03  5.47e-01  
  9  +3.0458e-01  +3.9024e-01  8.57e-02  4.32e-04  2.08e-02  1.42e-04  1.68e-03  5.81e-01  
 10  +2.9217e-01  +3.2485e-01  3.27e-02  1.61e-04  7.74e-03  4.87e-05  6.71e-04  6.74e-01  
 11  +2.8604e-01  +2.9354e-01  7.50e-03  3.67e-05  1.76e-03  1.06e-05  1.60e-04  7.76e-01  
 12  +2.8452e-01  +2.8578e-01  1.27e-03  6.24e-06  2.99e-04  1.01e-06  2.79e-05  9.85e-01  
 13  +2.8415e-01  +2.8431e-01  1.54e-04  7.55e-07  3.61e-05  1.15e-07  3.44e-06  9.33e-01  
 14  +2.8410e-01  +2.8410e-01  2.98e-06  1.46e-08  6.97e-07  2.21e-09  6.68e-08  9.85e-01  
 15  +2.8410e-01  +2.8410e-01  2.98e-08  1.46e-10  6.98e-09  2.21e-11  6.69e-10  9.90e-01  
 16  +2.8410e-01  +2.8410e-01  2.98e-10  1.46e-12  6.98e-11  2.22e-13  6.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.5083ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 2.841e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 3.031e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 6.001e-03 seconds
Iteration: 12, Objective: 0.2841
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 376 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 4.080e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 376
  constraints   = 626
  nnz(P)        = 0
  nnz(A)        = 4557
  cones (total) = 1
    : Nonnegative = 1,  numel = 626

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9839e-01  +2.5217e+02  2.52e+02  9.43e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.5556e-01  +5.4816e+01  5.43e+01  4.19e-01  1.38e+01  3.85e-03  5.73e-01  5.91e-01  
  2  +5.1171e-01  +6.7965e+00  6.28e+00  1.14e-01  5.01e+00  1.83e-02  2.31e-01  9.90e-01  
  3  +4.9608e-01  +2.0403e+00  1.54e+00  2.60e-02  1.30e+00  6.58e-03  6.39e-02  7.56e-01  
  4  +4.6126e-01  +1.8620e+00  1.40e+00  1.04e-02  5.27e-01  1.07e-02  2.56e-02  6.85e-01  
  5  +4.3298e-01  +1.5182e+00  1.09e+00  6.74e-03  3.39e-01  6.85e-03  1.75e-02  4.59e-01  
  6  +4.0540e-01  +1.2142e+00  8.09e-01  4.58e-03  2.27e-01  4.28e-03  1.26e-02  3.86e-01  
  7  +3.5975e-01  +7.3595e-01  3.76e-01  2.11e-03  1.02e-01  6.34e-04  6.66e-03  7.39e-01  
  8  +3.2716e-01  +5.2164e-01  1.94e-01  1.04e-03  4.95e-02  2.81e-04  3.65e-03  5.42e-01  
  9  +3.0564e-01  +4.0117e-01  9.55e-02  4.89e-04  2.33e-02  1.28e-04  1.89e-03  5.57e-01  
 10  +2.9271e-01  +3.3211e-01  3.94e-02  1.97e-04  9.35e-03  4.85e-05  8.11e-04  6.62e-01  
 11  +2.8651e-01  +3.0144e-01  1.49e-02  7.26e-05  3.46e-03  1.47e-05  3.12e-04  8.62e-01  
 12  +2.8271e-01  +2.8441e-01  1.71e-03  8.29e-06  3.94e-04  1.60e-06  3.68e-05  8.87e-01  
 13  +2.8222e-01  +2.8228e-01  6.01e-05  2.92e-07  1.38e-05  5.01e-08  1.31e-06  9.79e-01  
 14  +2.8220e-01  +2.8220e-01  6.01e-07  2.92e-09  1.38e-07  5.02e-10  1.31e-08  9.90e-01  
 15  +2.8220e-01  +2.8220e-01  6.02e-09  2.92e-11  1.38e-09  5.02e-12  1.31e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.4572ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 2.822e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 4.080e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 5.919e-03 seconds
Iteration: 13, Objective: 0.2822
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 386 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 4.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 386
  constraints   = 636
  nnz(P)        = 0
  nnz(A)        = 4611
  cones (total) = 1
    : Nonnegative = 1,  numel = 636

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9838e-01  +2.5217e+02  2.52e+02  9.44e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.5413e-01  +5.4878e+01  5.43e+01  4.19e-01  1.37e+01  3.86e-03  5.73e-01  5.91e-01  
  2  +5.1066e-01  +6.8204e+00  6.31e+00  1.13e-01  4.96e+00  1.84e-02  2.31e-01  9.90e-01  
  3  +4.9505e-01  +2.0282e+00  1.53e+00  2.53e-02  1.26e+00  6.66e-03  6.22e-02  7.57e-01  
  4  +4.5737e-01  +1.8607e+00  1.40e+00  1.01e-02  5.11e-01  1.08e-02  2.51e-02  6.91e-01  
  5  +4.2656e-01  +1.4861e+00  1.06e+00  6.42e-03  3.20e-01  6.64e-03  1.68e-02  4.74e-01  
  6  +3.9704e-01  +1.1573e+00  7.60e-01  4.25e-03  2.09e-01  4.16e-03  1.18e-02  3.58e-01  
  7  +3.5248e-01  +7.1631e-01  3.64e-01  2.02e-03  9.68e-02  1.03e-03  6.44e-03  6.40e-01  
  8  +3.2359e-01  +5.2558e-01  2.02e-01  1.08e-03  5.12e-02  4.83e-04  3.83e-03  5.07e-01  
  9  +3.0240e-01  +4.0230e-01  9.99e-02  5.16e-04  2.43e-02  2.12e-04  2.01e-03  5.52e-01  
 10  +2.9224e-01  +3.4598e-01  5.37e-02  2.72e-04  1.28e-02  1.04e-04  1.13e-03  5.23e-01  
 11  +2.8502e-01  +3.0782e-01  2.28e-02  1.12e-04  5.25e-03  2.35e-05  4.95e-04  9.38e-01  
 12  +2.7879e-01  +2.8033e-01  1.54e-03  7.40e-06  3.48e-04  1.28e-06  3.53e-05  9.47e-01  
 13  +2.7831e-01  +2.7834e-01  2.80e-05  1.35e-07  6.36e-06  2.08e-08  6.59e-07  9.82e-01  
 14  +2.7830e-01  +2.7830e-01  2.80e-07  1.35e-09  6.35e-08  2.07e-10  6.59e-09  9.90e-01  
 15  +2.7830e-01  +2.7830e-01  2.80e-09  1.35e-11  6.35e-10  2.08e-12  6.59e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.318ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 2.783e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 4.001e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 5.977e-03 seconds
Iteration: 14, Objective: 0.2783
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 396 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 3.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 396
  constraints   = 646
  nnz(P)        = 0
  nnz(A)        = 4682
  cones (total) = 1
    : Nonnegative = 1,  numel = 646

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9834e-01  +2.5209e+02  2.52e+02  9.44e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.5223e-01  +5.4901e+01  5.43e+01  4.20e-01  1.35e+01  3.86e-03  5.72e-01  5.91e-01  
  2  +5.0897e-01  +6.8550e+00  6.35e+00  1.13e-01  4.89e+00  1.85e-02  2.30e-01  9.90e-01  
  3  +4.9260e-01  +2.0077e+00  1.52e+00  2.38e-02  1.18e+00  6.86e-03  5.86e-02  7.76e-01  
  4  +4.4607e-01  +1.8468e+00  1.40e+00  9.20e-03  4.61e-01  1.13e-02  2.29e-02  7.25e-01  
  5  +4.0768e-01  +1.3124e+00  9.05e-01  5.33e-03  2.61e-01  3.07e-03  1.44e-02  6.65e-01  
  6  +3.6866e-01  +8.7147e-01  5.03e-01  3.07e-03  1.47e-01  2.20e-04  9.35e-03  8.51e-01  
  7  +3.1623e-01  +4.7473e-01  1.59e-01  8.65e-04  4.07e-02  6.72e-05  3.03e-03  7.28e-01  
  8  +3.0415e-01  +4.2209e-01  1.18e-01  6.23e-04  2.93e-02  5.99e-05  2.28e-03  3.82e-01  
  9  +2.8912e-01  +3.4984e-01  6.07e-02  3.12e-04  1.47e-02  3.20e-05  1.23e-03  5.05e-01  
 10  +2.7834e-01  +2.9824e-01  1.99e-02  1.00e-04  4.72e-03  1.39e-05  4.23e-04  8.57e-01  
 11  +2.7307e-01  +2.7466e-01  1.58e-03  7.94e-06  3.73e-04  1.04e-06  3.51e-05  9.36e-01  
 12  +2.7262e-01  +2.7269e-01  6.51e-05  3.28e-07  1.54e-05  4.11e-08  1.47e-06  9.64e-01  
 13  +2.7260e-01  +2.7260e-01  6.56e-07  3.31e-09  1.55e-07  4.13e-10  1.49e-08  9.90e-01  
 14  +2.7260e-01  +2.7260e-01  6.56e-09  3.31e-11  1.55e-09  4.13e-12  1.49e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.1228ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 2.726e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 3.011e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 6.930e-03 seconds
Iteration: 15, Objective: 0.2726
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 406 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 4.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 406
  constraints   = 656
  nnz(P)        = 0
  nnz(A)        = 4749
  cones (total) = 1
    : Nonnegative = 1,  numel = 656

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9823e-01  +2.5209e+02  2.52e+02  9.45e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.4934e-01  +5.4977e+01  5.44e+01  4.22e-01  1.34e+01  3.86e-03  5.74e-01  5.90e-01  
  2  +5.0671e-01  +6.9044e+00  6.40e+00  1.12e-01  4.86e+00  1.87e-02  2.31e-01  9.90e-01  
  3  +4.8968e-01  +2.0875e+00  1.60e+00  2.42e-02  1.19e+00  7.30e-03  5.96e-02  7.69e-01  
  4  +4.4370e-01  +1.8790e+00  1.44e+00  1.01e-02  4.99e-01  1.02e-02  2.52e-02  7.07e-01  
  5  +4.0973e-01  +1.3697e+00  9.60e-01  5.84e-03  2.85e-01  4.30e-03  1.56e-02  5.74e-01  
  6  +3.6110e-01  +8.3733e-01  4.76e-01  2.88e-03  1.36e-01  1.31e-04  8.74e-03  8.59e-01  
  7  +3.1043e-01  +4.5809e-01  1.48e-01  8.20e-04  3.83e-02  5.11e-05  2.89e-03  7.36e-01  
  8  +2.9919e-01  +4.0917e-01  1.10e-01  5.90e-04  2.76e-02  4.67e-05  2.17e-03  3.64e-01  
  9  +2.8320e-01  +3.3477e-01  5.16e-02  2.66e-04  1.25e-02  2.67e-05  1.05e-03  6.27e-01  
 10  +2.7483e-01  +2.9658e-01  2.18e-02  1.10e-04  5.17e-03  1.21e-05  4.59e-04  6.29e-01  
 11  +2.7033e-01  +2.7553e-01  5.21e-03  2.63e-05  1.23e-03  3.06e-06  1.13e-04  8.00e-01  
 12  +2.6913e-01  +2.7013e-01  9.96e-04  5.05e-06  2.35e-04  7.24e-07  2.23e-05  9.76e-01  
 13  +2.6885e-01  +2.6899e-01  1.44e-04  7.32e-07  3.41e-05  1.05e-07  3.26e-06  8.80e-01  
 14  +2.6880e-01  +2.6880e-01  1.62e-06  8.23e-09  3.84e-07  1.18e-09  3.67e-08  9.89e-01  
 15  +2.6880e-01  +2.6880e-01  1.62e-08  8.24e-11  3.84e-09  1.18e-11  3.67e-10  9.90e-01  
 16  +2.6880e-01  +2.6880e-01  1.62e-10  8.24e-13  3.84e-11  1.18e-13  3.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8227ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 2.688e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 4.001e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 6.998e-03 seconds
Iteration: 16, Objective: 0.2688
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 416 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 4.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 416
  constraints   = 666
  nnz(P)        = 0
  nnz(A)        = 4822
  cones (total) = 1
    : Nonnegative = 1,  numel = 666

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9820e-01  +2.5211e+02  2.52e+02  9.45e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.4811e-01  +5.5051e+01  5.45e+01  4.24e-01  1.33e+01  3.87e-03  5.74e-01  5.89e-01  
  2  +5.0547e-01  +6.9318e+00  6.43e+00  1.13e-01  4.81e+00  1.88e-02  2.31e-01  9.90e-01  
  3  +4.8803e-01  +2.1739e+00  1.69e+00  2.50e-02  1.22e+00  7.65e-03  6.14e-02  7.62e-01  
  4  +4.4311e-01  +1.9148e+00  1.47e+00  1.06e-02  5.24e-01  1.00e-02  2.68e-02  6.87e-01  
  5  +4.0659e-01  +1.4321e+00  1.03e+00  6.12e-03  2.98e-01  5.44e-03  1.63e-02  5.40e-01  
  6  +3.6323e-01  +8.6269e-01  4.99e-01  3.07e-03  1.45e-01  4.31e-04  9.23e-03  7.55e-01  
  7  +3.1207e-01  +4.8821e-01  1.76e-01  9.86e-04  4.60e-02  1.30e-04  3.41e-03  7.21e-01  
  8  +2.9662e-01  +4.1086e-01  1.14e-01  6.18e-04  2.89e-02  8.60e-05  2.26e-03  3.97e-01  
  9  +2.7866e-01  +3.2080e-01  4.21e-02  2.20e-04  1.03e-02  3.18e-05  8.79e-04  6.95e-01  
 10  +2.7175e-01  +2.8763e-01  1.59e-02  8.13e-05  3.81e-03  1.23e-05  3.42e-04  7.63e-01  
 11  +2.6802e-01  +2.7133e-01  3.31e-03  1.66e-05  7.78e-04  2.49e-06  7.36e-05  8.17e-01  
 12  +2.6705e-01  +2.6722e-01  1.64e-04  8.23e-07  3.84e-05  1.14e-07  3.72e-06  9.51e-01  
 13  +2.6700e-01  +2.6700e-01  1.67e-06  8.36e-09  3.90e-07  1.15e-09  3.80e-08  9.90e-01  
 14  +2.6700e-01  +2.6700e-01  1.67e-08  8.36e-11  3.90e-09  1.15e-11  3.80e-10  9.90e-01  
 15  +2.6700e-01  +2.6700e-01  1.67e-10  8.37e-13  3.91e-11  1.15e-13  3.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.5517ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 2.670e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 4.006e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 8.170e-03 seconds
Iteration: 17, Objective: 0.2670
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:46 PM: Your problem has 426 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:46 PM: Finished problem compilation (took 4.015e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 426
  constraints   = 676
  nnz(P)        = 0
  nnz(A)        = 4892
  cones (total) = 1
    : Nonnegative = 1,  numel = 676

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9811e-01  +2.5211e+02  2.52e+02  9.45e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.4511e-01  +5.5228e+01  5.47e+01  4.25e-01  1.32e+01  3.87e-03  5.75e-01  5.88e-01  
  2  +5.0307e-01  +6.9724e+00  6.47e+00  1.12e-01  4.76e+00  1.90e-02  2.33e-01  9.90e-01  
  3  +4.8474e-01  +2.2404e+00  1.76e+00  2.54e-02  1.22e+00  7.96e-03  6.26e-02  7.57e-01  
  4  +4.3423e-01  +1.8457e+00  1.41e+00  1.03e-02  5.01e-01  8.96e-03  2.64e-02  7.18e-01  
  5  +3.9931e-01  +1.3751e+00  9.76e-01  5.95e-03  2.86e-01  4.52e-03  1.61e-02  5.64e-01  
  6  +3.5839e-01  +8.7336e-01  5.15e-01  3.22e-03  1.51e-01  2.66e-04  9.81e-03  8.32e-01  
  7  +3.0600e-01  +4.4815e-01  1.42e-01  8.11e-04  3.75e-02  6.53e-05  2.86e-03  7.69e-01  
  8  +2.9589e-01  +4.0490e-01  1.09e-01  6.06e-04  2.81e-02  5.56e-05  2.22e-03  3.27e-01  
  9  +2.7688e-01  +3.1500e-01  3.81e-02  2.05e-04  9.48e-03  2.02e-05  8.30e-04  6.80e-01  
 10  +2.6909e-01  +2.7731e-01  8.22e-03  4.38e-05  2.02e-03  4.51e-06  1.89e-04  8.12e-01  
 11  +2.6816e-01  +2.7304e-01  4.88e-03  2.57e-05  1.18e-03  2.93e-06  1.14e-04  5.75e-01  
 12  +2.6715e-01  +2.6861e-01  1.46e-03  7.64e-06  3.51e-04  8.67e-07  3.52e-05  7.14e-01  
 13  +2.6685e-01  +2.6730e-01  4.47e-04  2.31e-06  1.06e-04  3.08e-07  1.10e-05  9.90e-01  
 14  +2.6670e-01  +2.6672e-01  1.17e-05  6.01e-08  2.76e-06  7.95e-09  2.89e-07  9.75e-01  
 15  +2.6670e-01  +2.6670e-01  1.18e-07  6.03e-10  2.76e-08  7.97e-11  2.90e-09  9.90e-01  
 16  +2.6670e-01  +2.6670e-01  1.18e-09  6.07e-12  2.78e-10  8.02e-13  2.92e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.25ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:46 PM: Optimal value: 2.667e-01
(CVXPY) Aug 31 04:58:46 PM: Compilation took 4.015e-03 seconds
(CVXPY) Aug 31 04:58:46 PM: Solver (including time spent in interface) took 7.989e-03 seconds
Iteration: 18, Objective: 0.2667
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:47 PM: Your problem has 428 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:47 PM: Finished problem compilation (took 3.984e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 428
  constraints   = 678
  nnz(P)        = 0
  nnz(A)        = 4906
  cones (total) = 1
    : Nonnegative = 1,  numel = 678

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9810e-01  +2.5213e+02  2.52e+02  9.45e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.4419e-01  +5.5264e+01  5.47e+01  4.25e-01  1.32e+01  3.88e-03  5.75e-01  5.87e-01  
  2  +5.0263e-01  +6.9924e+00  6.49e+00  1.12e-01  4.75e+00  1.91e-02  2.32e-01  9.90e-01  
  3  +4.8413e-01  +2.2804e+00  1.80e+00  2.57e-02  1.24e+00  8.11e-03  6.34e-02  7.53e-01  
  4  +4.3196e-01  +1.8766e+00  1.44e+00  1.04e-02  5.05e-01  9.21e-03  2.66e-02  7.18e-01  
  5  +4.0103e-01  +1.4492e+00  1.05e+00  6.50e-03  3.12e-01  4.97e-03  1.75e-02  5.10e-01  
  6  +3.5516e-01  +8.5227e-01  4.97e-01  3.12e-03  1.46e-01  4.34e-05  9.53e-03  8.74e-01  
  7  +3.0502e-01  +4.4935e-01  1.44e-01  8.37e-04  3.85e-02  3.11e-05  2.98e-03  7.47e-01  
  8  +2.9569e-01  +4.0744e-01  1.12e-01  6.31e-04  2.91e-02  3.13e-05  2.32e-03  3.04e-01  
  9  +2.7832e-01  +3.2317e-01  4.49e-02  2.44e-04  1.12e-02  1.56e-05  9.79e-04  6.39e-01  
 10  +2.6907e-01  +2.7718e-01  8.11e-03  4.38e-05  2.01e-03  3.89e-06  1.87e-04  8.78e-01  
 11  +2.6819e-01  +2.7319e-01  5.00e-03  2.66e-05  1.22e-03  2.79e-06  1.18e-04  5.76e-01  
 12  +2.6708e-01  +2.6830e-01  1.22e-03  6.42e-06  2.94e-04  6.75e-07  2.96e-05  7.71e-01  
 13  +2.6684e-01  +2.6725e-01  4.13e-04  2.13e-06  9.76e-05  2.82e-07  1.02e-05  9.90e-01  
 14  +2.6670e-01  +2.6671e-01  9.84e-06  5.05e-08  2.31e-06  6.63e-09  2.43e-07  9.77e-01  
 15  +2.6670e-01  +2.6670e-01  9.85e-08  5.06e-10  2.32e-08  6.64e-11  2.44e-09  9.90e-01  
 16  +2.6670e-01  +2.6670e-01  9.91e-10  5.09e-12  2.33e-10  6.68e-13  2.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.5899ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:47 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:47 PM: Optimal value: 2.667e-01
(CVXPY) Aug 31 04:58:47 PM: Compilation took 3.984e-03 seconds
(CVXPY) Aug 31 04:58:47 PM: Solver (including time spent in interface) took 8.009e-03 seconds
FULL MODEL:
  Accruacy: 0.704
  Our objective: 0.40800000000000003

IF 
    (x2 = 1 AND x3 = 1 AND x0 = 0 AND x5 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.04000000000000005)
 OR (x3 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.02400000000000003)
 OR (x0 = 1 AND x4 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.020000000000000025)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.00800000000000001)
 OR (x0 = 1 AND x1 = 1 AND x5 = 1 AND x7 = 1 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.012000000000000014)
 OR (x2 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.016000000000000018)
 OR (x1 = 1 AND x5 = 1 AND x6 = 1 AND x2 = 0 AND x3 = 0 AND x7 = 0)                       <-- (term's our objective: 0.02000000000000002)
 OR (x0 = 1 AND x2 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0)                       <-- (term's our objective: 0.016000000000000018)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.028000000000000025)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.00800000000000001)
 OR (x6 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x7 = 0)                       <-- (term's our objective: 0.024000000000000028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x3 = 0)                       <-- (term's our objective: 0.02800000000000003)
 OR (x1 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x6 = 0)                       <-- (term's our objective: 0.016000000000000018)
 OR (x3 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.016000000000000014)
 OR (x3 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x4 = 0 AND x6 = 0)                       <-- (term's our objective: 0.02000000000000002)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x6 = 1 AND x4 = 0 AND x7 = 0)                       <-- (term's our objective: 0.040000000000000036)
 OR (x0 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.01200000000000001)
 OR (x2 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x7 = 0)            <-- (term's our objective: 0.008000000000000007)
 OR (x0 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.01200000000000001)
 OR (x2 = 1 AND x7 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.01200000000000001)
 OR (x3 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x7 = 0)            <-- (term's our objective: 0.016000000000000018)
 OR (x2 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.01200000000000001)
 OR (x5 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.00800000000000001)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.016000000000000018)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.5757813453674316
Best over terms:
  Our final objective: 0.04000000000000005
    Its accruacy: 0.52
    Its hamming distance: 7
  Shortest hamming distance: 0
    Its our objective: 0.016000000000000018
  Highest accruacy: 0.52
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

