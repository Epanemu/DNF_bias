Command:
python test_script.py -s smallest_subclass -d 7 -n 500 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.02
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 7.

Computed total variation: 0.364
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:48 PM: Your problem has 265 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:48 PM: Finished problem compilation (took 3.473e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 265
  constraints   = 515
  nnz(P)        = 0
  nnz(A)        = 2515
  cones (total) = 1
    : Nonnegative = 1,  numel = 515

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9970e-01  +2.5070e+02  2.50e+02  9.36e-01  2.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.8750e-01  +5.2933e+01  5.23e+01  3.81e-01  1.38e+01  3.86e-03  5.48e-01  6.11e-01  
  2  +5.3520e-01  +6.7209e+00  6.19e+00  1.22e-01  5.52e+00  1.35e-02  2.44e-01  8.97e-01  
  3  +5.0267e-01  +1.4459e+00  9.43e-01  2.86e-02  1.27e+00  2.48e-05  2.02e-01  6.04e-01  
  4  +5.0049e-01  +6.3548e-01  1.35e-01  4.19e-03  1.92e-01  4.41e-06  4.33e-02  8.08e-01  
  5  +4.9990e-01  +6.1978e-01  1.20e-01  3.24e-03  1.49e-01  8.55e-06  1.62e-02  6.90e-01  
  6  +4.9360e-01  +5.7534e-01  8.17e-02  4.93e-04  2.32e-02  4.63e-05  1.61e-03  9.17e-01  
  7  +4.8433e-01  +5.2161e-01  3.73e-02  1.93e-04  9.05e-03  2.08e-05  6.77e-04  7.11e-01  
  8  +4.7853e-01  +4.9812e-01  1.96e-02  9.00e-05  4.22e-03  1.37e-05  3.48e-04  8.66e-01  
  9  +4.7311e-01  +4.7618e-01  3.07e-03  1.22e-05  5.74e-04  2.17e-06  5.11e-05  8.73e-01  
 10  +4.7211e-01  +4.7215e-01  3.76e-05  1.47e-07  6.89e-06  2.63e-08  6.26e-07  9.89e-01  
 11  +4.7210e-01  +4.7210e-01  3.76e-07  1.47e-09  6.89e-08  2.63e-10  6.26e-09  9.90e-01  
 12  +4.7210e-01  +4.7210e-01  3.76e-09  1.47e-11  6.89e-10  2.63e-12  6.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6744ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:48 PM: Optimal value: 4.721e-01
(CVXPY) Aug 31 04:53:48 PM: Compilation took 3.473e-03 seconds
(CVXPY) Aug 31 04:53:48 PM: Solver (including time spent in interface) took 3.102e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4721
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:48 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:48 PM: Finished problem compilation (took 4.390e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 2947
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +2.5122e+02  2.51e+02  9.37e-01  2.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.8506e-01  +5.3116e+01  5.25e+01  3.85e-01  1.41e+01  3.85e-03  5.53e-01  6.10e-01  
  2  +5.3267e-01  +6.4717e+00  5.94e+00  1.17e-01  5.40e+00  1.40e-02  2.36e-01  9.27e-01  
  3  +5.0146e-01  +1.3267e+00  8.25e-01  2.54e-02  1.16e+00  2.62e-05  1.75e-01  8.09e-01  
  4  +4.9935e-01  +7.4651e-01  2.47e-01  7.43e-03  3.49e-01  1.71e-05  4.50e-02  7.99e-01  
  5  +4.8866e-01  +7.7786e-01  2.89e-01  3.02e-03  1.45e-01  8.29e-05  9.99e-03  8.56e-01  
  6  +4.7974e-01  +7.0939e-01  2.30e-01  1.57e-03  7.54e-02  1.11e-04  5.12e-03  7.41e-01  
  7  +4.6905e-01  +6.4079e-01  1.72e-01  9.40e-04  4.52e-02  9.96e-05  3.22e-03  5.91e-01  
  8  +4.4666e-01  +5.2038e-01  7.37e-02  3.37e-04  1.61e-02  4.72e-05  1.27e-03  8.96e-01  
  9  +4.3211e-01  +4.5189e-01  1.98e-02  8.63e-05  4.12e-03  1.59e-05  3.58e-04  9.90e-01  
 10  +4.2640e-01  +4.2706e-01  6.60e-04  2.83e-06  1.35e-04  4.14e-07  1.24e-05  9.68e-01  
 11  +4.2620e-01  +4.2621e-01  6.60e-06  2.83e-08  1.35e-06  4.14e-09  1.24e-07  9.90e-01  
 12  +4.2620e-01  +4.2620e-01  6.60e-08  2.83e-10  1.35e-08  4.14e-11  1.24e-09  9.90e-01  
 13  +4.2620e-01  +4.2620e-01  6.60e-10  2.83e-12  1.35e-10  4.14e-13  1.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9523ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:48 PM: Optimal value: 4.262e-01
(CVXPY) Aug 31 04:53:48 PM: Compilation took 4.390e-03 seconds
(CVXPY) Aug 31 04:53:48 PM: Solver (including time spent in interface) took 2.018e-03 seconds
Iteration: 2, Objective: 0.4262
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:48 PM: Your problem has 285 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:48 PM: Finished problem compilation (took 4.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 285
  constraints   = 535
  nnz(P)        = 0
  nnz(A)        = 3279
  cones (total) = 1
    : Nonnegative = 1,  numel = 535

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9888e-01  +2.5149e+02  2.51e+02  9.38e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.8097e-01  +5.3433e+01  5.29e+01  3.91e-01  1.42e+01  3.84e-03  5.59e-01  6.06e-01  
  2  +5.2971e-01  +6.1856e+00  5.66e+00  1.12e-01  5.23e+00  1.46e-02  2.29e-01  9.61e-01  
  3  +5.0137e-01  +1.3909e+00  8.90e-01  2.79e-02  1.29e+00  4.91e-04  1.55e-01  8.81e-01  
  4  +4.9685e-01  +8.8050e-01  3.84e-01  9.74e-03  4.66e-01  4.84e-04  3.73e-02  8.33e-01  
  5  +4.8074e-01  +7.7361e-01  2.93e-01  2.81e-03  1.37e-01  1.14e-03  8.86e-03  8.12e-01  
  6  +4.6972e-01  +7.3250e-01  2.63e-01  1.65e-03  8.01e-02  1.20e-03  5.31e-03  5.23e-01  
  7  +4.5736e-01  +6.5221e-01  1.95e-01  1.15e-03  5.56e-02  2.03e-04  3.87e-03  7.58e-01  
  8  +4.3277e-01  +5.1909e-01  8.63e-02  4.11e-04  1.98e-02  5.93e-05  1.47e-03  9.90e-01  
  9  +4.2515e-01  +4.8275e-01  5.76e-02  2.50e-04  1.21e-02  4.34e-05  8.98e-04  4.29e-01  
 10  +4.1903e-01  +4.5748e-01  3.84e-02  1.55e-04  7.50e-03  3.55e-05  5.69e-04  7.15e-01  
 11  +4.1166e-01  +4.2692e-01  1.53e-02  6.03e-05  2.91e-03  1.47e-05  2.29e-04  8.60e-01  
 12  +4.0729e-01  +4.0967e-01  2.39e-03  9.17e-06  4.42e-04  2.28e-06  3.57e-05  8.58e-01  
 13  +4.0672e-01  +4.0753e-01  8.19e-04  3.05e-06  1.47e-04  8.45e-07  1.21e-05  8.10e-01  
 14  +4.0641e-01  +4.0643e-01  1.85e-05  6.84e-08  3.29e-06  1.87e-08  2.74e-07  9.78e-01  
 15  +4.0640e-01  +4.0640e-01  1.85e-07  6.83e-10  3.29e-08  1.87e-10  2.74e-09  9.90e-01  
 16  +4.0640e-01  +4.0640e-01  1.85e-09  6.83e-12  3.29e-10  1.87e-12  2.74e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8345ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:48 PM: Optimal value: 4.064e-01
(CVXPY) Aug 31 04:53:48 PM: Compilation took 4.009e-03 seconds
(CVXPY) Aug 31 04:53:48 PM: Solver (including time spent in interface) took 3.009e-03 seconds
Iteration: 3, Objective: 0.4064
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:48 PM: Your problem has 295 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:48 PM: Finished problem compilation (took 3.063e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 295
  constraints   = 545
  nnz(P)        = 0
  nnz(A)        = 3394
  cones (total) = 1
    : Nonnegative = 1,  numel = 545

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9887e-01  +2.5138e+02  2.51e+02  9.38e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.7890e-01  +5.3387e+01  5.28e+01  3.92e-01  1.40e+01  3.85e-03  5.57e-01  6.07e-01  
  2  +5.2825e-01  +6.0252e+00  5.50e+00  1.08e-01  4.96e+00  1.48e-02  2.20e-01  9.78e-01  
  3  +5.0073e-01  +1.3347e+00  8.34e-01  2.63e-02  1.21e+00  5.92e-04  1.33e-01  9.90e-01  
  4  +4.9144e-01  +1.0310e+00  5.40e-01  8.97e-03  4.32e-01  1.12e-03  2.78e-02  8.94e-01  
  5  +4.7028e-01  +8.6532e-01  3.95e-01  2.97e-03  1.44e-01  1.74e-03  9.03e-03  7.21e-01  
  6  +4.5840e-01  +7.9889e-01  3.40e-01  1.95e-03  9.47e-02  1.06e-03  6.02e-03  6.49e-01  
  7  +4.3053e-01  +6.1277e-01  1.82e-01  9.13e-04  4.39e-02  3.45e-04  3.06e-03  6.55e-01  
  8  +3.9971e-01  +4.4665e-01  4.69e-02  2.18e-04  1.04e-02  5.18e-05  8.34e-04  7.84e-01  
  9  +3.9162e-01  +4.0866e-01  1.70e-02  7.78e-05  3.72e-03  1.75e-05  3.19e-04  6.75e-01  
 10  +3.8815e-01  +3.9298e-01  4.83e-03  2.16e-05  1.03e-03  4.69e-06  9.38e-05  8.05e-01  
 11  +3.8682e-01  +3.8721e-01  3.90e-04  1.73e-06  8.27e-05  3.51e-07  7.67e-06  9.85e-01  
 12  +3.8670e-01  +3.8671e-01  4.11e-06  1.82e-08  8.70e-07  3.69e-09  8.08e-08  9.89e-01  
 13  +3.8670e-01  +3.8670e-01  4.11e-08  1.82e-10  8.70e-09  3.69e-11  8.08e-10  9.90e-01  
 14  +3.8670e-01  +3.8670e-01  4.11e-10  1.82e-12  8.70e-11  3.69e-13  8.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8174ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:48 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:48 PM: Optimal value: 3.867e-01
(CVXPY) Aug 31 04:53:48 PM: Compilation took 3.063e-03 seconds
(CVXPY) Aug 31 04:53:48 PM: Solver (including time spent in interface) took 2.992e-03 seconds
Iteration: 4, Objective: 0.3867
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:49 PM: Your problem has 305 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Finished problem compilation (took 4.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 305
  constraints   = 555
  nnz(P)        = 0
  nnz(A)        = 3525
  cones (total) = 1
    : Nonnegative = 1,  numel = 555

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9879e-01  +2.5141e+02  2.51e+02  9.39e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.7715e-01  +5.3508e+01  5.29e+01  3.95e-01  1.39e+01  3.85e-03  5.59e-01  6.05e-01  
  2  +5.2667e-01  +5.9238e+00  5.40e+00  1.06e-01  4.85e+00  1.51e-02  2.18e-01  9.90e-01  
  3  +5.0122e-01  +1.3599e+00  8.59e-01  2.74e-02  1.27e+00  7.03e-04  1.14e-01  9.90e-01  
  4  +4.8625e-01  +1.2057e+00  7.19e-01  7.74e-03  3.75e-01  1.92e-03  2.21e-02  9.35e-01  
  5  +4.6702e-01  +9.5185e-01  4.85e-01  3.37e-03  1.63e-01  1.57e-03  9.95e-03  6.44e-01  
  6  +4.5324e-01  +8.7060e-01  4.17e-01  2.18e-03  1.05e-01  1.47e-03  6.60e-03  4.22e-01  
  7  +4.3244e-01  +6.5050e-01  2.18e-01  1.16e-03  5.53e-02  1.35e-05  3.79e-03  9.04e-01  
  8  +4.0105e-01  +4.7719e-01  7.61e-02  3.54e-04  1.68e-02  1.13e-05  1.27e-03  7.00e-01  
  9  +3.9029e-01  +4.3134e-01  4.10e-02  1.79e-04  8.54e-03  1.36e-05  6.75e-04  5.84e-01  
 10  +3.8306e-01  +4.0118e-01  1.81e-02  7.73e-05  3.69e-03  1.22e-05  3.06e-04  7.96e-01  
 11  +3.8188e-01  +3.9632e-01  1.44e-02  6.09e-05  2.90e-03  1.07e-05  2.44e-04  3.67e-01  
 12  +3.8061e-01  +3.9081e-01  1.02e-02  4.21e-05  2.01e-03  9.68e-06  1.69e-04  8.43e-01  
 13  +3.7721e-01  +3.7804e-01  8.35e-04  3.39e-06  1.62e-04  7.72e-07  1.41e-05  9.21e-01  
 14  +3.7690e-01  +3.7691e-01  9.12e-06  3.70e-08  1.76e-06  8.38e-09  1.55e-07  9.89e-01  
 15  +3.7690e-01  +3.7690e-01  9.12e-08  3.70e-10  1.76e-08  8.38e-11  1.55e-09  9.90e-01  
 16  +3.7690e-01  +3.7690e-01  9.12e-10  3.70e-12  1.76e-10  8.39e-13  1.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.2691ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:49 PM: Optimal value: 3.769e-01
(CVXPY) Aug 31 04:53:49 PM: Compilation took 4.005e-03 seconds
(CVXPY) Aug 31 04:53:49 PM: Solver (including time spent in interface) took 4.110e-03 seconds
Iteration: 5, Objective: 0.3769
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:49 PM: Your problem has 315 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 315
  constraints   = 565
  nnz(P)        = 0
  nnz(A)        = 3666
  cones (total) = 1
    : Nonnegative = 1,  numel = 565

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9879e-01  +2.5146e+02  2.51e+02  9.39e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.7644e-01  +5.3508e+01  5.29e+01  3.97e-01  1.37e+01  3.86e-03  5.58e-01  6.06e-01  
  2  +5.2628e-01  +5.9347e+00  5.41e+00  1.06e-01  4.75e+00  1.51e-02  2.17e-01  9.90e-01  
  3  +5.0186e-01  +1.3868e+00  8.85e-01  2.83e-02  1.31e+00  8.64e-04  1.06e-01  9.59e-01  
  4  +4.8905e-01  +1.2706e+00  7.82e-01  8.68e-03  4.20e-01  2.21e-03  2.45e-02  8.77e-01  
  5  +4.6308e-01  +9.4059e-01  4.78e-01  3.01e-03  1.45e-01  2.22e-03  8.78e-03  6.63e-01  
  6  +4.4725e-01  +8.5581e-01  4.09e-01  2.01e-03  9.69e-02  2.04e-03  6.04e-03  3.76e-01  
  7  +4.2980e-01  +6.8515e-01  2.55e-01  1.34e-03  6.39e-02  3.37e-04  4.33e-03  7.02e-01  
  8  +3.9577e-01  +4.8757e-01  9.18e-02  4.28e-04  2.03e-02  9.07e-05  1.54e-03  6.96e-01  
  9  +3.8438e-01  +4.3531e-01  5.09e-02  2.29e-04  1.09e-02  4.96e-05  8.60e-04  5.98e-01  
 10  +3.7471e-01  +3.9144e-01  1.67e-02  7.36e-05  3.49e-03  1.61e-05  2.91e-04  7.47e-01  
 11  +3.7046e-01  +3.7430e-01  3.84e-03  1.60e-05  7.62e-04  3.77e-06  6.71e-05  9.32e-01  
 12  +3.6912e-01  +3.6917e-01  5.33e-05  2.21e-07  1.05e-05  5.01e-08  9.41e-07  9.87e-01  
 13  +3.6910e-01  +3.6910e-01  5.34e-07  2.21e-09  1.05e-07  5.01e-10  9.42e-09  9.90e-01  
 14  +3.6910e-01  +3.6910e-01  5.34e-09  2.21e-11  1.05e-09  5.01e-12  9.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.1098ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:49 PM: Optimal value: 3.691e-01
(CVXPY) Aug 31 04:53:49 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 31 04:53:49 PM: Solver (including time spent in interface) took 4.088e-03 seconds
Iteration: 6, Objective: 0.3691
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:49 PM: Your problem has 325 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Finished problem compilation (took 3.014e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 325
  constraints   = 575
  nnz(P)        = 0
  nnz(A)        = 3750
  cones (total) = 1
    : Nonnegative = 1,  numel = 575

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9870e-01  +2.5141e+02  2.51e+02  9.40e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.7353e-01  +5.3627e+01  5.31e+01  3.99e-01  1.36e+01  3.86e-03  5.59e-01  6.04e-01  
  2  +5.2459e-01  +6.0078e+00  5.48e+00  1.06e-01  4.71e+00  1.54e-02  2.18e-01  9.90e-01  
  3  +5.0357e-01  +1.4429e+00  9.39e-01  2.77e-02  1.30e+00  1.68e-03  8.38e-02  8.74e-01  
  4  +4.9746e-01  +1.4883e+00  9.91e-01  1.38e-02  6.64e-01  3.18e-03  3.74e-02  6.26e-01  
  5  +4.7728e-01  +1.1470e+00  6.70e-01  5.19e-03  2.51e-01  3.29e-03  1.45e-02  6.67e-01  
  6  +4.5935e-01  +9.9896e-01  5.40e-01  3.13e-03  1.51e-01  2.79e-03  8.93e-03  4.89e-01  
  7  +4.4226e-01  +8.9251e-01  4.50e-01  2.11e-03  1.01e-01  2.51e-03  6.25e-03  3.36e-01  
  8  +4.1931e-01  +6.6825e-01  2.49e-01  1.32e-03  6.24e-02  1.99e-05  4.37e-03  8.36e-01  
  9  +3.8158e-01  +4.6515e-01  8.36e-02  3.78e-04  1.77e-02  1.27e-05  1.39e-03  7.12e-01  
 10  +3.7842e-01  +4.5340e-01  7.50e-02  3.32e-04  1.56e-02  1.98e-05  1.23e-03  2.30e-01  
 11  +3.6338e-01  +3.9363e-01  3.02e-02  1.26e-04  5.94e-03  1.42e-05  5.04e-04  7.08e-01  
 12  +3.5434e-01  +3.5712e-01  2.78e-03  1.14e-05  5.35e-04  1.29e-06  4.81e-05  9.11e-01  
 13  +3.5342e-01  +3.5347e-01  5.32e-05  2.18e-07  1.02e-05  2.37e-08  9.31e-07  9.81e-01  
 14  +3.5340e-01  +3.5340e-01  5.33e-07  2.18e-09  1.03e-07  2.37e-10  9.32e-09  9.90e-01  
 15  +3.5340e-01  +3.5340e-01  5.33e-09  2.18e-11  1.03e-09  2.37e-12  9.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.3854ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:49 PM: Optimal value: 3.534e-01
(CVXPY) Aug 31 04:53:49 PM: Compilation took 3.014e-03 seconds
(CVXPY) Aug 31 04:53:49 PM: Solver (including time spent in interface) took 5.097e-03 seconds
Iteration: 7, Objective: 0.3534
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:49 PM: Your problem has 335 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Finished problem compilation (took 3.540e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 335
  constraints   = 585
  nnz(P)        = 0
  nnz(A)        = 3821
  cones (total) = 1
    : Nonnegative = 1,  numel = 585

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5146e+02  2.51e+02  9.40e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.7218e-01  +5.3669e+01  5.31e+01  4.00e-01  1.34e+01  3.87e-03  5.59e-01  6.04e-01  
  2  +5.2391e-01  +6.0493e+00  5.53e+00  1.06e-01  4.66e+00  1.55e-02  2.17e-01  9.90e-01  
  3  +5.0408e-01  +1.4840e+00  9.80e-01  2.73e-02  1.28e+00  2.07e-03  7.86e-02  8.34e-01  
  4  +4.9882e-01  +1.5022e+00  1.00e+00  1.43e-02  6.88e-01  3.59e-03  3.83e-02  5.62e-01  
  5  +4.8060e-01  +1.2327e+00  7.52e-01  5.95e-03  2.87e-01  3.94e-03  1.63e-02  6.57e-01  
  6  +4.5675e-01  +1.0483e+00  5.92e-01  3.10e-03  1.48e-01  3.67e-03  8.74e-03  5.59e-01  
  7  +4.2414e-01  +7.3508e-01  3.11e-01  1.62e-03  7.62e-02  3.33e-05  5.08e-03  7.73e-01  
  8  +3.9332e-01  +5.5643e-01  1.63e-01  7.86e-04  3.67e-02  3.30e-05  2.72e-03  5.27e-01  
  9  +3.7869e-01  +4.8640e-01  1.08e-01  4.98e-04  2.32e-02  2.79e-05  1.82e-03  3.81e-01  
 10  +3.7137e-01  +4.5317e-01  8.18e-02  3.68e-04  1.72e-02  2.57e-05  1.39e-03  2.95e-01  
 11  +3.5511e-01  +3.7880e-01  2.37e-02  1.03e-04  4.81e-03  1.72e-05  4.22e-04  8.91e-01  
 12  +3.4915e-01  +3.5409e-01  4.94e-03  2.12e-05  9.88e-04  3.60e-06  9.06e-05  8.03e-01  
 13  +3.4770e-01  +3.4823e-01  5.29e-04  2.25e-06  1.05e-04  4.51e-07  9.81e-06  9.90e-01  
 14  +3.4750e-01  +3.4751e-01  6.97e-06  2.96e-08  1.38e-06  5.91e-09  1.30e-07  9.87e-01  
 15  +3.4750e-01  +3.4750e-01  6.97e-08  2.96e-10  1.38e-08  5.91e-11  1.30e-09  9.90e-01  
 16  +3.4750e-01  +3.4750e-01  6.97e-10  2.96e-12  1.38e-10  5.92e-13  1.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:49 PM: Optimal value: 3.475e-01
(CVXPY) Aug 31 04:53:49 PM: Compilation took 3.540e-03 seconds
(CVXPY) Aug 31 04:53:49 PM: Solver (including time spent in interface) took 4.996e-03 seconds
Iteration: 8, Objective: 0.3475
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:49 PM: Your problem has 345 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Finished problem compilation (took 4.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 345
  constraints   = 595
  nnz(P)        = 0
  nnz(A)        = 3938
  cones (total) = 1
    : Nonnegative = 1,  numel = 595

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5146e+02  2.51e+02  9.41e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.7162e-01  +5.3677e+01  5.31e+01  4.02e-01  1.32e+01  3.87e-03  5.59e-01  6.04e-01  
  2  +5.2318e-01  +6.0572e+00  5.53e+00  1.06e-01  4.56e+00  1.55e-02  2.16e-01  9.90e-01  
  3  +5.0417e-01  +1.4847e+00  9.80e-01  2.59e-02  1.21e+00  2.33e-03  7.32e-02  8.16e-01  
  4  +4.9910e-01  +1.4955e+00  9.96e-01  1.40e-02  6.68e-01  3.89e-03  3.72e-02  5.35e-01  
  5  +4.8274e-01  +1.2940e+00  8.11e-01  6.59e-03  3.16e-01  4.31e-03  1.78e-02  6.20e-01  
  6  +4.6063e-01  +1.0979e+00  6.37e-01  3.70e-03  1.77e-01  3.79e-03  1.03e-02  5.03e-01  
  7  +4.4517e-01  +9.8437e-01  5.39e-01  2.74e-03  1.30e-01  3.01e-03  7.93e-03  3.12e-01  
  8  +4.0915e-01  +6.6523e-01  2.56e-01  1.37e-03  6.39e-02  2.49e-05  4.57e-03  8.32e-01  
  9  +3.7584e-01  +4.7800e-01  1.02e-01  4.96e-04  2.29e-02  2.25e-05  1.85e-03  6.63e-01  
 10  +3.6600e-01  +4.3539e-01  6.94e-02  3.20e-04  1.49e-02  2.65e-05  1.24e-03  4.81e-01  
 11  +3.4829e-01  +3.5629e-01  7.99e-03  3.56e-05  1.65e-03  6.58e-06  1.51e-04  9.89e-01  
 12  +3.4757e-01  +3.5338e-01  5.81e-03  2.53e-05  1.17e-03  4.96e-06  1.08e-04  4.74e-01  
 13  +3.4671e-01  +3.5009e-01  3.39e-03  1.45e-05  6.71e-04  2.92e-06  6.29e-05  4.64e-01  
 14  +3.4568e-01  +3.4615e-01  4.65e-04  1.99e-06  9.21e-05  4.10e-07  8.73e-06  9.90e-01  
 15  +3.4550e-01  +3.4551e-01  5.21e-06  2.23e-08  1.03e-06  4.55e-09  9.79e-08  9.89e-01  
 16  +3.4550e-01  +3.4550e-01  5.21e-08  2.23e-10  1.03e-08  4.55e-11  9.80e-10  9.90e-01  
 17  +3.4550e-01  +3.4550e-01  5.21e-10  2.23e-12  1.03e-10  4.55e-13  9.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8651ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:49 PM: Optimal value: 3.455e-01
(CVXPY) Aug 31 04:53:49 PM: Compilation took 4.003e-03 seconds
(CVXPY) Aug 31 04:53:49 PM: Solver (including time spent in interface) took 5.504e-03 seconds
Iteration: 9, Objective: 0.3455
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:49 PM: Your problem has 355 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Finished problem compilation (took 2.995e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 355
  constraints   = 605
  nnz(P)        = 0
  nnz(A)        = 4002
  cones (total) = 1
    : Nonnegative = 1,  numel = 605

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9865e-01  +2.5146e+02  2.51e+02  9.41e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.6910e-01  +5.3713e+01  5.31e+01  4.02e-01  1.31e+01  3.88e-03  5.58e-01  6.05e-01  
  2  +5.2201e-01  +6.1176e+00  5.60e+00  1.05e-01  4.49e+00  1.57e-02  2.14e-01  9.90e-01  
  3  +5.0385e-01  +1.4336e+00  9.30e-01  2.26e-02  1.06e+00  2.58e-03  6.21e-02  8.08e-01  
  4  +4.9613e-01  +1.4994e+00  1.00e+00  1.09e-02  5.23e-01  4.92e-03  2.85e-02  6.36e-01  
  5  +4.7288e-01  +1.1970e+00  7.24e-01  5.06e-03  2.41e-01  3.99e-03  1.37e-02  6.53e-01  
  6  +4.5272e-01  +1.0602e+00  6.08e-01  3.29e-03  1.56e-01  3.21e-03  9.24e-03  4.54e-01  
  7  +4.2566e-01  +7.9065e-01  3.65e-01  2.28e-03  1.05e-01  2.48e-05  7.23e-03  7.08e-01  
  8  +3.7954e-01  +5.0473e-01  1.25e-01  6.25e-04  2.86e-02  2.24e-05  2.24e-03  7.38e-01  
  9  +3.6577e-01  +4.4175e-01  7.60e-02  3.63e-04  1.67e-02  2.71e-05  1.37e-03  5.26e-01  
 10  +3.5785e-01  +4.0581e-01  4.80e-02  2.25e-04  1.03e-02  2.72e-05  8.91e-04  5.94e-01  
 11  +3.4586e-01  +3.5260e-01  6.74e-03  3.08e-05  1.41e-03  4.78e-06  1.33e-04  9.35e-01  
 12  +3.4541e-01  +3.5071e-01  5.31e-03  2.37e-05  1.09e-03  4.02e-06  1.03e-04  4.36e-01  
 13  +3.4406e-01  +3.4529e-01  1.24e-03  5.48e-06  2.51e-04  1.03e-06  2.44e-05  9.62e-01  
 14  +3.4361e-01  +3.4363e-01  1.87e-05  8.24e-08  3.78e-06  1.50e-08  3.69e-07  9.88e-01  
 15  +3.4360e-01  +3.4360e-01  1.87e-07  8.24e-10  3.78e-08  1.50e-10  3.70e-09  9.90e-01  
 16  +3.4360e-01  +3.4360e-01  1.87e-09  8.25e-12  3.78e-10  1.50e-12  3.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2157ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:49 PM: Optimal value: 3.436e-01
(CVXPY) Aug 31 04:53:49 PM: Compilation took 2.995e-03 seconds
(CVXPY) Aug 31 04:53:49 PM: Solver (including time spent in interface) took 5.005e-03 seconds
Iteration: 10, Objective: 0.3436
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:49 PM: Your problem has 365 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Finished problem compilation (took 3.355e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 365
  constraints   = 615
  nnz(P)        = 0
  nnz(A)        = 4088
  cones (total) = 1
    : Nonnegative = 1,  numel = 615

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9862e-01  +2.5151e+02  2.51e+02  9.42e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.6808e-01  +5.3775e+01  5.32e+01  4.05e-01  1.29e+01  3.88e-03  5.58e-01  6.04e-01  
  2  +5.2125e-01  +6.1454e+00  5.62e+00  1.05e-01  4.43e+00  1.58e-02  2.14e-01  9.90e-01  
  3  +5.0398e-01  +1.5028e+00  9.99e-01  2.33e-02  1.09e+00  2.94e-03  6.31e-02  7.78e-01  
  4  +4.9444e-01  +1.5742e+00  1.08e+00  1.07e-02  5.07e-01  5.60e-03  2.78e-02  6.73e-01  
  5  +4.7517e-01  +1.2684e+00  7.93e-01  6.01e-03  2.84e-01  3.89e-03  1.63e-02  5.30e-01  
  6  +4.4977e-01  +1.0558e+00  6.06e-01  3.33e-03  1.56e-01  3.17e-03  9.46e-03  5.12e-01  
  7  +4.2951e-01  +8.1008e-01  3.81e-01  2.48e-03  1.14e-01  4.24e-04  7.81e-03  5.06e-01  
  8  +4.1441e-01  +7.2358e-01  3.09e-01  1.83e-03  8.38e-02  3.27e-04  5.97e-03  3.65e-01  
  9  +3.8806e-01  +5.7412e-01  1.86e-01  9.72e-04  4.42e-02  1.63e-04  3.41e-03  7.39e-01  
 10  +3.6490e-01  +4.4808e-01  8.32e-02  4.03e-04  1.83e-02  7.00e-05  1.55e-03  6.14e-01  
 11  +3.5961e-01  +4.2363e-01  6.40e-02  3.03e-04  1.38e-02  5.45e-05  1.19e-03  3.01e-01  
 12  +3.4469e-01  +3.5350e-01  8.81e-03  4.03e-05  1.83e-03  6.94e-06  1.72e-04  9.52e-01  
 13  +3.4388e-01  +3.5016e-01  6.28e-03  2.80e-05  1.27e-03  5.17e-06  1.21e-04  5.16e-01  
 14  +3.4268e-01  +3.4550e-01  2.82e-03  1.24e-05  5.62e-04  2.32e-06  5.47e-05  6.05e-01  
 15  +3.4174e-01  +3.4187e-01  1.22e-04  5.36e-07  2.42e-05  9.91e-08  2.40e-06  9.74e-01  
 16  +3.4170e-01  +3.4170e-01  1.23e-06  5.42e-09  2.45e-07  1.00e-09  2.43e-08  9.90e-01  
 17  +3.4170e-01  +3.4170e-01  1.23e-08  5.42e-11  2.45e-09  1.00e-11  2.43e-10  9.90e-01  
 18  +3.4170e-01  +3.4170e-01  1.23e-10  5.43e-13  2.45e-11  1.00e-13  2.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0648ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:49 PM: Optimal value: 3.417e-01
(CVXPY) Aug 31 04:53:49 PM: Compilation took 3.355e-03 seconds
(CVXPY) Aug 31 04:53:49 PM: Solver (including time spent in interface) took 6.088e-03 seconds
Iteration: 11, Objective: 0.3417
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:49 PM: Your problem has 375 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Finished problem compilation (took 2.842e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 375
  constraints   = 625
  nnz(P)        = 0
  nnz(A)        = 4156
  cones (total) = 1
    : Nonnegative = 1,  numel = 625

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9854e-01  +2.5151e+02  2.51e+02  9.42e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.6521e-01  +5.3895e+01  5.33e+01  4.07e-01  1.28e+01  3.88e-03  5.59e-01  6.03e-01  
  2  +5.1978e-01  +6.2294e+00  5.71e+00  1.04e-01  4.39e+00  1.60e-02  2.14e-01  9.90e-01  
  3  +5.0338e-01  +1.5204e+00  1.02e+00  2.19e-02  1.02e+00  3.35e-03  5.83e-02  7.65e-01  
  4  +4.9335e-01  +1.5827e+00  1.09e+00  1.11e-02  5.26e-01  5.68e-03  2.87e-02  6.31e-01  
  5  +4.7571e-01  +1.3346e+00  8.59e-01  6.62e-03  3.12e-01  4.52e-03  1.77e-02  4.86e-01  
  6  +4.5305e-01  +1.1480e+00  6.95e-01  4.06e-03  1.90e-01  3.91e-03  1.14e-02  4.26e-01  
  7  +4.2232e-01  +8.2786e-01  4.06e-01  2.55e-03  1.17e-01  3.22e-05  8.09e-03  7.58e-01  
  8  +3.8204e-01  +5.4267e-01  1.61e-01  8.65e-04  3.90e-02  2.29e-05  3.07e-03  6.58e-01  
  9  +3.6490e-01  +4.6128e-01  9.64e-02  4.83e-04  2.17e-02  2.98e-05  1.83e-03  5.39e-01  
 10  +3.5832e-01  +4.3098e-01  7.27e-02  3.54e-04  1.60e-02  2.65e-05  1.38e-03  3.19e-01  
 11  +3.4376e-01  +3.6344e-01  1.97e-02  9.25e-05  4.16e-03  9.27e-06  3.91e-04  7.90e-01  
 12  +3.3940e-01  +3.4405e-01  4.65e-03  2.16e-05  9.69e-04  2.36e-06  9.47e-05  7.86e-01  
 13  +3.3825e-01  +3.3927e-01  1.02e-03  4.65e-06  2.09e-04  5.95e-07  2.10e-05  8.44e-01  
 14  +3.3791e-01  +3.3794e-01  2.93e-05  1.33e-07  5.94e-06  1.74e-08  6.06e-07  9.75e-01  
 15  +3.3790e-01  +3.3790e-01  2.93e-07  1.33e-09  5.94e-08  1.74e-10  6.07e-09  9.90e-01  
 16  +3.3790e-01  +3.3790e-01  2.93e-09  1.33e-11  5.95e-10  1.75e-12  6.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.566ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:49 PM: Optimal value: 3.379e-01
(CVXPY) Aug 31 04:53:49 PM: Compilation took 2.842e-03 seconds
(CVXPY) Aug 31 04:53:49 PM: Solver (including time spent in interface) took 5.927e-03 seconds
Iteration: 12, Objective: 0.3379
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:49 PM: Your problem has 384 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Finished problem compilation (took 4.085e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 384
  constraints   = 634
  nnz(P)        = 0
  nnz(A)        = 4212
  cones (total) = 1
    : Nonnegative = 1,  numel = 634

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9828e-01  +2.5175e+02  2.51e+02  9.43e-01  2.21e+01  1.00e+00  1.02e+00   ------   
  1  +5.6026e-01  +5.4160e+01  5.36e+01  4.10e-01  1.28e+01  3.88e-03  5.63e-01  6.00e-01  
  2  +5.1596e-01  +6.3724e+00  5.86e+00  1.04e-01  4.38e+00  1.65e-02  2.16e-01  9.90e-01  
  3  +5.0076e-01  +1.6364e+00  1.14e+00  2.12e-02  9.89e-01  4.31e-03  5.52e-02  7.67e-01  
  4  +4.8510e-01  +1.5685e+00  1.08e+00  1.04e-02  4.93e-01  6.41e-03  2.70e-02  5.97e-01  
  5  +4.5510e-01  +1.1505e+00  6.95e-01  4.93e-03  2.29e-01  3.21e-03  1.37e-02  6.67e-01  
  6  +4.2701e-01  +9.3136e-01  5.04e-01  3.07e-03  1.41e-01  1.62e-03  9.14e-03  5.26e-01  
  7  +3.8078e-01  +5.4979e-01  1.69e-01  9.73e-04  4.36e-02  2.36e-04  3.43e-03  7.28e-01  
  8  +3.6832e-01  +4.8993e-01  1.22e-01  6.57e-04  2.94e-02  1.64e-04  2.42e-03  3.92e-01  
  9  +3.6242e-01  +4.6191e-01  9.95e-02  5.21e-04  2.33e-02  1.31e-04  1.97e-03  2.54e-01  
 10  +3.5014e-01  +4.0228e-01  5.21e-02  2.64e-04  1.18e-02  4.18e-05  1.07e-03  9.90e-01  
 11  +3.4006e-01  +3.5433e-01  1.43e-02  6.97e-05  3.11e-03  1.14e-05  3.00e-04  7.66e-01  
 12  +3.3715e-01  +3.4085e-01  3.70e-03  1.77e-05  7.88e-04  2.96e-06  7.91e-05  7.92e-01  
 13  +3.3637e-01  +3.3750e-01  1.12e-03  5.32e-06  2.37e-04  8.87e-07  2.43e-05  8.41e-01  
 14  +3.3601e-01  +3.3605e-01  3.73e-05  1.75e-07  7.79e-06  2.87e-08  8.10e-07  9.68e-01  
 15  +3.3600e-01  +3.3600e-01  3.73e-07  1.75e-09  7.80e-08  2.87e-10  8.12e-09  9.90e-01  
 16  +3.3600e-01  +3.3600e-01  3.74e-09  1.76e-11  7.81e-10  2.87e-12  8.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.1567ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:49 PM: Optimal value: 3.360e-01
(CVXPY) Aug 31 04:53:49 PM: Compilation took 4.085e-03 seconds
(CVXPY) Aug 31 04:53:49 PM: Solver (including time spent in interface) took 7.025e-03 seconds
Iteration: 13, Objective: 0.3360
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:49 PM: Your problem has 394 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:49 PM: Finished problem compilation (took 3.982e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 394
  constraints   = 644
  nnz(P)        = 0
  nnz(A)        = 4304
  cones (total) = 1
    : Nonnegative = 1,  numel = 644

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9823e-01  +2.5180e+02  2.51e+02  9.43e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.5840e-01  +5.4359e+01  5.38e+01  4.12e-01  1.27e+01  3.88e-03  5.65e-01  5.98e-01  
  2  +5.1373e-01  +6.4138e+00  5.90e+00  1.04e-01  4.35e+00  1.67e-02  2.19e-01  9.90e-01  
  3  +4.9845e-01  +1.6477e+00  1.15e+00  2.00e-02  9.29e-01  4.65e-03  5.25e-02  7.93e-01  
  4  +4.7854e-01  +1.5107e+00  1.03e+00  9.60e-03  4.48e-01  6.28e-03  2.53e-02  6.09e-01  
  5  +4.4830e-01  +1.1188e+00  6.71e-01  4.81e-03  2.21e-01  2.87e-03  1.38e-02  6.51e-01  
  6  +4.0995e-01  +7.9989e-01  3.90e-01  2.40e-03  1.08e-01  4.85e-04  7.59e-03  7.66e-01  
  7  +3.7875e-01  +5.6839e-01  1.90e-01  1.10e-03  4.89e-02  2.02e-04  3.90e-03  5.75e-01  
  8  +3.6138e-01  +4.6666e-01  1.05e-01  5.78e-04  2.56e-02  1.09e-04  2.21e-03  4.98e-01  
  9  +3.5538e-01  +4.3441e-01  7.90e-02  4.19e-04  1.86e-02  8.14e-05  1.64e-03  3.55e-01  
 10  +3.4246e-01  +3.6427e-01  2.18e-02  1.11e-04  4.91e-03  1.77e-05  4.71e-04  9.90e-01  
 11  +3.3777e-01  +3.4329e-01  5.51e-03  2.73e-05  1.21e-03  4.31e-06  1.21e-04  8.78e-01  
 12  +3.3651e-01  +3.3805e-01  1.54e-03  7.50e-06  3.31e-04  1.16e-06  3.44e-05  8.17e-01  
 13  +3.3604e-01  +3.3614e-01  1.06e-04  5.07e-07  2.24e-05  7.74e-08  2.38e-06  9.80e-01  
 14  +3.3600e-01  +3.3600e-01  1.11e-06  5.32e-09  2.35e-07  8.12e-10  2.50e-08  9.90e-01  
 15  +3.3600e-01  +3.3600e-01  1.11e-08  5.33e-11  2.35e-09  8.13e-12  2.50e-10  9.90e-01  
 16  +3.3600e-01  +3.3600e-01  1.11e-10  5.33e-13  2.35e-11  8.15e-14  2.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2084ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:49 PM: Optimal value: 3.360e-01
(CVXPY) Aug 31 04:53:49 PM: Compilation took 3.982e-03 seconds
(CVXPY) Aug 31 04:53:49 PM: Solver (including time spent in interface) took 5.134e-03 seconds
Iteration: 14, Objective: 0.3360
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:50 PM: Your problem has 397 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:50 PM: Finished problem compilation (took 2.986e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 397
  constraints   = 647
  nnz(P)        = 0
  nnz(A)        = 4323
  cones (total) = 1
    : Nonnegative = 1,  numel = 647

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9822e-01  +2.5180e+02  2.51e+02  9.43e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.5730e-01  +5.4443e+01  5.39e+01  4.13e-01  1.27e+01  3.88e-03  5.65e-01  5.97e-01  
  2  +5.1303e-01  +6.4593e+00  5.95e+00  1.04e-01  4.34e+00  1.69e-02  2.19e-01  9.90e-01  
  3  +4.9781e-01  +1.6902e+00  1.19e+00  2.03e-02  9.39e-01  4.89e-03  5.29e-02  7.87e-01  
  4  +4.7937e-01  +1.5715e+00  1.09e+00  1.05e-02  4.89e-01  6.38e-03  2.75e-02  5.70e-01  
  5  +4.4891e-01  +1.1782e+00  7.29e-01  5.22e-03  2.39e-01  3.42e-03  1.48e-02  6.32e-01  
  6  +4.2497e-01  +9.5649e-01  5.32e-01  3.52e-03  1.59e-01  1.59e-03  1.07e-02  4.72e-01  
  7  +3.8301e-01  +5.9221e-01  2.09e-01  1.25e-03  5.57e-02  4.11e-04  4.38e-03  6.50e-01  
  8  +3.6631e-01  +5.0566e-01  1.39e-01  7.79e-04  3.45e-02  2.26e-04  2.90e-03  5.43e-01  
  9  +3.5130e-01  +4.2092e-01  6.96e-02  3.73e-04  1.65e-02  1.00e-04  1.49e-03  6.10e-01  
 10  +3.4112e-01  +3.6514e-01  2.40e-02  1.27e-04  5.57e-03  1.55e-05  5.48e-04  9.90e-01  
 11  +3.3638e-01  +3.4370e-01  7.33e-03  3.71e-05  1.63e-03  5.10e-06  1.66e-04  7.82e-01  
 12  +3.3474e-01  +3.3674e-01  2.00e-03  9.90e-06  4.36e-04  1.38e-06  4.60e-05  8.10e-01  
 13  +3.3420e-01  +3.3450e-01  3.03e-04  1.48e-06  6.51e-05  2.16e-07  7.02e-06  9.63e-01  
 14  +3.3410e-01  +3.3411e-01  3.83e-06  1.86e-08  8.21e-07  2.70e-09  8.88e-08  9.87e-01  
 15  +3.3410e-01  +3.3410e-01  3.83e-08  1.87e-10  8.21e-09  2.70e-11  8.89e-10  9.90e-01  
 16  +3.3410e-01  +3.3410e-01  3.83e-10  1.87e-12  8.22e-11  2.71e-13  8.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.3054ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:50 PM: Optimal value: 3.341e-01
(CVXPY) Aug 31 04:53:50 PM: Compilation took 2.986e-03 seconds
(CVXPY) Aug 31 04:53:50 PM: Solver (including time spent in interface) took 5.348e-03 seconds
Iteration: 15, Objective: 0.3341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:50 PM: Your problem has 405 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:50 PM: Finished problem compilation (took 3.260e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 405
  constraints   = 655
  nnz(P)        = 0
  nnz(A)        = 4393
  cones (total) = 1
    : Nonnegative = 1,  numel = 655

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9811e-01  +2.5176e+02  2.51e+02  9.44e-01  2.18e+01  1.00e+00  1.02e+00   ------   
  1  +5.5530e-01  +5.4509e+01  5.40e+01  4.15e-01  1.26e+01  3.88e-03  5.67e-01  5.96e-01  
  2  +5.1219e-01  +6.5196e+00  6.01e+00  1.05e-01  4.33e+00  1.70e-02  2.19e-01  9.90e-01  
  3  +4.9673e-01  +1.6780e+00  1.18e+00  1.97e-02  9.08e-01  4.99e-03  5.10e-02  7.94e-01  
  4  +4.7425e-01  +1.5529e+00  1.08e+00  9.59e-03  4.46e-01  6.62e-03  2.50e-02  6.18e-01  
  5  +4.4237e-01  +1.1862e+00  7.44e-01  4.88e-03  2.24e-01  4.04e-03  1.37e-02  5.93e-01  
  6  +4.1055e-01  +8.4527e-01  4.35e-01  3.10e-03  1.38e-01  3.25e-05  1.00e-02  7.53e-01  
  7  +3.7356e-01  +5.4847e-01  1.75e-01  1.07e-03  4.72e-02  2.37e-05  3.89e-03  6.53e-01  
  8  +3.5853e-01  +4.6834e-01  1.10e-01  6.26e-04  2.75e-02  3.07e-05  2.41e-03  5.26e-01  
  9  +3.5381e-01  +4.4347e-01  8.97e-02  4.97e-04  2.19e-02  2.93e-05  1.95e-03  2.64e-01  
 10  +3.4235e-01  +3.8083e-01  3.85e-02  2.06e-04  9.04e-03  2.88e-05  8.66e-04  9.90e-01  
 11  +3.3427e-01  +3.4160e-01  7.33e-03  3.82e-05  1.67e-03  5.23e-06  1.71e-04  8.29e-01  
 12  +3.3314e-01  +3.3634e-01  3.20e-03  1.63e-05  7.14e-04  2.29e-06  7.51e-05  6.64e-01  
 13  +3.3245e-01  +3.3326e-01  8.12e-04  4.06e-06  1.78e-04  5.77e-07  1.93e-05  7.78e-01  
 14  +3.3221e-01  +3.3225e-01  4.18e-05  2.07e-07  9.08e-06  2.94e-08  9.98e-07  9.63e-01  
 15  +3.3220e-01  +3.3220e-01  4.24e-07  2.10e-09  9.20e-08  2.97e-10  1.01e-08  9.90e-01  
 16  +3.3220e-01  +3.3220e-01  4.24e-09  2.10e-11  9.21e-10  2.98e-12  1.01e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.5455ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:50 PM: Optimal value: 3.322e-01
(CVXPY) Aug 31 04:53:50 PM: Compilation took 3.260e-03 seconds
(CVXPY) Aug 31 04:53:50 PM: Solver (including time spent in interface) took 6.122e-03 seconds
Iteration: 16, Objective: 0.3322
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:50 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:50 PM: Finished problem compilation (took 2.963e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 4441
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9810e-01  +2.5175e+02  2.51e+02  9.44e-01  2.17e+01  1.00e+00  1.02e+00   ------   
  1  +5.5447e-01  +5.4498e+01  5.39e+01  4.16e-01  1.26e+01  3.88e-03  5.67e-01  5.96e-01  
  2  +5.1151e-01  +6.5289e+00  6.02e+00  1.04e-01  4.31e+00  1.70e-02  2.20e-01  9.90e-01  
  3  +4.9565e-01  +1.6723e+00  1.18e+00  1.92e-02  8.85e-01  5.06e-03  5.00e-02  8.05e-01  
  4  +4.7179e-01  +1.5628e+00  1.09e+00  9.58e-03  4.43e-01  6.51e-03  2.51e-02  6.27e-01  
  5  +4.4503e-01  +1.2854e+00  8.40e-01  5.57e-03  2.55e-01  4.72e-03  1.55e-02  5.12e-01  
  6  +4.1073e-01  +8.7816e-01  4.67e-01  3.28e-03  1.46e-01  3.89e-05  1.05e-02  7.71e-01  
  7  +3.7293e-01  +5.4382e-01  1.71e-01  1.07e-03  4.67e-02  2.34e-05  3.88e-03  6.70e-01  
  8  +3.5957e-01  +4.7306e-01  1.13e-01  6.61e-04  2.90e-02  3.19e-05  2.53e-03  5.03e-01  
  9  +3.5367e-01  +4.4221e-01  8.85e-02  4.98e-04  2.18e-02  3.00e-05  1.96e-03  3.17e-01  
 10  +3.4021e-01  +3.7085e-01  3.06e-02  1.63e-04  7.16e-03  2.10e-05  6.98e-04  9.52e-01  
 11  +3.3396e-01  +3.4006e-01  6.10e-03  3.19e-05  1.39e-03  4.10e-06  1.44e-04  8.34e-01  
 12  +3.3276e-01  +3.3456e-01  1.80e-03  9.15e-06  4.00e-04  1.23e-06  4.28e-05  8.48e-01  
 13  +3.3233e-01  +3.3274e-01  4.10e-04  2.05e-06  8.95e-05  2.82e-07  9.82e-06  8.70e-01  
 14  +3.3220e-01  +3.3221e-01  7.14e-06  3.55e-08  1.55e-06  4.87e-09  1.71e-07  9.83e-01  
 15  +3.3220e-01  +3.3220e-01  7.14e-08  3.55e-10  1.55e-08  4.87e-11  1.71e-09  9.90e-01  
 16  +3.3220e-01  +3.3220e-01  7.14e-10  3.55e-12  1.55e-10  4.88e-13  1.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.525ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:50 PM: Optimal value: 3.322e-01
(CVXPY) Aug 31 04:53:50 PM: Compilation took 2.963e-03 seconds
(CVXPY) Aug 31 04:53:50 PM: Solver (including time spent in interface) took 7.012e-03 seconds
Iteration: 17, Objective: 0.3322
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:50 PM: Your problem has 410 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:50 PM: Finished problem compilation (took 2.985e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 410
  constraints   = 660
  nnz(P)        = 0
  nnz(A)        = 4448
  cones (total) = 1
    : Nonnegative = 1,  numel = 660

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9810e-01  +2.5175e+02  2.51e+02  9.44e-01  2.17e+01  1.00e+00  1.02e+00   ------   
  1  +5.5437e-01  +5.4499e+01  5.39e+01  4.16e-01  1.26e+01  3.88e-03  5.67e-01  5.96e-01  
  2  +5.1129e-01  +6.5297e+00  6.02e+00  1.04e-01  4.30e+00  1.71e-02  2.20e-01  9.90e-01  
  3  +4.9538e-01  +1.6818e+00  1.19e+00  1.92e-02  8.84e-01  5.12e-03  5.01e-02  8.05e-01  
  4  +4.7263e-01  +1.5777e+00  1.11e+00  9.91e-03  4.58e-01  6.45e-03  2.61e-02  6.08e-01  
  5  +4.4473e-01  +1.2689e+00  8.24e-01  5.53e-03  2.53e-01  4.50e-03  1.55e-02  5.35e-01  
  6  +4.1053e-01  +8.7724e-01  4.67e-01  3.29e-03  1.46e-01  3.75e-05  1.06e-02  7.77e-01  
  7  +3.7157e-01  +5.3494e-01  1.63e-01  1.01e-03  4.43e-02  2.26e-05  3.72e-03  6.87e-01  
  8  +3.5944e-01  +4.7342e-01  1.14e-01  6.60e-04  2.88e-02  3.01e-05  2.54e-03  4.58e-01  
  9  +3.4622e-01  +4.0479e-01  5.86e-02  3.22e-04  1.40e-02  3.80e-05  1.33e-03  8.99e-01  
 10  +3.3662e-01  +3.5403e-01  1.74e-02  9.26e-05  4.02e-03  1.13e-05  4.11e-04  7.24e-01  
 11  +3.3335e-01  +3.3743e-01  4.09e-03  2.14e-05  9.28e-04  2.66e-06  9.85e-05  7.93e-01  
 12  +3.3267e-01  +3.3422e-01  1.56e-03  7.96e-06  3.45e-04  1.04e-06  3.76e-05  7.58e-01  
 13  +3.3228e-01  +3.3253e-01  2.54e-04  1.28e-06  5.55e-05  1.70e-07  6.17e-06  9.11e-01  
 14  +3.3220e-01  +3.3220e-01  3.15e-06  1.59e-08  6.88e-07  2.10e-09  7.67e-08  9.88e-01  
 15  +3.3220e-01  +3.3220e-01  3.16e-08  1.59e-10  6.89e-09  2.10e-11  7.68e-10  9.90e-01  
 16  +3.3220e-01  +3.3220e-01  3.16e-10  1.59e-12  6.89e-11  2.11e-13  7.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2676ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:50 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:50 PM: Optimal value: 3.322e-01
(CVXPY) Aug 31 04:53:50 PM: Compilation took 2.985e-03 seconds
(CVXPY) Aug 31 04:53:50 PM: Solver (including time spent in interface) took 6.013e-03 seconds
FULL MODEL:
  Accruacy: 0.618
  Our objective: 0.23600000000000002

IF 
    (x0 = 1 AND x1 = 1 AND x5 = 1)                                             <-- (term's our objective: 0.06800000000000005)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.04000000000000004)
 OR (x0 = 1 AND x4 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0)            <-- (term's our objective: 0.016000000000000014)
 OR (x3 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.01600000000000002)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.016000000000000018)
 OR (x0 = 1 AND x2 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.01200000000000001)
 OR (x0 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.00800000000000001)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.008000000000000007)
 OR (x2 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.008000000000000007)
 OR (x1 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.0040000000000000036)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x1 = 0 AND x5 = 0) <-- (term's our objective: 0.0040000000000000036)
 OR (x0 = 1 AND x4 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0040000000000000036)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x6 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.012000000000000014)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.02000000000000002)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.430737257003784
Best over terms:
  Our final objective: 0.06800000000000005
    Its accruacy: 0.534
    Its hamming distance: 10
  Shortest hamming distance: 0
    Its our objective: 0.02000000000000002
  Highest accruacy: 0.534
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

