Command:
python test_script.py -s smallest_subclass -d 2 -n 500 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.33199999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 2.

Computed total variation: 0.33199999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:36 PM: Your problem has 255 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:36 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:36 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:36 PM: Finished problem compilation (took 4.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 255
  constraints   = 505
  nnz(P)        = 0
  nnz(A)        = 1255
  cones (total) = 1
    : Nonnegative = 1,  numel = 505

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9875e-01  +2.5099e+02  2.50e+02  9.27e-01  1.52e+01  1.00e+00  1.01e+00   ------   
  1  +6.3567e-01  +4.4143e+01  4.35e+01  2.53e-01  7.11e+00  4.49e-03  3.92e-01  7.25e-01  
  2  +5.5376e-01  +8.0404e+00  7.49e+00  1.04e-01  3.32e+00  5.57e-03  1.99e-01  6.40e-01  
  3  +4.9797e-01  +1.2796e+00  7.82e-01  2.29e-02  6.96e-01  5.10e-03  1.61e-01  6.28e-01  
  4  +4.8233e-01  +9.3356e-01  4.51e-01  6.85e-03  2.18e-01  1.27e-02  2.31e-02  8.96e-01  
  5  +4.2316e-01  +7.7577e-01  3.53e-01  1.50e-03  4.83e-02  3.74e-02  4.67e-03  8.02e-01  
  6  +3.9982e-01  +5.1232e-01  1.13e-01  5.41e-04  1.71e-02  2.82e-04  2.20e-03  8.06e-01  
  7  +3.7265e-01  +3.8090e-01  8.25e-03  3.65e-05  1.15e-03  2.65e-06  1.72e-04  9.31e-01  
  8  +3.7013e-01  +3.7023e-01  9.91e-05  4.37e-07  1.37e-05  3.16e-08  2.11e-06  9.88e-01  
  9  +3.7010e-01  +3.7010e-01  9.91e-07  4.37e-09  1.37e-07  3.16e-10  2.11e-08  9.90e-01  
 10  +3.7010e-01  +3.7010e-01  9.91e-09  4.37e-11  1.37e-09  3.16e-12  2.11e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 933.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:36 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:36 PM: Optimal value: 3.701e-01
(CVXPY) Aug 31 04:44:36 PM: Compilation took 4.008e-03 seconds
(CVXPY) Aug 31 04:44:36 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:36 PM: Your problem has 256 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:36 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:36 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:36 PM: Finished problem compilation (took 4.520e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 256
  constraints   = 506
  nnz(P)        = 0
  nnz(A)        = 1361
  cones (total) = 1
    : Nonnegative = 1,  numel = 506

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9815e-01  +2.5149e+02  2.51e+02  9.27e-01  1.59e+01  1.00e+00  1.01e+00   ------   
  1  +6.3307e-01  +4.4422e+01  4.38e+01  2.56e-01  7.44e+00  4.47e-03  3.97e-01  7.23e-01  
  2  +5.5329e-01  +8.0129e+00  7.46e+00  1.03e-01  3.41e+00  5.73e-03  1.97e-01  6.53e-01  
  3  +4.9819e-01  +1.3647e+00  8.66e-01  2.53e-02  8.00e-01  5.33e-03  1.58e-01  6.28e-01  
  4  +4.8744e-01  +9.3055e-01  4.43e-01  7.97e-03  2.64e-01  9.56e-03  2.71e-02  8.50e-01  
  5  +4.1410e-01  +7.7816e-01  3.64e-01  1.26e-03  4.26e-02  4.54e-02  3.64e-03  8.68e-01  
  6  +4.0516e-01  +7.3754e-01  3.32e-01  1.04e-03  3.49e-02  4.19e-02  2.99e-03  2.29e-01  
  7  +3.9909e-01  +6.4119e-01  2.42e-01  9.19e-04  3.07e-02  2.02e-02  2.98e-03  5.76e-02  
  8  +3.6168e-01  +4.5821e-01  9.65e-02  3.10e-04  1.02e-02  8.68e-03  1.03e-03  7.59e-01  
  9  +3.3723e-01  +3.4510e-01  7.88e-03  2.80e-05  9.19e-04  7.45e-05  1.07e-04  9.71e-01  
 10  +3.3413e-01  +3.3422e-01  8.41e-05  3.00e-07  9.82e-06  7.49e-07  1.17e-06  9.89e-01  
 11  +3.3410e-01  +3.3410e-01  8.41e-07  3.00e-09  9.82e-08  7.48e-09  1.17e-08  9.90e-01  
 12  +3.3410e-01  +3.3410e-01  8.41e-09  3.00e-11  9.82e-10  7.48e-11  1.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 910.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:36 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:36 PM: Optimal value: 3.341e-01
(CVXPY) Aug 31 04:44:36 PM: Compilation took 4.520e-03 seconds
(CVXPY) Aug 31 04:44:36 PM: Solver (including time spent in interface) took 2.000e-03 seconds
FULL MODEL:
  Accruacy: 0.666
  Our objective: 0.3320000000000001

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3320000000000001)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7626872062683105
Best over terms:
  Our final objective: 0.3320000000000001
    Its accruacy: 0.666
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.3320000000000001
  Highest accruacy: 0.666
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

