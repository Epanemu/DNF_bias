Command:
python test_script.py -s smallest_subclass -d 7 -n 10000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.006599999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 7.

Computed total variation: 0.09119999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:14 PM: Your problem has 5015 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:14 PM: Finished problem compilation (took 1.716e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5015
  constraints   = 10015
  nnz(P)        = 0
  nnz(A)        = 50015
  cones (total) = 1
    : Nonnegative = 1,  numel = 10015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.05e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +1.0510e+03  1.05e+03  4.04e-01  6.56e+01  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3818e-01  +1.3093e+02  1.30e+02  1.57e-01  3.24e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0993e-01  +3.3561e+01  3.31e+01  1.21e-01  2.47e+01  3.44e-05  2.46e-01  1.62e-01  
  4  +5.0061e-01  +2.0520e+00  1.55e+00  1.05e-02  2.19e+00  4.90e-06  1.53e-01  7.47e-01  
  5  +5.0007e-01  +7.3501e-01  2.35e-01  1.57e-03  3.31e-01  1.60e-05  6.63e-02  9.90e-01  
  6  +5.0001e-01  +5.3919e-01  3.92e-02  2.62e-04  5.52e-02  4.91e-06  1.15e-02  8.44e-01  
  7  +4.9999e-01  +5.4324e-01  4.32e-02  2.78e-04  5.86e-02  1.56e-05  3.13e-03  7.97e-01  
  8  +4.9910e-01  +5.4101e-01  4.19e-02  2.33e-05  4.93e-03  5.79e-04  7.31e-05  9.82e-01  
  9  +4.9790e-01  +5.3580e-01  3.79e-02  1.20e-05  2.54e-03  8.67e-04  3.73e-05  5.43e-01  
 10  +4.9598e-01  +5.2316e-01  2.72e-02  8.58e-06  1.82e-03  4.34e-04  2.71e-05  3.94e-01  
 11  +4.9431e-01  +5.1309e-01  1.88e-02  5.69e-06  1.21e-03  4.48e-06  1.84e-05  8.26e-01  
 12  +4.9090e-01  +4.9711e-01  6.21e-03  1.56e-06  3.30e-04  1.14e-06  5.26e-06  7.82e-01  
 13  +4.8928e-01  +4.8996e-01  6.87e-04  1.57e-07  3.32e-05  6.14e-08  5.59e-07  9.59e-01  
 14  +4.8902e-01  +4.8906e-01  4.84e-05  9.67e-09  2.05e-06  3.42e-09  3.93e-08  9.63e-01  
 15  +4.8900e-01  +4.8900e-01  4.88e-07  9.73e-11  2.06e-08  3.45e-11  3.96e-10  9.90e-01  
 16  +4.8900e-01  +4.8900e-01  4.88e-09  9.73e-13  2.06e-10  3.45e-13  3.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 55.0904ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:14 PM: Optimal value: 4.890e-01
(CVXPY) Aug 31 04:55:14 PM: Compilation took 1.716e-02 seconds
(CVXPY) Aug 31 04:55:14 PM: Solver (including time spent in interface) took 6.097e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4890
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:14 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:14 PM: Finished problem compilation (took 1.940e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 54695
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.06e+02  1.00e+00  1.00e+00   ------   
  1  +5.8809e-01  +1.0512e+03  1.05e+03  4.04e-01  6.63e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3809e-01  +1.3075e+02  1.30e+02  1.57e-01  3.27e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0990e-01  +3.3493e+01  3.30e+01  1.21e-01  2.49e+01  3.44e-05  2.46e-01  1.63e-01  
  4  +5.0061e-01  +2.0388e+00  1.54e+00  1.04e-02  2.19e+00  4.92e-06  1.52e-01  7.55e-01  
  5  +5.0007e-01  +7.4021e-01  2.40e-01  1.61e-03  3.43e-01  1.59e-05  6.38e-02  9.90e-01  
  6  +5.0002e-01  +5.8896e-01  8.89e-02  5.94e-04  1.27e-01  9.33e-06  1.91e-02  7.81e-01  
  7  +5.0001e-01  +5.9337e-01  9.34e-02  6.18e-04  1.32e-01  1.51e-05  1.07e-02  4.93e-01  
  8  +4.9968e-01  +5.9435e-01  9.47e-02  1.76e-04  3.76e-02  2.27e-04  6.11e-04  9.55e-01  
  9  +4.9780e-01  +5.8715e-01  8.94e-02  3.17e-05  6.80e-03  1.23e-03  1.02e-04  8.38e-01  
 10  +4.9397e-01  +5.4578e-01  5.18e-02  2.18e-05  4.66e-03  9.85e-05  7.33e-05  5.48e-01  
 11  +4.9257e-01  +5.3784e-01  4.53e-02  1.63e-05  3.49e-03  8.84e-05  5.51e-05  2.95e-01  
 12  +4.9217e-01  +5.3434e-01  4.22e-02  1.60e-05  3.43e-03  6.15e-05  5.45e-05  1.63e-01  
 13  +4.9155e-01  +5.3051e-01  3.90e-02  1.38e-05  2.96e-03  4.41e-05  4.70e-05  3.27e-01  
 14  +4.8846e-01  +5.1303e-01  2.46e-02  7.03e-06  1.50e-03  1.33e-05  2.39e-05  7.86e-01  
 15  +4.8853e-01  +5.1345e-01  2.49e-02  6.99e-06  1.50e-03  1.26e-05  2.36e-05  9.22e-02  
 16  +4.8801e-01  +5.1097e-01  2.30e-02  6.07e-06  1.30e-03  1.09e-05  2.01e-05  2.39e-01  
 17  +4.8777e-01  +5.1035e-01  2.26e-02  5.07e-06  1.09e-03  2.35e-06  1.62e-05  9.09e-01  
 18  +4.8746e-01  +5.0913e-01  2.17e-02  4.77e-06  1.02e-03  2.10e-06  1.52e-05  1.69e-01  
 19  +4.8750e-01  +5.0931e-01  2.18e-02  4.77e-06  1.02e-03  2.10e-06  1.52e-05  2.91e-02  
 20  +4.8539e-01  +5.0075e-01  1.54e-02  2.88e-06  6.16e-04  1.59e-06  9.28e-06  4.19e-01  
 21  +4.8523e-01  +5.0007e-01  1.48e-02  2.85e-06  6.11e-04  1.43e-06  9.21e-06  8.53e-02  
 22  +4.8252e-01  +4.8978e-01  7.26e-03  1.26e-06  2.69e-04  6.61e-07  4.13e-06  6.19e-01  
 23  +4.8077e-01  +4.8280e-01  2.03e-03  3.41e-07  7.29e-05  1.24e-07  1.13e-06  9.89e-01  
 24  +4.7992e-01  +4.7998e-01  5.66e-05  9.34e-09  2.00e-06  3.22e-09  3.13e-08  9.84e-01  
 25  +4.7990e-01  +4.7990e-01  5.67e-07  9.36e-11  2.00e-08  3.22e-11  3.14e-10  9.90e-01  
 26  +4.7990e-01  +4.7990e-01  5.67e-09  9.37e-13  2.01e-10  3.38e-13  3.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.0118ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:14 PM: Optimal value: 4.799e-01
(CVXPY) Aug 31 04:55:14 PM: Compilation took 1.940e-02 seconds
(CVXPY) Aug 31 04:55:14 PM: Solver (including time spent in interface) took 9.989e-02 seconds
Iteration: 2, Objective: 0.4799
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:14 PM: Your problem has 5035 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:14 PM: Finished problem compilation (took 2.200e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5035
  constraints   = 10035
  nnz(P)        = 0
  nnz(A)        = 62267
  cones (total) = 1
    : Nonnegative = 1,  numel = 10035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8801e-01  +1.0518e+03  1.05e+03  4.05e-01  6.82e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3796e-01  +1.3054e+02  1.30e+02  1.57e-01  3.36e+01  1.32e-02  2.55e-01  8.67e-01  
  3  +5.0987e-01  +3.3446e+01  3.29e+01  1.21e-01  2.56e+01  3.46e-05  2.47e-01  1.65e-01  
  4  +5.0061e-01  +2.0557e+00  1.56e+00  1.06e-02  2.28e+00  4.94e-06  1.52e-01  7.52e-01  
  5  +5.0007e-01  +7.4473e-01  2.45e-01  1.64e-03  3.60e-01  1.62e-05  6.41e-02  9.90e-01  
  6  +5.0003e-01  +6.2895e-01  1.29e-01  8.63e-04  1.89e-01  1.06e-05  2.70e-02  7.30e-01  
  7  +5.0002e-01  +6.1233e-01  1.12e-01  7.37e-04  1.61e-01  1.72e-05  1.01e-02  6.98e-01  
  8  +4.9972e-01  +5.9636e-01  9.66e-02  1.84e-04  4.05e-02  1.97e-04  6.27e-04  9.47e-01  
  9  +4.9785e-01  +5.9011e-01  9.23e-02  2.99e-05  6.61e-03  1.21e-03  9.35e-05  8.54e-01  
 10  +4.9783e-01  +5.8456e-01  8.67e-02  2.86e-05  6.30e-03  8.06e-04  8.93e-05  2.72e-01  
 11  +4.9767e-01  +5.8222e-01  8.46e-02  2.84e-05  6.26e-03  7.13e-04  8.85e-05  7.61e-02  
 12  +4.9654e-01  +5.7552e-01  7.90e-02  2.30e-05  5.08e-03  6.57e-04  7.22e-05  2.86e-01  
 13  +4.9502e-01  +5.6048e-01  6.55e-02  2.00e-05  4.41e-03  6.54e-05  6.34e-05  7.13e-01  
 14  +4.9292e-01  +5.5133e-01  5.84e-02  1.59e-05  3.50e-03  2.55e-05  5.05e-05  6.36e-01  
 15  +4.8603e-01  +5.2322e-01  3.72e-02  8.39e-06  1.85e-03  5.48e-06  2.74e-05  8.01e-01  
 16  +4.8362e-01  +5.1385e-01  3.02e-02  6.32e-06  1.39e-03  1.21e-06  2.09e-05  9.48e-01  
 17  +4.7711e-01  +4.8902e-01  1.19e-02  2.31e-06  5.08e-04  4.51e-07  7.87e-06  6.50e-01  
 18  +4.7358e-01  +4.7601e-01  2.44e-03  4.52e-07  9.95e-05  1.01e-07  1.60e-06  8.55e-01  
 19  +4.7264e-01  +4.7272e-01  8.38e-05  1.53e-08  3.37e-06  3.44e-09  5.64e-08  9.80e-01  
 20  +4.7260e-01  +4.7260e-01  9.90e-07  1.80e-10  3.97e-08  4.05e-11  6.69e-10  9.88e-01  
 21  +4.7260e-01  +4.7260e-01  9.90e-09  1.80e-12  3.97e-10  4.05e-13  6.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 87.4195ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:14 PM: Optimal value: 4.726e-01
(CVXPY) Aug 31 04:55:14 PM: Compilation took 2.200e-02 seconds
(CVXPY) Aug 31 04:55:14 PM: Solver (including time spent in interface) took 9.426e-02 seconds
Iteration: 3, Objective: 0.4726
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:14 PM: Your problem has 5045 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:14 PM: Finished problem compilation (took 2.300e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5045
  constraints   = 10045
  nnz(P)        = 0
  nnz(A)        = 64502
  cones (total) = 1
    : Nonnegative = 1,  numel = 10045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8798e-01  +1.0518e+03  1.05e+03  4.05e-01  6.83e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3793e-01  +1.3047e+02  1.30e+02  1.57e-01  3.36e+01  1.32e-02  2.55e-01  8.67e-01  
  3  +5.0986e-01  +3.3421e+01  3.29e+01  1.21e-01  2.56e+01  3.46e-05  2.46e-01  1.65e-01  
  4  +5.0061e-01  +2.0528e+00  1.55e+00  1.06e-02  2.28e+00  4.95e-06  1.51e-01  7.54e-01  
  5  +5.0007e-01  +7.4663e-01  2.47e-01  1.66e-03  3.63e-01  1.62e-05  6.34e-02  9.90e-01  
  6  +5.0004e-01  +6.4770e-01  1.48e-01  9.89e-04  2.17e-01  1.25e-05  2.97e-02  6.30e-01  
  7  +5.0001e-01  +6.2171e-01  1.22e-01  7.80e-04  1.71e-01  2.53e-05  8.04e-03  8.07e-01  
  8  +4.9892e-01  +6.1210e-01  1.13e-01  7.23e-05  1.60e-02  7.04e-04  2.33e-04  9.82e-01  
  9  +4.9738e-01  +5.9867e-01  1.01e-01  3.73e-05  8.24e-03  1.03e-03  1.18e-04  5.61e-01  
 10  +4.9741e-01  +5.9778e-01  1.00e-01  3.70e-05  8.19e-03  9.66e-04  1.17e-04  5.90e-02  
 11  +4.9647e-01  +5.8961e-01  9.31e-02  3.14e-05  6.93e-03  8.64e-04  9.83e-05  2.43e-01  
 12  +4.9658e-01  +5.8441e-01  8.78e-02  2.80e-05  6.18e-03  4.57e-04  8.76e-05  4.76e-01  
 13  +4.9600e-01  +5.8102e-01  8.50e-02  2.76e-05  6.11e-03  3.97e-04  8.73e-05  6.70e-02  
 14  +4.9404e-01  +5.6826e-01  7.42e-02  2.20e-05  4.87e-03  2.00e-04  6.96e-05  5.23e-01  
 15  +4.8918e-01  +5.4430e-01  5.51e-02  1.38e-05  3.04e-03  2.34e-06  4.44e-05  9.22e-01  
 16  +4.8275e-01  +5.1858e-01  3.58e-02  7.82e-06  1.73e-03  1.52e-06  2.58e-05  4.75e-01  
 17  +4.8162e-01  +5.1391e-01  3.23e-02  6.73e-06  1.48e-03  1.51e-06  2.23e-05  5.41e-01  
 18  +4.7830e-01  +5.0099e-01  2.27e-02  4.40e-06  9.71e-04  1.21e-06  1.48e-05  9.90e-01  
 19  +4.7393e-01  +4.8504e-01  1.11e-02  2.06e-06  4.54e-04  6.09e-07  7.15e-06  7.55e-01  
 20  +4.7205e-01  +4.7806e-01  6.02e-03  1.09e-06  2.40e-04  3.77e-07  3.84e-06  9.90e-01  
 21  +4.6984e-01  +4.7043e-01  5.90e-04  1.06e-07  2.33e-05  3.61e-08  3.82e-07  9.13e-01  
 22  +4.6960e-01  +4.6961e-01  8.06e-06  1.44e-09  3.17e-07  4.90e-10  5.23e-09  9.87e-01  
 23  +4.6960e-01  +4.6960e-01  8.06e-08  1.44e-11  3.17e-09  4.90e-12  5.23e-11  9.90e-01  
 24  +4.6960e-01  +4.6960e-01  8.06e-10  1.44e-13  3.18e-11  4.95e-14  5.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.7967ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:14 PM: Optimal value: 4.696e-01
(CVXPY) Aug 31 04:55:14 PM: Compilation took 2.300e-02 seconds
(CVXPY) Aug 31 04:55:14 PM: Solver (including time spent in interface) took 8.864e-02 seconds
Iteration: 4, Objective: 0.4696
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:14 PM: Your problem has 5055 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:14 PM: Finished problem compilation (took 2.730e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5055
  constraints   = 10055
  nnz(P)        = 0
  nnz(A)        = 67208
  cones (total) = 1
    : Nonnegative = 1,  numel = 10055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8792e-01  +1.0519e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3786e-01  +1.3031e+02  1.30e+02  1.57e-01  3.37e+01  1.32e-02  2.55e-01  8.68e-01  
  3  +5.0984e-01  +3.3383e+01  3.29e+01  1.21e-01  2.56e+01  3.46e-05  2.46e-01  1.66e-01  
  4  +5.0061e-01  +2.0530e+00  1.55e+00  1.06e-02  2.29e+00  4.96e-06  1.51e-01  7.55e-01  
  5  +5.0007e-01  +7.5007e-01  2.50e-01  1.68e-03  3.70e-01  1.63e-05  6.25e-02  9.90e-01  
  6  +5.0004e-01  +6.5161e-01  1.52e-01  1.01e-03  2.23e-01  1.37e-05  2.65e-02  6.98e-01  
  7  +4.9998e-01  +6.4877e-01  1.49e-01  7.93e-04  1.75e-01  5.27e-05  4.38e-03  9.54e-01  
  8  +4.9854e-01  +6.4224e-01  1.44e-01  6.99e-05  1.55e-02  9.32e-04  2.21e-04  9.50e-01  
  9  +4.9638e-01  +6.1785e-01  1.21e-01  3.55e-05  7.87e-03  1.20e-03  1.12e-04  5.99e-01  
 10  +4.9562e-01  +6.0794e-01  1.12e-01  3.11e-05  6.91e-03  9.09e-04  9.78e-05  2.84e-01  
 11  +4.9539e-01  +6.0589e-01  1.10e-01  3.11e-05  6.90e-03  8.69e-04  9.77e-05  1.05e-02  
 12  +4.9358e-01  +5.8817e-01  9.46e-02  2.69e-05  5.97e-03  4.32e-04  8.55e-05  3.95e-01  
 13  +4.8829e-01  +5.5412e-01  6.58e-02  1.75e-05  3.88e-03  1.33e-05  5.73e-05  8.20e-01  
 14  +4.8593e-01  +5.4369e-01  5.78e-02  1.46e-05  3.23e-03  9.24e-06  4.82e-05  3.32e-01  
 15  +4.7559e-01  +4.9979e-01  2.42e-02  5.13e-06  1.14e-03  2.46e-07  1.78e-05  9.90e-01  
 16  +4.7068e-01  +4.8111e-01  1.04e-02  2.07e-06  4.59e-04  1.56e-07  7.49e-06  6.28e-01  
 17  +4.6934e-01  +4.7604e-01  6.70e-03  1.29e-06  2.85e-04  3.71e-07  4.72e-06  9.90e-01  
 18  +4.6704e-01  +4.6766e-01  6.18e-04  1.17e-07  2.58e-05  3.37e-08  4.43e-07  9.28e-01  
 19  +4.6680e-01  +4.6681e-01  9.46e-06  1.78e-09  3.95e-07  5.14e-10  6.81e-09  9.85e-01  
 20  +4.6680e-01  +4.6680e-01  9.46e-08  1.78e-11  3.95e-09  5.14e-12  6.81e-11  9.90e-01  
 21  +4.6680e-01  +4.6680e-01  9.46e-10  1.78e-13  3.95e-11  5.20e-14  6.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 84.473ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:15 PM: Optimal value: 4.668e-01
(CVXPY) Aug 31 04:55:15 PM: Compilation took 2.730e-02 seconds
(CVXPY) Aug 31 04:55:15 PM: Solver (including time spent in interface) took 9.037e-02 seconds
Iteration: 5, Objective: 0.4668
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:15 PM: Your problem has 5065 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:15 PM: Finished problem compilation (took 2.700e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5065
  constraints   = 10065
  nnz(P)        = 0
  nnz(A)        = 68802
  cones (total) = 1
    : Nonnegative = 1,  numel = 10065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8792e-01  +1.0519e+03  1.05e+03  4.05e-01  6.86e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3782e-01  +1.3022e+02  1.30e+02  1.57e-01  3.36e+01  1.32e-02  2.55e-01  8.68e-01  
  3  +5.0983e-01  +3.3353e+01  3.28e+01  1.21e-01  2.56e+01  3.46e-05  2.46e-01  1.67e-01  
  4  +5.0061e-01  +2.0509e+00  1.55e+00  1.06e-02  2.29e+00  4.96e-06  1.51e-01  7.57e-01  
  5  +5.0008e-01  +7.6519e-01  2.65e-01  1.78e-03  3.92e-01  1.62e-05  6.42e-02  9.65e-01  
  6  +5.0005e-01  +6.9387e-01  1.94e-01  1.30e-03  2.86e-01  1.51e-05  3.44e-02  5.73e-01  
  7  +5.0002e-01  +6.6012e-01  1.60e-01  1.03e-03  2.27e-01  2.82e-05  1.06e-02  7.41e-01  
  8  +4.9932e-01  +6.4185e-01  1.43e-01  1.46e-04  3.24e-02  4.59e-04  4.80e-04  9.90e-01  
  9  +4.9716e-01  +6.2876e-01  1.32e-01  4.30e-05  9.55e-03  1.37e-03  1.37e-04  7.39e-01  
 10  +4.9564e-01  +6.1329e-01  1.18e-01  3.76e-05  8.36e-03  1.08e-03  1.19e-04  2.19e-01  
 11  +4.9489e-01  +6.0561e-01  1.11e-01  3.33e-05  7.39e-03  8.68e-04  1.05e-04  2.61e-01  
 12  +4.9461e-01  +6.0225e-01  1.08e-01  3.11e-05  6.90e-03  7.27e-04  9.81e-05  1.99e-01  
 13  +4.9292e-01  +5.8630e-01  9.34e-02  2.78e-05  6.17e-03  2.94e-04  8.89e-05  4.43e-01  
 14  +4.8848e-01  +5.6374e-01  7.53e-02  1.99e-05  4.42e-03  1.64e-04  6.48e-05  4.81e-01  
 15  +4.8495e-01  +5.4745e-01  6.25e-02  1.56e-05  3.45e-03  1.17e-04  5.14e-05  2.96e-01  
 16  +4.7804e-01  +5.1499e-01  3.70e-02  8.33e-06  1.85e-03  1.25e-06  2.84e-05  8.86e-01  
 17  +4.7064e-01  +4.8461e-01  1.40e-02  2.91e-06  6.44e-04  4.60e-07  1.03e-05  6.80e-01  
 18  +4.6656e-01  +4.6847e-01  1.91e-03  3.76e-07  8.33e-05  6.61e-08  1.39e-06  8.85e-01  
 19  +4.6624e-01  +4.6738e-01  1.13e-03  2.12e-07  4.69e-05  4.45e-08  7.84e-07  5.16e-01  
 20  +4.6599e-01  +4.6648e-01  4.81e-04  8.97e-08  1.99e-05  2.74e-08  3.33e-07  9.90e-01  
 21  +4.6580e-01  +4.6581e-01  8.42e-06  1.55e-09  3.44e-07  4.61e-10  5.81e-09  9.84e-01  
 22  +4.6580e-01  +4.6580e-01  8.42e-08  1.55e-11  3.44e-09  4.61e-12  5.81e-11  9.90e-01  
 23  +4.6580e-01  +4.6580e-01  8.43e-10  1.56e-13  3.45e-11  4.97e-14  6.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 92.243ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:15 PM: Optimal value: 4.658e-01
(CVXPY) Aug 31 04:55:15 PM: Compilation took 2.700e-02 seconds
(CVXPY) Aug 31 04:55:15 PM: Solver (including time spent in interface) took 9.915e-02 seconds
Iteration: 6, Objective: 0.4658
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:15 PM: Your problem has 5075 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:15 PM: Finished problem compilation (took 2.800e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5075
  constraints   = 10075
  nnz(P)        = 0
  nnz(A)        = 70324
  cones (total) = 1
    : Nonnegative = 1,  numel = 10075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8786e-01  +1.0519e+03  1.05e+03  4.05e-01  6.86e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3776e-01  +1.3009e+02  1.30e+02  1.57e-01  3.36e+01  1.32e-02  2.55e-01  8.68e-01  
  3  +5.0981e-01  +3.3321e+01  3.28e+01  1.21e-01  2.56e+01  3.46e-05  2.46e-01  1.67e-01  
  4  +5.0061e-01  +2.0500e+00  1.55e+00  1.06e-02  2.29e+00  4.97e-06  1.50e-01  7.58e-01  
  5  +5.0009e-01  +7.7838e-01  2.78e-01  1.87e-03  4.13e-01  1.63e-05  6.48e-02  9.48e-01  
  6  +5.0005e-01  +6.9186e-01  1.92e-01  1.29e-03  2.83e-01  1.58e-05  3.07e-02  6.18e-01  
  7  +5.0001e-01  +6.9206e-01  1.92e-01  1.12e-03  2.48e-01  3.98e-05  7.30e-03  9.33e-01  
  8  +4.9886e-01  +6.6974e-01  1.71e-01  9.75e-05  2.17e-02  7.43e-04  3.08e-04  9.64e-01  
  9  +4.9765e-01  +6.5150e-01  1.54e-01  6.02e-05  1.34e-02  8.98e-04  1.89e-04  4.71e-01  
 10  +4.9606e-01  +6.3555e-01  1.39e-01  4.70e-05  1.04e-02  8.37e-04  1.48e-04  2.90e-01  
 11  +4.9547e-01  +6.2826e-01  1.33e-01  4.10e-05  9.12e-03  7.26e-04  1.29e-04  2.45e-01  
 12  +4.9484e-01  +6.1856e-01  1.24e-01  4.03e-05  8.95e-03  5.27e-04  1.28e-04  1.45e-01  
 13  +4.9270e-01  +6.0304e-01  1.10e-01  3.29e-05  7.30e-03  3.97e-04  1.05e-04  3.20e-01  
 14  +4.8835e-01  +5.7032e-01  8.20e-02  2.35e-05  5.22e-03  1.81e-05  7.69e-05  7.87e-01  
 15  +4.8408e-01  +5.5053e-01  6.65e-02  1.74e-05  3.86e-03  1.28e-05  5.79e-05  3.51e-01  
 16  +4.8090e-01  +5.3557e-01  5.47e-02  1.34e-05  2.97e-03  6.47e-06  4.52e-05  5.31e-01  
 17  +4.7880e-01  +5.2629e-01  4.75e-02  1.12e-05  2.48e-03  4.67e-06  3.81e-05  3.48e-01  
 18  +4.7240e-01  +4.9891e-01  2.65e-02  5.71e-06  1.27e-03  1.79e-06  2.00e-05  7.26e-01  
 19  +4.7025e-01  +4.9035e-01  2.01e-02  4.18e-06  9.26e-04  1.35e-06  1.48e-05  2.97e-01  
 20  +4.6825e-01  +4.8224e-01  1.40e-02  2.75e-06  6.09e-04  7.58e-07  9.89e-06  9.90e-01  
 21  +4.6510e-01  +4.7032e-01  5.22e-03  9.95e-07  2.21e-04  2.84e-07  3.70e-06  6.91e-01  
 22  +4.6396e-01  +4.6590e-01  1.94e-03  3.69e-07  8.17e-05  1.11e-07  1.39e-06  9.90e-01  
 23  +4.6321e-01  +4.6325e-01  3.46e-05  6.52e-09  1.45e-06  1.86e-09  2.49e-08  9.87e-01  
 24  +4.6320e-01  +4.6320e-01  3.46e-07  6.52e-11  1.45e-08  1.86e-11  2.49e-10  9.90e-01  
 25  +4.6320e-01  +4.6320e-01  3.46e-09  6.52e-13  1.45e-10  1.86e-13  2.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.4279ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:15 PM: Optimal value: 4.632e-01
(CVXPY) Aug 31 04:55:15 PM: Compilation took 2.800e-02 seconds
(CVXPY) Aug 31 04:55:15 PM: Solver (including time spent in interface) took 1.164e-01 seconds
Iteration: 7, Objective: 0.4632
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:15 PM: Your problem has 5085 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:15 PM: Finished problem compilation (took 2.814e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5085
  constraints   = 10085
  nnz(P)        = 0
  nnz(A)        = 71937
  cones (total) = 1
    : Nonnegative = 1,  numel = 10085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8778e-01  +1.0521e+03  1.05e+03  4.06e-01  6.86e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3771e-01  +1.3003e+02  1.29e+02  1.57e-01  3.36e+01  1.32e-02  2.55e-01  8.69e-01  
  3  +5.0981e-01  +3.3312e+01  3.28e+01  1.21e-01  2.56e+01  3.47e-05  2.46e-01  1.68e-01  
  4  +5.0062e-01  +2.0577e+00  1.56e+00  1.06e-02  2.31e+00  4.98e-06  1.50e-01  7.57e-01  
  5  +5.0011e-01  +8.4703e-01  3.47e-01  2.34e-03  5.15e-01  1.58e-05  7.46e-02  8.39e-01  
  6  +5.0005e-01  +6.8878e-01  1.89e-01  1.27e-03  2.79e-01  1.31e-05  3.16e-02  6.66e-01  
  7  +5.0001e-01  +6.7448e-01  1.74e-01  1.03e-03  2.28e-01  3.74e-05  6.90e-03  8.74e-01  
  8  +4.9891e-01  +6.6552e-01  1.67e-01  9.93e-05  2.21e-02  7.12e-04  3.13e-04  9.58e-01  
  9  +4.9724e-01  +6.4347e-01  1.46e-01  5.17e-05  1.15e-02  9.66e-04  1.61e-04  5.84e-01  
 10  +4.9624e-01  +6.3176e-01  1.36e-01  4.56e-05  1.01e-02  8.00e-04  1.43e-04  2.23e-01  
 11  +4.9575e-01  +6.2664e-01  1.31e-01  4.16e-05  9.26e-03  7.23e-04  1.30e-04  1.72e-01  
 12  +4.9462e-01  +6.0752e-01  1.13e-01  3.70e-05  8.22e-03  2.46e-04  1.16e-04  5.20e-01  
 13  +4.9421e-01  +6.0483e-01  1.11e-01  3.65e-05  8.11e-03  2.20e-04  1.15e-04  7.75e-02  
 14  +4.8720e-01  +5.6956e-01  8.24e-02  2.04e-05  4.53e-03  1.77e-04  6.59e-05  5.04e-01  
 15  +4.8347e-01  +5.5162e-01  6.82e-02  1.63e-05  3.62e-03  1.19e-04  5.35e-05  2.98e-01  
 16  +4.8025e-01  +5.3613e-01  5.59e-02  1.29e-05  2.86e-03  5.49e-05  4.29e-05  4.87e-01  
 17  +4.7824e-01  +5.2716e-01  4.89e-02  1.09e-05  2.43e-03  3.26e-05  3.68e-05  3.93e-01  
 18  +4.7080e-01  +4.9593e-01  2.51e-02  5.17e-06  1.15e-03  4.99e-06  1.81e-05  8.19e-01  
 19  +4.6522e-01  +4.7383e-01  8.61e-03  1.68e-06  3.74e-04  1.02e-06  6.15e-06  8.29e-01  
 20  +4.6279e-01  +4.6467e-01  1.88e-03  3.59e-07  7.97e-05  1.99e-07  1.35e-06  8.21e-01  
 21  +4.6211e-01  +4.6215e-01  3.38e-05  6.41e-09  1.42e-06  3.38e-09  2.44e-08  9.83e-01  
 22  +4.6210e-01  +4.6210e-01  3.38e-07  6.41e-11  1.42e-08  3.38e-11  2.44e-10  9.90e-01  
 23  +4.6210e-01  +4.6210e-01  3.38e-09  6.41e-13  1.42e-10  3.38e-13  2.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.9087ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:15 PM: Optimal value: 4.621e-01
(CVXPY) Aug 31 04:55:15 PM: Compilation took 2.814e-02 seconds
(CVXPY) Aug 31 04:55:15 PM: Solver (including time spent in interface) took 1.133e-01 seconds
Iteration: 8, Objective: 0.4621
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:15 PM: Your problem has 5091 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:15 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:15 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:15 PM: Finished problem compilation (took 2.892e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5091
  constraints   = 10091
  nnz(P)        = 0
  nnz(A)        = 72874
  cones (total) = 1
    : Nonnegative = 1,  numel = 10091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8776e-01  +1.0522e+03  1.05e+03  4.06e-01  6.86e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3769e-01  +1.2997e+02  1.29e+02  1.57e-01  3.36e+01  1.32e-02  2.55e-01  8.69e-01  
  3  +5.0980e-01  +3.3301e+01  3.28e+01  1.21e-01  2.56e+01  3.47e-05  2.46e-01  1.68e-01  
  4  +5.0062e-01  +2.0597e+00  1.56e+00  1.06e-02  2.31e+00  4.99e-06  1.50e-01  7.57e-01  
  5  +5.0013e-01  +8.8361e-01  3.83e-01  2.59e-03  5.70e-01  1.56e-05  7.93e-02  7.86e-01  
  6  +5.0006e-01  +6.8745e-01  1.87e-01  1.26e-03  2.78e-01  1.22e-05  3.22e-02  6.84e-01  
  7  +5.0001e-01  +6.8029e-01  1.80e-01  1.04e-03  2.30e-01  3.87e-05  6.54e-03  8.97e-01  
  8  +4.9895e-01  +6.6965e-01  1.71e-01  1.00e-04  2.23e-02  6.86e-04  3.16e-04  9.57e-01  
  9  +4.9732e-01  +6.4625e-01  1.49e-01  5.27e-05  1.17e-02  9.00e-04  1.65e-04  5.87e-01  
 10  +4.9643e-01  +6.3458e-01  1.38e-01  4.60e-05  1.02e-02  7.19e-04  1.44e-04  2.69e-01  
 11  +4.9582e-01  +6.2893e-01  1.33e-01  4.20e-05  9.35e-03  6.55e-04  1.32e-04  1.62e-01  
 12  +4.9522e-01  +6.1821e-01  1.23e-01  4.05e-05  9.02e-03  3.98e-04  1.28e-04  2.66e-01  
 13  +4.9310e-01  +6.0296e-01  1.10e-01  3.28e-05  7.29e-03  2.59e-04  1.04e-04  4.21e-01  
 14  +4.8783e-01  +5.7305e-01  8.52e-02  2.30e-05  5.12e-03  1.17e-04  7.47e-05  5.33e-01  
 15  +4.8524e-01  +5.5905e-01  7.38e-02  1.94e-05  4.32e-03  3.06e-05  6.41e-05  6.18e-01  
 16  +4.8052e-01  +5.3860e-01  5.81e-02  1.40e-05  3.12e-03  1.83e-05  4.72e-05  4.22e-01  
 17  +4.7694e-01  +5.2360e-01  4.67e-02  1.07e-05  2.37e-03  1.27e-05  3.66e-05  3.21e-01  
 18  +4.7085e-01  +4.9787e-01  2.70e-02  5.59e-06  1.24e-03  5.88e-07  1.98e-05  9.90e-01  
 19  +4.6408e-01  +4.7145e-01  7.37e-03  1.44e-06  3.19e-04  3.82e-07  5.35e-06  9.90e-01  
 20  +4.6204e-01  +4.6377e-01  1.73e-03  3.33e-07  7.40e-05  9.05e-08  1.27e-06  8.16e-01  
 21  +4.6145e-01  +4.6156e-01  1.19e-04  2.28e-08  5.06e-06  6.45e-09  8.78e-08  9.87e-01  
 22  +4.6140e-01  +4.6140e-01  1.19e-06  2.28e-10  5.07e-08  6.46e-11  8.80e-10  9.90e-01  
 23  +4.6140e-01  +4.6140e-01  1.19e-08  2.28e-12  5.07e-10  6.52e-13  8.87e-12  9.90e-01  
 24  +4.6140e-01  +4.6140e-01  1.19e-10  2.28e-14  5.07e-12  6.57e-15  8.95e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.4741ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:16 PM: Optimal value: 4.614e-01
(CVXPY) Aug 31 04:55:16 PM: Compilation took 2.892e-02 seconds
(CVXPY) Aug 31 04:55:16 PM: Solver (including time spent in interface) took 1.191e-01 seconds
Iteration: 9, Objective: 0.4614
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:16 PM: Your problem has 5101 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:16 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:16 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:16 PM: Finished problem compilation (took 2.701e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5101
  constraints   = 10101
  nnz(P)        = 0
  nnz(A)        = 73893
  cones (total) = 1
    : Nonnegative = 1,  numel = 10101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8779e-01  +1.0521e+03  1.05e+03  4.06e-01  6.86e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3767e-01  +1.2993e+02  1.29e+02  1.57e-01  3.35e+01  1.32e-02  2.55e-01  8.69e-01  
  3  +5.0979e-01  +3.3277e+01  3.28e+01  1.21e-01  2.55e+01  3.47e-05  2.46e-01  1.69e-01  
  4  +5.0062e-01  +2.0573e+00  1.56e+00  1.06e-02  2.31e+00  4.98e-06  1.50e-01  7.58e-01  
  5  +5.0013e-01  +8.9644e-01  3.96e-01  2.68e-03  5.89e-01  1.54e-05  8.06e-02  7.70e-01  
  6  +5.0006e-01  +7.0655e-01  2.06e-01  1.39e-03  3.06e-01  1.25e-05  3.51e-02  6.62e-01  
  7  +5.0003e-01  +7.2018e-01  2.20e-01  1.27e-03  2.81e-01  3.38e-05  7.93e-03  9.73e-01  
  8  +4.9911e-01  +6.9924e-01  2.00e-01  1.15e-04  2.57e-02  5.92e-04  3.63e-04  9.56e-01  
  9  +4.9789e-01  +6.6828e-01  1.70e-01  6.51e-05  1.45e-02  6.82e-04  2.03e-04  5.58e-01  
 10  +4.9701e-01  +6.5835e-01  1.61e-01  5.46e-05  1.22e-02  6.63e-04  1.71e-04  2.25e-01  
 11  +4.9661e-01  +6.4823e-01  1.52e-01  4.99e-05  1.11e-02  5.28e-04  1.56e-04  2.25e-01  
 12  +4.9568e-01  +6.2619e-01  1.31e-01  4.42e-05  9.83e-03  2.13e-04  1.39e-04  4.78e-01  
 13  +4.9509e-01  +6.1928e-01  1.24e-01  4.30e-05  9.56e-03  1.55e-04  1.36e-04  1.97e-01  
 14  +4.8804e-01  +5.8200e-01  9.40e-02  2.38e-05  5.28e-03  1.36e-04  7.71e-05  4.99e-01  
 15  +4.8106e-01  +5.4765e-01  6.66e-02  1.60e-05  3.56e-03  7.39e-05  5.38e-05  3.94e-01  
 16  +4.8029e-01  +5.4411e-01  6.38e-02  1.50e-05  3.33e-03  5.78e-05  5.04e-05  2.23e-01  
 17  +4.7511e-01  +5.2022e-01  4.51e-02  1.01e-05  2.23e-03  1.67e-05  3.48e-05  6.60e-01  
 18  +4.7114e-01  +5.0218e-01  3.10e-02  6.56e-06  1.46e-03  8.15e-07  2.32e-05  9.90e-01  
 19  +4.6569e-01  +4.8048e-01  1.48e-02  3.02e-06  6.70e-04  4.38e-07  1.11e-05  5.96e-01  
 20  +4.6133e-01  +4.6329e-01  1.96e-03  3.86e-07  8.56e-05  8.99e-08  1.48e-06  9.64e-01  
 21  +4.6065e-01  +4.6080e-01  1.46e-04  2.85e-08  6.34e-06  6.78e-09  1.12e-07  9.32e-01  
 22  +4.6060e-01  +4.6060e-01  1.71e-06  3.33e-10  7.39e-08  8.06e-11  1.30e-09  9.90e-01  
 23  +4.6060e-01  +4.6060e-01  1.71e-08  3.33e-12  7.39e-10  8.06e-13  1.30e-11  9.90e-01  
 24  +4.6060e-01  +4.6060e-01  1.71e-10  3.33e-14  7.39e-12  8.26e-15  1.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.8222ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:16 PM: Optimal value: 4.606e-01
(CVXPY) Aug 31 04:55:16 PM: Compilation took 2.701e-02 seconds
(CVXPY) Aug 31 04:55:16 PM: Solver (including time spent in interface) took 1.145e-01 seconds
Iteration: 10, Objective: 0.4606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:16 PM: Your problem has 5111 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:16 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:16 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:16 PM: Finished problem compilation (took 3.097e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5111
  constraints   = 10111
  nnz(P)        = 0
  nnz(A)        = 75487
  cones (total) = 1
    : Nonnegative = 1,  numel = 10111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8769e-01  +1.0523e+03  1.05e+03  4.06e-01  6.86e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3760e-01  +1.2977e+02  1.29e+02  1.57e-01  3.35e+01  1.32e-02  2.55e-01  8.70e-01  
  3  +5.0978e-01  +3.3255e+01  3.27e+01  1.21e-01  2.55e+01  3.48e-05  2.46e-01  1.69e-01  
  4  +5.0062e-01  +2.0671e+00  1.57e+00  1.07e-02  2.33e+00  4.99e-06  1.50e-01  7.56e-01  
  5  +5.0013e-01  +8.8918e-01  3.89e-01  2.63e-03  5.79e-01  1.58e-05  7.89e-02  7.89e-01  
  6  +5.0009e-01  +7.7419e-01  2.74e-01  1.84e-03  4.07e-01  1.45e-05  4.25e-02  6.64e-01  
  7  +5.0004e-01  +7.0231e-01  2.02e-01  1.27e-03  2.80e-01  2.55e-05  1.06e-02  8.71e-01  
  8  +4.9921e-01  +6.8971e-01  1.91e-01  1.29e-04  2.88e-02  5.33e-04  4.14e-04  9.69e-01  
  9  +4.9812e-01  +6.6804e-01  1.70e-01  7.51e-05  1.67e-02  6.64e-04  2.38e-04  5.26e-01  
 10  +4.9708e-01  +6.5686e-01  1.60e-01  6.09e-05  1.36e-02  6.62e-04  1.93e-04  2.51e-01  
 11  +4.9585e-01  +6.3611e-01  1.40e-01  5.01e-05  1.12e-02  3.93e-04  1.59e-04  4.45e-01  
 12  +4.9454e-01  +6.2322e-01  1.29e-01  4.24e-05  9.44e-03  2.75e-04  1.35e-04  3.60e-01  
 13  +4.9299e-01  +6.0884e-01  1.16e-01  3.59e-05  7.99e-03  1.13e-04  1.15e-04  5.69e-01  
 14  +4.8452e-01  +5.6477e-01  8.03e-02  2.04e-05  4.54e-03  6.54e-05  6.76e-05  5.33e-01  
 15  +4.8018e-01  +5.4478e-01  6.46e-02  1.55e-05  3.44e-03  4.51e-05  5.23e-05  3.16e-01  
 16  +4.7773e-01  +5.3375e-01  5.60e-02  1.30e-05  2.90e-03  1.83e-05  4.48e-05  5.46e-01  
 17  +4.7492e-01  +5.2154e-01  4.66e-02  1.04e-05  2.32e-03  1.28e-05  3.64e-05  3.22e-01  
 18  +4.7435e-01  +5.1873e-01  4.44e-02  9.78e-06  2.17e-03  9.36e-06  3.41e-05  3.12e-01  
 19  +4.7278e-01  +5.1217e-01  3.94e-02  8.55e-06  1.90e-03  7.75e-06  3.01e-05  1.84e-01  
 20  +4.7266e-01  +5.1119e-01  3.85e-02  8.30e-06  1.85e-03  5.83e-06  2.93e-05  3.19e-01  
 21  +4.6819e-01  +4.9281e-01  2.46e-02  5.14e-06  1.14e-03  3.20e-06  1.87e-05  4.70e-01  
 22  +4.6555e-01  +4.8189e-01  1.63e-02  3.34e-06  7.43e-04  1.83e-06  1.24e-05  4.85e-01  
 23  +4.6544e-01  +4.8139e-01  1.59e-02  3.25e-06  7.22e-04  1.72e-06  1.20e-05  1.02e-01  
 24  +4.6540e-01  +4.8104e-01  1.56e-02  3.17e-06  7.05e-04  1.55e-06  1.17e-05  2.00e-01  
 25  +4.6217e-01  +4.6825e-01  6.08e-03  1.20e-06  2.67e-04  5.07e-07  4.58e-06  7.51e-01  
 26  +4.6204e-01  +4.6767e-01  5.63e-03  1.11e-06  2.48e-04  4.32e-07  4.26e-06  2.81e-01  
 27  +4.6068e-01  +4.6252e-01  1.83e-03  3.60e-07  7.99e-05  9.64e-08  1.40e-06  9.90e-01  
 28  +4.6013e-01  +4.6048e-01  3.49e-04  6.82e-08  1.52e-05  1.83e-08  2.69e-07  8.18e-01  
 29  +4.6000e-01  +4.6001e-01  4.15e-06  8.09e-10  1.80e-07  2.17e-10  3.19e-09  9.90e-01  
 30  +4.6000e-01  +4.6000e-01  4.15e-08  8.09e-12  1.80e-09  2.17e-12  3.19e-11  9.90e-01  
 31  +4.6000e-01  +4.6000e-01  4.15e-10  8.10e-14  1.80e-11  2.20e-14  3.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 133.4122ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:16 PM: Optimal value: 4.600e-01
(CVXPY) Aug 31 04:55:16 PM: Compilation took 3.097e-02 seconds
(CVXPY) Aug 31 04:55:16 PM: Solver (including time spent in interface) took 1.413e-01 seconds
Iteration: 11, Objective: 0.4600
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:16 PM: Your problem has 5113 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:16 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:16 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:16 PM: Finished problem compilation (took 2.878e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5113
  constraints   = 10113
  nnz(P)        = 0
  nnz(A)        = 75815
  cones (total) = 1
    : Nonnegative = 1,  numel = 10113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8770e-01  +1.0522e+03  1.05e+03  4.06e-01  6.86e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3760e-01  +1.2977e+02  1.29e+02  1.57e-01  3.35e+01  1.32e-02  2.55e-01  8.70e-01  
  3  +5.0978e-01  +3.3248e+01  3.27e+01  1.21e-01  2.55e+01  3.47e-05  2.46e-01  1.69e-01  
  4  +5.0062e-01  +2.0648e+00  1.56e+00  1.07e-02  2.32e+00  4.99e-06  1.50e-01  7.56e-01  
  5  +5.0013e-01  +8.9231e-01  3.92e-01  2.65e-03  5.84e-01  1.57e-05  7.92e-02  7.84e-01  
  6  +5.0009e-01  +7.7348e-01  2.73e-01  1.84e-03  4.06e-01  1.44e-05  4.38e-02  6.03e-01  
  7  +5.0005e-01  +7.2090e-01  2.21e-01  1.40e-03  3.09e-01  2.36e-05  1.22e-02  8.88e-01  
  8  +4.9930e-01  +6.9220e-01  1.93e-01  1.37e-04  3.06e-02  4.81e-04  4.42e-04  9.73e-01  
  9  +4.9827e-01  +6.7179e-01  1.74e-01  7.70e-05  1.72e-02  6.45e-04  2.45e-04  5.38e-01  
 10  +4.9733e-01  +6.5919e-01  1.62e-01  6.35e-05  1.41e-02  6.04e-04  2.01e-04  2.63e-01  
 11  +4.9683e-01  +6.5093e-01  1.54e-01  5.81e-05  1.29e-02  5.15e-04  1.84e-04  1.96e-01  
 12  +4.9577e-01  +6.2692e-01  1.31e-01  5.07e-05  1.13e-02  1.46e-04  1.61e-04  5.89e-01  
 13  +4.9438e-01  +6.1798e-01  1.24e-01  4.17e-05  9.29e-03  1.27e-04  1.33e-04  3.07e-01  
 14  +4.9409e-01  +6.1636e-01  1.22e-01  4.17e-05  9.28e-03  1.22e-04  1.33e-04  1.82e-02  
 15  +4.8607e-01  +5.7379e-01  8.77e-02  2.21e-05  4.93e-03  6.85e-05  7.28e-05  6.78e-01  
 16  +4.8161e-01  +5.5314e-01  7.15e-02  1.73e-05  3.84e-03  4.87e-05  5.81e-05  2.71e-01  
 17  +4.7960e-01  +5.4406e-01  6.45e-02  1.52e-05  3.38e-03  3.74e-05  5.18e-05  2.24e-01  
 18  +4.7592e-01  +5.2682e-01  5.09e-02  1.17e-05  2.60e-03  1.44e-05  4.07e-05  5.69e-01  
 19  +4.7414e-01  +5.1921e-01  4.51e-02  1.01e-05  2.25e-03  1.18e-05  3.57e-05  1.89e-01  
 20  +4.7399e-01  +5.1828e-01  4.43e-02  9.90e-06  2.20e-03  9.87e-06  3.49e-05  1.93e-01  
 21  +4.6932e-01  +4.9854e-01  2.92e-02  6.27e-06  1.39e-03  4.90e-06  2.28e-05  5.19e-01  
 22  +4.6449e-01  +4.7795e-01  1.35e-02  2.74e-06  6.09e-04  6.88e-07  1.03e-05  9.90e-01  
 23  +4.6295e-01  +4.7188e-01  8.93e-03  1.79e-06  3.97e-04  4.65e-07  6.84e-06  4.76e-01  
 24  +4.6291e-01  +4.7168e-01  8.78e-03  1.76e-06  3.92e-04  4.58e-07  6.74e-06  9.13e-02  
 25  +4.6107e-01  +4.6463e-01  3.56e-03  7.08e-07  1.57e-04  1.83e-07  2.78e-06  8.34e-01  
 26  +4.6039e-01  +4.6201e-01  1.61e-03  3.20e-07  7.10e-05  8.39e-08  1.27e-06  7.88e-01  
 27  +4.6005e-01  +4.6071e-01  6.66e-04  1.32e-07  2.92e-05  3.45e-08  5.26e-07  7.86e-01  
 28  +4.5980e-01  +4.5981e-01  8.77e-06  1.73e-09  3.84e-07  4.49e-10  6.95e-09  9.88e-01  
 29  +4.5980e-01  +4.5980e-01  8.77e-08  1.73e-11  3.84e-09  4.49e-12  6.95e-11  9.90e-01  
 30  +4.5980e-01  +4.5980e-01  8.77e-10  1.73e-13  3.84e-11  4.54e-14  7.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.1907ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:16 PM: Optimal value: 4.598e-01
(CVXPY) Aug 31 04:55:16 PM: Compilation took 2.878e-02 seconds
(CVXPY) Aug 31 04:55:16 PM: Solver (including time spent in interface) took 1.420e-01 seconds
Iteration: 12, Objective: 0.4598
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:16 PM: Your problem has 5115 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:16 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:16 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:16 PM: Finished problem compilation (took 2.464e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5115
  constraints   = 10115
  nnz(P)        = 0
  nnz(A)        = 76026
  cones (total) = 1
    : Nonnegative = 1,  numel = 10115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8769e-01  +1.0522e+03  1.05e+03  4.06e-01  6.86e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3759e-01  +1.2974e+02  1.29e+02  1.57e-01  3.34e+01  1.32e-02  2.55e-01  8.70e-01  
  3  +5.0978e-01  +3.3238e+01  3.27e+01  1.21e-01  2.55e+01  3.47e-05  2.46e-01  1.70e-01  
  4  +5.0062e-01  +2.0658e+00  1.57e+00  1.07e-02  2.32e+00  4.99e-06  1.50e-01  7.56e-01  
  5  +5.0013e-01  +8.9780e-01  3.98e-01  2.69e-03  5.92e-01  1.57e-05  7.98e-02  7.77e-01  
  6  +5.0009e-01  +7.9248e-01  2.92e-01  1.97e-03  4.34e-01  1.46e-05  4.75e-02  5.54e-01  
  7  +5.0005e-01  +7.1520e-01  2.15e-01  1.39e-03  3.07e-01  2.17e-05  1.40e-02  8.34e-01  
  8  +4.9928e-01  +6.8288e-01  1.84e-01  1.34e-04  2.99e-02  4.92e-04  4.34e-04  9.89e-01  
  9  +4.9818e-01  +6.6515e-01  1.67e-01  7.39e-05  1.65e-02  6.86e-04  2.36e-04  5.46e-01  
 10  +4.9730e-01  +6.5467e-01  1.57e-01  6.24e-05  1.39e-02  6.51e-04  1.99e-04  2.31e-01  
 11  +4.9686e-01  +6.4822e-01  1.51e-01  5.76e-05  1.28e-02  5.71e-04  1.83e-04  1.80e-01  
 12  +4.9588e-01  +6.2585e-01  1.30e-01  5.19e-05  1.16e-02  1.34e-04  1.65e-04  6.06e-01  
 13  +4.9426e-01  +6.1634e-01  1.22e-01  4.13e-05  9.20e-03  1.20e-04  1.32e-04  3.32e-01  
 14  +4.9400e-01  +6.1491e-01  1.21e-01  4.12e-05  9.19e-03  1.16e-04  1.32e-04  1.59e-02  
 15  +4.8901e-01  +5.8779e-01  9.88e-02  2.85e-05  6.33e-03  5.18e-05  9.29e-05  6.35e-01  
 16  +4.8486e-01  +5.6804e-01  8.32e-02  2.21e-05  4.93e-03  3.73e-05  7.38e-05  3.09e-01  
 17  +4.7992e-01  +5.4518e-01  6.53e-02  1.60e-05  3.57e-03  2.12e-05  5.48e-05  4.36e-01  
 18  +4.7948e-01  +5.4272e-01  6.32e-02  1.55e-05  3.44e-03  1.64e-05  5.30e-05  2.21e-01  
 19  +4.7717e-01  +5.3255e-01  5.54e-02  1.31e-05  2.92e-03  1.23e-05  4.56e-05  2.63e-01  
 20  +4.7459e-01  +5.2110e-01  4.65e-02  1.06e-05  2.35e-03  7.73e-06  3.72e-05  4.10e-01  
 21  +4.7127e-01  +5.0587e-01  3.46e-02  7.45e-06  1.66e-03  1.54e-06  2.67e-05  9.56e-01  
 22  +4.6632e-01  +4.8570e-01  1.94e-02  4.03e-06  8.96e-04  8.68e-07  1.50e-05  5.57e-01  
 23  +4.6238e-01  +4.6971e-01  7.33e-03  1.48e-06  3.29e-04  3.48e-07  5.70e-06  7.75e-01  
 24  +4.6193e-01  +4.6801e-01  6.07e-03  1.21e-06  2.70e-04  2.91e-07  4.70e-06  2.66e-01  
 25  +4.6113e-01  +4.6472e-01  3.59e-03  7.13e-07  1.59e-04  1.90e-07  2.80e-06  9.90e-01  
 26  +4.5992e-01  +4.6026e-01  3.33e-04  6.58e-08  1.46e-05  1.69e-08  2.64e-07  9.90e-01  
 27  +4.5980e-01  +4.5981e-01  3.80e-06  7.49e-10  1.66e-07  1.92e-10  3.01e-09  9.89e-01  
 28  +4.5980e-01  +4.5980e-01  3.80e-08  7.49e-12  1.66e-09  1.92e-12  3.01e-11  9.90e-01  
 29  +4.5980e-01  +4.5980e-01  3.80e-10  7.49e-14  1.66e-11  1.95e-14  3.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 122.5822ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:17 PM: Optimal value: 4.598e-01
(CVXPY) Aug 31 04:55:17 PM: Compilation took 2.464e-02 seconds
(CVXPY) Aug 31 04:55:17 PM: Solver (including time spent in interface) took 1.297e-01 seconds
Iteration: 13, Objective: 0.4598
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:55:17 PM: Your problem has 5117 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:55:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:55:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:55:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:55:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:55:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:55:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:55:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:55:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:55:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:55:17 PM: Finished problem compilation (took 3.073e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5117
  constraints   = 10117
  nnz(P)        = 0
  nnz(A)        = 76257
  cones (total) = 1
    : Nonnegative = 1,  numel = 10117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8770e-01  +1.0522e+03  1.05e+03  4.06e-01  6.86e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3758e-01  +1.2973e+02  1.29e+02  1.57e-01  3.34e+01  1.32e-02  2.55e-01  8.70e-01  
  3  +5.0978e-01  +3.3233e+01  3.27e+01  1.21e-01  2.55e+01  3.47e-05  2.46e-01  1.70e-01  
  4  +5.0062e-01  +2.0644e+00  1.56e+00  1.07e-02  2.32e+00  4.99e-06  1.50e-01  7.57e-01  
  5  +5.0015e-01  +9.3750e-01  4.37e-01  2.96e-03  6.51e-01  1.54e-05  8.44e-02  7.25e-01  
  6  +5.0009e-01  +7.7894e-01  2.79e-01  1.88e-03  4.14e-01  1.36e-05  4.65e-02  5.57e-01  
  7  +5.0006e-01  +7.3274e-01  2.33e-01  1.50e-03  3.31e-01  2.16e-05  1.49e-02  8.28e-01  
  8  +4.9967e-01  +7.1189e-01  2.12e-01  2.82e-04  6.27e-02  2.58e-04  9.44e-04  9.45e-01  
  9  +4.9822e-01  +6.9249e-01  1.94e-01  7.51e-05  1.67e-02  8.59e-04  2.41e-04  7.71e-01  
 10  +4.9676e-01  +6.6670e-01  1.70e-01  6.39e-05  1.42e-02  6.07e-04  2.05e-04  2.89e-01  
 11  +4.9596e-01  +6.5202e-01  1.56e-01  5.62e-05  1.25e-02  4.59e-04  1.79e-04  2.80e-01  
 12  +4.9419e-01  +6.2739e-01  1.33e-01  4.54e-05  1.01e-02  2.19e-04  1.46e-04  4.97e-01  
 13  +4.9349e-01  +6.2174e-01  1.28e-01  4.04e-05  9.00e-03  1.84e-04  1.30e-04  2.50e-01  
 14  +4.9282e-01  +6.1708e-01  1.24e-01  4.02e-05  8.95e-03  1.64e-04  1.30e-04  4.62e-02  
 15  +4.8694e-01  +5.8350e-01  9.66e-02  2.62e-05  5.84e-03  1.06e-04  8.67e-05  4.76e-01  
 16  +4.8349e-01  +5.6582e-01  8.23e-02  2.12e-05  4.72e-03  7.99e-05  7.12e-05  2.53e-01  
 17  +4.8185e-01  +5.5553e-01  7.37e-02  1.85e-05  4.11e-03  3.49e-05  6.25e-05  5.04e-01  
 18  +4.7673e-01  +5.3075e-01  5.40e-02  1.27e-05  2.83e-03  6.46e-06  4.43e-05  7.56e-01  
 19  +4.7357e-01  +5.1718e-01  4.36e-02  9.91e-06  2.20e-03  4.94e-06  3.51e-05  2.53e-01  
 20  +4.7097e-01  +5.0515e-01  3.42e-02  7.41e-06  1.65e-03  2.45e-06  2.66e-05  6.86e-01  
 21  +4.6570e-01  +4.8294e-01  1.72e-02  3.55e-06  7.89e-04  8.37e-07  1.32e-05  9.90e-01  
 22  +4.6229e-01  +4.6929e-01  7.00e-03  1.41e-06  3.13e-04  3.54e-07  5.42e-06  7.64e-01  
 23  +4.6123e-01  +4.6522e-01  3.99e-03  8.02e-07  1.78e-04  1.97e-07  3.16e-06  8.10e-01  
 24  +4.6069e-01  +4.6310e-01  2.40e-03  4.78e-07  1.06e-04  1.24e-07  1.89e-06  8.06e-01  
 25  +4.5997e-01  +4.6042e-01  4.55e-04  8.98e-08  1.99e-05  2.32e-08  3.60e-07  8.44e-01  
 26  +4.5980e-01  +4.5981e-01  7.14e-06  1.41e-09  3.13e-07  3.62e-10  5.66e-09  9.86e-01  
 27  +4.5980e-01  +4.5980e-01  7.14e-08  1.41e-11  3.13e-09  3.62e-12  5.66e-11  9.90e-01  
 28  +4.5980e-01  +4.5980e-01  7.14e-10  1.41e-13  3.13e-11  3.67e-14  5.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.3416ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:55:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:55:17 PM: Optimal value: 4.598e-01
(CVXPY) Aug 31 04:55:17 PM: Compilation took 3.073e-02 seconds
(CVXPY) Aug 31 04:55:17 PM: Solver (including time spent in interface) took 1.333e-01 seconds
FULL MODEL:
  Accruacy: 0.5284
  Our objective: 0.05679999999999996

IF 
    (x1 = 1 AND x4 = 0 AND x5 = 0)                                             <-- (term's our objective: 0.021600000000000036)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x0 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.005799999999999994)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x2 = 0 AND x6 = 0)            <-- (term's our objective: 0.005200000000000038)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.0026000000000000346)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x6 = 0) <-- (term's our objective: 0.003000000000000008)
 OR (x0 = 1 AND x2 = 1 AND x6 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.003000000000000053)
 OR (x2 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.006400000000000032)
 OR (x1 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.002000000000000053)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0) <-- (term's our objective: 0.0020000000000000304)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0020000000000000304)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x6 = 0) <-- (term's our objective: 0.0017999999999999856)
 OR (x0 = 1 AND x2 = 1 AND x5 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.001400000000000008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.542586088180542
Best over terms:
  Our final objective: 0.021600000000000036
    Its accruacy: 0.5108
    Its hamming distance: 6
  Shortest hamming distance: 4
    Its our objective: 0.006400000000000032
  Highest accruacy: 0.5108
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

