Command:
python test_script.py -s smallest_subclass -d 7 -n 100 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = -0.02
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 7.

Computed total variation: 0.7
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:25 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:25 PM: Finished problem compilation (took 4.151e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 515
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9792e-01  +5.0662e+01  5.02e+01  8.68e-01  9.46e+00  1.00e+00  1.03e+00   ------   
  1  +5.8494e-01  +1.0900e+01  1.03e+01  3.55e-01  5.53e+00  3.85e-03  5.61e-01  6.11e-01  
  2  +5.2463e-01  +1.5927e+00  1.07e+00  8.16e-02  1.55e+00  1.48e-02  2.11e-01  9.90e-01  
  3  +5.0161e-01  +6.3801e-01  1.36e-01  1.28e-02  2.47e-01  1.68e-03  5.24e-02  9.68e-01  
  4  +4.9653e-01  +5.8736e-01  9.08e-02  4.19e-03  8.35e-02  2.25e-03  1.51e-02  8.10e-01  
  5  +4.8748e-01  +5.3461e-01  4.71e-02  1.30e-03  2.64e-02  1.78e-03  4.87e-03  7.01e-01  
  6  +4.8173e-01  +4.8912e-01  7.39e-03  2.11e-04  4.27e-03  1.73e-05  8.17e-04  9.51e-01  
  7  +4.8021e-01  +4.8059e-01  3.89e-04  1.09e-05  2.19e-04  9.18e-07  4.23e-05  9.48e-01  
  8  +4.8015e-01  +4.8034e-01  1.89e-04  4.70e-06  9.51e-05  6.61e-07  1.82e-05  7.72e-01  
  9  +4.8010e-01  +4.8010e-01  3.26e-06  8.08e-08  1.64e-06  1.23e-08  3.13e-07  9.90e-01  
 10  +4.8010e-01  +4.8010e-01  3.26e-08  8.09e-10  1.64e-08  1.24e-10  3.13e-09  9.90e-01  
 11  +4.8010e-01  +4.8010e-01  3.26e-10  8.09e-12  1.64e-10  1.24e-12  3.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 407.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:25 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:25 PM: Optimal value: 4.801e-01
(CVXPY) Aug 31 04:53:25 PM: Compilation took 4.151e-03 seconds
(CVXPY) Aug 31 04:53:25 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:25 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:25 PM: Finished problem compilation (took 3.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 632
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9054e-01  +5.2074e+01  5.16e+01  8.75e-01  9.69e+00  1.00e+00  1.07e+00   ------   
  1  +5.4864e-01  +1.1150e+01  1.06e+01  3.66e-01  5.60e+00  3.83e-03  5.87e-01  6.09e-01  
  2  +4.9272e-01  +2.3372e+00  1.84e+00  1.07e-01  2.07e+00  1.74e-02  2.56e-01  8.52e-01  
  3  +4.1593e-01  +1.4023e+00  9.86e-01  3.28e-02  6.65e-01  1.49e-02  9.29e-02  7.87e-01  
  4  +3.5474e-01  +7.4629e-01  3.92e-01  1.08e-02  2.14e-01  5.41e-03  3.77e-02  6.31e-01  
  5  +3.2030e-01  +4.5412e-01  1.34e-01  3.65e-03  7.12e-02  1.44e-03  1.52e-02  6.40e-01  
  6  +3.0265e-01  +3.1418e-01  1.15e-02  3.24e-04  6.24e-03  5.51e-05  1.60e-03  9.34e-01  
  7  +3.0041e-01  +3.0092e-01  5.13e-04  1.44e-05  2.77e-04  1.86e-06  7.78e-05  9.72e-01  
  8  +3.0031e-01  +3.0034e-01  2.93e-05  8.34e-07  1.59e-05  4.26e-08  5.19e-06  9.40e-01  
  9  +3.0030e-01  +3.0030e-01  3.13e-07  8.90e-09  1.70e-07  4.85e-10  5.74e-08  9.89e-01  
 10  +3.0030e-01  +3.0030e-01  3.13e-09  8.90e-11  1.70e-09  4.84e-12  5.74e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 420.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:25 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:25 PM: Optimal value: 3.003e-01
(CVXPY) Aug 31 04:53:25 PM: Compilation took 3.009e-03 seconds
(CVXPY) Aug 31 04:53:25 PM: Solver (including time spent in interface) took 9.911e-04 seconds
Iteration: 2, Objective: 0.3003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:26 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Finished problem compilation (took 3.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 695
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8923e-01  +5.2070e+01  5.16e+01  8.80e-01  9.50e+00  1.00e+00  1.07e+00   ------   
  1  +5.3532e-01  +1.1143e+01  1.06e+01  3.71e-01  5.36e+00  3.86e-03  5.81e-01  6.11e-01  
  2  +4.7626e-01  +2.3434e+00  1.87e+00  9.99e-02  1.90e+00  1.82e-02  2.39e-01  8.70e-01  
  3  +3.8206e-01  +1.3689e+00  9.87e-01  2.94e-02  5.88e-01  1.52e-02  8.18e-02  8.04e-01  
  4  +3.1562e-01  +6.8430e-01  3.69e-01  9.33e-03  1.85e-01  5.64e-03  2.97e-02  6.60e-01  
  5  +2.7727e-01  +4.1480e-01  1.38e-01  3.33e-03  6.55e-02  1.95e-03  1.18e-02  6.48e-01  
  6  +2.5845e-01  +3.2095e-01  6.25e-02  1.45e-03  2.89e-02  6.43e-04  5.51e-03  6.84e-01  
  7  +2.4317e-01  +2.5240e-01  9.23e-03  2.04e-04  4.05e-03  7.88e-05  8.32e-04  8.77e-01  
  8  +2.4072e-01  +2.4108e-01  3.64e-04  8.12e-06  1.60e-04  2.12e-06  3.41e-05  9.59e-01  
  9  +2.4060e-01  +2.4062e-01  1.11e-05  2.55e-07  4.96e-06  3.65e-08  1.17e-06  9.72e-01  
 10  +2.4060e-01  +2.4060e-01  1.11e-07  2.54e-09  4.95e-08  3.64e-10  1.17e-08  9.90e-01  
 11  +2.4060e-01  +2.4060e-01  1.11e-09  2.54e-11  4.96e-10  3.64e-12  1.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 636.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:26 PM: Optimal value: 2.406e-01
(CVXPY) Aug 31 04:53:26 PM: Compilation took 3.004e-03 seconds
(CVXPY) Aug 31 04:53:26 PM: Solver (including time spent in interface) took 1.207e-03 seconds
Iteration: 3, Objective: 0.2406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:26 PM: Your problem has 95 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Finished problem compilation (took 2.977e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 95
  constraints   = 145
  nnz(P)        = 0
  nnz(A)        = 735
  cones (total) = 1
    : Nonnegative = 1,  numel = 145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8684e-01  +5.2451e+01  5.20e+01  8.84e-01  9.26e+00  1.00e+00  1.08e+00   ------   
  1  +5.0898e-01  +1.1305e+01  1.08e+01  3.74e-01  5.17e+00  3.91e-03  5.85e-01  6.07e-01  
  2  +4.3843e-01  +2.5979e+00  2.16e+00  9.98e-02  1.83e+00  1.97e-02  2.39e-01  8.50e-01  
  3  +3.2775e-01  +1.1612e+00  8.33e-01  2.50e-02  4.79e-01  1.10e-02  7.02e-02  8.26e-01  
  4  +2.7367e-01  +6.6939e-01  3.96e-01  1.08e-02  2.05e-01  4.62e-03  3.39e-02  5.92e-01  
  5  +2.2957e-01  +3.4286e-01  1.13e-01  3.00e-03  5.62e-02  1.11e-03  1.08e-02  7.10e-01  
  6  +2.1597e-01  +2.7779e-01  6.18e-02  1.55e-03  2.95e-02  4.66e-04  5.94e-03  6.77e-01  
  7  +2.0204e-01  +2.0669e-01  4.65e-03  1.14e-04  2.17e-03  2.92e-05  4.72e-04  9.25e-01  
  8  +2.0091e-01  +2.0124e-01  3.38e-04  8.45e-06  1.59e-04  1.32e-06  3.70e-05  9.22e-01  
  9  +2.0080e-01  +2.0082e-01  1.20e-05  3.06e-07  5.71e-06  3.98e-08  1.45e-06  9.77e-01  
 10  +2.0080e-01  +2.0080e-01  1.20e-07  3.07e-09  5.72e-08  3.98e-10  1.46e-08  9.90e-01  
 11  +2.0080e-01  +2.0080e-01  1.20e-09  3.07e-11  5.73e-10  3.98e-12  1.46e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 626.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:26 PM: Optimal value: 2.008e-01
(CVXPY) Aug 31 04:53:26 PM: Compilation took 2.977e-03 seconds
(CVXPY) Aug 31 04:53:26 PM: Solver (including time spent in interface) took 1.029e-03 seconds
Iteration: 4, Objective: 0.2008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:26 PM: Your problem has 105 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Finished problem compilation (took 3.164e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 105
  constraints   = 155
  nnz(P)        = 0
  nnz(A)        = 782
  cones (total) = 1
    : Nonnegative = 1,  numel = 155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8473e-01  +5.2504e+01  5.20e+01  8.88e-01  9.07e+00  1.00e+00  1.08e+00   ------   
  1  +4.8965e-01  +1.1526e+01  1.10e+01  3.85e-01  5.06e+00  3.95e-03  5.93e-01  5.96e-01  
  2  +4.1555e-01  +2.4242e+00  2.01e+00  9.35e-02  1.68e+00  2.13e-02  2.29e-01  8.97e-01  
  3  +3.1798e-01  +1.0624e+00  7.44e-01  2.42e-02  4.48e-01  1.07e-02  6.90e-02  7.95e-01  
  4  +2.5908e-01  +5.7766e-01  3.19e-01  9.01e-03  1.65e-01  3.94e-03  2.87e-02  6.36e-01  
  5  +2.1956e-01  +3.0554e-01  8.60e-02  2.37e-03  4.28e-02  8.14e-04  8.51e-03  7.54e-01  
  6  +2.0268e-01  +2.1020e-01  7.52e-03  2.06e-04  3.68e-03  2.62e-05  7.99e-04  9.90e-01  
  7  +2.0104e-01  +2.0213e-01  1.09e-03  3.03e-05  5.32e-04  3.04e-06  1.25e-04  8.48e-01  
  8  +2.0075e-01  +2.0091e-01  1.54e-04  4.15e-06  7.20e-05  4.18e-07  2.08e-05  9.17e-01  
  9  +2.0070e-01  +2.0071e-01  5.24e-06  1.39e-07  2.41e-06  1.49e-08  7.38e-07  9.82e-01  
 10  +2.0070e-01  +2.0070e-01  5.25e-08  1.39e-09  2.41e-08  1.49e-10  7.42e-09  9.90e-01  
 11  +2.0070e-01  +2.0070e-01  5.26e-10  1.39e-11  2.41e-10  1.50e-12  7.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 622.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:26 PM: Optimal value: 2.007e-01
(CVXPY) Aug 31 04:53:26 PM: Compilation took 3.164e-03 seconds
(CVXPY) Aug 31 04:53:26 PM: Solver (including time spent in interface) took 8.483e-04 seconds
Iteration: 5, Objective: 0.2007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:26 PM: Your problem has 115 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Finished problem compilation (took 3.036e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 165
  nnz(P)        = 0
  nnz(A)        = 829
  cones (total) = 1
    : Nonnegative = 1,  numel = 165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8418e-01  +5.2384e+01  5.19e+01  8.91e-01  8.88e+00  1.00e+00  1.08e+00   ------   
  1  +4.7623e-01  +1.1551e+01  1.11e+01  3.87e-01  4.90e+00  3.98e-03  5.88e-01  5.95e-01  
  2  +3.9911e-01  +2.7097e+00  2.31e+00  1.03e-01  1.77e+00  2.14e-02  2.46e-01  8.46e-01  
  3  +3.0218e-01  +1.2092e+00  9.07e-01  2.91e-02  5.24e-01  1.12e-02  8.09e-02  7.80e-01  
  4  +2.4499e-01  +6.3588e-01  3.91e-01  1.13e-02  2.01e-01  4.34e-03  3.50e-02  6.27e-01  
  5  +1.9727e-01  +2.8965e-01  9.24e-02  2.52e-03  4.45e-02  8.50e-04  8.84e-03  8.00e-01  
  6  +1.8271e-01  +2.2149e-01  3.88e-02  1.03e-03  1.82e-02  2.50e-04  3.80e-03  7.37e-01  
  7  +1.7186e-01  +1.7469e-01  2.83e-03  7.25e-05  1.28e-03  1.42e-05  2.82e-04  9.38e-01  
  8  +1.7109e-01  +1.7131e-01  2.20e-04  5.77e-06  1.00e-04  5.00e-07  2.50e-05  9.35e-01  
  9  +1.7100e-01  +1.7101e-01  5.87e-06  1.56e-07  2.68e-06  1.72e-08  7.25e-07  9.84e-01  
 10  +1.7100e-01  +1.7100e-01  5.86e-08  1.56e-09  2.68e-08  1.72e-10  7.27e-09  9.90e-01  
 11  +1.7100e-01  +1.7100e-01  5.87e-10  1.56e-11  2.68e-10  1.72e-12  7.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 701.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:26 PM: Optimal value: 1.710e-01
(CVXPY) Aug 31 04:53:26 PM: Compilation took 3.036e-03 seconds
(CVXPY) Aug 31 04:53:26 PM: Solver (including time spent in interface) took 1.061e-03 seconds
Iteration: 6, Objective: 0.1710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:26 PM: Your problem has 125 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Finished problem compilation (took 4.932e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 125
  constraints   = 175
  nnz(P)        = 0
  nnz(A)        = 855
  cones (total) = 1
    : Nonnegative = 1,  numel = 175

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8407e-01  +5.2403e+01  5.19e+01  8.94e-01  8.66e+00  1.00e+00  1.08e+00   ------   
  1  +4.6596e-01  +1.1599e+01  1.11e+01  3.87e-01  4.73e+00  4.02e-03  5.86e-01  5.94e-01  
  2  +3.8146e-01  +2.7715e+00  2.39e+00  1.03e-01  1.71e+00  2.16e-02  2.49e-01  8.34e-01  
  3  +2.8983e-01  +1.2765e+00  9.87e-01  3.23e-02  5.59e-01  1.16e-02  9.03e-02  7.41e-01  
  4  +2.4755e-01  +8.2909e-01  5.82e-01  1.74e-02  3.00e-01  6.55e-03  5.27e-02  4.66e-01  
  5  +1.9328e-01  +3.0761e-01  1.14e-01  3.27e-03  5.57e-02  7.76e-04  1.12e-02  8.84e-01  
  6  +1.7504e-01  +2.2965e-01  5.46e-02  1.47e-03  2.52e-02  3.20e-04  5.22e-03  6.85e-01  
  7  +1.6187e-01  +1.6417e-01  2.30e-03  6.16e-05  1.05e-03  9.18e-06  2.29e-04  9.66e-01  
  8  +1.6126e-01  +1.6146e-01  1.92e-04  5.37e-06  8.98e-05  4.48e-07  2.22e-05  9.24e-01  
  9  +1.6120e-01  +1.6121e-01  5.09e-06  1.44e-07  2.39e-06  1.44e-08  6.23e-07  9.84e-01  
 10  +1.6120e-01  +1.6120e-01  5.09e-08  1.44e-09  2.39e-08  1.44e-10  6.24e-09  9.90e-01  
 11  +1.6120e-01  +1.6120e-01  5.09e-10  1.44e-11  2.39e-10  1.44e-12  6.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 611µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:26 PM: Optimal value: 1.612e-01
(CVXPY) Aug 31 04:53:26 PM: Compilation took 4.932e-03 seconds
(CVXPY) Aug 31 04:53:26 PM: Solver (including time spent in interface) took 1.010e-03 seconds
Iteration: 7, Objective: 0.1612
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:26 PM: Your problem has 129 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:26 PM: Finished problem compilation (took 3.021e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 129
  constraints   = 179
  nnz(P)        = 0
  nnz(A)        = 873
  cones (total) = 1
    : Nonnegative = 1,  numel = 179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8238e-01  +5.2485e+01  5.20e+01  8.95e-01  8.60e+00  1.00e+00  1.08e+00   ------   
  1  +4.5414e-01  +1.1751e+01  1.13e+01  3.93e-01  4.73e+00  4.04e-03  5.94e-01  5.86e-01  
  2  +3.6717e-01  +2.7375e+00  2.37e+00  1.03e-01  1.70e+00  2.27e-02  2.50e-01  8.50e-01  
  3  +2.7288e-01  +1.1434e+00  8.70e-01  2.90e-02  4.96e-01  1.08e-02  8.21e-02  7.87e-01  
  4  +2.4009e-01  +8.1327e-01  5.73e-01  1.77e-02  3.01e-01  6.71e-03  5.37e-02  4.21e-01  
  5  +1.9363e-01  +3.2286e-01  1.29e-01  3.88e-03  6.50e-02  1.00e-03  1.33e-02  8.51e-01  
  6  +1.7791e-01  +2.4920e-01  7.13e-02  2.02e-03  3.42e-02  5.12e-04  7.11e-03  5.49e-01  
  7  +1.6224e-01  +1.6603e-01  3.79e-03  1.06e-04  1.79e-03  1.38e-05  3.91e-04  9.80e-01  
  8  +1.6149e-01  +1.6262e-01  1.13e-03  3.24e-05  5.37e-04  3.78e-06  1.30e-04  7.24e-01  
  9  +1.6122e-01  +1.6156e-01  3.38e-04  9.55e-06  1.57e-04  1.16e-06  4.32e-05  8.42e-01  
 10  +1.6110e-01  +1.6112e-01  1.25e-05  3.50e-07  5.77e-06  3.53e-08  1.68e-06  9.66e-01  
 11  +1.6110e-01  +1.6110e-01  1.26e-07  3.52e-09  5.80e-08  3.55e-10  1.70e-08  9.90e-01  
 12  +1.6110e-01  +1.6110e-01  1.26e-09  3.53e-11  5.81e-10  3.55e-12  1.70e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 729.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:26 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:26 PM: Optimal value: 1.611e-01
(CVXPY) Aug 31 04:53:26 PM: Compilation took 3.021e-03 seconds
(CVXPY) Aug 31 04:53:26 PM: Solver (including time spent in interface) took 1.002e-03 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.6799999999999999

IF 
    (x6 = 1 AND x0 = 0 AND x4 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.14)
 OR (x3 = 1 AND x5 = 1 AND x6 = 1 AND x1 = 0)                                  <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.03999999999999996)
 OR (x0 = 1 AND x4 = 1 AND x5 = 1 AND x2 = 0 AND x3 = 0)                       <-- (term's our objective: 0.07999999999999996)
 OR (x4 = 1 AND x5 = 1 AND x1 = 0 AND x3 = 0 AND x6 = 0)                       <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x5 = 0)                       <-- (term's our objective: 0.040000000000000036)
 OR (x3 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.040000000000000036)
 OR (x0 = 1 AND x3 = 1 AND x5 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.040000000000000036)
 OR (x1 = 1 AND x2 = 1 AND x5 = 1 AND x0 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.040000000000000036)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.040000000000000036)
 OR (x1 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.020000000000000018)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.4233157634735107
Best over terms:
  Our final objective: 0.14
    Its accruacy: 0.57
    Its hamming distance: 5
  Shortest hamming distance: 2
    Its our objective: 0.020000000000000018
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

