Command:
python test_script.py -s smallest_subclass -d 2 -n 100 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.34
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 2.

Computed total variation: 0.34
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:25 PM: Your problem has 55 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:25 PM: Finished problem compilation (took 4.819e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 255
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9468e-01  +5.0748e+01  5.03e+01  8.48e-01  6.47e+00  1.00e+00  1.04e+00   ------   
  1  +6.3034e-01  +9.1928e+00  8.56e+00  2.33e-01  2.92e+00  4.48e-03  4.02e-01  7.26e-01  
  2  +5.3876e-01  +1.6711e+00  1.13e+00  6.21e-02  8.55e-01  6.34e-03  1.52e-01  7.85e-01  
  3  +4.9963e-01  +7.8436e-01  2.85e-01  1.23e-02  1.72e-01  8.37e-03  3.76e-02  9.00e-01  
  4  +4.8123e-01  +7.6289e-01  2.82e-01  6.14e-03  8.74e-02  1.35e-02  1.91e-02  5.84e-01  
  5  +4.3395e-01  +5.5238e-01  1.18e-01  2.50e-03  3.51e-02  1.21e-04  9.42e-03  7.21e-01  
  6  +3.9461e-01  +4.0729e-01  1.27e-02  2.54e-04  3.54e-03  5.19e-05  1.16e-03  9.90e-01  
  7  +3.9016e-01  +3.9031e-01  1.58e-04  3.12e-06  4.35e-05  5.69e-07  1.45e-05  9.88e-01  
  8  +3.9010e-01  +3.9010e-01  1.58e-06  3.12e-08  4.35e-07  5.69e-09  1.45e-07  9.90e-01  
  9  +3.9010e-01  +3.9010e-01  1.58e-08  3.12e-10  4.35e-09  5.69e-11  1.45e-09  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  1.58e-10  3.12e-12  4.35e-11  5.69e-13  1.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 266.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:25 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:25 PM: Optimal value: 3.901e-01
(CVXPY) Aug 31 04:44:25 PM: Compilation took 4.819e-03 seconds
(CVXPY) Aug 31 04:44:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:25 PM: Your problem has 56 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:25 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:25 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:25 PM: Finished problem compilation (took 2.691e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 276
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8908e-01  +5.2117e+01  5.16e+01  8.50e-01  6.72e+00  1.00e+00  1.07e+00   ------   
  1  +6.1462e-01  +9.4008e+00  8.79e+00  2.38e-01  3.08e+00  4.41e-03  4.23e-01  7.25e-01  
  2  +5.3520e-01  +2.0832e+00  1.55e+00  7.39e-02  1.07e+00  6.70e-03  1.75e-01  7.18e-01  
  3  +4.9802e-01  +1.7159e+00  1.22e+00  3.43e-02  5.12e-01  9.46e-03  8.93e-02  6.09e-01  
  4  +4.3823e-01  +9.4425e-01  5.06e-01  1.21e-02  1.80e-01  3.98e-03  3.73e-02  6.13e-01  
  5  +3.9512e-01  +5.6803e-01  1.73e-01  3.46e-03  5.12e-02  1.90e-03  1.13e-02  7.61e-01  
  6  +3.7045e-01  +4.9258e-01  1.22e-01  1.96e-03  2.90e-02  1.29e-03  6.68e-03  5.50e-01  
  7  +3.3781e-01  +3.5712e-01  1.93e-02  3.29e-04  4.79e-03  1.46e-04  1.30e-03  9.90e-01  
  8  +3.3025e-01  +3.3057e-01  3.20e-04  5.45e-06  7.93e-05  1.48e-06  2.28e-05  9.84e-01  
  9  +3.3010e-01  +3.3010e-01  3.19e-06  5.44e-08  7.92e-07  1.48e-08  2.28e-07  9.90e-01  
 10  +3.3010e-01  +3.3010e-01  3.19e-08  5.44e-10  7.92e-09  1.48e-10  2.28e-09  9.90e-01  
 11  +3.3010e-01  +3.3010e-01  3.19e-10  5.44e-12  7.92e-11  1.48e-12  2.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 229.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:25 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:25 PM: Optimal value: 3.301e-01
(CVXPY) Aug 31 04:44:25 PM: Compilation took 2.691e-03 seconds
(CVXPY) Aug 31 04:44:25 PM: Solver (including time spent in interface) took 1.020e-03 seconds
FULL MODEL:
  Accruacy: 0.67
  Our objective: 0.34

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.34)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7921867370605469
Best over terms:
  Our final objective: 0.34
    Its accruacy: 0.67
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.34
  Highest accruacy: 0.67
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

