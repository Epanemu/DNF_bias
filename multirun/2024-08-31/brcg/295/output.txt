Command:
python test_script.py -s smallest_subclass -d 8 -n 500 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.016
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 8.

Computed total variation: 0.552
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:32 PM: Your problem has 267 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Finished problem compilation (took 7.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 267
  constraints   = 517
  nnz(P)        = 0
  nnz(A)        = 2767
  cones (total) = 1
    : Nonnegative = 1,  numel = 517

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +2.5085e+02  2.50e+02  9.37e-01  2.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.8348e-01  +5.3870e+01  5.33e+01  3.95e-01  1.48e+01  3.82e-03  5.64e-01  5.98e-01  
  2  +5.3171e-01  +6.4908e+00  5.96e+00  1.25e-01  5.92e+00  1.52e-02  2.53e-01  9.37e-01  
  3  +5.0282e-01  +1.4859e+00  9.83e-01  3.03e-02  1.41e+00  3.19e-05  1.99e-01  6.95e-01  
  4  +5.0041e-01  +6.6018e-01  1.60e-01  5.02e-03  2.42e-01  7.30e-06  4.49e-02  7.97e-01  
  5  +4.9854e-01  +6.5660e-01  1.58e-01  3.16e-03  1.55e-01  2.27e-05  1.17e-02  7.99e-01  
  6  +4.9031e-01  +5.9456e-01  1.04e-01  7.40e-04  3.66e-02  5.56e-05  2.38e-03  7.98e-01  
  7  +4.8313e-01  +5.4755e-01  6.44e-02  4.04e-04  1.99e-02  3.47e-05  1.35e-03  5.13e-01  
  8  +4.7383e-01  +4.9778e-01  2.40e-02  1.18e-04  5.81e-03  1.50e-05  4.36e-04  7.63e-01  
  9  +4.6686e-01  +4.6905e-01  2.19e-03  9.06e-06  4.46e-04  1.34e-06  3.90e-05  9.74e-01  
 10  +4.6611e-01  +4.6613e-01  2.59e-05  1.05e-07  5.16e-06  1.63e-08  4.62e-07  9.90e-01  
 11  +4.6610e-01  +4.6610e-01  2.59e-07  1.05e-09  5.16e-08  1.63e-10  4.62e-09  9.90e-01  
 12  +4.6610e-01  +4.6610e-01  2.59e-09  1.05e-11  5.16e-10  1.63e-12  4.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3815ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:32 PM: Optimal value: 4.661e-01
(CVXPY) Aug 31 04:58:32 PM: Compilation took 7.992e-03 seconds
(CVXPY) Aug 31 04:58:32 PM: Solver (including time spent in interface) took 5.245e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4661
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:32 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Finished problem compilation (took 4.062e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 3140
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +2.5116e+02  2.51e+02  9.38e-01  2.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.8093e-01  +5.4021e+01  5.34e+01  3.99e-01  1.50e+01  3.81e-03  5.67e-01  5.96e-01  
  2  +5.2904e-01  +6.2244e+00  5.70e+00  1.20e-01  5.74e+00  1.57e-02  2.45e-01  9.69e-01  
  3  +5.0165e-01  +1.3646e+00  8.63e-01  2.71e-02  1.29e+00  3.51e-05  1.66e-01  9.04e-01  
  4  +4.9864e-01  +8.6200e-01  3.63e-01  1.05e-02  5.15e-01  3.59e-05  4.87e-02  7.98e-01  
  5  +4.8130e-01  +8.1456e-01  3.33e-01  2.79e-03  1.42e-01  1.47e-04  9.04e-03  9.11e-01  
  6  +4.6874e-01  +6.6042e-01  1.92e-01  1.42e-03  7.16e-02  8.54e-05  5.00e-03  5.51e-01  
  7  +4.5944e-01  +5.7693e-01  1.17e-01  6.84e-04  3.46e-02  7.29e-05  2.56e-03  7.43e-01  
  8  +4.5159e-01  +5.2862e-01  7.70e-02  4.08e-04  2.06e-02  4.70e-05  1.60e-03  5.90e-01  
  9  +4.4082e-01  +4.5854e-01  1.77e-02  8.92e-05  4.51e-03  1.15e-05  3.99e-04  9.90e-01  
 10  +4.3654e-01  +4.3742e-01  8.75e-04  4.25e-06  2.15e-04  3.88e-07  2.15e-05  9.73e-01  
 11  +4.3630e-01  +4.3631e-01  9.07e-06  4.40e-08  2.22e-06  3.98e-09  2.27e-07  9.90e-01  
 12  +4.3630e-01  +4.3630e-01  9.07e-08  4.40e-10  2.22e-08  3.98e-11  2.27e-09  9.90e-01  
 13  +4.3630e-01  +4.3630e-01  9.07e-10  4.40e-12  2.22e-10  3.98e-13  2.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3674ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:32 PM: Optimal value: 4.363e-01
(CVXPY) Aug 31 04:58:32 PM: Compilation took 4.062e-03 seconds
(CVXPY) Aug 31 04:58:32 PM: Solver (including time spent in interface) took 3.035e-03 seconds
Iteration: 2, Objective: 0.4363
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:32 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Finished problem compilation (took 4.971e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 3514
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9920e-01  +2.5172e+02  2.51e+02  9.39e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.7874e-01  +5.4200e+01  5.36e+01  4.03e-01  1.52e+01  3.81e-03  5.72e-01  5.95e-01  
  2  +5.2726e-01  +6.0971e+00  5.57e+00  1.17e-01  5.60e+00  1.62e-02  2.40e-01  9.90e-01  
  3  +5.0209e-01  +1.4590e+00  9.57e-01  3.08e-02  1.49e+00  5.41e-04  1.48e-01  9.08e-01  
  4  +4.9566e-01  +9.3354e-01  4.38e-01  9.32e-03  4.72e-01  6.92e-04  3.08e-02  8.97e-01  
  5  +4.7085e-01  +7.8463e-01  3.14e-01  2.08e-03  1.08e-01  1.87e-03  6.22e-03  8.17e-01  
  6  +4.4475e-01  +6.1950e-01  1.75e-01  9.58e-04  4.90e-02  7.30e-04  3.14e-03  6.18e-01  
  7  +4.3273e-01  +5.6750e-01  1.35e-01  6.72e-04  3.42e-02  4.64e-04  2.34e-03  3.97e-01  
  8  +4.2521e-01  +5.3466e-01  1.09e-01  5.15e-04  2.63e-02  3.07e-04  1.85e-03  3.93e-01  
  9  +4.0212e-01  +4.2635e-01  2.42e-02  1.06e-04  5.38e-03  6.85e-06  4.38e-04  9.90e-01  
 10  +3.9467e-01  +3.9546e-01  7.87e-04  3.34e-06  1.69e-04  2.54e-07  1.50e-05  9.73e-01  
 11  +3.9440e-01  +3.9441e-01  7.92e-06  3.36e-08  1.70e-06  2.55e-09  1.51e-07  9.90e-01  
 12  +3.9440e-01  +3.9440e-01  7.92e-08  3.36e-10  1.70e-08  2.55e-11  1.51e-09  9.90e-01  
 13  +3.9440e-01  +3.9440e-01  7.92e-10  3.36e-12  1.70e-10  2.56e-13  1.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.517ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:32 PM: Optimal value: 3.944e-01
(CVXPY) Aug 31 04:58:32 PM: Compilation took 4.971e-03 seconds
(CVXPY) Aug 31 04:58:32 PM: Solver (including time spent in interface) took 6.995e-03 seconds
Iteration: 3, Objective: 0.3944
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:32 PM: Your problem has 297 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 297
  constraints   = 547
  nnz(P)        = 0
  nnz(A)        = 3634
  cones (total) = 1
    : Nonnegative = 1,  numel = 547

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +2.5188e+02  2.51e+02  9.39e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.7421e-01  +5.4328e+01  5.38e+01  4.05e-01  1.50e+01  3.82e-03  5.72e-01  5.95e-01  
  2  +5.2512e-01  +6.2447e+00  5.72e+00  1.16e-01  5.55e+00  1.66e-02  2.37e-01  9.90e-01  
  3  +5.0416e-01  +1.4389e+00  9.35e-01  3.00e-02  1.50e+00  1.39e-03  9.39e-02  8.84e-01  
  4  +4.9944e-01  +1.4892e+00  9.90e-01  1.55e-02  7.98e-01  2.68e-03  4.08e-02  6.51e-01  
  5  +4.8061e-01  +1.2246e+00  7.44e-01  5.29e-03  2.76e-01  4.05e-03  1.40e-02  6.83e-01  
  6  +4.6331e-01  +1.0236e+00  5.60e-01  3.39e-03  1.75e-01  2.73e-03  9.51e-03  4.23e-01  
  7  +4.4313e-01  +8.1647e-01  3.73e-01  2.05e-03  1.04e-01  1.29e-03  6.20e-03  5.15e-01  
  8  +4.1558e-01  +6.2063e-01  2.05e-01  9.61e-04  4.83e-02  6.23e-04  3.19e-03  5.50e-01  
  9  +4.0014e-01  +5.2961e-01  1.29e-01  5.80e-04  2.89e-02  2.15e-04  2.10e-03  7.39e-01  
 10  +3.8095e-01  +4.3037e-01  4.94e-02  2.09e-04  1.04e-02  4.78e-05  8.21e-04  9.72e-01  
 11  +3.7742e-01  +4.1623e-01  3.88e-02  1.56e-04  7.76e-03  3.91e-05  6.19e-04  3.01e-01  
 12  +3.7010e-01  +3.8450e-01  1.44e-02  5.73e-05  2.84e-03  1.50e-05  2.36e-04  9.90e-01  
 13  +3.6496e-01  +3.6541e-01  4.47e-04  1.76e-06  8.71e-05  3.78e-07  7.49e-06  9.87e-01  
 14  +3.6480e-01  +3.6481e-01  4.50e-06  1.77e-08  8.77e-07  3.81e-09  7.55e-08  9.90e-01  
 15  +3.6480e-01  +3.6480e-01  4.50e-08  1.77e-10  8.77e-09  3.81e-11  7.55e-10  9.90e-01  
 16  +3.6480e-01  +3.6480e-01  4.50e-10  1.77e-12  8.77e-11  3.81e-13  7.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8282ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:32 PM: Optimal value: 3.648e-01
(CVXPY) Aug 31 04:58:32 PM: Compilation took 5.002e-03 seconds
(CVXPY) Aug 31 04:58:32 PM: Solver (including time spent in interface) took 5.939e-03 seconds
Iteration: 4, Objective: 0.3648
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:32 PM: Your problem has 307 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Finished problem compilation (took 3.089e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 307
  constraints   = 557
  nnz(P)        = 0
  nnz(A)        = 3812
  cones (total) = 1
    : Nonnegative = 1,  numel = 557

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9892e-01  +2.5188e+02  2.51e+02  9.40e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.7217e-01  +5.4389e+01  5.38e+01  4.07e-01  1.49e+01  3.82e-03  5.73e-01  5.94e-01  
  2  +5.2401e-01  +6.3092e+00  5.79e+00  1.17e-01  5.50e+00  1.68e-02  2.38e-01  9.90e-01  
  3  +5.0517e-01  +1.5501e+00  1.04e+00  3.14e-02  1.57e+00  2.13e-03  8.98e-02  8.09e-01  
  4  +5.0207e-01  +1.5569e+00  1.05e+00  1.89e-02  9.72e-01  3.31e-03  4.90e-02  4.99e-01  
  5  +4.8564e-01  +1.4153e+00  9.30e-01  6.85e-03  3.59e-01  5.65e-03  1.75e-02  7.29e-01  
  6  +4.6482e-01  +1.1303e+00  6.65e-01  4.09e-03  2.11e-01  3.31e-03  1.12e-02  4.91e-01  
  7  +4.3810e-01  +8.4459e-01  4.06e-01  2.23e-03  1.13e-01  9.57e-04  6.63e-03  6.51e-01  
  8  +4.0993e-01  +6.6302e-01  2.53e-01  1.27e-03  6.36e-02  4.25e-04  4.15e-03  5.34e-01  
  9  +3.7725e-01  +4.7938e-01  1.02e-01  4.75e-04  2.36e-02  1.28e-04  1.78e-03  6.59e-01  
 10  +3.6670e-01  +4.2851e-01  6.18e-02  2.73e-04  1.36e-02  7.65e-05  1.07e-03  4.82e-01  
 11  +3.5527e-01  +3.7524e-01  2.00e-02  8.63e-05  4.28e-03  2.09e-05  3.61e-04  8.97e-01  
 12  +3.4974e-01  +3.5200e-01  2.25e-03  9.68e-06  4.79e-04  2.27e-06  4.21e-05  8.91e-01  
 13  +3.4921e-01  +3.4980e-01  5.85e-04  2.47e-06  1.22e-04  5.34e-07  1.09e-05  9.58e-01  
 14  +3.4900e-01  +3.4901e-01  7.53e-06  3.18e-08  1.57e-06  6.88e-09  1.41e-07  9.87e-01  
 15  +3.4900e-01  +3.4900e-01  7.53e-08  3.18e-10  1.57e-08  6.88e-11  1.41e-09  9.90e-01  
 16  +3.4900e-01  +3.4900e-01  7.53e-10  3.18e-12  1.57e-10  6.88e-13  1.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.5875ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:32 PM: Optimal value: 3.490e-01
(CVXPY) Aug 31 04:58:32 PM: Compilation took 3.089e-03 seconds
(CVXPY) Aug 31 04:58:32 PM: Solver (including time spent in interface) took 4.001e-03 seconds
Iteration: 5, Objective: 0.3490
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:32 PM: Your problem has 317 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Finished problem compilation (took 5.256e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 317
  constraints   = 567
  nnz(P)        = 0
  nnz(A)        = 3933
  cones (total) = 1
    : Nonnegative = 1,  numel = 567

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9880e-01  +2.5177e+02  2.51e+02  9.40e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.6807e-01  +5.4421e+01  5.39e+01  4.08e-01  1.47e+01  3.83e-03  5.72e-01  5.94e-01  
  2  +5.2132e-01  +6.4398e+00  5.92e+00  1.16e-01  5.42e+00  1.72e-02  2.35e-01  9.90e-01  
  3  +5.0525e-01  +1.6651e+00  1.16e+00  2.95e-02  1.49e+00  3.30e-03  7.71e-02  7.41e-01  
  4  +5.0131e-01  +1.7200e+00  1.22e+00  1.88e-02  9.71e-01  4.85e-03  4.65e-02  4.69e-01  
  5  +4.8324e-01  +1.5936e+00  1.11e+00  8.15e-03  4.26e-01  6.92e-03  2.02e-02  6.90e-01  
  6  +4.5200e-01  +1.1074e+00  6.55e-01  3.97e-03  2.04e-01  2.74e-03  1.07e-02  6.31e-01  
  7  +4.2884e-01  +9.0998e-01  4.81e-01  2.69e-03  1.36e-01  1.42e-03  7.69e-03  4.55e-01  
  8  +3.8408e-01  +5.7792e-01  1.94e-01  1.02e-03  5.04e-02  1.34e-04  3.38e-03  8.09e-01  
  9  +3.6278e-01  +4.6391e-01  1.01e-01  5.00e-04  2.47e-02  7.19e-05  1.81e-03  5.52e-01  
 10  +3.5074e-01  +4.0332e-01  5.26e-02  2.48e-04  1.23e-02  4.21e-05  9.48e-04  6.46e-01  
 11  +3.4104e-01  +3.5895e-01  1.79e-02  8.08e-05  4.00e-03  1.55e-05  3.33e-04  9.16e-01  
 12  +3.3661e-01  +3.4061e-01  4.00e-03  1.75e-05  8.67e-04  3.47e-06  7.48e-05  8.04e-01  
 13  +3.3571e-01  +3.3682e-01  1.11e-03  4.71e-06  2.33e-04  9.94e-07  2.06e-05  9.90e-01  
 14  +3.3531e-01  +3.3532e-01  1.67e-05  7.07e-08  3.50e-06  1.50e-08  3.12e-07  9.86e-01  
 15  +3.3530e-01  +3.3530e-01  1.67e-07  7.07e-10  3.50e-08  1.50e-10  3.12e-09  9.90e-01  
 16  +3.3530e-01  +3.3530e-01  1.67e-09  7.07e-12  3.50e-10  1.51e-12  3.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.2671ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:32 PM: Optimal value: 3.353e-01
(CVXPY) Aug 31 04:58:32 PM: Compilation took 5.256e-03 seconds
(CVXPY) Aug 31 04:58:32 PM: Solver (including time spent in interface) took 7.278e-03 seconds
Iteration: 6, Objective: 0.3353
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:32 PM: Your problem has 327 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Finished problem compilation (took 4.084e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 327
  constraints   = 577
  nnz(P)        = 0
  nnz(A)        = 4049
  cones (total) = 1
    : Nonnegative = 1,  numel = 577

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9863e-01  +2.5212e+02  2.52e+02  9.41e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.6480e-01  +5.4509e+01  5.39e+01  4.10e-01  1.45e+01  3.83e-03  5.73e-01  5.94e-01  
  2  +5.1957e-01  +6.5380e+00  6.02e+00  1.15e-01  5.31e+00  1.75e-02  2.33e-01  9.90e-01  
  3  +5.0456e-01  +1.7841e+00  1.28e+00  2.94e-02  1.49e+00  4.14e-03  7.45e-02  7.11e-01  
  4  +4.9069e-01  +1.8168e+00  1.33e+00  1.22e-02  6.36e-01  8.15e-03  2.95e-02  7.01e-01  
  5  +4.5954e-01  +1.2768e+00  8.17e-01  5.32e-03  2.75e-01  4.61e-03  1.37e-02  6.65e-01  
  6  +4.3305e-01  +1.0473e+00  6.14e-01  3.32e-03  1.69e-01  2.89e-03  9.06e-03  4.80e-01  
  7  +3.8416e-01  +6.4589e-01  2.62e-01  1.44e-03  7.10e-02  2.41e-05  4.65e-03  8.08e-01  
  8  +3.5180e-01  +4.6576e-01  1.14e-01  5.64e-04  2.77e-02  4.06e-05  2.04e-03  7.01e-01  
  9  +3.3660e-01  +3.9356e-01  5.70e-02  2.64e-04  1.30e-02  2.91e-05  9.99e-04  6.37e-01  
 10  +3.2990e-01  +3.6476e-01  3.49e-02  1.53e-04  7.56e-03  2.14e-05  5.94e-04  5.37e-01  
 11  +3.2342e-01  +3.3470e-01  1.13e-02  4.89e-05  2.41e-03  1.09e-05  1.97e-04  9.90e-01  
 12  +3.2020e-01  +3.2231e-01  2.11e-03  9.05e-06  4.45e-04  2.00e-06  3.76e-05  8.19e-01  
 13  +3.1954e-01  +3.1990e-01  3.64e-04  1.52e-06  7.47e-05  3.40e-07  6.53e-06  8.86e-01  
 14  +3.1940e-01  +3.1941e-01  4.73e-06  1.96e-08  9.64e-07  4.30e-09  8.50e-08  9.87e-01  
 15  +3.1940e-01  +3.1940e-01  4.73e-08  1.96e-10  9.64e-09  4.30e-11  8.50e-10  9.90e-01  
 16  +3.1940e-01  +3.1940e-01  4.73e-10  1.96e-12  9.64e-11  4.32e-13  8.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9133ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:32 PM: Optimal value: 3.194e-01
(CVXPY) Aug 31 04:58:32 PM: Compilation took 4.084e-03 seconds
(CVXPY) Aug 31 04:58:32 PM: Solver (including time spent in interface) took 3.998e-03 seconds
Iteration: 7, Objective: 0.3194
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:32 PM: Your problem has 337 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:32 PM: Finished problem compilation (took 3.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 337
  constraints   = 587
  nnz(P)        = 0
  nnz(A)        = 4122
  cones (total) = 1
    : Nonnegative = 1,  numel = 587

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9858e-01  +2.5217e+02  2.52e+02  9.41e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.6018e-01  +5.4670e+01  5.41e+01  4.10e-01  1.43e+01  3.85e-03  5.72e-01  5.93e-01  
  2  +5.1677e-01  +6.6541e+00  6.14e+00  1.14e-01  5.25e+00  1.79e-02  2.32e-01  9.90e-01  
  3  +5.0232e-01  +1.9168e+00  1.41e+00  2.87e-02  1.45e+00  5.20e-03  7.10e-02  7.13e-01  
  4  +4.8544e-01  +1.7965e+00  1.31e+00  1.26e-02  6.54e-01  8.58e-03  3.05e-02  6.21e-01  
  5  +4.5178e-01  +1.2560e+00  8.04e-01  5.45e-03  2.78e-01  4.94e-03  1.41e-02  6.62e-01  
  6  +4.2909e-01  +1.0829e+00  6.54e-01  3.72e-03  1.88e-01  3.50e-03  1.00e-02  4.21e-01  
  7  +3.7631e-01  +6.5370e-01  2.77e-01  1.51e-03  7.43e-02  3.15e-05  4.75e-03  8.19e-01  
  8  +3.4315e-01  +4.8472e-01  1.42e-01  6.90e-04  3.38e-02  3.80e-05  2.39e-03  5.90e-01  
  9  +3.3192e-01  +4.3225e-01  1.00e-01  4.71e-04  2.31e-02  3.51e-05  1.68e-03  3.73e-01  
 10  +3.2137e-01  +3.8457e-01  6.32e-02  2.85e-04  1.41e-02  2.78e-05  1.06e-03  4.56e-01  
 11  +3.1015e-01  +3.3618e-01  2.60e-02  1.14e-04  5.62e-03  1.30e-05  4.45e-04  6.32e-01  
 12  +3.0259e-01  +3.0433e-01  1.74e-03  7.46e-06  3.69e-04  9.06e-07  3.08e-05  9.41e-01  
 13  +3.0205e-01  +3.0220e-01  1.46e-04  6.26e-07  3.09e-05  7.65e-08  2.63e-06  9.18e-01  
 14  +3.0200e-01  +3.0200e-01  1.49e-06  6.35e-09  3.14e-07  7.78e-10  2.67e-08  9.90e-01  
 15  +3.0200e-01  +3.0200e-01  1.49e-08  6.35e-11  3.14e-09  7.78e-12  2.67e-10  9.90e-01  
 16  +3.0200e-01  +3.0200e-01  1.49e-10  6.35e-13  3.14e-11  7.78e-14  2.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2204ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:32 PM: Optimal value: 3.020e-01
(CVXPY) Aug 31 04:58:32 PM: Compilation took 3.008e-03 seconds
(CVXPY) Aug 31 04:58:32 PM: Solver (including time spent in interface) took 5.111e-03 seconds
Iteration: 8, Objective: 0.3020
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 347 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Finished problem compilation (took 3.014e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 347
  constraints   = 597
  nnz(P)        = 0
  nnz(A)        = 4231
  cones (total) = 1
    : Nonnegative = 1,  numel = 597

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9857e-01  +2.5221e+02  2.52e+02  9.42e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +5.5920e-01  +5.4681e+01  5.41e+01  4.12e-01  1.42e+01  3.85e-03  5.72e-01  5.93e-01  
  2  +5.1571e-01  +6.6961e+00  6.18e+00  1.14e-01  5.17e+00  1.80e-02  2.31e-01  9.90e-01  
  3  +5.0105e-01  +1.9108e+00  1.41e+00  2.72e-02  1.37e+00  5.42e-03  6.71e-02  7.31e-01  
  4  +4.8198e-01  +1.7532e+00  1.27e+00  1.16e-02  5.99e-01  8.83e-03  2.83e-02  6.22e-01  
  5  +4.4209e-01  +1.1574e+00  7.15e-01  4.46e-03  2.26e-01  4.57e-03  1.17e-02  7.19e-01  
  6  +4.1986e-01  +9.5262e-01  5.33e-01  3.31e-03  1.65e-01  1.91e-03  9.24e-03  4.32e-01  
  7  +3.7379e-01  +6.9081e-01  3.17e-01  1.64e-03  8.04e-02  5.18e-04  5.07e-03  7.70e-01  
  8  +3.3163e-01  +4.6066e-01  1.29e-01  6.02e-04  2.93e-02  1.75e-04  2.11e-03  6.66e-01  
  9  +3.1419e-01  +3.8658e-01  7.24e-02  3.21e-04  1.56e-02  9.22e-05  1.21e-03  5.30e-01  
 10  +2.9664e-01  +3.1024e-01  1.36e-02  5.88e-05  2.85e-03  1.34e-05  2.44e-04  9.41e-01  
 11  +2.9236e-01  +2.9335e-01  9.93e-04  4.27e-06  2.07e-04  8.96e-07  1.84e-05  9.34e-01  
 12  +2.9202e-01  +2.9206e-01  4.55e-05  1.95e-07  9.45e-06  3.92e-08  8.56e-07  9.55e-01  
 13  +2.9200e-01  +2.9200e-01  4.55e-07  1.95e-09  9.45e-08  3.92e-10  8.58e-09  9.90e-01  
 14  +2.9200e-01  +2.9200e-01  4.55e-09  1.95e-11  9.45e-10  3.92e-12  8.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0639ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:33 PM: Optimal value: 2.920e-01
(CVXPY) Aug 31 04:58:33 PM: Compilation took 3.014e-03 seconds
(CVXPY) Aug 31 04:58:33 PM: Solver (including time spent in interface) took 4.961e-03 seconds
Iteration: 9, Objective: 0.2920
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 357 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Finished problem compilation (took 3.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 357
  constraints   = 607
  nnz(P)        = 0
  nnz(A)        = 4311
  cones (total) = 1
    : Nonnegative = 1,  numel = 607

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9851e-01  +2.5219e+02  2.52e+02  9.42e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.5518e-01  +5.4717e+01  5.42e+01  4.12e-01  1.40e+01  3.86e-03  5.71e-01  5.93e-01  
  2  +5.1273e-01  +6.8073e+00  6.29e+00  1.13e-01  5.06e+00  1.83e-02  2.28e-01  9.90e-01  
  3  +4.9653e-01  +1.8748e+00  1.38e+00  2.34e-02  1.18e+00  6.07e-03  5.72e-02  7.82e-01  
  4  +4.7161e-01  +1.6282e+00  1.16e+00  1.00e-02  5.14e-01  8.82e-03  2.45e-02  6.07e-01  
  5  +4.4532e-01  +1.3530e+00  9.08e-01  6.01e-03  3.04e-01  7.26e-03  1.54e-02  4.37e-01  
  6  +4.0897e-01  +1.0389e+00  6.30e-01  3.41e-03  1.70e-01  4.23e-03  9.34e-03  5.16e-01  
  7  +3.6731e-01  +7.2594e-01  3.59e-01  1.91e-03  9.28e-02  1.10e-03  5.89e-03  6.29e-01  
  8  +3.3184e-01  +5.1959e-01  1.88e-01  9.25e-04  4.46e-02  4.81e-04  3.15e-03  5.46e-01  
  9  +3.0673e-01  +3.9790e-01  9.12e-02  4.22e-04  2.04e-02  2.13e-04  1.58e-03  5.39e-01  
 10  +2.8706e-01  +3.0517e-01  1.81e-02  8.16e-05  3.93e-03  2.24e-05  3.42e-04  9.30e-01  
 11  +2.8170e-01  +2.8300e-01  1.31e-03  5.86e-06  2.81e-04  1.39e-06  2.58e-05  9.36e-01  
 12  +2.8128e-01  +2.8135e-01  7.34e-05  3.29e-07  1.57e-05  7.38e-08  1.48e-06  9.45e-01  
 13  +2.8125e-01  +2.8125e-01  7.35e-07  3.29e-09  1.58e-07  7.36e-10  1.48e-08  9.90e-01  
 14  +2.8125e-01  +2.8125e-01  7.35e-09  3.29e-11  1.58e-09  7.36e-12  1.48e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5465ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:33 PM: Optimal value: 2.813e-01
(CVXPY) Aug 31 04:58:33 PM: Compilation took 3.003e-03 seconds
(CVXPY) Aug 31 04:58:33 PM: Solver (including time spent in interface) took 4.993e-03 seconds
Iteration: 10, Objective: 0.2813
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 367 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Finished problem compilation (took 3.079e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 367
  constraints   = 617
  nnz(P)        = 0
  nnz(A)        = 4352
  cones (total) = 1
    : Nonnegative = 1,  numel = 617

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9849e-01  +2.5225e+02  2.52e+02  9.43e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.5279e-01  +5.4757e+01  5.42e+01  4.13e-01  1.38e+01  3.87e-03  5.70e-01  5.93e-01  
  2  +5.1149e-01  +6.8800e+00  6.37e+00  1.11e-01  5.00e+00  1.85e-02  2.26e-01  9.90e-01  
  3  +4.9509e-01  +1.8974e+00  1.40e+00  2.27e-02  1.14e+00  6.35e-03  5.53e-02  7.84e-01  
  4  +4.6502e-01  +1.6127e+00  1.15e+00  8.93e-03  4.56e-01  9.70e-03  2.18e-02  6.38e-01  
  5  +4.3445e-01  +1.3277e+00  8.93e-01  5.28e-03  2.66e-01  8.05e-03  1.35e-02  4.40e-01  
  6  +3.9033e-01  +9.3278e-01  5.42e-01  2.99e-03  1.47e-01  2.71e-03  8.40e-03  5.60e-01  
  7  +3.3795e-01  +5.7170e-01  2.34e-01  1.19e-03  5.71e-02  8.02e-04  3.85e-03  6.30e-01  
  8  +3.0986e-01  +4.3910e-01  1.29e-01  6.18e-04  2.96e-02  3.76e-04  2.20e-03  5.31e-01  
  9  +2.8844e-01  +3.3990e-01  5.15e-02  2.38e-04  1.14e-02  1.28e-04  9.43e-04  6.28e-01  
 10  +2.7509e-01  +2.7984e-01  4.75e-03  2.16e-05  1.03e-03  7.57e-06  9.40e-05  9.36e-01  
 11  +2.7370e-01  +2.7415e-01  4.50e-04  2.04e-06  9.73e-05  6.51e-07  9.18e-06  9.09e-01  
 12  +2.7355e-01  +2.7356e-01  5.28e-06  2.41e-08  1.14e-06  6.78e-09  1.09e-07  9.90e-01  
 13  +2.7355e-01  +2.7355e-01  5.28e-08  2.41e-10  1.14e-08  6.78e-11  1.09e-09  9.90e-01  
 14  +2.7355e-01  +2.7355e-01  5.28e-10  2.41e-12  1.14e-10  6.78e-13  1.09e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0891ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:33 PM: Optimal value: 2.736e-01
(CVXPY) Aug 31 04:58:33 PM: Compilation took 3.079e-03 seconds
(CVXPY) Aug 31 04:58:33 PM: Solver (including time spent in interface) took 5.026e-03 seconds
Iteration: 11, Objective: 0.2736
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 377 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Finished problem compilation (took 4.966e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 377
  constraints   = 627
  nnz(P)        = 0
  nnz(A)        = 4383
  cones (total) = 1
    : Nonnegative = 1,  numel = 627

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9843e-01  +2.5232e+02  2.52e+02  9.43e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.4949e-01  +5.4903e+01  5.44e+01  4.13e-01  1.37e+01  3.88e-03  5.71e-01  5.92e-01  
  2  +5.0977e-01  +7.3550e+00  6.85e+00  1.16e-01  5.16e+00  1.86e-02  2.35e-01  9.63e-01  
  3  +4.9290e-01  +1.9361e+00  1.44e+00  2.25e-02  1.13e+00  6.33e-03  5.47e-02  7.95e-01  
  4  +4.5682e-01  +1.5607e+00  1.10e+00  8.20e-03  4.15e-01  9.27e-03  2.00e-02  6.63e-01  
  5  +4.2538e-01  +1.3296e+00  9.04e-01  5.09e-03  2.55e-01  8.40e-03  1.30e-02  4.01e-01  
  6  +3.6181e-01  +7.3955e-01  3.78e-01  2.12e-03  1.02e-01  3.50e-04  6.31e-03  7.56e-01  
  7  +3.3289e-01  +5.8853e-01  2.56e-01  1.34e-03  6.36e-02  2.37e-04  4.29e-03  4.42e-01  
  8  +2.9933e-01  +4.1635e-01  1.17e-01  5.68e-04  2.70e-02  1.03e-04  2.05e-03  5.74e-01  
  9  +2.7800e-01  +3.1867e-01  4.07e-02  1.90e-04  9.01e-03  3.44e-05  7.61e-04  7.09e-01  
 10  +2.6742e-01  +2.7182e-01  4.39e-03  2.03e-05  9.59e-04  3.38e-06  8.76e-05  9.02e-01  
 11  +2.6616e-01  +2.6648e-01  3.27e-04  1.51e-06  7.10e-05  2.35e-07  6.70e-06  9.29e-01  
 12  +2.6605e-01  +2.6605e-01  3.48e-06  1.61e-08  7.56e-07  2.43e-09  7.19e-08  9.90e-01  
 13  +2.6605e-01  +2.6605e-01  3.48e-08  1.61e-10  7.56e-09  2.43e-11  7.19e-10  9.90e-01  
 14  +2.6605e-01  +2.6605e-01  3.48e-10  1.61e-12  7.56e-11  2.43e-13  7.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2665ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:33 PM: Optimal value: 2.661e-01
(CVXPY) Aug 31 04:58:33 PM: Compilation took 4.966e-03 seconds
(CVXPY) Aug 31 04:58:33 PM: Solver (including time spent in interface) took 5.004e-03 seconds
Iteration: 12, Objective: 0.2661
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 387 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Finished problem compilation (took 4.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 387
  constraints   = 637
  nnz(P)        = 0
  nnz(A)        = 4431
  cones (total) = 1
    : Nonnegative = 1,  numel = 637

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9841e-01  +2.5233e+02  2.52e+02  9.44e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.4746e-01  +5.4976e+01  5.44e+01  4.14e-01  1.35e+01  3.89e-03  5.71e-01  5.92e-01  
  2  +5.0844e-01  +7.5001e+00  6.99e+00  1.17e-01  5.14e+00  1.87e-02  2.36e-01  9.57e-01  
  3  +4.9093e-01  +1.9385e+00  1.45e+00  2.18e-02  1.09e+00  6.48e-03  5.28e-02  8.04e-01  
  4  +4.5191e-01  +1.5366e+00  1.08e+00  7.88e-03  3.96e-01  9.14e-03  1.93e-02  6.66e-01  
  5  +4.2179e-01  +1.3070e+00  8.85e-01  5.12e-03  2.54e-01  7.58e-03  1.31e-02  3.93e-01  
  6  +3.6399e-01  +7.7358e-01  4.10e-01  2.32e-03  1.11e-01  1.09e-03  6.78e-03  6.78e-01  
  7  +3.3544e-01  +6.1570e-01  2.80e-01  1.48e-03  7.01e-02  6.64e-04  4.66e-03  4.18e-01  
  8  +2.9903e-01  +4.2550e-01  1.26e-01  6.15e-04  2.89e-02  2.51e-04  2.18e-03  6.22e-01  
  9  +2.8039e-01  +3.3790e-01  5.75e-02  2.72e-04  1.28e-02  1.01e-04  1.05e-03  5.94e-01  
 10  +2.6626e-01  +2.7353e-01  7.27e-03  3.39e-05  1.59e-03  1.05e-05  1.43e-04  8.76e-01  
 11  +2.6420e-01  +2.6463e-01  4.31e-04  2.01e-06  9.36e-05  4.89e-07  8.88e-06  9.48e-01  
 12  +2.6405e-01  +2.6406e-01  5.52e-06  2.57e-08  1.20e-06  5.68e-09  1.15e-07  9.89e-01  
 13  +2.6405e-01  +2.6405e-01  5.52e-08  2.57e-10  1.20e-08  5.68e-11  1.15e-09  9.90e-01  
 14  +2.6405e-01  +2.6405e-01  5.52e-10  2.57e-12  1.20e-10  5.68e-13  1.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.9254ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:33 PM: Optimal value: 2.641e-01
(CVXPY) Aug 31 04:58:33 PM: Compilation took 4.007e-03 seconds
(CVXPY) Aug 31 04:58:33 PM: Solver (including time spent in interface) took 5.992e-03 seconds
Iteration: 13, Objective: 0.2641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 397 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Finished problem compilation (took 3.982e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 397
  constraints   = 647
  nnz(P)        = 0
  nnz(A)        = 4491
  cones (total) = 1
    : Nonnegative = 1,  numel = 647

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9842e-01  +2.5232e+02  2.52e+02  9.44e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.4653e-01  +5.4992e+01  5.44e+01  4.15e-01  1.34e+01  3.89e-03  5.70e-01  5.92e-01  
  2  +5.0786e-01  +7.7527e+00  7.24e+00  1.20e-01  5.18e+00  1.87e-02  2.40e-01  9.43e-01  
  3  +4.9005e-01  +2.0027e+00  1.51e+00  2.24e-02  1.10e+00  6.59e-03  5.40e-02  8.02e-01  
  4  +4.4541e-01  +1.5527e+00  1.11e+00  7.48e-03  3.73e-01  9.68e-03  1.84e-02  6.89e-01  
  5  +4.1326e-01  +1.2806e+00  8.67e-01  4.99e-03  2.45e-01  6.88e-03  1.29e-02  3.89e-01  
  6  +3.4778e-01  +6.7455e-01  3.27e-01  1.84e-03  8.63e-02  4.55e-04  5.60e-03  7.60e-01  
  7  +3.2520e-01  +5.7605e-01  2.51e-01  1.31e-03  6.15e-02  3.32e-04  4.23e-03  4.11e-01  
  8  +2.9382e-01  +4.1421e-01  1.20e-01  5.93e-04  2.76e-02  1.48e-04  2.13e-03  5.46e-01  
  9  +2.7162e-01  +3.0882e-01  3.72e-02  1.78e-04  8.25e-03  3.98e-05  7.12e-04  7.39e-01  
 10  +2.6281e-01  +2.6850e-01  5.68e-03  2.71e-05  1.25e-03  5.43e-06  1.16e-04  8.54e-01  
 11  +2.6134e-01  +2.6208e-01  7.33e-04  3.49e-06  1.60e-04  6.05e-07  1.57e-05  9.27e-01  
 12  +2.6110e-01  +2.6112e-01  1.16e-05  5.54e-08  2.55e-06  8.82e-09  2.53e-07  9.87e-01  
 13  +2.6110e-01  +2.6110e-01  1.16e-07  5.54e-10  2.55e-08  8.81e-11  2.53e-09  9.90e-01  
 14  +2.6110e-01  +2.6110e-01  1.16e-09  5.54e-12  2.55e-10  8.82e-13  2.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4543ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:33 PM: Optimal value: 2.611e-01
(CVXPY) Aug 31 04:58:33 PM: Compilation took 3.982e-03 seconds
(CVXPY) Aug 31 04:58:33 PM: Solver (including time spent in interface) took 4.933e-03 seconds
Iteration: 14, Objective: 0.2611
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 407 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Finished problem compilation (took 4.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 407
  constraints   = 657
  nnz(P)        = 0
  nnz(A)        = 4559
  cones (total) = 1
    : Nonnegative = 1,  numel = 657

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9837e-01  +2.5229e+02  2.52e+02  9.45e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.4407e-01  +5.5083e+01  5.45e+01  4.16e-01  1.33e+01  3.89e-03  5.71e-01  5.91e-01  
  2  +5.0545e-01  +7.7794e+00  7.27e+00  1.19e-01  5.10e+00  1.90e-02  2.39e-01  9.47e-01  
  3  +4.8699e-01  +2.0052e+00  1.52e+00  2.15e-02  1.05e+00  6.85e-03  5.20e-02  8.09e-01  
  4  +4.4144e-01  +1.5431e+00  1.10e+00  7.66e-03  3.78e-01  8.94e-03  1.90e-02  6.78e-01  
  5  +4.0870e-01  +1.2804e+00  8.72e-01  5.08e-03  2.47e-01  6.31e-03  1.32e-02  4.14e-01  
  6  +3.4285e-01  +6.6815e-01  3.25e-01  1.82e-03  8.47e-02  5.38e-04  5.55e-03  7.65e-01  
  7  +3.1282e-01  +5.3265e-01  2.20e-01  1.15e-03  5.33e-02  3.13e-04  3.81e-03  5.16e-01  
  8  +2.8274e-01  +3.7726e-01  9.45e-02  4.71e-04  2.17e-02  1.22e-04  1.75e-03  5.81e-01  
  9  +2.6372e-01  +2.8566e-01  2.19e-02  1.07e-04  4.93e-03  2.29e-05  4.41e-04  8.39e-01  
 10  +2.5821e-01  +2.6107e-01  2.86e-03  1.40e-05  6.38e-04  2.53e-06  6.10e-05  8.96e-01  
 11  +2.5743e-01  +2.5781e-01  3.86e-04  1.89e-06  8.61e-05  3.20e-07  8.58e-06  8.83e-01  
 12  +2.5730e-01  +2.5731e-01  4.69e-06  2.29e-08  1.05e-06  3.72e-09  1.05e-07  9.89e-01  
 13  +2.5730e-01  +2.5730e-01  4.70e-08  2.30e-10  1.05e-08  3.73e-11  1.05e-09  9.90e-01  
 14  +2.5730e-01  +2.5730e-01  4.70e-10  2.30e-12  1.05e-10  3.73e-13  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.4837ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:33 PM: Optimal value: 2.573e-01
(CVXPY) Aug 31 04:58:33 PM: Compilation took 4.001e-03 seconds
(CVXPY) Aug 31 04:58:33 PM: Solver (including time spent in interface) took 5.991e-03 seconds
Iteration: 15, Objective: 0.2573
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 408 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Finished problem compilation (took 3.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 408
  constraints   = 658
  nnz(P)        = 0
  nnz(A)        = 4570
  cones (total) = 1
    : Nonnegative = 1,  numel = 658

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9837e-01  +2.5229e+02  2.52e+02  9.45e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.4399e-01  +5.5089e+01  5.45e+01  4.17e-01  1.33e+01  3.89e-03  5.71e-01  5.91e-01  
  2  +5.0542e-01  +7.8450e+00  7.34e+00  1.20e-01  5.13e+00  1.90e-02  2.41e-01  9.43e-01  
  3  +4.8696e-01  +2.0013e+00  1.51e+00  2.14e-02  1.05e+00  6.78e-03  5.20e-02  8.11e-01  
  4  +4.4102e-01  +1.5335e+00  1.09e+00  7.59e-03  3.75e-01  8.86e-03  1.88e-02  6.79e-01  
  5  +4.0891e-01  +1.2803e+00  8.71e-01  5.08e-03  2.47e-01  6.34e-03  1.32e-02  4.05e-01  
  6  +3.4269e-01  +6.6659e-01  3.24e-01  1.81e-03  8.44e-02  4.46e-04  5.55e-03  7.77e-01  
  7  +3.1354e-01  +5.3539e-01  2.22e-01  1.16e-03  5.39e-02  2.74e-04  3.86e-03  4.99e-01  
  8  +2.8499e-01  +3.8912e-01  1.04e-01  5.21e-04  2.40e-02  1.19e-04  1.92e-03  5.37e-01  
  9  +2.6356e-01  +2.8609e-01  2.25e-02  1.10e-04  5.05e-03  2.15e-05  4.52e-04  8.43e-01  
 10  +2.5944e-01  +2.6756e-01  8.12e-03  3.95e-05  1.81e-03  7.30e-06  1.69e-04  7.31e-01  
 11  +2.5717e-01  +2.5785e-01  6.83e-04  3.33e-06  1.52e-04  4.89e-07  1.49e-05  9.90e-01  
 12  +2.5693e-01  +2.5694e-01  1.21e-05  5.89e-08  2.69e-06  8.12e-09  2.68e-07  9.85e-01  
 13  +2.5693e-01  +2.5693e-01  1.21e-07  5.89e-10  2.69e-08  8.12e-11  2.68e-09  9.90e-01  
 14  +2.5693e-01  +2.5693e-01  1.21e-09  5.89e-12  2.69e-10  8.12e-13  2.68e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.1396ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:33 PM: Optimal value: 2.569e-01
(CVXPY) Aug 31 04:58:33 PM: Compilation took 3.998e-03 seconds
(CVXPY) Aug 31 04:58:33 PM: Solver (including time spent in interface) took 6.994e-03 seconds
Iteration: 16, Objective: 0.2569
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 418 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Finished problem compilation (took 3.080e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 418
  constraints   = 668
  nnz(P)        = 0
  nnz(A)        = 4615
  cones (total) = 1
    : Nonnegative = 1,  numel = 668

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9834e-01  +2.5226e+02  2.52e+02  9.45e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.4167e-01  +5.5186e+01  5.46e+01  4.17e-01  1.31e+01  3.90e-03  5.70e-01  5.90e-01  
  2  +5.0385e-01  +8.2998e+00  7.80e+00  1.24e-01  5.25e+00  1.90e-02  2.49e-01  9.17e-01  
  3  +4.8507e-01  +2.0059e+00  1.52e+00  2.12e-02  1.03e+00  6.58e-03  5.16e-02  8.19e-01  
  4  +4.3728e-01  +1.5250e+00  1.09e+00  7.64e-03  3.74e-01  8.21e-03  1.90e-02  6.80e-01  
  5  +4.0811e-01  +1.3025e+00  8.94e-01  5.40e-03  2.60e-01  5.99e-03  1.40e-02  3.72e-01  
  6  +3.4058e-01  +6.8281e-01  3.42e-01  1.97e-03  9.09e-02  6.44e-05  6.05e-03  8.40e-01  
  7  +3.1176e-01  +5.4647e-01  2.35e-01  1.27e-03  5.81e-02  9.45e-05  4.22e-03  5.04e-01  
  8  +2.8471e-01  +4.0203e-01  1.17e-01  6.06e-04  2.77e-02  4.92e-05  2.23e-03  5.09e-01  
  9  +2.6284e-01  +2.9275e-01  2.99e-02  1.50e-04  6.80e-03  1.52e-05  6.17e-04  7.99e-01  
 10  +2.5570e-01  +2.5957e-01  3.87e-03  1.93e-05  8.71e-04  1.91e-06  8.54e-05  8.79e-01  
 11  +2.5469e-01  +2.5513e-01  4.43e-04  2.20e-06  9.92e-05  2.18e-07  1.02e-05  8.97e-01  
 12  +2.5455e-01  +2.5456e-01  5.85e-06  2.91e-08  1.31e-06  2.84e-09  1.37e-07  9.88e-01  
 13  +2.5455e-01  +2.5455e-01  5.86e-08  2.91e-10  1.31e-08  2.85e-11  1.37e-09  9.90e-01  
 14  +2.5455e-01  +2.5455e-01  5.86e-10  2.91e-12  1.31e-10  2.85e-13  1.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8144ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:33 PM: Optimal value: 2.546e-01
(CVXPY) Aug 31 04:58:33 PM: Compilation took 3.080e-03 seconds
(CVXPY) Aug 31 04:58:33 PM: Solver (including time spent in interface) took 5.918e-03 seconds
Iteration: 17, Objective: 0.2546
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 428 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Finished problem compilation (took 3.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 428
  constraints   = 678
  nnz(P)        = 0
  nnz(A)        = 4671
  cones (total) = 1
    : Nonnegative = 1,  numel = 678

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9831e-01  +2.5237e+02  2.52e+02  9.45e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.3985e-01  +5.5257e+01  5.47e+01  4.18e-01  1.30e+01  3.91e-03  5.71e-01  5.90e-01  
  2  +5.0197e-01  +8.4163e+00  7.91e+00  1.25e-01  5.22e+00  1.91e-02  2.50e-01  9.14e-01  
  3  +4.8190e-01  +2.0201e+00  1.54e+00  2.07e-02  1.00e+00  6.78e-03  5.05e-02  8.25e-01  
  4  +4.3032e-01  +1.4965e+00  1.07e+00  7.33e-03  3.55e-01  8.00e-03  1.85e-02  6.85e-01  
  5  +3.9523e-01  +1.2422e+00  8.47e-01  4.95e-03  2.36e-01  5.30e-03  1.31e-02  4.29e-01  
  6  +3.3594e-01  +6.9310e-01  3.57e-01  2.04e-03  9.39e-02  9.79e-04  6.29e-03  6.89e-01  
  7  +3.0907e-01  +5.4837e-01  2.39e-01  1.30e-03  5.94e-02  5.92e-04  4.31e-03  4.08e-01  
  8  +2.8128e-01  +3.9868e-01  1.17e-01  6.07e-04  2.78e-02  2.60e-04  2.23e-03  5.38e-01  
  9  +2.5936e-01  +2.8659e-01  2.72e-02  1.37e-04  6.25e-03  3.98e-05  5.68e-04  8.49e-01  
 10  +2.5251e-01  +2.5497e-01  2.46e-03  1.23e-05  5.57e-04  2.10e-06  5.50e-05  9.61e-01  
 11  +2.5180e-01  +2.5209e-01  2.92e-04  1.46e-06  6.57e-05  2.28e-07  6.85e-06  8.99e-01  
 12  +2.5170e-01  +2.5170e-01  3.51e-06  1.75e-08  7.89e-07  2.66e-09  8.31e-08  9.88e-01  
 13  +2.5170e-01  +2.5170e-01  3.51e-08  1.76e-10  7.91e-09  2.66e-11  8.33e-10  9.90e-01  
 14  +2.5170e-01  +2.5170e-01  3.51e-10  1.76e-12  7.91e-11  2.66e-13  8.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.4899ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:33 PM: Optimal value: 2.517e-01
(CVXPY) Aug 31 04:58:33 PM: Compilation took 3.008e-03 seconds
(CVXPY) Aug 31 04:58:33 PM: Solver (including time spent in interface) took 5.979e-03 seconds
Iteration: 18, Objective: 0.2517
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:33 PM: Your problem has 435 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:34 PM: Finished problem compilation (took 3.027e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 435
  constraints   = 685
  nnz(P)        = 0
  nnz(A)        = 4706
  cones (total) = 1
    : Nonnegative = 1,  numel = 685

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9829e-01  +2.5242e+02  2.52e+02  9.46e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.3821e-01  +5.5365e+01  5.48e+01  4.19e-01  1.29e+01  3.91e-03  5.71e-01  5.89e-01  
  2  +5.0042e-01  +8.8642e+00  8.36e+00  1.30e-01  5.38e+00  1.91e-02  2.60e-01  8.88e-01  
  3  +4.8045e-01  +2.0396e+00  1.56e+00  2.11e-02  1.01e+00  6.54e-03  5.17e-02  8.27e-01  
  4  +4.2400e-01  +1.4784e+00  1.05e+00  7.13e-03  3.43e-01  7.64e-03  1.81e-02  7.06e-01  
  5  +3.8750e-01  +1.1962e+00  8.09e-01  4.78e-03  2.26e-01  4.30e-03  1.28e-02  4.69e-01  
  6  +3.3209e-01  +6.7633e-01  3.44e-01  1.98e-03  9.04e-02  1.08e-03  6.15e-03  6.24e-01  
  7  +3.0401e-01  +5.2896e-01  2.25e-01  1.22e-03  5.58e-02  6.25e-04  4.11e-03  4.30e-01  
  8  +2.7737e-01  +3.8717e-01  1.10e-01  5.70e-04  2.60e-02  2.75e-04  2.12e-03  5.34e-01  
  9  +2.5711e-01  +2.8225e-01  2.51e-02  1.28e-04  5.80e-03  3.17e-05  5.33e-04  9.14e-01  
 10  +2.5105e-01  +2.5488e-01  3.83e-03  1.94e-05  8.74e-04  3.13e-06  8.63e-05  9.61e-01  
 11  +2.4994e-01  +2.5036e-01  4.24e-04  2.14e-06  9.62e-05  3.13e-07  9.99e-06  9.05e-01  
 12  +2.4980e-01  +2.4981e-01  6.47e-06  3.27e-08  1.47e-06  4.59e-09  1.54e-07  9.85e-01  
 13  +2.4980e-01  +2.4980e-01  6.48e-08  3.28e-10  1.47e-08  4.60e-11  1.55e-09  9.90e-01  
 14  +2.4980e-01  +2.4980e-01  6.49e-10  3.28e-12  1.47e-10  4.60e-13  1.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.992ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:34 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:34 PM: Optimal value: 2.498e-01
(CVXPY) Aug 31 04:58:34 PM: Compilation took 3.027e-03 seconds
(CVXPY) Aug 31 04:58:34 PM: Solver (including time spent in interface) took 4.947e-03 seconds
Iteration: 19, Objective: 0.2498
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:34 PM: Your problem has 443 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:34 PM: Finished problem compilation (took 2.978e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 443
  constraints   = 693
  nnz(P)        = 0
  nnz(A)        = 4765
  cones (total) = 1
    : Nonnegative = 1,  numel = 693

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9829e-01  +2.5242e+02  2.52e+02  9.46e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.3830e-01  +5.5414e+01  5.49e+01  4.20e-01  1.28e+01  3.92e-03  5.71e-01  5.89e-01  
  2  +4.9992e-01  +8.5712e+00  8.07e+00  1.27e-01  5.22e+00  1.92e-02  2.56e-01  9.03e-01  
  3  +4.7943e-01  +1.9727e+00  1.49e+00  2.01e-02  9.61e-01  6.56e-03  4.96e-02  8.33e-01  
  4  +4.2834e-01  +1.5390e+00  1.11e+00  7.89e-03  3.77e-01  7.65e-03  2.01e-02  6.60e-01  
  5  +3.9362e-01  +1.2660e+00  8.72e-01  5.31e-03  2.50e-01  4.66e-03  1.43e-02  4.61e-01  
  6  +3.3096e-01  +6.5643e-01  3.25e-01  1.90e-03  8.64e-02  5.75e-04  5.96e-03  7.53e-01  
  7  +3.0456e-01  +5.3046e-01  2.26e-01  1.24e-03  5.63e-02  3.62e-04  4.17e-03  4.34e-01  
  8  +2.7889e-01  +3.9423e-01  1.15e-01  6.06e-04  2.75e-02  1.69e-04  2.25e-03  5.23e-01  
  9  +2.5733e-01  +2.8401e-01  2.67e-02  1.37e-04  6.17e-03  2.93e-05  5.69e-04  8.42e-01  
 10  +2.5122e-01  +2.5566e-01  4.44e-03  2.26e-05  1.01e-03  3.57e-06  1.01e-04  9.51e-01  
 11  +2.4996e-01  +2.5045e-01  4.90e-04  2.49e-06  1.11e-04  3.54e-07  1.17e-05  9.07e-01  
 12  +2.4980e-01  +2.4981e-01  8.36e-06  4.25e-08  1.90e-06  5.79e-09  2.01e-07  9.84e-01  
 13  +2.4980e-01  +2.4980e-01  8.37e-08  4.26e-10  1.90e-08  5.80e-11  2.02e-09  9.90e-01  
 14  +2.4980e-01  +2.4980e-01  8.37e-10  4.26e-12  1.90e-10  5.80e-13  2.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7418ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:34 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:34 PM: Optimal value: 2.498e-01
(CVXPY) Aug 31 04:58:34 PM: Compilation took 2.978e-03 seconds
(CVXPY) Aug 31 04:58:34 PM: Solver (including time spent in interface) took 6.977e-03 seconds
Iteration: 20, Objective: 0.2498
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:34 PM: Your problem has 444 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:34 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:34 PM: Finished problem compilation (took 2.870e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 444
  constraints   = 694
  nnz(P)        = 0
  nnz(A)        = 4774
  cones (total) = 1
    : Nonnegative = 1,  numel = 694

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9829e-01  +2.5242e+02  2.52e+02  9.46e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.3831e-01  +5.5414e+01  5.49e+01  4.20e-01  1.28e+01  3.92e-03  5.71e-01  5.89e-01  
  2  +4.9993e-01  +8.6376e+00  8.14e+00  1.28e-01  5.24e+00  1.91e-02  2.57e-01  8.99e-01  
  3  +4.7946e-01  +1.9695e+00  1.49e+00  2.01e-02  9.60e-01  6.50e-03  4.96e-02  8.34e-01  
  4  +4.2811e-01  +1.5370e+00  1.11e+00  7.88e-03  3.77e-01  7.59e-03  2.01e-02  6.60e-01  
  5  +3.9409e-01  +1.2714e+00  8.77e-01  5.35e-03  2.52e-01  4.70e-03  1.44e-02  4.52e-01  
  6  +3.3060e-01  +6.5148e-01  3.21e-01  1.88e-03  8.53e-02  4.85e-04  5.90e-03  7.71e-01  
  7  +3.0441e-01  +5.2884e-01  2.24e-01  1.23e-03  5.59e-02  3.13e-04  4.15e-03  4.35e-01  
  8  +2.7888e-01  +3.9401e-01  1.15e-01  6.06e-04  2.74e-02  1.48e-04  2.25e-03  5.21e-01  
  9  +2.5671e-01  +2.8100e-01  2.43e-02  1.25e-04  5.61e-03  2.37e-05  5.20e-04  8.60e-01  
 10  +2.5087e-01  +2.5418e-01  3.31e-03  1.69e-05  7.56e-04  2.52e-06  7.56e-05  9.54e-01  
 11  +2.4993e-01  +2.5034e-01  4.04e-04  2.05e-06  9.17e-05  2.87e-07  9.60e-06  8.97e-01  
 12  +2.4980e-01  +2.4981e-01  5.71e-06  2.90e-08  1.30e-06  3.93e-09  1.37e-07  9.86e-01  
 13  +2.4980e-01  +2.4980e-01  5.72e-08  2.91e-10  1.30e-08  3.94e-11  1.37e-09  9.90e-01  
 14  +2.4980e-01  +2.4980e-01  5.72e-10  2.91e-12  1.30e-10  3.94e-13  1.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2926ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:34 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:34 PM: Optimal value: 2.498e-01
(CVXPY) Aug 31 04:58:34 PM: Compilation took 2.870e-03 seconds
(CVXPY) Aug 31 04:58:34 PM: Solver (including time spent in interface) took 6.200e-03 seconds
FULL MODEL:
  Accruacy: 0.702
  Our objective: 0.40399999999999997

IF 
    (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.03200000000000004)
 OR (x3 = 1 AND x4 = 1 AND x7 = 1 AND x1 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.028000000000000035)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.03600000000000004)
 OR (x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 1 AND x4 = 0)                                  <-- (term's our objective: 0.04000000000000004)
 OR (x2 = 1 AND x3 = 1 AND x5 = 1 AND x0 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.03200000000000003)
 OR (x5 = 1 AND x6 = 1 AND x2 = 0 AND x4 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.04000000000000004)
 OR (x1 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.024000000000000028)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0)                       <-- (term's our objective: 0.008000000000000007)
 OR (x0 = 1 AND x4 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x5 = 0)                       <-- (term's our objective: 0.024000000000000025)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x0 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.01200000000000001)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.016000000000000014)
 OR (x0 = 1 AND x5 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.0040000000000000036)
 OR (x2 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.01200000000000001)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x1 = 0 AND x7 = 0)            <-- (term's our objective: 0.008000000000000007)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.01200000000000001)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x3 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.01200000000000001)
 OR (x0 = 1 AND x2 = 1 AND x6 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.016000000000000014)
 OR (x4 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.020000000000000018)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x0 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.01600000000000002)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.008000000000000007)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x7 = 1 AND x0 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.016000000000000018)
 OR (x0 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0040000000000000036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0040000000000000036)
 OR (x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.0040000000000000036)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1 AND x1 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0040000000000000036)
 OR (x1 = 1 AND x6 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0040000000000000036)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.232426643371582
Best over terms:
  Our final objective: 0.04000000000000004
    Its accruacy: 0.52
    Its hamming distance: 11
  Shortest hamming distance: 3
    Its our objective: 0.03600000000000004
  Highest accruacy: 0.52
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

