Command:
python test_script.py -s smallest_subclass -d 6 -n 50000 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.01884
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 6.

Computed total variation: 0.041400000000000006
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:52:46 PM: Your problem has 25013 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:52:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:52:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:52:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:52:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:52:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:52:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:52:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:52:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:52:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:52:46 PM: Finished problem compilation (took 8.324e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25013
  constraints   = 50013
  nnz(P)        = 0
  nnz(A)        = 225013
  cones (total) = 1
    : Nonnegative = 1,  numel = 50013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.9317e-01  +5.1431e+03  5.14e+03  3.90e-01  1.35e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4210e-01  +6.8134e+02  6.81e+02  1.56e-01  6.85e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1087e-01  +1.7229e+02  1.72e+02  1.40e-01  6.15e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0082e-01  +1.0792e+01  1.03e+01  2.98e-02  1.29e+01  3.44e-06  1.93e-01  4.61e-01  
  5  +5.0000e-01  +9.7763e-01  4.78e-01  1.44e-03  6.40e-01  2.51e-05  1.79e-01  4.96e-01  
  6  +5.0000e-01  +5.4251e-01  4.25e-02  1.27e-04  5.66e-02  2.09e-06  1.65e-02  9.09e-01  
  7  +5.0000e-01  +5.2136e-01  2.14e-02  6.37e-05  2.84e-02  2.33e-06  3.73e-03  8.62e-01  
  8  +4.9995e-01  +5.2804e-01  2.81e-02  6.37e-05  2.84e-02  2.84e-05  3.51e-04  9.32e-01  
  9  +4.9862e-01  +5.2513e-01  2.65e-02  3.45e-06  1.54e-03  8.09e-04  1.10e-05  9.69e-01  
 10  +4.9636e-01  +5.1590e-01  1.95e-02  1.05e-06  4.68e-04  1.43e-03  3.33e-06  7.27e-01  
 11  +4.9506e-01  +5.0136e-01  6.30e-03  3.33e-07  1.49e-04  5.41e-05  1.11e-06  8.22e-01  
 12  +4.9349e-01  +4.9426e-01  7.77e-04  3.48e-08  1.55e-05  4.54e-06  1.25e-07  9.13e-01  
 13  +4.9319e-01  +4.9322e-01  2.77e-05  1.11e-09  4.95e-07  8.29e-08  4.45e-09  9.81e-01  
 14  +4.9318e-01  +4.9318e-01  2.77e-07  1.10e-11  4.94e-09  8.30e-10  4.46e-11  9.90e-01  
 15  +4.9318e-01  +4.9318e-01  2.87e-09  1.14e-13  5.09e-11  2.18e-11  1.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 276.7185ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:47 PM: Problem status: optimal
(CVXPY) Aug 31 04:52:47 PM: Optimal value: 4.932e-01
(CVXPY) Aug 31 04:52:47 PM: Compilation took 8.324e-02 seconds
(CVXPY) Aug 31 04:52:47 PM: Solver (including time spent in interface) took 3.040e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4932
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:52:47 PM: Your problem has 25023 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:52:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:52:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:52:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:52:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:52:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:52:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:52:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:52:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:52:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:52:47 PM: Finished problem compilation (took 8.909e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25023
  constraints   = 50023
  nnz(P)        = 0
  nnz(A)        = 238869
  cones (total) = 1
    : Nonnegative = 1,  numel = 50023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1432e+03  5.14e+03  3.90e-01  1.36e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4209e-01  +6.8121e+02  6.81e+02  1.56e-01  6.88e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7223e+02  1.72e+02  1.40e-01  6.17e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0748e+01  1.02e+01  2.97e-02  1.29e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1007e+00  6.01e-01  1.81e-03  8.08e-01  2.55e-05  1.80e-01  4.23e-01  
  6  +5.0000e-01  +7.3495e-01  2.35e-01  7.03e-04  3.15e-01  9.09e-06  7.74e-02  6.10e-01  
  7  +5.0000e-01  +6.3667e-01  1.37e-01  4.08e-04  1.83e-01  4.77e-06  4.35e-02  5.58e-01  
  8  +5.0000e-01  +6.3701e-01  1.37e-01  4.09e-04  1.83e-01  4.73e-06  4.35e-02  1.54e-02  
  9  +5.0000e-01  +5.9541e-01  9.54e-02  2.85e-04  1.27e-01  2.24e-06  2.50e-02  7.47e-01  
 10  +5.0001e-01  +5.9861e-01  9.86e-02  2.94e-04  1.32e-01  1.65e-06  2.29e-02  3.98e-01  
 11  +5.0000e-01  +5.6537e-01  6.54e-02  1.95e-04  8.72e-02  5.85e-07  9.71e-03  9.68e-01  
 12  +5.0000e-01  +5.2944e-01  2.94e-02  8.07e-05  3.61e-02  2.34e-06  7.27e-04  9.41e-01  
 13  +4.9977e-01  +5.2979e-01  3.00e-02  3.96e-06  1.78e-03  1.36e-04  1.25e-05  9.83e-01  
 14  +4.9917e-01  +5.2848e-01  2.93e-02  1.46e-06  6.56e-04  3.39e-04  4.57e-06  6.72e-01  
 15  +4.9805e-01  +5.2339e-01  2.53e-02  1.41e-06  6.32e-04  2.26e-04  4.42e-06  1.11e-01  
 16  +4.9616e-01  +5.1547e-01  1.93e-02  1.23e-06  5.51e-04  1.80e-05  3.95e-06  5.97e-01  
 17  +4.9601e-01  +5.1466e-01  1.86e-02  1.19e-06  5.33e-04  1.58e-05  3.83e-06  9.31e-02  
 18  +4.9593e-01  +5.1437e-01  1.84e-02  1.16e-06  5.20e-04  1.19e-05  3.73e-06  2.22e-01  
 19  +4.9493e-01  +5.0996e-01  1.50e-02  8.56e-07  3.84e-04  7.96e-06  2.74e-06  3.97e-01  
 20  +4.9496e-01  +5.1011e-01  1.52e-02  8.55e-07  3.84e-04  7.69e-06  2.74e-06  4.59e-02  
 21  +4.9228e-01  +4.9824e-01  5.95e-03  2.60e-07  1.17e-04  2.26e-06  8.25e-07  8.32e-01  
 22  +4.9233e-01  +4.9850e-01  6.17e-03  2.61e-07  1.17e-04  2.28e-06  8.18e-07  6.62e-02  
 23  +4.9234e-01  +4.9867e-01  6.33e-03  2.65e-07  1.19e-04  1.99e-06  8.07e-07  1.67e-01  
 24  +4.9192e-01  +4.9751e-01  5.59e-03  1.93e-07  8.67e-05  1.41e-06  5.68e-07  5.19e-01  
 25  +4.9116e-01  +4.9539e-01  4.23e-03  1.73e-07  7.77e-05  4.49e-07  5.65e-07  2.27e-01  
 26  +4.9008e-01  +4.9110e-01  1.02e-03  3.47e-08  1.56e-05  1.79e-07  1.03e-07  8.35e-01  
 27  +4.8935e-01  +4.8942e-01  7.34e-05  2.17e-09  9.74e-07  9.64e-09  6.40e-09  9.48e-01  
 28  +4.8930e-01  +4.8930e-01  7.46e-07  2.19e-11  9.81e-09  9.81e-11  6.48e-11  9.90e-01  
 29  +4.8930e-01  +4.8930e-01  7.46e-09  2.19e-13  9.81e-11  9.81e-13  6.48e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 505.8276ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:47 PM: Problem status: optimal
(CVXPY) Aug 31 04:52:47 PM: Optimal value: 4.893e-01
(CVXPY) Aug 31 04:52:47 PM: Compilation took 8.909e-02 seconds
(CVXPY) Aug 31 04:52:47 PM: Solver (including time spent in interface) took 5.313e-01 seconds
Iteration: 2, Objective: 0.4893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:52:47 PM: Your problem has 25033 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:52:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:52:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:52:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:52:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:52:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:52:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:52:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:52:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:52:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:52:48 PM: Finished problem compilation (took 9.431e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25033
  constraints   = 50033
  nnz(P)        = 0
  nnz(A)        = 252147
  cones (total) = 1
    : Nonnegative = 1,  numel = 50033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1433e+03  5.14e+03  3.90e-01  1.37e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4208e-01  +6.8112e+02  6.81e+02  1.56e-01  6.90e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7220e+02  1.72e+02  1.40e-01  6.20e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0744e+01  1.02e+01  2.97e-02  1.29e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1578e+00  6.58e-01  1.98e-03  8.89e-01  2.55e-05  1.81e-01  3.90e-01  
  6  +5.0001e-01  +7.5369e-01  2.54e-01  7.59e-04  3.41e-01  8.86e-06  7.98e-02  6.03e-01  
  7  +5.0001e-01  +7.0571e-01  2.06e-01  6.15e-04  2.77e-01  6.69e-06  6.24e-02  3.32e-01  
  8  +5.0001e-01  +7.0728e-01  2.07e-01  6.20e-04  2.79e-01  6.56e-06  6.23e-02  4.02e-02  
  9  +5.0001e-01  +6.7533e-01  1.75e-01  5.24e-04  2.35e-01  4.17e-06  4.66e-02  5.67e-01  
 10  +5.0000e-01  +6.2764e-01  1.28e-01  3.81e-04  1.71e-01  3.11e-06  3.05e-02  4.21e-01  
 11  +5.0001e-01  +6.2870e-01  1.29e-01  3.84e-04  1.73e-01  2.06e-06  2.57e-02  5.21e-01  
 12  +5.0001e-01  +6.0854e-01  1.09e-01  3.24e-04  1.45e-01  2.02e-06  1.71e-02  3.69e-01  
 13  +5.0001e-01  +6.0142e-01  1.01e-01  3.02e-04  1.36e-01  1.52e-06  1.21e-02  5.37e-01  
 14  +5.0001e-01  +5.8756e-01  8.76e-02  2.60e-04  1.17e-01  1.60e-07  8.55e-03  8.83e-01  
 15  +5.0000e-01  +5.6857e-01  6.86e-02  1.58e-04  7.11e-02  8.90e-07  9.22e-04  9.12e-01  
 16  +4.9994e-01  +5.6840e-01  6.85e-02  6.49e-06  2.93e-03  3.77e-05  2.12e-05  9.77e-01  
 17  +4.9980e-01  +5.6272e-01  6.29e-02  3.41e-06  1.54e-03  5.58e-05  1.11e-05  5.83e-01  
 18  +4.9828e-01  +5.5095e-01  5.27e-02  3.36e-06  1.52e-03  3.59e-05  1.11e-05  3.45e-02  
 19  +4.9818e-01  +5.4993e-01  5.17e-02  3.35e-06  1.51e-03  3.34e-05  1.10e-05  3.18e-02  
 20  +4.9755e-01  +5.4461e-01  4.71e-02  3.04e-06  1.37e-03  2.51e-05  1.00e-05  2.05e-01  
 21  +4.9722e-01  +5.3962e-01  4.24e-02  2.87e-06  1.29e-03  1.00e-05  9.55e-06  4.22e-01  
 22  +4.9704e-01  +5.3795e-01  4.09e-02  2.81e-06  1.27e-03  7.76e-06  9.30e-06  1.70e-01  
 23  +4.9611e-01  +5.3248e-01  3.64e-02  2.32e-06  1.05e-03  6.69e-06  7.68e-06  2.18e-01  
 24  +4.9577e-01  +5.2876e-01  3.30e-02  2.04e-06  9.19e-04  7.00e-08  6.66e-06  8.52e-01  
 25  +4.9308e-01  +5.1492e-01  2.18e-02  1.14e-06  5.16e-04  6.12e-08  3.71e-06  4.95e-01  
 26  +4.9313e-01  +5.1510e-01  2.20e-02  1.14e-06  5.16e-04  6.32e-08  3.71e-06  8.96e-03  
 27  +4.9312e-01  +5.1506e-01  2.19e-02  1.15e-06  5.17e-04  6.70e-08  3.71e-06  3.19e-02  
 28  +4.9222e-01  +5.1078e-01  1.86e-02  8.63e-07  3.89e-04  8.98e-08  2.71e-06  4.55e-01  
 29  +4.9237e-01  +5.1150e-01  1.91e-02  8.57e-07  3.86e-04  1.12e-07  2.67e-06  1.72e-01  
 30  +4.9111e-01  +5.0616e-01  1.51e-02  5.45e-07  2.46e-04  1.09e-07  1.67e-06  4.14e-01  
 31  +4.8961e-01  +5.0139e-01  1.18e-02  5.13e-07  2.31e-04  6.48e-08  1.67e-06  4.93e-02  
 32  +4.8663e-01  +4.8938e-01  2.74e-03  8.90e-08  4.01e-05  3.20e-08  2.81e-07  8.82e-01  
 33  +4.8530e-01  +4.8541e-01  1.15e-04  3.66e-09  1.65e-06  1.50e-09  1.17e-08  9.88e-01  
 34  +4.8524e-01  +4.8524e-01  1.15e-06  3.67e-11  1.65e-08  1.50e-11  1.18e-10  9.90e-01  
 35  +4.8524e-01  +4.8524e-01  1.15e-08  3.67e-13  1.65e-10  1.50e-13  1.18e-12  9.90e-01  
 36  +4.8524e-01  +4.8524e-01  1.16e-10  3.72e-15  1.66e-12  1.87e-15  1.46e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 637.5909ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:48 PM: Problem status: optimal
(CVXPY) Aug 31 04:52:48 PM: Optimal value: 4.852e-01
(CVXPY) Aug 31 04:52:48 PM: Compilation took 9.431e-02 seconds
(CVXPY) Aug 31 04:52:48 PM: Solver (including time spent in interface) took 6.637e-01 seconds
Iteration: 3, Objective: 0.4852
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:52:48 PM: Your problem has 25043 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:52:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:52:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:52:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:52:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:52:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:52:48 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:52:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:52:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:52:48 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:52:48 PM: Finished problem compilation (took 9.799e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25043
  constraints   = 50043
  nnz(P)        = 0
  nnz(A)        = 262063
  cones (total) = 1
    : Nonnegative = 1,  numel = 50043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +5.1435e+03  5.14e+03  3.90e-01  1.37e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8094e+02  6.80e+02  1.56e-01  6.92e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7216e+02  1.72e+02  1.40e-01  6.21e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0749e+01  1.02e+01  2.97e-02  1.29e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1572e+00  6.57e-01  1.98e-03  8.90e-01  2.55e-05  1.81e-01  3.91e-01  
  6  +5.0000e-01  +7.0551e-01  2.06e-01  6.14e-04  2.77e-01  6.85e-06  6.54e-02  6.98e-01  
  7  +5.0001e-01  +6.9128e-01  1.91e-01  5.72e-04  2.58e-01  6.05e-06  5.82e-02  2.02e-01  
  8  +5.0001e-01  +6.9523e-01  1.95e-01  5.83e-04  2.63e-01  5.79e-06  5.78e-02  9.57e-02  
  9  +5.0001e-01  +6.5411e-01  1.54e-01  4.60e-04  2.07e-01  3.55e-06  3.93e-02  6.13e-01  
 10  +5.0001e-01  +6.3802e-01  1.38e-01  4.12e-04  1.86e-01  3.10e-06  3.16e-02  2.90e-01  
 11  +5.0001e-01  +6.2963e-01  1.30e-01  3.87e-04  1.74e-01  2.77e-06  2.61e-02  2.85e-01  
 12  +5.0001e-01  +6.1891e-01  1.19e-01  3.55e-04  1.60e-01  2.20e-06  1.88e-02  4.89e-01  
 13  +5.0000e-01  +6.0036e-01  1.00e-01  2.98e-04  1.34e-01  2.69e-06  9.55e-03  5.32e-01  
 14  +4.9998e-01  +5.6857e-01  6.86e-02  1.54e-04  6.93e-02  1.55e-05  8.52e-04  9.24e-01  
 15  +4.9931e-01  +5.6638e-01  6.71e-02  9.42e-06  4.26e-03  4.08e-04  3.07e-05  9.64e-01  
 16  +4.9898e-01  +5.5350e-01  5.45e-02  5.11e-06  2.31e-03  3.15e-04  1.65e-05  7.90e-01  
 17  +4.9854e-01  +5.5053e-01  5.20e-02  4.18e-06  1.89e-03  3.24e-04  1.34e-05  2.42e-01  
 18  +4.9849e-01  +5.4982e-01  5.13e-02  4.08e-06  1.85e-03  2.98e-04  1.31e-05  9.29e-02  
 19  +4.9828e-01  +5.4688e-01  4.86e-02  3.75e-06  1.70e-03  1.76e-04  1.19e-05  4.08e-01  
 20  +4.9624e-01  +5.3370e-01  3.75e-02  2.13e-06  9.61e-04  3.58e-05  6.64e-06  9.65e-01  
 21  +4.9600e-01  +5.3308e-01  3.71e-02  1.95e-06  8.80e-04  3.42e-05  6.04e-06  1.65e-01  
 22  +4.9564e-01  +5.3203e-01  3.64e-02  1.92e-06  8.68e-04  3.05e-05  6.02e-06  6.15e-02  
 23  +4.9557e-01  +5.3215e-01  3.66e-02  1.86e-06  8.42e-04  2.77e-05  5.83e-06  1.32e-01  
 24  +4.9420e-01  +5.2671e-01  3.25e-02  1.61e-06  7.28e-04  2.84e-07  5.07e-06  8.17e-01  
 25  +4.9122e-01  +5.1598e-01  2.48e-02  1.06e-06  4.79e-04  2.27e-07  3.38e-06  4.53e-01  
 26  +4.8968e-01  +5.1006e-01  2.04e-02  8.28e-07  3.74e-04  1.90e-07  2.67e-06  3.55e-01  
 27  +4.8966e-01  +5.0996e-01  2.03e-02  8.27e-07  3.74e-04  1.89e-07  2.66e-06  2.66e-02  
 28  +4.8868e-01  +5.0611e-01  1.74e-02  6.85e-07  3.09e-04  1.70e-07  2.22e-06  4.15e-01  
 29  +4.8872e-01  +5.0607e-01  1.73e-02  6.71e-07  3.03e-04  1.78e-07  2.18e-06  2.34e-01  
 30  +4.8444e-01  +4.9066e-01  6.22e-03  2.24e-07  1.01e-04  5.89e-08  7.51e-07  7.10e-01  
 31  +4.8206e-01  +4.8227e-01  2.18e-04  7.52e-09  3.40e-06  1.56e-09  2.60e-08  9.71e-01  
 32  +4.8196e-01  +4.8196e-01  2.19e-06  7.56e-11  3.42e-08  1.56e-11  2.62e-10  9.90e-01  
 33  +4.8196e-01  +4.8196e-01  2.19e-08  7.56e-13  3.42e-10  1.56e-13  2.62e-12  9.90e-01  
 34  +4.8196e-01  +4.8196e-01  2.20e-10  7.56e-15  3.43e-12  1.89e-15  3.15e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 630.7347ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:49 PM: Problem status: optimal
(CVXPY) Aug 31 04:52:49 PM: Optimal value: 4.820e-01
(CVXPY) Aug 31 04:52:49 PM: Compilation took 9.799e-02 seconds
(CVXPY) Aug 31 04:52:49 PM: Solver (including time spent in interface) took 6.574e-01 seconds
Iteration: 4, Objective: 0.4820
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:52:49 PM: Your problem has 25045 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:52:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:52:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:52:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:52:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:52:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:52:49 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:52:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:52:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:52:49 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:52:49 PM: Finished problem compilation (took 1.042e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25045
  constraints   = 50045
  nnz(P)        = 0
  nnz(A)        = 263292
  cones (total) = 1
    : Nonnegative = 1,  numel = 50045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +5.1435e+03  5.14e+03  3.90e-01  1.37e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8093e+02  6.80e+02  1.56e-01  6.92e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7215e+02  1.72e+02  1.40e-01  6.21e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0749e+01  1.02e+01  2.97e-02  1.29e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1569e+00  6.57e-01  1.98e-03  8.90e-01  2.55e-05  1.81e-01  3.92e-01  
  6  +5.0000e-01  +7.0646e-01  2.06e-01  6.17e-04  2.78e-01  6.88e-06  6.57e-02  6.97e-01  
  7  +5.0001e-01  +6.9173e-01  1.92e-01  5.73e-04  2.58e-01  6.05e-06  5.83e-02  2.09e-01  
  8  +5.0001e-01  +6.9567e-01  1.96e-01  5.85e-04  2.64e-01  5.79e-06  5.79e-02  9.55e-02  
  9  +5.0001e-01  +6.5113e-01  1.51e-01  4.51e-04  2.03e-01  3.52e-06  3.85e-02  6.18e-01  
 10  +5.0001e-01  +6.3602e-01  1.36e-01  4.06e-04  1.83e-01  3.10e-06  3.09e-02  2.89e-01  
 11  +5.0001e-01  +6.2808e-01  1.28e-01  3.82e-04  1.72e-01  2.75e-06  2.54e-02  3.03e-01  
 12  +5.0000e-01  +6.1265e-01  1.13e-01  3.36e-04  1.51e-01  2.44e-06  1.67e-02  4.82e-01  
 13  +5.0000e-01  +5.9663e-01  9.66e-02  2.87e-04  1.29e-01  3.33e-06  7.85e-03  5.64e-01  
 14  +4.9996e-01  +5.6817e-01  6.82e-02  1.15e-04  5.19e-02  2.89e-05  5.02e-04  9.46e-01  
 15  +4.9888e-01  +5.6460e-01  6.57e-02  6.48e-06  2.93e-03  6.48e-04  2.10e-05  9.58e-01  
 16  +4.9811e-01  +5.5584e-01  5.77e-02  4.38e-06  1.98e-03  6.27e-04  1.41e-05  4.54e-01  
 17  +4.9821e-01  +5.5428e-01  5.61e-02  4.30e-06  1.95e-03  5.04e-04  1.38e-05  1.62e-01  
 18  +4.9791e-01  +5.5185e-01  5.39e-02  3.86e-06  1.75e-03  4.76e-04  1.23e-05  1.70e-01  
 19  +4.9785e-01  +5.4969e-01  5.18e-02  3.66e-06  1.66e-03  3.70e-04  1.16e-05  2.19e-01  
 20  +4.9680e-01  +5.4181e-01  4.50e-02  2.74e-06  1.24e-03  2.42e-04  8.59e-06  4.99e-01  
 21  +4.9606e-01  +5.3852e-01  4.25e-02  2.28e-06  1.03e-03  2.32e-04  7.13e-06  2.26e-01  
 22  +4.9597e-01  +5.3819e-01  4.22e-02  2.27e-06  1.03e-03  2.22e-04  7.12e-06  2.93e-02  
 23  +4.9578e-01  +5.3739e-01  4.16e-02  2.14e-06  9.66e-04  1.96e-04  6.70e-06  1.63e-01  
 24  +4.9458e-01  +5.2944e-01  3.49e-02  1.84e-06  8.32e-04  1.90e-06  5.83e-06  7.70e-01  
 25  +4.9207e-01  +5.2029e-01  2.82e-02  1.28e-06  5.77e-04  1.43e-06  4.09e-06  4.01e-01  
 26  +4.8896e-01  +5.0794e-01  1.90e-02  7.71e-07  3.48e-04  2.23e-07  2.52e-06  8.57e-01  
 27  +4.8892e-01  +5.0778e-01  1.89e-02  7.65e-07  3.46e-04  2.20e-07  2.50e-06  5.38e-02  
 28  +4.8822e-01  +5.0497e-01  1.67e-02  6.44e-07  2.91e-04  1.86e-07  2.11e-06  7.98e-01  
 29  +4.8527e-01  +4.9432e-01  9.05e-03  3.29e-07  1.49e-04  1.03e-07  1.11e-06  9.90e-01  
 30  +4.8210e-01  +4.8333e-01  1.23e-03  4.31e-08  1.95e-05  1.33e-08  1.50e-07  9.47e-01  
 31  +4.8159e-01  +4.8160e-01  1.47e-05  5.12e-10  2.31e-07  1.50e-10  1.80e-09  9.88e-01  
 32  +4.8158e-01  +4.8158e-01  1.47e-07  5.11e-12  2.31e-09  1.50e-12  1.80e-11  9.90e-01  
 33  +4.8158e-01  +4.8158e-01  1.47e-09  5.13e-14  2.32e-11  1.69e-14  2.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 610.1082ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:50 PM: Problem status: optimal
(CVXPY) Aug 31 04:52:50 PM: Optimal value: 4.816e-01
(CVXPY) Aug 31 04:52:50 PM: Compilation took 1.042e-01 seconds
(CVXPY) Aug 31 04:52:50 PM: Solver (including time spent in interface) took 6.373e-01 seconds
Iteration: 5, Objective: 0.4816
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:52:50 PM: Your problem has 25047 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:52:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:52:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:52:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:52:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:52:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:52:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:52:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:52:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:52:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:52:50 PM: Finished problem compilation (took 1.031e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25047
  constraints   = 50047
  nnz(P)        = 0
  nnz(A)        = 264514
  cones (total) = 1
    : Nonnegative = 1,  numel = 50047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +5.1437e+03  5.14e+03  3.90e-01  1.37e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8087e+02  6.80e+02  1.56e-01  6.92e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7214e+02  1.72e+02  1.40e-01  6.21e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0752e+01  1.03e+01  2.97e-02  1.29e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1719e+00  6.72e-01  2.02e-03  9.10e-01  2.55e-05  1.81e-01  3.83e-01  
  6  +5.0001e-01  +7.1128e-01  2.11e-01  6.32e-04  2.85e-01  6.87e-06  6.66e-02  6.92e-01  
  7  +5.0001e-01  +6.9772e-01  1.98e-01  5.91e-04  2.66e-01  6.13e-06  6.00e-02  1.86e-01  
  8  +5.0001e-01  +7.0234e-01  2.02e-01  6.05e-04  2.73e-01  5.84e-06  5.94e-02  1.09e-01  
  9  +5.0000e-01  +6.3844e-01  1.38e-01  4.13e-04  1.86e-01  3.75e-06  3.65e-02  5.34e-01  
 10  +5.0000e-01  +6.2110e-01  1.21e-01  3.62e-04  1.63e-01  3.44e-06  2.77e-02  2.94e-01  
 11  +5.0000e-01  +6.2054e-01  1.21e-01  3.60e-04  1.62e-01  2.85e-06  2.25e-02  4.20e-01  
 12  +5.0000e-01  +6.1023e-01  1.10e-01  3.29e-04  1.48e-01  2.97e-06  1.60e-02  3.33e-01  
 13  +5.0000e-01  +5.8436e-01  8.44e-02  2.48e-04  1.12e-01  5.43e-06  4.67e-03  7.39e-01  
 14  +4.9977e-01  +5.6828e-01  6.85e-02  3.70e-05  1.67e-02  1.41e-04  1.27e-04  9.79e-01  
 15  +4.9799e-01  +5.6153e-01  6.35e-02  4.61e-06  2.09e-03  1.07e-03  1.49e-05  8.84e-01  
 16  +4.9747e-01  +5.5593e-01  5.85e-02  3.90e-06  1.76e-03  9.25e-04  1.25e-05  2.60e-01  
 17  +4.9775e-01  +5.4583e-01  4.81e-02  3.31e-06  1.50e-03  6.77e-05  1.05e-05  7.76e-01  
 18  +4.9684e-01  +5.4020e-01  4.34e-02  2.65e-06  1.20e-03  5.34e-05  8.33e-06  3.59e-01  
 19  +4.9662e-01  +5.3947e-01  4.28e-02  2.44e-06  1.10e-03  5.01e-05  7.66e-06  1.62e-01  
 20  +4.9604e-01  +5.3683e-01  4.08e-02  2.36e-06  1.07e-03  3.30e-05  7.54e-06  2.34e-01  
 21  +4.9461e-01  +5.3045e-01  3.58e-02  1.89e-06  8.54e-04  2.35e-06  6.02e-06  8.31e-01  
 22  +4.8888e-01  +5.0896e-01  2.01e-02  8.09e-07  3.66e-04  9.09e-07  2.65e-06  7.52e-01  
 23  +4.8891e-01  +5.0905e-01  2.01e-02  8.07e-07  3.65e-04  9.00e-07  2.64e-06  2.51e-02  
 24  +4.8889e-01  +5.0892e-01  2.00e-02  8.06e-07  3.64e-04  8.73e-07  2.63e-06  2.43e-02  
 25  +4.8759e-01  +5.0399e-01  1.64e-02  6.39e-07  2.89e-04  6.16e-07  2.11e-06  3.28e-01  
 26  +4.8762e-01  +5.0401e-01  1.64e-02  6.34e-07  2.87e-04  5.75e-07  2.10e-06  1.03e-01  
 27  +4.8373e-01  +4.8961e-01  5.88e-03  2.13e-07  9.63e-05  8.52e-08  7.32e-07  9.01e-01  
 28  +4.8151e-01  +4.8177e-01  2.59e-04  9.16e-09  4.14e-06  2.85e-09  3.25e-08  9.71e-01  
 29  +4.8140e-01  +4.8140e-01  2.62e-06  9.24e-11  4.18e-08  2.86e-11  3.29e-10  9.90e-01  
 30  +4.8140e-01  +4.8140e-01  2.62e-08  9.24e-13  4.18e-10  2.86e-13  3.29e-12  9.90e-01  
 31  +4.8140e-01  +4.8140e-01  2.62e-10  9.21e-15  4.19e-12  3.16e-15  3.62e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 596.3ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:51 PM: Problem status: optimal
(CVXPY) Aug 31 04:52:51 PM: Optimal value: 4.814e-01
(CVXPY) Aug 31 04:52:51 PM: Compilation took 1.031e-01 seconds
(CVXPY) Aug 31 04:52:51 PM: Solver (including time spent in interface) took 6.223e-01 seconds
Iteration: 6, Objective: 0.4814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:52:51 PM: Your problem has 25053 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:52:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:52:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:52:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:52:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:52:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:52:51 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:52:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:52:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:52:51 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:52:51 PM: Finished problem compilation (took 1.120e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25053
  constraints   = 50053
  nnz(P)        = 0
  nnz(A)        = 270168
  cones (total) = 1
    : Nonnegative = 1,  numel = 50053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +5.1437e+03  5.14e+03  3.90e-01  1.37e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4205e-01  +6.8077e+02  6.80e+02  1.56e-01  6.92e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7213e+02  1.72e+02  1.40e-01  6.21e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0755e+01  1.03e+01  2.98e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1646e+00  6.65e-01  2.00e-03  9.02e-01  2.55e-05  1.81e-01  3.87e-01  
  6  +5.0000e-01  +6.6230e-01  1.62e-01  4.85e-04  2.19e-01  5.51e-06  5.32e-02  7.11e-01  
  7  +5.0000e-01  +6.3751e-01  1.38e-01  4.11e-04  1.85e-01  4.73e-06  4.14e-02  2.77e-01  
  8  +5.0000e-01  +6.3857e-01  1.39e-01  4.14e-04  1.87e-01  4.69e-06  4.14e-02  2.27e-02  
  9  +5.0000e-01  +6.3332e-01  1.33e-01  3.98e-04  1.80e-01  4.15e-06  3.38e-02  3.53e-01  
 10  +5.0000e-01  +6.2717e-01  1.27e-01  3.80e-04  1.71e-01  3.54e-06  2.59e-02  4.32e-01  
 11  +5.0000e-01  +5.7764e-01  7.76e-02  2.31e-04  1.04e-01  4.41e-06  7.31e-03  7.82e-01  
 12  +4.9990e-01  +5.7983e-01  7.99e-02  1.07e-04  4.82e-02  6.34e-05  4.32e-04  9.82e-01  
 13  +4.9828e-01  +5.7386e-01  7.56e-02  7.73e-06  3.50e-03  9.78e-04  2.57e-05  9.41e-01  
 14  +4.9799e-01  +5.6790e-01  6.99e-02  6.49e-06  2.94e-03  8.67e-04  2.15e-05  2.62e-01  
 15  +4.9859e-01  +5.6126e-01  6.27e-02  6.10e-06  2.76e-03  3.59e-04  2.00e-05  4.71e-01  
 16  +4.9799e-01  +5.5496e-01  5.70e-02  4.59e-06  2.08e-03  2.98e-04  1.50e-05  4.39e-01  
 17  +4.9769e-01  +5.5155e-01  5.39e-02  3.99e-06  1.81e-03  2.24e-04  1.29e-05  3.43e-01  
 18  +4.9712e-01  +5.4730e-01  5.02e-02  3.37e-06  1.52e-03  1.63e-04  1.08e-05  3.83e-01  
 19  +4.9602e-01  +5.4143e-01  4.54e-02  2.59e-06  1.17e-03  1.29e-04  8.25e-06  4.03e-01  
 20  +4.9606e-01  +5.4161e-01  4.56e-02  2.53e-06  1.15e-03  1.08e-04  8.07e-06  1.71e-01  
 21  +4.9563e-01  +5.4008e-01  4.45e-02  2.42e-06  1.10e-03  8.78e-05  7.75e-06  1.79e-01  
 22  +4.9364e-01  +5.3183e-01  3.82e-02  1.85e-06  8.39e-04  7.03e-05  5.99e-06  3.06e-01  
 23  +4.9166e-01  +5.2328e-01  3.16e-02  1.46e-06  6.59e-04  4.13e-05  4.77e-06  3.81e-01  
 24  +4.9028e-01  +5.1738e-01  2.71e-02  1.20e-06  5.43e-04  2.49e-05  3.97e-06  3.66e-01  
 25  +4.8860e-01  +5.1061e-01  2.20e-02  9.27e-07  4.19e-04  1.53e-05  3.11e-06  3.76e-01  
 26  +4.8821e-01  +5.0886e-01  2.07e-02  8.50e-07  3.85e-04  1.12e-05  2.86e-06  2.69e-01  
 27  +4.8745e-01  +5.0566e-01  1.82e-02  7.35e-07  3.33e-04  5.45e-06  2.49e-06  4.77e-01  
 28  +4.8490e-01  +4.9612e-01  1.12e-02  4.34e-07  1.96e-04  2.76e-06  1.50e-06  4.83e-01  
 29  +4.8490e-01  +4.9605e-01  1.12e-02  4.29e-07  1.94e-04  2.52e-06  1.49e-06  1.01e-01  
 30  +4.8228e-01  +4.8651e-01  4.23e-03  1.56e-07  7.08e-05  8.69e-07  5.58e-07  6.45e-01  
 31  +4.8072e-01  +4.8087e-01  1.51e-04  5.47e-09  2.47e-06  2.29e-08  1.99e-08  9.68e-01  
 32  +4.8066e-01  +4.8066e-01  1.51e-06  5.49e-11  2.48e-08  2.29e-10  2.01e-10  9.90e-01  
 33  +4.8066e-01  +4.8066e-01  1.51e-08  5.49e-13  2.48e-10  2.29e-12  2.01e-12  9.90e-01  
 34  +4.8066e-01  +4.8066e-01  1.52e-10  5.49e-15  2.49e-12  2.57e-14  2.24e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 667.8405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:52:52 PM: Optimal value: 4.807e-01
(CVXPY) Aug 31 04:52:52 PM: Compilation took 1.120e-01 seconds
(CVXPY) Aug 31 04:52:52 PM: Solver (including time spent in interface) took 6.972e-01 seconds
Iteration: 7, Objective: 0.4807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:52:52 PM: Your problem has 25056 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:52:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:52:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:52:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:52:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:52:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:52:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:52:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:52:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:52:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:52:52 PM: Finished problem compilation (took 1.068e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25056
  constraints   = 50056
  nnz(P)        = 0
  nnz(A)        = 272187
  cones (total) = 1
    : Nonnegative = 1,  numel = 50056

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +5.1437e+03  5.14e+03  3.90e-01  1.37e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4204e-01  +6.8069e+02  6.80e+02  1.56e-01  6.92e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7212e+02  1.72e+02  1.40e-01  6.21e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0757e+01  1.03e+01  2.98e-02  1.30e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0001e-01  +1.1713e+00  6.71e-01  2.02e-03  9.11e-01  2.55e-05  1.81e-01  3.83e-01  
  6  +5.0000e-01  +6.6330e-01  1.63e-01  4.88e-04  2.20e-01  5.47e-06  5.33e-02  7.10e-01  
  7  +5.0000e-01  +6.3362e-01  1.34e-01  3.99e-04  1.80e-01  4.51e-06  3.93e-02  3.42e-01  
  8  +5.0000e-01  +6.3439e-01  1.34e-01  4.01e-04  1.81e-01  4.48e-06  3.92e-02  1.69e-02  
  9  +5.0000e-01  +6.2720e-01  1.27e-01  3.80e-04  1.72e-01  4.07e-06  3.12e-02  3.45e-01  
 10  +5.0001e-01  +6.3092e-01  1.31e-01  3.90e-04  1.76e-01  2.14e-06  1.85e-02  9.29e-01  
 11  +5.0000e-01  +5.8544e-01  8.54e-02  2.49e-04  1.13e-01  4.11e-06  4.10e-03  8.09e-01  
 12  +4.9966e-01  +5.7688e-01  7.72e-02  2.02e-05  9.16e-03  2.02e-04  6.78e-05  9.89e-01  
 13  +4.9837e-01  +5.6910e-01  7.07e-02  4.72e-06  2.14e-03  7.62e-04  1.55e-05  7.85e-01  
 14  +4.9831e-01  +5.6621e-01  6.79e-02  4.58e-06  2.07e-03  6.15e-04  1.49e-05  1.58e-01  
 15  +4.9792e-01  +5.5834e-01  6.04e-02  4.08e-06  1.85e-03  3.50e-04  1.32e-05  3.71e-01  
 16  +4.9785e-01  +5.5713e-01  5.93e-02  4.03e-06  1.82e-03  3.17e-04  1.30e-05  7.31e-02  
 17  +4.9726e-01  +5.5246e-01  5.52e-02  3.42e-06  1.55e-03  2.63e-04  1.10e-05  2.86e-01  
 18  +4.9675e-01  +5.4643e-01  4.97e-02  2.91e-06  1.32e-03  1.10e-04  9.28e-06  5.54e-01  
 19  +4.9671e-01  +5.4582e-01  4.91e-02  2.83e-06  1.28e-03  8.98e-05  9.04e-06  1.76e-01  
 20  +4.9629e-01  +5.4394e-01  4.77e-02  2.68e-06  1.21e-03  6.64e-05  8.57e-06  2.51e-01  
 21  +4.9558e-01  +5.4061e-01  4.50e-02  2.44e-06  1.11e-03  5.27e-05  7.85e-06  2.12e-01  
 22  +4.9366e-01  +5.3225e-01  3.86e-02  1.91e-06  8.67e-04  3.59e-05  6.21e-06  3.59e-01  
 23  +4.9175e-01  +5.2401e-01  3.23e-02  1.51e-06  6.83e-04  2.15e-05  4.97e-06  3.81e-01  
 24  +4.9105e-01  +5.2101e-01  3.00e-02  1.37e-06  6.21e-04  1.67e-05  4.54e-06  2.08e-01  
 25  +4.8927e-01  +5.1308e-01  2.38e-02  1.03e-06  4.65e-04  4.05e-06  3.45e-06  6.85e-01  
 26  +4.8756e-01  +5.0651e-01  1.89e-02  7.85e-07  3.56e-04  2.90e-06  2.67e-06  2.89e-01  
 27  +4.8702e-01  +5.0407e-01  1.70e-02  6.83e-07  3.09e-04  9.31e-07  2.36e-06  6.68e-01  
 28  +4.8442e-01  +4.9422e-01  9.80e-03  3.80e-07  1.72e-04  4.46e-07  1.34e-06  5.18e-01  
 29  +4.8299e-01  +4.8887e-01  5.88e-03  2.23e-07  1.01e-04  2.30e-07  8.00e-07  5.12e-01  
 30  +4.8276e-01  +4.8821e-01  5.45e-03  2.03e-07  9.18e-05  1.63e-07  7.20e-07  4.20e-01  
 31  +4.8114e-01  +4.8235e-01  1.20e-03  4.41e-08  2.00e-05  3.25e-08  1.60e-07  8.11e-01  
 32  +4.8112e-01  +4.8228e-01  1.16e-03  4.26e-08  1.93e-05  2.81e-08  1.54e-07  1.53e-01  
 33  +4.8112e-01  +4.8226e-01  1.14e-03  4.19e-08  1.90e-05  2.70e-08  1.51e-07  6.04e-02  
 34  +4.8096e-01  +4.8169e-01  7.32e-04  2.67e-08  1.21e-05  1.35e-08  9.59e-08  6.84e-01  
 35  +4.8072e-01  +4.8087e-01  1.47e-04  5.38e-09  2.44e-06  1.61e-09  1.94e-08  9.71e-01  
 36  +4.8067e-01  +4.8070e-01  3.17e-05  1.15e-09  5.21e-07  3.65e-10  4.15e-09  8.86e-01  
 37  +4.8066e-01  +4.8066e-01  3.22e-07  1.17e-11  5.28e-09  3.71e-12  4.21e-11  9.90e-01  
 38  +4.8066e-01  +4.8066e-01  3.22e-09  1.17e-13  5.28e-11  3.71e-14  4.21e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 825.1656ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:52:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:52:53 PM: Optimal value: 4.807e-01
(CVXPY) Aug 31 04:52:53 PM: Compilation took 1.068e-01 seconds
(CVXPY) Aug 31 04:52:53 PM: Solver (including time spent in interface) took 8.527e-01 seconds
FULL MODEL:
  Accruacy: 0.5141
  Our objective: 0.028199999999999947

IF 
    (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.00319999999999996)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.01883999999999998)
 OR (x2 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.0023599999999999958)
 OR (x0 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.0018399999999999979)
 OR (x2 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.001960000000000019)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 15.149349212646484
Best over terms:
  Our final objective: 0.01883999999999998
    Its accruacy: 0.50942
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.01883999999999998
  Highest accruacy: 0.50942
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

