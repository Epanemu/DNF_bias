Command:
python test_script.py -s smallest_subclass -d 2 -n 1000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.354
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 2.

Computed total variation: 0.354
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:39 PM: Your problem has 505 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:39 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:39 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:39 PM: Finished problem compilation (took 4.846e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 505
  constraints   = 1005
  nnz(P)        = 0
  nnz(A)        = 2505
  cones (total) = 1
    : Nonnegative = 1,  numel = 1005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0103e+02  5.01e+02  9.47e-01  2.19e+01  1.00e+00  1.00e+00   ------   
  1  +6.3660e-01  +8.7825e+01  8.72e+01  2.58e-01  1.03e+01  4.49e-03  3.90e-01  7.25e-01  
  2  +5.5644e-01  +1.6182e+01  1.56e+01  1.15e-01  5.25e+00  5.43e-03  2.07e-01  6.14e-01  
  3  +4.9998e-01  +1.6143e+00  1.11e+00  2.31e-02  1.00e+00  2.45e-03  1.91e-01  3.73e-01  
  4  +4.9663e-01  +9.2882e-01  4.32e-01  7.61e-03  3.41e-01  2.75e-03  3.49e-02  8.63e-01  
  5  +4.4524e-01  +8.7746e-01  4.32e-01  1.04e-03  4.78e-02  2.83e-02  2.95e-03  9.29e-01  
  6  +4.2009e-01  +6.1179e-01  1.92e-01  5.24e-04  2.36e-02  2.10e-04  1.88e-03  5.62e-01  
  7  +3.7883e-01  +4.1720e-01  3.84e-02  8.70e-05  3.90e-03  1.80e-05  3.83e-04  8.16e-01  
  8  +3.7206e-01  +3.8900e-01  1.69e-02  3.82e-05  1.71e-03  7.47e-06  1.75e-04  9.90e-01  
  9  +3.6717e-01  +3.6741e-01  2.38e-04  5.34e-07  2.39e-05  1.06e-07  2.56e-06  9.86e-01  
 10  +3.6710e-01  +3.6710e-01  2.38e-06  5.34e-09  2.39e-07  1.06e-09  2.56e-08  9.90e-01  
 11  +3.6710e-01  +3.6710e-01  2.38e-08  5.34e-11  2.39e-09  1.06e-11  2.56e-10  9.90e-01  
 12  +3.6710e-01  +3.6710e-01  2.38e-10  5.34e-13  2.39e-11  1.06e-13  2.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9505ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:39 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:39 PM: Optimal value: 3.671e-01
(CVXPY) Aug 31 04:44:39 PM: Compilation took 4.846e-03 seconds
(CVXPY) Aug 31 04:44:39 PM: Solver (including time spent in interface) took 2.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3671
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:39 PM: Your problem has 506 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:39 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:39 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:39 PM: Finished problem compilation (took 2.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 506
  constraints   = 1006
  nnz(P)        = 0
  nnz(A)        = 2725
  cones (total) = 1
    : Nonnegative = 1,  numel = 1006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +5.0177e+02  5.01e+02  9.48e-01  2.29e+01  1.00e+00  1.01e+00   ------   
  1  +6.3498e-01  +8.8133e+01  8.75e+01  2.59e-01  1.08e+01  4.49e-03  3.93e-01  7.24e-01  
  2  +5.5592e-01  +1.6091e+01  1.55e+01  1.14e-01  5.43e+00  5.53e-03  2.05e-01  6.24e-01  
  3  +5.0230e-01  +2.3125e+00  1.81e+00  3.67e-02  1.65e+00  2.81e-03  1.93e-01  2.57e-01  
  4  +4.9923e-01  +8.9233e-01  3.93e-01  7.57e-03  3.55e-01  1.32e-03  3.76e-02  8.27e-01  
  5  +4.6461e-01  +9.6356e-01  4.99e-01  1.13e-03  5.53e-02  2.01e-02  2.89e-03  9.54e-01  
  6  +4.4757e-01  +8.8069e-01  4.33e-01  8.45e-04  4.11e-02  1.72e-02  2.18e-03  3.17e-01  
  7  +4.3149e-01  +8.0096e-01  3.69e-01  6.76e-04  3.28e-02  1.29e-02  1.80e-03  2.56e-01  
  8  +3.9249e-01  +5.9720e-01  2.05e-01  4.08e-04  1.94e-02  1.09e-04  1.22e-03  6.97e-01  
  9  +3.3447e-01  +3.6081e-01  2.63e-02  4.80e-05  2.26e-03  1.31e-06  1.71e-04  9.29e-01  
 10  +3.2330e-01  +3.2375e-01  4.53e-04  8.33e-07  3.91e-05  6.39e-08  3.24e-06  9.84e-01  
 11  +3.2310e-01  +3.2311e-01  4.53e-06  8.32e-09  3.90e-07  6.38e-10  3.24e-08  9.90e-01  
 12  +3.2310e-01  +3.2310e-01  4.53e-08  8.32e-11  3.90e-09  6.38e-12  3.25e-10  9.90e-01  
 13  +3.2310e-01  +3.2310e-01  4.53e-10  8.32e-13  3.90e-11  6.38e-14  3.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0303ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:39 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:39 PM: Optimal value: 3.231e-01
(CVXPY) Aug 31 04:44:39 PM: Compilation took 2.991e-03 seconds
(CVXPY) Aug 31 04:44:39 PM: Solver (including time spent in interface) took 2.505e-03 seconds
FULL MODEL:
  Accruacy: 0.677
  Our objective: 0.3539999999999999

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3539999999999999)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7870771884918213
Best over terms:
  Our final objective: 0.3539999999999999
    Its accruacy: 0.677
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.3539999999999999
  Highest accruacy: 0.677
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

