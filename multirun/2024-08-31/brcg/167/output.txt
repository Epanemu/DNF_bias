Command:
python test_script.py -s smallest_subclass -d 5 -n 50 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.6000000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:45 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:45 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9349e-01  +2.5850e+01  2.54e+01  8.20e-01  5.81e+00  1.00e+00  1.07e+00   ------   
  1  +5.8827e-01  +5.4126e+00  4.82e+00  3.04e-01  3.09e+00  3.96e-03  5.35e-01  6.49e-01  
  2  +5.1098e-01  +9.9656e-01  4.86e-01  5.32e-02  6.38e-01  1.26e-02  1.50e-01  9.90e-01  
  3  +4.7898e-01  +8.9586e-01  4.17e-01  2.40e-02  3.00e-01  1.59e-02  7.58e-02  5.67e-01  
  4  +4.2889e-01  +6.0488e-01  1.76e-01  7.35e-03  9.20e-02  7.12e-03  2.73e-02  6.68e-01  
  5  +3.9636e-01  +4.5096e-01  5.46e-02  2.08e-03  2.59e-02  2.03e-03  9.10e-03  7.08e-01  
  6  +3.8148e-01  +3.8497e-01  3.49e-03  1.38e-04  1.70e-03  3.95e-05  6.48e-04  9.90e-01  
  7  +3.8011e-01  +3.8015e-01  3.55e-05  1.40e-06  1.73e-05  3.98e-07  6.61e-06  9.90e-01  
  8  +3.8010e-01  +3.8010e-01  3.55e-07  1.40e-08  1.73e-07  3.98e-09  6.61e-08  9.90e-01  
  9  +3.8010e-01  +3.8010e-01  3.55e-09  1.40e-10  1.73e-09  3.98e-11  6.61e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 209.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:45 PM: Optimal value: 3.801e-01
(CVXPY) Aug 31 04:47:45 PM: Compilation took 3.999e-03 seconds
(CVXPY) Aug 31 04:47:45 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:45 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:45 PM: Finished problem compilation (took 2.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 291
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8405e-01  +2.6391e+01  2.59e+01  8.34e-01  6.18e+00  1.00e+00  1.10e+00   ------   
  1  +5.4066e-01  +5.5600e+00  5.02e+00  3.24e-01  3.22e+00  3.97e-03  5.57e-01  6.39e-01  
  2  +4.5671e-01  +1.2653e+00  8.09e-01  7.45e-02  9.25e-01  1.44e-02  2.03e-01  8.66e-01  
  3  +3.8113e-01  +7.1573e-01  3.35e-01  2.12e-02  2.65e-01  6.41e-03  7.19e-02  8.02e-01  
  4  +3.4966e-01  +4.5759e-01  1.08e-01  6.20e-03  7.74e-02  1.92e-03  2.37e-02  7.45e-01  
  5  +3.3529e-01  +3.9624e-01  6.10e-02  2.86e-03  3.62e-02  1.13e-03  1.19e-02  5.43e-01  
  6  +3.2285e-01  +3.3083e-01  7.98e-03  3.82e-04  4.80e-03  6.20e-05  1.72e-03  9.90e-01  
  7  +3.2029e-01  +3.2055e-01  2.63e-04  1.25e-05  1.57e-04  1.72e-06  5.80e-05  9.67e-01  
  8  +3.2020e-01  +3.2021e-01  8.64e-06  4.14e-07  5.19e-06  5.98e-08  1.98e-06  9.90e-01  
  9  +3.2020e-01  +3.2020e-01  8.69e-08  4.17e-09  5.23e-08  6.01e-10  2.00e-08  9.90e-01  
 10  +3.2020e-01  +3.2020e-01  8.69e-10  4.17e-11  5.23e-10  6.01e-12  2.00e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 238.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:45 PM: Optimal value: 3.202e-01
(CVXPY) Aug 31 04:47:45 PM: Compilation took 2.004e-03 seconds
(CVXPY) Aug 31 04:47:45 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 2, Objective: 0.3202
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:45 PM: Your problem has 56 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:45 PM: Finished problem compilation (took 3.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 81
  nnz(P)        = 0
  nnz(A)        = 344
  cones (total) = 1
    : Nonnegative = 1,  numel = 81

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6854e-01  +2.6650e+01  2.62e+01  8.46e-01  6.10e+00  1.00e+00  1.12e+00   ------   
  1  +4.8125e-01  +5.6462e+00  5.16e+00  3.43e-01  3.17e+00  3.97e-03  5.79e-01  6.28e-01  
  2  +3.6424e-01  +1.3608e+00  9.97e-01  7.19e-02  8.54e-01  1.66e-02  2.02e-01  8.55e-01  
  3  +2.7287e-01  +5.6951e-01  2.97e-01  1.80e-02  2.14e-01  4.73e-03  6.24e-02  8.42e-01  
  4  +2.3754e-01  +3.3436e-01  9.68e-02  5.56e-03  6.53e-02  1.38e-03  2.25e-02  6.83e-01  
  5  +2.2170e-01  +2.2779e-01  6.09e-03  3.56e-04  4.14e-03  5.90e-05  1.61e-03  9.46e-01  
  6  +2.2040e-01  +2.2074e-01  3.40e-04  2.00e-05  2.32e-04  2.42e-06  9.53e-05  9.41e-01  
  7  +2.2031e-01  +2.2033e-01  2.53e-05  1.46e-06  1.69e-05  1.36e-07  8.17e-06  9.36e-01  
  8  +2.2030e-01  +2.2030e-01  2.60e-07  1.49e-08  1.73e-07  1.38e-09  8.51e-08  9.90e-01  
  9  +2.2030e-01  +2.2030e-01  2.60e-09  1.49e-10  1.73e-09  1.38e-11  8.52e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 233.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:45 PM: Optimal value: 2.203e-01
(CVXPY) Aug 31 04:47:45 PM: Compilation took 3.003e-03 seconds
(CVXPY) Aug 31 04:47:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:45 PM: Your problem has 57 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:45 PM: Finished problem compilation (took 2.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 82
  nnz(P)        = 0
  nnz(A)        = 348
  cones (total) = 1
    : Nonnegative = 1,  numel = 82

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6364e-01  +2.7146e+01  2.67e+01  8.46e-01  6.10e+00  1.00e+00  1.13e+00   ------   
  1  +4.5880e-01  +5.7402e+00  5.28e+00  3.43e-01  3.20e+00  3.98e-03  5.86e-01  6.27e-01  
  2  +3.3334e-01  +1.3605e+00  1.03e+00  7.33e-02  8.81e-01  1.64e-02  2.00e-01  8.53e-01  
  3  +2.5559e-01  +5.7784e-01  3.22e-01  2.11e-02  2.52e-01  4.91e-03  7.03e-02  8.79e-01  
  4  +2.1792e-01  +3.0982e-01  9.19e-02  5.52e-03  6.56e-02  1.25e-03  2.23e-02  7.18e-01  
  5  +2.0192e-01  +2.0873e-01  6.81e-03  4.10e-04  4.83e-03  6.40e-05  1.86e-03  9.39e-01  
  6  +2.0049e-01  +2.0082e-01  3.27e-04  1.99e-05  2.33e-04  2.33e-06  9.40e-05  9.50e-01  
  7  +2.0041e-01  +2.0042e-01  1.89e-05  1.14e-06  1.33e-05  9.77e-08  6.09e-06  9.50e-01  
  8  +2.0040e-01  +2.0040e-01  1.90e-07  1.15e-08  1.34e-07  9.77e-10  6.20e-08  9.90e-01  
  9  +2.0040e-01  +2.0040e-01  1.90e-09  1.15e-10  1.34e-09  9.79e-12  6.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 288.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:45 PM: Optimal value: 2.004e-01
(CVXPY) Aug 31 04:47:45 PM: Compilation took 2.992e-03 seconds
(CVXPY) Aug 31 04:47:45 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 4, Objective: 0.2004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:45 PM: Your problem has 59 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:45 PM: Finished problem compilation (took 2.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 84
  nnz(P)        = 0
  nnz(A)        = 357
  cones (total) = 1
    : Nonnegative = 1,  numel = 84

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6231e-01  +2.7087e+01  2.66e+01  8.48e-01  6.07e+00  1.00e+00  1.13e+00   ------   
  1  +4.4868e-01  +5.7697e+00  5.32e+00  3.45e-01  3.18e+00  4.01e-03  5.87e-01  6.23e-01  
  2  +3.2090e-01  +1.2139e+00  8.93e-01  6.36e-02  7.63e-01  1.72e-02  1.76e-01  9.07e-01  
  3  +2.4627e-01  +4.9468e-01  2.48e-01  1.63e-02  1.92e-01  4.06e-03  5.55e-02  8.77e-01  
  4  +2.1378e-01  +2.8367e-01  6.99e-02  4.30e-03  5.05e-02  1.02e-03  1.72e-02  7.18e-01  
  5  +2.0103e-01  +2.0370e-01  2.68e-03  1.65e-04  1.93e-03  2.58e-05  7.20e-04  9.69e-01  
  6  +2.0051e-01  +2.0088e-01  3.77e-04  2.34e-05  2.71e-04  2.80e-06  1.10e-04  8.56e-01  
  7  +2.0041e-01  +2.0043e-01  2.13e-05  1.31e-06  1.51e-05  1.05e-07  7.06e-06  9.62e-01  
  8  +2.0040e-01  +2.0040e-01  2.16e-07  1.32e-08  1.53e-07  1.06e-09  7.26e-08  9.90e-01  
  9  +2.0040e-01  +2.0040e-01  2.16e-09  1.33e-10  1.53e-09  1.06e-11  7.26e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 268.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:45 PM: Optimal value: 2.004e-01
(CVXPY) Aug 31 04:47:45 PM: Compilation took 2.998e-03 seconds
(CVXPY) Aug 31 04:47:45 PM: Solver (including time spent in interface) took 1.012e-03 seconds
FULL MODEL:
  Accruacy: 0.78
  Our objective: 0.56

IF 
    (x1 = 1 AND x3 = 0)                       <-- (term's our objective: 0.15999999999999995)
 OR (x1 = 0 AND x2 = 0 AND x4 = 0)            <-- (term's our objective: 0.32)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0) <-- (term's our objective: 0.08000000000000003)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8057072162628174
Best over terms:
  Our final objective: 0.32
    Its accruacy: 0.66
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.32
  Highest accruacy: 0.66
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

