Command:
python test_script.py -s smallest_subclass -d 4 -n 5000 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0736
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.08720000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:05 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:05 PM: Finished problem compilation (took 1.013e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5007e+03  2.50e+03  9.78e-01  6.03e+01  1.00e+00  1.00e+00   ------   
  1  +6.0815e-01  +4.8463e+02  4.84e+02  3.36e-01  3.35e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5088e-01  +7.5528e+01  7.50e+01  1.37e-01  1.67e+01  8.23e-03  2.27e-01  7.26e-01  
  3  +5.1010e-01  +1.5794e+01  1.53e+01  9.64e-02  1.14e+01  1.70e-05  2.24e-01  7.40e-02  
  4  +5.0003e-01  +9.8158e-01  4.82e-01  4.58e-03  5.53e-01  6.03e-06  1.46e-01  8.29e-01  
  5  +4.9998e-01  +5.9651e-01  9.65e-02  9.14e-04  1.11e-01  1.66e-06  2.81e-02  8.24e-01  
  6  +4.9891e-01  +7.2945e-01  2.31e-01  1.15e-03  1.41e-01  2.14e-05  4.56e-03  9.08e-01  
  7  +4.9079e-01  +6.5360e-01  1.63e-01  1.37e-04  1.67e-02  1.37e-04  4.39e-04  9.04e-01  
  8  +4.7670e-01  +5.1594e-01  3.92e-02  1.83e-05  2.23e-03  6.39e-05  6.08e-05  9.33e-01  
  9  +4.6813e-01  +4.7861e-01  1.05e-02  4.47e-06  5.47e-04  1.22e-05  1.68e-05  7.92e-01  
 10  +4.6481e-01  +4.6573e-01  9.15e-04  3.67e-07  4.49e-05  1.92e-07  1.50e-06  9.90e-01  
 11  +4.6450e-01  +4.6451e-01  9.23e-06  3.69e-09  4.51e-07  1.93e-09  1.52e-08  9.90e-01  
 12  +4.6450e-01  +4.6450e-01  9.23e-08  3.69e-11  4.51e-09  1.93e-11  1.52e-10  9.90e-01  
 13  +4.6450e-01  +4.6450e-01  9.23e-10  3.69e-13  4.51e-11  1.94e-13  1.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.262ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:05 PM: Optimal value: 4.645e-01
(CVXPY) Aug 31 04:47:05 PM: Compilation took 1.013e-02 seconds
(CVXPY) Aug 31 04:47:05 PM: Solver (including time spent in interface) took 1.994e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4645
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:05 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:05 PM: Finished problem compilation (took 7.125e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22814
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5012e+03  2.50e+03  9.78e-01  6.51e+01  1.00e+00  1.01e+00   ------   
  1  +6.0777e-01  +4.8621e+02  4.86e+02  3.38e-01  3.62e+01  4.09e-03  4.78e-01  6.65e-01  
  2  +5.5041e-01  +7.5165e+01  7.46e+01  1.38e-01  1.80e+01  8.40e-03  2.29e-01  7.30e-01  
  3  +5.0995e-01  +1.5662e+01  1.52e+01  9.65e-02  1.22e+01  1.73e-05  2.26e-01  7.86e-02  
  4  +5.0063e-01  +1.8992e+00  1.40e+00  1.33e-02  1.70e+00  6.99e-06  1.90e-01  3.71e-01  
  5  +5.0013e-01  +8.4096e-01  3.41e-01  3.25e-03  4.22e-01  2.05e-06  8.20e-02  6.24e-01  
  6  +5.0012e-01  +8.2049e-01  3.20e-01  3.05e-03  3.96e-01  2.05e-06  6.81e-02  2.29e-01  
  7  +5.0015e-01  +8.4547e-01  3.45e-01  3.28e-03  4.26e-01  1.94e-06  6.66e-02  2.29e-01  
  8  +5.0009e-01  +7.6045e-01  2.60e-01  2.42e-03  3.14e-01  1.90e-06  2.73e-02  8.75e-01  
  9  +4.9928e-01  +6.3536e-01  1.36e-01  4.25e-04  5.58e-02  1.32e-05  1.45e-03  9.62e-01  
 10  +4.9617e-01  +6.1338e-01  1.17e-01  1.06e-04  1.39e-02  4.60e-05  3.32e-04  7.74e-01  
 11  +4.9215e-01  +5.8825e-01  9.61e-02  7.35e-05  9.66e-03  2.71e-05  2.31e-04  5.67e-01  
 12  +4.9123e-01  +5.8908e-01  9.79e-02  6.22e-05  8.18e-03  1.57e-05  1.91e-04  6.71e-01  
 13  +4.8917e-01  +5.8206e-01  9.29e-02  4.90e-05  6.44e-03  1.33e-05  1.51e-04  4.89e-01  
 14  +4.8782e-01  +5.7577e-01  8.80e-02  4.82e-05  6.34e-03  1.15e-05  1.49e-04  9.10e-02  
 15  +4.8166e-01  +5.4554e-01  6.39e-02  3.01e-05  3.96e-03  7.31e-06  9.48e-05  5.87e-01  
 16  +4.7969e-01  +5.3607e-01  5.64e-02  2.58e-05  3.39e-03  6.35e-06  8.15e-05  1.98e-01  
 17  +4.7573e-01  +5.1619e-01  4.05e-02  1.72e-05  2.26e-03  4.33e-06  5.45e-05  6.10e-01  
 18  +4.7605e-01  +5.1779e-01  4.17e-02  1.72e-05  2.25e-03  4.63e-06  5.40e-05  4.40e-02  
 19  +4.7561e-01  +5.1530e-01  3.97e-02  1.71e-05  2.24e-03  4.18e-06  5.36e-05  1.09e-01  
 20  +4.7305e-01  +5.0372e-01  3.07e-02  1.24e-05  1.62e-03  3.37e-06  3.87e-05  4.17e-01  
 21  +4.7386e-01  +5.0819e-01  3.43e-02  1.26e-05  1.66e-03  4.18e-06  3.85e-05  9.24e-02  
 22  +4.7276e-01  +5.0354e-01  3.08e-02  1.01e-05  1.33e-03  4.12e-06  3.07e-05  4.70e-01  
 23  +4.7166e-01  +4.9992e-01  2.83e-02  9.90e-06  1.30e-03  3.54e-06  3.03e-05  1.25e-01  
 24  +4.6689e-01  +4.8260e-01  1.57e-02  4.94e-06  6.49e-04  2.11e-06  1.52e-05  5.32e-01  
 25  +4.6147e-01  +4.6313e-01  1.66e-03  5.12e-07  6.72e-05  2.48e-07  1.60e-06  9.82e-01  
 26  +4.6071e-01  +4.6073e-01  1.76e-05  5.39e-09  7.08e-07  2.59e-09  1.69e-08  9.90e-01  
 27  +4.6070e-01  +4.6070e-01  1.76e-07  5.39e-11  7.08e-09  2.59e-11  1.69e-10  9.90e-01  
 28  +4.6070e-01  +4.6070e-01  1.76e-09  5.39e-13  7.08e-11  2.60e-13  1.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.9461ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:05 PM: Optimal value: 4.607e-01
(CVXPY) Aug 31 04:47:05 PM: Compilation took 7.125e-03 seconds
(CVXPY) Aug 31 04:47:05 PM: Solver (including time spent in interface) took 4.103e-02 seconds
Iteration: 2, Objective: 0.4607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:05 PM: Your problem has 2520 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:05 PM: Finished problem compilation (took 7.101e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2520
  constraints   = 5020
  nnz(P)        = 0
  nnz(A)        = 23432
  cones (total) = 1
    : Nonnegative = 1,  numel = 5020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.78e-01  6.56e+01  1.00e+00  1.01e+00   ------   
  1  +6.0261e-01  +4.9344e+02  4.93e+02  3.52e-01  3.75e+01  4.02e-03  4.93e-01  6.55e-01  
  2  +5.4812e-01  +7.3205e+01  7.27e+01  1.39e-01  1.83e+01  9.11e-03  2.32e-01  7.57e-01  
  3  +5.1021e-01  +1.6296e+01  1.58e+01  9.92e-02  1.27e+01  2.01e-05  2.29e-01  8.74e-02  
  4  +5.0063e-01  +1.8522e+00  1.35e+00  1.29e-02  1.67e+00  7.32e-06  1.85e-01  4.22e-01  
  5  +5.0013e-01  +8.3606e-01  3.36e-01  3.20e-03  4.20e-01  2.26e-06  8.08e-02  6.21e-01  
  6  +5.0011e-01  +8.1153e-01  3.11e-01  2.96e-03  3.89e-01  2.25e-06  6.53e-02  2.48e-01  
  7  +5.0014e-01  +8.3579e-01  3.36e-01  3.19e-03  4.18e-01  2.11e-06  6.38e-02  2.31e-01  
  8  +5.0007e-01  +7.4220e-01  2.42e-01  2.27e-03  2.98e-01  2.18e-06  3.02e-02  5.99e-01  
  9  +5.0014e-01  +7.9149e-01  2.91e-01  2.48e-03  3.26e-01  1.94e-06  1.63e-02  9.90e-01  
 10  +4.9857e-01  +6.5069e-01  1.52e-01  1.41e-04  1.88e-02  2.95e-05  4.37e-04  9.80e-01  
 11  +4.9544e-01  +6.2548e-01  1.30e-01  8.92e-05  1.19e-02  3.11e-05  2.75e-04  4.51e-01  
 12  +4.9309e-01  +6.1029e-01  1.17e-01  7.62e-05  1.01e-02  2.37e-05  2.34e-04  3.12e-01  
 13  +4.8846e-01  +5.8343e-01  9.50e-02  5.10e-05  6.78e-03  1.94e-05  1.58e-04  4.19e-01  
 14  +4.8578e-01  +5.7573e-01  8.99e-02  4.11e-05  5.45e-03  1.55e-05  1.27e-04  4.96e-01  
 15  +4.8426e-01  +5.6857e-01  8.43e-02  3.81e-05  5.05e-03  1.38e-05  1.18e-04  1.40e-01  
 16  +4.8116e-01  +5.5476e-01  7.36e-02  3.14e-05  4.17e-03  1.14e-05  9.81e-05  2.78e-01  
 17  +4.7282e-01  +5.1756e-01  4.47e-02  1.78e-05  2.36e-03  4.20e-06  5.71e-05  8.65e-01  
 18  +4.7013e-01  +5.0601e-01  3.59e-02  1.36e-05  1.80e-03  3.87e-06  4.42e-05  7.33e-01  
 19  +4.6373e-01  +4.8215e-01  1.84e-02  6.61e-06  8.76e-04  2.03e-06  2.22e-05  6.96e-01  
 20  +4.5720e-01  +4.5810e-01  9.01e-04  3.14e-07  4.16e-05  6.82e-08  1.11e-06  9.78e-01  
 21  +4.5680e-01  +4.5681e-01  9.20e-06  3.20e-09  4.24e-07  6.81e-10  1.14e-08  9.90e-01  
 22  +4.5680e-01  +4.5680e-01  9.20e-08  3.20e-11  4.24e-09  6.81e-12  1.14e-10  9.90e-01  
 23  +4.5680e-01  +4.5680e-01  9.20e-10  3.20e-13  4.24e-11  6.85e-14  1.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.2973ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:05 PM: Optimal value: 4.568e-01
(CVXPY) Aug 31 04:47:05 PM: Compilation took 7.101e-03 seconds
(CVXPY) Aug 31 04:47:05 PM: Solver (including time spent in interface) took 3.599e-02 seconds
Iteration: 3, Objective: 0.4568
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:05 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:05 PM: Finished problem compilation (took 7.030e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 24225
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5010e+03  2.50e+03  9.78e-01  6.59e+01  1.00e+00  1.02e+00   ------   
  1  +6.0224e-01  +4.9570e+02  4.95e+02  3.57e-01  3.78e+01  3.99e-03  5.06e-01  6.51e-01  
  2  +5.4768e-01  +7.3026e+01  7.25e+01  1.42e-01  1.85e+01  9.42e-03  2.39e-01  7.62e-01  
  3  +5.1006e-01  +1.6150e+01  1.56e+01  1.00e-01  1.27e+01  2.07e-05  2.35e-01  9.33e-02  
  4  +5.0050e-01  +1.6532e+00  1.15e+00  1.12e-02  1.43e+00  7.18e-06  1.82e-01  4.93e-01  
  5  +5.0014e-01  +8.5727e-01  3.57e-01  3.45e-03  4.49e-01  2.54e-06  8.61e-02  5.64e-01  
  6  +5.0013e-01  +8.4098e-01  3.41e-01  3.29e-03  4.28e-01  2.53e-06  7.23e-02  2.42e-01  
  7  +5.0016e-01  +8.6317e-01  3.63e-01  3.50e-03  4.54e-01  2.39e-06  7.09e-02  2.04e-01  
  8  +5.0003e-01  +6.9995e-01  2.00e-01  1.90e-03  2.47e-01  2.24e-06  2.51e-02  7.02e-01  
  9  +5.0007e-01  +7.3935e-01  2.39e-01  2.13e-03  2.77e-01  2.38e-06  1.62e-02  7.76e-01  
 10  +4.9764e-01  +6.5362e-01  1.56e-01  1.43e-04  1.89e-02  4.47e-05  4.52e-04  9.87e-01  
 11  +4.9292e-01  +6.1354e-01  1.21e-01  8.00e-05  1.05e-02  4.09e-05  2.53e-04  5.45e-01  
 12  +4.9222e-01  +6.0786e-01  1.16e-01  7.74e-05  1.02e-02  3.50e-05  2.43e-04  1.25e-01  
 13  +4.8693e-01  +5.7798e-01  9.11e-02  4.79e-05  6.30e-03  2.93e-05  1.51e-04  4.56e-01  
 14  +4.8698e-01  +5.7839e-01  9.14e-02  4.79e-05  6.30e-03  2.94e-05  1.51e-04  8.71e-03  
 15  +4.8648e-01  +5.7897e-01  9.25e-02  4.39e-05  5.78e-03  2.79e-05  1.37e-04  2.35e-01  
 16  +4.8352e-01  +5.6190e-01  7.84e-02  3.65e-05  4.79e-03  1.39e-05  1.15e-04  5.39e-01  
 17  +4.8190e-01  +5.5568e-01  7.38e-02  3.52e-05  4.63e-03  1.12e-05  1.13e-04  1.72e-01  
 18  +4.7076e-01  +5.0678e-01  3.60e-02  1.46e-05  1.92e-03  4.88e-06  4.80e-05  6.86e-01  
 19  +4.7064e-01  +5.0611e-01  3.55e-02  1.43e-05  1.88e-03  4.67e-06  4.76e-05  8.64e-02  
 20  +4.7006e-01  +5.0446e-01  3.44e-02  1.36e-05  1.79e-03  4.47e-06  4.50e-05  2.02e-01  
 21  +4.6199e-01  +4.7565e-01  1.37e-02  4.95e-06  6.50e-04  1.49e-06  1.70e-05  8.86e-01  
 22  +4.5726e-01  +4.5839e-01  1.14e-03  4.01e-07  5.26e-05  1.06e-07  1.43e-06  9.20e-01  
 23  +4.5681e-01  +4.5682e-01  1.57e-05  5.52e-09  7.25e-07  1.40e-09  1.99e-08  9.86e-01  
 24  +4.5680e-01  +4.5680e-01  1.57e-07  5.52e-11  7.25e-09  1.40e-11  1.99e-10  9.90e-01  
 25  +4.5680e-01  +4.5680e-01  1.57e-09  5.52e-13  7.25e-11  1.40e-13  2.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.9367ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:05 PM: Optimal value: 4.568e-01
(CVXPY) Aug 31 04:47:05 PM: Compilation took 7.030e-03 seconds
(CVXPY) Aug 31 04:47:05 PM: Solver (including time spent in interface) took 3.691e-02 seconds
Iteration: 4, Objective: 0.4568
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:05 PM: Your problem has 2525 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:05 PM: Finished problem compilation (took 8.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2525
  constraints   = 5025
  nnz(P)        = 0
  nnz(A)        = 24713
  cones (total) = 1
    : Nonnegative = 1,  numel = 5025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5010e+03  2.50e+03  9.78e-01  6.61e+01  1.00e+00  1.02e+00   ------   
  1  +5.9990e-01  +5.0059e+02  5.00e+02  3.64e-01  3.84e+01  3.97e-03  5.11e-01  6.45e-01  
  2  +5.4655e-01  +7.5884e+01  7.53e+01  1.49e-01  1.93e+01  9.81e-03  2.49e-01  7.53e-01  
  3  +5.1120e-01  +1.7960e+01  1.74e+01  1.07e-01  1.36e+01  2.41e-05  2.35e-01  1.86e-01  
  4  +5.0028e-01  +1.2670e+00  7.67e-01  7.49e-03  9.73e-01  6.84e-06  1.55e-01  7.53e-01  
  5  +5.0010e-01  +8.2817e-01  3.28e-01  3.18e-03  4.16e-01  3.29e-06  7.83e-02  5.24e-01  
  6  +5.0011e-01  +8.3885e-01  3.39e-01  3.28e-03  4.30e-01  3.34e-06  7.73e-02  6.50e-02  
  7  +5.0011e-01  +8.4028e-01  3.40e-01  3.29e-03  4.30e-01  3.47e-06  6.19e-02  3.34e-01  
  8  +5.0015e-01  +8.7484e-01  3.75e-01  3.45e-03  4.49e-01  3.40e-06  2.95e-02  9.90e-01  
  9  +4.9938e-01  +6.3331e-01  1.34e-01  4.35e-04  5.75e-02  1.59e-05  1.50e-03  9.54e-01  
 10  +4.9759e-01  +6.2102e-01  1.23e-01  1.56e-04  2.07e-02  4.13e-05  4.99e-04  6.72e-01  
 11  +4.9562e-01  +6.1783e-01  1.22e-01  1.06e-04  1.40e-02  4.53e-05  3.31e-04  5.64e-01  
 12  +4.8877e-01  +5.8216e-01  9.34e-02  5.37e-05  7.11e-03  3.65e-05  1.73e-04  6.62e-01  
 13  +4.8868e-01  +5.8177e-01  9.31e-02  5.37e-05  7.11e-03  3.62e-05  1.73e-04  1.32e-03  
 14  +4.8762e-01  +5.7688e-01  8.93e-02  5.34e-05  7.08e-03  3.21e-05  1.72e-04  4.00e-02  
 15  +4.8558e-01  +5.7303e-01  8.74e-02  4.79e-05  6.34e-03  2.35e-05  1.54e-04  3.87e-01  
 16  +4.8456e-01  +5.6971e-01  8.52e-02  4.65e-05  6.15e-03  1.88e-05  1.50e-04  2.10e-01  
 17  +4.7827e-01  +5.4238e-01  6.41e-02  3.07e-05  4.06e-03  1.32e-05  1.01e-04  4.19e-01  
 18  +4.7038e-01  +5.0805e-01  3.77e-02  1.61e-05  2.13e-03  6.85e-06  5.43e-05  5.73e-01  
 19  +4.6999e-01  +5.0741e-01  3.74e-02  1.52e-05  2.01e-03  6.92e-06  5.09e-05  1.14e-01  
 20  +4.6985e-01  +5.0678e-01  3.69e-02  1.51e-05  2.00e-03  6.66e-06  5.07e-05  3.41e-02  
 21  +4.6799e-01  +5.0004e-01  3.20e-02  1.31e-05  1.73e-03  4.84e-06  4.45e-05  3.52e-01  
 22  +4.6292e-01  +4.8076e-01  1.78e-02  6.72e-06  8.88e-04  2.52e-06  2.34e-05  6.49e-01  
 23  +4.5745e-01  +4.5935e-01  1.90e-03  7.03e-07  9.29e-05  2.10e-07  2.57e-06  9.39e-01  
 24  +4.5675e-01  +4.5687e-01  1.18e-04  4.38e-08  5.78e-06  1.16e-08  1.65e-07  9.40e-01  
 25  +4.5670e-01  +4.5670e-01  1.32e-06  4.90e-10  6.48e-08  1.26e-10  1.87e-09  9.89e-01  
 26  +4.5670e-01  +4.5670e-01  1.32e-08  4.90e-12  6.48e-10  1.26e-12  1.87e-11  9.90e-01  
 27  +4.5670e-01  +4.5670e-01  1.32e-10  4.91e-14  6.48e-12  1.26e-14  1.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.2858ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:05 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:05 PM: Optimal value: 4.567e-01
(CVXPY) Aug 31 04:47:05 PM: Compilation took 8.008e-03 seconds
(CVXPY) Aug 31 04:47:05 PM: Solver (including time spent in interface) took 4.302e-02 seconds
FULL MODEL:
  Accruacy: 0.5436
  Our objective: 0.0872

IF 
    (x1 = 1 AND x3 = 0)                       <-- (term's our objective: 0.013200000000000017)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.07359999999999997)
 OR (x2 = 1 AND x3 = 1 AND x0 = 0 AND x1 = 0) <-- (term's our objective: 0.00040000000000001146)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.6248126029968262
Best over terms:
  Our final objective: 0.07359999999999997
    Its accruacy: 0.5368
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.07359999999999997
  Highest accruacy: 0.5368
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

