Command:
python test_script.py -s smallest_subclass -d 7 -n 50000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.008839999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 7.

Computed total variation: 0.04612000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:00 PM: Your problem has 25015 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:00 PM: Finished problem compilation (took 9.308e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25015
  constraints   = 50015
  nnz(P)        = 0
  nnz(A)        = 250015
  cones (total) = 1
    : Nonnegative = 1,  numel = 50015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.36e+02  1.00e+00  1.00e+00   ------   
  1  +5.8817e-01  +5.2537e+03  5.25e+03  4.08e-01  1.48e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3830e-01  +6.5389e+02  6.53e+02  1.62e-01  7.52e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6881e+02  1.68e+02  1.43e-01  6.66e+01  3.48e-05  2.47e-01  1.52e-01  
  4  +5.0105e-01  +1.3668e+01  1.32e+01  3.74e-02  1.70e+01  4.18e-06  1.95e-01  4.45e-01  
  5  +4.9999e-01  +9.9799e-01  4.98e-01  1.49e-03  7.05e-01  2.45e-05  1.87e-01  3.43e-01  
  6  +5.0000e-01  +5.3627e-01  3.63e-02  1.08e-04  5.12e-02  1.52e-06  1.42e-02  9.24e-01  
  7  +5.0000e-01  +5.1782e-01  1.78e-02  5.31e-05  2.52e-02  1.09e-06  4.56e-03  7.59e-01  
  8  +5.0000e-01  +5.1301e-01  1.30e-02  3.85e-05  1.82e-02  2.44e-06  9.92e-04  8.32e-01  
  9  +4.9970e-01  +5.1372e-01  1.40e-02  4.54e-06  2.15e-03  1.63e-04  1.45e-05  9.89e-01  
 10  +4.9811e-01  +5.0902e-01  1.09e-02  5.79e-07  2.75e-04  8.70e-04  1.79e-06  8.78e-01  
 11  +4.9747e-01  +5.0129e-01  3.83e-03  2.19e-07  1.04e-04  3.52e-05  7.02e-07  7.77e-01  
 12  +4.9654e-01  +4.9718e-01  6.43e-04  2.91e-08  1.38e-05  4.62e-06  1.05e-07  8.82e-01  
 13  +4.9629e-01  +4.9630e-01  1.78e-05  7.10e-10  3.37e-07  6.34e-08  2.87e-09  9.86e-01  
 14  +4.9628e-01  +4.9628e-01  1.78e-07  7.09e-12  3.36e-09  6.35e-10  2.87e-11  9.90e-01  
 15  +4.9628e-01  +4.9628e-01  1.78e-09  7.09e-14  3.36e-11  6.35e-12  2.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 295.5958ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:00 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:00 PM: Optimal value: 4.963e-01
(CVXPY) Aug 31 04:57:00 PM: Compilation took 9.308e-02 seconds
(CVXPY) Aug 31 04:57:00 PM: Solver (including time spent in interface) took 3.233e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4963
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:00 PM: Your problem has 25025 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:00 PM: Finished problem compilation (took 1.061e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25025
  constraints   = 50025
  nnz(P)        = 0
  nnz(A)        = 278682
  cones (total) = 1
    : Nonnegative = 1,  numel = 50025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.40e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2539e+03  5.25e+03  4.08e-01  1.51e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3829e-01  +6.5378e+02  6.53e+02  1.62e-01  7.66e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6877e+02  1.68e+02  1.43e-01  6.78e+01  3.48e-05  2.47e-01  1.52e-01  
  4  +5.0105e-01  +1.3660e+01  1.32e+01  3.74e-02  1.73e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0000e-01  +1.0135e+00  5.13e-01  1.54e-03  7.40e-01  2.47e-05  1.87e-01  3.40e-01  
  6  +5.0000e-01  +6.4057e-01  1.41e-01  4.20e-04  2.02e-01  6.44e-06  5.26e-02  7.33e-01  
  7  +5.0000e-01  +6.0621e-01  1.06e-01  3.17e-04  1.53e-01  4.87e-06  3.82e-02  3.03e-01  
  8  +5.0000e-01  +6.0703e-01  1.07e-01  3.19e-04  1.54e-01  4.76e-06  3.81e-02  3.84e-02  
  9  +5.0000e-01  +6.0388e-01  1.04e-01  3.10e-04  1.49e-01  2.83e-06  3.14e-02  6.03e-01  
 10  +5.0000e-01  +5.6776e-01  6.78e-02  2.02e-04  9.73e-02  1.92e-06  1.83e-02  4.71e-01  
 11  +5.0000e-01  +5.3516e-01  3.52e-02  1.05e-04  5.05e-02  1.42e-06  6.02e-03  7.59e-01  
 12  +4.9999e-01  +5.3243e-01  3.24e-02  9.40e-05  4.53e-02  4.47e-06  1.37e-03  8.01e-01  
 13  +4.9951e-01  +5.3053e-01  3.10e-02  6.32e-06  3.05e-03  2.64e-04  2.07e-05  9.86e-01  
 14  +4.9816e-01  +5.2318e-01  2.50e-02  1.65e-06  7.98e-04  6.96e-04  5.36e-06  7.59e-01  
 15  +4.9790e-01  +5.2105e-01  2.31e-02  1.36e-06  6.59e-04  5.94e-04  4.45e-06  2.74e-01  
 16  +4.9781e-01  +5.1946e-01  2.17e-02  1.16e-06  5.59e-04  4.51e-04  3.76e-06  3.36e-01  
 17  +4.9777e-01  +5.1826e-01  2.05e-02  1.12e-06  5.43e-04  3.42e-04  3.65e-06  1.60e-01  
 18  +4.9774e-01  +5.1796e-01  2.02e-02  1.12e-06  5.42e-04  3.28e-04  3.65e-06  1.39e-02  
 19  +4.9740e-01  +5.1520e-01  1.78e-02  9.36e-07  4.52e-04  2.15e-04  3.04e-06  3.54e-01  
 20  +4.9655e-01  +5.0844e-01  1.19e-02  6.04e-07  2.92e-04  2.26e-06  1.96e-06  8.49e-01  
 21  +4.9459e-01  +4.9863e-01  4.04e-03  1.75e-07  8.45e-05  8.11e-08  5.52e-07  9.64e-01  
 22  +4.9429e-01  +4.9763e-01  3.33e-03  1.10e-07  5.31e-05  8.47e-08  3.29e-07  4.47e-01  
 23  +4.9395e-01  +4.9660e-01  2.65e-03  1.05e-07  5.09e-05  4.65e-08  3.29e-07  8.70e-02  
 24  +4.9333e-01  +4.9471e-01  1.38e-03  4.27e-08  2.06e-05  2.85e-08  1.29e-07  7.36e-01  
 25  +4.9279e-01  +4.9285e-01  6.09e-05  1.84e-09  8.91e-07  1.02e-09  5.62e-09  9.90e-01  
 26  +4.9276e-01  +4.9276e-01  6.11e-07  1.85e-11  8.92e-09  1.02e-11  5.63e-11  9.90e-01  
 27  +4.9276e-01  +4.9276e-01  6.16e-09  1.86e-13  9.01e-11  1.51e-13  8.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 522.847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:01 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:01 PM: Optimal value: 4.928e-01
(CVXPY) Aug 31 04:57:01 PM: Compilation took 1.061e-01 seconds
(CVXPY) Aug 31 04:57:01 PM: Solver (including time spent in interface) took 5.510e-01 seconds
Iteration: 2, Objective: 0.4928
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:01 PM: Your problem has 25035 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:01 PM: Finished problem compilation (took 1.026e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25035
  constraints   = 50035
  nnz(P)        = 0
  nnz(A)        = 297746
  cones (total) = 1
    : Nonnegative = 1,  numel = 50035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.42e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2540e+03  5.25e+03  4.08e-01  1.52e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3828e-01  +6.5371e+02  6.53e+02  1.62e-01  7.71e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6874e+02  1.68e+02  1.43e-01  6.82e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3659e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0001e-01  +1.1679e+00  6.68e-01  2.00e-03  9.69e-01  2.45e-05  1.89e-01  2.62e-01  
  6  +5.0001e-01  +7.5383e-01  2.54e-01  7.58e-04  3.68e-01  8.08e-06  8.23e-02  6.22e-01  
  7  +5.0001e-01  +6.6189e-01  1.62e-01  4.83e-04  2.34e-01  3.67e-06  5.01e-02  6.97e-01  
  8  +5.0001e-01  +6.3344e-01  1.33e-01  3.98e-04  1.93e-01  2.86e-06  4.01e-02  2.91e-01  
  9  +5.0001e-01  +6.3472e-01  1.35e-01  4.02e-04  1.95e-01  1.95e-06  3.74e-02  4.46e-01  
 10  +5.0000e-01  +5.5875e-01  5.87e-02  1.75e-04  8.50e-02  9.42e-07  1.46e-02  6.83e-01  
 11  +5.0000e-01  +5.5375e-01  5.37e-02  1.60e-04  7.77e-02  8.61e-07  9.41e-03  5.31e-01  
 12  +5.0000e-01  +5.5021e-01  5.02e-02  1.49e-04  7.22e-02  5.30e-07  4.16e-03  9.90e-01  
 13  +4.9999e-01  +5.3375e-01  3.38e-02  6.25e-05  3.03e-02  4.15e-06  2.75e-04  9.60e-01  
 14  +4.9977e-01  +5.3319e-01  3.34e-02  2.91e-06  1.42e-03  1.25e-04  8.91e-06  9.68e-01  
 15  +4.9969e-01  +5.3149e-01  3.18e-02  2.41e-06  1.17e-03  1.10e-04  7.34e-06  3.59e-01  
 16  +4.9955e-01  +5.2889e-01  2.93e-02  2.05e-06  9.97e-04  6.27e-05  6.27e-06  5.28e-01  
 17  +4.9948e-01  +5.2817e-01  2.87e-02  1.98e-06  9.62e-04  4.90e-05  6.05e-06  2.25e-01  
 18  +4.9903e-01  +5.2523e-01  2.62e-02  1.70e-06  8.29e-04  1.84e-05  5.22e-06  6.42e-01  
 19  +4.9828e-01  +5.2224e-01  2.40e-02  1.31e-06  6.36e-04  1.72e-05  4.02e-06  3.22e-01  
 20  +4.9821e-01  +5.2202e-01  2.38e-02  1.31e-06  6.36e-04  1.68e-05  4.02e-06  1.25e-02  
 21  +4.9731e-01  +5.1865e-01  2.13e-02  1.07e-06  5.21e-04  1.34e-05  3.31e-06  2.88e-01  
 22  +4.9691e-01  +5.1708e-01  2.02e-02  1.02e-06  4.94e-04  8.06e-06  3.14e-06  3.16e-01  
 23  +4.9290e-01  +5.0221e-01  9.31e-03  3.65e-07  1.78e-04  2.71e-06  1.15e-06  7.59e-01  
 24  +4.9169e-01  +4.9799e-01  6.30e-03  2.26e-07  1.10e-04  1.77e-06  7.07e-07  4.32e-01  
 25  +4.9165e-01  +4.9784e-01  6.19e-03  2.26e-07  1.10e-04  1.71e-06  7.07e-07  2.43e-03  
 26  +4.9051e-01  +4.9436e-01  3.86e-03  1.31e-07  6.38e-05  4.83e-07  4.14e-07  7.16e-01  
 27  +4.8994e-01  +4.9238e-01  2.44e-03  8.00e-08  3.89e-05  2.76e-07  2.53e-07  4.70e-01  
 28  +4.8989e-01  +4.9220e-01  2.31e-03  7.77e-08  3.78e-05  2.38e-07  2.53e-07  3.22e-02  
 29  +4.8948e-01  +4.9073e-01  1.26e-03  4.17e-08  2.03e-05  1.01e-07  1.36e-07  6.05e-01  
 30  +4.8941e-01  +4.9052e-01  1.11e-03  3.68e-08  1.79e-05  8.40e-08  1.18e-07  2.10e-01  
 31  +4.8928e-01  +4.9013e-01  8.52e-04  2.73e-08  1.33e-05  5.86e-08  8.70e-08  3.75e-01  
 32  +4.8891e-01  +4.8894e-01  2.58e-05  8.21e-10  3.99e-07  8.35e-10  2.63e-09  9.90e-01  
 33  +4.8890e-01  +4.8890e-01  2.58e-07  8.22e-12  4.00e-09  8.36e-12  2.63e-11  9.90e-01  
 34  +4.8890e-01  +4.8890e-01  2.60e-09  8.25e-14  4.02e-11  1.05e-13  3.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 701.5239ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:02 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:02 PM: Optimal value: 4.889e-01
(CVXPY) Aug 31 04:57:02 PM: Compilation took 1.026e-01 seconds
(CVXPY) Aug 31 04:57:02 PM: Solver (including time spent in interface) took 7.302e-01 seconds
Iteration: 3, Objective: 0.4889
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:02 PM: Your problem has 25045 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:02 PM: Finished problem compilation (took 1.080e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25045
  constraints   = 50045
  nnz(P)        = 0
  nnz(A)        = 306298
  cones (total) = 1
    : Nonnegative = 1,  numel = 50045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.43e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2539e+03  5.25e+03  4.08e-01  1.52e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3828e-01  +6.5368e+02  6.53e+02  1.62e-01  7.72e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1023e-01  +1.6873e+02  1.68e+02  1.43e-01  6.83e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3657e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0001e-01  +1.2032e+00  7.03e-01  2.11e-03  1.02e+00  2.45e-05  1.89e-01  2.50e-01  
  6  +5.0001e-01  +7.3145e-01  2.31e-01  6.91e-04  3.36e-01  5.58e-06  7.15e-02  8.29e-01  
  7  +5.0001e-01  +6.6244e-01  1.62e-01  4.85e-04  2.35e-01  3.41e-06  4.92e-02  4.99e-01  
  8  +5.0001e-01  +6.1752e-01  1.18e-01  3.51e-04  1.70e-01  2.27e-06  3.33e-02  4.62e-01  
  9  +5.0000e-01  +5.7193e-01  7.19e-02  2.15e-04  1.04e-01  1.39e-06  1.62e-02  6.60e-01  
 10  +5.0000e-01  +5.6300e-01  6.30e-02  1.88e-04  9.12e-02  1.52e-06  9.70e-03  4.59e-01  
 11  +5.0000e-01  +5.6078e-01  6.08e-02  1.80e-04  8.73e-02  1.05e-06  4.30e-03  9.90e-01  
 12  +4.9998e-01  +5.4266e-01  4.27e-02  4.79e-05  2.33e-02  1.51e-05  1.73e-04  9.66e-01  
 13  +4.9934e-01  +5.4123e-01  4.19e-02  2.37e-06  1.15e-03  3.46e-04  7.28e-06  9.58e-01  
 14  +4.9907e-01  +5.3967e-01  4.06e-02  2.16e-06  1.05e-03  3.38e-04  6.65e-06  1.28e-01  
 15  +4.9879e-01  +5.3720e-01  3.84e-02  2.06e-06  1.00e-03  2.58e-04  6.36e-06  1.98e-01  
 16  +4.9855e-01  +5.3512e-01  3.66e-02  1.99e-06  9.68e-04  1.95e-04  6.15e-06  1.91e-01  
 17  +4.9766e-01  +5.2969e-01  3.20e-02  1.73e-06  8.42e-04  8.80e-05  5.39e-06  4.77e-01  
 18  +4.9620e-01  +5.2398e-01  2.78e-02  1.35e-06  6.55e-04  6.93e-05  4.24e-06  3.12e-01  
 19  +4.9511e-01  +5.1884e-01  2.37e-02  1.17e-06  5.72e-04  6.71e-07  3.75e-06  7.68e-01  
 20  +4.9365e-01  +5.1373e-01  2.01e-02  9.17e-07  4.47e-04  5.47e-07  2.95e-06  2.61e-01  
 21  +4.9353e-01  +5.1324e-01  1.97e-02  8.86e-07  4.32e-04  4.68e-07  2.86e-06  1.93e-01  
 22  +4.9190e-01  +5.0742e-01  1.55e-02  6.28e-07  3.06e-04  1.09e-07  2.04e-06  9.90e-01  
 23  +4.9010e-01  +5.0125e-01  1.12e-02  4.26e-07  2.08e-04  8.82e-08  1.40e-06  4.73e-01  
 24  +4.8748e-01  +4.9233e-01  4.85e-03  1.73e-07  8.44e-05  4.24e-08  5.82e-07  6.92e-01  
 25  +4.8624e-01  +4.8815e-01  1.91e-03  6.64e-08  3.23e-05  1.83e-08  2.26e-07  6.92e-01  
 26  +4.8614e-01  +4.8780e-01  1.66e-03  5.75e-08  2.80e-05  1.83e-08  1.96e-07  4.42e-01  
 27  +4.8546e-01  +4.8556e-01  1.00e-04  3.44e-09  1.67e-06  1.18e-09  1.18e-08  9.69e-01  
 28  +4.8542e-01  +4.8542e-01  1.18e-06  4.03e-11  1.97e-08  1.35e-11  1.40e-10  9.89e-01  
 29  +4.8542e-01  +4.8542e-01  1.18e-08  4.03e-13  1.97e-10  1.35e-13  1.40e-12  9.90e-01  
 30  +4.8542e-01  +4.8542e-01  1.18e-10  3.99e-15  1.97e-12  1.42e-15  1.47e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 610.8616ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:03 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:03 PM: Optimal value: 4.854e-01
(CVXPY) Aug 31 04:57:03 PM: Compilation took 1.080e-01 seconds
(CVXPY) Aug 31 04:57:03 PM: Solver (including time spent in interface) took 6.395e-01 seconds
Iteration: 4, Objective: 0.4854
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:03 PM: Your problem has 25055 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:03 PM: Finished problem compilation (took 1.179e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25055
  constraints   = 50055
  nnz(P)        = 0
  nnz(A)        = 319533
  cones (total) = 1
    : Nonnegative = 1,  numel = 50055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.44e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2541e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3827e-01  +6.5357e+02  6.53e+02  1.62e-01  7.75e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6869e+02  1.68e+02  1.43e-01  6.86e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3658e+01  1.32e+01  3.74e-02  1.75e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1920e+00  6.92e-01  2.08e-03  1.01e+00  2.46e-05  1.89e-01  2.56e-01  
  6  +5.0001e-01  +7.7551e-01  2.75e-01  8.23e-04  4.01e-01  8.06e-06  8.54e-02  6.70e-01  
  7  +5.0001e-01  +7.2390e-01  2.24e-01  6.68e-04  3.26e-01  5.41e-06  6.66e-02  4.67e-01  
  8  +5.0001e-01  +6.4911e-01  1.49e-01  4.45e-04  2.17e-01  3.59e-06  4.42e-02  3.88e-01  
  9  +5.0001e-01  +6.2868e-01  1.29e-01  3.84e-04  1.87e-01  2.47e-06  3.44e-02  4.73e-01  
 10  +5.0001e-01  +6.0575e-01  1.06e-01  3.15e-04  1.54e-01  8.20e-07  2.24e-02  8.75e-01  
 11  +5.0001e-01  +5.9120e-01  9.12e-02  2.72e-04  1.33e-01  5.17e-07  1.58e-02  5.69e-01  
 12  +5.0000e-01  +5.5705e-01  5.70e-02  1.69e-04  8.25e-02  4.39e-07  4.95e-03  8.67e-01  
 13  +4.9999e-01  +5.3489e-01  3.49e-02  4.05e-05  1.98e-02  7.27e-06  1.47e-04  9.84e-01  
 14  +4.9967e-01  +5.3431e-01  3.46e-02  2.00e-06  9.81e-04  1.71e-04  6.13e-06  9.58e-01  
 15  +4.9931e-01  +5.3308e-01  3.38e-02  1.70e-06  8.33e-04  1.74e-04  5.21e-06  2.35e-01  
 16  +4.9913e-01  +5.3251e-01  3.34e-02  1.64e-06  8.05e-04  1.63e-04  5.04e-06  9.26e-02  
 17  +4.9860e-01  +5.3073e-01  3.21e-02  1.60e-06  7.84e-04  1.22e-04  4.93e-06  2.02e-01  
 18  +4.9697e-01  +5.2512e-01  2.82e-02  1.49e-06  7.27e-04  3.19e-05  4.64e-06  5.48e-01  
 19  +4.9528e-01  +5.1931e-01  2.40e-02  1.21e-06  5.92e-04  5.45e-06  3.83e-06  7.03e-01  
 20  +4.9197e-01  +5.0769e-01  1.57e-02  6.64e-07  3.25e-04  3.29e-06  2.15e-06  5.04e-01  
 21  +4.9196e-01  +5.0766e-01  1.57e-02  6.63e-07  3.24e-04  3.22e-06  2.14e-06  2.12e-02  
 22  +4.9155e-01  +5.0628e-01  1.47e-02  5.99e-07  2.93e-04  2.03e-06  1.94e-06  3.76e-01  
 23  +4.9154e-01  +5.0624e-01  1.47e-02  5.97e-07  2.92e-04  1.99e-06  1.94e-06  1.73e-02  
 24  +4.9155e-01  +5.0628e-01  1.47e-02  5.97e-07  2.92e-04  1.94e-06  1.93e-06  2.87e-02  
 25  +4.8958e-01  +4.9952e-01  9.94e-03  3.76e-07  1.84e-04  8.71e-07  1.24e-06  5.62e-01  
 26  +4.8884e-01  +4.9694e-01  8.10e-03  2.92e-07  1.43e-04  2.62e-07  9.65e-07  7.72e-01  
 27  +4.8617e-01  +4.8792e-01  1.75e-03  6.06e-08  2.96e-05  4.05e-08  2.06e-07  8.66e-01  
 28  +4.8555e-01  +4.8586e-01  3.04e-04  1.04e-08  5.10e-06  4.23e-09  3.58e-08  9.90e-01  
 29  +4.8542e-01  +4.8543e-01  9.51e-06  3.27e-10  1.60e-07  1.27e-10  1.13e-09  9.70e-01  
 30  +4.8542e-01  +4.8542e-01  9.52e-08  3.27e-12  1.60e-09  1.27e-12  1.13e-11  9.90e-01  
 31  +4.8542e-01  +4.8542e-01  9.52e-10  3.27e-14  1.60e-11  1.27e-14  1.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 664.0909ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:04 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:04 PM: Optimal value: 4.854e-01
(CVXPY) Aug 31 04:57:04 PM: Compilation took 1.179e-01 seconds
(CVXPY) Aug 31 04:57:04 PM: Solver (including time spent in interface) took 6.939e-01 seconds
Iteration: 5, Objective: 0.4854
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:04 PM: Your problem has 25065 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:04 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:04 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:04 PM: Finished problem compilation (took 1.211e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25065
  constraints   = 50065
  nnz(P)        = 0
  nnz(A)        = 327245
  cones (total) = 1
    : Nonnegative = 1,  numel = 50065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.44e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2540e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5352e+02  6.53e+02  1.62e-01  7.75e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6867e+02  1.68e+02  1.43e-01  6.86e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3654e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1947e+00  6.95e-01  2.08e-03  1.01e+00  2.46e-05  1.89e-01  2.56e-01  
  6  +5.0001e-01  +6.9908e-01  1.99e-01  5.94e-04  2.90e-01  5.32e-06  6.36e-02  7.77e-01  
  7  +5.0001e-01  +6.7500e-01  1.75e-01  5.22e-04  2.55e-01  4.08e-06  5.24e-02  3.71e-01  
  8  +5.0001e-01  +6.5779e-01  1.58e-01  4.71e-04  2.30e-01  2.87e-06  4.25e-02  4.80e-01  
  9  +5.0001e-01  +6.0491e-01  1.05e-01  3.13e-04  1.53e-01  1.26e-06  2.31e-02  8.05e-01  
 10  +5.0001e-01  +6.0778e-01  1.08e-01  3.21e-04  1.57e-01  5.66e-07  1.91e-02  6.96e-01  
 11  +5.0000e-01  +5.7214e-01  7.21e-02  2.14e-04  1.05e-01  6.17e-07  7.20e-03  6.72e-01  
 12  +5.0000e-01  +5.5573e-01  5.57e-02  1.37e-04  6.70e-02  3.07e-06  8.63e-04  8.92e-01  
 13  +4.9974e-01  +5.5436e-01  5.46e-02  5.70e-06  2.79e-03  1.42e-04  1.77e-05  9.80e-01  
 14  +4.9921e-01  +5.4910e-01  4.99e-02  2.82e-06  1.38e-03  2.28e-04  8.71e-06  5.80e-01  
 15  +4.9872e-01  +5.4471e-01  4.60e-02  2.66e-06  1.30e-03  1.69e-04  8.22e-06  1.86e-01  
 16  +4.9848e-01  +5.4229e-01  4.38e-02  2.63e-06  1.29e-03  1.37e-04  8.18e-06  9.62e-02  
 17  +4.9826e-01  +5.4039e-01  4.21e-02  2.48e-06  1.21e-03  1.12e-04  7.69e-06  1.88e-01  
 18  +4.9811e-01  +5.3873e-01  4.06e-02  2.41e-06  1.18e-03  8.57e-05  7.48e-06  1.84e-01  
 19  +4.9765e-01  +5.3468e-01  3.70e-02  2.26e-06  1.11e-03  3.58e-05  7.06e-06  4.50e-01  
 20  +4.9737e-01  +5.3318e-01  3.58e-02  2.18e-06  1.07e-03  2.75e-05  6.81e-06  1.96e-01  
 21  +4.9656e-01  +5.2951e-01  3.30e-02  1.86e-06  9.09e-04  1.83e-05  5.82e-06  3.75e-01  
 22  +4.9602e-01  +5.2700e-01  3.10e-02  1.69e-06  8.26e-04  1.08e-05  5.30e-06  3.74e-01  
 23  +4.9511e-01  +5.2344e-01  2.83e-02  1.45e-06  7.09e-04  9.16e-06  4.57e-06  2.07e-01  
 24  +4.9449e-01  +5.2093e-01  2.64e-02  1.30e-06  6.38e-04  6.12e-06  4.12e-06  3.14e-01  
 25  +4.9322e-01  +5.1609e-01  2.29e-02  1.05e-06  5.16e-04  4.37e-06  3.36e-06  3.14e-01  
 26  +4.9307e-01  +5.1536e-01  2.23e-02  1.01e-06  4.95e-04  3.07e-06  3.23e-06  2.77e-01  
 27  +4.9074e-01  +5.0680e-01  1.61e-02  6.68e-07  3.27e-04  1.95e-06  2.16e-06  4.01e-01  
 28  +4.8853e-01  +4.9842e-01  9.89e-03  3.72e-07  1.82e-04  1.01e-07  1.21e-06  9.46e-01  
 29  +4.8554e-01  +4.8781e-01  2.27e-03  8.10e-08  3.97e-05  2.71e-08  2.67e-07  9.72e-01  
 30  +4.8479e-01  +4.8528e-01  4.91e-04  1.68e-08  8.22e-06  6.34e-09  5.60e-08  8.15e-01  
 31  +4.8457e-01  +4.8460e-01  2.79e-05  9.40e-10  4.60e-07  3.34e-10  3.18e-09  9.61e-01  
 32  +4.8456e-01  +4.8456e-01  2.84e-07  9.55e-12  4.68e-09  3.38e-12  3.24e-11  9.90e-01  
 33  +4.8456e-01  +4.8456e-01  2.84e-09  9.55e-14  4.68e-11  3.38e-14  3.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 702.1319ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:05 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:05 PM: Optimal value: 4.846e-01
(CVXPY) Aug 31 04:57:05 PM: Compilation took 1.211e-01 seconds
(CVXPY) Aug 31 04:57:05 PM: Solver (including time spent in interface) took 7.325e-01 seconds
Iteration: 6, Objective: 0.4846
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:05 PM: Your problem has 25075 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:05 PM: Finished problem compilation (took 1.273e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25075
  constraints   = 50075
  nnz(P)        = 0
  nnz(A)        = 334549
  cones (total) = 1
    : Nonnegative = 1,  numel = 50075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.44e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2539e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5344e+02  6.53e+02  1.62e-01  7.76e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6864e+02  1.68e+02  1.43e-01  6.86e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3652e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.2166e+00  7.17e-01  2.15e-03  1.05e+00  2.46e-05  1.89e-01  2.50e-01  
  6  +5.0001e-01  +7.7526e-01  2.75e-01  8.22e-04  4.02e-01  7.70e-06  8.37e-02  6.91e-01  
  7  +5.0001e-01  +7.0199e-01  2.02e-01  6.03e-04  2.95e-01  4.85e-06  5.90e-02  5.05e-01  
  8  +5.0001e-01  +6.4268e-01  1.43e-01  4.26e-04  2.08e-01  3.40e-06  3.91e-02  4.26e-01  
  9  +5.0000e-01  +6.2298e-01  1.23e-01  3.67e-04  1.79e-01  2.92e-06  2.94e-02  3.41e-01  
 10  +5.0000e-01  +6.0695e-01  1.07e-01  3.19e-04  1.56e-01  2.10e-06  1.79e-02  6.70e-01  
 11  +5.0000e-01  +5.6448e-01  6.45e-02  1.89e-04  9.25e-02  3.49e-06  3.59e-03  8.90e-01  
 12  +4.9981e-01  +5.6373e-01  6.39e-02  3.07e-05  1.50e-02  1.06e-04  1.06e-04  9.90e-01  
 13  +4.9926e-01  +5.6041e-01  6.12e-02  8.53e-06  4.18e-03  3.61e-04  2.82e-05  7.53e-01  
 14  +4.9906e-01  +5.5552e-01  5.65e-02  6.20e-06  3.04e-03  3.35e-04  2.04e-05  4.64e-01  
 15  +4.9890e-01  +5.4979e-01  5.09e-02  4.87e-06  2.39e-03  1.92e-04  1.60e-05  5.87e-01  
 16  +4.9855e-01  +5.4732e-01  4.88e-02  4.10e-06  2.01e-03  1.82e-04  1.34e-05  2.64e-01  
 17  +4.9822e-01  +5.4443e-01  4.62e-02  3.57e-06  1.75e-03  1.29e-04  1.16e-05  3.88e-01  
 18  +4.9782e-01  +5.4153e-01  4.37e-02  3.13e-06  1.53e-03  7.54e-05  1.00e-05  4.66e-01  
 19  +4.9616e-01  +5.3327e-01  3.71e-02  2.02e-06  9.92e-04  4.49e-05  6.46e-06  6.61e-01  
 20  +4.9612e-01  +5.3314e-01  3.70e-02  2.02e-06  9.91e-04  4.46e-05  6.46e-06  1.37e-03  
 21  +4.9572e-01  +5.3168e-01  3.60e-02  1.97e-06  9.68e-04  3.59e-05  6.34e-06  1.45e-01  
 22  +4.9417e-01  +5.2548e-01  3.13e-02  1.58e-06  7.74e-04  1.99e-05  5.10e-06  4.53e-01  
 23  +4.9186e-01  +5.1636e-01  2.45e-02  1.12e-06  5.48e-04  1.43e-05  3.65e-06  3.47e-01  
 24  +4.9176e-01  +5.1581e-01  2.41e-02  1.09e-06  5.33e-04  1.19e-05  3.55e-06  1.55e-01  
 25  +4.9018e-01  +5.0949e-01  1.93e-02  8.19e-07  4.01e-04  5.21e-06  2.69e-06  5.42e-01  
 26  +4.9009e-01  +5.0900e-01  1.89e-02  7.92e-07  3.88e-04  3.70e-06  2.61e-06  2.75e-01  
 27  +4.8609e-01  +4.9376e-01  7.66e-03  2.92e-07  1.43e-04  5.85e-07  9.82e-07  8.23e-01  
 28  +4.8601e-01  +4.9346e-01  7.45e-03  2.82e-07  1.38e-04  5.51e-07  9.48e-07  7.47e-02  
 29  +4.8592e-01  +4.9312e-01  7.20e-03  2.71e-07  1.33e-04  3.84e-07  9.30e-07  3.14e-01  
 30  +4.8581e-01  +4.9261e-01  6.80e-03  2.52e-07  1.23e-04  2.16e-07  8.57e-07  5.76e-01  
 31  +4.8440e-01  +4.8755e-01  3.15e-03  1.14e-07  5.58e-05  8.24e-08  3.92e-07  6.85e-01  
 32  +4.8359e-01  +4.8480e-01  1.20e-03  4.28e-08  2.10e-05  2.80e-08  1.50e-07  6.92e-01  
 33  +4.8353e-01  +4.8458e-01  1.04e-03  3.70e-08  1.81e-05  1.92e-08  1.30e-07  5.38e-01  
 34  +4.8312e-01  +4.8318e-01  5.37e-05  1.90e-09  9.29e-07  9.09e-10  6.72e-09  9.55e-01  
 35  +4.8310e-01  +4.8310e-01  5.60e-07  1.98e-11  9.69e-09  9.24e-12  7.04e-11  9.90e-01  
 36  +4.8310e-01  +4.8310e-01  5.60e-09  1.98e-13  9.69e-11  9.24e-14  7.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 806.1268ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:06 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:06 PM: Optimal value: 4.831e-01
(CVXPY) Aug 31 04:57:06 PM: Compilation took 1.273e-01 seconds
(CVXPY) Aug 31 04:57:06 PM: Solver (including time spent in interface) took 8.366e-01 seconds
Iteration: 7, Objective: 0.4831
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:06 PM: Your problem has 25085 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:06 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:06 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:06 PM: Finished problem compilation (took 1.340e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25085
  constraints   = 50085
  nnz(P)        = 0
  nnz(A)        = 340399
  cones (total) = 1
    : Nonnegative = 1,  numel = 50085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.44e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2539e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5338e+02  6.53e+02  1.62e-01  7.76e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6862e+02  1.68e+02  1.43e-01  6.87e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3653e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.2213e+00  7.21e-01  2.16e-03  1.06e+00  2.46e-05  1.89e-01  2.48e-01  
  6  +5.0001e-01  +6.8343e-01  1.83e-01  5.48e-04  2.68e-01  4.48e-06  5.82e-02  8.16e-01  
  7  +5.0001e-01  +6.5097e-01  1.51e-01  4.51e-04  2.20e-01  3.02e-06  4.20e-02  5.54e-01  
  8  +5.0001e-01  +6.2675e-01  1.27e-01  3.78e-04  1.85e-01  2.26e-06  2.94e-02  5.05e-01  
  9  +5.0001e-01  +6.1899e-01  1.19e-01  3.55e-04  1.74e-01  1.64e-06  2.09e-02  5.84e-01  
 10  +5.0000e-01  +5.7220e-01  7.22e-02  2.14e-04  1.04e-01  2.23e-06  5.28e-03  8.24e-01  
 11  +4.9993e-01  +5.6728e-01  6.74e-02  5.94e-05  2.91e-02  4.26e-05  2.18e-04  9.90e-01  
 12  +4.9889e-01  +5.6303e-01  6.41e-02  4.71e-06  2.31e-03  5.60e-04  1.55e-05  9.29e-01  
 13  +4.9874e-01  +5.5780e-01  5.91e-02  4.42e-06  2.17e-03  3.84e-04  1.44e-05  2.61e-01  
 14  +4.9868e-01  +5.5615e-01  5.75e-02  4.30e-06  2.11e-03  3.35e-04  1.39e-05  1.22e-01  
 15  +4.9832e-01  +5.5184e-01  5.35e-02  3.66e-06  1.79e-03  2.62e-04  1.18e-05  3.36e-01  
 16  +4.9815e-01  +5.5051e-01  5.24e-02  3.63e-06  1.78e-03  2.36e-04  1.17e-05  5.84e-02  
 17  +4.9694e-01  +5.4341e-01  4.65e-02  2.72e-06  1.33e-03  2.05e-04  8.75e-06  3.64e-01  
 18  +4.9704e-01  +5.4359e-01  4.66e-02  2.71e-06  1.33e-03  1.91e-04  8.71e-06  6.79e-02  
 19  +4.9679e-01  +5.4211e-01  4.53e-02  2.55e-06  1.25e-03  1.53e-04  8.19e-06  2.14e-01  
 20  +4.9460e-01  +5.2988e-01  3.53e-02  1.89e-06  9.28e-04  2.50e-05  6.19e-06  7.11e-01  
 21  +4.9452e-01  +5.2952e-01  3.50e-02  1.87e-06  9.19e-04  2.34e-05  6.13e-06  5.16e-02  
 22  +4.9364e-01  +5.2571e-01  3.21e-02  1.65e-06  8.11e-04  1.42e-05  5.44e-06  3.59e-01  
 23  +4.9063e-01  +5.1360e-01  2.30e-02  1.05e-06  5.15e-04  4.70e-06  3.52e-06  6.46e-01  
 24  +4.8929e-01  +5.0837e-01  1.91e-02  8.28e-07  4.06e-04  3.10e-06  2.80e-06  3.55e-01  
 25  +4.8921e-01  +5.0806e-01  1.88e-02  8.16e-07  4.00e-04  2.60e-06  2.77e-06  1.44e-01  
 26  +4.8554e-01  +4.9385e-01  8.32e-03  3.27e-07  1.60e-04  4.87e-07  1.14e-06  8.07e-01  
 27  +4.8500e-01  +4.9194e-01  6.95e-03  2.66e-07  1.31e-04  3.83e-07  9.27e-07  2.53e-01  
 28  +4.8489e-01  +4.9159e-01  6.70e-03  2.60e-07  1.28e-04  3.36e-07  9.23e-07  7.51e-02  
 29  +4.8475e-01  +4.9101e-01  6.26e-03  2.36e-07  1.16e-04  1.47e-07  8.29e-07  7.47e-01  
 30  +4.8350e-01  +4.8653e-01  3.03e-03  1.11e-07  5.46e-05  6.18e-08  3.96e-07  6.69e-01  
 31  +4.8239e-01  +4.8260e-01  2.13e-04  7.75e-09  3.80e-06  2.88e-09  2.82e-08  9.79e-01  
 32  +4.8231e-01  +4.8233e-01  1.77e-05  6.44e-10  3.16e-07  2.34e-10  2.36e-09  9.18e-01  
 33  +4.8230e-01  +4.8230e-01  4.50e-07  1.64e-11  8.05e-09  5.70e-12  6.03e-11  9.86e-01  
 34  +4.8230e-01  +4.8230e-01  4.51e-09  1.64e-13  8.05e-11  5.70e-14  6.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 927.628ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:07 PM: Optimal value: 4.823e-01
(CVXPY) Aug 31 04:57:07 PM: Compilation took 1.340e-01 seconds
(CVXPY) Aug 31 04:57:07 PM: Solver (including time spent in interface) took 9.590e-01 seconds
Iteration: 8, Objective: 0.4823
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:07 PM: Your problem has 25090 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:07 PM: Finished problem compilation (took 1.913e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25090
  constraints   = 50090
  nnz(P)        = 0
  nnz(A)        = 344205
  cones (total) = 1
    : Nonnegative = 1,  numel = 50090

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.44e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2538e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5335e+02  6.53e+02  1.62e-01  7.76e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6861e+02  1.68e+02  1.43e-01  6.87e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3650e+01  1.31e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.2120e+00  7.12e-01  2.14e-03  1.04e+00  2.47e-05  1.89e-01  2.52e-01  
  6  +5.0001e-01  +7.3252e-01  2.33e-01  6.95e-04  3.40e-01  6.54e-06  7.28e-02  7.12e-01  
  7  +5.0001e-01  +6.7362e-01  1.74e-01  5.18e-04  2.54e-01  4.03e-06  4.99e-02  5.63e-01  
  8  +5.0000e-01  +6.2974e-01  1.30e-01  3.87e-04  1.90e-01  2.98e-06  3.30e-02  4.49e-01  
  9  +5.0000e-01  +6.1211e-01  1.12e-01  3.35e-04  1.64e-01  2.68e-06  2.29e-02  4.10e-01  
 10  +5.0000e-01  +5.9115e-01  9.12e-02  2.71e-04  1.33e-01  2.56e-06  9.60e-03  8.00e-01  
 11  +5.0000e-01  +5.7902e-01  7.90e-02  2.31e-04  1.13e-01  1.92e-06  3.85e-03  9.90e-01  
 12  +4.9991e-01  +5.6967e-01  6.98e-02  3.23e-05  1.59e-02  5.29e-05  1.10e-04  9.80e-01  
 13  +4.9922e-01  +5.6626e-01  6.70e-02  4.57e-06  2.25e-03  3.69e-04  1.49e-05  8.67e-01  
 14  +4.9865e-01  +5.5968e-01  6.10e-02  4.26e-06  2.09e-03  2.88e-04  1.38e-05  1.57e-01  
 15  +4.9866e-01  +5.5946e-01  6.08e-02  4.26e-06  2.09e-03  2.81e-04  1.38e-05  1.99e-02  
 16  +4.9878e-01  +5.5765e-01  5.89e-02  4.21e-06  2.07e-03  2.11e-04  1.36e-05  1.93e-01  
 17  +4.9834e-01  +5.5300e-01  5.47e-02  3.59e-06  1.76e-03  1.70e-04  1.15e-05  3.09e-01  
 18  +4.9816e-01  +5.5124e-01  5.31e-02  3.56e-06  1.75e-03  1.45e-04  1.14e-05  9.12e-02  
 19  +4.9693e-01  +5.4317e-01  4.62e-02  2.67e-06  1.31e-03  9.74e-05  8.54e-06  4.76e-01  
 20  +4.9696e-01  +5.4306e-01  4.61e-02  2.63e-06  1.29e-03  8.79e-05  8.40e-06  1.02e-01  
 21  +4.9632e-01  +5.3866e-01  4.23e-02  2.51e-06  1.23e-03  4.33e-05  8.09e-06  3.57e-01  
 22  +4.9544e-01  +5.3483e-01  3.94e-02  2.18e-06  1.07e-03  3.48e-05  7.05e-06  2.52e-01  
 23  +4.9509e-01  +5.3325e-01  3.82e-02  2.08e-06  1.02e-03  2.88e-05  6.74e-06  1.60e-01  
 24  +4.9387e-01  +5.2772e-01  3.39e-02  1.75e-06  8.57e-04  1.33e-05  5.71e-06  4.87e-01  
 25  +4.9319e-01  +5.2473e-01  3.15e-02  1.58e-06  7.75e-04  8.03e-06  5.19e-06  3.55e-01  
 26  +4.8921e-01  +5.0913e-01  1.99e-02  8.63e-07  4.23e-04  4.67e-06  2.90e-06  4.85e-01  
 27  +4.8906e-01  +5.0839e-01  1.93e-02  8.20e-07  4.03e-04  3.67e-06  2.76e-06  2.24e-01  
 28  +4.8895e-01  +5.0780e-01  1.88e-02  7.91e-07  3.88e-04  2.42e-06  2.68e-06  3.21e-01  
 29  +4.8632e-01  +4.9753e-01  1.12e-02  4.40e-07  2.16e-04  3.77e-07  1.52e-06  8.41e-01  
 30  +4.8496e-01  +4.9263e-01  7.67e-03  2.92e-07  1.43e-04  2.41e-07  1.02e-06  3.95e-01  
 31  +4.8299e-01  +4.8538e-01  2.39e-03  8.83e-08  4.33e-05  3.44e-08  3.16e-07  9.52e-01  
 32  +4.8278e-01  +4.8462e-01  1.84e-03  6.79e-08  3.33e-05  2.55e-08  2.45e-07  4.22e-01  
 33  +4.8245e-01  +4.8344e-01  9.97e-04  3.66e-08  1.80e-05  1.22e-08  1.33e-07  9.90e-01  
 34  +4.8208e-01  +4.8216e-01  8.67e-05  3.18e-09  1.56e-06  1.03e-09  1.17e-08  9.38e-01  
 35  +4.8204e-01  +4.8205e-01  9.42e-06  3.46e-10  1.70e-07  1.11e-10  1.28e-09  9.10e-01  
 36  +4.8204e-01  +4.8204e-01  1.07e-07  3.91e-12  1.92e-09  1.26e-12  1.45e-11  9.90e-01  
 37  +4.8204e-01  +4.8204e-01  1.07e-09  3.91e-14  1.92e-11  1.26e-14  1.45e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2192979s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:09 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:09 PM: Optimal value: 4.820e-01
(CVXPY) Aug 31 04:57:09 PM: Compilation took 1.913e-01 seconds
(CVXPY) Aug 31 04:57:09 PM: Solver (including time spent in interface) took 1.261e+00 seconds
Iteration: 9, Objective: 0.4820
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:09 PM: Your problem has 25100 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:09 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:09 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:09 PM: Finished problem compilation (took 2.115e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25100
  constraints   = 50100
  nnz(P)        = 0
  nnz(A)        = 350703
  cones (total) = 1
    : Nonnegative = 1,  numel = 50100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.45e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2539e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3824e-01  +6.5327e+02  6.53e+02  1.62e-01  7.76e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6858e+02  1.68e+02  1.43e-01  6.87e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3653e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.2273e+00  7.27e-01  2.18e-03  1.07e+00  2.47e-05  1.89e-01  2.47e-01  
  6  +5.0001e-01  +7.6287e-01  2.63e-01  7.86e-04  3.85e-01  7.68e-06  8.13e-02  6.37e-01  
  7  +5.0001e-01  +6.5908e-01  1.59e-01  4.75e-04  2.33e-01  3.58e-06  4.54e-02  7.25e-01  
  8  +5.0001e-01  +6.3380e-01  1.34e-01  3.99e-04  1.96e-01  2.84e-06  3.28e-02  4.33e-01  
  9  +5.0001e-01  +6.2519e-01  1.25e-01  3.74e-04  1.83e-01  2.01e-06  2.22e-02  6.49e-01  
 10  +5.0000e-01  +5.8175e-01  8.18e-02  2.42e-04  1.19e-01  2.49e-06  6.47e-03  8.09e-01  
 11  +4.9999e-01  +5.7156e-01  7.16e-02  1.81e-04  8.85e-02  7.36e-06  1.24e-03  9.90e-01  
 12  +4.9957e-01  +5.7015e-01  7.06e-02  1.16e-05  5.68e-03  2.31e-04  3.78e-05  9.70e-01  
 13  +4.9933e-01  +5.5813e-01  5.88e-02  5.59e-06  2.75e-03  2.38e-04  1.80e-05  8.15e-01  
 14  +4.9915e-01  +5.5505e-01  5.59e-02  4.61e-06  2.26e-03  1.80e-04  1.48e-05  4.63e-01  
 15  +4.9857e-01  +5.5135e-01  5.28e-02  3.54e-06  1.74e-03  1.63e-04  1.13e-05  4.23e-01  
 16  +4.9840e-01  +5.5038e-01  5.20e-02  3.44e-06  1.69e-03  1.42e-04  1.10e-05  1.36e-01  
 17  +4.9682e-01  +5.4140e-01  4.46e-02  2.78e-06  1.37e-03  1.52e-05  9.02e-06  8.25e-01  
 18  +4.9482e-01  +5.3310e-01  3.83e-02  2.13e-06  1.05e-03  9.03e-06  6.98e-06  4.67e-01  
 19  +4.9464e-01  +5.3237e-01  3.77e-02  2.08e-06  1.02e-03  8.22e-06  6.81e-06  8.85e-02  
 20  +4.9440e-01  +5.3149e-01  3.71e-02  2.03e-06  9.98e-04  6.94e-06  6.68e-06  1.32e-01  
 21  +4.9330e-01  +5.2712e-01  3.38e-02  1.76e-06  8.67e-04  6.02e-06  5.84e-06  1.69e-01  
 22  +4.9185e-01  +5.2144e-01  2.96e-02  1.46e-06  7.15e-04  6.31e-07  4.88e-06  7.89e-01  
 23  +4.9121e-01  +5.1897e-01  2.78e-02  1.33e-06  6.55e-04  5.65e-07  4.49e-06  1.37e-01  
 24  +4.8898e-01  +5.1037e-01  2.14e-02  9.45e-07  4.64e-04  3.09e-07  3.23e-06  5.84e-01  
 25  +4.8872e-01  +5.0937e-01  2.06e-02  8.99e-07  4.42e-04  2.88e-07  3.08e-06  1.41e-01  
 26  +4.8807e-01  +5.0676e-01  1.87e-02  7.85e-07  3.86e-04  2.19e-07  2.70e-06  5.47e-01  
 27  +4.8678e-01  +5.0184e-01  1.51e-02  6.00e-07  2.95e-04  1.55e-07  2.08e-06  9.49e-01  
 28  +4.8403e-01  +4.9159e-01  7.56e-03  2.91e-07  1.43e-04  7.72e-08  1.04e-06  6.18e-01  
 29  +4.8219e-01  +4.8480e-01  2.61e-03  9.83e-08  4.83e-05  2.68e-08  3.61e-07  7.20e-01  
 30  +4.8174e-01  +4.8314e-01  1.40e-03  5.23e-08  2.57e-05  1.49e-08  1.94e-07  6.09e-01  
 31  +4.8144e-01  +4.8203e-01  5.88e-04  2.20e-08  1.08e-05  6.84e-09  8.19e-08  9.90e-01  
 32  +4.8122e-01  +4.8126e-01  4.12e-05  1.54e-09  7.55e-07  4.74e-10  5.78e-09  9.54e-01  
 33  +4.8120e-01  +4.8120e-01  3.51e-06  1.31e-10  6.43e-08  4.03e-11  4.93e-10  9.55e-01  
 34  +4.8120e-01  +4.8120e-01  3.56e-08  1.33e-12  6.52e-10  4.08e-13  5.00e-12  9.90e-01  
 35  +4.8120e-01  +4.8120e-01  3.56e-10  1.32e-14  6.52e-12  4.21e-15  5.15e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1706773s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:10 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:10 PM: Optimal value: 4.812e-01
(CVXPY) Aug 31 04:57:10 PM: Compilation took 2.115e-01 seconds
(CVXPY) Aug 31 04:57:10 PM: Solver (including time spent in interface) took 1.227e+00 seconds
Iteration: 10, Objective: 0.4812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:57:10 PM: Your problem has 25110 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:57:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:57:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:57:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:57:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:57:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:57:10 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:57:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:57:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:57:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:57:11 PM: Finished problem compilation (took 2.365e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25110
  constraints   = 50110
  nnz(P)        = 0
  nnz(A)        = 356836
  cones (total) = 1
    : Nonnegative = 1,  numel = 50110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.45e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2539e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3824e-01  +6.5324e+02  6.53e+02  1.62e-01  7.77e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6857e+02  1.68e+02  1.43e-01  6.87e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3652e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.2446e+00  7.45e-01  2.23e-03  1.09e+00  2.46e-05  1.89e-01  2.41e-01  
  6  +5.0001e-01  +7.6218e-01  2.62e-01  7.84e-04  3.84e-01  7.48e-06  8.06e-02  6.35e-01  
  7  +5.0001e-01  +6.8615e-01  1.86e-01  5.56e-04  2.72e-01  4.71e-06  5.44e-02  5.09e-01  
  8  +5.0001e-01  +6.5251e-01  1.53e-01  4.55e-04  2.23e-01  3.39e-06  3.91e-02  4.85e-01  
  9  +5.0001e-01  +6.0985e-01  1.10e-01  3.28e-04  1.61e-01  1.61e-06  1.83e-02  9.26e-01  
 10  +5.0000e-01  +5.9105e-01  9.10e-02  2.70e-04  1.32e-01  2.42e-06  6.83e-03  6.99e-01  
 11  +4.9999e-01  +5.7193e-01  7.19e-02  1.59e-04  7.82e-02  1.04e-05  8.74e-04  9.90e-01  
 12  +4.9925e-01  +5.6959e-01  7.03e-02  6.61e-06  3.25e-03  4.03e-04  2.15e-05  9.76e-01  
 13  +4.9893e-01  +5.6514e-01  6.62e-02  5.11e-06  2.51e-03  4.06e-04  1.65e-05  3.41e-01  
 14  +4.9882e-01  +5.6172e-01  6.29e-02  4.70e-06  2.31e-03  3.25e-04  1.52e-05  2.41e-01  
 15  +4.9856e-01  +5.5750e-01  5.89e-02  4.20e-06  2.06e-03  2.37e-04  1.35e-05  3.22e-01  
 16  +4.9820e-01  +5.5212e-01  5.39e-02  3.87e-06  1.90e-03  1.07e-04  1.25e-05  4.76e-01  
 17  +4.9719e-01  +5.4671e-01  4.95e-02  3.13e-06  1.54e-03  8.52e-05  1.02e-05  3.56e-01  
 18  +4.9706e-01  +5.4596e-01  4.89e-02  3.10e-06  1.53e-03  7.57e-05  1.01e-05  8.57e-02  
 19  +4.9551e-01  +5.3873e-01  4.32e-02  2.47e-06  1.22e-03  5.38e-05  8.11e-06  3.68e-01  
 20  +4.9511e-01  +5.3673e-01  4.16e-02  2.38e-06  1.17e-03  3.55e-05  7.84e-06  2.70e-01  
 21  +4.9438e-01  +5.3337e-01  3.90e-02  2.17e-06  1.07e-03  2.16e-05  7.20e-06  3.40e-01  
 22  +4.9263e-01  +5.2615e-01  3.35e-02  1.74e-06  8.54e-04  1.48e-05  5.81e-06  3.38e-01  
 23  +4.9033e-01  +5.1652e-01  2.62e-02  1.23e-06  6.06e-04  1.60e-07  4.19e-06  8.75e-01  
 24  +4.8844e-01  +5.0918e-01  2.07e-02  9.19e-07  4.52e-04  1.35e-07  3.17e-06  3.52e-01  
 25  +4.8815e-01  +5.0807e-01  1.99e-02  8.69e-07  4.27e-04  1.35e-07  3.00e-06  1.22e-01  
 26  +4.8716e-01  +5.0423e-01  1.71e-02  7.05e-07  3.46e-04  1.52e-07  2.45e-06  7.11e-01  
 27  +4.8711e-01  +5.0401e-01  1.69e-02  6.93e-07  3.41e-04  1.54e-07  2.41e-06  1.19e-01  
 28  +4.8477e-01  +4.9521e-01  1.04e-02  4.08e-07  2.01e-04  1.03e-07  1.45e-06  7.22e-01  
 29  +4.8293e-01  +4.8833e-01  5.40e-03  2.07e-07  1.02e-04  5.33e-08  7.51e-07  5.47e-01  
 30  +4.8251e-01  +4.8676e-01  4.25e-03  1.62e-07  7.96e-05  4.26e-08  5.92e-07  2.84e-01  
 31  +4.8245e-01  +4.8648e-01  4.03e-03  1.53e-07  7.52e-05  4.22e-08  5.59e-07  3.01e-01  
 32  +4.8126e-01  +4.8213e-01  8.77e-04  3.30e-08  1.62e-05  9.30e-09  1.23e-07  8.42e-01  
 33  +4.8096e-01  +4.8108e-01  1.12e-04  4.21e-09  2.07e-06  1.27e-09  1.59e-08  9.90e-01  
 34  +4.8092e-01  +4.8092e-01  1.26e-06  4.72e-11  2.32e-08  1.42e-11  1.78e-10  9.89e-01  
 35  +4.8092e-01  +4.8092e-01  1.26e-08  4.72e-13  2.32e-10  1.42e-13  1.78e-12  9.90e-01  
 36  +4.8092e-01  +4.8092e-01  1.26e-10  4.71e-15  2.32e-12  1.44e-15  1.80e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3202105s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:57:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:57:12 PM: Optimal value: 4.809e-01
(CVXPY) Aug 31 04:57:12 PM: Compilation took 2.365e-01 seconds
(CVXPY) Aug 31 04:57:12 PM: Solver (including time spent in interface) took 1.371e+00 seconds
FULL MODEL:
  Accruacy: 0.51216
  Our objective: 0.024319999999999953

IF 
    (x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.011239999999999972)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x2 = 0)            <-- (term's our objective: 0.003800000000000043)
 OR (x2 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.00204000000000004)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.0017600000000000037)
 OR (x3 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0012799999999999678)
 OR (x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.0007200000000000522)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x4 = 0) <-- (term's our objective: 0.0008799999999999667)
 OR (x2 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.0010799999999999543)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x6 = 0) <-- (term's our objective: 0.0015199999999999545)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 26.70119595527649
Best over terms:
  Our final objective: 0.011239999999999972
    Its accruacy: 0.50562
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.011239999999999972
  Highest accruacy: 0.50562
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

