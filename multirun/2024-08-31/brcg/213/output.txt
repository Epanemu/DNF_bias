Command:
python test_script.py -s smallest_subclass -d 6 -n 100 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.04
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 6.

Computed total variation: 0.6400000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:07 PM: Your problem has 63 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:07 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 63
  constraints   = 113
  nnz(P)        = 0
  nnz(A)        = 463
  cones (total) = 1
    : Nonnegative = 1,  numel = 113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9646e-01  +5.1397e+01  5.09e+01  8.65e-01  9.02e+00  1.00e+00  1.05e+00   ------   
  1  +5.8506e-01  +1.0727e+01  1.01e+01  3.36e-01  5.13e+00  3.88e-03  5.48e-01  6.31e-01  
  2  +5.1537e-01  +1.5694e+00  1.05e+00  6.96e-02  1.30e+00  1.38e-02  1.77e-01  9.90e-01  
  3  +4.8879e-01  +1.3707e+00  8.82e-01  3.49e-02  6.75e-01  1.64e-02  9.42e-02  5.48e-01  
  4  +4.4393e-01  +8.7287e-01  4.29e-01  1.22e-02  2.37e-01  9.14e-03  3.74e-02  6.26e-01  
  5  +4.0930e-01  +5.1171e-01  1.02e-01  3.06e-03  5.75e-02  1.49e-03  1.14e-02  7.69e-01  
  6  +3.9323e-01  +4.4801e-01  5.48e-02  1.25e-03  2.35e-02  6.81e-04  5.54e-03  6.56e-01  
  7  +3.8371e-01  +3.9570e-01  1.20e-02  2.66e-04  5.01e-03  4.99e-05  1.31e-03  9.90e-01  
  8  +3.8015e-01  +3.8033e-01  1.81e-04  3.91e-06  7.37e-05  6.67e-07  2.00e-05  9.85e-01  
  9  +3.8010e-01  +3.8010e-01  1.81e-06  3.91e-08  7.37e-07  6.67e-09  2.00e-07  9.90e-01  
 10  +3.8010e-01  +3.8010e-01  1.81e-08  3.91e-10  7.37e-09  6.67e-11  2.00e-09  9.90e-01  
 11  +3.8010e-01  +3.8010e-01  1.81e-10  3.91e-12  7.37e-11  6.67e-13  2.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 371.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:07 PM: Optimal value: 3.801e-01
(CVXPY) Aug 31 04:50:07 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 31 04:50:07 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:07 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:07 PM: Finished problem compilation (took 3.354e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 580
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9215e-01  +5.1552e+01  5.11e+01  8.72e-01  9.30e+00  1.00e+00  1.06e+00   ------   
  1  +5.6022e-01  +1.0900e+01  1.03e+01  3.52e-01  5.24e+00  3.88e-03  5.64e-01  6.21e-01  
  2  +4.9543e-01  +1.9372e+00  1.44e+00  8.51e-02  1.62e+00  1.58e-02  2.08e-01  9.22e-01  
  3  +4.2995e-01  +1.1913e+00  7.61e-01  2.59e-02  5.13e-01  1.37e-02  7.12e-02  7.21e-01  
  4  +3.6975e-01  +7.2477e-01  3.55e-01  9.27e-03  1.81e-01  6.01e-03  3.02e-02  6.54e-01  
  5  +3.2585e-01  +4.0352e-01  7.77e-02  2.00e-03  3.85e-02  5.82e-04  7.99e-03  8.23e-01  
  6  +3.1232e-01  +3.2176e-01  9.43e-03  2.42e-04  4.62e-03  5.50e-05  1.05e-03  9.19e-01  
  7  +3.1037e-01  +3.1066e-01  2.82e-04  7.30e-06  1.39e-04  9.90e-07  3.27e-05  9.69e-01  
  8  +3.1031e-01  +3.1032e-01  1.94e-05  5.10e-07  9.58e-06  4.01e-08  2.84e-06  9.33e-01  
  9  +3.1030e-01  +3.1030e-01  2.11e-07  5.53e-09  1.04e-07  4.50e-10  3.21e-08  9.89e-01  
 10  +3.1030e-01  +3.1030e-01  2.11e-09  5.53e-11  1.04e-09  4.50e-12  3.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 390.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:07 PM: Optimal value: 3.103e-01
(CVXPY) Aug 31 04:50:07 PM: Compilation took 3.354e-03 seconds
(CVXPY) Aug 31 04:50:07 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3103
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:07 PM: Your problem has 83 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:07 PM: Finished problem compilation (took 2.244e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 83
  constraints   = 133
  nnz(P)        = 0
  nnz(A)        = 667
  cones (total) = 1
    : Nonnegative = 1,  numel = 133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8801e-01  +5.1804e+01  5.13e+01  8.78e-01  9.32e+00  1.00e+00  1.08e+00   ------   
  1  +5.3171e-01  +1.1131e+01  1.06e+01  3.67e-01  5.27e+00  3.88e-03  5.84e-01  6.09e-01  
  2  +4.6138e-01  +1.8567e+00  1.40e+00  7.49e-02  1.43e+00  1.89e-02  1.88e-01  9.88e-01  
  3  +3.5034e-01  +1.0784e+00  7.28e-01  2.02e-02  3.94e-01  1.62e-02  5.69e-02  7.74e-01  
  4  +2.8886e-01  +5.8731e-01  2.98e-01  7.73e-03  1.49e-01  5.25e-03  2.45e-02  6.26e-01  
  5  +2.5715e-01  +4.1067e-01  1.54e-01  3.77e-03  7.29e-02  2.35e-03  1.33e-02  5.44e-01  
  6  +2.3018e-01  +2.6587e-01  3.57e-02  8.54e-04  1.64e-02  3.76e-04  3.47e-03  8.18e-01  
  7  +2.2142e-01  +2.2390e-01  2.48e-03  5.86e-05  1.12e-03  2.22e-05  2.57e-04  9.29e-01  
  8  +2.2077e-01  +2.2097e-01  2.05e-04  4.91e-06  9.35e-05  1.38e-06  2.24e-05  9.14e-01  
  9  +2.2070e-01  +2.2071e-01  7.85e-06  1.92e-07  3.62e-06  3.62e-08  9.12e-07  9.80e-01  
 10  +2.2070e-01  +2.2070e-01  7.87e-08  1.92e-09  3.63e-08  3.62e-10  9.17e-09  9.90e-01  
 11  +2.2070e-01  +2.2070e-01  7.87e-10  1.92e-11  3.64e-10  3.62e-12  9.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 561.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:07 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:07 PM: Optimal value: 2.207e-01
(CVXPY) Aug 31 04:50:07 PM: Compilation took 2.244e-03 seconds
(CVXPY) Aug 31 04:50:07 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Iteration: 3, Objective: 0.2207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:07 PM: Your problem has 93 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:08 PM: Finished problem compilation (took 1.011e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 93
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 707
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8795e-01  +5.1811e+01  5.13e+01  8.82e-01  9.08e+00  1.00e+00  1.07e+00   ------   
  1  +5.3106e-01  +1.1211e+01  1.07e+01  3.76e-01  5.11e+00  3.87e-03  5.88e-01  6.04e-01  
  2  +4.6329e-01  +2.0304e+00  1.57e+00  8.58e-02  1.58e+00  1.90e-02  2.13e-01  9.46e-01  
  3  +3.5735e-01  +1.2715e+00  9.14e-01  2.67e-02  5.10e-01  1.73e-02  7.41e-02  7.49e-01  
  4  +2.8013e-01  +5.2732e-01  2.47e-01  6.44e-03  1.21e-01  3.41e-03  2.04e-02  7.61e-01  
  5  +2.4649e-01  +3.5418e-01  1.08e-01  2.72e-03  5.15e-02  1.23e-03  9.60e-03  6.54e-01  
  6  +2.2409e-01  +2.3672e-01  1.26e-02  3.17e-04  5.95e-03  1.13e-04  1.24e-03  8.82e-01  
  7  +2.2120e-01  +2.2289e-01  1.68e-03  4.27e-05  7.94e-04  1.31e-05  1.74e-04  8.68e-01  
  8  +2.2076e-01  +2.2091e-01  1.49e-04  3.83e-06  7.00e-05  3.96e-07  1.73e-05  9.67e-01  
  9  +2.2071e-01  +2.2072e-01  1.43e-05  3.67e-07  6.70e-06  5.15e-08  1.76e-06  9.77e-01  
 10  +2.2070e-01  +2.2070e-01  1.44e-07  3.69e-09  6.74e-08  5.16e-10  1.77e-08  9.90e-01  
 11  +2.2070e-01  +2.2070e-01  1.44e-09  3.69e-11  6.74e-10  5.16e-12  1.77e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 532.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:08 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:08 PM: Optimal value: 2.207e-01
(CVXPY) Aug 31 04:50:08 PM: Compilation took 1.011e-02 seconds
(CVXPY) Aug 31 04:50:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:08 PM: Your problem has 100 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:08 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 100
  constraints   = 150
  nnz(P)        = 0
  nnz(A)        = 740
  cones (total) = 1
    : Nonnegative = 1,  numel = 150

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8730e-01  +5.1857e+01  5.14e+01  8.85e-01  8.95e+00  1.00e+00  1.07e+00   ------   
  1  +5.2257e-01  +1.1279e+01  1.08e+01  3.80e-01  5.01e+00  3.89e-03  5.89e-01  6.01e-01  
  2  +4.5398e-01  +2.0946e+00  1.64e+00  8.73e-02  1.57e+00  1.95e-02  2.16e-01  9.37e-01  
  3  +3.4824e-01  +1.2929e+00  9.45e-01  2.81e-02  5.25e-01  1.70e-02  7.83e-02  7.23e-01  
  4  +2.7449e-01  +5.7964e-01  3.05e-01  8.07e-03  1.49e-01  4.18e-03  2.55e-02  7.36e-01  
  5  +2.3264e-01  +3.2511e-01  9.25e-02  2.36e-03  4.32e-02  1.16e-03  8.40e-03  7.09e-01  
  6  +2.1490e-01  +2.3151e-01  1.66e-02  4.21e-04  7.65e-03  1.76e-04  1.61e-03  8.35e-01  
  7  +2.1121e-01  +2.1263e-01  1.42e-03  3.64e-05  6.59e-04  1.29e-05  1.44e-04  9.12e-01  
  8  +2.1103e-01  +2.1190e-01  8.61e-04  2.22e-05  4.02e-04  6.81e-06  9.11e-05  5.17e-01  
  9  +2.1080e-01  +2.1088e-01  8.83e-05  2.30e-06  4.14e-05  5.57e-07  9.99e-06  9.06e-01  
 10  +2.1077e-01  +2.1077e-01  1.90e-06  4.96e-08  8.89e-07  1.12e-08  2.18e-07  9.80e-01  
 11  +2.1077e-01  +2.1077e-01  1.90e-08  4.96e-10  8.90e-09  1.12e-10  2.19e-09  9.90e-01  
 12  +2.1077e-01  +2.1077e-01  1.90e-10  4.97e-12  8.90e-11  1.12e-12  2.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 630.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:08 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:08 PM: Optimal value: 2.108e-01
(CVXPY) Aug 31 04:50:08 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 31 04:50:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.2108
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:08 PM: Your problem has 102 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:08 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:08 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:08 PM: Finished problem compilation (took 1.001e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 102
  constraints   = 152
  nnz(P)        = 0
  nnz(A)        = 760
  cones (total) = 1
    : Nonnegative = 1,  numel = 152

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8667e-01  +5.1895e+01  5.14e+01  8.85e-01  8.96e+00  1.00e+00  1.07e+00   ------   
  1  +5.1973e-01  +1.1314e+01  1.08e+01  3.83e-01  5.02e+00  3.89e-03  5.90e-01  5.99e-01  
  2  +4.5019e-01  +2.0574e+00  1.61e+00  8.57e-02  1.55e+00  1.97e-02  2.15e-01  9.47e-01  
  3  +3.4049e-01  +1.3188e+00  9.78e-01  2.85e-02  5.32e-01  1.80e-02  8.00e-02  7.26e-01  
  4  +2.6789e-01  +5.3031e-01  2.62e-01  7.04e-03  1.29e-01  3.38e-03  2.26e-02  7.69e-01  
  5  +2.2605e-01  +2.8913e-01  6.31e-02  1.63e-03  2.98e-02  7.32e-04  5.92e-03  7.84e-01  
  6  +2.1186e-01  +2.1538e-01  3.53e-03  9.22e-05  1.67e-03  1.98e-05  3.58e-04  9.68e-01  
  7  +2.1100e-01  +2.1168e-01  6.79e-04  1.81e-05  3.26e-04  3.26e-06  7.37e-05  8.20e-01  
  8  +2.1080e-01  +2.1093e-01  1.33e-04  3.53e-06  6.37e-05  5.89e-07  1.52e-05  8.55e-01  
  9  +2.1075e-01  +2.1077e-01  1.24e-05  3.28e-07  5.92e-06  5.05e-08  1.45e-06  9.41e-01  
 10  +2.1075e-01  +2.1075e-01  1.26e-07  3.35e-09  6.04e-08  5.12e-10  1.49e-08  9.90e-01  
 11  +2.1075e-01  +2.1075e-01  1.26e-09  3.35e-11  6.04e-10  5.12e-12  1.49e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 548.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:08 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:08 PM: Optimal value: 2.108e-01
(CVXPY) Aug 31 04:50:08 PM: Compilation took 1.001e-02 seconds
(CVXPY) Aug 31 04:50:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.78
  Our objective: 0.5599999999999999

IF 
    (x0 = 0 AND x3 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.19999999999999996)
 OR (x2 = 1 AND x5 = 1 AND x0 = 0)                                  <-- (term's our objective: 0.10000000000000005)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1)                       <-- (term's our objective: 0.07999999999999997)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0)                       <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x5 = 1 AND x1 = 0 AND x3 = 0)                       <-- (term's our objective: 0.06000000000000005)
 OR (x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.059999999999999956)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0 AND x4 = 0)            <-- (term's our objective: 0.040000000000000036)
 OR (x0 = 1 AND x1 = 1 AND x5 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.020000000000000018)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.0003437995910645
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

