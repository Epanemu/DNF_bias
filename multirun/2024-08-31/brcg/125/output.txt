Command:
python test_script.py -s smallest_subclass -d 4 -n 50 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.07999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.43999999999999995
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:13 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:13 PM: Finished problem compilation (took 3.642e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8949e-01  +2.6330e+01  2.58e+01  8.14e-01  5.43e+00  1.00e+00  1.09e+00   ------   
  1  +5.8707e-01  +5.2600e+00  4.67e+00  2.77e-01  2.75e+00  4.03e-03  5.10e-01  6.79e-01  
  2  +4.9331e-01  +1.2037e+00  7.10e-01  6.16e-02  7.07e-01  1.06e-02  1.64e-01  8.55e-01  
  3  +4.1537e-01  +7.8322e-01  3.68e-01  1.90e-02  2.25e-01  7.52e-03  5.91e-02  7.05e-01  
  4  +3.7090e-01  +4.6348e-01  9.26e-02  4.65e-03  5.34e-02  1.87e-03  1.85e-02  7.47e-01  
  5  +3.4344e-01  +3.5522e-01  1.18e-02  5.08e-04  5.83e-03  1.07e-04  2.61e-03  9.26e-01  
  6  +3.4014e-01  +3.4026e-01  1.25e-04  5.34e-06  6.12e-05  1.10e-06  2.82e-05  9.90e-01  
  7  +3.4010e-01  +3.4010e-01  1.25e-06  5.33e-08  6.12e-07  1.10e-08  2.82e-07  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  1.25e-08  5.33e-10  6.12e-09  1.10e-10  2.82e-09  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  1.25e-10  5.33e-12  6.12e-11  1.10e-12  2.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 185.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:13 PM: Optimal value: 3.401e-01
(CVXPY) Aug 31 04:46:13 PM: Compilation took 3.642e-03 seconds
(CVXPY) Aug 31 04:46:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:13 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:13 PM: Finished problem compilation (took 1.909e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 240
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8255e-01  +2.6672e+01  2.62e+01  8.31e-01  5.49e+00  1.00e+00  1.13e+00   ------   
  1  +5.5137e-01  +5.4537e+00  4.90e+00  3.07e-01  2.81e+00  3.95e-03  5.56e-01  6.57e-01  
  2  +4.4337e-01  +1.2450e+00  8.02e-01  6.16e-02  6.89e-01  1.31e-02  1.78e-01  8.70e-01  
  3  +3.5487e-01  +6.1771e-01  2.63e-01  1.52e-02  1.70e-01  4.06e-03  5.63e-02  7.56e-01  
  4  +3.1556e-01  +3.9671e-01  8.11e-02  4.55e-03  4.99e-02  1.00e-03  2.30e-02  7.24e-01  
  5  +3.0089e-01  +3.0393e-01  3.04e-03  1.68e-04  1.84e-03  2.54e-05  1.00e-03  9.64e-01  
  6  +3.0025e-01  +3.0042e-01  1.77e-04  9.76e-06  1.07e-04  1.23e-06  6.07e-05  9.40e-01  
  7  +3.0020e-01  +3.0020e-01  2.32e-06  1.27e-07  1.39e-06  1.25e-08  8.20e-07  9.88e-01  
  8  +3.0020e-01  +3.0020e-01  2.32e-08  1.27e-09  1.39e-08  1.25e-10  8.21e-09  9.90e-01  
  9  +3.0020e-01  +3.0020e-01  2.32e-10  1.27e-11  1.39e-10  1.25e-12  8.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 207µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:13 PM: Optimal value: 3.002e-01
(CVXPY) Aug 31 04:46:13 PM: Compilation took 1.909e-03 seconds
(CVXPY) Aug 31 04:46:13 PM: Solver (including time spent in interface) took 9.751e-04 seconds
Iteration: 2, Objective: 0.3002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:13 PM: Your problem has 53 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:13 PM: Finished problem compilation (took 1.902e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 53
  constraints   = 78
  nnz(P)        = 0
  nnz(A)        = 297
  cones (total) = 1
    : Nonnegative = 1,  numel = 78

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8091e-01  +2.6768e+01  2.63e+01  8.40e-01  5.61e+00  1.00e+00  1.13e+00   ------   
  1  +5.3439e-01  +5.5256e+00  4.99e+00  3.28e-01  2.92e+00  3.86e-03  5.75e-01  6.46e-01  
  2  +4.2028e-01  +1.1850e+00  7.65e-01  5.54e-02  6.35e-01  1.52e-02  1.62e-01  9.24e-01  
  3  +3.4065e-01  +6.0469e-01  2.64e-01  1.48e-02  1.69e-01  4.25e-03  5.39e-02  7.52e-01  
  4  +3.0489e-01  +4.1155e-01  1.07e-01  5.84e-03  6.59e-02  1.48e-03  2.45e-02  6.27e-01  
  5  +2.8206e-01  +2.8848e-01  6.42e-03  3.55e-04  3.97e-03  5.07e-05  1.72e-03  9.43e-01  
  6  +2.8064e-01  +2.8168e-01  1.04e-03  5.78e-05  6.45e-04  7.45e-06  2.92e-04  8.36e-01  
  7  +2.8037e-01  +2.8058e-01  2.13e-04  1.12e-05  1.25e-04  1.33e-06  6.60e-05  9.09e-01  
  8  +2.8030e-01  +2.8031e-01  4.17e-06  2.16e-07  2.43e-06  1.98e-08  1.35e-06  9.81e-01  
  9  +2.8030e-01  +2.8030e-01  4.17e-08  2.16e-09  2.43e-08  1.98e-10  1.35e-08  9.90e-01  
 10  +2.8030e-01  +2.8030e-01  4.17e-10  2.16e-11  2.43e-10  1.98e-12  1.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 235.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:13 PM: Optimal value: 2.803e-01
(CVXPY) Aug 31 04:46:13 PM: Compilation took 1.902e-03 seconds
(CVXPY) Aug 31 04:46:13 PM: Solver (including time spent in interface) took 9.964e-04 seconds
Iteration: 3, Objective: 0.2803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:13 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:13 PM: Finished problem compilation (took 2.650e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8109e-01  +2.6771e+01  2.63e+01  8.41e-01  5.67e+00  1.00e+00  1.13e+00   ------   
  1  +5.3283e-01  +5.5577e+00  5.02e+00  3.35e-01  2.98e+00  3.83e-03  5.85e-01  6.40e-01  
  2  +4.1636e-01  +1.1579e+00  7.42e-01  5.38e-02  6.21e-01  1.63e-02  1.61e-01  9.47e-01  
  3  +3.4268e-01  +6.3838e-01  2.96e-01  1.69e-02  1.95e-01  5.34e-03  6.18e-02  6.96e-01  
  4  +2.9730e-01  +3.6809e-01  7.08e-02  3.91e-03  4.44e-02  9.83e-04  1.72e-02  7.78e-01  
  5  +2.8105e-01  +2.8355e-01  2.50e-03  1.41e-04  1.58e-03  2.23e-05  6.93e-04  9.66e-01  
  6  +2.8048e-01  +2.8099e-01  5.18e-04  2.90e-05  3.26e-04  3.73e-06  1.55e-04  8.41e-01  
  7  +2.8032e-01  +2.8038e-01  5.75e-05  3.03e-06  3.42e-05  3.52e-07  1.86e-05  9.26e-01  
  8  +2.8030e-01  +2.8030e-01  6.44e-07  3.36e-08  3.81e-07  3.74e-09  2.12e-07  9.89e-01  
  9  +2.8030e-01  +2.8030e-01  6.44e-09  3.36e-10  3.81e-09  3.74e-11  2.12e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 236.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:13 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:13 PM: Optimal value: 2.803e-01
(CVXPY) Aug 31 04:46:13 PM: Compilation took 2.650e-03 seconds
(CVXPY) Aug 31 04:46:13 PM: Solver (including time spent in interface) took 1.869e-04 seconds
FULL MODEL:
  Accruacy: 0.7
  Our objective: 0.4

IF 
    (x0 = 0 AND x2 = 0)            <-- (term's our objective: 0.15999999999999998)
 OR (x0 = 1 AND x3 = 1 AND x1 = 0) <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0) <-- (term's our objective: 0.15999999999999995)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.7858283519744873
Best over terms:
  Our final objective: 0.15999999999999998
    Its accruacy: 0.58
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.15999999999999998
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

