Command:
python test_script.py -s smallest_subclass -d 2 -n 10000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29800000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 2.

Computed total variation: 0.29800000000000004
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:51 PM: Your problem has 5005 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:51 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:51 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:51 PM: Finished problem compilation (took 1.051e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5005
  constraints   = 10005
  nnz(P)        = 0
  nnz(A)        = 25005
  cones (total) = 1
    : Nonnegative = 1,  numel = 10005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +5.0009e+03  5.00e+03  9.83e-01  7.06e+01  1.00e+00  1.00e+00   ------   
  1  +6.3752e-01  +8.7398e+02  8.73e+02  2.67e-01  3.33e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5908e-01  +1.6319e+02  1.63e+02  1.33e-01  1.91e+01  5.29e-03  2.15e-01  5.88e-01  
  3  +5.0522e-01  +1.5655e+01  1.51e+01  7.68e-02  1.05e+01  4.97e-06  2.13e-01  6.82e-02  
  4  +5.0005e-01  +1.4398e+00  9.40e-01  6.26e-03  8.80e-01  2.72e-06  1.74e-01  4.69e-01  
  5  +4.9987e-01  +7.7599e-01  2.76e-01  1.82e-03  2.59e-01  2.04e-06  3.18e-02  8.72e-01  
  6  +4.8546e-01  +1.0689e+00  5.83e-01  3.65e-04  5.27e-02  1.24e-04  1.05e-03  9.87e-01  
  7  +4.4961e-01  +6.9093e-01  2.41e-01  5.81e-05  8.35e-03  1.90e-04  1.73e-04  8.41e-01  
  8  +4.1237e-01  +4.4517e-01  3.28e-02  8.13e-06  1.16e-03  2.32e-06  3.10e-05  9.60e-01  
  9  +4.0351e-01  +4.0453e-01  1.02e-03  2.26e-07  3.21e-05  4.59e-08  1.02e-06  9.90e-01  
 10  +4.0320e-01  +4.0321e-01  1.02e-05  2.26e-09  3.21e-07  4.60e-10  1.02e-08  9.90e-01  
 11  +4.0320e-01  +4.0320e-01  1.02e-07  2.26e-11  3.21e-09  4.60e-12  1.02e-10  9.90e-01  
 12  +4.0320e-01  +4.0320e-01  1.02e-09  2.26e-13  3.21e-11  4.67e-14  1.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.2181ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:51 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:51 PM: Optimal value: 4.032e-01
(CVXPY) Aug 31 04:44:51 PM: Compilation took 1.051e-02 seconds
(CVXPY) Aug 31 04:44:51 PM: Solver (including time spent in interface) took 2.303e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4032
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:52 PM: Your problem has 5006 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:52 PM: Finished problem compilation (took 8.689e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5006
  constraints   = 10006
  nnz(P)        = 0
  nnz(A)        = 27031
  cones (total) = 1
    : Nonnegative = 1,  numel = 10006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9999e-01  +5.0019e+03  5.00e+03  9.83e-01  7.34e+01  1.00e+00  1.00e+00   ------   
  1  +6.3733e-01  +8.7434e+02  8.74e+02  2.67e-01  3.47e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5894e-01  +1.6290e+02  1.62e+02  1.32e-01  1.98e+01  5.30e-03  2.15e-01  5.90e-01  
  3  +5.0487e-01  +1.4814e+01  1.43e+01  7.41e-02  1.05e+01  4.72e-06  2.13e-01  7.49e-02  
  4  +5.0064e-01  +3.1450e+00  2.64e+00  1.74e-02  2.51e+00  3.11e-06  1.94e-01  2.00e-01  
  5  +5.0000e-01  +7.9961e-01  3.00e-01  1.99e-03  2.93e-01  9.30e-07  4.34e-02  8.62e-01  
  6  +4.9899e-01  +1.0387e+00  5.40e-01  2.07e-03  3.10e-01  9.77e-06  7.11e-03  9.28e-01  
  7  +4.8822e-01  +9.4705e-01  4.59e-01  2.42e-04  3.67e-02  8.71e-05  6.37e-04  9.10e-01  
  8  +4.8474e-01  +9.3332e-01  4.49e-01  1.90e-04  2.88e-02  9.90e-05  4.92e-04  2.84e-01  
  9  +4.7883e-01  +9.0963e-01  4.31e-01  1.35e-04  2.04e-02  9.94e-05  3.44e-04  4.94e-01  
 10  +4.7567e-01  +8.7925e-01  4.04e-01  1.30e-04  1.97e-02  8.30e-05  3.44e-04  4.67e-02  
 11  +4.4722e-01  +7.3824e-01  2.91e-01  6.11e-05  9.20e-03  5.00e-05  1.65e-04  8.16e-01  
 12  +3.9725e-01  +5.2344e-01  1.26e-01  2.35e-05  3.49e-03  1.11e-05  7.18e-05  6.83e-01  
 13  +3.5649e-01  +3.6900e-01  1.25e-02  2.28e-06  3.38e-04  9.63e-08  8.20e-06  9.29e-01  
 14  +3.5116e-01  +3.5131e-01  1.45e-04  2.64e-08  3.90e-06  1.10e-09  9.76e-08  9.88e-01  
 15  +3.5110e-01  +3.5110e-01  1.45e-06  2.64e-10  3.90e-08  1.10e-11  9.76e-10  9.90e-01  
 16  +3.5110e-01  +3.5110e-01  1.45e-08  2.64e-12  3.90e-10  1.10e-13  9.78e-12  9.90e-01  
 17  +3.5110e-01  +3.5110e-01  1.45e-10  2.64e-14  3.90e-12  1.11e-15  9.80e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 32.4642ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:52 PM: Optimal value: 3.511e-01
(CVXPY) Aug 31 04:44:52 PM: Compilation took 8.689e-03 seconds
(CVXPY) Aug 31 04:44:52 PM: Solver (including time spent in interface) took 3.579e-02 seconds
FULL MODEL:
  Accruacy: 0.649
  Our objective: 0.29800000000000004

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.29800000000000004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8195500373840332
Best over terms:
  Our final objective: 0.29800000000000004
    Its accruacy: 0.649
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29800000000000004
  Highest accruacy: 0.649
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

