Command:
python test_script.py -s smallest_subclass -d 3 -n 50000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14412
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 3.

Computed total variation: 0.14411999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:56 PM: Your problem has 25007 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:56 PM: Finished problem compilation (took 5.237e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25007
  constraints   = 50007
  nnz(P)        = 0
  nnz(A)        = 150007
  cones (total) = 1
    : Nonnegative = 1,  numel = 50007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.76e+02  1.00e+00  1.00e+00   ------   
  1  +6.2016e-01  +4.6339e+03  4.63e+03  3.09e-01  9.19e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5598e-01  +7.9406e+02  7.94e+02  1.40e-01  4.97e+01  6.67e-03  2.21e-01  6.61e-01  
  3  +5.1053e-01  +1.4930e+02  1.49e+02  1.26e-01  4.45e+01  1.26e-05  2.20e-01  4.40e-02  
  4  +5.0007e-01  +1.7421e+00  1.24e+00  3.71e-03  1.30e+00  9.93e-07  1.63e-01  9.90e-01  
  5  +5.0001e-01  +7.3952e-01  2.40e-01  7.14e-04  2.52e-01  4.31e-07  5.88e-02  7.28e-01  
  6  +4.9998e-01  +6.7698e-01  1.77e-01  5.22e-04  1.84e-01  1.14e-06  1.08e-02  8.80e-01  
  7  +4.9750e-01  +7.0287e-01  2.05e-01  5.10e-05  1.81e-02  8.49e-05  1.54e-04  9.87e-01  
  8  +4.8464e-01  +6.1685e-01  1.32e-01  6.71e-06  2.38e-03  3.62e-04  2.01e-05  8.71e-01  
  9  +4.6693e-01  +5.1020e-01  4.33e-02  2.28e-06  8.06e-04  3.11e-06  7.68e-06  7.95e-01  
 10  +4.5679e-01  +4.5999e-01  3.20e-03  1.54e-07  5.46e-05  1.10e-07  5.57e-07  9.34e-01  
 11  +4.5593e-01  +4.5639e-01  4.53e-04  2.02e-08  7.13e-06  1.40e-08  7.90e-08  8.77e-01  
 12  +4.5576e-01  +4.5577e-01  6.53e-06  2.72e-10  9.62e-08  1.70e-10  1.14e-09  9.89e-01  
 13  +4.5576e-01  +4.5576e-01  6.53e-08  2.71e-12  9.61e-10  1.70e-12  1.14e-11  9.90e-01  
 14  +4.5576e-01  +4.5576e-01  6.53e-10  2.71e-14  9.61e-12  1.71e-14  1.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 173.4338ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:56 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:56 PM: Optimal value: 4.558e-01
(CVXPY) Aug 31 04:45:56 PM: Compilation took 5.237e-02 seconds
(CVXPY) Aug 31 04:45:56 PM: Solver (including time spent in interface) took 1.920e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4558
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:56 PM: Your problem has 25010 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:56 PM: Finished problem compilation (took 5.575e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25010
  constraints   = 50010
  nnz(P)        = 0
  nnz(A)        = 170174
  cones (total) = 1
    : Nonnegative = 1,  numel = 50010

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.84e+02  1.00e+00  1.00e+00   ------   
  1  +6.2014e-01  +4.6344e+03  4.63e+03  3.09e-01  9.59e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5595e-01  +7.9373e+02  7.93e+02  1.40e-01  5.19e+01  6.67e-03  2.21e-01  6.62e-01  
  3  +5.1050e-01  +1.4900e+02  1.48e+02  1.26e-01  4.64e+01  1.26e-05  2.20e-01  4.43e-02  
  4  +5.0026e-01  +4.4453e+00  3.95e+00  1.17e-02  4.24e+00  1.27e-06  1.98e-01  3.78e-01  
  5  +5.0005e-01  +1.6798e+00  1.18e+00  3.52e-03  1.29e+00  8.59e-07  1.62e-01  2.95e-01  
  6  +5.0002e-01  +1.0651e+00  5.65e-01  1.68e-03  6.20e-01  4.77e-07  1.00e-01  4.61e-01  
  7  +5.0001e-01  +7.5421e-01  2.54e-01  7.57e-04  2.79e-01  3.18e-07  3.83e-02  6.52e-01  
  8  +4.9998e-01  +7.4930e-01  2.49e-01  7.20e-04  2.65e-01  9.30e-07  8.73e-03  8.74e-01  
  9  +4.9753e-01  +7.0026e-01  2.03e-01  4.01e-05  1.49e-02  5.33e-05  1.12e-04  9.90e-01  
 10  +4.9662e-01  +6.9457e-01  1.98e-01  2.98e-05  1.11e-02  6.61e-05  8.25e-05  2.90e-01  
 11  +4.9705e-01  +6.9083e-01  1.94e-01  2.94e-05  1.09e-02  5.28e-05  8.15e-05  1.74e-01  
 12  +4.9469e-01  +6.7834e-01  1.84e-01  1.76e-05  6.55e-03  7.75e-05  4.83e-05  4.24e-01  
 13  +4.9484e-01  +6.7659e-01  1.82e-01  1.75e-05  6.51e-03  6.95e-05  4.81e-05  8.64e-02  
 14  +4.9630e-01  +6.7253e-01  1.76e-01  1.43e-05  5.31e-03  1.90e-05  3.84e-05  8.64e-01  
 15  +4.9570e-01  +6.6903e-01  1.73e-01  1.25e-05  4.65e-03  1.80e-05  3.37e-05  2.52e-01  
 16  +4.9552e-01  +6.6619e-01  1.71e-01  1.21e-05  4.49e-03  1.10e-05  3.25e-05  4.12e-01  
 17  +4.9463e-01  +6.6243e-01  1.68e-01  1.08e-05  4.03e-03  1.07e-05  2.92e-05  1.88e-01  
 18  +4.9362e-01  +6.5444e-01  1.61e-01  9.64e-06  3.58e-03  1.91e-06  2.61e-05  8.98e-01  
 19  +4.9000e-01  +6.4205e-01  1.52e-01  7.25e-06  2.69e-03  2.11e-06  1.98e-05  3.63e-01  
 20  +4.7836e-01  +5.9734e-01  1.19e-01  4.78e-06  1.77e-03  1.56e-06  1.33e-05  6.61e-01  
 21  +4.4984e-01  +4.9760e-01  4.78e-02  1.59e-06  5.86e-04  5.24e-07  4.72e-06  7.63e-01  
 22  +4.2916e-01  +4.3129e-01  2.13e-03  6.73e-08  2.49e-05  5.21e-09  2.12e-07  9.79e-01  
 23  +4.2805e-01  +4.2807e-01  2.16e-05  6.79e-10  2.51e-07  5.22e-11  2.15e-09  9.90e-01  
 24  +4.2804e-01  +4.2804e-01  2.16e-07  6.79e-12  2.51e-09  5.22e-13  2.15e-11  9.90e-01  
 25  +4.2804e-01  +4.2804e-01  2.17e-09  6.80e-14  2.51e-11  5.54e-15  2.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 361.686ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:56 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:56 PM: Optimal value: 4.280e-01
(CVXPY) Aug 31 04:45:56 PM: Compilation took 5.575e-02 seconds
(CVXPY) Aug 31 04:45:56 PM: Solver (including time spent in interface) took 3.809e-01 seconds
FULL MODEL:
  Accruacy: 0.57206
  Our objective: 0.14412000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.14412000000000003)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.5436594486236572
Best over terms:
  Our final objective: 0.14412000000000003
    Its accruacy: 0.57206
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14412000000000003
  Highest accruacy: 0.57206
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

