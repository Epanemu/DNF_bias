Command:
python test_script.py -s smallest_subclass -d 8 -n 500 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 8.

Computed total variation: 0.488
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:36 PM: Your problem has 267 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:36 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:36 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:36 PM: Finished problem compilation (took 5.882e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 267
  constraints   = 517
  nnz(P)        = 0
  nnz(A)        = 2767
  cones (total) = 1
    : Nonnegative = 1,  numel = 517

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9975e-01  +2.5067e+02  2.50e+02  9.37e-01  2.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.8358e-01  +5.3850e+01  5.33e+01  3.95e-01  1.48e+01  3.82e-03  5.64e-01  5.98e-01  
  2  +5.3195e-01  +6.5157e+00  5.98e+00  1.26e-01  5.94e+00  1.51e-02  2.54e-01  9.34e-01  
  3  +5.0342e-01  +1.5435e+00  1.04e+00  3.21e-02  1.49e+00  3.25e-05  2.06e-01  6.30e-01  
  4  +5.0059e-01  +6.2735e-01  1.27e-01  4.02e-03  1.94e-01  5.35e-06  4.24e-02  8.31e-01  
  5  +5.0024e-01  +6.0120e-01  1.01e-01  3.02e-03  1.46e-01  7.52e-06  1.83e-02  6.35e-01  
  6  +4.9737e-01  +5.6319e-01  6.58e-02  5.63e-04  2.77e-02  3.54e-05  1.87e-03  9.25e-01  
  7  +4.9491e-01  +5.4853e-01  5.36e-02  3.95e-04  1.95e-02  3.09e-05  1.32e-03  3.67e-01  
  8  +4.9168e-01  +5.3223e-01  4.06e-02  2.56e-04  1.26e-02  2.26e-05  8.99e-04  7.68e-01  
  9  +4.8629e-01  +5.0666e-01  2.04e-02  9.88e-05  4.88e-03  1.28e-05  3.72e-04  6.56e-01  
 10  +4.8342e-01  +4.9383e-01  1.04e-02  4.68e-05  2.31e-03  7.44e-06  1.87e-04  7.82e-01  
 11  +4.8123e-01  +4.8456e-01  3.33e-03  1.38e-05  6.79e-04  2.93e-06  5.79e-05  9.90e-01  
 12  +4.8012e-01  +4.8018e-01  5.86e-05  2.35e-07  1.16e-05  4.73e-08  1.02e-06  9.86e-01  
 13  +4.8010e-01  +4.8010e-01  5.86e-07  2.35e-09  1.16e-07  4.73e-10  1.02e-08  9.90e-01  
 14  +4.8010e-01  +4.8010e-01  5.86e-09  2.35e-11  1.16e-09  4.75e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6281ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:36 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:36 PM: Optimal value: 4.801e-01
(CVXPY) Aug 31 04:58:36 PM: Compilation took 5.882e-03 seconds
(CVXPY) Aug 31 04:58:36 PM: Solver (including time spent in interface) took 2.664e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:37 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 3071
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +2.5111e+02  2.51e+02  9.38e-01  2.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.8113e-01  +5.3940e+01  5.34e+01  3.98e-01  1.48e+01  3.82e-03  5.65e-01  5.98e-01  
  2  +5.2974e-01  +6.2912e+00  5.76e+00  1.20e-01  5.69e+00  1.55e-02  2.45e-01  9.61e-01  
  3  +5.0238e-01  +1.4367e+00  9.34e-01  2.92e-02  1.38e+00  3.47e-05  1.78e-01  8.04e-01  
  4  +5.0017e-01  +8.3700e-01  3.37e-01  1.04e-02  5.04e-01  1.92e-05  6.46e-02  6.63e-01  
  5  +4.8640e-01  +8.7920e-01  3.93e-01  2.96e-03  1.48e-01  1.29e-04  9.41e-03  9.52e-01  
  6  +4.7208e-01  +6.8793e-01  2.16e-01  1.34e-03  6.70e-02  7.92e-05  4.47e-03  5.72e-01  
  7  +4.6023e-01  +5.8121e-01  1.21e-01  6.58e-04  3.28e-02  5.13e-05  2.25e-03  5.46e-01  
  8  +4.5212e-01  +5.0812e-01  5.60e-02  2.47e-04  1.23e-02  5.01e-05  8.32e-04  9.22e-01  
  9  +4.5119e-01  +5.0291e-01  5.17e-02  2.38e-04  1.18e-02  4.37e-05  8.04e-04  1.22e-01  
 10  +4.4389e-01  +4.7714e-01  3.33e-02  1.20e-04  5.95e-03  3.37e-05  4.12e-04  5.41e-01  
 11  +4.4317e-01  +4.7319e-01  3.00e-02  1.10e-04  5.48e-03  3.09e-05  3.80e-04  2.44e-01  
 12  +4.3373e-01  +4.3739e-01  3.66e-03  1.27e-05  6.31e-04  2.91e-06  4.57e-05  9.60e-01  
 13  +4.3232e-01  +4.3236e-01  4.58e-05  1.57e-07  7.79e-06  3.27e-08  5.71e-07  9.88e-01  
 14  +4.3230e-01  +4.3230e-01  4.58e-07  1.57e-09  7.79e-08  3.27e-10  5.71e-09  9.90e-01  
 15  +4.3230e-01  +4.3230e-01  4.58e-09  1.57e-11  7.79e-10  3.27e-12  5.71e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0799ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:37 PM: Optimal value: 4.323e-01
(CVXPY) Aug 31 04:58:37 PM: Compilation took 5.000e-03 seconds
(CVXPY) Aug 31 04:58:37 PM: Solver (including time spent in interface) took 4.002e-03 seconds
Iteration: 2, Objective: 0.4323
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:37 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Finished problem compilation (took 4.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 3435
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +2.5109e+02  2.51e+02  9.38e-01  2.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.7959e-01  +5.3998e+01  5.34e+01  4.01e-01  1.49e+01  3.82e-03  5.67e-01  5.97e-01  
  2  +5.2815e-01  +6.1309e+00  5.60e+00  1.18e-01  5.56e+00  1.58e-02  2.39e-01  9.80e-01  
  3  +5.0190e-01  +1.3792e+00  8.77e-01  2.79e-02  1.33e+00  3.75e-05  1.59e-01  9.11e-01  
  4  +4.9900e-01  +8.2238e-01  3.23e-01  9.48e-03  4.66e-01  2.97e-05  4.46e-02  7.65e-01  
  5  +4.8294e-01  +7.7813e-01  2.95e-01  2.38e-03  1.21e-01  1.37e-04  7.32e-03  8.79e-01  
  6  +4.6714e-01  +6.8712e-01  2.20e-01  1.21e-03  6.10e-02  1.45e-04  3.76e-03  6.08e-01  
  7  +4.4667e-01  +5.8604e-01  1.39e-01  6.10e-04  3.08e-02  1.07e-04  1.98e-03  6.26e-01  
  8  +4.2374e-01  +4.8159e-01  5.79e-02  2.32e-04  1.17e-02  4.87e-05  8.08e-04  8.06e-01  
  9  +4.0923e-01  +4.2751e-01  1.83e-02  6.84e-05  3.45e-03  1.60e-05  2.54e-04  7.78e-01  
 10  +4.0274e-01  +4.0333e-01  5.83e-04  2.15e-06  1.08e-04  5.70e-07  8.23e-06  9.90e-01  
 11  +4.0250e-01  +4.0251e-01  5.84e-06  2.15e-08  1.08e-06  5.70e-09  8.25e-08  9.90e-01  
 12  +4.0250e-01  +4.0250e-01  5.84e-08  2.15e-10  1.08e-08  5.70e-11  8.25e-10  9.90e-01  
 13  +4.0250e-01  +4.0250e-01  5.84e-10  2.15e-12  1.08e-10  5.70e-13  8.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.5575ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:37 PM: Optimal value: 4.025e-01
(CVXPY) Aug 31 04:58:37 PM: Compilation took 4.507e-03 seconds
(CVXPY) Aug 31 04:58:37 PM: Solver (including time spent in interface) took 4.987e-03 seconds
Iteration: 3, Objective: 0.4025
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:37 PM: Your problem has 297 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Finished problem compilation (took 4.026e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 297
  constraints   = 547
  nnz(P)        = 0
  nnz(A)        = 3644
  cones (total) = 1
    : Nonnegative = 1,  numel = 547

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +2.5129e+02  2.51e+02  9.39e-01  2.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.7652e-01  +5.4092e+01  5.35e+01  4.04e-01  1.48e+01  3.82e-03  5.68e-01  5.96e-01  
  2  +5.2591e-01  +6.1340e+00  5.61e+00  1.16e-01  5.44e+00  1.62e-02  2.35e-01  9.90e-01  
  3  +5.0320e-01  +1.3319e+00  8.29e-01  2.80e-02  1.36e+00  4.42e-04  1.04e-01  9.62e-01  
  4  +4.9492e-01  +1.1681e+00  6.73e-01  8.82e-03  4.49e-01  1.05e-03  2.48e-02  8.59e-01  
  5  +4.7342e-01  +9.0427e-01  4.31e-01  2.80e-03  1.43e-01  1.32e-03  8.04e-03  6.94e-01  
  6  +4.5751e-01  +8.0382e-01  3.46e-01  1.81e-03  9.20e-02  1.13e-03  5.32e-03  3.97e-01  
  7  +4.3502e-01  +6.4105e-01  2.06e-01  1.02e-03  5.15e-02  4.02e-04  3.26e-03  5.95e-01  
  8  +4.1134e-01  +4.9732e-01  8.60e-02  4.03e-04  2.03e-02  1.23e-04  1.41e-03  6.89e-01  
  9  +4.0480e-01  +4.6493e-01  6.01e-02  2.69e-04  1.35e-02  8.43e-05  9.58e-04  4.09e-01  
 10  +3.9984e-01  +4.4038e-01  4.05e-02  1.75e-04  8.76e-03  5.45e-05  6.35e-04  4.78e-01  
 11  +3.9252e-01  +4.0434e-01  1.18e-02  5.04e-05  2.52e-03  1.24e-05  1.89e-04  9.90e-01  
 12  +3.8892e-01  +3.8974e-01  8.24e-04  3.49e-06  1.74e-04  8.12e-07  1.35e-05  9.37e-01  
 13  +3.8868e-01  +3.8878e-01  9.62e-05  4.07e-07  2.03e-05  9.60e-08  1.58e-06  9.06e-01  
 14  +3.8865e-01  +3.8865e-01  9.75e-07  4.12e-09  2.06e-07  9.73e-10  1.60e-08  9.90e-01  
 15  +3.8865e-01  +3.8865e-01  9.75e-09  4.12e-11  2.06e-09  9.74e-12  1.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.7187ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:37 PM: Optimal value: 3.887e-01
(CVXPY) Aug 31 04:58:37 PM: Compilation took 4.026e-03 seconds
(CVXPY) Aug 31 04:58:37 PM: Solver (including time spent in interface) took 4.936e-03 seconds
Iteration: 4, Objective: 0.3887
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:37 PM: Your problem has 307 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Finished problem compilation (took 4.892e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 307
  constraints   = 557
  nnz(P)        = 0
  nnz(A)        = 3747
  cones (total) = 1
    : Nonnegative = 1,  numel = 557

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9899e-01  +2.5133e+02  2.51e+02  9.40e-01  2.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.7355e-01  +5.4168e+01  5.36e+01  4.06e-01  1.46e+01  3.82e-03  5.69e-01  5.95e-01  
  2  +5.2416e-01  +6.2494e+00  5.73e+00  1.16e-01  5.38e+00  1.66e-02  2.34e-01  9.90e-01  
  3  +5.0470e-01  +1.3839e+00  8.79e-01  2.73e-02  1.35e+00  1.38e-03  8.17e-02  8.73e-01  
  4  +5.0212e-01  +1.4219e+00  9.20e-01  1.62e-02  8.22e-01  2.32e-03  4.31e-02  5.24e-01  
  5  +4.8685e-01  +1.2991e+00  8.12e-01  5.72e-03  2.95e-01  4.11e-03  1.51e-02  7.35e-01  
  6  +4.5466e-01  +8.0930e-01  3.55e-01  2.16e-03  1.09e-01  3.48e-04  6.33e-03  8.07e-01  
  7  +4.4350e-01  +7.4461e-01  3.01e-01  1.76e-03  8.88e-02  2.68e-04  5.32e-03  3.23e-01  
  8  +4.0782e-01  +5.4912e-01  1.41e-01  6.96e-04  3.48e-02  1.09e-04  2.33e-03  6.92e-01  
  9  +3.9004e-01  +4.5968e-01  6.96e-02  3.31e-04  1.65e-02  5.52e-05  1.19e-03  6.17e-01  
 10  +3.8299e-01  +4.2654e-01  4.36e-02  2.02e-04  1.00e-02  3.51e-05  7.48e-04  4.18e-01  
 11  +3.7455e-01  +3.8685e-01  1.23e-02  5.59e-05  2.78e-03  1.06e-05  2.16e-04  8.20e-01  
 12  +3.7129e-01  +3.7239e-01  1.10e-03  4.97e-06  2.46e-04  9.34e-07  1.97e-05  9.19e-01  
 13  +3.7103e-01  +3.7129e-01  2.62e-04  1.18e-06  5.82e-05  2.25e-07  4.70e-06  8.05e-01  
 14  +3.7095e-01  +3.7095e-01  3.10e-06  1.39e-08  6.89e-07  2.69e-09  5.57e-08  9.90e-01  
 15  +3.7095e-01  +3.7095e-01  3.11e-08  1.39e-10  6.89e-09  2.69e-11  5.57e-10  9.90e-01  
 16  +3.7095e-01  +3.7095e-01  3.11e-10  1.39e-12  6.90e-11  2.69e-13  5.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1717ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:37 PM: Optimal value: 3.710e-01
(CVXPY) Aug 31 04:58:37 PM: Compilation took 4.892e-03 seconds
(CVXPY) Aug 31 04:58:37 PM: Solver (including time spent in interface) took 6.122e-03 seconds
Iteration: 5, Objective: 0.3710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:37 PM: Your problem has 317 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Finished problem compilation (took 6.371e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 317
  constraints   = 567
  nnz(P)        = 0
  nnz(A)        = 3866
  cones (total) = 1
    : Nonnegative = 1,  numel = 567

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9885e-01  +2.5135e+02  2.51e+02  9.40e-01  2.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.7012e-01  +5.4177e+01  5.36e+01  4.08e-01  1.45e+01  3.83e-03  5.68e-01  5.96e-01  
  2  +5.2208e-01  +6.3719e+00  5.85e+00  1.15e-01  5.29e+00  1.69e-02  2.32e-01  9.90e-01  
  3  +5.0540e-01  +1.5651e+00  1.06e+00  2.82e-02  1.41e+00  2.66e-03  7.58e-02  7.70e-01  
  4  +5.0354e-01  +1.6005e+00  1.10e+00  2.01e-02  1.02e+00  3.59e-03  5.12e-02  3.76e-01  
  5  +4.9158e-01  +1.6769e+00  1.19e+00  9.66e-03  4.98e-01  5.34e-03  2.42e-02  7.51e-01  
  6  +4.6067e-01  +9.7552e-01  5.15e-01  3.40e-03  1.73e-01  1.19e-03  9.36e-03  7.55e-01  
  7  +4.4791e-01  +9.0256e-01  4.55e-01  2.58e-03  1.30e-01  1.03e-03  7.27e-03  3.18e-01  
  8  +4.1527e-01  +6.4941e-01  2.34e-01  1.31e-03  6.51e-02  2.14e-04  4.13e-03  6.84e-01  
  9  +3.9666e-01  +5.4274e-01  1.46e-01  7.61e-04  3.77e-02  1.29e-04  2.56e-03  4.43e-01  
 10  +3.7161e-01  +4.0667e-01  3.51e-02  1.68e-04  8.29e-03  3.06e-05  6.24e-04  9.31e-01  
 11  +3.6846e-01  +3.9551e-01  2.71e-02  1.25e-04  6.18e-03  2.38e-05  4.77e-04  4.17e-01  
 12  +3.6269e-01  +3.7297e-01  1.03e-02  4.45e-05  2.22e-03  9.30e-06  1.81e-04  8.00e-01  
 13  +3.5936e-01  +3.5982e-01  4.58e-04  1.94e-06  9.66e-05  4.03e-07  8.15e-06  9.61e-01  
 14  +3.5920e-01  +3.5921e-01  4.62e-06  1.95e-08  9.74e-07  4.06e-09  8.23e-08  9.90e-01  
 15  +3.5920e-01  +3.5920e-01  4.62e-08  1.95e-10  9.74e-09  4.06e-11  8.23e-10  9.90e-01  
 16  +3.5920e-01  +3.5920e-01  4.62e-10  1.95e-12  9.74e-11  4.06e-13  8.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.168ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:37 PM: Optimal value: 3.592e-01
(CVXPY) Aug 31 04:58:37 PM: Compilation took 6.371e-03 seconds
(CVXPY) Aug 31 04:58:37 PM: Solver (including time spent in interface) took 6.022e-03 seconds
Iteration: 6, Objective: 0.3592
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:37 PM: Your problem has 327 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Finished problem compilation (took 3.997e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 327
  constraints   = 577
  nnz(P)        = 0
  nnz(A)        = 3961
  cones (total) = 1
    : Nonnegative = 1,  numel = 577

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9884e-01  +2.5138e+02  2.51e+02  9.41e-01  2.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.6876e-01  +5.4181e+01  5.36e+01  4.09e-01  1.43e+01  3.83e-03  5.67e-01  5.96e-01  
  2  +5.2125e-01  +6.4078e+00  5.89e+00  1.14e-01  5.18e+00  1.70e-02  2.30e-01  9.90e-01  
  3  +5.0494e-01  +1.5173e+00  1.01e+00  2.57e-02  1.28e+00  2.77e-03  6.81e-02  7.76e-01  
  4  +5.0250e-01  +1.6167e+00  1.11e+00  1.79e-02  9.10e-01  3.94e-03  4.51e-02  4.48e-01  
  5  +4.8763e-01  +1.5963e+00  1.11e+00  8.23e-03  4.23e-01  5.79e-03  2.06e-02  7.15e-01  
  6  +4.5734e-01  +9.7850e-01  5.21e-01  3.69e-03  1.85e-01  6.71e-04  1.04e-02  7.03e-01  
  7  +4.3977e-01  +8.6509e-01  4.25e-01  2.49e-03  1.25e-01  5.34e-04  7.21e-03  4.52e-01  
  8  +4.0307e-01  +6.0528e-01  2.02e-01  1.12e-03  5.50e-02  1.10e-04  3.65e-03  9.01e-01  
  9  +3.8728e-01  +5.2184e-01  1.35e-01  6.97e-04  3.42e-02  7.37e-05  2.40e-03  3.79e-01  
 10  +3.6754e-01  +4.1984e-01  5.23e-02  2.54e-04  1.24e-02  3.24e-05  9.41e-04  7.07e-01  
 11  +3.6050e-01  +3.8377e-01  2.33e-02  1.10e-04  5.40e-03  2.17e-05  4.22e-04  9.90e-01  
 12  +3.5485e-01  +3.5986e-01  5.01e-03  2.32e-05  1.14e-03  4.63e-06  9.27e-05  8.48e-01  
 13  +3.5352e-01  +3.5437e-01  8.43e-04  3.86e-06  1.89e-04  7.70e-07  1.58e-05  8.72e-01  
 14  +3.5325e-01  +3.5341e-01  1.54e-04  6.61e-07  3.22e-05  1.36e-07  2.87e-06  8.89e-01  
 15  +3.5320e-01  +3.5320e-01  3.50e-06  1.49e-08  7.28e-07  3.05e-09  6.53e-08  9.87e-01  
 16  +3.5320e-01  +3.5320e-01  3.50e-08  1.50e-10  7.29e-09  3.06e-11  6.54e-10  9.90e-01  
 17  +3.5320e-01  +3.5320e-01  3.50e-10  1.50e-12  7.29e-11  3.09e-13  6.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5247ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:37 PM: Optimal value: 3.532e-01
(CVXPY) Aug 31 04:58:37 PM: Compilation took 3.997e-03 seconds
(CVXPY) Aug 31 04:58:37 PM: Solver (including time spent in interface) took 5.027e-03 seconds
Iteration: 7, Objective: 0.3532
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:37 PM: Your problem has 337 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Finished problem compilation (took 3.043e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 337
  constraints   = 587
  nnz(P)        = 0
  nnz(A)        = 4056
  cones (total) = 1
    : Nonnegative = 1,  numel = 587

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9867e-01  +2.5152e+02  2.51e+02  9.41e-01  2.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.6507e-01  +5.4308e+01  5.37e+01  4.11e-01  1.41e+01  3.84e-03  5.68e-01  5.95e-01  
  2  +5.1961e-01  +6.5277e+00  6.01e+00  1.14e-01  5.13e+00  1.73e-02  2.29e-01  9.90e-01  
  3  +5.0437e-01  +1.6079e+00  1.10e+00  2.54e-02  1.27e+00  3.48e-03  6.53e-02  7.48e-01  
  4  +4.9141e-01  +1.8088e+00  1.32e+00  1.11e-02  5.73e-01  7.43e-03  2.71e-02  7.49e-01  
  5  +4.6417e-01  +1.2684e+00  8.04e-01  5.31e-03  2.70e-01  3.48e-03  1.37e-02  6.44e-01  
  6  +4.4056e-01  +1.0490e+00  6.08e-01  3.38e-03  1.70e-01  2.42e-03  9.23e-03  4.23e-01  
  7  +3.9832e-01  +6.4964e-01  2.51e-01  1.47e-03  7.16e-02  1.99e-05  4.66e-03  8.54e-01  
  8  +3.7741e-01  +5.2831e-01  1.51e-01  8.08e-04  3.92e-02  3.99e-05  2.77e-03  5.44e-01  
  9  +3.5947e-01  +4.2514e-01  6.57e-02  3.35e-04  1.62e-02  4.98e-05  1.24e-03  9.03e-01  
 10  +3.4935e-01  +3.7070e-01  2.13e-02  1.07e-04  5.20e-03  1.90e-05  4.19e-04  9.90e-01  
 11  +3.4434e-01  +3.4755e-01  3.21e-03  1.61e-05  7.78e-04  2.73e-06  6.55e-05  8.67e-01  
 12  +3.4359e-01  +3.4419e-01  6.05e-04  3.00e-06  1.45e-04  4.79e-07  1.27e-05  9.73e-01  
 13  +3.4341e-01  +3.4342e-01  1.62e-05  8.00e-08  3.87e-06  1.24e-08  3.42e-07  9.74e-01  
 14  +3.4340e-01  +3.4340e-01  1.62e-07  8.02e-10  3.88e-08  1.24e-10  3.43e-09  9.90e-01  
 15  +3.4340e-01  +3.4340e-01  1.62e-09  8.02e-12  3.88e-10  1.24e-12  3.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.777ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:37 PM: Optimal value: 3.434e-01
(CVXPY) Aug 31 04:58:37 PM: Compilation took 3.043e-03 seconds
(CVXPY) Aug 31 04:58:37 PM: Solver (including time spent in interface) took 3.963e-03 seconds
Iteration: 8, Objective: 0.3434
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:37 PM: Your problem has 347 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Finished problem compilation (took 4.973e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 347
  constraints   = 597
  nnz(P)        = 0
  nnz(A)        = 4189
  cones (total) = 1
    : Nonnegative = 1,  numel = 597

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9865e-01  +2.5150e+02  2.51e+02  9.42e-01  2.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.6302e-01  +5.4324e+01  5.38e+01  4.12e-01  1.40e+01  3.84e-03  5.67e-01  5.95e-01  
  2  +5.1788e-01  +6.5935e+00  6.08e+00  1.13e-01  5.04e+00  1.75e-02  2.27e-01  9.90e-01  
  3  +5.0283e-01  +1.5658e+00  1.06e+00  2.25e-02  1.13e+00  3.78e-03  5.71e-02  7.73e-01  
  4  +4.8883e-01  +1.6445e+00  1.16e+00  1.01e-02  5.19e-01  7.47e-03  2.47e-02  6.80e-01  
  5  +4.5646e-01  +1.2229e+00  7.66e-01  4.47e-03  2.28e-01  5.64e-03  1.15e-02  6.29e-01  
  6  +4.2823e-01  +9.8306e-01  5.55e-01  3.06e-03  1.53e-01  2.99e-03  8.41e-03  3.99e-01  
  7  +3.8892e-01  +6.7449e-01  2.86e-01  1.55e-03  7.56e-02  9.99e-04  4.86e-03  5.27e-01  
  8  +3.6760e-01  +5.5193e-01  1.84e-01  9.58e-04  4.63e-02  5.39e-04  3.28e-03  4.43e-01  
  9  +3.4202e-01  +4.0533e-01  6.33e-02  3.19e-04  1.53e-02  9.09e-05  1.25e-03  8.75e-01  
 10  +3.2890e-01  +3.4024e-01  1.13e-02  5.49e-05  2.63e-03  1.25e-05  2.41e-04  8.86e-01  
 11  +3.2601e-01  +3.2733e-01  1.31e-03  6.27e-06  3.00e-04  1.15e-06  2.92e-05  9.34e-01  
 12  +3.2561e-01  +3.2565e-01  3.82e-05  1.82e-07  8.71e-06  2.71e-08  8.73e-07  9.74e-01  
 13  +3.2560e-01  +3.2560e-01  3.82e-07  1.82e-09  8.70e-08  2.70e-10  8.76e-09  9.90e-01  
 14  +3.2560e-01  +3.2560e-01  3.82e-09  1.82e-11  8.71e-10  2.71e-12  8.76e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6459ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:37 PM: Optimal value: 3.256e-01
(CVXPY) Aug 31 04:58:37 PM: Compilation took 4.973e-03 seconds
(CVXPY) Aug 31 04:58:37 PM: Solver (including time spent in interface) took 4.017e-03 seconds
Iteration: 9, Objective: 0.3256
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:37 PM: Your problem has 357 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Finished problem compilation (took 4.017e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 357
  constraints   = 607
  nnz(P)        = 0
  nnz(A)        = 4289
  cones (total) = 1
    : Nonnegative = 1,  numel = 607

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9857e-01  +2.5160e+02  2.51e+02  9.42e-01  2.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.6058e-01  +5.4420e+01  5.39e+01  4.14e-01  1.38e+01  3.85e-03  5.68e-01  5.94e-01  
  2  +5.1661e-01  +6.6739e+00  6.16e+00  1.13e-01  4.98e+00  1.77e-02  2.27e-01  9.90e-01  
  3  +5.0180e-01  +1.6033e+00  1.10e+00  2.20e-02  1.10e+00  4.17e-03  5.53e-02  7.76e-01  
  4  +4.8204e-01  +1.6282e+00  1.15e+00  8.62e-03  4.41e-01  8.93e-03  2.10e-02  7.09e-01  
  5  +4.5120e-01  +1.2612e+00  8.10e-01  4.81e-03  2.42e-01  5.62e-03  1.25e-02  5.20e-01  
  6  +3.9693e-01  +7.2567e-01  3.29e-01  1.90e-03  9.26e-02  1.00e-04  5.76e-03  7.56e-01  
  7  +3.6695e-01  +5.6106e-01  1.94e-01  1.06e-03  5.08e-02  7.16e-05  3.56e-03  4.69e-01  
  8  +3.3662e-01  +4.0027e-01  6.36e-02  3.26e-04  1.55e-02  2.96e-05  1.26e-03  7.34e-01  
  9  +3.2808e-01  +3.5799e-01  2.99e-02  1.50e-04  7.15e-03  1.85e-05  6.17e-04  7.18e-01  
 10  +3.2394e-01  +3.3724e-01  1.33e-02  6.63e-05  3.15e-03  1.08e-05  2.81e-04  9.90e-01  
 11  +3.2079e-01  +3.2345e-01  2.66e-03  1.32e-05  6.27e-04  2.09e-06  5.81e-05  8.16e-01  
 12  +3.2025e-01  +3.2120e-01  9.52e-04  4.70e-06  2.23e-04  7.28e-07  2.11e-05  8.11e-01  
 13  +3.1996e-01  +3.1999e-01  2.65e-05  1.31e-07  6.20e-06  1.86e-08  5.95e-07  9.73e-01  
 14  +3.1995e-01  +3.1995e-01  2.66e-07  1.31e-09  6.22e-08  1.86e-10  5.98e-09  9.90e-01  
 15  +3.1995e-01  +3.1995e-01  2.66e-09  1.31e-11  6.22e-10  1.86e-12  5.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8754ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:37 PM: Optimal value: 3.200e-01
(CVXPY) Aug 31 04:58:37 PM: Compilation took 4.017e-03 seconds
(CVXPY) Aug 31 04:58:37 PM: Solver (including time spent in interface) took 4.991e-03 seconds
Iteration: 10, Objective: 0.3200
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:37 PM: Your problem has 367 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:37 PM: Finished problem compilation (took 4.333e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 367
  constraints   = 617
  nnz(P)        = 0
  nnz(A)        = 4354
  cones (total) = 1
    : Nonnegative = 1,  numel = 617

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9852e-01  +2.5167e+02  2.51e+02  9.43e-01  2.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.5882e-01  +5.4509e+01  5.39e+01  4.16e-01  1.37e+01  3.85e-03  5.69e-01  5.94e-01  
  2  +5.1541e-01  +6.7307e+00  6.22e+00  1.13e-01  4.92e+00  1.79e-02  2.27e-01  9.90e-01  
  3  +5.0069e-01  +1.7142e+00  1.21e+00  2.29e-02  1.13e+00  4.78e-03  5.73e-02  7.65e-01  
  4  +4.7915e-01  +1.6361e+00  1.16e+00  8.99e-03  4.55e-01  9.15e-03  2.21e-02  6.73e-01  
  5  +4.4739e-01  +1.2672e+00  8.20e-01  5.01e-03  2.50e-01  5.88e-03  1.31e-02  5.12e-01  
  6  +3.9441e-01  +7.3274e-01  3.38e-01  2.00e-03  9.67e-02  5.24e-05  6.11e-03  7.74e-01  
  7  +3.6578e-01  +5.7437e-01  2.09e-01  1.16e-03  5.52e-02  5.72e-05  3.90e-03  4.72e-01  
  8  +3.3907e-01  +4.2832e-01  8.93e-02  4.70e-04  2.23e-02  2.96e-05  1.78e-03  6.01e-01  
  9  +3.2646e-01  +3.6426e-01  3.78e-02  1.93e-04  9.17e-03  1.48e-05  7.84e-04  6.17e-01  
 10  +3.1904e-01  +3.2850e-01  9.46e-03  4.64e-05  2.22e-03  5.05e-06  2.00e-04  8.29e-01  
 11  +3.1661e-01  +3.1794e-01  1.33e-03  6.46e-06  3.08e-04  7.29e-07  2.88e-05  8.85e-01  
 12  +3.1622e-01  +3.1628e-01  6.41e-05  3.10e-07  1.48e-05  3.25e-08  1.42e-06  9.54e-01  
 13  +3.1620e-01  +3.1620e-01  6.50e-07  3.15e-09  1.50e-07  3.29e-10  1.45e-08  9.90e-01  
 14  +3.1620e-01  +3.1620e-01  6.50e-09  3.15e-11  1.50e-09  3.29e-12  1.45e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.3208ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:37 PM: Optimal value: 3.162e-01
(CVXPY) Aug 31 04:58:37 PM: Compilation took 4.333e-03 seconds
(CVXPY) Aug 31 04:58:37 PM: Solver (including time spent in interface) took 5.000e-03 seconds
Iteration: 11, Objective: 0.3162
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:38 PM: Your problem has 377 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Finished problem compilation (took 3.983e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 377
  constraints   = 627
  nnz(P)        = 0
  nnz(A)        = 4410
  cones (total) = 1
    : Nonnegative = 1,  numel = 627

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9844e-01  +2.5188e+02  2.51e+02  9.43e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.5564e-01  +5.4688e+01  5.41e+01  4.17e-01  1.36e+01  3.85e-03  5.70e-01  5.92e-01  
  2  +5.1342e-01  +6.8324e+00  6.32e+00  1.12e-01  4.88e+00  1.82e-02  2.27e-01  9.90e-01  
  3  +4.9866e-01  +1.7772e+00  1.28e+00  2.24e-02  1.11e+00  5.35e-03  5.56e-02  7.70e-01  
  4  +4.7631e-01  +1.6275e+00  1.15e+00  9.43e-03  4.75e-01  8.95e-03  2.32e-02  6.23e-01  
  5  +4.3653e-01  +1.1941e+00  7.58e-01  4.50e-03  2.23e-01  5.65e-03  1.19e-02  5.89e-01  
  6  +3.9275e-01  +7.8910e-01  3.96e-01  2.45e-03  1.17e-01  6.42e-04  7.47e-03  6.50e-01  
  7  +3.6172e-01  +5.8795e-01  2.26e-01  1.30e-03  6.13e-02  3.18e-04  4.38e-03  4.70e-01  
  8  +3.2827e-01  +3.9675e-01  6.85e-02  3.66e-04  1.72e-02  7.31e-05  1.44e-03  7.55e-01  
  9  +3.1931e-01  +3.5202e-01  3.27e-02  1.70e-04  7.97e-03  3.34e-05  7.03e-04  6.13e-01  
 10  +3.1255e-01  +3.2001e-01  7.47e-03  3.70e-05  1.75e-03  7.14e-06  1.63e-04  8.52e-01  
 11  +3.1080e-01  +3.1241e-01  1.61e-03  7.96e-06  3.76e-04  1.44e-06  3.62e-05  8.09e-01  
 12  +3.1033e-01  +3.1043e-01  9.55e-05  4.69e-07  2.21e-05  7.70e-08  2.19e-06  9.43e-01  
 13  +3.1030e-01  +3.1030e-01  1.00e-06  4.92e-09  2.32e-07  7.97e-10  2.31e-08  9.90e-01  
 14  +3.1030e-01  +3.1030e-01  1.01e-08  4.93e-11  2.33e-09  8.00e-12  2.31e-10  9.90e-01  
 15  +3.1030e-01  +3.1030e-01  1.01e-10  4.97e-13  2.35e-11  8.08e-14  2.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.7402ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:38 PM: Optimal value: 3.103e-01
(CVXPY) Aug 31 04:58:38 PM: Compilation took 3.983e-03 seconds
(CVXPY) Aug 31 04:58:38 PM: Solver (including time spent in interface) took 4.997e-03 seconds
Iteration: 12, Objective: 0.3103
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:38 PM: Your problem has 387 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Finished problem compilation (took 2.962e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 387
  constraints   = 637
  nnz(P)        = 0
  nnz(A)        = 4471
  cones (total) = 1
    : Nonnegative = 1,  numel = 637

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9833e-01  +2.5188e+02  2.51e+02  9.44e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.5266e-01  +5.4786e+01  5.42e+01  4.20e-01  1.35e+01  3.85e-03  5.72e-01  5.91e-01  
  2  +5.1096e-01  +6.9458e+00  6.43e+00  1.12e-01  4.83e+00  1.86e-02  2.27e-01  9.90e-01  
  3  +4.9563e-01  +1.7936e+00  1.30e+00  2.10e-02  1.03e+00  5.87e-03  5.20e-02  7.85e-01  
  4  +4.6376e-01  +1.5446e+00  1.08e+00  7.76e-03  3.88e-01  9.81e-03  1.92e-02  6.65e-01  
  5  +4.3109e-01  +1.2427e+00  8.12e-01  4.83e-03  2.38e-01  7.02e-03  1.27e-02  4.07e-01  
  6  +3.8523e-01  +8.0178e-01  4.17e-01  2.51e-03  1.20e-01  1.65e-03  7.54e-03  5.67e-01  
  7  +3.5119e-01  +5.7481e-01  2.24e-01  1.29e-03  6.03e-02  6.90e-04  4.39e-03  5.03e-01  
  8  +3.2422e-01  +4.2210e-01  9.79e-02  5.34e-04  2.48e-02  2.07e-04  2.10e-03  6.98e-01  
  9  +3.0727e-01  +3.2785e-01  2.06e-02  1.09e-04  5.01e-03  3.60e-05  4.87e-04  7.98e-01  
 10  +3.0303e-01  +3.0562e-01  2.58e-03  1.35e-05  6.22e-04  2.94e-06  6.51e-05  9.23e-01  
 11  +3.0241e-01  +3.0279e-01  3.77e-04  1.95e-06  8.94e-05  2.79e-07  1.01e-05  9.47e-01  
 12  +3.0230e-01  +3.0231e-01  5.58e-06  2.87e-08  1.31e-06  3.89e-09  1.51e-07  9.86e-01  
 13  +3.0230e-01  +3.0230e-01  5.58e-08  2.87e-10  1.31e-08  3.89e-11  1.51e-09  9.90e-01  
 14  +3.0230e-01  +3.0230e-01  5.61e-10  2.89e-12  1.32e-10  3.93e-13  1.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.3475ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:38 PM: Optimal value: 3.023e-01
(CVXPY) Aug 31 04:58:38 PM: Compilation took 2.962e-03 seconds
(CVXPY) Aug 31 04:58:38 PM: Solver (including time spent in interface) took 5.976e-03 seconds
Iteration: 13, Objective: 0.3023
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:38 PM: Your problem has 397 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Finished problem compilation (took 3.921e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 397
  constraints   = 647
  nnz(P)        = 0
  nnz(A)        = 4531
  cones (total) = 1
    : Nonnegative = 1,  numel = 647

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9832e-01  +2.5189e+02  2.51e+02  9.44e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.5139e-01  +5.4849e+01  5.43e+01  4.21e-01  1.33e+01  3.86e-03  5.72e-01  5.91e-01  
  2  +5.0992e-01  +6.9807e+00  6.47e+00  1.12e-01  4.78e+00  1.87e-02  2.27e-01  9.90e-01  
  3  +4.9431e-01  +1.7986e+00  1.30e+00  2.05e-02  1.00e+00  6.05e-03  5.07e-02  7.92e-01  
  4  +4.6089e-01  +1.5203e+00  1.06e+00  7.61e-03  3.78e-01  9.51e-03  1.90e-02  6.64e-01  
  5  +4.2816e-01  +1.2340e+00  8.06e-01  4.78e-03  2.34e-01  6.89e-03  1.26e-02  4.09e-01  
  6  +3.8191e-01  +7.8691e-01  4.05e-01  2.43e-03  1.15e-01  1.44e-03  7.36e-03  5.97e-01  
  7  +3.4582e-01  +5.4438e-01  1.99e-01  1.14e-03  5.29e-02  5.34e-04  3.94e-03  5.51e-01  
  8  +3.2061e-01  +4.0367e-01  8.31e-02  4.53e-04  2.09e-02  1.54e-04  1.79e-03  7.35e-01  
  9  +3.0741e-01  +3.3311e-01  2.57e-02  1.34e-04  6.16e-03  3.79e-05  5.87e-04  7.86e-01  
 10  +3.0240e-01  +3.0918e-01  6.78e-03  3.45e-05  1.58e-03  8.21e-06  1.63e-04  8.04e-01  
 11  +3.0065e-01  +3.0113e-01  4.80e-04  2.42e-06  1.11e-04  4.07e-07  1.21e-05  9.49e-01  
 12  +3.0050e-01  +3.0051e-01  1.03e-05  5.18e-08  2.37e-06  7.67e-09  2.65e-07  9.85e-01  
 13  +3.0050e-01  +3.0050e-01  1.03e-07  5.18e-10  2.37e-08  7.67e-11  2.65e-09  9.90e-01  
 14  +3.0050e-01  +3.0050e-01  1.03e-09  5.19e-12  2.38e-10  7.70e-13  2.66e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.0838ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:38 PM: Optimal value: 3.005e-01
(CVXPY) Aug 31 04:58:38 PM: Compilation took 3.921e-03 seconds
(CVXPY) Aug 31 04:58:38 PM: Solver (including time spent in interface) took 6.353e-03 seconds
Iteration: 14, Objective: 0.3005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:38 PM: Your problem has 407 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Finished problem compilation (took 3.271e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 407
  constraints   = 657
  nnz(P)        = 0
  nnz(A)        = 4597
  cones (total) = 1
    : Nonnegative = 1,  numel = 657

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9822e-01  +2.5177e+02  2.51e+02  9.44e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.4793e-01  +5.5006e+01  5.45e+01  4.23e-01  1.32e+01  3.86e-03  5.72e-01  5.89e-01  
  2  +5.0762e-01  +7.0874e+00  6.58e+00  1.11e-01  4.73e+00  1.91e-02  2.27e-01  9.90e-01  
  3  +4.9104e-01  +1.7033e+00  1.21e+00  1.79e-02  8.71e-01  6.16e-03  4.43e-02  8.21e-01  
  4  +4.5318e-01  +1.4175e+00  9.64e-01  6.79e-03  3.34e-01  9.03e-03  1.70e-02  6.64e-01  
  5  +4.1947e-01  +1.1563e+00  7.37e-01  4.42e-03  2.14e-01  6.17e-03  1.18e-02  3.97e-01  
  6  +3.6994e-01  +7.2666e-01  3.57e-01  2.15e-03  1.01e-01  1.19e-03  6.63e-03  6.29e-01  
  7  +3.3748e-01  +5.1883e-01  1.81e-01  1.05e-03  4.83e-02  4.80e-04  3.64e-03  5.40e-01  
  8  +3.1259e-01  +3.7881e-01  6.62e-02  3.66e-04  1.67e-02  1.27e-04  1.43e-03  7.44e-01  
  9  +3.0483e-01  +3.3783e-01  3.30e-02  1.77e-04  8.10e-03  5.59e-05  7.42e-04  5.86e-01  
 10  +2.9761e-01  +3.0114e-01  3.53e-03  1.86e-05  8.47e-04  4.17e-06  8.48e-05  9.24e-01  
 11  +2.9683e-01  +2.9761e-01  7.78e-04  4.07e-06  1.85e-04  7.74e-07  1.98e-05  8.25e-01  
 12  +2.9661e-01  +2.9665e-01  3.93e-05  2.04e-07  9.29e-06  3.54e-08  1.03e-06  9.52e-01  
 13  +2.9660e-01  +2.9660e-01  4.05e-07  2.10e-09  9.55e-08  3.62e-10  1.06e-08  9.90e-01  
 14  +2.9660e-01  +2.9660e-01  4.06e-09  2.11e-11  9.59e-10  3.64e-12  1.06e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7462ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:38 PM: Optimal value: 2.966e-01
(CVXPY) Aug 31 04:58:38 PM: Compilation took 3.271e-03 seconds
(CVXPY) Aug 31 04:58:38 PM: Solver (including time spent in interface) took 6.998e-03 seconds
Iteration: 15, Objective: 0.2966
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:38 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Finished problem compilation (took 2.970e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 4614
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9822e-01  +2.5175e+02  2.51e+02  9.44e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.4761e-01  +5.4986e+01  5.44e+01  4.23e-01  1.32e+01  3.87e-03  5.72e-01  5.89e-01  
  2  +5.0731e-01  +7.0899e+00  6.58e+00  1.11e-01  4.71e+00  1.91e-02  2.26e-01  9.90e-01  
  3  +4.9042e-01  +1.7091e+00  1.22e+00  1.77e-02  8.62e-01  6.26e-03  4.40e-02  8.23e-01  
  4  +4.5138e-01  +1.4199e+00  9.69e-01  6.72e-03  3.30e-01  9.15e-03  1.69e-02  6.67e-01  
  5  +4.1700e-01  +1.1506e+00  7.34e-01  4.37e-03  2.11e-01  6.13e-03  1.16e-02  3.97e-01  
  6  +3.6527e-01  +7.1124e-01  3.46e-01  2.05e-03  9.56e-02  1.13e-03  6.36e-03  6.40e-01  
  7  +3.2466e-01  +4.5800e-01  1.33e-01  7.51e-04  3.43e-02  2.90e-04  2.71e-03  6.91e-01  
  8  +3.1002e-01  +3.8789e-01  7.79e-02  4.17e-04  1.91e-02  1.30e-04  1.64e-03  6.23e-01  
  9  +2.9458e-01  +3.0913e-01  1.46e-02  7.54e-05  3.44e-03  2.03e-05  3.33e-04  8.23e-01  
 10  +2.9127e-01  +2.9293e-01  1.65e-03  8.56e-06  3.89e-04  1.78e-06  4.01e-05  9.11e-01  
 11  +2.9083e-01  +2.9090e-01  7.94e-05  4.12e-07  1.87e-05  5.26e-08  2.00e-06  9.90e-01  
 12  +2.9080e-01  +2.9080e-01  7.97e-07  4.13e-09  1.87e-07  5.27e-10  2.01e-08  9.90e-01  
 13  +2.9080e-01  +2.9080e-01  7.98e-09  4.13e-11  1.87e-09  5.27e-12  2.01e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5344ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:38 PM: Optimal value: 2.908e-01
(CVXPY) Aug 31 04:58:38 PM: Compilation took 2.970e-03 seconds
(CVXPY) Aug 31 04:58:38 PM: Solver (including time spent in interface) took 5.032e-03 seconds
Iteration: 16, Objective: 0.2908
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:38 PM: Your problem has 419 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Finished problem compilation (took 2.947e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 419
  constraints   = 669
  nnz(P)        = 0
  nnz(A)        = 4686
  cones (total) = 1
    : Nonnegative = 1,  numel = 669

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9809e-01  +2.5185e+02  2.51e+02  9.45e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.4214e-01  +5.5287e+01  5.47e+01  4.24e-01  1.31e+01  3.88e-03  5.73e-01  5.87e-01  
  2  +5.0205e-01  +7.2378e+00  6.74e+00  1.11e-01  4.68e+00  1.96e-02  2.28e-01  9.90e-01  
  3  +4.8287e-01  +1.8309e+00  1.35e+00  1.79e-02  8.65e-01  7.21e-03  4.43e-02  8.22e-01  
  4  +4.3766e-01  +1.3713e+00  9.34e-01  6.94e-03  3.34e-01  7.04e-03  1.79e-02  6.84e-01  
  5  +4.0633e-01  +1.1192e+00  7.13e-01  4.54e-03  2.15e-01  4.90e-03  1.24e-02  3.79e-01  
  6  +3.6203e-01  +7.4808e-01  3.86e-01  2.41e-03  1.11e-01  1.27e-03  7.57e-03  5.92e-01  
  7  +3.2317e-01  +4.7689e-01  1.54e-01  9.12e-04  4.13e-02  3.53e-04  3.35e-03  6.50e-01  
  8  +3.0857e-01  +4.0313e-01  9.46e-02  5.28e-04  2.40e-02  1.68e-04  2.12e-03  6.00e-01  
  9  +2.9235e-01  +3.1453e-01  2.22e-02  1.19e-04  5.43e-03  3.21e-05  5.43e-04  7.90e-01  
 10  +2.8788e-01  +2.9116e-01  3.29e-03  1.76e-05  7.99e-04  2.09e-06  8.61e-05  9.90e-01  
 11  +2.8698e-01  +2.8726e-01  2.72e-04  1.45e-06  6.57e-05  1.52e-07  7.48e-06  9.45e-01  
 12  +2.8690e-01  +2.8690e-01  3.31e-06  1.77e-08  7.99e-07  1.81e-09  9.20e-08  9.89e-01  
 13  +2.8690e-01  +2.8690e-01  3.31e-08  1.77e-10  7.99e-09  1.81e-11  9.20e-10  9.90e-01  
 14  +2.8690e-01  +2.8690e-01  3.31e-10  1.77e-12  8.00e-11  1.81e-13  9.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.407ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:38 PM: Optimal value: 2.869e-01
(CVXPY) Aug 31 04:58:38 PM: Compilation took 2.947e-03 seconds
(CVXPY) Aug 31 04:58:38 PM: Solver (including time spent in interface) took 6.001e-03 seconds
Iteration: 17, Objective: 0.2869
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:38 PM: Your problem has 422 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Finished problem compilation (took 4.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 422
  constraints   = 672
  nnz(P)        = 0
  nnz(A)        = 4716
  cones (total) = 1
    : Nonnegative = 1,  numel = 672

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9805e-01  +2.5187e+02  2.51e+02  9.45e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.4132e-01  +5.5327e+01  5.48e+01  4.25e-01  1.31e+01  3.88e-03  5.74e-01  5.86e-01  
  2  +5.0107e-01  +7.2623e+00  6.76e+00  1.10e-01  4.66e+00  1.97e-02  2.28e-01  9.90e-01  
  3  +4.8124e-01  +1.8341e+00  1.35e+00  1.77e-02  8.52e-01  7.32e-03  4.38e-02  8.25e-01  
  4  +4.3765e-01  +1.3869e+00  9.49e-01  7.23e-03  3.47e-01  6.87e-03  1.87e-02  6.61e-01  
  5  +4.0512e-01  +1.1172e+00  7.12e-01  4.60e-03  2.17e-01  4.68e-03  1.26e-02  4.02e-01  
  6  +3.6050e-01  +7.3632e-01  3.76e-01  2.36e-03  1.08e-01  1.29e-03  7.41e-03  5.85e-01  
  7  +3.2049e-01  +4.6256e-01  1.42e-01  8.41e-04  3.80e-02  3.17e-04  3.12e-03  6.94e-01  
  8  +3.0593e-01  +3.8823e-01  8.23e-02  4.61e-04  2.10e-02  1.45e-04  1.87e-03  5.99e-01  
  9  +2.9128e-01  +3.0911e-01  1.78e-02  9.68e-05  4.40e-03  2.62e-05  4.38e-04  8.00e-01  
 10  +2.8772e-01  +2.9051e-01  2.79e-03  1.51e-05  6.86e-04  1.80e-06  7.29e-05  9.90e-01  
 11  +2.8697e-01  +2.8720e-01  2.32e-04  1.26e-06  5.71e-05  1.39e-07  6.27e-06  9.32e-01  
 12  +2.8690e-01  +2.8690e-01  2.58e-06  1.40e-08  6.34e-07  1.52e-09  7.01e-08  9.90e-01  
 13  +2.8690e-01  +2.8690e-01  2.58e-08  1.40e-10  6.34e-09  1.52e-11  7.01e-10  9.90e-01  
 14  +2.8690e-01  +2.8690e-01  2.58e-10  1.40e-12  6.35e-11  1.52e-13  7.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7901ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:38 PM: Optimal value: 2.869e-01
(CVXPY) Aug 31 04:58:38 PM: Compilation took 4.002e-03 seconds
(CVXPY) Aug 31 04:58:38 PM: Solver (including time spent in interface) took 5.995e-03 seconds
Iteration: 18, Objective: 0.2869
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:38 PM: Your problem has 432 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Finished problem compilation (took 2.923e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 432
  constraints   = 682
  nnz(P)        = 0
  nnz(A)        = 4772
  cones (total) = 1
    : Nonnegative = 1,  numel = 682

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9799e-01  +2.5187e+02  2.51e+02  9.45e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.3768e-01  +5.5374e+01  5.48e+01  4.25e-01  1.30e+01  3.89e-03  5.73e-01  5.86e-01  
  2  +4.9773e-01  +7.3619e+00  6.86e+00  1.09e-01  4.55e+00  2.00e-02  2.26e-01  9.90e-01  
  3  +4.7510e-01  +1.7156e+00  1.24e+00  1.50e-02  7.21e-01  7.49e-03  3.74e-02  8.51e-01  
  4  +4.2477e-01  +1.4436e+00  1.02e+00  7.05e-03  3.35e-01  7.35e-03  1.83e-02  6.67e-01  
  5  +3.7569e-01  +8.8011e-01  5.04e-01  3.45e-03  1.58e-01  5.58e-04  1.03e-02  7.13e-01  
  6  +3.2730e-01  +5.4489e-01  2.18e-01  1.34e-03  6.04e-02  1.92e-04  4.61e-03  6.54e-01  
  7  +3.0545e-01  +4.3283e-01  1.27e-01  7.32e-04  3.31e-02  1.10e-04  2.78e-03  5.56e-01  
  8  +2.8628e-01  +3.3092e-01  4.46e-02  2.42e-04  1.09e-02  3.62e-05  1.04e-03  6.97e-01  
  9  +2.7708e-01  +2.8382e-01  6.75e-03  3.59e-05  1.62e-03  4.68e-06  1.68e-04  9.49e-01  
 10  +2.7535e-01  +2.7618e-01  8.23e-04  4.35e-06  1.95e-04  5.07e-07  2.16e-05  9.29e-01  
 11  +2.7510e-01  +2.7512e-01  1.27e-05  6.72e-08  3.01e-06  7.05e-09  3.41e-07  9.85e-01  
 12  +2.7510e-01  +2.7510e-01  1.27e-07  6.72e-10  3.01e-08  7.05e-11  3.41e-09  9.90e-01  
 13  +2.7510e-01  +2.7510e-01  1.28e-09  6.73e-12  3.01e-10  7.06e-13  3.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1889ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:38 PM: Optimal value: 2.751e-01
(CVXPY) Aug 31 04:58:38 PM: Compilation took 2.923e-03 seconds
(CVXPY) Aug 31 04:58:38 PM: Solver (including time spent in interface) took 6.100e-03 seconds
Iteration: 19, Objective: 0.2751
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:38 PM: Your problem has 433 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:38 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:38 PM: Finished problem compilation (took 4.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 433
  constraints   = 683
  nnz(P)        = 0
  nnz(A)        = 4779
  cones (total) = 1
    : Nonnegative = 1,  numel = 683

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9799e-01  +2.5187e+02  2.51e+02  9.45e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.3762e-01  +5.5373e+01  5.48e+01  4.25e-01  1.29e+01  3.89e-03  5.73e-01  5.86e-01  
  2  +4.9762e-01  +7.3617e+00  6.86e+00  1.09e-01  4.55e+00  2.00e-02  2.25e-01  9.90e-01  
  3  +4.7485e-01  +1.7176e+00  1.24e+00  1.50e-02  7.20e-01  7.51e-03  3.74e-02  8.52e-01  
  4  +4.2362e-01  +1.4410e+00  1.02e+00  6.98e-03  3.32e-01  7.34e-03  1.82e-02  6.74e-01  
  5  +3.7413e-01  +8.7548e-01  5.01e-01  3.42e-03  1.57e-01  4.52e-04  1.02e-02  7.27e-01  
  6  +3.2643e-01  +5.4177e-01  2.15e-01  1.33e-03  5.98e-02  1.63e-04  4.58e-03  6.56e-01  
  7  +3.0445e-01  +4.2726e-01  1.23e-01  7.07e-04  3.19e-02  9.42e-05  2.69e-03  5.65e-01  
  8  +2.8639e-01  +3.3162e-01  4.52e-02  2.46e-04  1.11e-02  3.36e-05  1.05e-03  6.79e-01  
  9  +2.7717e-01  +2.8407e-01  6.90e-03  3.68e-05  1.66e-03  4.69e-06  1.72e-04  9.77e-01  
 10  +2.7535e-01  +2.7617e-01  8.19e-04  4.33e-06  1.94e-04  4.97e-07  2.15e-05  9.30e-01  
 11  +2.7510e-01  +2.7512e-01  1.28e-05  6.74e-08  3.02e-06  6.98e-09  3.42e-07  9.85e-01  
 12  +2.7510e-01  +2.7510e-01  1.28e-07  6.74e-10  3.02e-08  6.98e-11  3.42e-09  9.90e-01  
 13  +2.7510e-01  +2.7510e-01  1.28e-09  6.75e-12  3.02e-10  6.99e-13  3.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1876ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:38 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:38 PM: Optimal value: 2.751e-01
(CVXPY) Aug 31 04:58:38 PM: Compilation took 4.003e-03 seconds
(CVXPY) Aug 31 04:58:38 PM: Solver (including time spent in interface) took 7.006e-03 seconds
FULL MODEL:
  Accruacy: 0.688
  Our objective: 0.376

IF 
    (x2 = 1 AND x5 = 1 AND x1 = 0 AND x3 = 0)                                             <-- (term's our objective: 0.04399999999999997)
 OR (x1 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.044000000000000046)
 OR (x4 = 1 AND x5 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0 AND x7 = 0)                       <-- (term's our objective: 0.01600000000000002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.020000000000000025)
 OR (x3 = 1 AND x5 = 1 AND x0 = 0 AND x2 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.020000000000000025)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1)                       <-- (term's our objective: 0.028000000000000025)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.012000000000000014)
 OR (x2 = 1 AND x3 = 1 AND x7 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.01600000000000002)
 OR (x4 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0)                       <-- (term's our objective: 0.02800000000000003)
 OR (x4 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x3 = 0 AND x6 = 0)                       <-- (term's our objective: 0.016000000000000014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.02000000000000002)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x0 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.012000000000000014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x7 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.016000000000000014)
 OR (x2 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.016000000000000018)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x1 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.01200000000000001)
 OR (x0 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0)            <-- (term's our objective: 0.00800000000000001)
 OR (x1 = 1 AND x3 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.00800000000000001)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x0 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.012000000000000014)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x0 = 0 AND x2 = 0 AND x7 = 0)            <-- (term's our objective: 0.012000000000000014)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x1 = 0)            <-- (term's our objective: 0.008000000000000007)
 OR (x1 = 1 AND x2 = 1 AND x6 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.01200000000000001)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x4 = 0)            <-- (term's our objective: 0.016000000000000014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.016000000000000018)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.008000000000000007)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.00800000000000001)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.9592409133911133
Best over terms:
  Our final objective: 0.044000000000000046
    Its accruacy: 0.522
    Its hamming distance: 9
  Shortest hamming distance: 2
    Its our objective: 0.020000000000000025
  Highest accruacy: 0.522
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

