Command:
python test_script.py -s smallest_subclass -d 5 -n 500 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.068
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.21200000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:11 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +2.5071e+02  2.50e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9883e-01  +5.0505e+01  4.99e+01  3.44e-01  1.15e+01  3.99e-03  5.05e-01  6.45e-01  
  2  +5.4320e-01  +7.3075e+00  6.76e+00  1.16e-01  4.71e+00  1.01e-02  2.25e-01  8.08e-01  
  3  +5.0136e-01  +1.2767e+00  7.75e-01  2.31e-02  9.14e-01  4.85e-04  1.97e-01  5.21e-01  
  4  +5.0032e-01  +6.5768e-01  1.57e-01  4.76e-03  1.93e-01  9.68e-05  4.89e-02  7.87e-01  
  5  +4.9912e-01  +6.4160e-01  1.42e-01  3.31e-03  1.36e-01  1.99e-04  1.45e-02  8.12e-01  
  6  +4.8872e-01  +5.8406e-01  9.53e-02  4.90e-04  2.04e-02  9.12e-04  1.62e-03  8.99e-01  
  7  +4.7864e-01  +5.3201e-01  5.34e-02  2.44e-04  1.01e-02  3.80e-04  8.90e-04  5.40e-01  
  8  +4.6777e-01  +4.7988e-01  1.21e-02  4.94e-05  2.05e-03  5.03e-05  2.05e-04  8.20e-01  
  9  +4.6511e-01  +4.6797e-01  2.87e-03  1.15e-05  4.77e-04  3.00e-06  4.94e-05  9.90e-01  
 10  +4.6411e-01  +4.6415e-01  4.06e-05  1.62e-07  6.72e-06  4.09e-08  7.04e-07  9.86e-01  
 11  +4.6410e-01  +4.6410e-01  4.06e-07  1.62e-09  6.72e-08  4.09e-10  7.04e-09  9.90e-01  
 12  +4.6410e-01  +4.6410e-01  4.06e-09  1.62e-11  6.72e-10  4.09e-12  7.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.37ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:11 PM: Optimal value: 4.641e-01
(CVXPY) Aug 31 04:48:11 PM: Compilation took 5.002e-03 seconds
(CVXPY) Aug 31 04:48:11 PM: Solver (including time spent in interface) took 2.003e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:11 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Finished problem compilation (took 4.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2469
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9903e-01  +2.5130e+02  2.51e+02  9.34e-01  2.08e+01  1.00e+00  1.01e+00   ------   
  1  +5.9608e-01  +5.0752e+01  5.02e+01  3.49e-01  1.19e+01  3.98e-03  5.11e-01  6.43e-01  
  2  +5.4036e-01  +7.0135e+00  6.47e+00  1.11e-01  4.65e+00  1.06e-02  2.18e-01  8.36e-01  
  3  +5.0179e-01  +1.4320e+00  9.30e-01  2.81e-02  1.15e+00  1.05e-03  1.86e-01  5.42e-01  
  4  +4.9961e-01  +7.8381e-01  2.84e-01  8.51e-03  3.58e-01  4.85e-04  5.23e-02  7.79e-01  
  5  +4.8382e-01  +8.9512e-01  4.11e-01  3.04e-03  1.32e-01  2.99e-03  9.77e-03  9.07e-01  
  6  +4.7053e-01  +7.1406e-01  2.44e-01  1.45e-03  6.28e-02  1.72e-03  5.05e-03  5.27e-01  
  7  +4.6686e-01  +6.6031e-01  1.93e-01  1.08e-03  4.65e-02  9.39e-04  3.91e-03  4.55e-01  
  8  +4.5679e-01  +5.6225e-01  1.05e-01  5.45e-04  2.35e-02  1.49e-04  2.17e-03  8.32e-01  
  9  +4.4819e-01  +5.0032e-01  5.21e-02  2.68e-04  1.15e-02  3.56e-05  1.19e-03  9.90e-01  
 10  +4.3867e-01  +4.4887e-01  1.02e-02  5.09e-05  2.18e-03  5.53e-06  2.57e-04  8.33e-01  
 11  +4.3627e-01  +4.3653e-01  2.59e-04  1.28e-06  5.49e-05  1.15e-07  6.98e-06  9.89e-01  
 12  +4.3620e-01  +4.3620e-01  2.58e-06  1.28e-08  5.48e-07  1.14e-09  6.99e-08  9.90e-01  
 13  +4.3620e-01  +4.3620e-01  2.58e-08  1.28e-10  5.48e-09  1.14e-11  6.99e-10  9.90e-01  
 14  +4.3620e-01  +4.3620e-01  2.58e-10  1.28e-12  5.48e-11  1.14e-13  6.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7531ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:11 PM: Optimal value: 4.362e-01
(CVXPY) Aug 31 04:48:11 PM: Compilation took 4.012e-03 seconds
(CVXPY) Aug 31 04:48:11 PM: Solver (including time spent in interface) took 1.973e-03 seconds
Iteration: 2, Objective: 0.4362
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:11 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Finished problem compilation (took 3.050e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 2836
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9865e-01  +2.5131e+02  2.51e+02  9.35e-01  2.13e+01  1.00e+00  1.02e+00   ------   
  1  +5.9311e-01  +5.0958e+01  5.04e+01  3.54e-01  1.21e+01  3.97e-03  5.16e-01  6.40e-01  
  2  +5.3798e-01  +6.7734e+00  6.24e+00  1.07e-01  4.52e+00  1.10e-02  2.12e-01  8.63e-01  
  3  +5.0069e-01  +1.3586e+00  8.58e-01  2.62e-02  1.10e+00  1.24e-03  1.65e-01  7.03e-01  
  4  +4.9638e-01  +8.9935e-01  4.03e-01  1.00e-02  4.33e-01  1.29e-03  4.07e-02  8.34e-01  
  5  +4.8954e-01  +9.0911e-01  4.20e-01  5.84e-03  2.57e-01  2.19e-03  1.90e-02  6.71e-01  
  6  +4.7492e-01  +8.2130e-01  3.46e-01  2.58e-03  1.14e-01  3.02e-03  8.19e-03  6.41e-01  
  7  +4.6438e-01  +7.1836e-01  2.54e-01  1.65e-03  7.28e-02  3.40e-05  5.38e-03  9.21e-01  
  8  +4.4593e-01  +6.3254e-01  1.87e-01  9.68e-04  4.26e-02  9.26e-05  3.34e-03  7.25e-01  
  9  +4.2107e-01  +4.9669e-01  7.56e-02  3.55e-04  1.55e-02  3.31e-05  1.38e-03  6.21e-01  
 10  +4.0338e-01  +4.1225e-01  8.87e-03  3.90e-05  1.70e-03  6.49e-06  1.75e-04  9.88e-01  
 11  +4.0047e-01  +4.0066e-01  1.96e-04  8.48e-07  3.69e-05  1.22e-07  4.00e-06  9.79e-01  
 12  +4.0040e-01  +4.0040e-01  1.96e-06  8.48e-09  3.69e-07  1.22e-09  4.01e-08  9.90e-01  
 13  +4.0040e-01  +4.0040e-01  1.96e-08  8.48e-11  3.69e-09  1.22e-11  4.01e-10  9.90e-01  
 14  +4.0040e-01  +4.0040e-01  1.96e-10  8.48e-13  3.69e-11  1.22e-13  4.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8546ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:11 PM: Optimal value: 4.004e-01
(CVXPY) Aug 31 04:48:11 PM: Compilation took 3.050e-03 seconds
(CVXPY) Aug 31 04:48:11 PM: Solver (including time spent in interface) took 2.005e-03 seconds
Iteration: 3, Objective: 0.4004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:11 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Finished problem compilation (took 2.983e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 2949
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9862e-01  +2.5125e+02  2.51e+02  9.36e-01  2.13e+01  1.00e+00  1.02e+00   ------   
  1  +5.9189e-01  +5.1131e+01  5.05e+01  3.56e-01  1.20e+01  3.97e-03  5.18e-01  6.38e-01  
  2  +5.3724e-01  +6.7063e+00  6.17e+00  1.07e-01  4.47e+00  1.12e-02  2.11e-01  8.71e-01  
  3  +5.0004e-01  +1.2877e+00  7.88e-01  2.42e-02  1.01e+00  1.16e-03  1.57e-01  7.92e-01  
  4  +4.9409e-01  +1.1131e+00  6.19e-01  1.33e-02  5.75e-01  1.86e-03  4.90e-02  8.15e-01  
  5  +4.7630e-01  +9.5649e-01  4.80e-01  4.21e-03  1.86e-01  3.62e-03  1.36e-02  7.71e-01  
  6  +4.7387e-01  +9.1671e-01  4.43e-01  3.48e-03  1.54e-01  2.69e-03  1.12e-02  3.70e-01  
  7  +4.5029e-01  +6.8105e-01  2.31e-01  1.29e-03  5.66e-02  2.19e-04  4.37e-03  9.90e-01  
  8  +4.2932e-01  +5.6360e-01  1.34e-01  6.86e-04  3.00e-02  1.12e-04  2.58e-03  4.76e-01  
  9  +4.1019e-01  +4.6097e-01  5.08e-02  2.46e-04  1.07e-02  3.83e-05  1.04e-03  6.95e-01  
 10  +4.0770e-01  +4.4705e-01  3.94e-02  1.94e-04  8.41e-03  2.70e-05  8.75e-04  3.26e-01  
 11  +4.0757e-01  +4.4679e-01  3.92e-02  1.93e-04  8.37e-03  2.77e-05  8.59e-04  9.62e-02  
 12  +4.0545e-01  +4.3934e-01  3.39e-02  1.59e-04  6.92e-03  2.60e-05  7.03e-04  3.55e-01  
 13  +3.9718e-01  +3.9929e-01  2.10e-03  9.77e-06  4.24e-04  1.35e-06  4.70e-05  9.42e-01  
 14  +3.9661e-01  +3.9663e-01  2.15e-05  9.99e-08  4.34e-06  1.36e-08  4.85e-07  9.90e-01  
 15  +3.9660e-01  +3.9660e-01  2.15e-07  9.99e-10  4.33e-08  1.36e-10  4.85e-09  9.90e-01  
 16  +3.9660e-01  +3.9660e-01  2.15e-09  1.00e-11  4.34e-10  1.36e-12  4.86e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3079ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:11 PM: Optimal value: 3.966e-01
(CVXPY) Aug 31 04:48:11 PM: Compilation took 2.983e-03 seconds
(CVXPY) Aug 31 04:48:11 PM: Solver (including time spent in interface) took 2.994e-03 seconds
Iteration: 4, Objective: 0.3966
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:11 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Finished problem compilation (took 3.064e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 2982
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9861e-01  +2.5129e+02  2.51e+02  9.36e-01  2.13e+01  1.00e+00  1.02e+00   ------   
  1  +5.9139e-01  +5.1180e+01  5.06e+01  3.57e-01  1.20e+01  3.97e-03  5.19e-01  6.38e-01  
  2  +5.3677e-01  +6.6554e+00  6.12e+00  1.06e-01  4.43e+00  1.13e-02  2.09e-01  8.76e-01  
  3  +5.0016e-01  +1.3228e+00  8.23e-01  2.53e-02  1.06e+00  1.29e-03  1.56e-01  7.85e-01  
  4  +4.9505e-01  +1.0933e+00  5.98e-01  1.40e-02  6.03e-01  1.81e-03  5.38e-02  7.23e-01  
  5  +4.6717e-01  +8.7779e-01  4.11e-01  2.69e-03  1.19e-01  4.81e-03  8.60e-03  9.37e-01  
  6  +4.5472e-01  +7.3847e-01  2.84e-01  1.74e-03  7.64e-02  1.78e-03  5.91e-03  5.26e-01  
  7  +4.2766e-01  +5.6205e-01  1.34e-01  7.05e-04  3.08e-02  4.60e-04  2.72e-03  6.65e-01  
  8  +4.1092e-01  +4.6818e-01  5.73e-02  2.83e-04  1.23e-02  1.41e-04  1.22e-03  6.65e-01  
  9  +4.0443e-01  +4.3419e-01  2.98e-02  1.47e-04  6.36e-03  4.37e-05  6.73e-04  7.30e-01  
 10  +3.9839e-01  +4.0546e-01  7.07e-03  3.38e-05  1.46e-03  8.64e-06  1.65e-04  8.28e-01  
 11  +3.9663e-01  +3.9674e-01  1.10e-04  5.25e-07  2.28e-05  1.26e-07  2.63e-06  9.84e-01  
 12  +3.9660e-01  +3.9660e-01  1.10e-06  5.25e-09  2.28e-07  1.26e-09  2.63e-08  9.90e-01  
 13  +3.9660e-01  +3.9660e-01  1.10e-08  5.25e-11  2.28e-09  1.26e-11  2.63e-10  9.90e-01  
 14  +3.9660e-01  +3.9660e-01  1.10e-10  5.26e-13  2.28e-11  1.26e-13  2.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2254ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:11 PM: Optimal value: 3.966e-01
(CVXPY) Aug 31 04:48:11 PM: Compilation took 3.064e-03 seconds
(CVXPY) Aug 31 04:48:11 PM: Solver (including time spent in interface) took 3.030e-03 seconds
Iteration: 5, Objective: 0.3966
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:48:11 PM: Your problem has 290 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:48:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:48:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:48:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:48:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:48:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:48:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:48:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:48:11 PM: Finished problem compilation (took 2.989e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 290
  constraints   = 540
  nnz(P)        = 0
  nnz(A)        = 3005
  cones (total) = 1
    : Nonnegative = 1,  numel = 540

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9861e-01  +2.5129e+02  2.51e+02  9.36e-01  2.13e+01  1.00e+00  1.02e+00   ------   
  1  +5.9139e-01  +5.1170e+01  5.06e+01  3.57e-01  1.20e+01  3.97e-03  5.19e-01  6.38e-01  
  2  +5.3665e-01  +6.6410e+00  6.10e+00  1.06e-01  4.41e+00  1.13e-02  2.09e-01  8.76e-01  
  3  +5.0024e-01  +1.3354e+00  8.35e-01  2.56e-02  1.07e+00  1.32e-03  1.56e-01  7.78e-01  
  4  +4.9517e-01  +1.0974e+00  6.02e-01  1.41e-02  6.06e-01  1.83e-03  5.37e-02  7.26e-01  
  5  +4.6672e-01  +8.8289e-01  4.16e-01  2.64e-03  1.17e-01  4.90e-03  8.41e-03  9.54e-01  
  6  +4.5566e-01  +7.5399e-01  2.98e-01  1.82e-03  7.99e-02  2.09e-03  6.13e-03  4.54e-01  
  7  +4.2468e-01  +5.4301e-01  1.18e-01  6.09e-04  2.66e-02  3.43e-04  2.37e-03  7.37e-01  
  8  +4.1474e-01  +4.8927e-01  7.45e-02  3.70e-04  1.61e-02  1.94e-04  1.54e-03  4.34e-01  
  9  +4.0632e-01  +4.4533e-01  3.90e-02  1.91e-04  8.27e-03  6.89e-05  8.55e-04  6.72e-01  
 10  +3.9819e-01  +4.0456e-01  6.37e-03  3.04e-05  1.32e-03  9.57e-06  1.49e-04  8.46e-01  
 11  +3.9668e-01  +3.9697e-01  2.99e-04  1.42e-06  6.17e-05  4.28e-07  7.11e-06  9.54e-01  
 12  +3.9660e-01  +3.9660e-01  3.11e-06  1.48e-08  6.42e-07  4.42e-09  7.41e-08  9.90e-01  
 13  +3.9660e-01  +3.9660e-01  3.11e-08  1.48e-10  6.42e-09  4.43e-11  7.41e-10  9.90e-01  
 14  +3.9660e-01  +3.9660e-01  3.11e-10  1.48e-12  6.42e-11  4.43e-13  7.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8371ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:48:11 PM: Problem status: optimal
(CVXPY) Aug 31 04:48:11 PM: Optimal value: 3.966e-01
(CVXPY) Aug 31 04:48:11 PM: Compilation took 2.989e-03 seconds
(CVXPY) Aug 31 04:48:11 PM: Solver (including time spent in interface) took 3.072e-03 seconds
FULL MODEL:
  Accruacy: 0.582
  Our objective: 0.16399999999999998

IF 
    (x0 = 1 AND x4 = 1 AND x2 = 0)                       <-- (term's our objective: 0.03600000000000002)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.08399999999999999)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x3 = 0) <-- (term's our objective: 0.02800000000000004)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.016000000000000042)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.6866719722747803
Best over terms:
  Our final objective: 0.08399999999999999
    Its accruacy: 0.542
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.08399999999999999
  Highest accruacy: 0.542
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

