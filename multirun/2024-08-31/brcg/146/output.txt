Command:
python test_script.py -s smallest_subclass -d 4 -n 5000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.07400000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.084
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:59 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:59 PM: Finished problem compilation (took 7.955e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5007e+03  2.50e+03  9.78e-01  6.03e+01  1.00e+00  1.00e+00   ------   
  1  +6.0815e-01  +4.8463e+02  4.84e+02  3.36e-01  3.35e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5089e-01  +7.5542e+01  7.50e+01  1.37e-01  1.67e+01  8.23e-03  2.27e-01  7.26e-01  
  3  +5.1017e-01  +1.5863e+01  1.54e+01  9.66e-02  1.14e+01  1.71e-05  2.24e-01  7.32e-02  
  4  +5.0001e-01  +9.3578e-01  4.36e-01  4.14e-03  5.01e-01  5.83e-06  1.43e-01  8.72e-01  
  5  +5.0000e-01  +5.7377e-01  7.38e-02  6.99e-04  8.50e-02  1.10e-06  2.52e-02  8.33e-01  
  6  +4.9983e-01  +5.7810e-01  7.83e-02  6.80e-04  8.27e-02  4.05e-06  5.30e-03  8.61e-01  
  7  +4.9377e-01  +5.4680e-01  5.30e-02  3.94e-05  4.82e-03  1.03e-04  1.26e-04  9.78e-01  
  8  +4.8543e-01  +5.0144e-01  1.60e-02  7.78e-06  9.52e-04  4.02e-05  2.59e-05  8.42e-01  
  9  +4.8131e-01  +4.8339e-01  2.08e-03  9.31e-07  1.14e-04  3.32e-06  3.44e-06  8.96e-01  
 10  +4.8053e-01  +4.8062e-01  9.42e-05  3.79e-08  4.63e-06  8.55e-08  1.56e-07  9.75e-01  
 11  +4.8050e-01  +4.8050e-01  9.43e-07  3.79e-10  4.63e-08  8.57e-10  1.57e-09  9.90e-01  
 12  +4.8050e-01  +4.8050e-01  9.43e-09  3.79e-12  4.63e-10  8.57e-12  1.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.9611ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:59 PM: Optimal value: 4.805e-01
(CVXPY) Aug 31 04:46:59 PM: Compilation took 7.955e-03 seconds
(CVXPY) Aug 31 04:46:59 PM: Solver (including time spent in interface) took 1.700e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:59 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:59 PM: Finished problem compilation (took 7.106e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22859
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5016e+03  2.50e+03  9.78e-01  6.51e+01  1.00e+00  1.01e+00   ------   
  1  +6.0773e-01  +4.8627e+02  4.86e+02  3.38e-01  3.62e+01  4.09e-03  4.78e-01  6.65e-01  
  2  +5.5041e-01  +7.5166e+01  7.46e+01  1.38e-01  1.80e+01  8.40e-03  2.29e-01  7.31e-01  
  3  +5.0998e-01  +1.5696e+01  1.52e+01  9.65e-02  1.22e+01  1.73e-05  2.26e-01  7.83e-02  
  4  +5.0088e-01  +2.2585e+00  1.76e+00  1.67e-02  2.13e+00  7.19e-06  1.97e-01  2.95e-01  
  5  +5.0008e-01  +7.4300e-01  2.43e-01  2.31e-03  3.01e-01  1.70e-06  6.69e-02  7.73e-01  
  6  +5.0003e-01  +6.6577e-01  1.66e-01  1.57e-03  2.05e-01  1.49e-06  3.24e-02  6.15e-01  
  7  +4.9981e-01  +6.2413e-01  1.24e-01  1.01e-03  1.31e-01  4.19e-06  5.91e-03  8.63e-01  
  8  +4.9499e-01  +5.8632e-01  9.13e-02  7.85e-05  1.03e-02  6.84e-05  2.41e-04  9.60e-01  
  9  +4.9509e-01  +5.9299e-01  9.79e-02  6.24e-05  8.22e-03  7.22e-05  1.86e-04  4.37e-01  
 10  +4.9510e-01  +5.9060e-01  9.55e-02  5.74e-05  7.56e-03  4.71e-05  1.70e-04  4.07e-01  
 11  +4.9047e-01  +5.6389e-01  7.34e-02  3.51e-05  4.63e-03  1.47e-05  1.04e-04  8.56e-01  
 12  +4.8743e-01  +5.4840e-01  6.10e-02  2.84e-05  3.74e-03  7.41e-06  8.38e-05  6.40e-01  
 13  +4.8758e-01  +5.5043e-01  6.28e-02  2.64e-05  3.47e-03  7.73e-06  7.71e-05  3.54e-01  
 14  +4.8648e-01  +5.4742e-01  6.09e-02  2.33e-05  3.07e-03  7.48e-06  6.80e-05  4.68e-01  
 15  +4.7857e-01  +5.1551e-01  3.69e-02  1.31e-05  1.72e-03  4.05e-06  3.87e-05  9.32e-01  
 16  +4.6878e-01  +4.8129e-01  1.25e-02  4.02e-06  5.28e-04  1.50e-06  1.21e-05  9.48e-01  
 17  +4.6697e-01  +4.7553e-01  8.56e-03  2.65e-06  3.48e-04  1.05e-06  7.97e-06  3.59e-01  
 18  +4.6438e-01  +4.6704e-01  2.65e-03  7.91e-07  1.04e-04  4.52e-07  2.39e-06  9.90e-01  
 19  +4.6312e-01  +4.6317e-01  4.75e-05  1.41e-08  1.86e-06  8.01e-09  4.28e-08  9.90e-01  
 20  +4.6310e-01  +4.6310e-01  4.75e-07  1.41e-10  1.86e-08  8.01e-11  4.28e-10  9.90e-01  
 21  +4.6310e-01  +4.6310e-01  4.75e-09  1.41e-12  1.86e-10  8.04e-13  4.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.1315ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:59 PM: Optimal value: 4.631e-01
(CVXPY) Aug 31 04:46:59 PM: Compilation took 7.106e-03 seconds
(CVXPY) Aug 31 04:46:59 PM: Solver (including time spent in interface) took 3.297e-02 seconds
Iteration: 2, Objective: 0.4631
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:59 PM: Your problem has 2522 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:59 PM: Finished problem compilation (took 7.071e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2522
  constraints   = 5022
  nnz(P)        = 0
  nnz(A)        = 23505
  cones (total) = 1
    : Nonnegative = 1,  numel = 5022

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5013e+03  2.50e+03  9.78e-01  6.54e+01  1.00e+00  1.00e+00   ------   
  1  +6.0720e-01  +4.8688e+02  4.86e+02  3.39e-01  3.64e+01  4.09e-03  4.77e-01  6.65e-01  
  2  +5.5018e-01  +7.4927e+01  7.44e+01  1.37e-01  1.80e+01  8.44e-03  2.28e-01  7.34e-01  
  3  +5.1003e-01  +1.5785e+01  1.53e+01  9.66e-02  1.23e+01  1.76e-05  2.25e-01  7.88e-02  
  4  +5.0072e-01  +2.0143e+00  1.51e+00  1.44e-02  1.85e+00  7.06e-06  1.91e-01  3.45e-01  
  5  +5.0011e-01  +7.8691e-01  2.87e-01  2.72e-03  3.57e-01  1.79e-06  7.34e-02  6.93e-01  
  6  +5.0002e-01  +6.4936e-01  1.49e-01  1.41e-03  1.85e-01  1.45e-06  2.54e-02  7.70e-01  
  7  +4.9981e-01  +6.8041e-01  1.81e-01  1.37e-03  1.80e-01  4.94e-06  7.35e-03  7.91e-01  
  8  +4.9817e-01  +6.5696e-01  1.59e-01  3.19e-04  4.22e-02  2.64e-05  1.07e-03  8.70e-01  
  9  +4.9792e-01  +6.5122e-01  1.53e-01  2.71e-04  3.59e-02  2.67e-05  8.90e-04  2.41e-01  
 10  +4.9789e-01  +6.4160e-01  1.44e-01  2.25e-04  2.98e-02  2.20e-05  7.28e-04  3.93e-01  
 11  +4.9608e-01  +6.2588e-01  1.30e-01  1.33e-04  1.76e-02  2.97e-05  4.19e-04  4.50e-01  
 12  +4.9617e-01  +6.1395e-01  1.18e-01  9.75e-05  1.29e-02  1.34e-05  3.00e-04  8.31e-01  
 13  +4.9570e-01  +6.0594e-01  1.10e-01  9.32e-05  1.24e-02  1.04e-05  2.91e-04  2.38e-01  
 14  +4.9260e-01  +5.8967e-01  9.71e-02  5.52e-05  7.31e-03  8.73e-06  1.69e-04  9.90e-01  
 15  +4.8884e-01  +5.7061e-01  8.18e-02  4.29e-05  5.68e-03  7.34e-06  1.31e-04  3.60e-01  
 16  +4.8342e-01  +5.4704e-01  6.36e-02  2.58e-05  3.42e-03  6.79e-06  7.81e-05  5.37e-01  
 17  +4.7911e-01  +5.3156e-01  5.25e-02  2.39e-05  3.16e-03  4.41e-06  7.79e-05  5.77e-02  
 18  +4.6730e-01  +4.8388e-01  1.66e-02  5.62e-06  7.43e-04  2.34e-06  1.78e-05  8.97e-01  
 19  +4.6244e-01  +4.6896e-01  6.52e-03  2.11e-06  2.79e-04  9.57e-07  6.77e-06  6.57e-01  
 20  +4.6166e-01  +4.6678e-01  5.13e-03  1.71e-06  2.26e-04  7.06e-07  5.75e-06  7.58e-01  
 21  +4.6101e-01  +4.6469e-01  3.68e-03  1.22e-06  1.62e-04  5.25e-07  4.07e-06  4.67e-01  
 22  +4.6050e-01  +4.6373e-01  3.23e-03  1.03e-06  1.36e-04  4.64e-07  3.34e-06  6.04e-01  
 23  +4.5912e-01  +4.5916e-01  3.87e-05  1.24e-08  1.63e-06  5.47e-09  4.04e-08  9.88e-01  
 24  +4.5910e-01  +4.5910e-01  3.87e-07  1.24e-10  1.64e-08  5.47e-11  4.04e-10  9.90e-01  
 25  +4.5910e-01  +4.5910e-01  3.87e-09  1.24e-12  1.64e-10  5.48e-13  4.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.6781ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:59 PM: Optimal value: 4.591e-01
(CVXPY) Aug 31 04:46:59 PM: Compilation took 7.071e-03 seconds
(CVXPY) Aug 31 04:46:59 PM: Solver (including time spent in interface) took 3.601e-02 seconds
Iteration: 3, Objective: 0.4591
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:59 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:59 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:59 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:59 PM: Finished problem compilation (took 6.983e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 23828
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5011e+03  2.50e+03  9.78e-01  6.55e+01  1.00e+00  1.00e+00   ------   
  1  +6.0721e-01  +4.8694e+02  4.86e+02  3.39e-01  3.65e+01  4.09e-03  4.77e-01  6.65e-01  
  2  +5.5010e-01  +7.4843e+01  7.43e+01  1.37e-01  1.81e+01  8.45e-03  2.28e-01  7.34e-01  
  3  +5.1001e-01  +1.5766e+01  1.53e+01  9.65e-02  1.23e+01  1.76e-05  2.25e-01  7.91e-02  
  4  +5.0065e-01  +1.9093e+00  1.41e+00  1.34e-02  1.73e+00  6.99e-06  1.89e-01  3.70e-01  
  5  +5.0010e-01  +7.6031e-01  2.60e-01  2.47e-03  3.25e-01  1.66e-06  6.74e-02  7.11e-01  
  6  +5.0004e-01  +6.8750e-01  1.87e-01  1.77e-03  2.33e-01  1.68e-06  3.08e-02  6.61e-01  
  7  +4.9951e-01  +7.4276e-01  2.43e-01  1.15e-03  1.53e-01  1.04e-05  4.41e-03  9.88e-01  
  8  +4.9769e-01  +7.0625e-01  2.09e-01  3.42e-04  4.54e-02  3.06e-05  1.12e-03  7.57e-01  
  9  +4.9660e-01  +6.6307e-01  1.66e-01  1.94e-04  2.58e-02  2.79e-05  6.17e-04  6.25e-01  
 10  +4.9407e-01  +6.3569e-01  1.42e-01  1.16e-04  1.53e-02  3.10e-05  3.61e-04  4.81e-01  
 11  +4.9318e-01  +6.1683e-01  1.24e-01  8.19e-05  1.09e-02  2.18e-05  2.50e-04  6.18e-01  
 12  +4.9135e-01  +6.0716e-01  1.16e-01  6.37e-05  8.46e-03  2.23e-05  1.95e-04  2.86e-01  
 13  +4.9109e-01  +6.0173e-01  1.11e-01  6.08e-05  8.07e-03  1.79e-05  1.86e-04  2.42e-01  
 14  +4.8770e-01  +5.7721e-01  8.95e-02  4.65e-05  6.17e-03  6.55e-06  1.45e-04  8.65e-01  
 15  +4.7791e-01  +5.3561e-01  5.77e-02  2.37e-05  3.15e-03  4.96e-06  7.54e-05  6.35e-01  
 16  +4.6206e-01  +4.7095e-01  8.88e-03  3.28e-06  4.35e-04  4.64e-07  1.11e-05  9.04e-01  
 17  +4.6182e-01  +4.7023e-01  8.41e-03  2.99e-06  3.96e-04  4.87e-07  1.00e-05  1.40e-01  
 18  +4.6151e-01  +4.6904e-01  7.54e-03  2.80e-06  3.71e-04  4.34e-07  9.93e-06  9.17e-02  
 19  +4.6038e-01  +4.6475e-01  4.37e-03  1.61e-06  2.14e-04  3.00e-07  5.81e-06  5.12e-01  
 20  +4.6031e-01  +4.6508e-01  4.78e-03  1.68e-06  2.22e-04  3.71e-07  5.76e-06  6.93e-02  
 21  +4.5849e-01  +4.5870e-01  2.03e-04  7.10e-08  9.41e-06  2.03e-08  2.52e-07  9.86e-01  
 22  +4.5840e-01  +4.5840e-01  2.06e-06  7.19e-10  9.52e-08  2.03e-10  2.57e-09  9.90e-01  
 23  +4.5840e-01  +4.5840e-01  2.06e-08  7.19e-12  9.52e-10  2.03e-12  2.57e-11  9.90e-01  
 24  +4.5840e-01  +4.5840e-01  2.06e-10  7.19e-14  9.52e-12  2.04e-14  2.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.614ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:59 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:59 PM: Optimal value: 4.584e-01
(CVXPY) Aug 31 04:46:59 PM: Compilation took 6.983e-03 seconds
(CVXPY) Aug 31 04:46:59 PM: Solver (including time spent in interface) took 3.608e-02 seconds
FULL MODEL:
  Accruacy: 0.542
  Our objective: 0.08399999999999996

IF 
    (x0 = 1 AND x2 = 1 AND x3 = 0)            <-- (term's our objective: 0.001600000000000018)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.07400000000000004)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x2 = 0) <-- (term's our objective: 0.004400000000000029)
 OR (x2 = 1 AND x3 = 1 AND x0 = 0 AND x1 = 0) <-- (term's our objective: 0.00399999999999999)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4844214916229248
Best over terms:
  Our final objective: 0.07400000000000004
    Its accruacy: 0.537
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.07400000000000004
  Highest accruacy: 0.537
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

