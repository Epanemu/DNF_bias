Command:
python test_script.py -s smallest_subclass -d 7 -n 500 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.008
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 7.

Computed total variation: 0.372
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:52 PM: Your problem has 265 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:52 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 265
  constraints   = 515
  nnz(P)        = 0
  nnz(A)        = 2515
  cones (total) = 1
    : Nonnegative = 1,  numel = 515

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9968e-01  +2.5081e+02  2.50e+02  9.36e-01  2.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.8744e-01  +5.2947e+01  5.24e+01  3.81e-01  1.38e+01  3.86e-03  5.48e-01  6.11e-01  
  2  +5.3503e-01  +6.7034e+00  6.17e+00  1.21e-01  5.51e+00  1.35e-02  2.43e-01  8.99e-01  
  3  +5.0220e-01  +1.4001e+00  8.98e-01  2.72e-02  1.21e+00  2.42e-05  1.97e-01  6.54e-01  
  4  +5.0030e-01  +6.4709e-01  1.47e-01  4.52e-03  2.08e-01  5.55e-06  4.23e-02  8.07e-01  
  5  +4.9777e-01  +6.4892e-01  1.51e-01  2.56e-03  1.19e-01  2.21e-05  9.10e-03  8.44e-01  
  6  +4.8710e-01  +5.7223e-01  8.51e-02  5.05e-04  2.37e-02  4.99e-05  1.63e-03  8.22e-01  
  7  +4.7681e-01  +5.1335e-01  3.65e-02  1.89e-04  8.85e-03  2.40e-05  6.59e-04  7.16e-01  
  8  +4.6923e-01  +4.7896e-01  9.73e-03  4.37e-05  2.04e-03  6.54e-06  1.75e-04  8.48e-01  
  9  +4.6644e-01  +4.6745e-01  1.01e-03  4.15e-06  1.94e-04  8.70e-07  1.82e-05  9.90e-01  
 10  +4.6610e-01  +4.6611e-01  1.03e-05  4.19e-08  1.96e-06  8.83e-09  1.86e-07  9.90e-01  
 11  +4.6610e-01  +4.6610e-01  1.03e-07  4.19e-10  1.96e-08  8.83e-11  1.86e-09  9.90e-01  
 12  +4.6610e-01  +4.6610e-01  1.03e-09  4.19e-12  1.96e-10  8.85e-13  1.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6414ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:52 PM: Optimal value: 4.661e-01
(CVXPY) Aug 31 04:53:52 PM: Compilation took 4.000e-03 seconds
(CVXPY) Aug 31 04:53:52 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4661
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:52 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:52 PM: Finished problem compilation (took 3.918e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 2910
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +2.5107e+02  2.51e+02  9.37e-01  2.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.8482e-01  +5.3102e+01  5.25e+01  3.85e-01  1.40e+01  3.85e-03  5.52e-01  6.10e-01  
  2  +5.3250e-01  +6.4466e+00  5.91e+00  1.17e-01  5.38e+00  1.40e-02  2.35e-01  9.28e-01  
  3  +5.0119e-01  +1.3027e+00  8.02e-01  2.46e-02  1.13e+00  2.60e-05  1.71e-01  8.42e-01  
  4  +4.9922e-01  +7.6528e-01  2.66e-01  7.95e-03  3.73e-01  1.67e-05  4.73e-02  7.61e-01  
  5  +4.8193e-01  +7.6699e-01  2.85e-01  2.10e-03  1.01e-01  1.11e-04  6.57e-03  9.44e-01  
  6  +4.6816e-01  +6.2132e-01  1.53e-01  9.20e-04  4.43e-02  6.99e-05  3.01e-03  5.92e-01  
  7  +4.6546e-01  +5.9181e-01  1.26e-01  7.21e-04  3.47e-02  6.70e-05  2.37e-03  3.95e-01  
  8  +4.5588e-01  +5.2846e-01  7.26e-02  3.46e-04  1.67e-02  4.74e-05  1.15e-03  6.03e-01  
  9  +4.5172e-01  +5.0929e-01  5.76e-02  2.31e-04  1.11e-02  4.49e-05  7.65e-04  4.03e-01  
 10  +4.4913e-01  +4.8761e-01  3.85e-02  1.68e-04  8.15e-03  3.72e-05  5.89e-04  9.90e-01  
 11  +4.3980e-01  +4.5329e-01  1.35e-02  4.80e-05  2.32e-03  1.71e-05  1.70e-04  8.07e-01  
 12  +4.3504e-01  +4.3677e-01  1.73e-03  6.05e-06  2.93e-04  2.15e-06  2.21e-05  9.82e-01  
 13  +4.3431e-01  +4.3433e-01  1.93e-05  6.76e-08  3.27e-06  2.37e-08  2.48e-07  9.89e-01  
 14  +4.3430e-01  +4.3430e-01  1.93e-07  6.76e-10  3.27e-08  2.37e-10  2.48e-09  9.90e-01  
 15  +4.3430e-01  +4.3430e-01  1.93e-09  6.76e-12  3.27e-10  2.37e-12  2.48e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2525ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:52 PM: Optimal value: 4.343e-01
(CVXPY) Aug 31 04:53:52 PM: Compilation took 3.918e-03 seconds
(CVXPY) Aug 31 04:53:52 PM: Solver (including time spent in interface) took 3.363e-03 seconds
Iteration: 2, Objective: 0.4343
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:52 PM: Your problem has 285 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:52 PM: Finished problem compilation (took 4.023e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 285
  constraints   = 535
  nnz(P)        = 0
  nnz(A)        = 3231
  cones (total) = 1
    : Nonnegative = 1,  numel = 535

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +2.5110e+02  2.51e+02  9.37e-01  2.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.8308e-01  +5.3216e+01  5.26e+01  3.89e-01  1.41e+01  3.85e-03  5.53e-01  6.08e-01  
  2  +5.3113e-01  +6.3105e+00  5.78e+00  1.15e-01  5.27e+00  1.42e-02  2.31e-01  9.44e-01  
  3  +5.0088e-01  +1.2766e+00  7.76e-01  2.42e-02  1.12e+00  5.42e-05  1.58e-01  9.22e-01  
  4  +4.9823e-01  +8.1184e-01  3.14e-01  8.88e-03  4.21e-01  4.51e-05  4.28e-02  7.68e-01  
  5  +4.7324e-01  +7.3566e-01  2.62e-01  1.61e-03  7.89e-02  2.60e-04  4.92e-03  9.38e-01  
  6  +4.5667e-01  +6.3127e-01  1.75e-01  8.77e-04  4.28e-02  1.76e-04  2.77e-03  5.36e-01  
  7  +4.3851e-01  +5.2146e-01  8.30e-02  3.83e-04  1.87e-02  6.50e-05  1.29e-03  9.90e-01  
  8  +4.2590e-01  +4.6555e-01  3.97e-02  1.70e-04  8.28e-03  3.13e-05  5.91e-04  5.64e-01  
  9  +4.1571e-01  +4.2349e-01  7.78e-03  3.09e-05  1.52e-03  6.85e-06  1.12e-04  8.49e-01  
 10  +4.1305e-01  +4.1443e-01  1.38e-03  5.19e-06  2.55e-04  1.34e-06  1.94e-05  9.01e-01  
 11  +4.1251e-01  +4.1252e-01  1.71e-05  6.36e-08  3.13e-06  1.65e-08  2.40e-07  9.88e-01  
 12  +4.1250e-01  +4.1250e-01  1.71e-07  6.36e-10  3.13e-08  1.65e-10  2.40e-09  9.90e-01  
 13  +4.1250e-01  +4.1250e-01  1.71e-09  6.36e-12  3.13e-10  1.65e-12  2.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4504ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:52 PM: Optimal value: 4.125e-01
(CVXPY) Aug 31 04:53:52 PM: Compilation took 4.023e-03 seconds
(CVXPY) Aug 31 04:53:52 PM: Solver (including time spent in interface) took 3.004e-03 seconds
Iteration: 3, Objective: 0.4125
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:52 PM: Your problem has 295 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:52 PM: Finished problem compilation (took 3.124e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 295
  constraints   = 545
  nnz(P)        = 0
  nnz(A)        = 3392
  cones (total) = 1
    : Nonnegative = 1,  numel = 545

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9901e-01  +2.5123e+02  2.51e+02  9.38e-01  2.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.7938e-01  +5.3363e+01  5.28e+01  3.92e-01  1.40e+01  3.85e-03  5.56e-01  6.07e-01  
  2  +5.2839e-01  +6.0360e+00  5.51e+00  1.08e-01  4.97e+00  1.48e-02  2.20e-01  9.77e-01  
  3  +5.0065e-01  +1.3512e+00  8.51e-01  2.67e-02  1.23e+00  7.61e-04  1.33e-01  9.84e-01  
  4  +4.8937e-01  +9.9078e-01  5.01e-01  7.64e-03  3.68e-01  1.56e-03  2.40e-02  8.81e-01  
  5  +4.6815e-01  +7.7587e-01  3.08e-01  2.38e-03  1.15e-01  1.94e-03  7.38e-03  7.14e-01  
  6  +4.6361e-01  +7.7081e-01  3.07e-01  1.94e-03  9.43e-02  2.05e-03  5.95e-03  2.85e-01  
  7  +4.5861e-01  +7.2972e-01  2.71e-01  1.82e-03  8.77e-02  1.14e-03  5.73e-03  2.67e-01  
  8  +4.3073e-01  +5.8303e-01  1.52e-01  7.35e-04  3.53e-02  6.23e-04  2.45e-03  6.80e-01  
  9  +4.0948e-01  +4.6987e-01  6.04e-02  2.73e-04  1.31e-02  2.08e-04  1.00e-03  6.37e-01  
 10  +4.0065e-01  +4.2800e-01  2.74e-02  1.19e-04  5.69e-03  3.75e-05  4.61e-04  9.27e-01  
 11  +3.9340e-01  +3.9607e-01  2.67e-03  1.15e-05  5.47e-04  3.37e-06  4.65e-05  9.04e-01  
 12  +3.9261e-01  +3.9264e-01  2.83e-05  1.21e-07  5.79e-06  3.52e-08  4.96e-07  9.89e-01  
 13  +3.9260e-01  +3.9260e-01  2.83e-07  1.21e-09  5.79e-08  3.52e-10  4.96e-09  9.90e-01  
 14  +3.9260e-01  +3.9260e-01  2.83e-09  1.21e-11  5.79e-10  3.52e-12  4.96e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.0869ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:52 PM: Optimal value: 3.926e-01
(CVXPY) Aug 31 04:53:52 PM: Compilation took 3.124e-03 seconds
(CVXPY) Aug 31 04:53:52 PM: Solver (including time spent in interface) took 3.995e-03 seconds
Iteration: 4, Objective: 0.3926
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:52 PM: Your problem has 305 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:52 PM: Finished problem compilation (took 3.129e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 305
  constraints   = 555
  nnz(P)        = 0
  nnz(A)        = 3576
  cones (total) = 1
    : Nonnegative = 1,  numel = 555

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +2.5129e+02  2.51e+02  9.39e-01  2.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.7748e-01  +5.3369e+01  5.28e+01  3.94e-01  1.38e+01  3.86e-03  5.55e-01  6.07e-01  
  2  +5.2694e-01  +5.9080e+00  5.38e+00  1.05e-01  4.79e+00  1.49e-02  2.14e-01  9.90e-01  
  3  +5.0087e-01  +1.3851e+00  8.84e-01  2.77e-02  1.28e+00  1.02e-03  1.15e-01  9.90e-01  
  4  +4.8238e-01  +1.0571e+00  5.75e-01  5.71e-03  2.78e-01  2.98e-03  1.66e-02  9.16e-01  
  5  +4.6608e-01  +9.4369e-01  4.78e-01  3.25e-03  1.58e-01  2.89e-03  9.61e-03  5.10e-01  
  6  +4.4411e-01  +7.7321e-01  3.29e-01  1.76e-03  8.50e-02  1.52e-03  5.46e-03  6.16e-01  
  7  +4.0936e-01  +5.3719e-01  1.28e-01  6.27e-04  2.99e-02  3.64e-05  2.20e-03  8.84e-01  
  8  +3.8998e-01  +4.4089e-01  5.09e-02  2.35e-04  1.12e-02  1.80e-05  8.94e-04  6.47e-01  
  9  +3.8044e-01  +3.9864e-01  1.82e-02  8.04e-05  3.84e-03  9.66e-06  3.29e-04  7.49e-01  
 10  +3.7512e-01  +3.7604e-01  9.16e-04  3.95e-06  1.89e-04  7.18e-07  1.72e-05  9.90e-01  
 11  +3.7481e-01  +3.7483e-01  2.03e-05  8.75e-08  4.19e-06  1.43e-08  3.87e-07  9.81e-01  
 12  +3.7480e-01  +3.7480e-01  2.03e-07  8.75e-10  4.18e-08  1.43e-10  3.88e-09  9.90e-01  
 13  +3.7480e-01  +3.7480e-01  2.03e-09  8.75e-12  4.18e-10  1.43e-12  3.88e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8894ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:52 PM: Optimal value: 3.748e-01
(CVXPY) Aug 31 04:53:52 PM: Compilation took 3.129e-03 seconds
(CVXPY) Aug 31 04:53:52 PM: Solver (including time spent in interface) took 2.955e-03 seconds
Iteration: 5, Objective: 0.3748
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 315 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 3.786e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 315
  constraints   = 565
  nnz(P)        = 0
  nnz(A)        = 3724
  cones (total) = 1
    : Nonnegative = 1,  numel = 565

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9897e-01  +2.5134e+02  2.51e+02  9.39e-01  2.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.7619e-01  +5.3465e+01  5.29e+01  3.97e-01  1.37e+01  3.86e-03  5.57e-01  6.06e-01  
  2  +5.2603e-01  +5.9486e+00  5.42e+00  1.06e-01  4.74e+00  1.51e-02  2.15e-01  9.90e-01  
  3  +5.0175e-01  +1.3502e+00  8.48e-01  2.66e-02  1.24e+00  1.05e-03  9.35e-02  9.77e-01  
  4  +4.8888e-01  +1.4103e+00  9.21e-01  9.59e-03  4.67e-01  2.97e-03  2.65e-02  8.12e-01  
  5  +4.6216e-01  +1.0348e+00  5.73e-01  3.57e-03  1.74e-01  2.75e-03  1.03e-02  6.40e-01  
  6  +4.4218e-01  +8.9854e-01  4.56e-01  2.28e-03  1.10e-01  2.11e-03  6.83e-03  4.39e-01  
  7  +4.0853e-01  +6.1007e-01  2.02e-01  1.02e-03  4.87e-02  1.81e-05  3.54e-03  8.52e-01  
  8  +3.7914e-01  +4.5019e-01  7.11e-02  3.36e-04  1.59e-02  1.17e-05  1.32e-03  6.66e-01  
  9  +3.6752e-01  +3.9784e-01  3.03e-02  1.36e-04  6.40e-03  1.24e-05  5.75e-04  7.12e-01  
 10  +3.5973e-01  +3.6193e-01  2.20e-03  9.75e-06  4.60e-04  1.75e-06  4.39e-05  9.90e-01  
 11  +3.5901e-01  +3.5903e-01  2.27e-05  1.01e-07  4.74e-06  1.79e-08  4.56e-07  9.90e-01  
 12  +3.5900e-01  +3.5900e-01  2.27e-07  1.01e-09  4.74e-08  1.79e-10  4.56e-09  9.90e-01  
 13  +3.5900e-01  +3.5900e-01  2.27e-09  1.01e-11  4.74e-10  1.79e-12  4.56e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9198ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.590e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 3.786e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 4.532e-03 seconds
Iteration: 6, Objective: 0.3590
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 325 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 3.097e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 325
  constraints   = 575
  nnz(P)        = 0
  nnz(A)        = 3835
  cones (total) = 1
    : Nonnegative = 1,  numel = 575

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9893e-01  +2.5134e+02  2.51e+02  9.40e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.7496e-01  +5.3508e+01  5.29e+01  3.99e-01  1.35e+01  3.86e-03  5.57e-01  6.06e-01  
  2  +5.2529e-01  +5.9920e+00  5.47e+00  1.06e-01  4.67e+00  1.52e-02  2.15e-01  9.90e-01  
  3  +5.0215e-01  +1.2492e+00  7.47e-01  2.29e-02  1.08e+00  9.76e-04  7.46e-02  9.90e-01  
  4  +4.9201e-01  +1.3631e+00  8.71e-01  9.26e-03  4.52e-01  2.71e-03  2.49e-02  7.51e-01  
  5  +4.6861e-01  +1.1071e+00  6.38e-01  3.93e-03  1.92e-01  3.05e-03  1.09e-02  5.94e-01  
  6  +4.4210e-01  +8.8388e-01  4.42e-01  2.21e-03  1.07e-01  1.78e-03  6.52e-03  5.27e-01  
  7  +4.0474e-01  +6.0706e-01  2.02e-01  1.00e-03  4.75e-02  3.66e-04  3.37e-03  6.64e-01  
  8  +3.7504e-01  +4.3993e-01  6.49e-02  3.06e-04  1.43e-02  9.20e-05  1.17e-03  6.89e-01  
  9  +3.6484e-01  +3.9174e-01  2.69e-02  1.22e-04  5.70e-03  3.59e-05  4.93e-04  6.50e-01  
 10  +3.5842e-01  +3.6303e-01  4.61e-03  2.03e-05  9.49e-04  5.59e-06  8.66e-05  8.66e-01  
 11  +3.5715e-01  +3.5760e-01  4.56e-04  1.99e-06  9.32e-05  5.16e-07  8.64e-06  9.24e-01  
 12  +3.5700e-01  +3.5701e-01  4.87e-06  2.13e-08  9.94e-07  5.43e-09  9.24e-08  9.90e-01  
 13  +3.5700e-01  +3.5700e-01  4.87e-08  2.13e-10  9.95e-09  5.44e-11  9.25e-10  9.90e-01  
 14  +3.5700e-01  +3.5700e-01  4.87e-10  2.13e-12  9.95e-11  5.44e-13  9.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.5629ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.570e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 3.097e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 3.348e-03 seconds
Iteration: 7, Objective: 0.3570
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 335 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 4.027e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 335
  constraints   = 585
  nnz(P)        = 0
  nnz(A)        = 3943
  cones (total) = 1
    : Nonnegative = 1,  numel = 585

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9873e-01  +2.5135e+02  2.51e+02  9.40e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.7152e-01  +5.3792e+01  5.32e+01  4.04e-01  1.35e+01  3.85e-03  5.62e-01  6.02e-01  
  2  +5.2342e-01  +6.1082e+00  5.58e+00  1.07e-01  4.71e+00  1.57e-02  2.19e-01  9.90e-01  
  3  +5.0336e-01  +1.2434e+00  7.40e-01  2.05e-02  9.75e-01  1.48e-03  5.98e-02  9.09e-01  
  4  +4.9740e-01  +1.3063e+00  8.09e-01  9.81e-03  4.78e-01  3.17e-03  2.58e-02  6.38e-01  
  5  +4.8008e-01  +1.1987e+00  7.19e-01  4.93e-03  2.40e-01  4.05e-03  1.32e-02  5.80e-01  
  6  +4.5893e-01  +1.0364e+00  5.77e-01  3.21e-03  1.55e-01  3.11e-03  8.95e-03  4.22e-01  
  7  +4.1431e-01  +6.9074e-01  2.76e-01  1.49e-03  7.03e-02  3.46e-04  4.82e-03  6.75e-01  
  8  +3.7541e-01  +4.7857e-01  1.03e-01  5.16e-04  2.40e-02  9.15e-05  1.95e-03  6.61e-01  
  9  +3.5578e-01  +3.8495e-01  2.92e-02  1.41e-04  6.49e-03  2.41e-05  5.93e-04  7.73e-01  
 10  +3.4901e-01  +3.5481e-01  5.80e-03  2.70e-05  1.25e-03  4.73e-06  1.22e-04  9.20e-01  
 11  +3.4724e-01  +3.4736e-01  1.21e-04  5.57e-07  2.58e-05  9.54e-08  2.58e-06  9.81e-01  
 12  +3.4720e-01  +3.4720e-01  1.21e-06  5.59e-09  2.59e-07  9.57e-10  2.59e-08  9.90e-01  
 13  +3.4720e-01  +3.4720e-01  1.21e-08  5.59e-11  2.59e-09  9.58e-12  2.59e-10  9.90e-01  
 14  +3.4720e-01  +3.4720e-01  1.21e-10  5.59e-13  2.59e-11  9.58e-14  2.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9934ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.472e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 4.027e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 4.054e-03 seconds
Iteration: 8, Objective: 0.3472
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 345 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 3.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 345
  constraints   = 595
  nnz(P)        = 0
  nnz(A)        = 4047
  cones (total) = 1
    : Nonnegative = 1,  numel = 595

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5156e+02  2.51e+02  9.41e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.6951e-01  +5.3958e+01  5.34e+01  4.06e-01  1.34e+01  3.86e-03  5.62e-01  6.01e-01  
  2  +5.2202e-01  +6.1547e+00  5.63e+00  1.07e-01  4.66e+00  1.58e-02  2.20e-01  9.90e-01  
  3  +5.0436e-01  +1.5091e+00  1.00e+00  2.51e-02  1.19e+00  2.66e-03  6.88e-02  7.89e-01  
  4  +4.9895e-01  +1.5880e+00  1.09e+00  1.43e-02  6.90e-01  4.44e-03  3.70e-02  5.53e-01  
  5  +4.7744e-01  +1.3144e+00  8.37e-01  6.30e-03  3.04e-01  4.27e-03  1.69e-02  6.82e-01  
  6  +4.6128e-01  +1.2312e+00  7.70e-01  4.30e-03  2.07e-01  4.04e-03  1.18e-02  4.38e-01  
  7  +4.2633e-01  +8.2273e-01  3.96e-01  2.37e-03  1.12e-01  3.33e-05  7.42e-03  7.07e-01  
  8  +3.8113e-01  +5.3490e-01  1.54e-01  8.00e-04  3.71e-02  2.72e-05  2.88e-03  6.67e-01  
  9  +3.6731e-01  +4.6600e-01  9.87e-02  4.97e-04  2.30e-02  2.28e-05  1.89e-03  3.93e-01  
 10  +3.5326e-01  +3.9830e-01  4.50e-02  2.19e-04  1.01e-02  1.74e-05  8.95e-04  6.43e-01  
 11  +3.4497e-01  +3.6044e-01  1.55e-02  7.29e-05  3.35e-03  7.41e-06  3.15e-04  7.21e-01  
 12  +3.4071e-01  +3.4121e-01  4.98e-04  2.33e-06  1.07e-04  3.47e-07  1.04e-05  9.90e-01  
 13  +3.4055e-01  +3.4056e-01  5.01e-06  2.34e-08  1.08e-06  3.49e-09  1.04e-07  9.90e-01  
 14  +3.4055e-01  +3.4055e-01  5.01e-08  2.34e-10  1.08e-08  3.49e-11  1.04e-09  9.90e-01  
 15  +3.4055e-01  +3.4055e-01  5.01e-10  2.34e-12  1.08e-10  3.49e-13  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.1044ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.406e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 3.993e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 3.998e-03 seconds
Iteration: 9, Objective: 0.3406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 355 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 355
  constraints   = 605
  nnz(P)        = 0
  nnz(A)        = 4122
  cones (total) = 1
    : Nonnegative = 1,  numel = 605

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9869e-01  +2.5163e+02  2.51e+02  9.41e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.6844e-01  +5.3985e+01  5.34e+01  4.07e-01  1.32e+01  3.87e-03  5.62e-01  6.01e-01  
  2  +5.2123e-01  +6.1776e+00  5.66e+00  1.07e-01  4.59e+00  1.59e-02  2.19e-01  9.90e-01  
  3  +5.0412e-01  +1.5095e+00  1.01e+00  2.39e-02  1.13e+00  2.89e-03  6.48e-02  7.79e-01  
  4  +4.9518e-01  +1.5961e+00  1.10e+00  1.15e-02  5.53e-01  5.42e-03  2.97e-02  6.56e-01  
  5  +4.7569e-01  +1.3417e+00  8.66e-01  6.62e-03  3.17e-01  4.14e-03  1.79e-02  5.31e-01  
  6  +4.5651e-01  +1.2100e+00  7.54e-01  4.31e-03  2.05e-01  3.76e-03  1.20e-02  4.42e-01  
  7  +4.1736e-01  +7.8464e-01  3.67e-01  2.11e-03  9.85e-02  3.29e-05  6.72e-03  7.69e-01  
  8  +3.8524e-01  +5.9314e-01  2.08e-01  1.09e-03  5.03e-02  2.75e-05  3.85e-03  4.64e-01  
  9  +3.6005e-01  +4.6271e-01  1.03e-01  5.12e-04  2.34e-02  2.65e-05  2.00e-03  5.74e-01  
 10  +3.4585e-01  +3.9674e-01  5.09e-02  2.44e-04  1.11e-02  1.98e-05  1.03e-03  6.02e-01  
 11  +3.3375e-01  +3.4103e-01  7.28e-03  3.39e-05  1.54e-03  3.12e-06  1.57e-04  8.73e-01  
 12  +3.3171e-01  +3.3208e-01  3.66e-04  1.70e-06  7.72e-05  1.54e-07  8.05e-06  9.50e-01  
 13  +3.3160e-01  +3.3161e-01  4.08e-06  1.89e-08  8.59e-07  1.79e-09  8.98e-08  9.89e-01  
 14  +3.3160e-01  +3.3160e-01  4.08e-08  1.89e-10  8.60e-09  1.79e-11  8.98e-10  9.90e-01  
 15  +3.3160e-01  +3.3160e-01  4.08e-10  1.89e-12  8.60e-11  1.79e-13  8.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.1007ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.316e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 4.998e-03 seconds
Iteration: 10, Objective: 0.3316
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 365 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 2.976e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 365
  constraints   = 615
  nnz(P)        = 0
  nnz(A)        = 4206
  cones (total) = 1
    : Nonnegative = 1,  numel = 615

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9869e-01  +2.5156e+02  2.51e+02  9.42e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.6770e-01  +5.3963e+01  5.34e+01  4.08e-01  1.31e+01  3.87e-03  5.61e-01  6.01e-01  
  2  +5.2053e-01  +6.1836e+00  5.66e+00  1.07e-01  4.52e+00  1.59e-02  2.18e-01  9.90e-01  
  3  +5.0417e-01  +1.5884e+00  1.08e+00  2.48e-02  1.16e+00  3.26e-03  6.63e-02  7.51e-01  
  4  +4.9425e-01  +1.6349e+00  1.14e+00  1.16e-02  5.57e-01  5.82e-03  3.01e-02  6.52e-01  
  5  +4.7399e-01  +1.3713e+00  8.97e-01  6.64e-03  3.16e-01  4.56e-03  1.79e-02  5.31e-01  
  6  +4.5305e-01  +1.2101e+00  7.57e-01  4.29e-03  2.03e-01  3.81e-03  1.20e-02  4.56e-01  
  7  +4.1539e-01  +7.9100e-01  3.76e-01  2.17e-03  1.00e-01  3.29e-05  6.90e-03  7.83e-01  
  8  +3.7836e-01  +5.6159e-01  1.83e-01  9.57e-04  4.37e-02  2.72e-05  3.42e-03  5.50e-01  
  9  +3.5604e-01  +4.4798e-01  9.19e-02  4.60e-04  2.08e-02  2.17e-05  1.80e-03  5.42e-01  
 10  +3.3641e-01  +3.5266e-01  1.63e-02  7.87e-05  3.55e-03  8.27e-06  3.41e-04  9.03e-01  
 11  +3.3215e-01  +3.3386e-01  1.71e-03  8.20e-06  3.69e-04  1.25e-06  3.69e-05  9.82e-01  
 12  +3.3161e-01  +3.3163e-01  2.63e-05  1.26e-07  5.68e-06  1.84e-08  5.73e-07  9.85e-01  
 13  +3.3160e-01  +3.3160e-01  2.64e-07  1.26e-09  5.69e-08  1.84e-10  5.75e-09  9.90e-01  
 14  +3.3160e-01  +3.3160e-01  2.64e-09  1.26e-11  5.69e-10  1.84e-12  5.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8639ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.316e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 2.976e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 6.023e-03 seconds
Iteration: 11, Objective: 0.3316
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 375 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 3.290e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 375
  constraints   = 625
  nnz(P)        = 0
  nnz(A)        = 4283
  cones (total) = 1
    : Nonnegative = 1,  numel = 625

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9869e-01  +2.5154e+02  2.51e+02  9.42e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.6716e-01  +5.4022e+01  5.35e+01  4.10e-01  1.29e+01  3.88e-03  5.61e-01  6.01e-01  
  2  +5.2013e-01  +6.1844e+00  5.66e+00  1.07e-01  4.46e+00  1.60e-02  2.18e-01  9.90e-01  
  3  +5.0372e-01  +1.5516e+00  1.05e+00  2.34e-02  1.09e+00  3.32e-03  6.29e-02  7.58e-01  
  4  +4.9493e-01  +1.5992e+00  1.10e+00  1.22e-02  5.81e-01  5.38e-03  3.21e-02  6.01e-01  
  5  +4.7749e-01  +1.3701e+00  8.93e-01  7.19e-03  3.40e-01  4.74e-03  1.95e-02  4.78e-01  
  6  +4.5631e-01  +1.2222e+00  7.66e-01  4.61e-03  2.17e-01  3.70e-03  1.29e-02  5.23e-01  
  7  +4.2332e-01  +8.5386e-01  4.31e-01  2.68e-03  1.23e-01  3.19e-05  8.46e-03  7.52e-01  
  8  +3.7607e-01  +5.5459e-01  1.79e-01  9.31e-04  4.22e-02  4.12e-05  3.34e-03  6.91e-01  
  9  +3.5893e-01  +4.7073e-01  1.12e-01  5.66e-04  2.55e-02  3.87e-05  2.19e-03  4.66e-01  
 10  +3.3897e-01  +3.7274e-01  3.38e-02  1.67e-04  7.47e-03  1.61e-05  7.19e-04  7.73e-01  
 11  +3.3062e-01  +3.3386e-01  3.24e-03  1.58e-05  7.05e-04  1.58e-06  7.27e-05  9.13e-01  
 12  +3.2976e-01  +3.2994e-01  1.89e-04  9.22e-07  4.11e-05  8.97e-08  4.30e-06  9.42e-01  
 13  +3.2970e-01  +3.2970e-01  2.06e-06  1.01e-08  4.49e-07  1.00e-09  4.70e-08  9.90e-01  
 14  +3.2970e-01  +3.2970e-01  2.07e-08  1.01e-10  4.50e-09  1.00e-11  4.71e-10  9.90e-01  
 15  +3.2970e-01  +3.2970e-01  2.07e-10  1.01e-12  4.50e-11  1.00e-13  4.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4674ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.297e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 3.290e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 4.969e-03 seconds
Iteration: 12, Objective: 0.3297
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 377 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 377
  constraints   = 627
  nnz(P)        = 0
  nnz(A)        = 4294
  cones (total) = 1
    : Nonnegative = 1,  numel = 627

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9869e-01  +2.5150e+02  2.51e+02  9.42e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.6671e-01  +5.4094e+01  5.35e+01  4.10e-01  1.29e+01  3.88e-03  5.61e-01  6.00e-01  
  2  +5.1985e-01  +6.1959e+00  5.68e+00  1.07e-01  4.47e+00  1.60e-02  2.19e-01  9.90e-01  
  3  +5.0384e-01  +1.5933e+00  1.09e+00  2.42e-02  1.13e+00  3.45e-03  6.47e-02  7.47e-01  
  4  +4.9474e-01  +1.6236e+00  1.13e+00  1.25e-02  5.90e-01  5.53e-03  3.26e-02  6.01e-01  
  5  +4.7737e-01  +1.3873e+00  9.10e-01  7.45e-03  3.51e-01  4.67e-03  2.02e-02  4.75e-01  
  6  +4.5571e-01  +1.2344e+00  7.79e-01  4.71e-03  2.21e-01  3.61e-03  1.32e-02  5.41e-01  
  7  +4.2428e-01  +8.6040e-01  4.36e-01  2.75e-03  1.26e-01  3.09e-05  8.68e-03  7.50e-01  
  8  +3.7744e-01  +5.6510e-01  1.88e-01  9.86e-04  4.46e-02  5.93e-05  3.52e-03  7.31e-01  
  9  +3.5755e-01  +4.6555e-01  1.08e-01  5.48e-04  2.46e-02  4.69e-05  2.13e-03  5.31e-01  
 10  +3.3803e-01  +3.6858e-01  3.05e-02  1.51e-04  6.75e-03  1.52e-05  6.56e-04  7.66e-01  
 11  +3.3055e-01  +3.3356e-01  3.01e-03  1.48e-05  6.57e-04  1.50e-06  6.79e-05  9.07e-01  
 12  +3.2975e-01  +3.2994e-01  1.84e-04  9.01e-07  4.01e-05  9.00e-08  4.20e-06  9.40e-01  
 13  +3.2970e-01  +3.2970e-01  1.96e-06  9.57e-09  4.26e-07  9.68e-10  4.47e-08  9.90e-01  
 14  +3.2970e-01  +3.2970e-01  1.96e-08  9.58e-11  4.26e-09  9.69e-12  4.47e-10  9.90e-01  
 15  +3.2970e-01  +3.2970e-01  1.96e-10  9.58e-13  4.27e-11  9.70e-14  4.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7697ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.297e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 2.999e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 5.999e-03 seconds
Iteration: 13, Objective: 0.3297
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 378 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 4.108e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 378
  constraints   = 628
  nnz(P)        = 0
  nnz(A)        = 4305
  cones (total) = 1
    : Nonnegative = 1,  numel = 628

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9867e-01  +2.5152e+02  2.51e+02  9.42e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.6621e-01  +5.4137e+01  5.36e+01  4.11e-01  1.29e+01  3.88e-03  5.62e-01  5.99e-01  
  2  +5.1966e-01  +6.2122e+00  5.69e+00  1.07e-01  4.47e+00  1.61e-02  2.20e-01  9.90e-01  
  3  +5.0388e-01  +1.6281e+00  1.12e+00  2.48e-02  1.15e+00  3.58e-03  6.61e-02  7.38e-01  
  4  +4.9429e-01  +1.6444e+00  1.15e+00  1.26e-02  5.94e-01  5.70e-03  3.28e-02  6.03e-01  
  5  +4.7686e-01  +1.4073e+00  9.30e-01  7.65e-03  3.60e-01  4.66e-03  2.07e-02  4.74e-01  
  6  +4.5619e-01  +1.2721e+00  8.16e-01  5.02e-03  2.35e-01  3.54e-03  1.41e-02  5.40e-01  
  7  +4.2166e-01  +8.6664e-01  4.45e-01  2.73e-03  1.25e-01  3.18e-05  8.59e-03  8.00e-01  
  8  +3.7421e-01  +5.4641e-01  1.72e-01  9.13e-04  4.12e-02  2.41e-05  3.31e-03  6.55e-01  
  9  +3.5679e-01  +4.6522e-01  1.08e-01  5.58e-04  2.50e-02  3.06e-05  2.20e-03  4.72e-01  
 10  +3.3350e-01  +3.5361e-01  2.01e-02  9.98e-05  4.44e-03  9.72e-06  4.56e-04  8.90e-01  
 11  +3.2851e-01  +3.3089e-01  2.38e-03  1.17e-05  5.18e-04  1.45e-06  5.65e-05  9.40e-01  
 12  +3.2781e-01  +3.2784e-01  2.80e-05  1.37e-07  6.09e-06  1.60e-08  6.71e-07  9.88e-01  
 13  +3.2780e-01  +3.2780e-01  2.80e-07  1.37e-09  6.09e-08  1.60e-10  6.72e-09  9.90e-01  
 14  +3.2780e-01  +3.2780e-01  2.80e-09  1.37e-11  6.09e-10  1.60e-12  6.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4984ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.278e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 4.108e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 4.999e-03 seconds
Iteration: 14, Objective: 0.3278
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 379 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 3.965e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 379
  constraints   = 629
  nnz(P)        = 0
  nnz(A)        = 4310
  cones (total) = 1
    : Nonnegative = 1,  numel = 629

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9867e-01  +2.5152e+02  2.51e+02  9.42e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.6610e-01  +5.4141e+01  5.36e+01  4.11e-01  1.29e+01  3.88e-03  5.62e-01  5.99e-01  
  2  +5.1956e-01  +6.2097e+00  5.69e+00  1.07e-01  4.46e+00  1.61e-02  2.20e-01  9.90e-01  
  3  +5.0371e-01  +1.6044e+00  1.10e+00  2.41e-02  1.12e+00  3.55e-03  6.45e-02  7.43e-01  
  4  +4.9445e-01  +1.6272e+00  1.13e+00  1.26e-02  5.96e-01  5.55e-03  3.31e-02  5.91e-01  
  5  +4.7792e-01  +1.4060e+00  9.28e-01  7.78e-03  3.66e-01  4.73e-03  2.11e-02  4.56e-01  
  6  +4.5633e-01  +1.2729e+00  8.17e-01  5.01e-03  2.35e-01  3.70e-03  1.40e-02  5.48e-01  
  7  +4.2310e-01  +8.8032e-01  4.57e-01  2.84e-03  1.30e-01  3.27e-05  8.94e-03  7.84e-01  
  8  +3.7460e-01  +5.4971e-01  1.75e-01  9.30e-04  4.19e-02  2.43e-05  3.37e-03  6.63e-01  
  9  +3.5403e-01  +4.5302e-01  9.90e-02  5.10e-04  2.28e-02  3.31e-05  2.04e-03  5.64e-01  
 10  +3.3259e-01  +3.4982e-01  1.72e-02  8.60e-05  3.82e-03  1.27e-05  3.94e-04  9.90e-01  
 11  +3.2820e-01  +3.2950e-01  1.30e-03  6.47e-06  2.87e-04  9.41e-07  3.10e-05  9.78e-01  
 12  +3.2781e-01  +3.2782e-01  1.78e-05  8.85e-08  3.92e-06  1.22e-08  4.28e-07  9.90e-01  
 13  +3.2780e-01  +3.2780e-01  1.79e-07  8.85e-10  3.92e-08  1.22e-10  4.29e-09  9.90e-01  
 14  +3.2780e-01  +3.2780e-01  1.79e-09  8.85e-12  3.92e-10  1.22e-12  4.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5134ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.278e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 3.965e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 5.040e-03 seconds
Iteration: 15, Objective: 0.3278
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:53 PM: Your problem has 382 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:53 PM: Finished problem compilation (took 3.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 382
  constraints   = 632
  nnz(P)        = 0
  nnz(A)        = 4333
  cones (total) = 1
    : Nonnegative = 1,  numel = 632

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9867e-01  +2.5161e+02  2.51e+02  9.43e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.6562e-01  +5.4207e+01  5.36e+01  4.12e-01  1.29e+01  3.88e-03  5.63e-01  5.99e-01  
  2  +5.1926e-01  +6.2251e+00  5.71e+00  1.07e-01  4.45e+00  1.61e-02  2.21e-01  9.90e-01  
  3  +5.0367e-01  +1.6369e+00  1.13e+00  2.45e-02  1.14e+00  3.69e-03  6.54e-02  7.35e-01  
  4  +4.9413e-01  +1.6413e+00  1.15e+00  1.28e-02  6.05e-01  5.65e-03  3.36e-02  5.84e-01  
  5  +4.7732e-01  +1.4177e+00  9.40e-01  7.90e-03  3.71e-01  4.76e-03  2.14e-02  4.63e-01  
  6  +4.5666e-01  +1.3046e+00  8.48e-01  5.27e-03  2.46e-01  3.54e-03  1.48e-02  5.68e-01  
  7  +4.2095e-01  +8.6816e-01  4.47e-01  2.73e-03  1.25e-01  3.22e-05  8.61e-03  8.07e-01  
  8  +3.7252e-01  +5.4093e-01  1.68e-01  8.92e-04  4.01e-02  3.22e-05  3.25e-03  6.87e-01  
  9  +3.5357e-01  +4.5098e-01  9.74e-02  5.01e-04  2.23e-02  3.22e-05  2.00e-03  5.21e-01  
 10  +3.3206e-01  +3.4733e-01  1.53e-02  7.63e-05  3.39e-03  1.12e-05  3.47e-04  9.90e-01  
 11  +3.2813e-01  +3.2928e-01  1.16e-03  5.76e-06  2.55e-04  8.17e-07  2.72e-05  9.26e-01  
 12  +3.2780e-01  +3.2782e-01  1.53e-05  7.62e-08  3.37e-06  1.04e-08  3.63e-07  9.89e-01  
 13  +3.2780e-01  +3.2780e-01  1.53e-07  7.62e-10  3.37e-08  1.04e-10  3.63e-09  9.90e-01  
 14  +3.2780e-01  +3.2780e-01  1.53e-09  7.62e-12  3.38e-10  1.04e-12  3.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5098ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:53 PM: Optimal value: 3.278e-01
(CVXPY) Aug 31 04:53:53 PM: Compilation took 3.008e-03 seconds
(CVXPY) Aug 31 04:53:53 PM: Solver (including time spent in interface) took 5.027e-03 seconds
FULL MODEL:
  Accruacy: 0.636
  Our objective: 0.272

IF 
    (x2 = 1 AND x6 = 1 AND x0 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.032000000000000056)
 OR (x1 = 1 AND x4 = 1 AND x5 = 1 AND x2 = 0 AND x3 = 0)                       <-- (term's our objective: 0.04000000000000005)
 OR (x0 = 1 AND x2 = 1 AND x6 = 1 AND x1 = 0 AND x4 = 0)                       <-- (term's our objective: 0.03200000000000004)
 OR (x1 = 1 AND x6 = 1 AND x0 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.024000000000000025)
 OR (x1 = 1 AND x5 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.028000000000000032)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x1 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.012000000000000018)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.024000000000000025)
 OR (x3 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x6 = 0)            <-- (term's our objective: 0.012000000000000014)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.02000000000000002)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.00800000000000001)
 OR (x2 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.00800000000000001)
 OR (x5 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.00800000000000001)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x2 = 0 AND x5 = 0) <-- (term's our objective: 0.016000000000000014)
 OR (x0 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.008000000000000014)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.763230800628662
Best over terms:
  Our final objective: 0.04000000000000005
    Its accruacy: 0.52
    Its hamming distance: 8
  Shortest hamming distance: 1
    Its our objective: 0.02000000000000002
  Highest accruacy: 0.52
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

