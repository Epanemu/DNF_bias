Command:
python test_script.py -s constant_subclass -d 10 -n 50000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14412
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 10.

Computed total variation: 0.19240000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:34 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:35 PM: Finished problem compilation (took 2.972e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 325021
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.7827e-01  +5.4921e+03  5.49e+03  4.48e-01  1.81e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2954e-01  +6.0158e+02  6.01e+02  1.86e-01  9.70e+01  1.78e-02  2.90e-01  9.52e-01  
  3  +5.0862e-01  +1.5671e+02  1.56e+02  1.52e-01  8.04e+01  5.04e-05  2.66e-01  3.26e-01  
  4  +5.0144e-01  +1.8704e+01  1.82e+01  4.96e-02  2.61e+01  5.56e-06  1.97e-01  4.50e-01  
  5  +5.0002e-01  +1.4436e+00  9.44e-01  2.81e-03  1.53e+00  2.40e-05  1.93e-01  1.54e-01  
  6  +5.0001e-01  +8.9346e-01  3.93e-01  1.17e-03  6.40e-01  9.91e-06  9.05e-02  6.30e-01  
  7  +4.9999e-01  +6.1300e-01  1.13e-01  3.36e-04  1.84e-01  8.64e-06  1.40e-02  8.82e-01  
  8  +4.9832e-01  +7.5770e-01  2.59e-01  1.15e-04  6.31e-02  7.36e-04  3.62e-04  9.89e-01  
  9  +4.8752e-01  +7.0048e-01  2.13e-01  1.39e-05  7.64e-03  4.81e-03  4.20e-05  8.84e-01  
 10  +4.8560e-01  +6.6984e-01  1.84e-01  1.17e-05  6.42e-03  3.60e-03  3.57e-05  2.33e-01  
 11  +4.8563e-01  +6.1594e-01  1.30e-01  8.80e-06  4.83e-03  3.42e-05  2.71e-05  7.50e-01  
 12  +4.7061e-01  +5.2753e-01  5.69e-02  3.03e-06  1.66e-03  1.00e-05  9.96e-06  7.36e-01  
 13  +4.5744e-01  +4.6245e-01  5.01e-03  2.43e-07  1.33e-04  1.33e-07  8.72e-07  9.37e-01  
 14  +4.5607e-01  +4.5685e-01  7.82e-04  3.59e-08  1.97e-05  1.96e-08  1.36e-07  8.56e-01  
 15  +4.5577e-01  +4.5579e-01  2.00e-05  8.32e-10  4.55e-07  3.51e-10  3.49e-09  9.86e-01  
 16  +4.5576e-01  +4.5576e-01  2.00e-07  8.31e-12  4.55e-09  3.51e-12  3.49e-11  9.90e-01  
 17  +4.5576e-01  +4.5576e-01  2.06e-09  8.57e-14  4.69e-11  9.09e-14  8.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 761.4443ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:35 PM: Optimal value: 4.558e-01
(CVXPY) Oct 06 04:31:35 PM: Compilation took 2.972e-01 seconds
(CVXPY) Oct 06 04:31:35 PM: Solver (including time spent in interface) took 8.292e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4558
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:36 PM: Your problem has 25031 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:36 PM: Finished problem compilation (took 2.657e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25031
  constraints   = 50031
  nnz(P)        = 0
  nnz(A)        = 367556
  cones (total) = 1
    : Nonnegative = 1,  numel = 50031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7826e-01  +5.4924e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2951e-01  +6.0133e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.52e-01  
  3  +5.0861e-01  +1.5656e+02  1.56e+02  1.52e-01  8.29e+01  5.05e-05  2.66e-01  3.27e-01  
  4  +5.0144e-01  +1.8606e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0004e-01  +1.7008e+00  1.20e+00  3.58e-03  2.01e+00  2.64e-05  1.92e-01  1.53e-01  
  6  +5.0001e-01  +6.8994e-01  1.90e-01  5.66e-04  3.19e-01  4.35e-06  4.29e-02  7.95e-01  
  7  +5.0001e-01  +7.3078e-01  2.31e-01  6.88e-04  3.87e-01  5.34e-06  3.70e-02  3.35e-01  
  8  +5.0001e-01  +7.8330e-01  2.83e-01  8.44e-04  4.75e-01  5.35e-06  3.35e-02  4.23e-01  
  9  +4.9998e-01  +7.3633e-01  2.36e-01  6.71e-04  3.78e-01  1.64e-05  6.65e-03  8.31e-01  
 10  +4.9770e-01  +7.1940e-01  2.22e-01  3.42e-05  1.95e-02  1.00e-03  9.44e-05  9.87e-01  
 11  +4.9710e-01  +7.1398e-01  2.17e-01  2.70e-05  1.53e-02  1.16e-03  7.38e-05  2.63e-01  
 12  +4.9861e-01  +6.8754e-01  1.89e-01  2.23e-05  1.27e-02  2.67e-04  6.01e-05  8.10e-01  
 13  +4.9825e-01  +6.7864e-01  1.80e-01  1.50e-05  8.54e-03  1.89e-04  4.01e-05  7.84e-01  
 14  +4.9731e-01  +6.7396e-01  1.77e-01  1.12e-05  6.40e-03  2.01e-04  3.00e-05  4.03e-01  
 15  +4.9640e-01  +6.6936e-01  1.73e-01  9.84e-06  5.60e-03  1.57e-04  2.63e-05  3.80e-01  
 16  +4.9562e-01  +6.6607e-01  1.70e-01  9.53e-06  5.42e-03  1.30e-04  2.56e-05  1.82e-01  
 17  +4.9444e-01  +6.6104e-01  1.67e-01  8.81e-06  5.01e-03  1.13e-04  2.37e-05  2.08e-01  
 18  +4.9252e-01  +6.5181e-01  1.59e-01  8.49e-06  4.82e-03  6.03e-05  2.32e-05  3.80e-01  
 19  +4.8250e-01  +6.1325e-01  1.31e-01  5.10e-06  2.89e-03  5.37e-05  1.41e-05  5.14e-01  
 20  +4.7578e-01  +5.8952e-01  1.14e-01  4.23e-06  2.39e-03  4.20e-05  1.18e-05  2.25e-01  
 21  +4.7218e-01  +5.7685e-01  1.05e-01  4.00e-06  2.27e-03  3.34e-05  1.18e-05  4.34e-02  
 22  +4.7221e-01  +5.7798e-01  1.06e-01  4.02e-06  2.28e-03  3.34e-05  1.18e-05  2.08e-02  
 23  +4.6041e-01  +5.3444e-01  7.40e-02  2.76e-06  1.56e-03  6.70e-06  8.23e-06  7.09e-01  
 24  +4.4133e-01  +4.7046e-01  2.91e-02  9.55e-07  5.39e-04  2.34e-06  2.92e-06  6.91e-01  
 25  +4.2905e-01  +4.3117e-01  2.12e-03  6.66e-08  3.76e-05  2.37e-08  2.10e-07  9.87e-01  
 26  +4.2805e-01  +4.2807e-01  2.13e-05  6.68e-10  3.77e-07  2.36e-10  2.11e-09  9.90e-01  
 27  +4.2804e-01  +4.2804e-01  2.13e-07  6.68e-12  3.77e-09  2.39e-12  2.14e-11  9.90e-01  
 28  +4.2804e-01  +4.2804e-01  2.13e-09  6.69e-14  3.77e-11  2.43e-14  2.17e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3420529s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:37 PM: Optimal value: 4.280e-01
(CVXPY) Oct 06 04:31:37 PM: Compilation took 2.657e-01 seconds
(CVXPY) Oct 06 04:31:37 PM: Solver (including time spent in interface) took 1.422e+00 seconds
Iteration: 2, Objective: 0.4280
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:38 PM: Your problem has 25041 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:38 PM: Finished problem compilation (took 2.656e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25041
  constraints   = 50041
  nnz(P)        = 0
  nnz(A)        = 370128
  cones (total) = 1
    : Nonnegative = 1,  numel = 50041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7826e-01  +5.4923e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2950e-01  +6.0126e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0861e-01  +1.5654e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.27e-01  
  4  +5.0144e-01  +1.8603e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0003e-01  +1.6259e+00  1.13e+00  3.36e-03  1.88e+00  2.66e-05  1.92e-01  1.65e-01  
  6  +5.0001e-01  +7.4774e-01  2.48e-01  7.39e-04  4.16e-01  6.14e-06  5.44e-02  7.27e-01  
  7  +5.0000e-01  +7.8804e-01  2.88e-01  8.58e-04  4.83e-01  8.73e-06  3.41e-02  5.59e-01  
  8  +4.9995e-01  +7.3163e-01  2.32e-01  6.45e-04  3.63e-01  3.12e-05  5.57e-03  8.65e-01  
  9  +4.9804e-01  +7.2301e-01  2.25e-01  6.58e-05  3.74e-02  8.52e-04  1.86e-04  9.67e-01  
 10  +4.9731e-01  +7.1865e-01  2.21e-01  4.73e-05  2.69e-02  1.12e-03  1.32e-04  3.21e-01  
 11  +4.9798e-01  +7.1000e-01  2.12e-01  4.50e-05  2.56e-02  7.93e-04  1.24e-04  3.11e-01  
 12  +4.9692e-01  +7.0445e-01  2.08e-01  2.97e-05  1.69e-02  1.11e-03  8.15e-05  3.81e-01  
 13  +4.9588e-01  +6.8581e-01  1.90e-01  1.67e-05  9.52e-03  1.10e-03  4.53e-05  7.56e-01  
 14  +4.9599e-01  +6.8498e-01  1.89e-01  1.66e-05  9.45e-03  9.96e-04  4.50e-05  9.02e-02  
 15  +4.9585e-01  +6.8179e-01  1.86e-01  1.46e-05  8.30e-03  8.43e-04  3.94e-05  3.35e-01  
 16  +4.9509e-01  +6.7299e-01  1.78e-01  1.11e-05  6.33e-03  4.23e-04  3.00e-05  7.50e-01  
 17  +4.9294e-01  +6.6109e-01  1.68e-01  9.35e-06  5.32e-03  2.85e-04  2.53e-05  4.58e-01  
 18  +4.8923e-01  +6.4667e-01  1.57e-01  7.57e-06  4.30e-03  2.80e-04  2.06e-05  2.38e-01  
 19  +4.7149e-01  +5.7902e-01  1.08e-01  3.98e-06  2.25e-03  6.57e-06  1.13e-05  9.81e-01  
 20  +4.4163e-01  +4.7462e-01  3.30e-02  1.12e-06  6.31e-04  2.97e-07  3.43e-06  8.38e-01  
 21  +4.3960e-01  +4.6858e-01  2.90e-02  9.45e-07  5.33e-04  3.84e-07  2.92e-06  7.11e-01  
 22  +4.3918e-01  +4.6730e-01  2.81e-02  9.09e-07  5.13e-04  4.00e-07  2.81e-06  3.23e-01  
 23  +4.3241e-01  +4.4538e-01  1.30e-02  4.16e-07  2.35e-04  1.90e-07  1.31e-06  6.25e-01  
 24  +4.2751e-01  +4.2963e-01  2.12e-03  6.78e-08  3.82e-05  3.15e-08  2.17e-07  8.87e-01  
 25  +4.2661e-01  +4.2677e-01  1.55e-04  4.96e-09  2.80e-06  2.43e-09  1.59e-08  9.89e-01  
 26  +4.2654e-01  +4.2654e-01  1.63e-06  5.20e-11  2.93e-08  2.54e-11  1.67e-10  9.90e-01  
 27  +4.2654e-01  +4.2654e-01  1.65e-08  5.26e-13  2.97e-10  2.54e-13  1.67e-12  9.90e-01  
 28  +4.2654e-01  +4.2654e-01  1.67e-10  5.37e-15  3.01e-12  2.54e-15  1.67e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4146614s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:39 PM: Optimal value: 4.265e-01
(CVXPY) Oct 06 04:31:39 PM: Compilation took 2.656e-01 seconds
(CVXPY) Oct 06 04:31:39 PM: Solver (including time spent in interface) took 1.469e+00 seconds
Iteration: 3, Objective: 0.4265
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:40 PM: Your problem has 25051 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:40 PM: Finished problem compilation (took 2.503e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25051
  constraints   = 50051
  nnz(P)        = 0
  nnz(A)        = 371680
  cones (total) = 1
    : Nonnegative = 1,  numel = 50051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +5.4924e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2949e-01  +6.0114e+02  6.01e+02  1.86e-01  9.99e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5650e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8603e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0003e-01  +1.6562e+00  1.16e+00  3.45e-03  1.93e+00  2.67e-05  1.92e-01  1.62e-01  
  6  +5.0001e-01  +7.7706e-01  2.77e-01  8.26e-04  4.65e-01  6.69e-06  5.97e-02  7.01e-01  
  7  +5.0000e-01  +7.9286e-01  2.93e-01  8.72e-04  4.91e-01  9.30e-06  3.36e-02  5.89e-01  
  8  +4.9993e-01  +7.3169e-01  2.32e-01  6.34e-04  3.57e-01  3.65e-05  4.93e-03  8.79e-01  
  9  +4.9831e-01  +7.2494e-01  2.27e-01  7.98e-05  4.53e-02  7.37e-04  2.27e-04  9.54e-01  
 10  +4.9779e-01  +7.1948e-01  2.22e-01  5.68e-05  3.23e-02  9.25e-04  1.59e-04  3.73e-01  
 11  +4.9807e-01  +6.9024e-01  1.92e-01  2.99e-05  1.70e-02  6.19e-04  8.11e-05  9.90e-01  
 12  +4.9755e-01  +6.8736e-01  1.90e-01  2.07e-05  1.18e-02  6.60e-04  5.58e-05  5.45e-01  
 13  +4.9630e-01  +6.8144e-01  1.85e-01  1.36e-05  7.72e-03  7.18e-04  3.64e-05  5.80e-01  
 14  +4.9614e-01  +6.8011e-01  1.84e-01  1.29e-05  7.32e-03  6.16e-04  3.45e-05  2.14e-01  
 15  +4.9301e-01  +6.6786e-01  1.75e-01  8.85e-06  5.03e-03  6.73e-04  2.38e-05  4.45e-01  
 16  +4.9083e-01  +6.5893e-01  1.68e-01  8.05e-06  4.57e-03  5.73e-04  2.18e-05  2.10e-01  
 17  +4.7324e-01  +5.8892e-01  1.16e-01  4.29e-06  2.43e-03  4.53e-05  1.21e-05  9.53e-01  
 18  +4.4547e-01  +4.9085e-01  4.54e-02  1.58e-06  8.95e-04  4.53e-06  4.83e-06  7.41e-01  
 19  +4.4497e-01  +4.8933e-01  4.44e-02  1.54e-06  8.67e-04  4.10e-06  4.68e-06  1.15e-01  
 20  +4.4212e-01  +4.8029e-01  3.82e-02  1.28e-06  7.23e-04  2.34e-06  3.93e-06  4.99e-01  
 21  +4.3631e-01  +4.6136e-01  2.50e-02  8.09e-07  4.57e-04  4.29e-07  2.52e-06  9.90e-01  
 22  +4.2998e-01  +4.4046e-01  1.05e-02  3.38e-07  1.91e-04  1.78e-07  1.07e-06  6.13e-01  
 23  +4.2722e-01  +4.3132e-01  4.10e-03  1.32e-07  7.44e-05  6.80e-08  4.24e-07  7.60e-01  
 24  +4.2548e-01  +4.2571e-01  2.24e-04  7.21e-09  4.07e-06  3.61e-09  2.33e-08  9.70e-01  
 25  +4.2538e-01  +4.2538e-01  2.30e-06  7.41e-11  4.18e-08  3.71e-11  2.40e-10  9.90e-01  
 26  +4.2538e-01  +4.2538e-01  2.30e-08  7.41e-13  4.18e-10  3.71e-13  2.40e-12  9.90e-01  
 27  +4.2538e-01  +4.2538e-01  2.31e-10  7.30e-15  4.18e-12  3.77e-15  2.44e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2946744s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:41 PM: Optimal value: 4.254e-01
(CVXPY) Oct 06 04:31:41 PM: Compilation took 2.503e-01 seconds
(CVXPY) Oct 06 04:31:41 PM: Solver (including time spent in interface) took 1.375e+00 seconds
Iteration: 4, Objective: 0.4254
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:42 PM: Your problem has 25061 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:42 PM: Finished problem compilation (took 2.656e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25061
  constraints   = 50061
  nnz(P)        = 0
  nnz(A)        = 373399
  cones (total) = 1
    : Nonnegative = 1,  numel = 50061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7823e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2949e-01  +6.0110e+02  6.01e+02  1.86e-01  9.99e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5649e+02  1.56e+02  1.52e-01  8.27e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8604e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0003e-01  +1.6248e+00  1.12e+00  3.36e-03  1.88e+00  2.67e-05  1.92e-01  1.67e-01  
  6  +5.0001e-01  +7.7843e-01  2.78e-01  8.31e-04  4.68e-01  6.98e-06  6.00e-02  6.98e-01  
  7  +5.0000e-01  +8.3626e-01  3.36e-01  1.00e-03  5.63e-01  9.78e-06  3.68e-02  6.31e-01  
  8  +4.9995e-01  +7.3268e-01  2.33e-01  6.47e-04  3.64e-01  3.18e-05  5.49e-03  8.69e-01  
  9  +4.9815e-01  +7.2535e-01  2.27e-01  7.06e-05  4.01e-02  8.07e-04  2.00e-04  9.64e-01  
 10  +4.9768e-01  +7.2012e-01  2.22e-01  5.18e-05  2.95e-02  9.75e-04  1.45e-04  3.56e-01  
 11  +4.9827e-01  +7.0006e-01  2.02e-01  3.53e-05  2.01e-02  5.91e-04  9.61e-05  7.99e-01  
 12  +4.9777e-01  +6.9709e-01  1.99e-01  2.66e-05  1.51e-02  6.96e-04  7.20e-05  3.40e-01  
 13  +4.9848e-01  +6.8897e-01  1.90e-01  1.94e-05  1.11e-02  2.08e-04  5.19e-05  9.90e-01  
 14  +4.9759e-01  +6.8549e-01  1.88e-01  1.39e-05  7.93e-03  2.61e-04  3.72e-05  3.51e-01  
 15  +4.9743e-01  +6.8421e-01  1.87e-01  1.29e-05  7.35e-03  1.31e-04  3.45e-05  5.73e-01  
 16  +4.9719e-01  +6.8343e-01  1.86e-01  1.22e-05  6.94e-03  1.25e-04  3.26e-05  1.42e-01  
 17  +4.9689e-01  +6.8182e-01  1.85e-01  1.20e-05  6.86e-03  1.03e-04  3.22e-05  1.70e-01  
 18  +4.9410e-01  +6.7088e-01  1.77e-01  8.72e-06  4.96e-03  1.14e-04  2.34e-05  3.75e-01  
 19  +4.9347e-01  +6.6826e-01  1.75e-01  8.66e-06  4.93e-03  1.07e-04  2.34e-05  3.50e-02  
 20  +4.8063e-01  +6.1736e-01  1.37e-01  5.22e-06  2.96e-03  6.01e-05  1.45e-05  6.64e-01  
 21  +4.6096e-01  +5.4755e-01  8.66e-02  3.17e-06  1.79e-03  1.88e-05  9.29e-06  5.46e-01  
 22  +4.4042e-01  +4.7600e-01  3.56e-02  1.22e-06  6.86e-04  5.24e-06  3.77e-06  6.57e-01  
 23  +4.4022e-01  +4.7523e-01  3.50e-02  1.20e-06  6.75e-04  4.78e-06  3.72e-06  8.70e-02  
 24  +4.4010e-01  +4.7486e-01  3.48e-02  1.18e-06  6.65e-04  4.21e-06  3.66e-06  1.50e-01  
 25  +4.3435e-01  +4.5562e-01  2.13e-02  7.03e-07  3.96e-04  1.81e-06  2.21e-06  6.03e-01  
 26  +4.2765e-01  +4.3341e-01  5.76e-03  1.87e-07  1.06e-04  3.11e-07  6.04e-07  8.47e-01  
 27  +4.2764e-01  +4.3334e-01  5.70e-03  1.86e-07  1.05e-04  3.00e-07  6.00e-07  3.45e-02  
 28  +4.2759e-01  +4.3316e-01  5.57e-03  1.81e-07  1.02e-04  2.71e-07  5.86e-07  1.32e-01  
 29  +4.2747e-01  +4.3277e-01  5.30e-03  1.72e-07  9.72e-05  2.40e-07  5.56e-07  1.55e-01  
 30  +4.2558e-01  +4.2660e-01  1.03e-03  3.33e-08  1.88e-05  1.77e-08  1.09e-07  9.90e-01  
 31  +4.2511e-01  +4.2512e-01  1.35e-05  4.37e-10  2.47e-07  2.29e-10  1.43e-09  9.88e-01  
 32  +4.2510e-01  +4.2510e-01  1.35e-07  4.37e-12  2.47e-09  2.29e-12  1.43e-11  9.90e-01  
 33  +4.2510e-01  +4.2510e-01  1.35e-09  4.37e-14  2.47e-11  2.30e-14  1.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7072293s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:44 PM: Optimal value: 4.251e-01
(CVXPY) Oct 06 04:31:44 PM: Compilation took 2.656e-01 seconds
(CVXPY) Oct 06 04:31:44 PM: Solver (including time spent in interface) took 1.781e+00 seconds
Iteration: 5, Objective: 0.4251
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:44 PM: Your problem has 25071 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:44 PM: Finished problem compilation (took 2.656e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25071
  constraints   = 50071
  nnz(P)        = 0
  nnz(A)        = 374684
  cones (total) = 1
    : Nonnegative = 1,  numel = 50071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2948e-01  +6.0102e+02  6.00e+02  1.86e-01  9.98e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5646e+02  1.56e+02  1.52e-01  8.27e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8604e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.54e-01  
  5  +5.0003e-01  +1.6427e+00  1.14e+00  3.41e-03  1.91e+00  2.68e-05  1.92e-01  1.66e-01  
  6  +5.0001e-01  +7.8127e-01  2.81e-01  8.39e-04  4.72e-01  6.97e-06  6.01e-02  6.99e-01  
  7  +5.0000e-01  +7.8137e-01  2.81e-01  8.38e-04  4.72e-01  1.02e-05  3.05e-02  6.04e-01  
  8  +4.9990e-01  +7.4028e-01  2.40e-01  6.24e-04  3.52e-01  5.11e-05  3.98e-03  8.89e-01  
  9  +4.9722e-01  +7.2992e-01  2.33e-01  5.54e-05  3.15e-02  1.21e-03  1.56e-04  9.62e-01  
 10  +4.9612e-01  +7.2056e-01  2.24e-01  3.60e-05  2.05e-02  1.56e-03  1.00e-04  4.57e-01  
 11  +4.9629e-01  +7.1917e-01  2.23e-01  3.59e-05  2.04e-02  1.47e-03  9.98e-05  4.92e-02  
 12  +4.9382e-01  +7.0748e-01  2.14e-01  2.12e-05  1.21e-02  2.13e-03  5.85e-05  4.72e-01  
 13  +4.9349e-01  +6.9836e-01  2.05e-01  1.72e-05  9.76e-03  1.84e-03  4.70e-05  4.07e-01  
 14  +4.9338e-01  +6.7640e-01  1.83e-01  1.12e-05  6.38e-03  5.18e-04  3.04e-05  9.90e-01  
 15  +4.8735e-01  +6.5078e-01  1.63e-01  7.59e-06  4.31e-03  3.16e-04  2.08e-05  6.79e-01  
 16  +4.6707e-01  +5.7226e-01  1.05e-01  3.79e-06  2.15e-03  1.74e-04  1.09e-05  6.04e-01  
 17  +4.5414e-01  +5.2677e-01  7.26e-02  2.59e-06  1.46e-03  7.59e-05  7.74e-06  4.60e-01  
 18  +4.4889e-01  +5.0871e-01  5.98e-02  2.08e-06  1.18e-03  3.77e-05  6.31e-06  4.86e-01  
 19  +4.4709e-01  +5.0245e-01  5.54e-02  1.88e-06  1.06e-03  1.28e-05  5.74e-06  6.70e-01  
 20  +4.4605e-01  +4.9885e-01  5.28e-02  1.78e-06  1.01e-03  9.78e-06  5.44e-06  2.56e-01  
 21  +4.3464e-01  +4.5942e-01  2.48e-02  8.25e-07  4.65e-04  2.94e-06  2.61e-06  6.92e-01  
 22  +4.3093e-01  +4.4690e-01  1.60e-02  5.26e-07  2.97e-04  1.64e-06  1.68e-06  4.61e-01  
 23  +4.2837e-01  +4.3821e-01  9.84e-03  3.23e-07  1.82e-04  9.12e-07  1.04e-06  4.52e-01  
 24  +4.2762e-01  +4.3526e-01  7.64e-03  2.50e-07  1.41e-04  1.39e-07  8.08e-07  9.90e-01  
 25  +4.2544e-01  +4.2825e-01  2.81e-03  9.18e-08  5.18e-05  4.86e-08  3.00e-07  7.57e-01  
 26  +4.2422e-01  +4.2434e-01  1.24e-04  4.07e-09  2.30e-06  1.93e-09  1.34e-08  9.90e-01  
 27  +4.2416e-01  +4.2416e-01  1.25e-06  4.09e-11  2.31e-08  1.94e-11  1.35e-10  9.90e-01  
 28  +4.2416e-01  +4.2416e-01  1.25e-08  4.09e-13  2.31e-10  1.94e-13  1.35e-12  9.90e-01  
 29  +4.2416e-01  +4.2416e-01  1.25e-10  4.14e-15  2.32e-12  1.94e-15  1.35e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5271444s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:46 PM: Optimal value: 4.242e-01
(CVXPY) Oct 06 04:31:46 PM: Compilation took 2.656e-01 seconds
(CVXPY) Oct 06 04:31:46 PM: Solver (including time spent in interface) took 1.610e+00 seconds
Iteration: 6, Objective: 0.4242
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:46 PM: Your problem has 25081 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:46 PM: Finished problem compilation (took 2.812e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25081
  constraints   = 50081
  nnz(P)        = 0
  nnz(A)        = 375509
  cones (total) = 1
    : Nonnegative = 1,  numel = 50081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0099e+02  6.00e+02  1.86e-01  9.98e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5646e+02  1.56e+02  1.52e-01  8.27e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8605e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.54e-01  
  5  +5.0003e-01  +1.6295e+00  1.13e+00  3.37e-03  1.89e+00  2.68e-05  1.92e-01  1.68e-01  
  6  +5.0001e-01  +7.8126e-01  2.81e-01  8.39e-04  4.72e-01  7.09e-06  6.01e-02  6.96e-01  
  7  +5.0000e-01  +7.8115e-01  2.81e-01  8.38e-04  4.71e-01  1.02e-05  3.15e-02  5.81e-01  
  8  +4.9991e-01  +7.4282e-01  2.43e-01  6.47e-04  3.65e-01  4.70e-05  4.51e-03  8.78e-01  
  9  +4.9712e-01  +7.3195e-01  2.35e-01  5.53e-05  3.14e-02  1.25e-03  1.56e-04  9.67e-01  
 10  +4.9589e-01  +7.2302e-01  2.27e-01  3.60e-05  2.05e-02  1.66e-03  1.00e-04  4.37e-01  
 11  +4.9613e-01  +7.2103e-01  2.25e-01  3.59e-05  2.04e-02  1.53e-03  9.98e-05  6.55e-02  
 12  +4.9345e-01  +7.0908e-01  2.16e-01  2.11e-05  1.20e-02  2.26e-03  5.83e-05  4.63e-01  
 13  +4.9336e-01  +6.9881e-01  2.05e-01  1.70e-05  9.65e-03  1.83e-03  4.65e-05  4.49e-01  
 14  +4.9400e-01  +6.9160e-01  1.98e-01  1.52e-05  8.66e-03  1.15e-03  4.15e-05  4.52e-01  
 15  +4.9201e-01  +6.7139e-01  1.79e-01  1.05e-05  5.99e-03  5.08e-04  2.87e-05  8.23e-01  
 16  +4.8598e-01  +6.4463e-01  1.59e-01  7.48e-06  4.25e-03  3.24e-05  2.06e-05  9.90e-01  
 17  +4.7054e-01  +5.8603e-01  1.15e-01  4.43e-06  2.51e-03  2.30e-05  1.27e-05  4.57e-01  
 18  +4.6176e-01  +5.5447e-01  9.27e-02  3.45e-06  1.95e-03  1.62e-05  1.01e-05  2.55e-01  
 19  +4.4755e-01  +5.0472e-01  5.72e-02  2.02e-06  1.14e-03  2.71e-06  6.18e-06  7.68e-01  
 20  +4.4013e-01  +4.7899e-01  3.89e-02  1.34e-06  7.54e-04  1.62e-06  4.17e-06  4.21e-01  
 21  +4.3748e-01  +4.6950e-01  3.20e-02  1.07e-06  6.06e-04  9.37e-07  3.37e-06  5.77e-01  
 22  +4.2960e-01  +4.4271e-01  1.31e-02  4.34e-07  2.45e-04  3.36e-07  1.40e-06  6.84e-01  
 23  +4.2831e-01  +4.3821e-01  9.90e-03  3.25e-07  1.83e-04  2.09e-07  1.05e-06  5.95e-01  
 24  +4.2470e-01  +4.2631e-01  1.61e-03  5.28e-08  2.98e-05  3.25e-08  1.73e-07  8.59e-01  
 25  +4.2418e-01  +4.2462e-01  4.39e-04  1.44e-08  8.10e-06  8.31e-09  4.72e-08  7.94e-01  
 26  +4.2398e-01  +4.2399e-01  5.10e-06  1.67e-10  9.41e-08  9.43e-11  5.50e-10  9.90e-01  
 27  +4.2398e-01  +4.2398e-01  5.11e-08  1.67e-12  9.41e-10  9.43e-13  5.50e-12  9.90e-01  
 28  +4.2398e-01  +4.2398e-01  5.11e-10  1.67e-14  9.41e-12  9.52e-15  5.55e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.48151s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:48 PM: Optimal value: 4.240e-01
(CVXPY) Oct 06 04:31:48 PM: Compilation took 2.812e-01 seconds
(CVXPY) Oct 06 04:31:48 PM: Solver (including time spent in interface) took 1.563e+00 seconds
Iteration: 7, Objective: 0.4240
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:48 PM: Your problem has 25084 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:49 PM: Finished problem compilation (took 2.969e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25084
  constraints   = 50084
  nnz(P)        = 0
  nnz(A)        = 376016
  cones (total) = 1
    : Nonnegative = 1,  numel = 50084

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0099e+02  6.00e+02  1.86e-01  9.98e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5645e+02  1.56e+02  1.52e-01  8.27e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8605e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.54e-01  
  5  +5.0003e-01  +1.5985e+00  1.10e+00  3.28e-03  1.84e+00  2.69e-05  1.92e-01  1.73e-01  
  6  +5.0001e-01  +7.7540e-01  2.75e-01  8.22e-04  4.62e-01  7.22e-06  5.91e-02  7.00e-01  
  7  +5.0000e-01  +7.7001e-01  2.70e-01  8.04e-04  4.53e-01  1.06e-05  3.02e-02  5.74e-01  
  8  +4.9989e-01  +7.4080e-01  2.41e-01  6.24e-04  3.52e-01  5.56e-05  3.98e-03  8.90e-01  
  9  +4.9703e-01  +7.3012e-01  2.33e-01  5.62e-05  3.19e-02  1.29e-03  1.59e-04  9.61e-01  
 10  +4.9585e-01  +7.2200e-01  2.26e-01  3.74e-05  2.12e-02  1.68e-03  1.04e-04  4.20e-01  
 11  +4.9613e-01  +7.1988e-01  2.24e-01  3.73e-05  2.12e-02  1.53e-03  1.04e-04  7.61e-02  
 12  +4.9345e-01  +7.0634e-01  2.13e-01  2.11e-05  1.20e-02  2.25e-03  5.82e-05  5.17e-01  
 13  +4.9399e-01  +7.0021e-01  2.06e-01  1.86e-05  1.06e-02  1.74e-03  5.09e-05  3.69e-01  
 14  +4.9283e-01  +6.9237e-01  2.00e-01  1.49e-05  8.49e-03  1.71e-03  4.09e-05  3.32e-01  
 15  +4.9362e-01  +6.8484e-01  1.91e-01  1.36e-05  7.73e-03  8.44e-04  3.72e-05  5.31e-01  
 16  +4.8978e-01  +6.6502e-01  1.75e-01  9.46e-06  5.37e-03  6.53e-04  2.60e-05  5.83e-01  
 17  +4.7972e-01  +6.2097e-01  1.41e-01  6.22e-06  3.53e-03  4.76e-05  1.77e-05  9.22e-01  
 18  +4.6880e-01  +5.7765e-01  1.09e-01  4.51e-06  2.55e-03  2.73e-05  1.31e-05  3.90e-01  
 19  +4.5529e-01  +5.3102e-01  7.57e-02  2.84e-06  1.61e-03  1.07e-05  8.53e-06  5.89e-01  
 20  +4.4509e-01  +4.9613e-01  5.10e-02  1.79e-06  1.01e-03  3.15e-06  5.50e-06  7.09e-01  
 21  +4.4142e-01  +4.8343e-01  4.20e-02  1.45e-06  8.18e-04  2.33e-06  4.50e-06  2.84e-01  
 22  +4.3603e-01  +4.6433e-01  2.83e-02  9.33e-07  5.27e-04  4.69e-07  2.93e-06  9.90e-01  
 23  +4.2833e-01  +4.3846e-01  1.01e-02  3.33e-07  1.88e-04  1.65e-07  1.08e-06  6.74e-01  
 24  +4.2751e-01  +4.3562e-01  8.11e-03  2.67e-07  1.50e-04  1.31e-07  8.63e-07  3.73e-01  
 25  +4.2530e-01  +4.2828e-01  2.98e-03  9.77e-08  5.51e-05  4.73e-08  3.19e-07  7.48e-01  
 26  +4.2415e-01  +4.2451e-01  3.67e-04  1.20e-08  6.76e-06  5.78e-09  3.95e-08  9.10e-01  
 27  +4.2398e-01  +4.2399e-01  5.67e-06  1.85e-10  1.05e-07  8.75e-11  6.10e-10  9.90e-01  
 28  +4.2398e-01  +4.2398e-01  5.67e-08  1.85e-12  1.05e-09  8.75e-13  6.10e-12  9.90e-01  
 29  +4.2398e-01  +4.2398e-01  5.67e-10  1.85e-14  1.05e-11  8.99e-15  6.27e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.516544s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:50 PM: Optimal value: 4.240e-01
(CVXPY) Oct 06 04:31:50 PM: Compilation took 2.969e-01 seconds
(CVXPY) Oct 06 04:31:50 PM: Solver (including time spent in interface) took 1.595e+00 seconds
Iteration: 8, Objective: 0.4240
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:51 PM: Your problem has 25086 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:51 PM: Finished problem compilation (took 2.969e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25086
  constraints   = 50086
  nnz(P)        = 0
  nnz(A)        = 376128
  cones (total) = 1
    : Nonnegative = 1,  numel = 50086

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0098e+02  6.00e+02  1.86e-01  9.98e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5645e+02  1.56e+02  1.52e-01  8.26e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8605e+01  1.81e+01  4.93e-02  2.67e+01  5.58e-06  1.95e-01  4.54e-01  
  5  +5.0003e-01  +1.5959e+00  1.10e+00  3.27e-03  1.83e+00  2.69e-05  1.92e-01  1.73e-01  
  6  +5.0001e-01  +7.7509e-01  2.75e-01  8.21e-04  4.62e-01  7.23e-06  5.90e-02  7.00e-01  
  7  +5.0000e-01  +7.6928e-01  2.69e-01  8.02e-04  4.51e-01  1.08e-05  2.96e-02  5.84e-01  
  8  +4.9988e-01  +7.4024e-01  2.40e-01  6.11e-04  3.45e-01  5.96e-05  3.70e-03  8.96e-01  
  9  +4.9703e-01  +7.2968e-01  2.33e-01  5.63e-05  3.20e-02  1.28e-03  1.59e-04  9.58e-01  
 10  +4.9593e-01  +7.2171e-01  2.26e-01  3.79e-05  2.16e-02  1.65e-03  1.06e-04  4.16e-01  
 11  +4.9623e-01  +7.1951e-01  2.23e-01  3.78e-05  2.15e-02  1.50e-03  1.05e-04  8.23e-02  
 12  +4.9367e-01  +7.0620e-01  2.13e-01  2.14e-05  1.22e-02  2.17e-03  5.92e-05  5.22e-01  
 13  +4.9407e-01  +6.9795e-01  2.04e-01  1.79e-05  1.02e-02  1.62e-03  4.89e-05  4.64e-01  
 14  +4.9351e-01  +6.9094e-01  1.97e-01  1.49e-05  8.45e-03  1.38e-03  4.05e-05  3.84e-01  
 15  +4.9425e-01  +6.7980e-01  1.86e-01  1.23e-05  6.99e-03  2.52e-04  3.33e-05  8.83e-01  
 16  +4.8521e-01  +6.4313e-01  1.58e-01  6.38e-06  3.62e-03  2.15e-04  1.75e-05  7.69e-01  
 17  +4.6977e-01  +5.8372e-01  1.14e-01  4.38e-06  2.48e-03  1.02e-04  1.25e-05  4.30e-01  
 18  +4.5462e-01  +5.2929e-01  7.47e-02  2.74e-06  1.55e-03  4.11e-05  8.19e-06  5.08e-01  
 19  +4.4654e-01  +5.0127e-01  5.47e-02  1.91e-06  1.08e-03  1.02e-05  5.84e-06  7.23e-01  
 20  +4.4158e-01  +4.8409e-01  4.25e-02  1.46e-06  8.23e-04  7.00e-06  4.53e-06  3.14e-01  
 21  +4.3591e-01  +4.6399e-01  2.81e-02  9.25e-07  5.22e-04  5.76e-07  2.91e-06  9.90e-01  
 22  +4.3180e-01  +4.5019e-01  1.84e-02  6.06e-07  3.42e-04  3.73e-07  1.93e-06  3.58e-01  
 23  +4.2651e-01  +4.3226e-01  5.75e-03  1.89e-07  1.06e-04  9.22e-08  6.14e-07  9.90e-01  
 24  +4.2427e-01  +4.2495e-01  6.85e-04  2.25e-08  1.27e-05  1.07e-08  7.43e-08  9.07e-01  
 25  +4.2397e-01  +4.2400e-01  2.88e-05  9.46e-10  5.34e-07  4.27e-10  3.13e-09  9.90e-01  
 26  +4.2396e-01  +4.2396e-01  2.89e-07  9.52e-12  5.37e-09  4.29e-12  3.15e-11  9.90e-01  
 27  +4.2396e-01  +4.2396e-01  2.89e-09  9.53e-14  5.37e-11  4.29e-14  3.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4270309s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:52 PM: Optimal value: 4.240e-01
(CVXPY) Oct 06 04:31:52 PM: Compilation took 2.969e-01 seconds
(CVXPY) Oct 06 04:31:52 PM: Solver (including time spent in interface) took 1.500e+00 seconds
Iteration: 9, Objective: 0.4240
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:53 PM: Your problem has 25087 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:53 PM: Finished problem compilation (took 2.969e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25087
  constraints   = 50087
  nnz(P)        = 0
  nnz(A)        = 376316
  cones (total) = 1
    : Nonnegative = 1,  numel = 50087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0097e+02  6.00e+02  1.86e-01  9.98e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5645e+02  1.56e+02  1.52e-01  8.26e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8605e+01  1.81e+01  4.93e-02  2.67e+01  5.58e-06  1.95e-01  4.54e-01  
  5  +5.0003e-01  +1.5939e+00  1.09e+00  3.27e-03  1.83e+00  2.69e-05  1.92e-01  1.74e-01  
  6  +5.0001e-01  +7.7564e-01  2.76e-01  8.23e-04  4.63e-01  7.27e-06  5.91e-02  6.99e-01  
  7  +5.0000e-01  +7.6611e-01  2.66e-01  7.93e-04  4.46e-01  1.08e-05  2.92e-02  5.84e-01  
  8  +4.9988e-01  +7.4024e-01  2.40e-01  6.07e-04  3.43e-01  6.16e-05  3.62e-03  8.97e-01  
  9  +4.9697e-01  +7.2957e-01  2.33e-01  5.57e-05  3.16e-02  1.31e-03  1.58e-04  9.57e-01  
 10  +4.9588e-01  +7.2167e-01  2.26e-01  3.79e-05  2.15e-02  1.67e-03  1.06e-04  4.09e-01  
 11  +4.9621e-01  +7.1926e-01  2.23e-01  3.77e-05  2.14e-02  1.50e-03  1.05e-04  9.22e-02  
 12  +4.9363e-01  +7.0603e-01  2.12e-01  2.14e-05  1.21e-02  2.18e-03  5.90e-05  5.21e-01  
 13  +4.9400e-01  +6.9807e-01  2.04e-01  1.79e-05  1.02e-02  1.65e-03  4.89e-05  4.51e-01  
 14  +4.9375e-01  +6.9070e-01  1.97e-01  1.49e-05  8.50e-03  1.27e-03  4.07e-05  4.40e-01  
 15  +4.9435e-01  +6.7833e-01  1.84e-01  1.19e-05  6.79e-03  9.93e-05  3.23e-05  9.90e-01  
 16  +4.8624e-01  +6.4624e-01  1.60e-01  6.76e-06  3.84e-03  7.74e-05  1.85e-05  7.46e-01  
 17  +4.6933e-01  +5.8156e-01  1.12e-01  4.28e-06  2.42e-03  3.70e-05  1.23e-05  4.89e-01  
 18  +4.5438e-01  +5.2839e-01  7.40e-02  2.71e-06  1.53e-03  1.42e-05  8.11e-06  5.24e-01  
 19  +4.4656e-01  +5.0144e-01  5.49e-02  1.91e-06  1.08e-03  3.66e-06  5.85e-06  7.36e-01  
 20  +4.3357e-01  +4.5644e-01  2.29e-02  7.68e-07  4.33e-04  9.71e-07  2.44e-06  7.44e-01  
 21  +4.3200e-01  +4.5101e-01  1.90e-02  6.35e-07  3.58e-04  7.51e-07  2.03e-06  2.64e-01  
 22  +4.2851e-01  +4.3898e-01  1.05e-02  3.45e-07  1.95e-04  2.62e-07  1.11e-06  7.92e-01  
 23  +4.2470e-01  +4.2637e-01  1.67e-03  5.49e-08  3.10e-05  3.51e-08  1.81e-07  9.01e-01  
 24  +4.2401e-01  +4.2411e-01  1.02e-04  3.35e-09  1.89e-06  1.72e-09  1.11e-08  9.77e-01  
 25  +4.2396e-01  +4.2396e-01  1.12e-06  3.71e-11  2.09e-08  1.89e-11  1.23e-10  9.90e-01  
 26  +4.2396e-01  +4.2396e-01  1.12e-08  3.71e-13  2.09e-10  1.89e-13  1.23e-12  9.90e-01  
 27  +4.2396e-01  +4.2396e-01  1.13e-10  3.72e-15  2.09e-12  1.91e-15  1.24e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3443984s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:54 PM: Optimal value: 4.240e-01
(CVXPY) Oct 06 04:31:54 PM: Compilation took 2.969e-01 seconds
(CVXPY) Oct 06 04:31:54 PM: Solver (including time spent in interface) took 1.422e+00 seconds
FULL MODEL:
  Accruacy: 0.57438
  Our objective: 0.14876000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.14412)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.00028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.00156)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.00044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.00116)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.00056)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.00064)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 34.249319553375244
Best over terms:
  Our final objective: 0.14412000000000003
    Its accruacy: 0.57206
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14412000000000003
  Highest accruacy: 0.57206
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

