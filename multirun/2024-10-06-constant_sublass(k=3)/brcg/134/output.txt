Command:
python test_script.py -s constant_subclass -d 4 -n 100 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.32
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:46 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:46 PM: Finished problem compilation (took 3.545e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9641e-01  +5.0764e+01  5.03e+01  8.58e-01  7.88e+00  1.00e+00  1.04e+00   ------   
  1  +6.0320e-01  +1.0117e+01  9.51e+00  2.96e-01  4.15e+00  4.08e-03  4.90e-01  6.68e-01  
  2  +5.3354e-01  +1.6236e+00  1.09e+00  6.89e-02  1.13e+00  9.53e-03  1.71e-01  8.86e-01  
  3  +4.9760e-01  +7.1996e-01  2.22e-01  1.44e-02  2.37e-01  6.37e-03  5.13e-02  9.90e-01  
  4  +4.7134e-01  +6.9217e-01  2.21e-01  4.90e-03  8.35e-02  1.46e-02  1.71e-02  7.22e-01  
  5  +4.4709e-01  +5.2819e-01  8.11e-02  1.87e-03  3.16e-02  1.27e-04  7.76e-03  7.53e-01  
  6  +4.2326e-01  +4.3219e-01  8.92e-03  1.81e-04  3.04e-03  1.74e-05  8.34e-04  9.34e-01  
  7  +4.2013e-01  +4.2023e-01  9.70e-05  1.96e-06  3.29e-05  2.03e-07  9.25e-06  9.90e-01  
  8  +4.2010e-01  +4.2010e-01  9.70e-07  1.96e-08  3.29e-07  2.03e-09  9.25e-08  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  9.70e-09  1.96e-10  3.29e-09  2.03e-11  9.25e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 718.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:46 PM: Optimal value: 4.201e-01
(CVXPY) Oct 06 03:49:46 PM: Compilation took 3.545e-02 seconds
(CVXPY) Oct 06 03:49:46 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:46 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:46 PM: Finished problem compilation (took 8.834e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 462
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9075e-01  +5.1418e+01  5.09e+01  8.68e-01  8.17e+00  1.00e+00  1.08e+00   ------   
  1  +5.7322e-01  +1.0569e+01  1.00e+01  3.24e-01  4.39e+00  3.99e-03  5.40e-01  6.44e-01  
  2  +5.1121e-01  +2.0627e+00  1.55e+00  8.89e-02  1.46e+00  1.20e-02  2.23e-01  8.19e-01  
  3  +4.6874e-01  +1.3017e+00  8.33e-01  3.56e-02  5.96e-01  7.97e-03  1.09e-01  5.97e-01  
  4  +4.3611e-01  +7.2760e-01  2.91e-01  1.19e-02  1.99e-01  2.63e-03  4.42e-02  6.12e-01  
  5  +4.2006e-01  +6.3284e-01  2.13e-01  5.30e-03  9.02e-02  2.88e-03  1.92e-02  7.18e-01  
  6  +3.9480e-01  +4.9406e-01  9.93e-02  2.17e-03  3.67e-02  8.42e-04  8.73e-03  6.72e-01  
  7  +3.7382e-01  +3.8431e-01  1.05e-02  2.29e-04  3.86e-03  1.60e-05  1.05e-03  9.58e-01  
  8  +3.7038e-01  +3.7062e-01  2.33e-04  5.03e-06  8.47e-05  2.87e-07  2.36e-05  9.78e-01  
  9  +3.7030e-01  +3.7031e-01  9.91e-06  2.14e-07  3.60e-06  2.05e-08  1.03e-06  9.68e-01  
 10  +3.7030e-01  +3.7030e-01  9.93e-08  2.14e-09  3.60e-08  2.06e-10  1.03e-08  9.90e-01  
 11  +3.7030e-01  +3.7030e-01  9.95e-10  2.15e-11  3.61e-10  2.06e-12  1.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 705.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:46 PM: Optimal value: 3.703e-01
(CVXPY) Oct 06 03:49:46 PM: Compilation took 8.834e-03 seconds
(CVXPY) Oct 06 03:49:46 PM: Solver (including time spent in interface) took 5.098e-03 seconds
Iteration: 2, Objective: 0.3703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:46 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:46 PM: Finished problem compilation (took 4.600e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 506
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8979e-01  +5.1592e+01  5.11e+01  8.71e-01  8.19e+00  1.00e+00  1.09e+00   ------   
  1  +5.6247e-01  +1.0635e+01  1.01e+01  3.31e-01  4.37e+00  3.98e-03  5.50e-01  6.41e-01  
  2  +5.0165e-01  +2.0607e+00  1.56e+00  8.51e-02  1.40e+00  1.26e-02  2.16e-01  8.37e-01  
  3  +4.5137e-01  +1.1828e+00  7.31e-01  2.88e-02  4.84e-01  7.83e-03  8.73e-02  6.76e-01  
  4  +4.1518e-01  +7.3666e-01  3.21e-01  1.02e-02  1.70e-01  4.32e-03  3.49e-02  6.43e-01  
  5  +3.9762e-01  +6.5338e-01  2.56e-01  6.89e-03  1.15e-01  3.31e-03  2.50e-02  3.61e-01  
  6  +3.7951e-01  +5.5071e-01  1.71e-01  4.31e-03  7.19e-02  2.02e-03  1.71e-02  3.54e-01  
  7  +3.4906e-01  +3.7869e-01  2.96e-02  7.30e-04  1.21e-02  3.40e-05  3.46e-03  9.39e-01  
  8  +3.4074e-01  +3.4154e-01  8.02e-04  1.94e-05  3.20e-04  7.96e-07  9.76e-05  9.74e-01  
  9  +3.4051e-01  +3.4054e-01  3.09e-05  7.50e-07  1.24e-05  2.65e-08  3.89e-06  9.61e-01  
 10  +3.4050e-01  +3.4050e-01  3.16e-07  7.69e-09  1.27e-07  2.76e-10  4.02e-08  9.90e-01  
 11  +3.4050e-01  +3.4050e-01  3.17e-09  7.72e-11  1.27e-09  2.78e-12  4.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 788.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:46 PM: Optimal value: 3.405e-01
(CVXPY) Oct 06 03:49:46 PM: Compilation took 4.600e-03 seconds
(CVXPY) Oct 06 03:49:46 PM: Solver (including time spent in interface) took 5.091e-03 seconds
Iteration: 3, Objective: 0.3405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:46 PM: Your problem has 78 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:46 PM: Finished problem compilation (took 8.621e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 78
  constraints   = 128
  nnz(P)        = 0
  nnz(A)        = 522
  cones (total) = 1
    : Nonnegative = 1,  numel = 128

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8935e-01  +5.1592e+01  5.11e+01  8.73e-01  8.14e+00  1.00e+00  1.09e+00   ------   
  1  +5.5825e-01  +1.0682e+01  1.01e+01  3.36e-01  4.36e+00  3.96e-03  5.55e-01  6.37e-01  
  2  +4.9765e-01  +2.0611e+00  1.56e+00  8.46e-02  1.37e+00  1.29e-02  2.16e-01  8.44e-01  
  3  +4.4511e-01  +1.1447e+00  7.00e-01  2.74e-02  4.56e-01  7.62e-03  8.38e-02  6.89e-01  
  4  +4.0847e-01  +7.6450e-01  3.56e-01  1.08e-02  1.79e-01  4.65e-03  3.71e-02  6.31e-01  
  5  +3.8820e-01  +6.4732e-01  2.59e-01  6.62e-03  1.10e-01  3.44e-03  2.45e-02  3.99e-01  
  6  +3.7134e-01  +5.3664e-01  1.65e-01  4.06e-03  6.71e-02  2.07e-03  1.64e-02  3.83e-01  
  7  +3.4544e-01  +3.6364e-01  1.82e-02  4.63e-04  7.56e-03  4.57e-05  2.19e-03  9.81e-01  
  8  +3.4072e-01  +3.4147e-01  7.51e-04  1.90e-05  3.11e-04  1.63e-06  9.39e-05  9.58e-01  
  9  +3.4051e-01  +3.4055e-01  3.59e-05  9.16e-07  1.49e-05  7.94e-08  4.68e-06  9.62e-01  
 10  +3.4050e-01  +3.4050e-01  3.65e-07  9.31e-09  1.52e-07  8.04e-10  4.78e-08  9.90e-01  
 11  +3.4050e-01  +3.4050e-01  3.65e-09  9.32e-11  1.52e-09  8.04e-12  4.78e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 829.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:46 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:46 PM: Optimal value: 3.405e-01
(CVXPY) Oct 06 03:49:46 PM: Compilation took 8.621e-03 seconds
(CVXPY) Oct 06 03:49:46 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.64
  Our objective: 0.28

IF 
    (x0 = 0 AND x1 = 0 AND x3 = 0)            <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x3 = 1)                       <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.117862939834595
Best over terms:
  Our final objective: 0.11999999999999997
    Its accruacy: 0.56
    Its hamming distance: 3
  Shortest hamming distance: 2
    Its our objective: 0.09999999999999999
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

