Command:
python test_script.py -s constant_subclass -d 8 -n 50 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 8.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:50 PM: Your problem has 42 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:50 PM: Finished problem compilation (took 3.864e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 67
  nnz(P)        = 0
  nnz(A)        = 292
  cones (total) = 1
    : Nonnegative = 1,  numel = 67

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9420e-01  +2.6417e+01  2.59e+01  8.33e-01  6.69e+00  1.00e+00  1.09e+00   ------   
  1  +5.6551e-01  +5.7391e+00  5.17e+00  3.52e-01  3.83e+00  3.76e-03  6.00e-01  6.11e-01  
  2  +4.7952e-01  +1.1857e+00  7.06e-01  7.51e-02  1.01e+00  1.92e-02  2.07e-01  9.86e-01  
  3  +4.0553e-01  +7.3681e-01  3.31e-01  1.96e-02  2.77e-01  1.33e-02  6.37e-02  7.63e-01  
  4  +3.6527e-01  +4.4745e-01  8.22e-02  4.30e-03  5.92e-02  2.62e-03  1.72e-02  7.68e-01  
  5  +3.4280e-01  +3.5247e-01  9.67e-03  4.37e-04  6.00e-03  1.69e-04  2.26e-03  9.24e-01  
  6  +3.4013e-01  +3.4023e-01  1.00e-04  4.50e-06  6.17e-05  1.70e-06  2.39e-05  9.90e-01  
  7  +3.4010e-01  +3.4010e-01  1.00e-06  4.50e-08  6.17e-07  1.70e-08  2.39e-07  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  1.00e-08  4.50e-10  6.17e-09  1.70e-10  2.39e-09  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  1.00e-10  4.50e-12  6.17e-11  1.70e-12  2.39e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 540.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:50 PM: Optimal value: 3.401e-01
(CVXPY) Oct 06 04:06:50 PM: Compilation took 3.864e-02 seconds
(CVXPY) Oct 06 04:06:50 PM: Solver (including time spent in interface) took 8.880e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:50 PM: Your problem has 52 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:50 PM: Finished problem compilation (took 1.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 52
  constraints   = 77
  nnz(P)        = 0
  nnz(A)        = 338
  cones (total) = 1
    : Nonnegative = 1,  numel = 77

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8635e-01  +2.6817e+01  2.63e+01  8.45e-01  6.50e+00  1.00e+00  1.11e+00   ------   
  1  +5.2027e-01  +5.7676e+00  5.25e+00  3.60e-01  3.58e+00  3.81e-03  6.02e-01  6.15e-01  
  2  +4.1000e-01  +1.3998e+00  9.90e-01  8.44e-02  1.07e+00  2.03e-02  2.25e-01  8.96e-01  
  3  +3.1934e-01  +6.5616e-01  3.37e-01  2.08e-02  2.67e-01  7.91e-03  7.03e-02  7.48e-01  
  4  +2.8153e-01  +3.9001e-01  1.08e-01  6.37e-03  8.25e-02  2.30e-03  2.44e-02  6.90e-01  
  5  +2.6183e-01  +2.6797e-01  6.15e-03  3.70e-04  4.75e-03  6.52e-05  1.60e-03  9.59e-01  
  6  +2.6034e-01  +2.6052e-01  1.75e-04  1.06e-05  1.35e-04  1.54e-06  4.66e-05  9.71e-01  
  7  +2.6030e-01  +2.6030e-01  2.07e-06  1.26e-07  1.61e-06  1.53e-08  5.69e-07  9.89e-01  
  8  +2.6030e-01  +2.6030e-01  2.07e-08  1.26e-09  1.61e-08  1.53e-10  5.69e-09  9.90e-01  
  9  +2.6030e-01  +2.6030e-01  2.07e-10  1.26e-11  1.61e-10  1.53e-12  5.69e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 556.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:50 PM: Optimal value: 2.603e-01
(CVXPY) Oct 06 04:06:50 PM: Compilation took 1.126e-02 seconds
(CVXPY) Oct 06 04:06:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:50 PM: Your problem has 62 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:50 PM: Finished problem compilation (took 4.719e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 87
  nnz(P)        = 0
  nnz(A)        = 385
  cones (total) = 1
    : Nonnegative = 1,  numel = 87

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7813e-01  +2.7149e+01  2.67e+01  8.53e-01  6.34e+00  1.00e+00  1.12e+00   ------   
  1  +4.6822e-01  +5.7751e+00  5.31e+00  3.62e-01  3.37e+00  3.90e-03  5.92e-01  6.21e-01  
  2  +3.2737e-01  +1.3163e+00  9.89e-01  7.24e-02  8.92e-01  2.03e-02  1.90e-01  9.14e-01  
  3  +2.5964e-01  +5.3428e-01  2.75e-01  1.78e-02  2.23e-01  6.37e-03  5.42e-02  7.61e-01  
  4  +2.2760e-01  +3.1983e-01  9.22e-02  5.11e-03  6.48e-02  2.27e-03  1.71e-02  7.44e-01  
  5  +2.1170e-01  +2.5245e-01  4.08e-02  1.85e-03  2.35e-02  9.07e-04  6.90e-03  7.13e-01  
  6  +2.0320e-01  +2.1086e-01  7.66e-03  3.56e-04  4.52e-03  7.83e-05  1.36e-03  9.90e-01  
  7  +2.0063e-01  +2.0118e-01  5.44e-04  2.53e-05  3.18e-04  4.10e-06  1.00e-04  9.27e-01  
  8  +2.0042e-01  +2.0048e-01  5.28e-05  2.49e-06  3.05e-05  3.03e-07  1.17e-05  9.19e-01  
  9  +2.0040e-01  +2.0040e-01  9.27e-07  4.38e-08  5.36e-07  6.38e-09  2.13e-07  9.90e-01  
 10  +2.0040e-01  +2.0040e-01  9.26e-09  4.38e-10  5.35e-09  6.37e-11  2.13e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 833.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:50 PM: Optimal value: 2.004e-01
(CVXPY) Oct 06 04:06:50 PM: Compilation took 4.719e-03 seconds
(CVXPY) Oct 06 04:06:50 PM: Solver (including time spent in interface) took 4.093e-03 seconds
Iteration: 3, Objective: 0.2004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:50 PM: Your problem has 72 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:50 PM: Finished problem compilation (took 4.126e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 97
  nnz(P)        = 0
  nnz(A)        = 438
  cones (total) = 1
    : Nonnegative = 1,  numel = 97

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6861e-01  +2.7599e+01  2.71e+01  8.62e-01  6.26e+00  1.00e+00  1.15e+00   ------   
  1  +4.0304e-01  +5.9892e+00  5.59e+00  3.72e-01  3.35e+00  3.98e-03  6.14e-01  6.04e-01  
  2  +2.1481e-01  +2.2214e+00  2.01e+00  1.22e-01  1.36e+00  2.05e-02  2.92e-01  6.90e-01  
  3  +1.8118e-01  +5.3295e-01  3.52e-01  2.35e-02  2.80e-01  8.42e-03  6.83e-02  8.01e-01  
  4  +1.3178e-01  +2.8556e-01  1.54e-01  9.50e-03  1.14e-01  3.07e-03  3.16e-02  6.56e-01  
  5  +1.0489e-01  +1.2261e-01  1.77e-02  1.08e-03  1.28e-02  1.91e-04  4.00e-03  9.38e-01  
  6  +1.0082e-01  +1.0157e-01  7.45e-04  4.58e-05  5.39e-04  5.77e-06  1.76e-04  9.61e-01  
  7  +1.0063e-01  +1.0071e-01  8.59e-05  5.42e-06  6.13e-05  4.25e-07  2.50e-05  8.94e-01  
  8  +1.0060e-01  +1.0060e-01  2.21e-06  1.40e-07  1.58e-06  1.31e-08  6.81e-07  9.90e-01  
  9  +1.0060e-01  +1.0060e-01  2.21e-08  1.40e-09  1.58e-08  1.31e-10  6.81e-09  9.90e-01  
 10  +1.0060e-01  +1.0060e-01  2.21e-10  1.40e-11  1.58e-10  1.31e-12  6.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 732.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:50 PM: Optimal value: 1.006e-01
(CVXPY) Oct 06 04:06:50 PM: Compilation took 4.126e-03 seconds
(CVXPY) Oct 06 04:06:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1006
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:50 PM: Your problem has 82 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:50 PM: Finished problem compilation (took 5.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 82
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 471
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6616e-01  +2.7600e+01  2.71e+01  8.68e-01  6.07e+00  1.00e+00  1.14e+00   ------   
  1  +3.7631e-01  +6.1107e+00  5.73e+00  3.83e-01  3.24e+00  4.05e-03  6.18e-01  5.92e-01  
  2  +1.5973e-01  +2.5703e+00  2.41e+00  1.40e-01  1.46e+00  2.26e-02  3.22e-01  6.45e-01  
  3  +1.5407e-01  +4.8796e-01  3.34e-01  2.35e-02  2.65e-01  1.08e-02  6.71e-02  8.53e-01  
  4  +1.0394e-01  +2.2538e-01  1.21e-01  7.99e-03  9.10e-02  3.01e-03  2.62e-02  7.48e-01  
  5  +8.8326e-02  +1.2825e-01  3.99e-02  2.51e-03  2.89e-02  9.63e-04  8.79e-03  6.81e-01  
  6  +8.1005e-02  +8.2215e-02  1.21e-03  7.73e-05  8.83e-04  1.32e-05  2.81e-04  9.82e-01  
  7  +8.0739e-02  +8.0895e-02  1.56e-04  1.03e-05  1.13e-04  1.06e-06  4.35e-05  8.74e-01  
  8  +8.0702e-02  +8.0709e-02  6.78e-06  4.47e-07  4.88e-06  4.62e-08  2.00e-06  9.72e-01  
  9  +8.0700e-02  +8.0700e-02  6.84e-08  4.51e-09  4.92e-08  4.66e-10  2.02e-08  9.90e-01  
 10  +8.0700e-02  +8.0700e-02  6.85e-10  4.51e-11  4.92e-10  4.66e-12  2.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5403ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:50 PM: Optimal value: 8.070e-02
(CVXPY) Oct 06 04:06:50 PM: Compilation took 5.004e-03 seconds
(CVXPY) Oct 06 04:06:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:51 PM: Your problem has 84 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:51 PM: Finished problem compilation (took 5.036e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 480
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6384e-01  +2.7571e+01  2.71e+01  8.69e-01  6.04e+00  1.00e+00  1.14e+00   ------   
  1  +3.5823e-01  +6.1314e+00  5.77e+00  3.83e-01  3.22e+00  4.10e-03  6.14e-01  5.90e-01  
  2  +1.2882e-01  +2.5313e+00  2.40e+00  1.38e-01  1.43e+00  2.30e-02  3.16e-01  6.54e-01  
  3  +1.3437e-01  +4.6829e-01  3.34e-01  2.41e-02  2.69e-01  1.08e-02  6.82e-02  8.49e-01  
  4  +8.5371e-02  +2.0448e-01  1.19e-01  7.58e-03  8.74e-02  3.08e-03  2.53e-02  8.05e-01  
  5  +6.6991e-02  +9.7229e-02  3.02e-02  1.81e-03  2.12e-02  7.25e-04  6.42e-03  7.74e-01  
  6  +6.0979e-02  +6.1688e-02  7.08e-04  4.28e-05  4.99e-04  9.57e-06  1.57e-04  9.79e-01  
  7  +6.0813e-02  +6.0855e-02  4.24e-05  2.77e-06  3.09e-05  2.80e-07  1.12e-05  9.39e-01  
  8  +6.0800e-02  +6.0801e-02  4.86e-07  3.20e-08  3.55e-07  3.27e-09  1.32e-07  9.89e-01  
  9  +6.0800e-02  +6.0800e-02  4.86e-09  3.20e-10  3.55e-09  3.27e-11  1.32e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 765.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:51 PM: Optimal value: 6.080e-02
(CVXPY) Oct 06 04:06:51 PM: Compilation took 5.036e-03 seconds
(CVXPY) Oct 06 04:06:51 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:51 PM: Your problem has 94 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:51 PM: Finished problem compilation (took 3.014e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 94
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 515
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5803e-01  +2.7758e+01  2.73e+01  8.74e-01  5.89e+00  1.00e+00  1.15e+00   ------   
  1  +3.0861e-01  +6.3809e+00  6.07e+00  3.96e-01  3.15e+00  4.24e-03  6.25e-01  5.70e-01  
  2  +8.3324e-02  +2.9022e+00  2.82e+00  1.62e-01  1.57e+00  2.43e-02  3.62e-01  5.94e-01  
  3  +1.2044e-01  +4.2305e-01  3.03e-01  2.34e-02  2.47e-01  1.39e-02  6.75e-02  9.12e-01  
  4  +8.0452e-02  +1.7917e-01  9.87e-02  7.09e-03  7.68e-02  4.27e-03  2.21e-02  7.49e-01  
  5  +6.5590e-02  +8.6552e-02  2.10e-02  1.56e-03  1.68e-02  7.29e-05  5.04e-03  9.54e-01  
  6  +6.0996e-02  +6.1974e-02  9.78e-04  7.14e-05  7.70e-04  3.39e-06  2.39e-04  9.60e-01  
  7  +6.0831e-02  +6.1021e-02  1.89e-04  1.46e-05  1.52e-04  6.45e-07  5.36e-05  7.95e-01  
  8  +6.0802e-02  +6.0810e-02  8.19e-06  6.39e-07  6.61e-06  3.79e-08  2.40e-06  9.71e-01  
  9  +6.0800e-02  +6.0800e-02  8.22e-08  6.41e-09  6.63e-08  3.80e-10  2.41e-08  9.90e-01  
 10  +6.0800e-02  +6.0800e-02  8.23e-10  6.42e-11  6.64e-10  3.81e-12  2.41e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 835.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:51 PM: Optimal value: 6.080e-02
(CVXPY) Oct 06 04:06:51 PM: Compilation took 3.014e-03 seconds
(CVXPY) Oct 06 04:06:51 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:51 PM: Your problem has 97 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:51 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 122
  nnz(P)        = 0
  nnz(A)        = 523
  cones (total) = 1
    : Nonnegative = 1,  numel = 122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5630e-01  +2.7664e+01  2.72e+01  8.75e-01  5.84e+00  1.00e+00  1.14e+00   ------   
  1  +2.8753e-01  +6.4984e+00  6.21e+00  3.98e-01  3.13e+00  4.34e-03  6.23e-01  5.60e-01  
  2  +6.6461e-02  +3.0313e+00  2.96e+00  1.71e-01  1.62e+00  2.43e-02  3.73e-01  5.64e-01  
  3  +1.1276e-01  +4.0677e-01  2.94e-01  2.32e-02  2.41e-01  1.51e-02  6.62e-02  9.33e-01  
  4  +6.6777e-02  +1.7433e-01  1.08e-01  7.07e-03  7.78e-02  5.03e-03  2.22e-02  8.04e-01  
  5  +4.6387e-02  +6.8991e-02  2.26e-02  1.48e-03  1.65e-02  9.25e-05  4.81e-03  9.66e-01  
  6  +4.1189e-02  +4.2011e-02  8.23e-04  5.27e-05  5.87e-04  2.68e-06  1.75e-04  9.64e-01  
  7  +4.1026e-02  +4.1148e-02  1.22e-04  8.43e-06  9.04e-05  4.04e-07  2.94e-05  8.44e-01  
  8  +4.1000e-02  +4.1002e-02  1.46e-06  1.02e-07  1.08e-06  4.71e-09  3.59e-07  9.88e-01  
  9  +4.1000e-02  +4.1000e-02  1.46e-08  1.02e-09  1.08e-08  4.71e-11  3.59e-09  9.90e-01  
 10  +4.1000e-02  +4.1000e-02  1.46e-10  1.02e-11  1.08e-10  4.71e-13  3.59e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 881.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:51 PM: Optimal value: 4.100e-02
(CVXPY) Oct 06 04:06:51 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:06:51 PM: Solver (including time spent in interface) took 8.008e-03 seconds
Iteration: 8, Objective: 0.0410
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:51 PM: Your problem has 98 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:51 PM: Finished problem compilation (took 6.545e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 98
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 525
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5545e-01  +2.7699e+01  2.72e+01  8.76e-01  5.83e+00  1.00e+00  1.14e+00   ------   
  1  +2.6713e-01  +6.5010e+00  6.23e+00  3.93e-01  3.09e+00  4.39e-03  6.18e-01  5.61e-01  
  2  +5.3066e-02  +2.7283e+00  2.68e+00  1.60e-01  1.52e+00  2.45e-02  3.52e-01  6.08e-01  
  3  +9.7940e-02  +3.8335e-01  2.85e-01  2.28e-02  2.34e-01  1.32e-02  6.41e-02  9.11e-01  
  4  +5.6009e-02  +2.0571e-01  1.50e-01  9.36e-03  1.04e-01  6.44e-03  2.94e-02  7.08e-01  
  5  +2.6447e-02  +5.1170e-02  2.47e-02  1.44e-03  1.62e-02  7.79e-04  4.82e-03  8.91e-01  
  6  +2.1254e-02  +2.1781e-02  5.27e-04  3.13e-05  3.51e-04  7.61e-06  1.07e-04  9.80e-01  
  7  +2.1110e-02  +2.1144e-02  3.34e-05  2.17e-06  2.33e-05  3.81e-07  8.04e-06  9.37e-01  
  8  +2.1100e-02  +2.1100e-02  3.44e-07  2.25e-08  2.41e-07  3.87e-09  8.39e-08  9.90e-01  
  9  +2.1100e-02  +2.1100e-02  3.44e-09  2.25e-10  2.41e-09  3.88e-11  8.40e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1964ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:51 PM: Optimal value: 2.110e-02
(CVXPY) Oct 06 04:06:51 PM: Compilation took 6.545e-03 seconds
(CVXPY) Oct 06 04:06:51 PM: Solver (including time spent in interface) took 3.238e-03 seconds
Iteration: 9, Objective: 0.0211
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:51 PM: Your problem has 100 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:51 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 100
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 531
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5539e-01  +2.7745e+01  2.73e+01  8.77e-01  5.80e+00  1.00e+00  1.15e+00   ------   
  1  +2.6069e-01  +6.5190e+00  6.26e+00  3.93e-01  3.07e+00  4.41e-03  6.17e-01  5.61e-01  
  2  +5.3484e-02  +2.7197e+00  2.67e+00  1.62e-01  1.52e+00  2.41e-02  3.54e-01  6.03e-01  
  3  +9.5017e-02  +3.7512e-01  2.80e-01  2.24e-02  2.30e-01  1.27e-02  6.33e-02  9.12e-01  
  4  +6.1751e-02  +2.2690e-01  1.65e-01  1.13e-02  1.22e-01  7.53e-03  3.38e-02  5.55e-01  
  5  +3.6708e-02  +1.0488e-01  6.82e-02  4.18e-03  4.68e-02  3.05e-03  1.33e-02  6.32e-01  
  6  +2.1596e-02  +2.3567e-02  1.97e-03  1.20e-04  1.34e-03  5.06e-05  3.98e-04  9.77e-01  
  7  +2.1154e-02  +2.1357e-02  2.03e-04  1.34e-05  1.44e-04  3.08e-06  4.69e-05  8.92e-01  
  8  +2.1102e-02  +2.1109e-02  6.88e-06  4.67e-07  4.95e-06  9.96e-08  1.69e-06  9.68e-01  
  9  +2.1100e-02  +2.1100e-02  6.87e-08  4.67e-09  4.95e-08  9.96e-10  1.69e-08  9.90e-01  
 10  +2.1100e-02  +2.1100e-02  6.88e-10  4.68e-11  4.96e-10  9.96e-12  1.69e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 945µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:51 PM: Optimal value: 2.110e-02
(CVXPY) Oct 06 04:06:51 PM: Compilation took 5.006e-03 seconds
(CVXPY) Oct 06 04:06:51 PM: Solver (including time spent in interface) took 5.079e-03 seconds
FULL MODEL:
  Accruacy: 0.98
  Our objective: 0.96

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x7 = 0)            <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x4 = 1 AND x7 = 1)                       <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0)                       <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x3 = 1 AND x7 = 1)                       <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x6 = 1)            <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.08)
 OR (x2 = 0 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.04)
 OR (x3 = 1 AND x4 = 1 AND x6 = 0)                       <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.754055738449097
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 4
  Shortest hamming distance: 1
    Its our objective: 0.12
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

