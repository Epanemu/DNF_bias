Command:
python test_script.py -s constant_subclass -d 5 -n 500 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.24399999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:34 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:34 PM: Finished problem compilation (took 5.491e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +2.5081e+02  2.50e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9873e-01  +5.0512e+01  4.99e+01  3.44e-01  1.15e+01  3.99e-03  5.05e-01  6.45e-01  
  2  +5.4289e-01  +7.2732e+00  6.73e+00  1.15e-01  4.69e+00  1.01e-02  2.24e-01  8.11e-01  
  3  +5.0131e-01  +1.3299e+00  8.29e-01  2.47e-02  9.77e-01  8.09e-04  1.94e-01  5.28e-01  
  4  +4.9992e-01  +6.7334e-01  1.73e-01  5.19e-03  2.11e-01  2.23e-04  4.31e-02  8.24e-01  
  5  +4.8540e-01  +8.7720e-01  3.92e-01  2.30e-03  9.60e-02  2.46e-03  7.33e-03  9.27e-01  
  6  +4.6653e-01  +5.5266e-01  8.61e-02  4.39e-04  1.82e-02  2.58e-05  1.55e-03  8.79e-01  
  7  +4.5313e-01  +4.8489e-01  3.18e-02  1.44e-04  5.98e-03  1.61e-05  5.84e-04  7.72e-01  
  8  +4.4565e-01  +4.5060e-01  4.95e-03  2.10e-05  8.67e-04  4.10e-06  9.41e-05  9.85e-01  
  9  +4.4415e-01  +4.4432e-01  1.64e-04  6.88e-07  2.85e-05  1.39e-07  3.15e-06  9.90e-01  
 10  +4.4410e-01  +4.4410e-01  1.64e-06  6.87e-09  2.85e-07  1.39e-09  3.15e-08  9.90e-01  
 11  +4.4410e-01  +4.4410e-01  1.64e-08  6.87e-11  2.85e-09  1.39e-11  3.15e-10  9.90e-01  
 12  +4.4410e-01  +4.4410e-01  1.64e-10  6.87e-13  2.85e-11  1.39e-13  3.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.1332ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:34 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:34 PM: Optimal value: 4.441e-01
(CVXPY) Oct 06 03:53:34 PM: Compilation took 5.491e-02 seconds
(CVXPY) Oct 06 03:53:34 PM: Solver (including time spent in interface) took 5.016e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:34 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:34 PM: Finished problem compilation (took 2.110e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2499
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +2.5116e+02  2.51e+02  9.34e-01  2.11e+01  1.00e+00  1.01e+00   ------   
  1  +5.9525e-01  +5.0716e+01  5.01e+01  3.48e-01  1.20e+01  3.98e-03  5.10e-01  6.43e-01  
  2  +5.3915e-01  +6.8698e+00  6.33e+00  1.08e-01  4.61e+00  1.06e-02  2.13e-01  8.48e-01  
  3  +5.0096e-01  +1.4232e+00  9.22e-01  2.77e-02  1.15e+00  1.48e-03  1.72e-01  6.35e-01  
  4  +4.9721e-01  +8.9474e-01  3.98e-01  1.02e-02  4.38e-01  1.30e-03  4.30e-02  8.67e-01  
  5  +4.7058e-01  +7.8964e-01  3.19e-01  2.11e-03  9.27e-02  5.16e-03  6.88e-03  8.76e-01  
  6  +4.6313e-01  +7.2227e-01  2.59e-01  1.54e-03  6.74e-02  4.11e-03  5.08e-03  3.21e-01  
  7  +4.5339e-01  +6.1026e-01  1.57e-01  8.51e-04  3.71e-02  1.07e-03  2.77e-03  8.31e-01  
  8  +4.4458e-01  +5.6339e-01  1.19e-01  4.22e-04  1.84e-02  9.15e-04  1.31e-03  7.11e-01  
  9  +4.3437e-01  +5.0999e-01  7.56e-02  3.59e-04  1.56e-02  1.03e-04  1.22e-03  3.94e-01  
 10  +4.3390e-01  +5.0960e-01  7.57e-02  3.44e-04  1.50e-02  1.03e-04  1.16e-03  1.22e-01  
 11  +4.3335e-01  +5.0389e-01  7.05e-02  3.13e-04  1.36e-02  7.83e-05  1.07e-03  4.63e-01  
 12  +4.1963e-01  +4.5313e-01  3.35e-02  1.19e-04  5.17e-03  4.20e-05  4.08e-04  7.11e-01  
 13  +4.1581e-01  +4.4242e-01  2.66e-02  8.90e-05  3.87e-03  3.55e-05  3.02e-04  4.15e-01  
 14  +4.0656e-01  +4.0744e-01  8.83e-04  2.90e-06  1.26e-04  7.34e-07  1.02e-05  9.73e-01  
 15  +4.0620e-01  +4.0621e-01  8.87e-06  2.91e-08  1.26e-06  7.38e-09  1.03e-07  9.90e-01  
 16  +4.0620e-01  +4.0620e-01  8.87e-08  2.91e-10  1.26e-08  7.38e-11  1.03e-09  9.90e-01  
 17  +4.0620e-01  +4.0620e-01  8.87e-10  2.91e-12  1.26e-10  7.38e-13  1.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.3386ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:34 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:34 PM: Optimal value: 4.062e-01
(CVXPY) Oct 06 03:53:34 PM: Compilation took 2.110e-03 seconds
(CVXPY) Oct 06 03:53:34 PM: Solver (including time spent in interface) took 4.610e-03 seconds
Iteration: 2, Objective: 0.4062
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:34 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:34 PM: Finished problem compilation (took 1.005e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 2751
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9884e-01  +2.5124e+02  2.51e+02  9.35e-01  2.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.9371e-01  +5.0822e+01  5.02e+01  3.51e-01  1.21e+01  3.98e-03  5.13e-01  6.42e-01  
  2  +5.3786e-01  +6.7403e+00  6.20e+00  1.06e-01  4.49e+00  1.09e-02  2.09e-01  8.63e-01  
  3  +5.0085e-01  +1.4511e+00  9.50e-01  2.88e-02  1.21e+00  1.72e-03  1.63e-01  6.82e-01  
  4  +4.9683e-01  +1.1215e+00  6.25e-01  1.54e-02  6.66e-01  1.98e-03  6.04e-02  6.97e-01  
  5  +4.6820e-01  +8.7747e-01  4.09e-01  2.71e-03  1.20e-01  6.44e-03  8.47e-03  8.85e-01  
  6  +4.5980e-01  +8.6455e-01  4.05e-01  2.05e-03  9.15e-02  7.19e-03  6.16e-03  3.58e-01  
  7  +4.5823e-01  +8.0519e-01  3.47e-01  1.86e-03  8.28e-02  3.41e-03  5.70e-03  3.55e-01  
  8  +4.4834e-01  +7.4978e-01  3.01e-01  1.41e-03  6.27e-02  2.75e-03  4.42e-03  3.20e-01  
  9  +4.4590e-01  +7.2359e-01  2.78e-01  1.39e-03  6.15e-02  2.19e-03  4.41e-03  5.56e-02  
 10  +4.2212e-01  +5.8364e-01  1.62e-01  7.13e-04  3.13e-02  1.12e-03  2.43e-03  4.87e-01  
 11  +4.2174e-01  +5.8103e-01  1.59e-01  7.02e-04  3.08e-02  1.08e-03  2.39e-03  4.75e-02  
 12  +3.9675e-01  +4.4745e-01  5.07e-02  2.08e-04  9.09e-03  2.17e-04  7.77e-04  7.54e-01  
 13  +3.9300e-01  +4.3205e-01  3.91e-02  1.61e-04  7.01e-03  1.23e-04  6.21e-04  3.81e-01  
 14  +3.8559e-01  +4.0235e-01  1.68e-02  6.47e-05  2.82e-03  4.98e-05  2.57e-04  6.52e-01  
 15  +3.8058e-01  +3.8109e-01  5.08e-04  1.95e-06  8.50e-05  8.82e-07  8.01e-06  9.85e-01  
 16  +3.8040e-01  +3.8041e-01  5.10e-06  1.96e-08  8.53e-07  8.85e-09  8.06e-08  9.90e-01  
 17  +3.8040e-01  +3.8040e-01  5.10e-08  1.96e-10  8.53e-09  8.85e-11  8.06e-10  9.90e-01  
 18  +3.8040e-01  +3.8040e-01  5.10e-10  1.96e-12  8.53e-11  8.85e-13  8.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.326ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:34 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:34 PM: Optimal value: 3.804e-01
(CVXPY) Oct 06 03:53:34 PM: Compilation took 1.005e-02 seconds
(CVXPY) Oct 06 03:53:34 PM: Solver (including time spent in interface) took 5.006e-03 seconds
Iteration: 3, Objective: 0.3804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:35 PM: Your problem has 285 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:35 PM: Finished problem compilation (took 9.253e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 285
  constraints   = 535
  nnz(P)        = 0
  nnz(A)        = 2834
  cones (total) = 1
    : Nonnegative = 1,  numel = 535

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9880e-01  +2.5119e+02  2.51e+02  9.35e-01  2.12e+01  1.00e+00  1.01e+00   ------   
  1  +5.9277e-01  +5.0901e+01  5.03e+01  3.53e-01  1.20e+01  3.98e-03  5.13e-01  6.41e-01  
  2  +5.3717e-01  +6.6684e+00  6.13e+00  1.05e-01  4.42e+00  1.10e-02  2.07e-01  8.70e-01  
  3  +5.0002e-01  +1.3532e+00  8.53e-01  2.59e-02  1.09e+00  1.61e-03  1.53e-01  7.81e-01  
  4  +4.9560e-01  +1.2477e+00  7.52e-01  1.74e-02  7.49e-01  2.32e-03  6.45e-02  6.99e-01  
  5  +4.6501e-01  +8.4362e-01  3.79e-01  2.49e-03  1.10e-01  6.28e-03  7.76e-03  8.92e-01  
  6  +4.5886e-01  +8.5187e-01  3.93e-01  2.03e-03  8.99e-02  7.04e-03  6.06e-03  3.31e-01  
  7  +4.5758e-01  +8.0182e-01  3.44e-01  1.91e-03  8.46e-02  4.10e-03  5.83e-03  2.33e-01  
  8  +4.3523e-01  +6.6632e-01  2.31e-01  1.02e-03  4.51e-02  1.75e-03  3.25e-03  6.73e-01  
  9  +4.0944e-01  +5.1059e-01  1.01e-01  4.46e-04  1.95e-02  1.58e-05  1.59e-03  8.48e-01  
 10  +3.8751e-01  +4.1517e-01  2.77e-02  1.11e-04  4.82e-03  1.60e-05  4.34e-04  8.59e-01  
 11  +3.7982e-01  +3.8349e-01  3.67e-03  1.46e-05  6.32e-04  3.22e-06  6.04e-05  9.55e-01  
 12  +3.7855e-01  +3.7867e-01  1.22e-04  4.83e-07  2.10e-05  1.17e-07  2.04e-06  9.90e-01  
 13  +3.7850e-01  +3.7850e-01  1.22e-06  4.84e-09  2.10e-07  1.17e-09  2.04e-08  9.90e-01  
 14  +3.7850e-01  +3.7850e-01  1.22e-08  4.84e-11  2.10e-09  1.17e-11  2.04e-10  9.90e-01  
 15  +3.7850e-01  +3.7850e-01  1.22e-10  4.84e-13  2.10e-11  1.17e-13  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4939ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:35 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:35 PM: Optimal value: 3.785e-01
(CVXPY) Oct 06 03:53:35 PM: Compilation took 9.253e-03 seconds
(CVXPY) Oct 06 03:53:35 PM: Solver (including time spent in interface) took 6.009e-03 seconds
Iteration: 4, Objective: 0.3785
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:35 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:35 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 2889
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9879e-01  +2.5113e+02  2.51e+02  9.36e-01  2.12e+01  1.00e+00  1.01e+00   ------   
  1  +5.9241e-01  +5.0952e+01  5.04e+01  3.55e-01  1.19e+01  3.98e-03  5.14e-01  6.40e-01  
  2  +5.3675e-01  +6.6247e+00  6.09e+00  1.05e-01  4.37e+00  1.11e-02  2.06e-01  8.74e-01  
  3  +4.9944e-01  +1.2799e+00  7.80e-01  2.38e-02  9.95e-01  1.51e-03  1.47e-01  8.58e-01  
  4  +4.9184e-01  +1.1581e+00  6.66e-01  1.30e-02  5.61e-01  2.76e-03  4.56e-02  7.93e-01  
  5  +4.6273e-01  +8.2490e-01  3.62e-01  2.51e-03  1.10e-01  5.62e-03  7.90e-03  8.35e-01  
  6  +4.5909e-01  +8.3751e-01  3.78e-01  2.12e-03  9.38e-02  5.66e-03  6.47e-03  3.60e-01  
  7  +4.5594e-01  +7.9537e-01  3.39e-01  1.87e-03  8.25e-02  3.37e-03  5.73e-03  3.62e-01  
  8  +4.3005e-01  +6.2451e-01  1.94e-01  9.07e-04  3.97e-02  1.00e-03  2.98e-03  6.87e-01  
  9  +4.0673e-01  +5.0605e-01  9.93e-02  4.29e-04  1.86e-02  2.89e-04  1.53e-03  6.88e-01  
 10  +3.8525e-01  +4.0600e-01  2.08e-02  8.53e-05  3.70e-03  3.15e-05  3.41e-04  8.77e-01  
 11  +3.7993e-01  +3.8396e-01  4.03e-03  1.65e-05  7.12e-04  5.21e-06  6.87e-05  8.86e-01  
 12  +3.7959e-01  +3.8264e-01  3.05e-03  1.21e-05  5.24e-04  3.78e-06  5.06e-05  4.49e-01  
 13  +3.7886e-01  +3.7981e-01  9.50e-04  3.79e-06  1.64e-04  9.43e-07  1.59e-05  9.90e-01  
 14  +3.7851e-01  +3.7852e-01  1.38e-05  5.46e-08  2.36e-06  1.30e-08  2.31e-07  9.88e-01  
 15  +3.7850e-01  +3.7850e-01  1.38e-07  5.46e-10  2.36e-08  1.30e-10  2.31e-09  9.90e-01  
 16  +3.7850e-01  +3.7850e-01  1.38e-09  5.46e-12  2.36e-10  1.30e-12  2.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0692ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:35 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:35 PM: Optimal value: 3.785e-01
(CVXPY) Oct 06 03:53:35 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:53:35 PM: Solver (including time spent in interface) took 1.024e-02 seconds
FULL MODEL:
  Accruacy: 0.618
  Our objective: 0.23600000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1)                       <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.778987407684326
Best over terms:
  Our final objective: 0.18
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.18
  Highest accruacy: 0.59
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

