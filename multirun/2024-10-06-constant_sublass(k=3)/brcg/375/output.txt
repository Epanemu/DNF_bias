Command:
python test_script.py -s constant_subclass -d 10 -n 500 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.164
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 10.

Computed total variation: 0.8320000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:22 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Finished problem compilation (took 4.697e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 3271
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9977e-01  +2.5107e+02  2.51e+02  9.39e-01  2.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7736e-01  +5.5336e+01  5.48e+01  4.18e-01  1.68e+01  3.75e-03  5.89e-01  5.77e-01  
  2  +5.2571e-01  +6.3153e+00  5.79e+00  1.34e-01  6.83e+00  1.84e-02  2.78e-01  9.90e-01  
  3  +5.0374e-01  +1.3860e+00  8.82e-01  3.12e-02  1.61e+00  5.56e-05  1.41e-01  9.57e-01  
  4  +4.9943e-01  +7.8994e-01  2.91e-01  8.77e-03  4.66e-01  5.00e-05  3.47e-02  8.17e-01  
  5  +4.8661e-01  +7.4066e-01  2.54e-01  2.14e-03  1.17e-01  1.98e-04  6.43e-03  8.29e-01  
  6  +4.6952e-01  +5.9480e-01  1.25e-01  9.41e-04  5.05e-02  6.67e-05  3.12e-03  6.52e-01  
  7  +4.5985e-01  +5.4035e-01  8.05e-02  4.93e-04  2.64e-02  4.87e-05  1.74e-03  6.38e-01  
  8  +4.5549e-01  +5.2020e-01  6.47e-02  3.58e-04  1.91e-02  4.13e-05  1.33e-03  4.00e-01  
  9  +4.4502e-01  +4.7002e-01  2.50e-02  1.14e-04  6.06e-03  1.66e-05  4.76e-04  6.81e-01  
 10  +4.3858e-01  +4.4005e-01  1.47e-03  6.24e-06  3.33e-04  9.98e-07  2.84e-05  9.90e-01  
 11  +4.3810e-01  +4.3812e-01  1.49e-05  6.28e-08  3.35e-06  1.00e-08  2.89e-07  9.90e-01  
 12  +4.3810e-01  +4.3810e-01  1.49e-07  6.28e-10  3.35e-08  1.00e-10  2.89e-09  9.90e-01  
 13  +4.3810e-01  +4.3810e-01  1.49e-09  6.28e-12  3.35e-10  1.00e-12  2.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1354ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:22 PM: Optimal value: 4.381e-01
(CVXPY) Oct 06 04:23:22 PM: Compilation took 4.697e-02 seconds
(CVXPY) Oct 06 04:23:22 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4381
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:22 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 3714
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +2.5145e+02  2.51e+02  9.40e-01  2.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7493e-01  +5.5458e+01  5.49e+01  4.22e-01  1.70e+01  3.75e-03  5.94e-01  5.76e-01  
  2  +5.2327e-01  +6.4660e+00  5.94e+00  1.36e-01  6.96e+00  1.90e-02  2.80e-01  9.90e-01  
  3  +5.0557e-01  +1.3526e+00  8.47e-01  3.00e-02  1.62e+00  1.19e-03  9.48e-02  8.84e-01  
  4  +5.0536e-01  +1.3848e+00  8.79e-01  2.41e-02  1.34e+00  1.60e-03  6.72e-02  3.39e-01  
  5  +5.0262e-01  +1.3426e+00  8.40e-01  2.03e-02  1.12e+00  1.10e-03  6.44e-02  2.68e-01  
  6  +4.9166e-01  +1.1119e+00  6.20e-01  5.35e-03  3.09e-01  2.66e-03  1.39e-02  8.02e-01  
  7  +4.7418e-01  +8.5551e-01  3.81e-01  2.84e-03  1.63e-01  1.11e-03  7.97e-03  5.76e-01  
  8  +4.5718e-01  +7.2099e-01  2.64e-01  1.53e-03  8.70e-02  5.26e-04  4.47e-03  7.03e-01  
  9  +4.4368e-01  +6.2156e-01  1.78e-01  1.01e-03  5.81e-02  1.61e-04  3.07e-03  7.42e-01  
 10  +4.2879e-01  +5.3627e-01  1.07e-01  5.46e-04  3.14e-02  9.83e-05  1.71e-03  5.01e-01  
 11  +4.1740e-01  +4.7469e-01  5.73e-02  2.67e-04  1.55e-02  5.47e-05  8.53e-04  5.70e-01  
 12  +4.0905e-01  +4.3546e-01  2.64e-02  1.11e-04  6.52e-03  2.77e-05  3.58e-04  6.61e-01  
 13  +4.0469e-01  +4.1465e-01  9.96e-03  4.15e-05  2.42e-03  1.16e-05  1.35e-04  9.90e-01  
 14  +4.0147e-01  +4.0200e-01  5.31e-04  2.20e-06  1.29e-04  5.33e-07  7.24e-06  9.54e-01  
 15  +4.0130e-01  +4.0131e-01  5.91e-06  2.45e-08  1.44e-06  5.92e-09  8.09e-08  9.89e-01  
 16  +4.0130e-01  +4.0130e-01  5.91e-08  2.45e-10  1.44e-08  5.92e-11  8.09e-10  9.90e-01  
 17  +4.0130e-01  +4.0130e-01  5.92e-10  2.45e-12  1.44e-10  5.92e-13  8.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.6614ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:22 PM: Optimal value: 4.013e-01
(CVXPY) Oct 06 04:23:22 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:22 PM: Solver (including time spent in interface) took 1.509e-02 seconds
Iteration: 2, Objective: 0.4013
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:22 PM: Your problem has 291 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 291
  constraints   = 541
  nnz(P)        = 0
  nnz(A)        = 4145
  cones (total) = 1
    : Nonnegative = 1,  numel = 541

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9885e-01  +2.5166e+02  2.51e+02  9.40e-01  2.71e+01  1.00e+00  1.02e+00   ------   
  1  +5.7130e-01  +5.5577e+01  5.50e+01  4.25e-01  1.72e+01  3.75e-03  5.96e-01  5.75e-01  
  2  +5.2036e-01  +6.6485e+00  6.13e+00  1.37e-01  7.08e+00  1.97e-02  2.81e-01  9.90e-01  
  3  +5.0692e-01  +1.8702e+00  1.36e+00  4.06e-02  2.26e+00  3.92e-03  1.08e-01  6.81e-01  
  4  +5.0617e-01  +1.8572e+00  1.35e+00  3.43e-02  1.94e+00  4.45e-03  8.81e-02  2.01e-01  
  5  +5.0260e-01  +1.8527e+00  1.35e+00  2.97e-02  1.67e+00  3.23e-03  8.20e-02  3.44e-01  
  6  +4.8641e-01  +1.3842e+00  8.98e-01  7.90e-03  4.68e-01  6.08e-03  1.96e-02  7.74e-01  
  7  +4.7185e-01  +1.1536e+00  6.82e-01  5.09e-03  2.99e-01  4.25e-03  1.31e-02  4.17e-01  
  8  +4.5679e-01  +9.9889e-01  5.42e-01  3.22e-03  1.88e-01  3.06e-03  8.50e-03  5.00e-01  
  9  +4.3602e-01  +8.5856e-01  4.23e-01  1.87e-03  1.09e-01  2.66e-03  5.09e-03  4.60e-01  
 10  +4.1115e-01  +6.6468e-01  2.54e-01  1.20e-03  7.00e-02  2.62e-04  3.45e-03  7.19e-01  
 11  +3.6798e-01  +4.5240e-01  8.44e-02  3.38e-04  1.99e-02  8.11e-05  1.06e-03  7.33e-01  
 12  +3.5146e-01  +3.8690e-01  3.54e-02  1.36e-04  8.02e-03  3.47e-05  4.52e-04  6.23e-01  
 13  +3.3964e-01  +3.4252e-01  2.88e-03  1.07e-05  6.25e-04  3.14e-06  3.77e-05  9.63e-01  
 14  +3.3851e-01  +3.3854e-01  3.18e-05  1.18e-07  6.90e-06  3.44e-08  4.20e-07  9.89e-01  
 15  +3.3850e-01  +3.3850e-01  3.18e-07  1.18e-09  6.90e-08  3.44e-10  4.20e-09  9.90e-01  
 16  +3.3850e-01  +3.3850e-01  3.18e-09  1.18e-11  6.90e-10  3.44e-12  4.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.4202ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:22 PM: Optimal value: 3.385e-01
(CVXPY) Oct 06 04:23:22 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:23:22 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3385
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:22 PM: Your problem has 301 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Finished problem compilation (took 1.509e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 301
  constraints   = 551
  nnz(P)        = 0
  nnz(A)        = 4357
  cones (total) = 1
    : Nonnegative = 1,  numel = 551

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9874e-01  +2.5160e+02  2.51e+02  9.41e-01  2.70e+01  1.00e+00  1.02e+00   ------   
  1  +5.6866e-01  +5.5574e+01  5.50e+01  4.27e-01  1.71e+01  3.75e-03  5.95e-01  5.75e-01  
  2  +5.1841e-01  +6.7691e+00  6.25e+00  1.37e-01  7.02e+00  2.00e-02  2.78e-01  9.90e-01  
  3  +5.0515e-01  +1.6130e+00  1.11e+00  3.05e-02  1.73e+00  3.63e-03  8.01e-02  7.47e-01  
  4  +5.0481e-01  +1.7094e+00  1.20e+00  2.78e-02  1.59e+00  4.14e-03  7.01e-02  2.29e-01  
  5  +4.9806e-01  +2.0908e+00  1.59e+00  2.03e-02  1.18e+00  5.00e-03  4.87e-02  6.99e-01  
  6  +4.7284e-01  +1.5709e+00  1.10e+00  6.97e-03  4.15e-01  6.70e-03  1.68e-02  6.60e-01  
  7  +4.4825e-01  +1.3025e+00  8.54e-01  4.34e-03  2.57e-01  5.19e-03  1.08e-02  4.43e-01  
  8  +4.2238e-01  +9.8652e-01  5.64e-01  2.77e-03  1.62e-01  1.84e-03  7.39e-03  5.83e-01  
  9  +3.9682e-01  +7.2741e-01  3.31e-01  1.79e-03  1.04e-01  1.55e-05  5.16e-03  9.14e-01  
 10  +3.4486e-01  +4.4368e-01  9.88e-02  4.44e-04  2.56e-02  1.36e-05  1.41e-03  7.52e-01  
 11  +3.3056e-01  +3.8540e-01  5.48e-02  2.36e-04  1.39e-02  2.16e-05  7.91e-04  5.81e-01  
 12  +3.1866e-01  +3.3577e-01  1.71e-02  7.16e-05  4.24e-03  9.04e-06  2.57e-04  7.38e-01  
 13  +3.1322e-01  +3.1446e-01  1.24e-03  5.08e-06  3.03e-04  1.11e-06  1.94e-05  9.78e-01  
 14  +3.1271e-01  +3.1272e-01  1.52e-05  6.19e-08  3.70e-06  1.35e-08  2.40e-07  9.89e-01  
 15  +3.1270e-01  +3.1270e-01  1.52e-07  6.19e-10  3.70e-08  1.35e-10  2.40e-09  9.90e-01  
 16  +3.1270e-01  +3.1270e-01  1.52e-09  6.19e-12  3.70e-10  1.35e-12  2.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.2016ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:22 PM: Optimal value: 3.127e-01
(CVXPY) Oct 06 04:23:22 PM: Compilation took 1.509e-02 seconds
(CVXPY) Oct 06 04:23:22 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.3127
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:22 PM: Your problem has 311 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 311
  constraints   = 561
  nnz(P)        = 0
  nnz(A)        = 4531
  cones (total) = 1
    : Nonnegative = 1,  numel = 561

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9854e-01  +2.5157e+02  2.51e+02  9.41e-01  2.69e+01  1.00e+00  1.02e+00   ------   
  1  +5.6544e-01  +5.5607e+01  5.50e+01  4.29e-01  1.69e+01  3.76e-03  5.94e-01  5.75e-01  
  2  +5.1636e-01  +6.8998e+00  6.38e+00  1.37e-01  6.93e+00  2.04e-02  2.76e-01  9.90e-01  
  3  +5.0340e-01  +1.5550e+00  1.05e+00  2.66e-02  1.51e+00  3.97e-03  6.83e-02  7.81e-01  
  4  +4.9394e-01  +1.7172e+00  1.22e+00  1.52e-02  8.91e-01  6.64e-03  3.63e-02  6.46e-01  
  5  +4.6301e-01  +1.3352e+00  8.72e-01  5.45e-03  3.23e-01  8.60e-03  1.32e-02  6.77e-01  
  6  +4.3553e-01  +1.1649e+00  7.29e-01  3.42e-03  2.02e-01  7.08e-03  8.49e-03  4.88e-01  
  7  +3.9640e-01  +7.8941e-01  3.93e-01  2.14e-03  1.24e-01  5.52e-05  5.92e-03  6.41e-01  
  8  +3.6071e-01  +6.0928e-01  2.49e-01  1.21e-03  7.05e-02  1.17e-04  3.54e-03  6.16e-01  
  9  +3.2460e-01  +4.3489e-01  1.10e-01  4.97e-04  2.95e-02  5.28e-05  1.58e-03  5.83e-01  
 10  +3.0424e-01  +3.5195e-01  4.77e-02  2.03e-04  1.23e-02  3.47e-05  6.88e-04  7.27e-01  
 11  +2.9163e-01  +3.0211e-01  1.05e-02  4.38e-05  2.68e-03  9.22e-06  1.56e-04  8.84e-01  
 12  +2.8800e-01  +2.8816e-01  1.54e-04  6.44e-07  3.93e-05  1.28e-07  2.34e-06  9.86e-01  
 13  +2.8795e-01  +2.8795e-01  1.54e-06  6.44e-09  3.93e-07  1.28e-09  2.34e-08  9.90e-01  
 14  +2.8795e-01  +2.8795e-01  1.54e-08  6.44e-11  3.93e-09  1.28e-11  2.34e-10  9.90e-01  
 15  +2.8795e-01  +2.8795e-01  1.54e-10  6.44e-13  3.93e-11  1.28e-13  2.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.856ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:22 PM: Optimal value: 2.880e-01
(CVXPY) Oct 06 04:23:22 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:22 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 5, Objective: 0.2880
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:22 PM: Your problem has 321 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:22 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 321
  constraints   = 571
  nnz(P)        = 0
  nnz(A)        = 4656
  cones (total) = 1
    : Nonnegative = 1,  numel = 571

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9833e-01  +2.5223e+02  2.52e+02  9.42e-01  2.67e+01  1.00e+00  1.02e+00   ------   
  1  +5.5965e-01  +5.5729e+01  5.52e+01  4.29e-01  1.67e+01  3.77e-03  5.94e-01  5.76e-01  
  2  +5.1268e-01  +7.1033e+00  6.59e+00  1.35e-01  6.83e+00  2.09e-02  2.72e-01  9.90e-01  
  3  +4.9982e-01  +1.8934e+00  1.39e+00  3.00e-02  1.71e+00  6.03e-03  7.34e-02  7.47e-01  
  4  +4.7576e-01  +1.7011e+00  1.23e+00  1.16e-02  6.85e-01  1.06e-02  2.73e-02  6.71e-01  
  5  +4.4219e-01  +1.3895e+00  9.47e-01  6.03e-03  3.56e-01  9.74e-03  1.47e-02  5.37e-01  
  6  +4.1462e-01  +1.2158e+00  8.01e-01  3.91e-03  2.31e-01  8.93e-03  9.76e-03  3.99e-01  
  7  +3.6649e-01  +7.5997e-01  3.93e-01  2.07e-03  1.20e-01  7.54e-05  5.74e-03  7.16e-01  
  8  +3.1175e-01  +4.6394e-01  1.52e-01  7.21e-04  4.24e-02  3.95e-05  2.22e-03  6.54e-01  
  9  +2.8454e-01  +3.5193e-01  6.74e-02  3.02e-04  1.85e-02  2.80e-05  1.02e-03  6.28e-01  
 10  +2.6943e-01  +2.9092e-01  2.15e-02  9.36e-05  5.80e-03  1.09e-05  3.42e-04  7.18e-01  
 11  +2.6255e-01  +2.6356e-01  1.01e-03  4.37e-06  2.70e-04  8.55e-07  1.69e-05  9.89e-01  
 12  +2.6217e-01  +2.6221e-01  4.38e-05  1.89e-07  1.17e-05  3.82e-08  7.42e-07  9.72e-01  
 13  +2.6215e-01  +2.6215e-01  4.38e-07  1.90e-09  1.17e-07  3.82e-10  7.44e-09  9.90e-01  
 14  +2.6215e-01  +2.6215e-01  4.39e-09  1.90e-11  1.17e-09  3.82e-12  7.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.512ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:23 PM: Optimal value: 2.622e-01
(CVXPY) Oct 06 04:23:23 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:23 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 6, Objective: 0.2622
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:23 PM: Your problem has 331 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:23 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 331
  constraints   = 581
  nnz(P)        = 0
  nnz(A)        = 4748
  cones (total) = 1
    : Nonnegative = 1,  numel = 581

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9808e-01  +2.5213e+02  2.52e+02  9.42e-01  2.65e+01  1.00e+00  1.02e+00   ------   
  1  +5.5267e-01  +5.5703e+01  5.52e+01  4.28e-01  1.64e+01  3.79e-03  5.91e-01  5.77e-01  
  2  +5.0758e-01  +7.4100e+00  6.90e+00  1.32e-01  6.67e+00  2.17e-02  2.65e-01  9.90e-01  
  3  +4.9196e-01  +2.0950e+00  1.60e+00  2.81e-02  1.61e+00  8.12e-03  6.65e-02  7.66e-01  
  4  +4.4285e-01  +1.7319e+00  1.29e+00  8.91e-03  5.26e-01  1.46e-02  2.07e-02  7.43e-01  
  5  +3.9750e-01  +1.4151e+00  1.02e+00  5.11e-03  3.00e-01  1.21e-02  1.23e-02  5.07e-01  
  6  +3.5167e-01  +8.7525e-01  5.24e-01  3.01e-03  1.72e-01  9.63e-05  8.06e-03  6.68e-01  
  7  +3.0112e-01  +5.6781e-01  2.67e-01  1.40e-03  7.98e-02  7.40e-05  4.09e-03  5.55e-01  
  8  +2.6642e-01  +3.8527e-01  1.19e-01  5.92e-04  3.43e-02  4.21e-05  1.90e-03  5.89e-01  
  9  +2.4820e-01  +2.9958e-01  5.14e-02  2.46e-04  1.46e-02  2.19e-05  8.46e-04  6.04e-01  
 10  +2.3987e-01  +2.6367e-01  2.38e-02  1.10e-04  6.66e-03  1.44e-05  3.94e-04  6.74e-01  
 11  +2.3656e-01  +2.5071e-01  1.41e-02  6.27e-05  3.91e-03  9.87e-06  2.29e-04  5.34e-01  
 12  +2.3246e-01  +2.3514e-01  2.68e-03  1.15e-05  7.29e-04  1.92e-06  4.37e-05  8.32e-01  
 13  +2.3157e-01  +2.3175e-01  1.82e-04  7.79e-07  4.94e-05  1.34e-07  3.02e-06  9.43e-01  
 14  +2.3150e-01  +2.3150e-01  2.03e-06  8.69e-09  5.51e-07  1.54e-09  3.38e-08  9.90e-01  
 15  +2.3150e-01  +2.3150e-01  2.03e-08  8.69e-11  5.51e-09  1.54e-11  3.38e-10  9.90e-01  
 16  +2.3150e-01  +2.3150e-01  2.03e-10  8.69e-13  5.51e-11  1.54e-13  3.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.1773ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:23 PM: Optimal value: 2.315e-01
(CVXPY) Oct 06 04:23:23 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:23 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 7, Objective: 0.2315
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:23 PM: Your problem has 341 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:23 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 341
  constraints   = 591
  nnz(P)        = 0
  nnz(A)        = 4799
  cones (total) = 1
    : Nonnegative = 1,  numel = 591

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9807e-01  +2.5221e+02  2.52e+02  9.43e-01  2.63e+01  1.00e+00  1.02e+00   ------   
  1  +5.4958e-01  +5.5689e+01  5.51e+01  4.28e-01  1.62e+01  3.80e-03  5.89e-01  5.78e-01  
  2  +5.0541e-01  +7.5213e+00  7.02e+00  1.30e-01  6.52e+00  2.19e-02  2.61e-01  9.90e-01  
  3  +4.8815e-01  +2.1608e+00  1.67e+00  2.71e-02  1.55e+00  8.86e-03  6.35e-02  7.75e-01  
  4  +4.3154e-01  +1.7329e+00  1.30e+00  8.54e-03  5.01e-01  1.52e-02  1.98e-02  7.40e-01  
  5  +3.8666e-01  +1.4072e+00  1.02e+00  5.13e-03  2.99e-01  1.26e-02  1.23e-02  4.45e-01  
  6  +3.3453e-01  +8.5540e-01  5.21e-01  2.96e-03  1.68e-01  1.00e-04  7.99e-03  7.18e-01  
  7  +2.7025e-01  +4.3646e-01  1.66e-01  8.62e-04  4.86e-02  3.67e-05  2.65e-03  6.97e-01  
  8  +2.5072e-01  +3.5047e-01  9.97e-02  4.95e-04  2.85e-02  3.84e-05  1.62e-03  5.10e-01  
  9  +2.2925e-01  +2.5334e-01  2.41e-02  1.14e-04  6.62e-03  1.36e-05  4.20e-04  8.26e-01  
 10  +2.2271e-01  +2.2555e-01  2.84e-03  1.32e-05  7.68e-04  1.55e-06  5.26e-05  8.85e-01  
 11  +2.2188e-01  +2.2213e-01  2.43e-04  1.14e-06  6.56e-05  1.61e-07  4.67e-06  9.50e-01  
 12  +2.2180e-01  +2.2180e-01  2.91e-06  1.36e-08  7.82e-07  1.88e-09  5.62e-08  9.88e-01  
 13  +2.2180e-01  +2.2180e-01  2.91e-08  1.36e-10  7.83e-09  1.88e-11  5.63e-10  9.90e-01  
 14  +2.2180e-01  +2.2180e-01  2.91e-10  1.36e-12  7.83e-11  1.88e-13  5.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0471ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:23 PM: Optimal value: 2.218e-01
(CVXPY) Oct 06 04:23:23 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:23 PM: Solver (including time spent in interface) took 1.569e-02 seconds
Iteration: 8, Objective: 0.2218
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:23 PM: Your problem has 351 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:23 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 351
  constraints   = 601
  nnz(P)        = 0
  nnz(A)        = 4867
  cones (total) = 1
    : Nonnegative = 1,  numel = 601

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9801e-01  +2.5227e+02  2.52e+02  9.43e-01  2.61e+01  1.00e+00  1.02e+00   ------   
  1  +5.4499e-01  +5.5651e+01  5.51e+01  4.27e-01  1.59e+01  3.82e-03  5.86e-01  5.80e-01  
  2  +5.0206e-01  +7.6972e+00  7.20e+00  1.28e-01  6.35e+00  2.23e-02  2.55e-01  9.90e-01  
  3  +4.8184e-01  +2.2597e+00  1.78e+00  2.58e-02  1.47e+00  1.00e-02  5.96e-02  7.84e-01  
  4  +4.0754e-01  +1.7771e+00  1.37e+00  7.73e-03  4.50e-01  1.77e-02  1.79e-02  7.52e-01  
  5  +3.6726e-01  +1.3546e+00  9.87e-01  5.18e-03  2.98e-01  1.04e-02  1.25e-02  3.84e-01  
  6  +2.9051e-01  +6.2023e-01  3.30e-01  1.81e-03  1.01e-01  8.72e-05  5.04e-03  7.91e-01  
  7  +2.5005e-01  +4.1286e-01  1.63e-01  8.56e-04  4.84e-02  8.24e-05  2.63e-03  6.37e-01  
  8  +2.3033e-01  +3.1619e-01  8.59e-02  4.30e-04  2.49e-02  4.97e-05  1.42e-03  5.30e-01  
  9  +2.1316e-01  +2.3495e-01  2.18e-02  1.05e-04  6.10e-03  1.70e-05  3.82e-04  8.76e-01  
 10  +2.0696e-01  +2.0917e-01  2.21e-03  1.04e-05  6.02e-04  1.67e-06  4.11e-05  9.31e-01  
 11  +2.0624e-01  +2.0634e-01  1.00e-04  4.70e-07  2.72e-05  8.06e-08  1.92e-06  9.90e-01  
 12  +2.0620e-01  +2.0620e-01  1.03e-06  4.84e-09  2.80e-07  8.29e-10  1.98e-08  9.90e-01  
 13  +2.0620e-01  +2.0620e-01  1.03e-08  4.84e-11  2.80e-09  8.29e-12  1.98e-10  9.90e-01  
 14  +2.0620e-01  +2.0620e-01  1.03e-10  4.84e-13  2.80e-11  8.30e-14  1.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.2754ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:23 PM: Optimal value: 2.062e-01
(CVXPY) Oct 06 04:23:23 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:23 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.2062
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:23 PM: Your problem has 361 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:23 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 361
  constraints   = 611
  nnz(P)        = 0
  nnz(A)        = 4949
  cones (total) = 1
    : Nonnegative = 1,  numel = 611

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9786e-01  +2.5257e+02  2.52e+02  9.44e-01  2.59e+01  1.00e+00  1.02e+00   ------   
  1  +5.3887e-01  +5.5779e+01  5.52e+01  4.26e-01  1.57e+01  3.83e-03  5.85e-01  5.80e-01  
  2  +4.9563e-01  +7.9185e+00  7.42e+00  1.26e-01  6.23e+00  2.30e-02  2.52e-01  9.90e-01  
  3  +4.6993e-01  +2.3072e+00  1.84e+00  2.36e-02  1.34e+00  1.12e-02  5.43e-02  8.00e-01  
  4  +3.9840e-01  +1.8720e+00  1.47e+00  9.10e-03  5.21e-01  1.49e-02  2.12e-02  7.06e-01  
  5  +3.4148e-01  +1.2463e+00  9.05e-01  4.87e-03  2.75e-01  6.42e-03  1.20e-02  5.67e-01  
  6  +2.6271e-01  +5.3163e-01  2.69e-01  1.48e-03  8.12e-02  6.55e-04  4.24e-03  7.43e-01  
  7  +2.3231e-01  +3.8288e-01  1.51e-01  8.07e-04  4.50e-02  3.13e-04  2.51e-03  5.92e-01  
  8  +2.1260e-01  +2.8104e-01  6.84e-02  3.58e-04  2.01e-02  1.31e-04  1.20e-03  5.81e-01  
  9  +1.9935e-01  +2.1430e-01  1.49e-02  7.75e-05  4.33e-03  2.53e-05  2.82e-04  7.87e-01  
 10  +1.9573e-01  +1.9723e-01  1.49e-03  7.75e-06  4.31e-04  2.00e-06  2.98e-05  9.18e-01  
 11  +1.9532e-01  +1.9538e-01  5.80e-05  3.02e-07  1.67e-05  6.05e-08  1.19e-06  9.76e-01  
 12  +1.9530e-01  +1.9530e-01  5.88e-07  3.06e-09  1.69e-07  6.13e-10  1.21e-08  9.90e-01  
 13  +1.9530e-01  +1.9530e-01  5.88e-09  3.06e-11  1.69e-09  6.13e-12  1.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.4608ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:23 PM: Optimal value: 1.953e-01
(CVXPY) Oct 06 04:23:23 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:23 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 10, Objective: 0.1953
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:23 PM: Your problem has 371 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:23 PM: Finished problem compilation (took 1.657e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 371
  constraints   = 621
  nnz(P)        = 0
  nnz(A)        = 5027
  cones (total) = 1
    : Nonnegative = 1,  numel = 621

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9761e-01  +2.5245e+02  2.52e+02  9.44e-01  2.57e+01  1.00e+00  1.02e+00   ------   
  1  +5.3250e-01  +5.5857e+01  5.53e+01  4.26e-01  1.55e+01  3.85e-03  5.84e-01  5.79e-01  
  2  +4.8957e-01  +8.1382e+00  7.65e+00  1.24e-01  6.14e+00  2.37e-02  2.48e-01  9.90e-01  
  3  +4.5829e-01  +2.4934e+00  2.04e+00  2.41e-02  1.36e+00  1.23e-02  5.48e-02  7.93e-01  
  4  +3.8155e-01  +1.9349e+00  1.55e+00  9.58e-03  5.42e-01  1.44e-02  2.24e-02  6.77e-01  
  5  +3.2229e-01  +1.0940e+00  7.72e-01  4.58e-03  2.53e-01  2.19e-03  1.16e-02  6.85e-01  
  6  +2.4941e-01  +5.2026e-01  2.71e-01  1.56e-03  8.46e-02  4.52e-04  4.53e-03  6.84e-01  
  7  +2.1521e-01  +3.3550e-01  1.20e-01  6.73e-04  3.67e-02  1.76e-04  2.18e-03  6.69e-01  
  8  +2.0201e-01  +2.6626e-01  6.43e-02  3.50e-04  1.93e-02  9.00e-05  1.20e-03  5.14e-01  
  9  +1.9262e-01  +2.1688e-01  2.43e-02  1.30e-04  7.15e-03  3.17e-05  4.72e-04  6.67e-01  
 10  +1.8815e-01  +1.9428e-01  6.13e-03  3.26e-05  1.79e-03  6.53e-06  1.25e-04  8.51e-01  
 11  +1.8668e-01  +1.8753e-01  8.58e-04  4.56e-06  2.50e-04  7.23e-07  1.83e-05  9.28e-01  
 12  +1.8641e-01  +1.8646e-01  4.62e-05  2.45e-07  1.34e-05  3.56e-08  1.01e-06  9.66e-01  
 13  +1.8640e-01  +1.8640e-01  4.65e-07  2.47e-09  1.35e-07  3.57e-10  1.02e-08  9.90e-01  
 14  +1.8640e-01  +1.8640e-01  4.66e-09  2.48e-11  1.35e-09  3.58e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.2028ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:24 PM: Optimal value: 1.864e-01
(CVXPY) Oct 06 04:23:24 PM: Compilation took 1.657e-02 seconds
(CVXPY) Oct 06 04:23:24 PM: Solver (including time spent in interface) took 1.508e-02 seconds
Iteration: 11, Objective: 0.1864
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:24 PM: Your problem has 381 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:24 PM: Finished problem compilation (took 6.087e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 381
  constraints   = 631
  nnz(P)        = 0
  nnz(A)        = 5091
  cones (total) = 1
    : Nonnegative = 1,  numel = 631

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9755e-01  +2.5250e+02  2.52e+02  9.45e-01  2.56e+01  1.00e+00  1.02e+00   ------   
  1  +5.2816e-01  +5.5863e+01  5.53e+01  4.26e-01  1.53e+01  3.86e-03  5.82e-01  5.80e-01  
  2  +4.8503e-01  +8.2957e+00  7.81e+00  1.22e-01  6.00e+00  2.41e-02  2.44e-01  9.90e-01  
  3  +4.4942e-01  +2.5788e+00  2.13e+00  2.35e-02  1.32e+00  1.30e-02  5.35e-02  7.93e-01  
  4  +3.6605e-01  +1.9789e+00  1.61e+00  9.62e-03  5.39e-01  1.42e-02  2.25e-02  6.76e-01  
  5  +3.0791e-01  +1.0549e+00  7.47e-01  4.60e-03  2.51e-01  1.04e-03  1.18e-02  7.28e-01  
  6  +2.3782e-01  +4.8719e-01  2.49e-01  1.48e-03  7.90e-02  2.25e-04  4.40e-03  7.55e-01  
  7  +2.0957e-01  +3.3068e-01  1.21e-01  6.91e-04  3.74e-02  1.12e-04  2.25e-03  5.70e-01  
  8  +1.9554e-01  +2.5897e-01  6.34e-02  3.49e-04  1.91e-02  5.82e-05  1.21e-03  5.38e-01  
  9  +1.8468e-01  +2.0277e-01  1.81e-02  9.77e-05  5.36e-03  1.60e-05  3.63e-04  7.36e-01  
 10  +1.8148e-01  +1.8665e-01  5.17e-03  2.79e-05  1.52e-03  4.33e-06  1.08e-04  7.83e-01  
 11  +1.8034e-01  +1.8140e-01  1.06e-03  5.72e-06  3.10e-04  8.31e-07  2.30e-05  8.35e-01  
 12  +1.8005e-01  +1.8011e-01  6.04e-05  3.28e-07  1.77e-05  4.32e-08  1.35e-06  9.90e-01  
 13  +1.8003e-01  +1.8003e-01  6.12e-07  3.32e-09  1.80e-07  4.36e-10  1.37e-08  9.90e-01  
 14  +1.8003e-01  +1.8003e-01  6.12e-09  3.33e-11  1.80e-09  4.36e-12  1.37e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.5874ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:24 PM: Optimal value: 1.800e-01
(CVXPY) Oct 06 04:23:24 PM: Compilation took 6.087e-03 seconds
(CVXPY) Oct 06 04:23:24 PM: Solver (including time spent in interface) took 1.571e-02 seconds
Iteration: 12, Objective: 0.1800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:24 PM: Your problem has 391 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:24 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 391
  constraints   = 641
  nnz(P)        = 0
  nnz(A)        = 5160
  cones (total) = 1
    : Nonnegative = 1,  numel = 641

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9745e-01  +2.5268e+02  2.52e+02  9.45e-01  2.54e+01  1.00e+00  1.02e+00   ------   
  1  +5.2385e-01  +5.5952e+01  5.54e+01  4.26e-01  1.52e+01  3.87e-03  5.81e-01  5.80e-01  
  2  +4.8040e-01  +8.4113e+00  7.93e+00  1.21e-01  5.91e+00  2.44e-02  2.42e-01  9.90e-01  
  3  +4.4178e-01  +2.7315e+00  2.29e+00  2.46e-02  1.37e+00  1.35e-02  5.58e-02  7.80e-01  
  4  +3.5490e-01  +2.1332e+00  1.78e+00  1.04e-02  5.79e-01  1.46e-02  2.44e-02  6.67e-01  
  5  +3.0273e-01  +1.0524e+00  7.50e-01  4.86e-03  2.62e-01  1.20e-04  1.26e-02  7.53e-01  
  6  +2.2746e-01  +4.4693e-01  2.19e-01  1.33e-03  7.04e-02  1.00e-04  4.03e-03  8.14e-01  
  7  +1.9914e-01  +2.9743e-01  9.83e-02  5.69e-04  3.06e-02  5.65e-05  1.89e-03  6.37e-01  
  8  +1.8769e-01  +2.3947e-01  5.18e-02  2.92e-04  1.59e-02  3.19e-05  1.02e-03  5.42e-01  
  9  +1.8164e-01  +2.0817e-01  2.65e-02  1.48e-04  8.08e-03  1.70e-05  5.39e-04  5.41e-01  
 10  +1.7700e-01  +1.8433e-01  7.33e-03  4.08e-05  2.22e-03  4.78e-06  1.55e-04  7.64e-01  
 11  +1.7620e-01  +1.8066e-01  4.46e-03  2.41e-05  1.32e-03  3.11e-06  9.41e-05  5.60e-01  
 12  +1.7537e-01  +1.7707e-01  1.70e-03  8.80e-06  4.87e-04  1.27e-06  3.62e-05  8.16e-01  
 13  +1.7483e-01  +1.7491e-01  7.88e-05  3.96e-07  2.20e-05  5.92e-08  1.69e-06  9.90e-01  
 14  +1.7480e-01  +1.7480e-01  8.07e-07  4.04e-09  2.25e-07  6.05e-10  1.73e-08  9.90e-01  
 15  +1.7480e-01  +1.7480e-01  8.07e-09  4.05e-11  2.25e-09  6.06e-12  1.74e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.8408ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:24 PM: Optimal value: 1.748e-01
(CVXPY) Oct 06 04:23:24 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:24 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 13, Objective: 0.1748
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:24 PM: Your problem has 401 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:24 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 401
  constraints   = 651
  nnz(P)        = 0
  nnz(A)        = 5255
  cones (total) = 1
    : Nonnegative = 1,  numel = 651

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9733e-01  +2.5266e+02  2.52e+02  9.46e-01  2.52e+01  1.00e+00  1.02e+00   ------   
  1  +5.1928e-01  +5.6028e+01  5.55e+01  4.27e-01  1.50e+01  3.88e-03  5.81e-01  5.80e-01  
  2  +4.7527e-01  +8.5495e+00  8.07e+00  1.19e-01  5.79e+00  2.48e-02  2.40e-01  9.90e-01  
  3  +4.3283e-01  +2.8322e+00  2.40e+00  2.48e-02  1.37e+00  1.37e-02  5.65e-02  7.82e-01  
  4  +3.4973e-01  +2.3090e+00  1.96e+00  1.17e-02  6.41e-01  1.48e-02  2.74e-02  6.20e-01  
  5  +2.9185e-01  +1.0210e+00  7.29e-01  4.61e-03  2.46e-01  5.83e-04  1.20e-02  7.60e-01  
  6  +2.2154e-01  +4.5573e-01  2.34e-01  1.44e-03  7.52e-02  1.60e-04  4.45e-03  7.90e-01  
  7  +1.9132e-01  +2.8490e-01  9.36e-02  5.45e-04  2.90e-02  7.02e-05  1.87e-03  6.71e-01  
  8  +1.7797e-01  +2.1505e-01  3.71e-02  2.12e-04  1.13e-02  2.73e-05  7.90e-04  7.00e-01  
  9  +1.7205e-01  +1.8494e-01  1.29e-02  7.34e-05  3.90e-03  9.22e-06  2.88e-04  6.66e-01  
 10  +1.6913e-01  +1.7038e-01  1.25e-03  7.12e-06  3.76e-04  7.72e-07  2.95e-05  9.06e-01  
 11  +1.6881e-01  +1.6886e-01  4.96e-05  2.85e-07  1.50e-05  2.93e-08  1.21e-06  9.65e-01  
 12  +1.6880e-01  +1.6880e-01  4.97e-07  2.85e-09  1.50e-07  2.93e-10  1.21e-08  9.90e-01  
 13  +1.6880e-01  +1.6880e-01  4.97e-09  2.86e-11  1.50e-09  2.94e-12  1.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.766ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:24 PM: Optimal value: 1.688e-01
(CVXPY) Oct 06 04:23:24 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:24 PM: Solver (including time spent in interface) took 1.571e-02 seconds
Iteration: 14, Objective: 0.1688
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:24 PM: Your problem has 411 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:24 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 411
  constraints   = 661
  nnz(P)        = 0
  nnz(A)        = 5336
  cones (total) = 1
    : Nonnegative = 1,  numel = 661

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9728e-01  +2.5264e+02  2.52e+02  9.46e-01  2.51e+01  1.00e+00  1.02e+00   ------   
  1  +5.1714e-01  +5.6096e+01  5.56e+01  4.28e-01  1.48e+01  3.90e-03  5.80e-01  5.80e-01  
  2  +4.7308e-01  +8.5658e+00  8.09e+00  1.19e-01  5.71e+00  2.49e-02  2.39e-01  9.90e-01  
  3  +4.2820e-01  +2.6925e+00  2.26e+00  2.32e-02  1.27e+00  1.33e-02  5.33e-02  7.93e-01  
  4  +3.4773e-01  +2.3300e+00  1.98e+00  1.20e-02  6.52e-01  1.44e-02  2.82e-02  6.00e-01  
  5  +2.9076e-01  +1.0656e+00  7.75e-01  4.98e-03  2.64e-01  1.23e-04  1.30e-02  7.88e-01  
  6  +2.1915e-01  +4.5741e-01  2.38e-01  1.48e-03  7.68e-02  1.04e-04  4.54e-03  7.87e-01  
  7  +1.9631e-01  +3.4029e-01  1.44e-01  8.52e-04  4.52e-02  7.99e-05  2.78e-03  5.30e-01  
  8  +1.7890e-01  +2.4699e-01  6.81e-02  3.88e-04  2.09e-02  3.95e-05  1.36e-03  5.58e-01  
  9  +1.7133e-01  +2.0655e-01  3.52e-02  1.98e-04  1.07e-02  2.15e-05  7.24e-04  5.34e-01  
 10  +1.6768e-01  +1.8755e-01  1.99e-02  1.07e-04  5.90e-03  1.45e-05  4.00e-04  7.08e-01  
 11  +1.6416e-01  +1.7311e-01  8.95e-03  4.54e-05  2.57e-03  6.83e-06  1.76e-04  6.55e-01  
 12  +1.6157e-01  +1.6237e-01  8.04e-04  4.02e-06  2.28e-04  5.50e-07  1.63e-05  9.22e-01  
 13  +1.6131e-01  +1.6132e-01  1.48e-05  7.42e-08  4.20e-06  9.78e-09  3.06e-07  9.88e-01  
 14  +1.6130e-01  +1.6130e-01  1.48e-07  7.43e-10  4.20e-08  9.78e-11  3.06e-09  9.90e-01  
 15  +1.6130e-01  +1.6130e-01  1.48e-09  7.43e-12  4.21e-10  9.79e-13  3.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.2784ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:24 PM: Optimal value: 1.613e-01
(CVXPY) Oct 06 04:23:24 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:24 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 15, Objective: 0.1613
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:24 PM: Your problem has 421 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:24 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 421
  constraints   = 671
  nnz(P)        = 0
  nnz(A)        = 5428
  cones (total) = 1
    : Nonnegative = 1,  numel = 671

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9707e-01  +2.5271e+02  2.52e+02  9.46e-01  2.49e+01  1.00e+00  1.02e+00   ------   
  1  +5.1199e-01  +5.6142e+01  5.56e+01  4.28e-01  1.47e+01  3.90e-03  5.79e-01  5.80e-01  
  2  +4.6560e-01  +8.7646e+00  8.30e+00  1.17e-01  5.58e+00  2.55e-02  2.36e-01  9.90e-01  
  3  +4.1812e-01  +2.9158e+00  2.50e+00  2.50e-02  1.35e+00  1.36e-02  5.72e-02  7.72e-01  
  4  +3.3405e-01  +2.3688e+00  2.03e+00  1.22e-02  6.62e-01  1.46e-02  2.86e-02  5.88e-01  
  5  +2.7962e-01  +1.0028e+00  7.23e-01  4.71e-03  2.49e-01  1.22e-04  1.22e-02  7.94e-01  
  6  +2.0996e-01  +4.3330e-01  2.23e-01  1.41e-03  7.34e-02  1.14e-04  4.24e-03  8.16e-01  
  7  +1.8805e-01  +3.2133e-01  1.33e-01  7.86e-04  4.22e-02  7.97e-05  2.50e-03  5.14e-01  
  8  +1.7013e-01  +2.2882e-01  5.87e-02  3.27e-04  1.78e-02  3.69e-05  1.11e-03  5.98e-01  
  9  +1.6299e-01  +1.9270e-01  2.97e-02  1.63e-04  8.92e-03  1.94e-05  5.75e-04  5.51e-01  
 10  +1.5773e-01  +1.6658e-01  8.85e-03  4.81e-05  2.63e-03  5.67e-06  1.79e-04  7.15e-01  
 11  +1.5598e-01  +1.5837e-01  2.39e-03  1.30e-05  7.09e-04  1.59e-06  5.02e-05  7.91e-01  
 12  +1.5550e-01  +1.5629e-01  7.88e-04  4.29e-06  2.36e-04  5.42e-07  1.71e-05  7.65e-01  
 13  +1.5528e-01  +1.5536e-01  8.53e-05  4.65e-07  2.55e-05  6.05e-08  1.91e-06  9.54e-01  
 14  +1.5525e-01  +1.5525e-01  9.41e-07  5.13e-09  2.82e-07  6.61e-10  2.11e-08  9.89e-01  
 15  +1.5525e-01  +1.5525e-01  9.44e-09  5.15e-11  2.82e-09  6.63e-12  2.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.8353ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:25 PM: Optimal value: 1.553e-01
(CVXPY) Oct 06 04:23:25 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:25 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 16, Objective: 0.1553
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:25 PM: Your problem has 431 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:25 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 431
  constraints   = 681
  nnz(P)        = 0
  nnz(A)        = 5517
  cones (total) = 1
    : Nonnegative = 1,  numel = 681

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9700e-01  +2.5274e+02  2.52e+02  9.47e-01  2.48e+01  1.00e+00  1.02e+00   ------   
  1  +5.0840e-01  +5.6181e+01  5.57e+01  4.28e-01  1.45e+01  3.91e-03  5.78e-01  5.80e-01  
  2  +4.6018e-01  +8.9261e+00  8.47e+00  1.15e-01  5.45e+00  2.59e-02  2.33e-01  9.90e-01  
  3  +4.0784e-01  +2.9689e+00  2.56e+00  2.44e-02  1.31e+00  1.40e-02  5.59e-02  7.74e-01  
  4  +3.2560e-01  +2.3115e+00  1.99e+00  1.20e-02  6.46e-01  1.37e-02  2.82e-02  5.80e-01  
  5  +2.7654e-01  +1.0975e+00  8.21e-01  5.50e-03  2.88e-01  1.13e-04  1.42e-02  8.25e-01  
  6  +2.1448e-01  +4.8984e-01  2.75e-01  1.78e-03  9.22e-02  7.34e-05  5.18e-03  7.06e-01  
  7  +1.8614e-01  +3.4064e-01  1.54e-01  9.27e-04  4.93e-02  6.54e-05  2.89e-03  5.73e-01  
  8  +1.6615e-01  +2.3396e-01  6.78e-02  3.83e-04  2.07e-02  3.21e-05  1.28e-03  6.03e-01  
  9  +1.5877e-01  +1.9594e-01  3.72e-02  2.06e-04  1.12e-02  1.91e-05  7.16e-04  5.04e-01  
 10  +1.5243e-01  +1.6367e-01  1.12e-02  6.19e-05  3.36e-03  5.91e-06  2.26e-04  7.17e-01  
 11  +1.5013e-01  +1.5258e-01  2.45e-03  1.35e-05  7.33e-04  1.44e-06  5.18e-05  8.38e-01  
 12  +1.4976e-01  +1.5096e-01  1.20e-03  6.64e-06  3.62e-04  7.61e-07  2.62e-05  6.33e-01  
 13  +1.4958e-01  +1.5019e-01  6.07e-04  3.36e-06  1.83e-04  4.04e-07  1.34e-05  6.18e-01  
 14  +1.4941e-01  +1.4950e-01  8.72e-05  4.82e-07  2.62e-05  6.45e-08  1.95e-06  9.90e-01  
 15  +1.4938e-01  +1.4938e-01  1.09e-06  6.01e-09  3.27e-07  7.96e-10  2.44e-08  9.88e-01  
 16  +1.4938e-01  +1.4938e-01  1.09e-08  6.02e-11  3.28e-09  7.98e-12  2.45e-10  9.90e-01  
 17  +1.4938e-01  +1.4938e-01  1.09e-10  6.02e-13  3.28e-11  7.98e-14  2.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.9427ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:25 PM: Optimal value: 1.494e-01
(CVXPY) Oct 06 04:23:25 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:25 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 17, Objective: 0.1494
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:25 PM: Your problem has 441 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:25 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 441
  constraints   = 691
  nnz(P)        = 0
  nnz(A)        = 5571
  cones (total) = 1
    : Nonnegative = 1,  numel = 691

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9700e-01  +2.5274e+02  2.52e+02  9.47e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.0672e-01  +5.6203e+01  5.57e+01  4.28e-01  1.44e+01  3.93e-03  5.77e-01  5.81e-01  
  2  +4.5794e-01  +8.9038e+00  8.45e+00  1.14e-01  5.37e+00  2.59e-02  2.32e-01  9.90e-01  
  3  +4.0909e-01  +3.2341e+00  2.82e+00  2.78e-02  1.47e+00  1.40e-02  6.38e-02  7.37e-01  
  4  +3.1767e-01  +2.5759e+00  2.26e+00  1.34e-02  7.12e-01  1.38e-02  3.15e-02  6.33e-01  
  5  +2.8164e-01  +1.1770e+00  8.95e-01  6.10e-03  3.18e-01  1.10e-04  1.57e-02  8.12e-01  
  6  +2.1723e-01  +5.2620e-01  3.09e-01  2.00e-03  1.03e-01  7.57e-05  5.75e-03  6.98e-01  
  7  +1.8590e-01  +3.6248e-01  1.77e-01  1.05e-03  5.55e-02  7.57e-05  3.24e-03  5.85e-01  
  8  +1.6839e-01  +2.7040e-01  1.02e-01  5.75e-04  3.08e-02  4.93e-05  1.86e-03  4.83e-01  
  9  +1.5436e-01  +1.9969e-01  4.53e-02  2.44e-04  1.31e-02  2.38e-05  8.38e-04  5.96e-01  
 10  +1.4938e-01  +1.7540e-01  2.60e-02  1.36e-04  7.40e-03  1.66e-05  4.85e-04  5.97e-01  
 11  +1.4344e-01  +1.4889e-01  5.44e-03  2.81e-05  1.52e-03  3.37e-06  1.05e-04  8.05e-01  
 12  +1.4198e-01  +1.4252e-01  5.42e-04  2.83e-06  1.52e-04  2.94e-07  1.11e-05  9.07e-01  
 13  +1.4180e-01  +1.4181e-01  1.11e-05  5.83e-08  3.11e-06  5.82e-09  2.34e-07  9.82e-01  
 14  +1.4180e-01  +1.4180e-01  1.11e-07  5.83e-10  3.11e-08  5.82e-11  2.35e-09  9.90e-01  
 15  +1.4180e-01  +1.4180e-01  1.11e-09  5.84e-12  3.11e-10  5.83e-13  2.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.6531ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:25 PM: Optimal value: 1.418e-01
(CVXPY) Oct 06 04:23:25 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:23:25 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 18, Objective: 0.1418
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:25 PM: Your problem has 451 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:25 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 451
  constraints   = 701
  nnz(P)        = 0
  nnz(A)        = 5645
  cones (total) = 1
    : Nonnegative = 1,  numel = 701

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9696e-01  +2.5291e+02  2.52e+02  9.48e-01  2.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.0416e-01  +5.6277e+01  5.58e+01  4.29e-01  1.42e+01  3.93e-03  5.77e-01  5.81e-01  
  2  +4.5320e-01  +8.9643e+00  8.51e+00  1.13e-01  5.29e+00  2.61e-02  2.31e-01  9.90e-01  
  3  +4.0344e-01  +3.3413e+00  2.94e+00  2.90e-02  1.52e+00  1.38e-02  6.69e-02  7.23e-01  
  4  +3.2123e-01  +2.7030e+00  2.38e+00  1.50e-02  7.88e-01  1.34e-02  3.55e-02  5.85e-01  
  5  +2.7171e-01  +1.1007e+00  8.29e-01  5.38e-03  2.79e-01  1.21e-04  1.38e-02  8.34e-01  
  6  +2.0414e-01  +4.7890e-01  2.75e-01  1.74e-03  8.90e-02  1.06e-04  5.11e-03  7.47e-01  
  7  +1.7634e-01  +3.3516e-01  1.59e-01  9.31e-04  4.85e-02  8.38e-05  2.91e-03  5.63e-01  
  8  +1.6218e-01  +2.6253e-01  1.00e-01  5.60e-04  2.95e-02  6.01e-05  1.83e-03  4.74e-01  
  9  +1.4639e-01  +1.8515e-01  3.88e-02  2.04e-04  1.08e-02  2.46e-05  7.12e-04  6.57e-01  
 10  +1.3842e-01  +1.4736e-01  8.94e-03  4.65e-05  2.45e-03  5.52e-06  1.72e-04  7.78e-01  
 11  +1.3622e-01  +1.3713e-01  9.17e-04  4.83e-06  2.51e-04  5.66e-07  1.89e-05  9.45e-01  
 12  +1.3591e-01  +1.3594e-01  3.08e-05  1.64e-07  8.42e-06  1.81e-08  6.65e-07  9.76e-01  
 13  +1.3590e-01  +1.3590e-01  3.13e-07  1.67e-09  8.56e-08  1.84e-10  6.78e-09  9.90e-01  
 14  +1.3590e-01  +1.3590e-01  3.13e-09  1.67e-11  8.58e-10  1.84e-12  6.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.8778ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:25 PM: Optimal value: 1.359e-01
(CVXPY) Oct 06 04:23:25 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:25 PM: Solver (including time spent in interface) took 1.508e-02 seconds
Iteration: 19, Objective: 0.1359
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:25 PM: Your problem has 461 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:25 PM: Finished problem compilation (took 9.625e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 461
  constraints   = 711
  nnz(P)        = 0
  nnz(A)        = 5689
  cones (total) = 1
    : Nonnegative = 1,  numel = 711

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9690e-01  +2.5307e+02  2.53e+02  9.48e-01  2.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.0116e-01  +5.6340e+01  5.58e+01  4.30e-01  1.41e+01  3.93e-03  5.77e-01  5.80e-01  
  2  +4.4846e-01  +9.0354e+00  8.59e+00  1.12e-01  5.20e+00  2.63e-02  2.31e-01  9.90e-01  
  3  +3.9928e-01  +3.4030e+00  3.00e+00  2.98e-02  1.54e+00  1.36e-02  6.92e-02  7.13e-01  
  4  +3.1543e-01  +2.7406e+00  2.43e+00  1.54e-02  8.00e-01  1.32e-02  3.67e-02  5.85e-01  
  5  +2.7780e-01  +1.5826e+00  1.30e+00  8.27e-03  4.29e-01  4.30e-03  2.08e-02  5.77e-01  
  6  +2.1915e-01  +6.1138e-01  3.92e-01  2.53e-03  1.28e-01  8.26e-04  7.09e-03  7.19e-01  
  7  +1.8256e-01  +4.1356e-01  2.31e-01  1.39e-03  7.14e-02  4.12e-04  4.23e-03  6.29e-01  
  8  +1.5997e-01  +2.7939e-01  1.19e-01  6.70e-04  3.52e-02  2.06e-04  2.18e-03  5.59e-01  
  9  +1.4448e-01  +1.9936e-01  5.49e-02  2.90e-04  1.54e-02  8.95e-05  1.00e-03  5.95e-01  
 10  +1.3490e-01  +1.5202e-01  1.71e-02  8.90e-05  4.70e-03  2.42e-05  3.27e-04  7.34e-01  
 11  +1.3063e-01  +1.3222e-01  1.60e-03  8.31e-06  4.34e-04  1.52e-06  3.24e-05  9.29e-01  
 12  +1.3015e-01  +1.3029e-01  1.40e-04  7.38e-07  3.81e-05  1.20e-07  3.01e-06  9.17e-01  
 13  +1.3010e-01  +1.3010e-01  1.69e-06  8.93e-09  4.61e-07  1.43e-09  3.67e-08  9.88e-01  
 14  +1.3010e-01  +1.3010e-01  1.69e-08  8.95e-11  4.62e-09  1.43e-11  3.68e-10  9.90e-01  
 15  +1.3010e-01  +1.3010e-01  1.69e-10  8.96e-13  4.62e-11  1.43e-13  3.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.1805ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:25 PM: Optimal value: 1.301e-01
(CVXPY) Oct 06 04:23:25 PM: Compilation took 9.625e-03 seconds
(CVXPY) Oct 06 04:23:25 PM: Solver (including time spent in interface) took 2.178e-02 seconds
Iteration: 20, Objective: 0.1301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:26 PM: Your problem has 471 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:26 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 471
  constraints   = 721
  nnz(P)        = 0
  nnz(A)        = 5776
  cones (total) = 1
    : Nonnegative = 1,  numel = 721

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9682e-01  +2.5305e+02  2.53e+02  9.48e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +4.9794e-01  +5.6406e+01  5.59e+01  4.31e-01  1.40e+01  3.95e-03  5.76e-01  5.80e-01  
  2  +4.4329e-01  +9.1379e+00  8.69e+00  1.11e-01  5.10e+00  2.66e-02  2.28e-01  9.90e-01  
  3  +3.9294e-01  +3.5067e+00  3.11e+00  3.06e-02  1.57e+00  1.36e-02  7.11e-02  7.05e-01  
  4  +3.1015e-01  +2.8644e+00  2.55e+00  1.62e-02  8.38e-01  1.33e-02  3.88e-02  5.68e-01  
  5  +2.7028e-01  +1.1694e+00  8.99e-01  6.10e-03  3.12e-01  1.16e-04  1.58e-02  8.17e-01  
  6  +1.9989e-01  +4.8240e-01  2.83e-01  1.82e-03  9.20e-02  9.84e-05  5.32e-03  7.64e-01  
  7  +1.7079e-01  +3.5663e-01  1.86e-01  1.09e-03  5.67e-02  9.86e-05  3.40e-03  5.57e-01  
  8  +1.4724e-01  +2.3255e-01  8.53e-02  4.69e-04  2.46e-02  5.54e-05  1.58e-03  6.76e-01  
  9  +1.3392e-01  +1.6839e-01  3.45e-02  1.83e-04  9.62e-03  2.43e-05  6.54e-04  7.05e-01  
 10  +1.2586e-01  +1.3134e-01  5.48e-03  2.89e-05  1.51e-03  3.49e-06  1.10e-04  8.50e-01  
 11  +1.2439e-01  +1.2494e-01  5.58e-04  2.99e-06  1.53e-04  3.02e-07  1.21e-05  9.05e-01  
 12  +1.2420e-01  +1.2422e-01  1.40e-05  7.52e-08  3.84e-06  7.90e-09  3.13e-07  9.82e-01  
 13  +1.2420e-01  +1.2420e-01  1.40e-07  7.54e-10  3.85e-08  7.92e-11  3.14e-09  9.90e-01  
 14  +1.2420e-01  +1.2420e-01  1.40e-09  7.55e-12  3.85e-10  7.92e-13  3.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.7956ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:26 PM: Optimal value: 1.242e-01
(CVXPY) Oct 06 04:23:26 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:26 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 21, Objective: 0.1242
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:26 PM: Your problem has 481 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:26 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 481
  constraints   = 731
  nnz(P)        = 0
  nnz(A)        = 5841
  cones (total) = 1
    : Nonnegative = 1,  numel = 731

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9682e-01  +2.5309e+02  2.53e+02  9.49e-01  2.40e+01  1.00e+00  1.02e+00   ------   
  1  +4.9729e-01  +5.6388e+01  5.59e+01  4.32e-01  1.38e+01  3.95e-03  5.76e-01  5.81e-01  
  2  +4.4104e-01  +9.1421e+00  8.70e+00  1.11e-01  5.02e+00  2.66e-02  2.28e-01  9.90e-01  
  3  +3.8942e-01  +3.4126e+00  3.02e+00  2.97e-02  1.50e+00  1.32e-02  6.94e-02  7.11e-01  
  4  +3.0590e-01  +2.8349e+00  2.53e+00  1.61e-02  8.25e-01  1.33e-02  3.86e-02  5.47e-01  
  5  +2.7011e-01  +1.1680e+00  8.98e-01  6.23e-03  3.16e-01  1.13e-04  1.63e-02  7.96e-01  
  6  +1.9740e-01  +4.7053e-01  2.73e-01  1.77e-03  8.89e-02  9.54e-05  5.20e-03  7.80e-01  
  7  +1.6736e-01  +3.4679e-01  1.79e-01  1.05e-03  5.44e-02  9.91e-05  3.30e-03  5.89e-01  
  8  +1.4796e-01  +2.4476e-01  9.68e-02  5.38e-04  2.81e-02  6.27e-05  1.81e-03  6.00e-01  
  9  +1.4138e-01  +2.1250e-01  7.11e-02  3.80e-04  2.03e-02  5.00e-05  1.31e-03  3.94e-01  
 10  +1.3475e-01  +1.7437e-01  3.96e-02  2.14e-04  1.12e-02  3.48e-05  7.63e-04  9.90e-01  
 11  +1.2527e-01  +1.3485e-01  9.58e-03  5.02e-05  2.66e-03  7.75e-06  1.90e-04  8.27e-01  
 12  +1.2287e-01  +1.2485e-01  1.98e-03  1.04e-05  5.45e-04  1.46e-06  4.17e-05  8.01e-01  
 13  +1.2236e-01  +1.2282e-01  4.58e-04  2.43e-06  1.26e-04  3.36e-07  1.01e-05  8.34e-01  
 14  +1.2220e-01  +1.2221e-01  6.80e-06  3.62e-08  1.87e-06  4.56e-09  1.52e-07  9.86e-01  
 15  +1.2220e-01  +1.2220e-01  6.80e-08  3.63e-10  1.87e-08  4.56e-11  1.53e-09  9.90e-01  
 16  +1.2220e-01  +1.2220e-01  6.80e-10  3.63e-12  1.87e-10  4.56e-13  1.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.6289ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:26 PM: Optimal value: 1.222e-01
(CVXPY) Oct 06 04:23:26 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:26 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 22, Objective: 0.1222
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:26 PM: Your problem has 491 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:26 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 491
  constraints   = 741
  nnz(P)        = 0
  nnz(A)        = 5884
  cones (total) = 1
    : Nonnegative = 1,  numel = 741

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9658e-01  +2.5307e+02  2.53e+02  9.49e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +4.8889e-01  +5.6553e+01  5.61e+01  4.31e-01  1.37e+01  3.97e-03  5.74e-01  5.80e-01  
  2  +4.2992e-01  +9.3541e+00  8.92e+00  1.09e-01  4.93e+00  2.73e-02  2.24e-01  9.90e-01  
  3  +3.7375e-01  +3.2929e+00  2.92e+00  2.77e-02  1.39e+00  1.29e-02  6.48e-02  7.30e-01  
  4  +2.9473e-01  +2.6176e+00  2.32e+00  1.51e-02  7.67e-01  1.22e-02  3.63e-02  5.16e-01  
  5  +2.5831e-01  +1.1100e+00  8.52e-01  6.08e-03  3.05e-01  1.02e-04  1.59e-02  8.19e-01  
  6  +1.9140e-01  +4.6757e-01  2.76e-01  1.84e-03  9.19e-02  8.32e-05  5.39e-03  7.49e-01  
  7  +1.6277e-01  +3.4395e-01  1.81e-01  1.09e-03  5.62e-02  8.85e-05  3.41e-03  5.66e-01  
  8  +1.4160e-01  +2.3414e-01  9.25e-02  5.24e-04  2.73e-02  5.81e-05  1.76e-03  6.67e-01  
  9  +1.3670e-01  +2.1051e-01  7.38e-02  4.02e-04  2.15e-02  5.07e-05  1.38e-03  3.52e-01  
 10  +1.3042e-01  +1.7443e-01  4.40e-02  2.42e-04  1.27e-02  3.79e-05  8.63e-04  9.90e-01  
 11  +1.2203e-01  +1.3978e-01  1.78e-02  9.42e-05  4.99e-03  1.50e-05  3.53e-04  6.84e-01  
 12  +1.1692e-01  +1.1841e-01  1.50e-03  7.95e-06  4.16e-04  9.44e-07  3.17e-05  9.19e-01  
 13  +1.1644e-01  +1.1654e-01  1.02e-04  5.50e-07  2.84e-05  6.33e-08  2.30e-06  9.55e-01  
 14  +1.1640e-01  +1.1640e-01  1.14e-06  6.15e-09  3.17e-07  6.99e-10  2.59e-08  9.89e-01  
 15  +1.1640e-01  +1.1640e-01  1.14e-08  6.16e-11  3.17e-09  6.99e-12  2.59e-10  9.90e-01  
 16  +1.1640e-01  +1.1640e-01  1.14e-10  6.18e-13  3.18e-11  7.01e-14  2.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.0489ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:26 PM: Optimal value: 1.164e-01
(CVXPY) Oct 06 04:23:26 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:26 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 23, Objective: 0.1164
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:26 PM: Your problem has 501 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:26 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 501
  constraints   = 751
  nnz(P)        = 0
  nnz(A)        = 5912
  cones (total) = 1
    : Nonnegative = 1,  numel = 751

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9655e-01  +2.5309e+02  2.53e+02  9.49e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +4.8608e-01  +5.6598e+01  5.61e+01  4.31e-01  1.36e+01  3.98e-03  5.74e-01  5.80e-01  
  2  +4.2504e-01  +9.4092e+00  8.98e+00  1.08e-01  4.85e+00  2.74e-02  2.23e-01  9.90e-01  
  3  +3.6938e-01  +3.4112e+00  3.04e+00  2.87e-02  1.43e+00  1.31e-02  6.74e-02  7.18e-01  
  4  +2.9231e-01  +2.6807e+00  2.39e+00  1.57e-02  7.94e-01  1.20e-02  3.80e-02  5.15e-01  
  5  +2.5546e-01  +1.1241e+00  8.69e-01  6.21e-03  3.10e-01  1.02e-04  1.63e-02  8.36e-01  
  6  +1.8965e-01  +4.6808e-01  2.78e-01  1.87e-03  9.27e-02  8.49e-05  5.48e-03  7.52e-01  
  7  +1.6099e-01  +3.4459e-01  1.84e-01  1.11e-03  5.71e-02  9.00e-05  3.49e-03  5.67e-01  
  8  +1.3843e-01  +2.2613e-01  8.77e-02  4.99e-04  2.58e-02  5.42e-05  1.69e-03  6.78e-01  
  9  +1.3523e-01  +2.1088e-01  7.56e-02  4.15e-04  2.21e-02  5.11e-05  1.42e-03  2.95e-01  
 10  +1.2841e-01  +1.7261e-01  4.42e-02  2.45e-04  1.27e-02  3.77e-05  8.76e-04  9.90e-01  
 11  +1.1963e-01  +1.3602e-01  1.64e-02  8.74e-05  4.60e-03  1.35e-05  3.30e-04  6.97e-01  
 12  +1.1494e-01  +1.1622e-01  1.28e-03  6.84e-06  3.55e-04  7.65e-07  2.75e-05  9.26e-01  
 13  +1.1454e-01  +1.1464e-01  1.03e-04  5.61e-07  2.87e-05  6.50e-08  2.37e-06  9.49e-01  
 14  +1.1450e-01  +1.1450e-01  1.21e-06  6.60e-09  3.38e-07  7.56e-10  2.80e-08  9.88e-01  
 15  +1.1450e-01  +1.1450e-01  1.21e-08  6.61e-11  3.38e-09  7.57e-12  2.80e-10  9.90e-01  
 16  +1.1450e-01  +1.1450e-01  1.22e-10  6.62e-13  3.39e-11  7.58e-14  2.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.3074ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:26 PM: Optimal value: 1.145e-01
(CVXPY) Oct 06 04:23:26 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:26 PM: Solver (including time spent in interface) took 3.135e-02 seconds
Iteration: 24, Objective: 0.1145
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:26 PM: Your problem has 511 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:26 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 761
  nnz(P)        = 0
  nnz(A)        = 5947
  cones (total) = 1
    : Nonnegative = 1,  numel = 761

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9651e-01  +2.5314e+02  2.53e+02  9.50e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +4.8388e-01  +5.6636e+01  5.62e+01  4.31e-01  1.34e+01  3.99e-03  5.73e-01  5.80e-01  
  2  +4.2052e-01  +9.4894e+00  9.07e+00  1.06e-01  4.77e+00  2.77e-02  2.22e-01  9.90e-01  
  3  +3.6121e-01  +3.3409e+00  2.98e+00  2.73e-02  1.36e+00  1.31e-02  6.45e-02  7.32e-01  
  4  +2.8936e-01  +2.5838e+00  2.29e+00  1.53e-02  7.69e-01  1.15e-02  3.70e-02  4.92e-01  
  5  +2.5114e-01  +1.0819e+00  8.31e-01  6.04e-03  2.99e-01  9.73e-05  1.59e-02  8.50e-01  
  6  +1.9086e-01  +4.8925e-01  2.98e-01  2.04e-03  1.01e-01  7.40e-05  5.95e-03  6.97e-01  
  7  +1.6018e-01  +3.4511e-01  1.85e-01  1.14e-03  5.82e-02  8.23e-05  3.56e-03  5.91e-01  
  8  +1.3722e-01  +2.2079e-01  8.36e-02  4.81e-04  2.49e-02  5.41e-05  1.63e-03  7.64e-01  
  9  +1.3620e-01  +2.1595e-01  7.97e-02  4.44e-04  2.36e-02  5.57e-05  1.50e-03  2.25e-01  
 10  +1.2730e-01  +1.6883e-01  4.15e-02  2.30e-04  1.20e-02  3.52e-05  8.19e-04  9.90e-01  
 11  +1.1674e-01  +1.2382e-01  7.08e-03  3.79e-05  1.98e-03  5.13e-06  1.45e-04  8.69e-01  
 12  +1.1478e-01  +1.1558e-01  8.04e-04  4.36e-06  2.24e-04  4.82e-07  1.80e-05  9.00e-01  
 13  +1.1451e-01  +1.1455e-01  3.65e-05  2.00e-07  1.02e-05  2.34e-08  8.50e-07  9.78e-01  
 14  +1.1450e-01  +1.1450e-01  3.71e-07  2.04e-09  1.04e-07  2.37e-10  8.66e-09  9.90e-01  
 15  +1.1450e-01  +1.1450e-01  3.72e-09  2.04e-11  1.04e-09  2.37e-12  8.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.4912ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:26 PM: Optimal value: 1.145e-01
(CVXPY) Oct 06 04:23:26 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:26 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 25, Objective: 0.1145
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:27 PM: Your problem has 521 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:27 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 771
  nnz(P)        = 0
  nnz(A)        = 5984
  cones (total) = 1
    : Nonnegative = 1,  numel = 771

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9636e-01  +2.5307e+02  2.53e+02  9.50e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +4.7766e-01  +5.6981e+01  5.65e+01  4.32e-01  1.33e+01  4.01e-03  5.74e-01  5.77e-01  
  2  +4.1486e-01  +9.5781e+00  9.16e+00  1.07e-01  4.76e+00  2.81e-02  2.23e-01  9.90e-01  
  3  +3.5380e-01  +3.1394e+00  2.79e+00  2.55e-02  1.26e+00  1.26e-02  6.07e-02  7.59e-01  
  4  +2.8105e-01  +2.4046e+00  2.12e+00  1.41e-02  7.07e-01  1.11e-02  3.44e-02  4.90e-01  
  5  +2.4106e-01  +1.0521e+00  8.11e-01  5.92e-03  2.90e-01  9.30e-05  1.57e-02  8.92e-01  
  6  +1.8643e-01  +4.7946e-01  2.93e-01  2.03e-03  9.98e-02  7.03e-05  5.94e-03  6.92e-01  
  7  +1.5508e-01  +3.2844e-01  1.73e-01  1.08e-03  5.48e-02  7.61e-05  3.38e-03  6.14e-01  
  8  +1.3327e-01  +2.0839e-01  7.51e-02  4.37e-04  2.24e-02  4.95e-05  1.48e-03  7.92e-01  
  9  +1.3260e-01  +2.0603e-01  7.34e-02  4.12e-04  2.19e-02  5.15e-05  1.39e-03  1.74e-01  
 10  +1.2493e-01  +1.6477e-01  3.98e-02  2.23e-04  1.16e-02  3.36e-05  7.90e-04  9.90e-01  
 11  +1.1484e-01  +1.2192e-01  7.08e-03  3.82e-05  2.00e-03  5.11e-06  1.45e-04  8.73e-01  
 12  +1.1290e-01  +1.1379e-01  8.86e-04  4.85e-06  2.49e-04  5.35e-07  1.99e-05  8.85e-01  
 13  +1.1262e-01  +1.1266e-01  4.26e-05  2.35e-07  1.20e-05  2.79e-08  9.99e-07  9.83e-01  
 14  +1.1260e-01  +1.1260e-01  4.38e-07  2.42e-09  1.23e-07  2.86e-10  1.03e-08  9.90e-01  
 15  +1.1260e-01  +1.1260e-01  4.38e-09  2.42e-11  1.23e-09  2.86e-12  1.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.334ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:27 PM: Optimal value: 1.126e-01
(CVXPY) Oct 06 04:23:27 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:27 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 26, Objective: 0.1126
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:27 PM: Your problem has 531 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:27 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 781
  nnz(P)        = 0
  nnz(A)        = 6042
  cones (total) = 1
    : Nonnegative = 1,  numel = 781

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9622e-01  +2.5313e+02  2.53e+02  9.50e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +4.7204e-01  +5.7118e+01  5.66e+01  4.32e-01  1.32e+01  4.02e-03  5.73e-01  5.77e-01  
  2  +4.0526e-01  +9.7724e+00  9.37e+00  1.05e-01  4.62e+00  2.87e-02  2.19e-01  9.90e-01  
  3  +3.3842e-01  +2.9896e+00  2.65e+00  2.34e-02  1.14e+00  1.23e-02  5.58e-02  7.76e-01  
  4  +2.7930e-01  +2.2890e+00  2.01e+00  1.40e-02  6.95e-01  9.96e-03  3.42e-02  4.41e-01  
  5  +2.3455e-01  +1.0225e+00  7.88e-01  5.86e-03  2.85e-01  8.60e-05  1.56e-02  8.90e-01  
  6  +1.8063e-01  +4.6668e-01  2.86e-01  2.02e-03  9.80e-02  6.80e-05  5.93e-03  6.92e-01  
  7  +1.5050e-01  +3.2024e-01  1.70e-01  1.07e-03  5.42e-02  7.37e-05  3.36e-03  6.16e-01  
  8  +1.3091e-01  +2.1556e-01  8.47e-02  4.95e-04  2.54e-02  4.57e-05  1.65e-03  6.27e-01  
  9  +1.2677e-01  +1.9633e-01  6.96e-02  3.84e-04  2.07e-02  4.33e-05  1.30e-03  3.67e-01  
 10  +1.2165e-01  +1.6600e-01  4.44e-02  2.50e-04  1.30e-02  3.70e-05  8.72e-04  9.90e-01  
 11  +1.1538e-01  +1.4152e-01  2.61e-02  1.39e-04  7.49e-03  2.22e-05  5.03e-04  5.35e-01  
 12  +1.0798e-01  +1.1108e-01  3.10e-03  1.63e-05  8.68e-04  2.14e-06  6.28e-05  8.95e-01  
 13  +1.0710e-01  +1.0764e-01  5.48e-04  2.93e-06  1.53e-04  3.57e-07  1.19e-05  8.26e-01  
 14  +1.0691e-01  +1.0692e-01  1.34e-05  7.22e-08  3.76e-06  8.95e-09  2.99e-07  9.88e-01  
 15  +1.0690e-01  +1.0690e-01  1.34e-07  7.22e-10  3.76e-08  8.95e-11  2.99e-09  9.90e-01  
 16  +1.0690e-01  +1.0690e-01  1.34e-09  7.23e-12  3.76e-10  8.96e-13  2.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.2812ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:27 PM: Optimal value: 1.069e-01
(CVXPY) Oct 06 04:23:27 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:27 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 27, Objective: 0.1069
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:27 PM: Your problem has 541 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:27 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 791
  nnz(P)        = 0
  nnz(A)        = 6125
  cones (total) = 1
    : Nonnegative = 1,  numel = 791

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9620e-01  +2.5317e+02  2.53e+02  9.51e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +4.7014e-01  +5.7166e+01  5.67e+01  4.33e-01  1.31e+01  4.03e-03  5.72e-01  5.77e-01  
  2  +4.0227e-01  +9.7487e+00  9.35e+00  1.05e-01  4.57e+00  2.86e-02  2.19e-01  9.90e-01  
  3  +3.4011e-01  +3.1926e+00  2.85e+00  2.60e-02  1.26e+00  1.23e-02  6.22e-02  7.47e-01  
  4  +2.7157e-01  +2.4303e+00  2.16e+00  1.49e-02  7.32e-01  1.03e-02  3.65e-02  4.78e-01  
  5  +2.3786e-01  +1.1227e+00  8.85e-01  6.72e-03  3.25e-01  8.62e-05  1.79e-02  9.00e-01  
  6  +1.8667e-01  +5.2530e-01  3.39e-01  2.44e-03  1.18e-01  5.89e-05  7.09e-03  6.51e-01  
  7  +1.5301e-01  +3.5260e-01  2.00e-01  1.28e-03  6.48e-02  9.46e-05  3.99e-03  7.00e-01  
  8  +1.3978e-01  +2.7432e-01  1.35e-01  8.20e-04  4.22e-02  7.03e-05  2.65e-03  4.10e-01  
  9  +1.2748e-01  +2.0453e-01  7.70e-02  4.45e-04  2.34e-02  4.83e-05  1.50e-03  6.02e-01  
 10  +1.2601e-01  +1.9826e-01  7.23e-02  3.96e-04  2.18e-02  4.86e-05  1.35e-03  1.94e-01  
 11  +1.2031e-01  +1.6183e-01  4.15e-02  2.31e-04  1.24e-02  3.55e-05  8.06e-04  9.90e-01  
 12  +1.1073e-01  +1.2271e-01  1.20e-02  6.33e-05  3.47e-03  9.49e-06  2.35e-04  7.79e-01  
 13  +1.0759e-01  +1.0961e-01  2.02e-03  1.08e-05  5.83e-04  1.41e-06  4.23e-05  8.44e-01  
 14  +1.0698e-01  +1.0721e-01  2.32e-04  1.26e-06  6.70e-05  1.55e-07  5.13e-06  8.94e-01  
 15  +1.0690e-01  +1.0691e-01  4.25e-06  2.31e-08  1.23e-06  2.79e-09  9.49e-08  9.83e-01  
 16  +1.0690e-01  +1.0690e-01  4.25e-08  2.31e-10  1.23e-08  2.79e-11  9.50e-10  9.90e-01  
 17  +1.0690e-01  +1.0690e-01  4.26e-10  2.31e-12  1.23e-10  2.79e-13  9.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.1972ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:27 PM: Optimal value: 1.069e-01
(CVXPY) Oct 06 04:23:27 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:27 PM: Solver (including time spent in interface) took 3.132e-02 seconds
Iteration: 28, Objective: 0.1069
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:27 PM: Your problem has 551 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:27 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 551
  constraints   = 801
  nnz(P)        = 0
  nnz(A)        = 6181
  cones (total) = 1
    : Nonnegative = 1,  numel = 801

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9619e-01  +2.5319e+02  2.53e+02  9.51e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +4.6966e-01  +5.7205e+01  5.67e+01  4.34e-01  1.30e+01  4.03e-03  5.73e-01  5.76e-01  
  2  +4.0124e-01  +9.7386e+00  9.34e+00  1.05e-01  4.56e+00  2.86e-02  2.20e-01  9.90e-01  
  3  +3.4042e-01  +3.4105e+00  3.07e+00  2.83e-02  1.36e+00  1.29e-02  6.75e-02  7.27e-01  
  4  +2.6880e-01  +2.5592e+00  2.29e+00  1.58e-02  7.71e-01  1.05e-02  3.88e-02  4.98e-01  
  5  +2.4014e-01  +1.1308e+00  8.91e-01  6.83e-03  3.29e-01  8.75e-05  1.82e-02  8.82e-01  
  6  +1.8741e-01  +5.3190e-01  3.44e-01  2.49e-03  1.20e-01  5.94e-05  7.25e-03  6.48e-01  
  7  +1.5443e-01  +3.6249e-01  2.08e-01  1.35e-03  6.80e-02  9.51e-05  4.17e-03  6.79e-01  
  8  +1.4065e-01  +2.8027e-01  1.40e-01  8.61e-04  4.41e-02  7.07e-05  2.76e-03  4.14e-01  
  9  +1.2752e-01  +2.0479e-01  7.73e-02  4.51e-04  2.35e-02  4.84e-05  1.51e-03  6.34e-01  
 10  +1.2602e-01  +1.9841e-01  7.24e-02  4.01e-04  2.20e-02  4.86e-05  1.36e-03  1.97e-01  
 11  +1.2088e-01  +1.6437e-01  4.35e-02  2.46e-04  1.31e-02  3.68e-05  8.52e-04  9.90e-01  
 12  +1.1276e-01  +1.3131e-01  1.86e-02  9.95e-05  5.44e-03  1.53e-05  3.63e-04  6.56e-01  
 13  +1.0788e-01  +1.1076e-01  2.87e-03  1.55e-05  8.33e-04  2.04e-06  5.97e-05  8.66e-01  
 14  +1.0704e-01  +1.0745e-01  4.11e-04  2.25e-06  1.19e-04  2.77e-07  9.13e-06  8.81e-01  
 15  +1.0690e-01  +1.0692e-01  1.27e-05  6.97e-08  3.67e-06  8.37e-09  2.87e-07  9.71e-01  
 16  +1.0690e-01  +1.0690e-01  1.27e-07  6.98e-10  3.68e-08  8.38e-11  2.88e-09  9.90e-01  
 17  +1.0690e-01  +1.0690e-01  1.27e-09  6.99e-12  3.68e-10  8.38e-13  2.88e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.1292ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:27 PM: Optimal value: 1.069e-01
(CVXPY) Oct 06 04:23:27 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:27 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 29, Objective: 0.1069
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:27 PM: Your problem has 561 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:28 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 561
  constraints   = 811
  nnz(P)        = 0
  nnz(A)        = 6242
  cones (total) = 1
    : Nonnegative = 1,  numel = 811

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9619e-01  +2.5316e+02  2.53e+02  9.51e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +4.6790e-01  +5.7133e+01  5.67e+01  4.34e-01  1.29e+01  4.04e-03  5.71e-01  5.77e-01  
  2  +3.9592e-01  +1.0281e+01  9.88e+00  1.09e-01  4.61e+00  2.86e-02  2.24e-01  9.68e-01  
  3  +3.3309e-01  +3.4143e+00  3.08e+00  2.79e-02  1.33e+00  1.23e-02  6.68e-02  7.41e-01  
  4  +2.6845e-01  +2.5770e+00  2.31e+00  1.63e-02  7.86e-01  9.82e-03  4.02e-02  4.65e-01  
  5  +2.3789e-01  +1.1061e+00  8.68e-01  6.72e-03  3.20e-01  8.24e-05  1.81e-02  8.64e-01  
  6  +1.8352e-01  +5.1889e-01  3.35e-01  2.45e-03  1.16e-01  6.51e-05  7.21e-03  6.62e-01  
  7  +1.5331e-01  +3.6198e-01  2.09e-01  1.37e-03  6.82e-02  9.07e-05  4.27e-03  6.40e-01  
  8  +1.3856e-01  +2.7550e-01  1.37e-01  8.47e-04  4.30e-02  6.72e-05  2.73e-03  4.37e-01  
  9  +1.2655e-01  +2.0677e-01  8.02e-02  4.71e-04  2.44e-02  5.10e-05  1.58e-03  6.62e-01  
 10  +1.2445e-01  +1.9736e-01  7.29e-02  4.06e-04  2.21e-02  4.96e-05  1.38e-03  2.26e-01  
 11  +1.1934e-01  +1.6391e-01  4.46e-02  2.54e-04  1.34e-02  3.72e-05  8.80e-04  9.90e-01  
 12  +1.1162e-01  +1.3255e-01  2.09e-02  1.13e-04  6.13e-03  1.72e-05  4.10e-04  6.17e-01  
 13  +1.0608e-01  +1.0916e-01  3.08e-03  1.66e-05  8.91e-04  2.16e-06  6.40e-05  8.76e-01  
 14  +1.0516e-01  +1.0563e-01  4.62e-04  2.52e-06  1.32e-04  3.10e-07  1.03e-05  8.84e-01  
 15  +1.0501e-01  +1.0502e-01  1.39e-05  7.62e-08  3.99e-06  9.11e-09  3.16e-07  9.73e-01  
 16  +1.0500e-01  +1.0500e-01  1.39e-07  7.64e-10  4.00e-08  9.13e-11  3.17e-09  9.90e-01  
 17  +1.0500e-01  +1.0500e-01  1.40e-09  7.64e-12  4.00e-10  9.14e-13  3.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.1291ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:28 PM: Optimal value: 1.050e-01
(CVXPY) Oct 06 04:23:28 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:28 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 30, Objective: 0.1050
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:28 PM: Your problem has 562 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:28 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 562
  constraints   = 812
  nnz(P)        = 0
  nnz(A)        = 6251
  cones (total) = 1
    : Nonnegative = 1,  numel = 812

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9618e-01  +2.5318e+02  2.53e+02  9.51e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +4.6776e-01  +5.7142e+01  5.67e+01  4.34e-01  1.29e+01  4.04e-03  5.71e-01  5.77e-01  
  2  +3.9544e-01  +1.0269e+01  9.87e+00  1.08e-01  4.60e+00  2.86e-02  2.25e-01  9.69e-01  
  3  +3.3261e-01  +3.4037e+00  3.07e+00  2.78e-02  1.32e+00  1.23e-02  6.67e-02  7.42e-01  
  4  +2.6821e-01  +2.5764e+00  2.31e+00  1.63e-02  7.87e-01  9.84e-03  4.03e-02  4.62e-01  
  5  +2.3747e-01  +1.1001e+00  8.63e-01  6.67e-03  3.18e-01  8.27e-05  1.80e-02  8.63e-01  
  6  +1.8298e-01  +5.1398e-01  3.31e-01  2.42e-03  1.15e-01  6.52e-05  7.13e-03  6.65e-01  
  7  +1.5258e-01  +3.5539e-01  2.03e-01  1.34e-03  6.62e-02  8.62e-05  4.16e-03  6.34e-01  
  8  +1.3847e-01  +2.7391e-01  1.35e-01  8.39e-04  4.26e-02  6.52e-05  2.71e-03  4.26e-01  
  9  +1.2681e-01  +2.0813e-01  8.13e-02  4.78e-04  2.48e-02  4.98e-05  1.60e-03  6.26e-01  
 10  +1.2459e-01  +1.9802e-01  7.34e-02  4.10e-04  2.22e-02  4.85e-05  1.39e-03  2.36e-01  
 11  +1.1962e-01  +1.6506e-01  4.54e-02  2.60e-04  1.37e-02  3.78e-05  9.00e-04  9.90e-01  
 12  +1.1233e-01  +1.3555e-01  2.32e-02  1.25e-04  6.82e-03  1.92e-05  4.54e-04  5.83e-01  
 13  +1.0612e-01  +1.0931e-01  3.19e-03  1.71e-05  9.22e-04  2.22e-06  6.59e-05  8.86e-01  
 14  +1.0519e-01  +1.0571e-01  5.23e-04  2.85e-06  1.50e-04  3.52e-07  1.16e-05  8.74e-01  
 15  +1.0501e-01  +1.0502e-01  1.69e-05  9.27e-08  4.86e-06  1.11e-08  3.84e-07  9.71e-01  
 16  +1.0500e-01  +1.0500e-01  1.70e-07  9.31e-10  4.88e-08  1.11e-10  3.86e-09  9.90e-01  
 17  +1.0500e-01  +1.0500e-01  1.70e-09  9.31e-12  4.88e-10  1.11e-12  3.86e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.853ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:28 PM: Optimal value: 1.050e-01
(CVXPY) Oct 06 04:23:28 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:28 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 31, Objective: 0.1050
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:28 PM: Your problem has 563 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:28 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 563
  constraints   = 813
  nnz(P)        = 0
  nnz(A)        = 6263
  cones (total) = 1
    : Nonnegative = 1,  numel = 813

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9617e-01  +2.5320e+02  2.53e+02  9.51e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +4.6680e-01  +5.7184e+01  5.67e+01  4.34e-01  1.29e+01  4.04e-03  5.71e-01  5.77e-01  
  2  +3.9442e-01  +9.7969e+00  9.40e+00  1.04e-01  4.43e+00  2.88e-02  2.17e-01  9.90e-01  
  3  +3.2972e-01  +3.3137e+00  2.98e+00  2.70e-02  1.28e+00  1.25e-02  6.49e-02  7.41e-01  
  4  +2.6523e-01  +2.4784e+00  2.21e+00  1.56e-02  7.52e-01  9.85e-03  3.87e-02  4.68e-01  
  5  +2.3561e-01  +1.1032e+00  8.68e-01  6.74e-03  3.20e-01  8.22e-05  1.82e-02  8.72e-01  
  6  +1.7555e-01  +4.4569e-01  2.70e-01  1.95e-03  9.25e-02  5.92e-05  5.85e-03  7.41e-01  
  7  +1.5106e-01  +3.3645e-01  1.85e-01  1.22e-03  6.01e-02  7.42e-05  3.82e-03  5.48e-01  
  8  +1.3472e-01  +2.4784e-01  1.13e-01  6.98e-04  3.52e-02  5.70e-05  2.27e-03  5.41e-01  
  9  +1.2357e-01  +1.8973e-01  6.62e-02  3.84e-04  2.00e-02  3.95e-05  1.30e-03  5.71e-01  
 10  +1.2269e-01  +1.8703e-01  6.43e-02  3.58e-04  1.94e-02  4.06e-05  1.22e-03  1.39e-01  
 11  +1.1425e-01  +1.4262e-01  2.84e-02  1.57e-04  8.40e-03  2.38e-05  5.56e-04  9.90e-01  
 12  +1.0677e-01  +1.1171e-01  4.94e-03  2.67e-05  1.43e-03  3.48e-06  1.01e-04  9.14e-01  
 13  +1.0540e-01  +1.0650e-01  1.10e-03  6.01e-06  3.17e-04  7.35e-07  2.41e-05  8.02e-01  
 14  +1.0503e-01  +1.0510e-01  7.20e-05  3.94e-07  2.07e-05  4.72e-08  1.63e-06  9.45e-01  
 15  +1.0500e-01  +1.0500e-01  7.44e-07  4.08e-09  2.14e-07  4.86e-10  1.69e-08  9.90e-01  
 16  +1.0500e-01  +1.0500e-01  7.46e-09  4.09e-11  2.14e-09  4.87e-12  1.69e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.9206ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:28 PM: Optimal value: 1.050e-01
(CVXPY) Oct 06 04:23:28 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:28 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 32, Objective: 0.1050
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:28 PM: Your problem has 564 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:28 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 564
  constraints   = 814
  nnz(P)        = 0
  nnz(A)        = 6267
  cones (total) = 1
    : Nonnegative = 1,  numel = 814

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9617e-01  +2.5320e+02  2.53e+02  9.51e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +4.6664e-01  +5.7171e+01  5.67e+01  4.34e-01  1.28e+01  4.04e-03  5.71e-01  5.77e-01  
  2  +3.9401e-01  +9.7958e+00  9.40e+00  1.04e-01  4.42e+00  2.88e-02  2.17e-01  9.90e-01  
  3  +3.2924e-01  +3.3019e+00  2.97e+00  2.69e-02  1.27e+00  1.24e-02  6.46e-02  7.42e-01  
  4  +2.6450e-01  +2.4692e+00  2.20e+00  1.55e-02  7.47e-01  9.82e-03  3.84e-02  4.69e-01  
  5  +2.3394e-01  +1.0928e+00  8.59e-01  6.64e-03  3.16e-01  8.21e-05  1.80e-02  8.81e-01  
  6  +1.7505e-01  +4.4523e-01  2.70e-01  1.95e-03  9.23e-02  5.85e-05  5.85e-03  7.36e-01  
  7  +1.5060e-01  +3.3631e-01  1.86e-01  1.22e-03  6.00e-02  7.50e-05  3.81e-03  5.55e-01  
  8  +1.3478e-01  +2.4920e-01  1.14e-01  7.11e-04  3.57e-02  5.97e-05  2.32e-03  5.60e-01  
  9  +1.2358e-01  +1.9041e-01  6.68e-02  3.90e-04  2.03e-02  4.07e-05  1.32e-03  5.70e-01  
 10  +1.2270e-01  +1.8768e-01  6.50e-02  3.63e-04  1.96e-02  4.16e-05  1.24e-03  1.38e-01  
 11  +1.1441e-01  +1.4347e-01  2.91e-02  1.61e-04  8.62e-03  2.42e-05  5.72e-04  9.90e-01  
 12  +1.0681e-01  +1.1192e-01  5.11e-03  2.77e-05  1.49e-03  3.60e-06  1.05e-04  9.09e-01  
 13  +1.0546e-01  +1.0675e-01  1.29e-03  7.05e-06  3.72e-04  8.79e-07  2.82e-05  7.88e-01  
 14  +1.0503e-01  +1.0512e-01  8.81e-05  4.84e-07  2.54e-05  5.81e-08  1.99e-06  9.41e-01  
 15  +1.0500e-01  +1.0500e-01  9.20e-07  5.06e-09  2.65e-07  6.03e-10  2.09e-08  9.90e-01  
 16  +1.0500e-01  +1.0500e-01  9.22e-09  5.07e-11  2.66e-09  6.04e-12  2.09e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.3376ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:28 PM: Optimal value: 1.050e-01
(CVXPY) Oct 06 04:23:28 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:28 PM: Solver (including time spent in interface) took 3.124e-02 seconds
FULL MODEL:
  Accruacy: 0.874
  Our objective: 0.748

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.164)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x9 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x9 = 0)                       <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x5 = 1 AND x7 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x4 = 0 AND x6 = 0 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x9 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x9 = 0)                                             <-- (term's our objective: 0.056)
 OR (x0 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 0)                       <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.028)
 OR (x1 = 0 AND x2 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.036)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.048)
 OR (x1 = 1 AND x3 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.036)
 OR (x1 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.02)
 OR (x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.028)
 OR (x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.04)
 OR (x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x2 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)                                             <-- (term's our objective: 0.052)
 OR (x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 11.663676261901855
Best over terms:
  Our final objective: 0.16399999999999995
    Its accruacy: 0.582
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16399999999999995
  Highest accruacy: 0.582
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

