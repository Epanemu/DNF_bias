Command:
python test_script.py -s constant_subclass -d 10 -n 50 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 10.

Computed total variation: 0.96
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:39 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:39 PM: Finished problem compilation (took 2.982e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 346
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8886e-01  +2.6919e+01  2.64e+01  8.41e-01  7.31e+00  1.00e+00  1.11e+00   ------   
  1  +5.4657e-01  +5.8369e+00  5.29e+00  3.72e-01  4.27e+00  3.64e-03  6.33e-01  6.02e-01  
  2  +4.2012e-01  +1.3020e+00  8.82e-01  8.13e-02  1.15e+00  2.43e-02  2.21e-01  9.90e-01  
  3  +3.5224e-01  +6.9191e-01  3.40e-01  2.28e-02  3.26e-01  9.86e-03  7.85e-02  7.13e-01  
  4  +3.0051e-01  +4.0271e-01  1.02e-01  5.42e-03  7.70e-02  1.85e-03  2.66e-02  7.56e-01  
  5  +2.8152e-01  +2.8795e-01  6.43e-03  3.41e-04  4.80e-03  6.94e-05  1.92e-03  9.41e-01  
  6  +2.8011e-01  +2.8018e-01  6.46e-05  3.43e-06  4.83e-05  6.93e-07  1.96e-05  9.90e-01  
  7  +2.8010e-01  +2.8010e-01  6.46e-07  3.43e-08  4.83e-07  6.93e-09  1.96e-07  9.90e-01  
  8  +2.8010e-01  +2.8010e-01  6.46e-09  3.43e-10  4.83e-09  6.93e-11  1.96e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 609.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:39 PM: Optimal value: 2.801e-01
(CVXPY) Oct 06 04:22:39 PM: Compilation took 2.982e-02 seconds
(CVXPY) Oct 06 04:22:39 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:39 PM: Your problem has 56 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:39 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 81
  nnz(P)        = 0
  nnz(A)        = 434
  cones (total) = 1
    : Nonnegative = 1,  numel = 81

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7013e-01  +2.8380e+01  2.79e+01  8.52e-01  7.55e+00  1.00e+00  1.17e+00   ------   
  1  +4.6508e-01  +6.0057e+00  5.54e+00  3.75e-01  4.26e+00  3.71e-03  6.48e-01  6.11e-01  
  2  +2.8132e-01  +1.4081e+00  1.13e+00  8.27e-02  1.18e+00  2.39e-02  2.13e-01  9.29e-01  
  3  +2.1697e-01  +6.5803e-01  4.41e-01  2.48e-02  3.80e-01  1.16e-02  7.57e-02  7.40e-01  
  4  +1.7217e-01  +4.1470e-01  2.43e-01  1.09e-02  1.79e-01  7.00e-03  3.60e-02  5.91e-01  
  5  +1.2990e-01  +2.3787e-01  1.08e-01  3.90e-03  7.44e-02  3.48e-03  1.33e-02  7.11e-01  
  6  +8.9921e-02  +1.0931e-01  1.94e-02  6.40e-04  1.28e-02  1.76e-04  2.30e-03  9.49e-01  
  7  +8.0748e-02  +8.1272e-02  5.24e-04  1.68e-05  3.40e-04  4.14e-06  6.16e-05  9.75e-01  
  8  +8.0521e-02  +8.0559e-02  3.76e-05  1.31e-06  2.50e-05  1.77e-07  5.13e-06  9.26e-01  
  9  +8.0500e-02  +8.0501e-02  5.29e-07  1.89e-08  3.55e-07  3.50e-09  7.62e-08  9.88e-01  
 10  +8.0500e-02  +8.0500e-02  5.28e-09  1.89e-10  3.55e-09  3.49e-11  7.62e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 643µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:39 PM: Optimal value: 8.050e-02
(CVXPY) Oct 06 04:22:39 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:22:39 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:40 PM: Your problem has 66 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:40 PM: Finished problem compilation (took 1.555e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 66
  constraints   = 91
  nnz(P)        = 0
  nnz(A)        = 490
  cones (total) = 1
    : Nonnegative = 1,  numel = 91

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6712e-01  +2.8321e+01  2.79e+01  8.60e-01  7.37e+00  1.00e+00  1.16e+00   ------   
  1  +4.3837e-01  +6.0262e+00  5.59e+00  3.83e-01  4.06e+00  3.79e-03  6.39e-01  6.10e-01  
  2  +2.5563e-01  +1.7579e+00  1.50e+00  1.06e-01  1.44e+00  2.24e-02  2.58e-01  8.13e-01  
  3  +1.8621e-01  +6.5870e-01  4.72e-01  2.87e-02  4.25e-01  1.01e-02  8.26e-02  7.91e-01  
  4  +1.4000e-01  +3.3903e-01  1.99e-01  1.03e-02  1.66e-01  4.60e-03  3.18e-02  6.96e-01  
  5  +1.0900e-01  +2.3577e-01  1.27e-01  4.83e-03  9.76e-02  3.25e-03  1.57e-02  6.51e-01  
  6  +7.3006e-02  +1.0165e-01  2.86e-02  1.02e-03  2.10e-02  4.90e-04  3.46e-03  8.79e-01  
  7  +6.1010e-02  +6.1959e-02  9.49e-04  3.30e-05  6.83e-04  1.26e-05  1.15e-04  9.68e-01  
  8  +6.0647e-02  +6.0761e-02  1.14e-04  4.27e-06  8.29e-05  1.11e-06  1.56e-05  8.82e-01  
  9  +6.0602e-02  +6.0605e-02  3.53e-06  1.37e-07  2.59e-06  3.08e-08  5.12e-07  9.70e-01  
 10  +6.0600e-02  +6.0600e-02  3.53e-08  1.38e-09  2.59e-08  3.07e-10  5.14e-09  9.90e-01  
 11  +6.0600e-02  +6.0600e-02  3.54e-10  1.38e-11  2.60e-10  3.08e-12  5.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 823µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:40 PM: Optimal value: 6.060e-02
(CVXPY) Oct 06 04:22:40 PM: Compilation took 1.555e-02 seconds
(CVXPY) Oct 06 04:22:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.0606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:40 PM: Your problem has 68 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:40 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 68
  constraints   = 93
  nnz(P)        = 0
  nnz(A)        = 497
  cones (total) = 1
    : Nonnegative = 1,  numel = 93

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6334e-01  +2.8427e+01  2.80e+01  8.61e-01  7.33e+00  1.00e+00  1.17e+00   ------   
  1  +4.0872e-01  +6.0259e+00  5.62e+00  3.77e-01  3.98e+00  3.85e-03  6.34e-01  6.12e-01  
  2  +1.6426e-01  +1.8067e+00  1.64e+00  1.01e-01  1.33e+00  2.23e-02  2.46e-01  8.00e-01  
  3  +1.3418e-01  +6.5291e-01  5.19e-01  3.31e-02  4.64e-01  1.09e-02  9.27e-02  7.40e-01  
  4  +9.2364e-02  +2.7364e-01  1.81e-01  1.02e-02  1.54e-01  4.17e-03  3.17e-02  7.10e-01  
  5  +7.7624e-02  +2.1663e-01  1.39e-01  6.47e-03  1.12e-01  3.00e-03  2.08e-02  5.61e-01  
  6  +5.1190e-02  +8.9847e-02  3.87e-02  1.66e-03  2.96e-02  7.68e-04  5.61e-03  7.77e-01  
  7  +4.0943e-02  +4.1944e-02  1.00e-03  4.28e-05  7.60e-04  1.39e-05  1.48e-04  9.79e-01  
  8  +4.0656e-02  +4.0790e-02  1.34e-04  6.03e-06  1.01e-04  1.31e-06  2.23e-05  9.17e-01  
  9  +4.0602e-02  +4.0606e-02  4.34e-06  2.01e-07  3.25e-06  3.44e-08  7.71e-07  9.69e-01  
 10  +4.0600e-02  +4.0600e-02  4.34e-08  2.02e-09  3.25e-08  3.44e-10  7.74e-09  9.90e-01  
 11  +4.0600e-02  +4.0600e-02  4.34e-10  2.02e-11  3.26e-10  3.44e-12  7.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 749.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:40 PM: Optimal value: 4.060e-02
(CVXPY) Oct 06 04:22:40 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:22:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.0406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:40 PM: Your problem has 78 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:40 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 78
  constraints   = 103
  nnz(P)        = 0
  nnz(A)        = 529
  cones (total) = 1
    : Nonnegative = 1,  numel = 103

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4764e-01  +2.9545e+01  2.91e+01  8.68e-01  7.09e+00  1.00e+00  1.21e+00   ------   
  1  +3.1257e-01  +6.3026e+00  5.99e+00  3.78e-01  3.75e+00  4.05e-03  6.37e-01  6.07e-01  
  2  +1.7167e-01  +1.5696e+00  1.40e+00  1.09e-01  1.35e+00  1.81e-02  2.60e-01  7.84e-01  
  3  +1.1955e-01  +6.4268e-01  5.23e-01  3.56e-02  4.91e-01  9.34e-03  1.01e-01  7.17e-01  
  4  +6.8385e-02  +2.0447e-01  1.36e-01  7.89e-03  1.19e-01  2.66e-03  2.59e-02  7.82e-01  
  5  +5.9985e-02  +1.8986e-01  1.30e-01  6.16e-03  1.05e-01  2.50e-03  2.05e-02  4.35e-01  
  6  +3.3920e-02  +7.4212e-02  4.03e-02  1.78e-03  3.14e-02  4.59e-04  6.19e-03  9.20e-01  
  7  +2.1167e-02  +2.2716e-02  1.55e-03  6.55e-05  1.17e-03  1.37e-05  2.36e-04  9.67e-01  
  8  +2.0751e-02  +2.0910e-02  1.59e-04  7.22e-06  1.23e-04  9.84e-07  2.73e-05  9.00e-01  
  9  +2.0702e-02  +2.0707e-02  4.88e-06  2.32e-07  3.81e-06  2.84e-08  9.04e-07  9.72e-01  
 10  +2.0700e-02  +2.0700e-02  4.87e-08  2.33e-09  3.81e-08  2.84e-10  9.07e-09  9.90e-01  
 11  +2.0700e-02  +2.0700e-02  4.90e-10  2.34e-11  3.83e-10  2.85e-12  9.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 806.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:40 PM: Optimal value: 2.070e-02
(CVXPY) Oct 06 04:22:40 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:40 PM: Your problem has 83 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:40 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 83
  constraints   = 108
  nnz(P)        = 0
  nnz(A)        = 559
  cones (total) = 1
    : Nonnegative = 1,  numel = 108

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4272e-01  +2.9402e+01  2.90e+01  8.71e-01  7.05e+00  1.00e+00  1.21e+00   ------   
  1  +2.8487e-01  +6.3179e+00  6.03e+00  3.81e-01  3.69e+00  4.10e-03  6.36e-01  6.03e-01  
  2  +1.3696e-01  +1.4993e+00  1.36e+00  1.02e-01  1.25e+00  1.89e-02  2.49e-01  8.05e-01  
  3  +9.1412e-02  +4.4405e-01  3.53e-01  2.57e-02  3.34e-01  6.54e-03  7.50e-02  8.06e-01  
  4  +6.2863e-02  +2.1499e-01  1.52e-01  1.02e-02  1.41e-01  2.95e-03  3.22e-02  6.03e-01  
  5  +4.9838e-02  +1.7000e-01  1.20e-01  6.43e-03  1.04e-01  2.28e-03  2.14e-02  5.22e-01  
  6  +3.2605e-02  +8.1966e-02  4.94e-02  2.40e-03  4.02e-02  9.31e-04  8.35e-03  6.61e-01  
  7  +2.1140e-02  +2.2600e-02  1.46e-03  7.04e-05  1.18e-03  1.29e-05  2.53e-04  9.85e-01  
  8  +2.0756e-02  +2.0958e-02  2.01e-04  1.03e-05  1.65e-04  1.39e-06  3.95e-05  8.73e-01  
  9  +2.0706e-02  +2.0722e-02  1.58e-05  8.30e-07  1.30e-05  1.28e-07  3.27e-06  9.54e-01  
 10  +2.0700e-02  +2.0700e-02  1.62e-07  8.51e-09  1.33e-07  1.30e-09  3.36e-08  9.90e-01  
 11  +2.0700e-02  +2.0700e-02  1.62e-09  8.52e-11  1.33e-09  1.30e-11  3.36e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 867.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:40 PM: Optimal value: 2.070e-02
(CVXPY) Oct 06 04:22:40 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.98
  Our objective: 0.96

IF 
    (x0 = 0 AND x1 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.32)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x7 = 0 AND x9 = 1) <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x5 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.2)
 OR (x2 = 0 AND x3 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.24)
 OR (x2 = 0 AND x6 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.32)
 OR (x2 = 1 AND x6 = 1 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.08)
 OR (x3 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.50941014289856
Best over terms:
  Our final objective: 0.31999999999999995
    Its accruacy: 0.66
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.31999999999999995
  Highest accruacy: 0.66
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

