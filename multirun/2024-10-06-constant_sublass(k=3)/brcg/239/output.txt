Command:
python test_script.py -s constant_subclass -d 6 -n 50000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14611999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 6.

Computed total variation: 0.14611999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:00:27 PM: Your problem has 25013 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:00:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:00:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:00:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:00:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:00:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:00:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:00:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:00:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:00:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:00:28 PM: Finished problem compilation (took 2.071e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25013
  constraints   = 50013
  nnz(P)        = 0
  nnz(A)        = 225013
  cones (total) = 1
    : Nonnegative = 1,  numel = 50013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.9317e-01  +5.1431e+03  5.14e+03  3.90e-01  1.36e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4210e-01  +6.8129e+02  6.81e+02  1.56e-01  6.86e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7217e+02  1.72e+02  1.40e-01  6.15e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0080e-01  +1.0536e+01  1.00e+01  2.91e-02  1.26e+01  3.46e-06  1.91e-01  4.74e-01  
  5  +4.9999e-01  +1.0370e+00  5.37e-01  1.62e-03  7.22e-01  2.91e-05  1.71e-01  6.26e-01  
  6  +4.9999e-01  +6.1247e-01  1.12e-01  3.37e-04  1.50e-01  1.16e-05  2.76e-02  8.51e-01  
  7  +4.9911e-01  +8.9168e-01  3.93e-01  5.02e-04  2.25e-01  5.50e-04  1.88e-03  9.66e-01  
  8  +4.8447e-01  +8.1974e-01  3.35e-01  3.04e-05  1.36e-02  8.55e-03  9.65e-05  9.50e-01  
  9  +4.7465e-01  +5.9694e-01  1.22e-01  6.57e-06  2.94e-03  4.80e-03  2.08e-05  8.89e-01  
 10  +4.6476e-01  +4.9469e-01  2.99e-02  1.55e-06  6.92e-04  4.25e-04  5.16e-06  8.39e-01  
 11  +4.5950e-01  +4.6255e-01  3.06e-03  1.53e-07  6.83e-05  3.78e-05  5.25e-07  9.02e-01  
 12  +4.5872e-01  +4.5926e-01  5.41e-04  2.38e-08  1.06e-05  4.07e-06  9.35e-08  8.92e-01  
 13  +4.5854e-01  +4.5855e-01  6.74e-06  2.79e-10  1.25e-07  4.26e-08  1.17e-09  9.89e-01  
 14  +4.5854e-01  +4.5854e-01  6.74e-08  2.78e-12  1.25e-09  4.27e-10  1.17e-11  9.90e-01  
 15  +4.5854e-01  +4.5854e-01  7.22e-10  2.93e-14  1.31e-11  1.62e-11  4.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 471.2493ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:00:28 PM: Optimal value: 4.585e-01
(CVXPY) Oct 06 04:00:28 PM: Compilation took 2.071e-01 seconds
(CVXPY) Oct 06 04:00:28 PM: Solver (including time spent in interface) took 5.251e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:00:28 PM: Your problem has 25023 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:00:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:00:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:00:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:00:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:00:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:00:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:00:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:00:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:00:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:00:28 PM: Finished problem compilation (took 1.802e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25023
  constraints   = 50023
  nnz(P)        = 0
  nnz(A)        = 268019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.33e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1432e+03  5.14e+03  3.90e-01  1.42e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8091e+02  6.80e+02  1.56e-01  7.18e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1084e-01  +1.7195e+02  1.71e+02  1.40e-01  6.44e+01  2.95e-05  2.40e-01  1.13e-01  
  4  +5.0078e-01  +1.0312e+01  9.81e+00  2.85e-02  1.29e+01  3.49e-06  1.90e-01  4.86e-01  
  5  +5.0002e-01  +1.3759e+00  8.76e-01  2.65e-03  1.23e+00  3.19e-05  1.72e-01  5.16e-01  
  6  +5.0001e-01  +8.7021e-01  3.70e-01  1.11e-03  5.18e-01  1.38e-05  7.23e-02  6.98e-01  
  7  +4.9999e-01  +7.2418e-01  2.24e-01  6.70e-04  3.13e-01  1.55e-05  2.27e-02  7.53e-01  
  8  +4.9954e-01  +7.2148e-01  2.22e-01  2.86e-04  1.34e-01  2.88e-04  9.56e-04  9.90e-01  
  9  +4.9262e-01  +7.0397e-01  2.11e-01  2.17e-05  1.02e-02  4.15e-03  6.09e-05  9.37e-01  
 10  +4.8172e-01  +6.6386e-01  1.82e-01  8.34e-06  3.93e-03  7.75e-03  2.33e-05  6.44e-01  
 11  +4.8431e-01  +6.3714e-01  1.53e-01  7.02e-06  3.30e-03  1.20e-03  1.95e-05  7.34e-01  
 12  +4.7999e-01  +6.1993e-01  1.40e-01  6.00e-06  2.82e-03  1.03e-03  1.68e-05  2.02e-01  
 13  +4.6987e-01  +5.7732e-01  1.07e-01  4.17e-06  1.96e-03  3.32e-04  1.19e-05  6.27e-01  
 14  +4.4658e-01  +4.9281e-01  4.62e-02  1.55e-06  7.26e-04  9.98e-05  4.67e-06  6.72e-01  
 15  +4.4459e-01  +4.8579e-01  4.12e-02  1.36e-06  6.38e-04  7.50e-05  4.11e-06  2.56e-01  
 16  +4.2803e-01  +4.3008e-01  2.06e-03  6.49e-08  3.04e-05  7.52e-07  2.05e-07  9.62e-01  
 17  +4.2705e-01  +4.2707e-01  2.09e-05  6.58e-10  3.08e-07  7.57e-09  2.08e-09  9.90e-01  
 18  +4.2704e-01  +4.2704e-01  2.09e-07  6.58e-12  3.08e-09  7.88e-11  2.17e-11  9.90e-01  
 19  +4.2704e-01  +4.2704e-01  2.09e-09  6.59e-14  3.08e-11  8.20e-13  2.25e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 701.5964ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:00:29 PM: Optimal value: 4.270e-01
(CVXPY) Oct 06 04:00:29 PM: Compilation took 1.802e-01 seconds
(CVXPY) Oct 06 04:00:29 PM: Solver (including time spent in interface) took 7.597e-01 seconds
FULL MODEL:
  Accruacy: 0.57306
  Our objective: 0.14612000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.14612)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.123232126235962
Best over terms:
  Our final objective: 0.14612000000000003
    Its accruacy: 0.57306
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14612000000000003
  Highest accruacy: 0.57306
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

