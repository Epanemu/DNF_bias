Command:
python test_script.py -s constant_subclass -d 10 -n 100 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.13999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 10.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:51 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:51 PM: Finished problem compilation (took 4.223e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 671
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9775e-01  +5.1150e+01  5.07e+01  8.75e-01  1.08e+01  1.00e+00  1.04e+00   ------   
  1  +5.7371e-01  +1.1411e+01  1.08e+01  3.94e-01  6.61e+00  3.73e-03  6.08e-01  5.78e-01  
  2  +5.1245e-01  +1.8093e+00  1.30e+00  1.06e-01  2.22e+00  2.03e-02  2.76e-01  9.90e-01  
  3  +4.9698e-01  +8.3134e-01  3.34e-01  2.53e-02  5.59e-01  7.33e-03  8.12e-02  7.66e-01  
  4  +4.7607e-01  +7.2219e-01  2.46e-01  9.95e-03  2.26e-01  7.84e-03  3.40e-02  6.54e-01  
  5  +4.6409e-01  +5.8741e-01  1.23e-01  4.74e-03  1.07e-01  3.06e-03  1.75e-02  5.63e-01  
  6  +4.5776e-01  +5.3662e-01  7.89e-02  2.59e-03  5.82e-02  1.57e-03  1.01e-02  6.14e-01  
  7  +4.4734e-01  +4.7192e-01  2.46e-02  6.32e-04  1.43e-02  4.95e-04  2.87e-03  7.60e-01  
  8  +4.4111e-01  +4.4441e-01  3.30e-03  7.56e-05  1.71e-03  4.98e-06  3.90e-04  9.82e-01  
  9  +4.4011e-01  +4.4015e-01  3.93e-05  8.80e-07  1.99e-05  5.81e-08  4.64e-06  9.88e-01  
 10  +4.4010e-01  +4.4010e-01  3.93e-07  8.79e-09  1.99e-07  5.81e-10  4.64e-08  9.90e-01  
 11  +4.4010e-01  +4.4010e-01  3.93e-09  8.79e-11  1.99e-09  5.81e-12  4.64e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 994.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:51 PM: Optimal value: 4.401e-01
(CVXPY) Oct 06 04:22:51 PM: Compilation took 4.223e-02 seconds
(CVXPY) Oct 06 04:22:51 PM: Solver (including time spent in interface) took 9.634e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:51 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:51 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 786
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9544e-01  +5.1414e+01  5.09e+01  8.81e-01  1.08e+01  1.00e+00  1.05e+00   ------   
  1  +5.5995e-01  +1.1440e+01  1.09e+01  4.02e-01  6.50e+00  3.74e-03  6.10e-01  5.79e-01  
  2  +4.9672e-01  +1.9118e+00  1.42e+00  1.05e-01  2.21e+00  2.20e-02  2.69e-01  9.90e-01  
  3  +4.6127e-01  +9.3094e-01  4.70e-01  2.35e-02  5.25e-01  1.22e-02  7.33e-02  7.89e-01  
  4  +4.2922e-01  +6.7171e-01  2.42e-01  8.99e-03  1.99e-01  5.52e-03  3.35e-02  6.33e-01  
  5  +4.0631e-01  +5.0080e-01  9.45e-02  3.02e-03  6.62e-02  8.35e-04  1.37e-02  8.03e-01  
  6  +3.9325e-01  +4.0769e-01  1.44e-02  4.41e-04  9.65e-03  2.39e-05  2.34e-03  9.90e-01  
  7  +3.9031e-01  +3.9081e-01  5.01e-04  1.51e-05  3.30e-04  7.08e-07  8.63e-05  9.69e-01  
  8  +3.9021e-01  +3.9024e-01  3.58e-05  1.07e-06  2.34e-05  5.48e-08  6.40e-06  9.41e-01  
  9  +3.9020e-01  +3.9020e-01  3.91e-07  1.17e-08  2.55e-07  6.20e-10  7.01e-08  9.90e-01  
 10  +3.9020e-01  +3.9020e-01  3.92e-09  1.17e-10  2.56e-09  6.21e-12  7.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0593ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:51 PM: Optimal value: 3.902e-01
(CVXPY) Oct 06 04:22:51 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:51 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3902
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:51 PM: Your problem has 91 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:51 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 91
  constraints   = 141
  nnz(P)        = 0
  nnz(A)        = 892
  cones (total) = 1
    : Nonnegative = 1,  numel = 141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8943e-01  +5.1987e+01  5.15e+01  8.85e-01  1.08e+01  1.00e+00  1.06e+00   ------   
  1  +5.2735e-01  +1.1512e+01  1.10e+01  4.05e-01  6.38e+00  3.78e-03  6.10e-01  5.83e-01  
  2  +4.5716e-01  +2.3190e+00  1.86e+00  1.12e-01  2.36e+00  2.46e-02  2.70e-01  9.35e-01  
  3  +4.0026e-01  +1.0351e+00  6.35e-01  2.79e-02  6.23e-01  1.21e-02  7.84e-02  7.69e-01  
  4  +3.4406e-01  +7.5366e-01  4.10e-01  1.11e-02  2.50e-01  9.24e-03  3.43e-02  6.77e-01  
  5  +3.1268e-01  +5.7325e-01  2.61e-01  6.06e-03  1.37e-01  5.62e-03  1.95e-02  4.91e-01  
  6  +2.8749e-01  +4.3585e-01  1.48e-01  3.28e-03  7.56e-02  2.97e-03  1.09e-02  4.94e-01  
  7  +2.6023e-01  +2.9006e-01  2.98e-02  6.54e-04  1.51e-02  9.42e-05  2.28e-03  9.90e-01  
  8  +2.5080e-01  +2.5195e-01  1.15e-03  2.49e-05  5.72e-04  3.01e-06  8.90e-05  9.62e-01  
  9  +2.5045e-01  +2.5058e-01  1.33e-04  2.96e-06  6.60e-05  4.24e-07  1.15e-05  9.27e-01  
 10  +2.5040e-01  +2.5042e-01  1.11e-05  2.48e-07  5.49e-06  3.75e-08  1.00e-06  9.23e-01  
 11  +2.5040e-01  +2.5040e-01  1.13e-07  2.52e-09  5.57e-08  3.82e-10  1.02e-08  9.90e-01  
 12  +2.5040e-01  +2.5040e-01  1.14e-09  2.53e-11  5.60e-10  3.84e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5929ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:51 PM: Optimal value: 2.504e-01
(CVXPY) Oct 06 04:22:51 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:51 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:51 PM: Your problem has 101 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:51 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 101
  constraints   = 151
  nnz(P)        = 0
  nnz(A)        = 958
  cones (total) = 1
    : Nonnegative = 1,  numel = 151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8821e-01  +5.2111e+01  5.16e+01  8.89e-01  1.06e+01  1.00e+00  1.06e+00   ------   
  1  +5.1252e-01  +1.1438e+01  1.09e+01  4.06e-01  6.09e+00  3.80e-03  6.03e-01  5.90e-01  
  2  +4.2579e-01  +2.2577e+00  1.83e+00  9.33e-02  1.96e+00  2.67e-02  2.29e-01  9.88e-01  
  3  +3.4087e-01  +1.1008e+00  7.60e-01  2.47e-02  5.44e-01  1.60e-02  6.95e-02  7.89e-01  
  4  +2.6212e-01  +5.8632e-01  3.24e-01  8.19e-03  1.81e-01  5.14e-03  2.50e-02  7.76e-01  
  5  +2.1508e-01  +3.3829e-01  1.23e-01  2.90e-03  6.59e-02  1.68e-03  9.50e-03  7.06e-01  
  6  +1.9391e-01  +2.4144e-01  4.75e-02  1.09e-03  2.51e-02  3.77e-04  3.71e-03  7.93e-01  
  7  +1.8152e-01  +1.8466e-01  3.14e-03  7.05e-05  1.62e-03  2.28e-05  2.48e-04  9.37e-01  
  8  +1.8073e-01  +1.8110e-01  3.73e-04  8.68e-06  1.95e-04  2.01e-06  3.20e-05  8.74e-01  
  9  +1.8061e-01  +1.8065e-01  3.38e-05  8.10e-07  1.77e-05  1.59e-07  3.23e-06  9.54e-01  
 10  +1.8060e-01  +1.8060e-01  3.54e-07  8.51e-09  1.85e-07  1.64e-09  3.41e-08  9.90e-01  
 11  +1.8060e-01  +1.8060e-01  3.55e-09  8.53e-11  1.86e-09  1.64e-11  3.42e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4752ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:51 PM: Optimal value: 1.806e-01
(CVXPY) Oct 06 04:22:51 PM: Compilation took 1.501e-02 seconds
(CVXPY) Oct 06 04:22:51 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:51 PM: Your problem has 111 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:51 PM: Finished problem compilation (took 8.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 111
  constraints   = 161
  nnz(P)        = 0
  nnz(A)        = 1023
  cones (total) = 1
    : Nonnegative = 1,  numel = 161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8359e-01  +5.2360e+01  5.19e+01  8.92e-01  1.05e+01  1.00e+00  1.07e+00   ------   
  1  +4.7162e-01  +1.1666e+01  1.12e+01  4.06e-01  5.91e+00  3.92e-03  6.00e-01  5.84e-01  
  2  +3.6678e-01  +2.4446e+00  2.08e+00  9.52e-02  1.92e+00  2.83e-02  2.28e-01  9.61e-01  
  3  +2.6566e-01  +9.8062e-01  7.15e-01  2.28e-02  4.80e-01  1.37e-02  6.43e-02  8.31e-01  
  4  +2.1468e-01  +5.5498e-01  3.40e-01  1.01e-02  2.12e-01  5.19e-03  3.08e-02  5.99e-01  
  5  +1.6991e-01  +3.0181e-01  1.32e-01  3.55e-03  7.74e-02  1.77e-03  1.18e-02  6.91e-01  
  6  +1.5654e-01  +2.4937e-01  9.28e-02  2.33e-03  5.24e-02  1.09e-03  7.91e-03  4.65e-01  
  7  +1.3436e-01  +1.4633e-01  1.20e-02  2.91e-04  6.53e-03  1.11e-04  1.06e-03  8.83e-01  
  8  +1.3094e-01  +1.3137e-01  4.22e-04  1.04e-05  2.31e-04  2.39e-06  3.92e-05  9.67e-01  
  9  +1.3081e-01  +1.3084e-01  2.85e-05  7.38e-07  1.58e-05  1.16e-07  3.00e-06  9.68e-01  
 10  +1.3080e-01  +1.3080e-01  2.90e-07  7.53e-09  1.61e-07  1.15e-09  3.08e-08  9.90e-01  
 11  +1.3080e-01  +1.3080e-01  2.90e-09  7.53e-11  1.61e-09  1.15e-11  3.08e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0471ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:51 PM: Optimal value: 1.308e-01
(CVXPY) Oct 06 04:22:51 PM: Compilation took 8.008e-03 seconds
(CVXPY) Oct 06 04:22:51 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1308
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:52 PM: Your problem has 121 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 121
  constraints   = 171
  nnz(P)        = 0
  nnz(A)        = 1068
  cones (total) = 1
    : Nonnegative = 1,  numel = 171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7982e-01  +5.2311e+01  5.18e+01  8.95e-01  1.02e+01  1.00e+00  1.07e+00   ------   
  1  +4.1426e-01  +1.1827e+01  1.14e+01  3.97e-01  5.62e+00  4.10e-03  5.84e-01  5.82e-01  
  2  +2.8560e-01  +2.6807e+00  2.40e+00  9.75e-02  1.84e+00  2.83e-02  2.26e-01  9.12e-01  
  3  +2.0135e-01  +1.2634e+00  1.06e+00  3.55e-02  6.97e-01  1.48e-02  9.30e-02  7.09e-01  
  4  +1.5787e-01  +4.4110e-01  2.83e-01  9.67e-03  1.89e-01  3.44e-03  2.82e-02  7.32e-01  
  5  +1.2607e-01  +2.7067e-01  1.45e-01  4.25e-03  9.00e-02  1.66e-03  1.31e-02  6.92e-01  
  6  +1.0911e-01  +1.8934e-01  8.02e-02  2.18e-03  4.79e-02  7.38e-04  7.00e-03  6.14e-01  
  7  +9.2897e-02  +1.0085e-01  7.95e-03  2.12e-04  4.64e-03  6.11e-05  7.13e-04  9.10e-01  
  8  +9.1213e-02  +9.2002e-02  7.89e-04  2.15e-05  4.64e-04  4.50e-06  7.54e-05  8.95e-01  
  9  +9.1040e-02  +9.1254e-02  2.13e-04  5.97e-06  1.26e-04  1.07e-06  2.33e-05  7.53e-01  
 10  +9.0982e-02  +9.1004e-02  2.19e-05  6.17e-07  1.29e-05  1.04e-07  2.52e-06  9.05e-01  
 11  +9.0975e-02  +9.0975e-02  2.47e-07  6.98e-09  1.45e-07  1.16e-09  2.86e-08  9.89e-01  
 12  +9.0975e-02  +9.0975e-02  2.47e-09  6.99e-11  1.45e-09  1.17e-11  2.86e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9286ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:52 PM: Optimal value: 9.098e-02
(CVXPY) Oct 06 04:22:52 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:22:52 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0910
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:52 PM: Your problem has 131 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Finished problem compilation (took 1.456e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 131
  constraints   = 181
  nnz(P)        = 0
  nnz(A)        = 1128
  cones (total) = 1
    : Nonnegative = 1,  numel = 181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7860e-01  +5.2684e+01  5.22e+01  8.98e-01  1.01e+01  1.00e+00  1.07e+00   ------   
  1  +3.8627e-01  +1.1877e+01  1.15e+01  3.95e-01  5.42e+00  4.16e-03  5.78e-01  5.85e-01  
  2  +2.3161e-01  +2.5693e+00  2.34e+00  8.87e-02  1.66e+00  2.82e-02  2.07e-01  9.27e-01  
  3  +1.6166e-01  +9.4012e-01  7.78e-01  2.72e-02  5.28e-01  1.01e-02  7.22e-02  7.59e-01  
  4  +1.2483e-01  +3.1229e-01  1.87e-01  6.70e-03  1.32e-01  2.34e-03  1.96e-02  7.74e-01  
  5  +1.0885e-01  +2.6320e-01  1.54e-01  4.49e-03  9.89e-02  1.94e-03  1.32e-02  4.96e-01  
  6  +8.3061e-02  +1.5196e-01  6.89e-02  1.74e-03  4.08e-02  6.89e-04  5.43e-03  7.52e-01  
  7  +6.3375e-02  +6.9881e-02  6.51e-03  1.54e-04  3.65e-03  5.20e-05  5.04e-04  9.23e-01  
  8  +6.1450e-02  +6.1971e-02  5.20e-04  1.28e-05  2.96e-04  2.78e-06  4.31e-05  9.16e-01  
  9  +6.1269e-02  +6.1316e-02  4.64e-05  1.21e-06  2.64e-05  2.10e-07  4.37e-06  9.15e-01  
 10  +6.1250e-02  +6.1251e-02  5.27e-07  1.38e-08  3.01e-07  2.32e-09  5.07e-08  9.89e-01  
 11  +6.1250e-02  +6.1250e-02  5.28e-09  1.38e-10  3.01e-09  2.33e-11  5.08e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8554ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:52 PM: Optimal value: 6.125e-02
(CVXPY) Oct 06 04:22:52 PM: Compilation took 1.456e-02 seconds
(CVXPY) Oct 06 04:22:52 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0613
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:52 PM: Your problem has 141 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Finished problem compilation (took 1.669e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 141
  constraints   = 191
  nnz(P)        = 0
  nnz(A)        = 1161
  cones (total) = 1
    : Nonnegative = 1,  numel = 191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7430e-01  +5.2912e+01  5.24e+01  9.00e-01  9.85e+00  1.00e+00  1.07e+00   ------   
  1  +3.2783e-01  +1.2691e+01  1.24e+01  4.04e-01  5.38e+00  4.41e-03  5.86e-01  5.56e-01  
  2  +2.0285e-01  +2.3344e+00  2.13e+00  8.78e-02  1.58e+00  3.29e-02  2.02e-01  9.90e-01  
  3  +1.3692e-01  +7.7711e-01  6.40e-01  2.47e-02  4.60e-01  9.40e-03  6.45e-02  7.23e-01  
  4  +1.0148e-01  +2.5959e-01  1.58e-01  6.11e-03  1.16e-01  2.22e-03  1.74e-02  8.06e-01  
  5  +7.9802e-02  +1.8537e-01  1.06e-01  3.05e-03  6.98e-02  1.57e-03  8.90e-03  6.23e-01  
  6  +6.6585e-02  +1.3843e-01  7.18e-02  1.85e-03  4.43e-02  1.03e-03  5.53e-03  4.46e-01  
  7  +4.6529e-02  +5.9306e-02  1.28e-02  3.06e-04  7.55e-03  4.41e-05  9.61e-04  9.90e-01  
  8  +4.1833e-02  +4.2859e-02  1.03e-03  2.46e-05  6.02e-04  2.60e-06  7.97e-05  9.18e-01  
  9  +4.1460e-02  +4.1671e-02  2.11e-04  5.30e-06  1.23e-04  6.77e-07  1.92e-05  8.44e-01  
 10  +4.1353e-02  +4.1359e-02  5.82e-06  1.46e-07  3.32e-06  1.87e-08  5.65e-07  9.81e-01  
 11  +4.1350e-02  +4.1350e-02  5.83e-08  1.46e-09  3.32e-08  1.87e-10  5.67e-09  9.90e-01  
 12  +4.1350e-02  +4.1350e-02  5.83e-10  1.46e-11  3.32e-10  1.88e-12  5.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0435ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:52 PM: Optimal value: 4.135e-02
(CVXPY) Oct 06 04:22:52 PM: Compilation took 1.669e-02 seconds
(CVXPY) Oct 06 04:22:52 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.0414
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:52 PM: Your problem has 151 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 151
  constraints   = 201
  nnz(P)        = 0
  nnz(A)        = 1190
  cones (total) = 1
    : Nonnegative = 1,  numel = 201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7328e-01  +5.3023e+01  5.25e+01  9.03e-01  9.64e+00  1.00e+00  1.08e+00   ------   
  1  +2.9861e-01  +1.2944e+01  1.26e+01  4.06e-01  5.22e+00  4.52e-03  5.84e-01  5.49e-01  
  2  +1.7892e-01  +2.5673e+00  2.39e+00  9.60e-02  1.66e+00  3.38e-02  2.20e-01  9.51e-01  
  3  +1.2601e-01  +9.3837e-01  8.12e-01  3.21e-02  5.73e-01  1.12e-02  8.37e-02  6.74e-01  
  4  +9.1388e-02  +2.8513e-01  1.94e-01  7.93e-03  1.41e-01  2.48e-03  2.30e-02  7.62e-01  
  5  +7.8517e-02  +2.3020e-01  1.52e-01  5.43e-03  1.05e-01  1.93e-03  1.58e-02  4.34e-01  
  6  +5.6618e-02  +1.3724e-01  8.06e-02  2.20e-03  4.96e-02  1.15e-03  6.76e-03  6.54e-01  
  7  +4.6323e-02  +9.0357e-02  4.40e-02  1.21e-03  2.71e-02  3.76e-04  3.79e-03  6.69e-01  
  8  +3.3551e-02  +3.9982e-02  6.43e-03  1.62e-04  3.71e-03  5.06e-05  5.31e-04  8.75e-01  
  9  +3.1679e-02  +3.2341e-02  6.62e-04  1.72e-05  3.88e-04  3.57e-06  5.92e-05  8.90e-01  
 10  +3.1496e-02  +3.1625e-02  1.29e-04  3.52e-06  7.74e-05  6.47e-07  1.29e-05  8.42e-01  
 11  +3.1451e-02  +3.1453e-02  1.88e-06  5.17e-08  1.13e-06  8.14e-09  1.92e-07  9.85e-01  
 12  +3.1450e-02  +3.1450e-02  1.88e-08  5.16e-10  1.13e-08  8.14e-11  1.92e-09  9.90e-01  
 13  +3.1450e-02  +3.1450e-02  1.88e-10  5.17e-12  1.13e-10  8.15e-13  1.92e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2656ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:52 PM: Optimal value: 3.145e-02
(CVXPY) Oct 06 04:22:52 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:22:52 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0315
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:52 PM: Your problem has 161 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 161
  constraints   = 211
  nnz(P)        = 0
  nnz(A)        = 1222
  cones (total) = 1
    : Nonnegative = 1,  numel = 211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7097e-01  +5.3157e+01  5.27e+01  9.05e-01  9.46e+00  1.00e+00  1.08e+00   ------   
  1  +2.5223e-01  +1.3413e+01  1.32e+01  4.09e-01  5.10e+00  4.69e-03  5.86e-01  5.35e-01  
  2  +1.5048e-01  +2.7540e+00  2.60e+00  1.07e-01  1.75e+00  3.52e-02  2.43e-01  9.17e-01  
  3  +1.0505e-01  +8.6744e-01  7.62e-01  3.21e-02  5.47e-01  1.04e-02  8.45e-02  7.22e-01  
  4  +7.5477e-02  +2.3887e-01  1.63e-01  7.14e-03  1.21e-01  2.15e-03  2.11e-02  7.79e-01  
  5  +6.7380e-02  +2.1550e-01  1.48e-01  5.66e-03  1.06e-01  1.97e-03  1.64e-02  3.40e-01  
  6  +5.5309e-02  +1.6698e-01  1.12e-01  3.58e-03  7.45e-02  1.55e-03  1.08e-02  4.04e-01  
  7  +4.3587e-02  +1.1838e-01  7.48e-02  2.20e-03  4.78e-02  7.03e-04  6.82e-03  6.27e-01  
  8  +2.6272e-02  +4.2976e-02  1.67e-02  4.38e-04  9.89e-03  1.42e-04  1.43e-03  8.21e-01  
  9  +2.1832e-02  +2.2920e-02  1.09e-03  2.88e-05  6.44e-04  5.83e-06  9.78e-05  9.33e-01  
 10  +2.1560e-02  +2.1862e-02  3.02e-04  8.32e-06  1.80e-04  1.43e-06  3.22e-05  8.16e-01  
 11  +2.1455e-02  +2.1465e-02  1.07e-05  3.01e-07  6.43e-06  4.14e-08  1.21e-06  9.63e-01  
 12  +2.1450e-02  +2.1450e-02  1.07e-07  3.01e-09  6.43e-08  4.13e-10  1.22e-08  9.90e-01  
 13  +2.1450e-02  +2.1450e-02  1.07e-09  3.01e-11  6.44e-10  4.13e-12  1.22e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3202ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:52 PM: Optimal value: 2.145e-02
(CVXPY) Oct 06 04:22:52 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:22:52 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.0215
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:52 PM: Your problem has 171 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:52 PM: Finished problem compilation (took 1.150e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 171
  constraints   = 221
  nnz(P)        = 0
  nnz(A)        = 1248
  cones (total) = 1
    : Nonnegative = 1,  numel = 221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6835e-01  +5.3523e+01  5.31e+01  9.07e-01  9.28e+00  1.00e+00  1.08e+00   ------   
  1  +1.9625e-01  +1.3546e+01  1.34e+01  4.01e-01  4.91e+00  4.81e-03  5.79e-01  5.41e-01  
  2  +1.0787e-01  +2.6636e+00  2.56e+00  1.07e-01  1.73e+00  3.33e-02  2.37e-01  9.06e-01  
  3  +9.2354e-02  +8.3592e-01  7.44e-01  3.44e-02  5.69e-01  1.03e-02  8.76e-02  7.32e-01  
  4  +6.6120e-02  +2.3311e-01  1.67e-01  7.95e-03  1.31e-01  2.24e-03  2.26e-02  7.74e-01  
  5  +5.8406e-02  +2.1224e-01  1.54e-01  6.41e-03  1.17e-01  2.04e-03  1.81e-02  3.26e-01  
  6  +4.3332e-02  +1.4996e-01  1.07e-01  3.53e-03  7.40e-02  1.51e-03  1.06e-02  4.77e-01  
  7  +2.9414e-02  +9.1009e-02  6.16e-02  1.84e-03  4.02e-02  5.06e-04  5.76e-03  7.43e-01  
  8  +1.4150e-02  +2.3351e-02  9.20e-03  2.49e-04  5.59e-03  6.57e-05  8.22e-04  8.74e-01  
  9  +1.1863e-02  +1.2830e-02  9.67e-04  2.68e-05  5.93e-04  4.69e-06  9.37e-05  8.88e-01  
 10  +1.1591e-02  +1.1826e-02  2.36e-04  6.58e-06  1.42e-04  1.02e-06  2.65e-05  8.50e-01  
 11  +1.1504e-02  +1.1512e-02  8.58e-06  2.42e-07  5.18e-06  3.15e-08  1.01e-06  9.72e-01  
 12  +1.1500e-02  +1.1500e-02  8.60e-08  2.42e-09  5.19e-08  3.16e-10  1.02e-08  9.90e-01  
 13  +1.1500e-02  +1.1500e-02  8.61e-10  2.43e-11  5.20e-10  3.16e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4644ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:52 PM: Optimal value: 1.150e-02
(CVXPY) Oct 06 04:22:52 PM: Compilation took 1.150e-02 seconds
(CVXPY) Oct 06 04:22:52 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 11, Objective: 0.0115
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:53 PM: Your problem has 181 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:53 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 181
  constraints   = 231
  nnz(P)        = 0
  nnz(A)        = 1285
  cones (total) = 1
    : Nonnegative = 1,  numel = 231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6567e-01  +5.3414e+01  5.29e+01  9.09e-01  9.12e+00  1.00e+00  1.08e+00   ------   
  1  +1.7200e-01  +1.4733e+01  1.46e+01  4.27e-01  5.01e+00  5.07e-03  5.97e-01  5.28e-01  
  2  +1.0519e-01  +3.0479e+00  2.94e+00  1.28e-01  1.99e+00  4.12e-02  2.73e-01  8.95e-01  
  3  +9.0408e-02  +9.0028e-01  8.10e-01  3.85e-02  6.25e-01  1.29e-02  9.76e-02  7.04e-01  
  4  +6.2970e-02  +2.4921e-01  1.86e-01  9.06e-03  1.47e-01  2.84e-03  2.56e-02  7.68e-01  
  5  +5.0204e-02  +2.0292e-01  1.53e-01  6.30e-03  1.14e-01  2.25e-03  1.82e-02  4.29e-01  
  6  +3.3016e-02  +1.2260e-01  8.96e-02  2.95e-03  5.98e-02  1.30e-03  9.23e-03  5.98e-01  
  7  +1.9531e-02  +5.3499e-02  3.40e-02  1.05e-03  2.16e-02  3.46e-04  3.41e-03  7.52e-01  
  8  +1.2061e-02  +1.3950e-02  1.89e-03  5.74e-05  1.18e-03  1.26e-05  1.93e-04  9.47e-01  
  9  +1.1741e-02  +1.2604e-02  8.63e-04  2.68e-05  5.44e-04  4.27e-06  1.03e-04  7.50e-01  
 10  +1.1566e-02  +1.1903e-02  3.37e-04  1.04e-05  2.11e-04  1.55e-06  4.23e-05  6.70e-01  
 11  +1.1462e-02  +1.1492e-02  3.02e-05  9.36e-07  1.88e-05  1.12e-07  3.99e-06  9.56e-01  
 12  +1.1450e-02  +1.1450e-02  3.39e-07  1.05e-08  2.11e-07  1.23e-09  4.51e-08  9.89e-01  
 13  +1.1450e-02  +1.1450e-02  3.40e-09  1.05e-10  2.11e-09  1.23e-11  4.52e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.757ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:53 PM: Optimal value: 1.145e-02
(CVXPY) Oct 06 04:22:53 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:53 PM: Solver (including time spent in interface) took 1.557e-02 seconds
Iteration: 12, Objective: 0.0115
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:53 PM: Your problem has 183 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:53 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 183
  constraints   = 233
  nnz(P)        = 0
  nnz(A)        = 1296
  cones (total) = 1
    : Nonnegative = 1,  numel = 233

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6567e-01  +5.3416e+01  5.30e+01  9.09e-01  9.10e+00  1.00e+00  1.08e+00   ------   
  1  +1.6466e-01  +1.4713e+01  1.45e+01  4.25e-01  4.97e+00  5.09e-03  5.94e-01  5.32e-01  
  2  +9.5303e-02  +3.0780e+00  2.98e+00  1.28e-01  1.98e+00  4.11e-02  2.72e-01  8.88e-01  
  3  +8.3008e-02  +8.8900e-01  8.06e-01  3.84e-02  6.22e-01  1.27e-02  9.69e-02  7.12e-01  
  4  +5.1457e-02  +2.2314e-01  1.72e-01  8.15e-03  1.34e-01  2.54e-03  2.33e-02  8.17e-01  
  5  +4.0489e-02  +1.8559e-01  1.45e-01  5.95e-03  1.08e-01  2.02e-03  1.75e-02  3.96e-01  
  6  +2.3953e-02  +1.1409e-01  9.01e-02  3.01e-03  6.06e-02  1.22e-03  9.62e-03  5.53e-01  
  7  +7.9339e-03  +3.4627e-02  2.67e-02  8.42e-04  1.71e-02  2.22e-04  2.81e-03  8.34e-01  
  8  +1.8991e-03  +3.2052e-03  1.31e-03  4.07e-05  8.25e-04  6.51e-06  1.41e-04  9.52e-01  
  9  +1.6315e-03  +2.0813e-03  4.50e-04  1.45e-05  2.86e-04  1.94e-06  5.72e-05  7.40e-01  
 10  +1.5125e-03  +1.5523e-03  3.98e-05  1.30e-06  2.53e-05  1.49e-07  5.41e-06  9.26e-01  
 11  +1.5001e-03  +1.5006e-03  4.21e-07  1.38e-08  2.68e-07  1.53e-09  5.79e-08  9.89e-01  
 12  +1.5000e-03  +1.5000e-03  4.21e-09  1.38e-10  2.68e-09  1.53e-11  5.79e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5149ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:53 PM: Optimal value: 1.500e-03
(CVXPY) Oct 06 04:22:53 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 13, Objective: 0.0015
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:53 PM: Your problem has 192 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:53 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 192
  constraints   = 242
  nnz(P)        = 0
  nnz(A)        = 1336
  cones (total) = 1
    : Nonnegative = 1,  numel = 242

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6468e-01  +5.3666e+01  5.32e+01  9.11e-01  8.98e+00  1.00e+00  1.08e+00   ------   
  1  +1.2735e-01  +1.4696e+01  1.46e+01  4.19e-01  4.80e+00  5.17e-03  5.85e-01  5.47e-01  
  2  +5.4001e-02  +2.6360e+00  2.58e+00  1.08e-01  1.68e+00  4.02e-02  2.40e-01  9.46e-01  
  3  +6.7645e-02  +7.3489e-01  6.67e-01  3.34e-02  5.28e-01  1.20e-02  8.51e-02  7.21e-01  
  4  +3.9028e-02  +2.1312e-01  1.74e-01  8.43e-03  1.36e-01  3.07e-03  2.42e-02  7.67e-01  
  5  +2.6032e-02  +1.5086e-01  1.25e-01  5.40e-03  9.19e-02  2.02e-03  1.63e-02  4.37e-01  
  6  +1.0158e-02  +5.7592e-02  4.74e-02  1.84e-03  3.27e-02  6.87e-04  5.98e-03  6.92e-01  
  7  +2.1258e-03  +5.2528e-03  3.13e-03  1.20e-04  2.12e-03  2.39e-05  4.06e-04  9.59e-01  
  8  +1.6268e-03  +2.3204e-03  6.94e-04  2.77e-05  4.77e-04  4.14e-06  1.02e-04  7.71e-01  
  9  +1.5111e-03  +1.7649e-03  2.54e-04  9.81e-06  1.71e-04  1.07e-06  4.00e-05  8.45e-01  
 10  +1.4529e-03  +1.4640e-03  1.11e-05  4.31e-07  7.48e-06  4.20e-08  1.81e-06  9.56e-01  
 11  +1.4500e-03  +1.4501e-03  1.12e-07  4.33e-09  7.50e-08  4.20e-10  1.82e-08  9.90e-01  
 12  +1.4500e-03  +1.4500e-03  1.12e-09  4.33e-11  7.51e-10  4.20e-12  1.83e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7581ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:53 PM: Optimal value: 1.450e-03
(CVXPY) Oct 06 04:22:53 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:53 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 14, Objective: 0.0015
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:53 PM: Your problem has 195 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:53 PM: Finished problem compilation (took 1.567e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 195
  constraints   = 245
  nnz(P)        = 0
  nnz(A)        = 1354
  cones (total) = 1
    : Nonnegative = 1,  numel = 245

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6373e-01  +5.3759e+01  5.33e+01  9.11e-01  8.95e+00  1.00e+00  1.09e+00   ------   
  1  +9.1705e-02  +1.4954e+01  1.49e+01  4.17e-01  4.75e+00  5.30e-03  5.82e-01  5.55e-01  
  2  +3.5963e-02  +2.9510e+00  2.92e+00  1.22e-01  1.85e+00  4.04e-02  2.63e-01  8.88e-01  
  3  +6.6448e-02  +4.7230e-01  4.06e-01  2.14e-02  3.33e-01  9.06e-03  5.58e-02  8.24e-01  
  4  +3.9435e-02  +3.1186e-01  2.72e-01  1.32e-02  2.11e-01  5.40e-03  3.67e-02  4.88e-01  
  5  +1.0327e-02  +7.1232e-02  6.09e-02  2.63e-03  4.31e-02  1.10e-03  8.36e-03  8.12e-01  
  6  +2.4527e-03  +8.7023e-03  6.25e-03  2.67e-04  4.35e-03  1.02e-04  8.86e-04  8.96e-01  
  7  +1.6743e-03  +2.7718e-03  1.10e-03  4.89e-05  7.74e-04  1.39e-05  1.72e-04  8.13e-01  
  8  +1.5243e-03  +1.8879e-03  3.64e-04  1.61e-05  2.52e-04  2.45e-06  6.35e-05  8.41e-01  
  9  +1.4764e-03  +1.6030e-03  1.27e-04  5.54e-06  8.77e-05  5.18e-07  2.26e-05  8.62e-01  
 10  +1.4506e-03  +1.4537e-03  3.02e-06  1.31e-07  2.08e-06  1.18e-08  5.47e-07  9.76e-01  
 11  +1.4500e-03  +1.4500e-03  3.03e-08  1.32e-09  2.08e-08  1.18e-10  5.48e-09  9.90e-01  
 12  +1.4500e-03  +1.4500e-03  3.03e-10  1.32e-11  2.08e-10  1.18e-12  5.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4654ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:53 PM: Optimal value: 1.450e-03
(CVXPY) Oct 06 04:22:53 PM: Compilation took 1.567e-02 seconds
(CVXPY) Oct 06 04:22:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.99
  Our objective: 0.98

IF 
    (x0 = 0 AND x1 = 0 AND x6 = 0)                                                        <-- (term's our objective: 0.22)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0)                                             <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x4 = 0 AND x5 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x9 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x9 = 0)                       <-- (term's our objective: 0.1)
 OR (x0 = 1 AND x1 = 1 AND x6 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 0 AND x8 = 0 AND x9 = 0)                                             <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x3 = 0 AND x5 = 1 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.06)
 OR (x1 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.06)
 OR (x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.06)
 OR (x4 = 1 AND x5 = 0 AND x7 = 1)                                                        <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.268626928329468
Best over terms:
  Our final objective: 0.22
    Its accruacy: 0.61
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.22
  Highest accruacy: 0.61
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

