Command:
python test_script.py -s constant_subclass -d 9 -n 5000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1452
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 9.

Computed total variation: 0.29800000000000004
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:45 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:45 PM: Finished problem compilation (took 6.090e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 30019
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  8.18e+01  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4279e+02  5.42e+02  4.28e-01  5.31e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3177e-01  +6.1630e+01  6.11e+01  1.65e-01  2.63e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0847e-01  +1.5927e+01  1.54e+01  1.06e-01  1.66e+01  4.44e-05  2.56e-01  2.93e-01  
  4  +5.0068e-01  +1.3688e+00  8.68e-01  8.46e-03  1.38e+00  6.57e-06  1.22e-01  8.46e-01  
  5  +5.0012e-01  +6.7006e-01  1.70e-01  1.61e-03  2.65e-01  1.09e-05  2.93e-02  9.13e-01  
  6  +5.0004e-01  +9.5485e-01  4.55e-01  1.34e-03  2.23e-01  1.75e-04  4.31e-03  9.39e-01  
  7  +4.9875e-01  +9.1077e-01  4.12e-01  3.20e-04  5.34e-02  6.47e-04  9.58e-04  7.92e-01  
  8  +4.9495e-01  +7.4065e-01  2.46e-01  1.35e-04  2.24e-02  4.20e-04  4.06e-04  7.73e-01  
  9  +4.8477e-01  +6.4858e-01  1.64e-01  9.94e-05  1.65e-02  1.10e-04  3.25e-04  4.00e-01  
 10  +4.7208e-01  +5.6706e-01  9.50e-02  4.86e-05  8.04e-03  1.20e-06  1.72e-04  9.04e-01  
 11  +4.5408e-01  +4.8574e-01  3.17e-02  1.39e-05  2.30e-03  1.88e-06  5.57e-05  8.93e-01  
 12  +4.4668e-01  +4.5456e-01  7.88e-03  3.33e-06  5.49e-04  6.86e-07  1.40e-05  9.90e-01  
 13  +4.4419e-01  +4.4446e-01  2.74e-04  1.15e-07  1.90e-05  2.34e-08  4.98e-07  9.80e-01  
 14  +4.4410e-01  +4.4410e-01  2.75e-06  1.16e-09  1.91e-07  2.35e-10  5.00e-09  9.90e-01  
 15  +4.4410e-01  +4.4410e-01  2.75e-08  1.16e-11  1.91e-09  2.35e-12  5.00e-11  9.90e-01  
 16  +4.4410e-01  +4.4410e-01  2.75e-10  1.16e-13  1.91e-11  2.35e-14  5.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.35ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:45 PM: Optimal value: 4.441e-01
(CVXPY) Oct 06 04:17:45 PM: Compilation took 6.090e-02 seconds
(CVXPY) Oct 06 04:17:45 PM: Solver (including time spent in interface) took 7.812e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:45 PM: Your problem has 2529 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:45 PM: Finished problem compilation (took 3.079e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2529
  constraints   = 5029
  nnz(P)        = 0
  nnz(A)        = 34400
  cones (total) = 1
    : Nonnegative = 1,  numel = 5029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5015e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.8078e-01  +5.4318e+02  5.43e+02  4.29e-01  5.49e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3149e-01  +6.1416e+01  6.09e+01  1.65e-01  2.71e+01  1.64e-02  2.77e-01  9.34e-01  
  3  +5.0834e-01  +1.5794e+01  1.53e+01  1.05e-01  1.70e+01  4.46e-05  2.56e-01  3.04e-01  
  4  +5.0098e-01  +1.9582e+00  1.46e+00  1.42e-02  2.36e+00  8.46e-06  1.52e-01  6.40e-01  
  5  +5.0018e-01  +9.7107e-01  4.71e-01  4.48e-03  7.55e-01  8.38e-06  8.20e-02  6.78e-01  
  6  +5.0003e-01  +8.4455e-01  3.45e-01  3.20e-03  5.41e-01  1.05e-05  3.28e-02  6.71e-01  
  7  +4.9703e-01  +8.3400e-01  3.37e-01  6.15e-04  1.06e-01  1.34e-04  1.87e-03  9.90e-01  
  8  +4.8841e-01  +7.2641e-01  2.38e-01  1.66e-04  2.85e-02  2.82e-04  4.91e-04  7.62e-01  
  9  +4.8533e-01  +6.9900e-01  2.14e-01  1.34e-04  2.30e-02  2.46e-04  3.92e-04  2.74e-01  
 10  +4.8184e-01  +6.7186e-01  1.90e-01  9.62e-05  1.65e-02  1.99e-04  2.77e-04  4.58e-01  
 11  +4.8150e-01  +6.6819e-01  1.87e-01  9.58e-05  1.65e-02  1.86e-04  2.76e-04  3.09e-02  
 12  +4.7838e-01  +6.5107e-01  1.73e-01  7.86e-05  1.35e-02  1.72e-04  2.27e-04  2.42e-01  
 13  +4.7768e-01  +6.4279e-01  1.65e-01  7.72e-05  1.32e-02  1.39e-04  2.23e-04  1.27e-01  
 14  +4.6357e-01  +5.6973e-01  1.06e-01  3.86e-05  6.60e-03  7.47e-05  1.13e-04  6.49e-01  
 15  +4.6147e-01  +5.5888e-01  9.74e-02  3.64e-05  6.23e-03  5.66e-05  1.08e-04  1.67e-01  
 16  +4.6089e-01  +5.5495e-01  9.41e-02  3.33e-05  5.71e-03  2.96e-05  9.98e-05  5.63e-01  
 17  +4.4059e-01  +4.6850e-01  2.79e-02  9.70e-06  1.66e-03  3.07e-06  3.04e-05  8.72e-01  
 18  +4.3146e-01  +4.3923e-01  7.77e-03  2.55e-06  4.35e-04  7.57e-07  8.17e-06  9.03e-01  
 19  +4.2777e-01  +4.2844e-01  6.65e-04  2.09e-07  3.56e-05  8.05e-08  6.69e-07  9.35e-01  
 20  +4.2750e-01  +4.2751e-01  6.66e-06  2.09e-09  3.56e-07  8.06e-10  6.70e-09  9.90e-01  
 21  +4.2750e-01  +4.2750e-01  6.66e-08  2.09e-11  3.56e-09  8.08e-12  6.71e-11  9.90e-01  
 22  +4.2750e-01  +4.2750e-01  6.66e-10  2.09e-13  3.56e-11  8.09e-14  6.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 113.5491ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:45 PM: Optimal value: 4.275e-01
(CVXPY) Oct 06 04:17:45 PM: Compilation took 3.079e-02 seconds
(CVXPY) Oct 06 04:17:45 PM: Solver (including time spent in interface) took 1.098e-01 seconds
Iteration: 2, Objective: 0.4275
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:46 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:46 PM: Finished problem compilation (took 3.122e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 35269
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5014e+03  2.50e+03  9.80e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.8059e-01  +5.4332e+02  5.43e+02  4.30e-01  5.49e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3132e-01  +6.1263e+01  6.07e+01  1.65e-01  2.69e+01  1.64e-02  2.77e-01  9.37e-01  
  3  +5.0829e-01  +1.5738e+01  1.52e+01  1.05e-01  1.69e+01  4.48e-05  2.55e-01  3.10e-01  
  4  +5.0087e-01  +1.7718e+00  1.27e+00  1.24e-02  2.07e+00  8.08e-06  1.41e-01  7.03e-01  
  5  +5.0016e-01  +9.0732e-01  4.07e-01  3.87e-03  6.54e-01  9.12e-06  6.21e-02  7.75e-01  
  6  +4.9976e-01  +8.4281e-01  3.43e-01  2.58e-03  4.40e-01  2.70e-05  1.21e-02  8.73e-01  
  7  +4.9189e-01  +7.7282e-01  2.81e-01  2.09e-04  3.62e-02  4.03e-04  5.94e-04  9.52e-01  
  8  +4.8846e-01  +7.3822e-01  2.50e-01  1.66e-04  2.86e-02  3.14e-04  4.68e-04  3.49e-01  
  9  +4.8471e-01  +7.1479e-01  2.30e-01  1.25e-04  2.16e-02  2.88e-04  3.53e-04  3.57e-01  
 10  +4.8410e-01  +7.0984e-01  2.26e-01  1.25e-04  2.15e-02  2.72e-04  3.53e-04  1.97e-02  
 11  +4.8127e-01  +6.9326e-01  2.12e-01  1.03e-04  1.77e-02  2.12e-04  2.90e-04  3.69e-01  
 12  +4.8091e-01  +6.9107e-01  2.10e-01  1.02e-04  1.76e-02  2.04e-04  2.90e-04  2.17e-02  
 13  +4.7470e-01  +6.6003e-01  1.85e-01  8.19e-05  1.41e-02  1.53e-04  2.35e-04  3.28e-01  
 14  +4.6563e-01  +6.0677e-01  1.41e-01  6.13e-05  1.05e-02  1.51e-06  1.81e-04  8.65e-01  
 15  +4.5239e-01  +5.5254e-01  1.00e-01  3.90e-05  6.68e-03  8.99e-06  1.20e-04  8.05e-01  
 16  +4.2603e-01  +4.4625e-01  2.02e-02  7.19e-06  1.23e-03  1.38e-06  2.40e-05  8.70e-01  
 17  +4.1863e-01  +4.2056e-01  1.93e-03  6.73e-07  1.15e-04  1.47e-07  2.35e-06  9.26e-01  
 18  +4.1781e-01  +4.1784e-01  2.61e-05  9.05e-09  1.55e-06  2.09e-09  3.20e-08  9.89e-01  
 19  +4.1780e-01  +4.1780e-01  2.61e-07  9.05e-11  1.55e-08  2.09e-11  3.20e-10  9.90e-01  
 20  +4.1780e-01  +4.1780e-01  2.61e-09  9.05e-13  1.55e-10  2.09e-13  3.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.6261ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:46 PM: Optimal value: 4.178e-01
(CVXPY) Oct 06 04:17:46 PM: Compilation took 3.122e-02 seconds
(CVXPY) Oct 06 04:17:46 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 3, Objective: 0.4178
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:46 PM: Your problem has 2549 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:46 PM: Finished problem compilation (took 1.571e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2549
  constraints   = 5049
  nnz(P)        = 0
  nnz(A)        = 35909
  cones (total) = 1
    : Nonnegative = 1,  numel = 5049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5014e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.8047e-01  +5.4338e+02  5.43e+02  4.30e-01  5.48e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3122e-01  +6.1164e+01  6.06e+01  1.65e-01  2.68e+01  1.65e-02  2.77e-01  9.38e-01  
  3  +5.0826e-01  +1.5707e+01  1.52e+01  1.05e-01  1.69e+01  4.49e-05  2.54e-01  3.14e-01  
  4  +5.0092e-01  +1.8538e+00  1.35e+00  1.32e-02  2.20e+00  8.33e-06  1.44e-01  6.79e-01  
  5  +5.0012e-01  +8.9878e-01  3.99e-01  3.79e-03  6.40e-01  9.40e-06  6.09e-02  8.27e-01  
  6  +4.9978e-01  +9.5303e-01  4.53e-01  3.46e-03  5.89e-01  2.77e-05  1.65e-02  8.53e-01  
  7  +4.9054e-01  +8.1734e-01  3.27e-01  2.32e-04  4.01e-02  4.25e-04  6.57e-04  9.62e-01  
  8  +4.8362e-01  +7.4944e-01  2.66e-01  1.46e-04  2.51e-02  3.37e-04  4.10e-04  5.15e-01  
  9  +4.8429e-01  +7.4865e-01  2.64e-01  1.38e-04  2.39e-02  2.80e-04  3.87e-04  2.31e-01  
 10  +4.8275e-01  +7.2331e-01  2.41e-01  1.21e-04  2.09e-02  1.25e-04  3.41e-04  5.22e-01  
 11  +4.7121e-01  +6.6479e-01  1.94e-01  8.43e-05  1.45e-02  9.08e-05  2.43e-04  4.00e-01  
 12  +4.4190e-01  +5.2415e-01  8.23e-02  3.19e-05  5.44e-03  9.37e-07  1.00e-04  9.01e-01  
 13  +4.1809e-01  +4.3315e-01  1.51e-02  5.43e-06  9.24e-04  5.67e-07  1.87e-05  8.60e-01  
 14  +4.1305e-01  +4.1581e-01  2.77e-03  9.77e-07  1.66e-04  2.18e-07  3.49e-06  8.97e-01  
 15  +4.1192e-01  +4.1197e-01  4.56e-05  1.61e-08  2.74e-06  4.41e-09  5.80e-08  9.90e-01  
 16  +4.1190e-01  +4.1190e-01  4.57e-07  1.61e-10  2.74e-08  4.41e-11  5.81e-10  9.90e-01  
 17  +4.1190e-01  +4.1190e-01  4.57e-09  1.61e-12  2.74e-10  4.42e-13  5.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.6529ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:46 PM: Optimal value: 4.119e-01
(CVXPY) Oct 06 04:17:46 PM: Compilation took 1.571e-02 seconds
(CVXPY) Oct 06 04:17:46 PM: Solver (including time spent in interface) took 1.093e-01 seconds
Iteration: 4, Objective: 0.4119
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:46 PM: Your problem has 2559 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:46 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2559
  constraints   = 5059
  nnz(P)        = 0
  nnz(A)        = 36725
  cones (total) = 1
    : Nonnegative = 1,  numel = 5059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5014e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.8030e-01  +5.4347e+02  5.43e+02  4.31e-01  5.48e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3108e-01  +6.1032e+01  6.05e+01  1.65e-01  2.67e+01  1.65e-02  2.76e-01  9.40e-01  
  3  +5.0823e-01  +1.5667e+01  1.52e+01  1.05e-01  1.68e+01  4.51e-05  2.53e-01  3.18e-01  
  4  +5.0088e-01  +1.7949e+00  1.29e+00  1.27e-02  2.11e+00  8.23e-06  1.39e-01  7.01e-01  
  5  +5.0017e-01  +9.5706e-01  4.57e-01  4.35e-03  7.34e-01  9.97e-06  6.15e-02  7.88e-01  
  6  +4.9952e-01  +8.9697e-01  3.97e-01  2.40e-03  4.11e-01  4.05e-05  8.95e-03  9.27e-01  
  7  +4.8900e-01  +8.0698e-01  3.18e-01  1.87e-04  3.24e-02  5.07e-04  5.19e-04  9.43e-01  
  8  +4.8472e-01  +7.8525e-01  3.01e-01  1.47e-04  2.55e-02  4.91e-04  4.08e-04  3.02e-01  
  9  +4.8053e-01  +7.3893e-01  2.58e-01  1.33e-04  2.30e-02  2.01e-04  3.76e-04  4.20e-01  
 10  +4.7043e-01  +6.8761e-01  2.17e-01  9.83e-05  1.69e-02  1.67e-04  2.84e-04  2.90e-01  
 11  +4.6238e-01  +6.3765e-01  1.75e-01  8.03e-05  1.38e-02  1.86e-05  2.40e-04  7.61e-01  
 12  +4.3892e-01  +5.3372e-01  9.48e-02  3.77e-05  6.43e-03  9.42e-06  1.20e-04  5.52e-01  
 13  +4.1682e-01  +4.4207e-01  2.53e-02  9.48e-06  1.61e-03  2.08e-06  3.27e-05  7.65e-01  
 14  +4.1234e-01  +4.2533e-01  1.30e-02  4.74e-06  8.07e-04  1.23e-06  1.68e-05  6.25e-01  
 15  +4.0884e-01  +4.1215e-01  3.31e-03  1.19e-06  2.03e-04  4.15e-07  4.32e-06  9.90e-01  
 16  +4.0753e-01  +4.0761e-01  7.99e-05  2.87e-08  4.89e-06  9.94e-09  1.05e-07  9.77e-01  
 17  +4.0750e-01  +4.0750e-01  7.99e-07  2.87e-10  4.89e-08  9.95e-11  1.05e-09  9.90e-01  
 18  +4.0750e-01  +4.0750e-01  7.99e-09  2.87e-12  4.89e-10  9.96e-13  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 105.2791ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:46 PM: Optimal value: 4.075e-01
(CVXPY) Oct 06 04:17:46 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:17:46 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 5, Objective: 0.4075
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:47 PM: Your problem has 2569 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:47 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2569
  constraints   = 5069
  nnz(P)        = 0
  nnz(A)        = 37264
  cones (total) = 1
    : Nonnegative = 1,  numel = 5069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.8010e-01  +5.4359e+02  5.43e+02  4.31e-01  5.47e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.3092e-01  +6.0897e+01  6.04e+01  1.64e-01  2.66e+01  1.66e-02  2.76e-01  9.42e-01  
  3  +5.0819e-01  +1.5624e+01  1.51e+01  1.04e-01  1.67e+01  4.53e-05  2.52e-01  3.23e-01  
  4  +5.0083e-01  +1.6997e+00  1.20e+00  1.18e-02  1.96e+00  8.05e-06  1.32e-01  7.38e-01  
  5  +5.0020e-01  +9.8161e-01  4.81e-01  4.58e-03  7.73e-01  1.11e-05  5.44e-02  8.05e-01  
  6  +4.9900e-01  +1.1150e+00  6.16e-01  2.02e-03  3.49e-01  8.69e-05  6.08e-03  9.90e-01  
  7  +4.9200e-01  +1.0174e+00  5.25e-01  3.81e-04  6.60e-02  3.84e-04  1.05e-03  8.28e-01  
  8  +4.8181e-01  +8.5758e-01  3.76e-01  2.00e-04  3.45e-02  2.97e-04  5.59e-04  5.73e-01  
  9  +4.8107e-01  +8.2361e-01  3.43e-01  1.89e-04  3.26e-02  1.97e-04  5.35e-04  2.30e-01  
 10  +4.6510e-01  +6.9552e-01  2.30e-01  1.04e-04  1.79e-02  8.68e-05  3.04e-04  6.59e-01  
 11  +4.6094e-01  +6.7386e-01  2.13e-01  9.36e-05  1.60e-02  7.60e-05  2.75e-04  1.45e-01  
 12  +4.5294e-01  +6.1541e-01  1.62e-01  7.29e-05  1.25e-02  1.25e-05  2.23e-04  8.44e-01  
 13  +4.3056e-01  +5.1642e-01  8.59e-02  3.46e-05  5.89e-03  6.32e-06  1.13e-04  5.42e-01  
 14  +4.1237e-01  +4.4016e-01  2.78e-02  1.07e-05  1.81e-03  1.89e-06  3.74e-05  6.88e-01  
 15  +4.0724e-01  +4.2021e-01  1.30e-02  4.83e-06  8.22e-04  1.04e-06  1.75e-05  6.40e-01  
 16  +4.0390e-01  +4.0718e-01  3.28e-03  1.21e-06  2.05e-04  3.93e-07  4.46e-06  9.90e-01  
 17  +4.0263e-01  +4.0272e-01  8.47e-05  3.11e-08  5.29e-06  1.01e-08  1.16e-07  9.75e-01  
 18  +4.0260e-01  +4.0260e-01  8.47e-07  3.11e-10  5.29e-08  1.01e-10  1.16e-09  9.90e-01  
 19  +4.0260e-01  +4.0260e-01  8.47e-09  3.11e-12  5.29e-10  1.01e-12  1.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.8024ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:47 PM: Optimal value: 4.026e-01
(CVXPY) Oct 06 04:17:47 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:17:47 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 6, Objective: 0.4026
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:47 PM: Your problem has 2579 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:47 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2579
  constraints   = 5079
  nnz(P)        = 0
  nnz(A)        = 37844
  cones (total) = 1
    : Nonnegative = 1,  numel = 5079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5014e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.8002e-01  +5.4358e+02  5.43e+02  4.31e-01  5.47e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3085e-01  +6.0821e+01  6.03e+01  1.64e-01  2.65e+01  1.66e-02  2.75e-01  9.43e-01  
  3  +5.0817e-01  +1.5602e+01  1.51e+01  1.04e-01  1.67e+01  4.53e-05  2.52e-01  3.25e-01  
  4  +5.0084e-01  +1.7159e+00  1.22e+00  1.19e-02  1.99e+00  8.12e-06  1.32e-01  7.34e-01  
  5  +5.0020e-01  +9.8743e-01  4.87e-01  4.64e-03  7.82e-01  1.11e-05  5.41e-02  8.06e-01  
  6  +4.9896e-01  +1.1183e+00  6.19e-01  2.02e-03  3.48e-01  8.67e-05  6.04e-03  9.90e-01  
  7  +4.9136e-01  +1.0150e+00  5.24e-01  3.62e-04  6.28e-02  3.99e-04  9.93e-04  8.37e-01  
  8  +4.8357e-01  +8.7083e-01  3.87e-01  2.17e-04  3.74e-02  2.59e-04  6.01e-04  5.51e-01  
  9  +4.8352e-01  +8.1883e-01  3.35e-01  2.00e-04  3.45e-02  1.05e-04  5.60e-04  4.41e-01  
 10  +4.7196e-01  +7.0944e-01  2.37e-01  1.19e-04  2.04e-02  2.13e-05  3.41e-04  9.09e-01  
 11  +4.6725e-01  +6.8698e-01  2.20e-01  1.05e-04  1.81e-02  1.98e-05  3.06e-04  1.62e-01  
 12  +4.5125e-01  +6.0583e-01  1.55e-01  7.08e-05  1.21e-02  1.31e-05  2.18e-04  9.90e-01  
 13  +4.2506e-01  +4.9507e-01  7.00e-02  2.80e-05  4.78e-03  5.42e-06  9.31e-05  6.16e-01  
 14  +4.0914e-01  +4.3143e-01  2.23e-02  8.58e-06  1.46e-03  1.59e-06  3.05e-05  6.88e-01  
 15  +4.0263e-01  +4.0613e-01  3.50e-03  1.32e-06  2.25e-04  3.43e-07  4.90e-06  9.36e-01  
 16  +4.0135e-01  +4.0149e-01  1.40e-04  5.28e-08  8.98e-06  1.44e-08  1.98e-07  9.72e-01  
 17  +4.0130e-01  +4.0130e-01  1.40e-06  5.29e-10  9.00e-08  1.44e-10  1.98e-09  9.90e-01  
 18  +4.0130e-01  +4.0130e-01  1.40e-08  5.29e-12  9.00e-10  1.44e-12  1.98e-11  9.90e-01  
 19  +4.0130e-01  +4.0130e-01  1.40e-10  5.29e-14  9.00e-12  1.44e-14  1.99e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.7856ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:47 PM: Optimal value: 4.013e-01
(CVXPY) Oct 06 04:17:47 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:17:47 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 7, Objective: 0.4013
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:47 PM: Your problem has 2589 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:47 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2589
  constraints   = 5089
  nnz(P)        = 0
  nnz(A)        = 38243
  cones (total) = 1
    : Nonnegative = 1,  numel = 5089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7984e-01  +5.4362e+02  5.43e+02  4.32e-01  5.46e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3071e-01  +6.0681e+01  6.02e+01  1.64e-01  2.64e+01  1.66e-02  2.75e-01  9.45e-01  
  3  +5.0814e-01  +1.5564e+01  1.51e+01  1.04e-01  1.66e+01  4.55e-05  2.51e-01  3.30e-01  
  4  +5.0081e-01  +1.6577e+00  1.16e+00  1.14e-02  1.89e+00  8.02e-06  1.27e-01  7.57e-01  
  5  +5.0024e-01  +1.0257e+00  5.25e-01  5.00e-03  8.43e-01  1.18e-05  5.14e-02  7.91e-01  
  6  +4.9857e-01  +1.0755e+00  5.77e-01  1.40e-03  2.42e-01  1.17e-04  3.99e-03  9.90e-01  
  7  +4.9045e-01  +9.8260e-01  4.92e-01  3.02e-04  5.24e-02  4.41e-04  8.18e-04  7.98e-01  
  8  +4.8130e-01  +8.6089e-01  3.80e-01  1.97e-04  3.41e-02  2.84e-04  5.46e-04  4.90e-01  
  9  +4.7716e-01  +8.1962e-01  3.42e-01  1.76e-04  3.03e-02  2.18e-04  4.92e-04  1.99e-01  
 10  +4.6366e-01  +6.9023e-01  2.27e-01  1.11e-04  1.91e-02  2.19e-06  3.25e-04  8.69e-01  
 11  +4.5863e-01  +6.6691e-01  2.08e-01  9.75e-05  1.67e-02  3.70e-06  2.89e-04  1.82e-01  
 12  +4.4210e-01  +5.8429e-01  1.42e-01  6.19e-05  1.06e-02  1.56e-05  1.93e-04  9.90e-01  
 13  +4.1884e-01  +4.8497e-01  6.61e-02  2.65e-05  4.50e-03  6.32e-06  8.92e-05  6.11e-01  
 14  +4.0477e-01  +4.2813e-01  2.34e-02  9.01e-06  1.53e-03  2.13e-06  3.22e-05  6.67e-01  
 15  +3.9867e-01  +4.0442e-01  5.75e-03  2.17e-06  3.69e-04  5.28e-07  8.07e-06  7.74e-01  
 16  +3.9669e-01  +3.9691e-01  2.27e-04  8.51e-08  1.45e-05  2.27e-08  3.22e-07  9.77e-01  
 17  +3.9660e-01  +3.9660e-01  2.28e-06  8.52e-10  1.45e-07  2.27e-10  3.23e-09  9.90e-01  
 18  +3.9660e-01  +3.9660e-01  2.28e-08  8.52e-12  1.45e-09  2.27e-12  3.23e-11  9.90e-01  
 19  +3.9660e-01  +3.9660e-01  2.28e-10  8.52e-14  1.45e-11  2.28e-14  3.23e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.5959ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:47 PM: Optimal value: 3.966e-01
(CVXPY) Oct 06 04:17:47 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:17:47 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 8, Objective: 0.3966
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:48 PM: Your problem has 2599 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:48 PM: Finished problem compilation (took 2.930e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2599
  constraints   = 5099
  nnz(P)        = 0
  nnz(A)        = 38725
  cones (total) = 1
    : Nonnegative = 1,  numel = 5099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7976e-01  +5.4357e+02  5.43e+02  4.32e-01  5.45e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3060e-01  +6.0554e+01  6.00e+01  1.64e-01  2.62e+01  1.66e-02  2.74e-01  9.46e-01  
  3  +5.0811e-01  +1.5524e+01  1.50e+01  1.04e-01  1.66e+01  4.55e-05  2.50e-01  3.33e-01  
  4  +5.0086e-01  +1.7577e+00  1.26e+00  1.24e-02  2.05e+00  8.34e-06  1.32e-01  7.25e-01  
  5  +5.0024e-01  +1.0799e+00  5.80e-01  5.52e-03  9.28e-01  1.22e-05  5.67e-02  7.97e-01  
  6  +4.9878e-01  +9.9091e-01  4.92e-01  1.62e-03  2.79e-01  8.41e-05  4.78e-03  9.75e-01  
  7  +4.9001e-01  +9.1556e-01  4.26e-01  2.79e-04  4.83e-02  4.26e-04  7.53e-04  8.43e-01  
  8  +4.7903e-01  +8.2294e-01  3.44e-01  1.69e-04  2.92e-02  3.53e-04  4.66e-04  5.15e-01  
  9  +4.7784e-01  +8.1165e-01  3.34e-01  1.67e-04  2.89e-02  3.16e-04  4.63e-04  5.45e-02  
 10  +4.6298e-01  +7.1784e-01  2.55e-01  1.19e-04  2.04e-02  1.69e-04  3.43e-04  4.24e-01  
 11  +4.3409e-01  +5.7044e-01  1.36e-01  5.67e-05  9.68e-03  6.47e-05  1.79e-04  5.50e-01  
 12  +4.1359e-01  +4.7927e-01  6.57e-02  2.60e-05  4.43e-03  2.17e-05  8.91e-05  6.36e-01  
 13  +4.1108e-01  +4.6892e-01  5.78e-02  2.26e-05  3.85e-03  1.80e-05  7.84e-05  2.02e-01  
 14  +3.9858e-01  +4.1706e-01  1.85e-02  7.05e-06  1.20e-03  3.11e-06  2.60e-05  9.08e-01  
 15  +3.9233e-01  +3.9318e-01  8.58e-04  3.25e-07  5.52e-05  1.18e-07  1.26e-06  9.67e-01  
 16  +3.9200e-01  +3.9201e-01  8.77e-06  3.32e-09  5.65e-07  1.20e-09  1.29e-08  9.90e-01  
 17  +3.9200e-01  +3.9200e-01  8.77e-08  3.32e-11  5.65e-09  1.20e-11  1.29e-10  9.90e-01  
 18  +3.9200e-01  +3.9200e-01  8.77e-10  3.32e-13  5.65e-11  1.20e-13  1.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 109.6358ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:48 PM: Optimal value: 3.920e-01
(CVXPY) Oct 06 04:17:48 PM: Compilation took 2.930e-02 seconds
(CVXPY) Oct 06 04:17:48 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 9, Objective: 0.3920
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:48 PM: Your problem has 2604 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:48 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2604
  constraints   = 5104
  nnz(P)        = 0
  nnz(A)        = 38966
  cones (total) = 1
    : Nonnegative = 1,  numel = 5104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.7966e-01  +5.4363e+02  5.43e+02  4.32e-01  5.45e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.3053e-01  +6.0495e+01  6.00e+01  1.64e-01  2.62e+01  1.66e-02  2.74e-01  9.47e-01  
  3  +5.0810e-01  +1.5509e+01  1.50e+01  1.04e-01  1.65e+01  4.57e-05  2.49e-01  3.35e-01  
  4  +5.0083e-01  +1.7106e+00  1.21e+00  1.19e-02  1.98e+00  8.23e-06  1.29e-01  7.42e-01  
  5  +5.0027e-01  +1.1135e+00  6.13e-01  5.84e-03  9.81e-01  1.27e-05  5.57e-02  7.85e-01  
  6  +4.9890e-01  +9.5106e-01  4.52e-01  1.50e-03  2.59e-01  8.16e-05  4.42e-03  9.62e-01  
  7  +4.9081e-01  +8.8694e-01  3.96e-01  2.62e-04  4.55e-02  4.16e-04  7.05e-04  8.44e-01  
  8  +4.8146e-01  +8.1543e-01  3.34e-01  1.71e-04  2.96e-02  3.29e-04  4.68e-04  5.13e-01  
  9  +4.7952e-01  +8.0135e-01  3.22e-01  1.67e-04  2.89e-02  2.88e-04  4.61e-04  7.36e-02  
 10  +4.5626e-01  +6.7468e-01  2.18e-01  9.39e-05  1.61e-02  1.49e-04  2.74e-04  5.54e-01  
 11  +4.3202e-01  +5.5942e-01  1.27e-01  5.30e-05  9.04e-03  6.35e-05  1.68e-04  4.51e-01  
 12  +4.1510e-01  +4.8598e-01  7.09e-02  2.85e-05  4.84e-03  2.93e-05  9.68e-05  4.96e-01  
 13  +4.1143e-01  +4.7068e-01  5.93e-02  2.35e-05  3.99e-03  2.28e-05  8.12e-05  2.44e-01  
 14  +3.9668e-01  +4.0929e-01  1.26e-02  4.85e-06  8.24e-04  1.46e-06  1.81e-05  9.90e-01  
 15  +3.9457e-01  +4.0143e-01  6.86e-03  2.61e-06  4.43e-04  8.01e-07  9.89e-06  5.27e-01  
 16  +3.9288e-01  +3.9511e-01  2.23e-03  8.47e-07  1.44e-04  2.54e-07  3.26e-06  9.90e-01  
 17  +3.9201e-01  +3.9204e-01  2.89e-05  1.09e-08  1.86e-06  3.20e-09  4.24e-08  9.89e-01  
 18  +3.9200e-01  +3.9200e-01  2.89e-07  1.09e-10  1.86e-08  3.20e-11  4.24e-10  9.90e-01  
 19  +3.9200e-01  +3.9200e-01  2.89e-09  1.09e-12  1.86e-10  3.21e-13  4.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 113.4125ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:48 PM: Optimal value: 3.920e-01
(CVXPY) Oct 06 04:17:48 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:17:48 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 10, Objective: 0.3920
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:48 PM: Your problem has 2614 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:48 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2614
  constraints   = 5114
  nnz(P)        = 0
  nnz(A)        = 39261
  cones (total) = 1
    : Nonnegative = 1,  numel = 5114

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.7959e-01  +5.4352e+02  5.43e+02  4.32e-01  5.43e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3049e-01  +6.0445e+01  5.99e+01  1.63e-01  2.61e+01  1.66e-02  2.73e-01  9.48e-01  
  3  +5.0809e-01  +1.5489e+01  1.50e+01  1.03e-01  1.65e+01  4.57e-05  2.49e-01  3.37e-01  
  4  +5.0082e-01  +1.6878e+00  1.19e+00  1.17e-02  1.94e+00  8.19e-06  1.27e-01  7.51e-01  
  5  +5.0030e-01  +1.1405e+00  6.40e-01  6.10e-03  1.02e+00  1.29e-05  5.55e-02  7.65e-01  
  6  +4.9904e-01  +9.8143e-01  4.82e-01  1.62e-03  2.80e-01  7.79e-05  4.75e-03  9.61e-01  
  7  +4.9159e-01  +9.2070e-01  4.29e-01  2.90e-04  5.03e-02  3.96e-04  7.76e-04  8.38e-01  
  8  +4.8336e-01  +8.5737e-01  3.74e-01  1.98e-04  3.43e-02  3.73e-04  5.39e-04  3.91e-01  
  9  +4.6624e-01  +7.3916e-01  2.73e-01  1.23e-04  2.12e-02  1.34e-04  3.49e-04  6.79e-01  
 10  +4.3530e-01  +5.7892e-01  1.44e-01  6.06e-05  1.03e-02  4.35e-05  1.90e-04  5.41e-01  
 11  +4.2025e-01  +5.1318e-01  9.29e-02  3.80e-05  6.47e-03  2.46e-05  1.26e-04  4.02e-01  
 12  +4.1332e-01  +4.8392e-01  7.06e-02  2.83e-05  4.81e-03  1.79e-05  9.67e-05  2.84e-01  
 13  +4.0609e-01  +4.5115e-01  4.51e-02  1.75e-05  2.97e-03  5.98e-06  6.14e-05  9.90e-01  
 14  +3.9906e-01  +4.2384e-01  2.48e-02  9.54e-06  1.62e-03  3.26e-06  3.48e-05  4.60e-01  
 15  +3.9320e-01  +4.0077e-01  7.57e-03  2.88e-06  4.88e-04  9.28e-07  1.08e-05  9.90e-01  
 16  +3.9065e-01  +3.9154e-01  8.90e-04  3.37e-07  5.72e-05  9.96e-08  1.30e-06  9.90e-01  
 17  +3.9031e-01  +3.9032e-01  1.45e-05  5.49e-09  9.32e-07  1.63e-09  2.12e-08  9.84e-01  
 18  +3.9030e-01  +3.9030e-01  1.45e-07  5.49e-11  9.32e-09  1.63e-11  2.12e-10  9.90e-01  
 19  +3.9030e-01  +3.9030e-01  1.45e-09  5.49e-13  9.32e-11  1.63e-13  2.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 120.4841ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:49 PM: Optimal value: 3.903e-01
(CVXPY) Oct 06 04:17:49 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:17:49 PM: Solver (including time spent in interface) took 1.353e-01 seconds
Iteration: 11, Objective: 0.3903
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:49 PM: Your problem has 2624 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:49 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2624
  constraints   = 5124
  nnz(P)        = 0
  nnz(A)        = 39690
  cones (total) = 1
    : Nonnegative = 1,  numel = 5124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.80e-01  8.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.7950e-01  +5.4354e+02  5.43e+02  4.32e-01  5.43e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3043e-01  +6.0372e+01  5.98e+01  1.63e-01  2.60e+01  1.66e-02  2.73e-01  9.48e-01  
  3  +5.0807e-01  +1.5475e+01  1.50e+01  1.03e-01  1.64e+01  4.57e-05  2.48e-01  3.38e-01  
  4  +5.0087e-01  +1.7859e+00  1.29e+00  1.27e-02  2.10e+00  8.47e-06  1.32e-01  7.19e-01  
  5  +5.0024e-01  +1.1045e+00  6.04e-01  5.76e-03  9.67e-01  1.24e-05  5.58e-02  7.88e-01  
  6  +4.9874e-01  +1.0084e+00  5.10e-01  1.67e-03  2.88e-01  8.33e-05  4.89e-03  9.62e-01  
  7  +4.9036e-01  +9.3602e-01  4.46e-01  3.12e-04  5.40e-02  3.93e-04  8.37e-04  8.30e-01  
  8  +4.8098e-01  +8.6196e-01  3.81e-01  2.00e-04  3.45e-02  3.81e-04  5.44e-04  4.32e-01  
  9  +4.7161e-01  +7.7507e-01  3.03e-01  1.61e-04  2.77e-02  1.37e-04  4.57e-04  4.90e-01  
 10  +4.4555e-01  +6.3386e-01  1.88e-01  8.28e-05  1.42e-02  5.74e-05  2.50e-04  6.34e-01  
 11  +4.1834e-01  +5.0812e-01  8.98e-02  3.69e-05  6.27e-03  1.81e-05  1.23e-04  6.23e-01  
 12  +4.1284e-01  +4.8506e-01  7.22e-02  2.90e-05  4.93e-03  1.36e-05  9.87e-05  3.25e-01  
 13  +4.0482e-01  +4.5009e-01  4.53e-02  1.76e-05  2.98e-03  5.75e-06  6.18e-05  9.90e-01  
 14  +3.9414e-01  +4.0863e-01  1.45e-02  5.57e-06  9.44e-04  1.79e-06  2.08e-05  7.00e-01  
 15  +3.9092e-01  +3.9624e-01  5.32e-03  2.02e-06  3.43e-04  6.56e-07  7.73e-06  6.71e-01  
 16  +3.8947e-01  +3.9065e-01  1.18e-03  4.48e-07  7.59e-05  1.33e-07  1.73e-06  9.90e-01  
 17  +3.8901e-01  +3.8902e-01  1.26e-05  4.78e-09  8.10e-07  1.42e-09  1.85e-08  9.90e-01  
 18  +3.8900e-01  +3.8900e-01  1.26e-07  4.78e-11  8.10e-09  1.42e-11  1.85e-10  9.90e-01  
 19  +3.8900e-01  +3.8900e-01  1.26e-09  4.78e-13  8.10e-11  1.42e-13  1.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 116.2988ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:49 PM: Optimal value: 3.890e-01
(CVXPY) Oct 06 04:17:49 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:17:49 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 12, Objective: 0.3890
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:49 PM: Your problem has 2634 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:49 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2634
  constraints   = 5134
  nnz(P)        = 0
  nnz(A)        = 39921
  cones (total) = 1
    : Nonnegative = 1,  numel = 5134

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.80e-01  8.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.7950e-01  +5.4351e+02  5.43e+02  4.33e-01  5.42e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3041e-01  +6.0353e+01  5.98e+01  1.63e-01  2.59e+01  1.66e-02  2.73e-01  9.48e-01  
  3  +5.0807e-01  +1.5466e+01  1.50e+01  1.03e-01  1.64e+01  4.57e-05  2.48e-01  3.39e-01  
  4  +5.0088e-01  +1.7977e+00  1.30e+00  1.28e-02  2.12e+00  8.51e-06  1.32e-01  7.15e-01  
  5  +5.0022e-01  +1.0816e+00  5.81e-01  5.55e-03  9.30e-01  1.22e-05  5.43e-02  8.00e-01  
  6  +4.9844e-01  +1.0443e+00  5.46e-01  1.56e-03  2.69e-01  9.78e-05  4.49e-03  9.73e-01  
  7  +4.8940e-01  +9.5852e-01  4.69e-01  3.13e-04  5.41e-02  4.10e-04  8.41e-04  8.14e-01  
  8  +4.7964e-01  +8.7387e-01  3.94e-01  2.02e-04  3.49e-02  3.74e-04  5.52e-04  4.31e-01  
  9  +4.7299e-01  +8.0196e-01  3.29e-01  1.74e-04  2.99e-02  1.84e-04  4.89e-04  3.58e-01  
 10  +4.4633e-01  +6.4577e-01  1.99e-01  8.63e-05  1.48e-02  8.48e-05  2.59e-04  6.01e-01  
 11  +4.2544e-01  +5.4536e-01  1.20e-01  4.97e-05  8.47e-03  4.20e-05  1.61e-04  4.31e-01  
 12  +4.0419e-01  +4.5035e-01  4.62e-02  1.82e-05  3.09e-03  1.16e-05  6.43e-05  7.03e-01  
 13  +4.0157e-01  +4.3662e-01  3.50e-02  1.37e-05  2.32e-03  5.58e-06  4.91e-05  7.97e-01  
 14  +3.9844e-01  +4.2489e-01  2.65e-02  1.02e-05  1.72e-03  4.06e-06  3.69e-05  4.40e-01  
 15  +3.9100e-01  +3.9640e-01  5.40e-03  2.06e-06  3.49e-04  7.97e-07  7.87e-06  8.19e-01  
 16  +3.8932e-01  +3.9012e-01  7.98e-04  3.04e-07  5.15e-05  8.78e-08  1.18e-06  9.90e-01  
 17  +3.8901e-01  +3.8903e-01  1.93e-05  7.33e-09  1.24e-06  2.12e-09  2.85e-08  9.79e-01  
 18  +3.8900e-01  +3.8900e-01  1.93e-07  7.33e-11  1.24e-08  2.12e-11  2.85e-10  9.90e-01  
 19  +3.8900e-01  +3.8900e-01  1.93e-09  7.33e-13  1.24e-10  2.13e-13  2.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 120.1281ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:49 PM: Optimal value: 3.890e-01
(CVXPY) Oct 06 04:17:49 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:17:49 PM: Solver (including time spent in interface) took 1.251e-01 seconds
Iteration: 13, Objective: 0.3890
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:50 PM: Your problem has 2644 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:50 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2644
  constraints   = 5144
  nnz(P)        = 0
  nnz(A)        = 40203
  cones (total) = 1
    : Nonnegative = 1,  numel = 5144

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.80e-01  8.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.7934e-01  +5.4348e+02  5.43e+02  4.33e-01  5.41e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3031e-01  +6.0243e+01  5.97e+01  1.63e-01  2.58e+01  1.66e-02  2.72e-01  9.50e-01  
  3  +5.0805e-01  +1.5440e+01  1.49e+01  1.03e-01  1.63e+01  4.58e-05  2.47e-01  3.41e-01  
  4  +5.0089e-01  +1.8353e+00  1.33e+00  1.32e-02  2.18e+00  8.65e-06  1.33e-01  7.05e-01  
  5  +5.0022e-01  +1.0966e+00  5.96e-01  5.69e-03  9.53e-01  1.24e-05  5.45e-02  7.96e-01  
  6  +4.9770e-01  +1.1001e+00  6.02e-01  1.33e-03  2.29e-01  1.29e-04  3.72e-03  9.90e-01  
  7  +4.8734e-01  +9.8108e-01  4.94e-01  3.09e-04  5.34e-02  4.17e-04  8.33e-04  7.80e-01  
  8  +4.8089e-01  +9.2556e-01  4.45e-01  2.37e-04  4.09e-02  3.83e-04  6.45e-04  2.93e-01  
  9  +4.7498e-01  +8.7629e-01  4.01e-01  1.97e-04  3.39e-02  3.21e-04  5.43e-04  2.39e-01  
 10  +4.6209e-01  +7.3271e-01  2.71e-01  1.38e-04  2.36e-02  2.93e-06  4.01e-04  7.80e-01  
 11  +4.2459e-01  +5.4056e-01  1.16e-01  4.76e-05  8.09e-03  3.28e-06  1.53e-04  6.93e-01  
 12  +4.0936e-01  +4.7733e-01  6.80e-02  2.72e-05  4.61e-03  3.14e-06  9.31e-05  5.15e-01  
 13  +4.0180e-01  +4.4566e-01  4.39e-02  1.73e-05  2.92e-03  3.76e-06  6.12e-05  6.98e-01  
 14  +3.9285e-01  +4.0994e-01  1.71e-02  6.63e-06  1.12e-03  1.60e-06  2.46e-05  6.97e-01  
 15  +3.8896e-01  +3.9467e-01  5.71e-03  2.18e-06  3.69e-04  6.13e-07  8.30e-06  8.49e-01  
 16  +3.8773e-01  +3.9006e-01  2.33e-03  8.86e-07  1.50e-04  2.61e-07  3.41e-06  9.90e-01  
 17  +3.8682e-01  +3.8688e-01  5.71e-05  2.17e-08  3.67e-06  6.31e-09  8.40e-08  9.78e-01  
 18  +3.8680e-01  +3.8680e-01  5.71e-07  2.17e-10  3.67e-08  6.32e-11  8.41e-10  9.90e-01  
 19  +3.8680e-01  +3.8680e-01  5.71e-09  2.17e-12  3.67e-10  6.33e-13  8.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.2929ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:50 PM: Optimal value: 3.868e-01
(CVXPY) Oct 06 04:17:50 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:17:50 PM: Solver (including time spent in interface) took 1.254e-01 seconds
Iteration: 14, Objective: 0.3868
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:50 PM: Your problem has 2654 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:50 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2654
  constraints   = 5154
  nnz(P)        = 0
  nnz(A)        = 40450
  cones (total) = 1
    : Nonnegative = 1,  numel = 5154

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5016e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7920e-01  +5.4350e+02  5.43e+02  4.33e-01  5.40e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3020e-01  +6.0139e+01  5.96e+01  1.63e-01  2.57e+01  1.67e-02  2.72e-01  9.51e-01  
  3  +5.0803e-01  +1.5414e+01  1.49e+01  1.03e-01  1.63e+01  4.59e-05  2.47e-01  3.44e-01  
  4  +5.0091e-01  +1.8703e+00  1.37e+00  1.35e-02  2.23e+00  8.79e-06  1.34e-01  6.96e-01  
  5  +5.0021e-01  +1.0971e+00  5.97e-01  5.69e-03  9.53e-01  1.25e-05  5.35e-02  8.07e-01  
  6  +4.9763e-01  +1.0566e+00  5.59e-01  1.30e-03  2.24e-01  1.25e-04  3.65e-03  9.68e-01  
  7  +4.8789e-01  +9.6434e-01  4.76e-01  3.22e-04  5.57e-02  4.02e-04  8.69e-04  7.68e-01  
  8  +4.7861e-01  +8.9162e-01  4.13e-01  2.17e-04  3.75e-02  3.77e-04  5.95e-04  4.01e-01  
  9  +4.6736e-01  +7.7107e-01  3.04e-01  1.64e-04  2.81e-02  5.88e-05  4.68e-04  6.56e-01  
 10  +4.3364e-01  +5.9222e-01  1.59e-01  6.77e-05  1.15e-02  2.83e-05  2.11e-04  6.01e-01  
 11  +4.1778e-01  +5.2184e-01  1.04e-01  4.33e-05  7.34e-03  1.65e-05  1.43e-04  4.09e-01  
 12  +4.0742e-01  +4.7714e-01  6.97e-02  2.85e-05  4.82e-03  1.06e-05  9.87e-05  3.42e-01  
 13  +3.9444e-01  +4.2068e-01  2.62e-02  1.04e-05  1.75e-03  3.16e-06  3.82e-05  9.76e-01  
 14  +3.8819e-01  +3.9588e-01  7.69e-03  3.00e-06  5.08e-04  9.14e-07  1.15e-05  9.21e-01  
 15  +3.8652e-01  +3.8975e-01  3.23e-03  1.25e-06  2.11e-04  3.63e-07  4.86e-06  7.99e-01  
 16  +3.8539e-01  +3.8563e-01  2.40e-04  9.25e-08  1.56e-05  2.70e-08  3.64e-07  9.30e-01  
 17  +3.8530e-01  +3.8530e-01  2.43e-06  9.37e-10  1.58e-07  2.74e-10  3.69e-09  9.90e-01  
 18  +3.8530e-01  +3.8530e-01  2.43e-08  9.37e-12  1.58e-09  2.74e-12  3.69e-11  9.90e-01  
 19  +3.8530e-01  +3.8530e-01  2.43e-10  9.38e-14  1.58e-11  2.74e-14  3.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 120.3159ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:50 PM: Optimal value: 3.853e-01
(CVXPY) Oct 06 04:17:50 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:17:50 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 15, Objective: 0.3853
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:50 PM: Your problem has 2664 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:50 PM: Finished problem compilation (took 3.551e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2664
  constraints   = 5164
  nnz(P)        = 0
  nnz(A)        = 40759
  cones (total) = 1
    : Nonnegative = 1,  numel = 5164

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5016e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7908e-01  +5.4359e+02  5.43e+02  4.33e-01  5.39e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3012e-01  +6.0056e+01  5.95e+01  1.62e-01  2.56e+01  1.67e-02  2.72e-01  9.52e-01  
  3  +5.0802e-01  +1.5399e+01  1.49e+01  1.03e-01  1.62e+01  4.60e-05  2.46e-01  3.46e-01  
  4  +5.0095e-01  +1.9482e+00  1.45e+00  1.43e-02  2.35e+00  9.01e-06  1.37e-01  6.74e-01  
  5  +5.0018e-01  +1.0885e+00  5.88e-01  5.62e-03  9.40e-01  1.23e-05  5.45e-02  8.15e-01  
  6  +4.9755e-01  +1.1250e+00  6.27e-01  1.51e-03  2.61e-01  1.21e-04  4.29e-03  9.71e-01  
  7  +4.8822e-01  +1.0168e+00  5.29e-01  3.89e-04  6.73e-02  3.66e-04  1.05e-03  7.65e-01  
  8  +4.7806e-01  +9.2252e-01  4.44e-01  2.39e-04  4.11e-02  3.56e-04  6.55e-04  4.65e-01  
  9  +4.6519e-01  +7.6018e-01  2.95e-01  1.58e-04  2.70e-02  3.41e-06  4.54e-04  8.14e-01  
 10  +4.2526e-01  +5.4902e-01  1.24e-01  5.19e-05  8.81e-03  4.30e-06  1.66e-04  7.32e-01  
 11  +4.1329e-01  +5.0017e-01  8.69e-02  3.58e-05  6.06e-03  4.30e-06  1.20e-04  4.08e-01  
 12  +4.0701e-01  +4.7449e-01  6.75e-02  2.74e-05  4.64e-03  3.98e-06  9.49e-05  3.23e-01  
 13  +3.9658e-01  +4.3174e-01  3.52e-02  1.41e-05  2.38e-03  2.50e-06  5.12e-05  5.82e-01  
 14  +3.8964e-01  +4.0353e-01  1.39e-02  5.48e-06  9.25e-04  1.27e-06  2.08e-05  7.83e-01  
 15  +3.8764e-01  +3.9573e-01  8.09e-03  3.14e-06  5.31e-04  7.93e-07  1.21e-05  5.98e-01  
 16  +3.8584e-01  +3.8879e-01  2.94e-03  1.14e-06  1.92e-04  3.21e-07  4.44e-06  9.90e-01  
 17  +3.8473e-01  +3.8480e-01  7.52e-05  2.90e-08  4.90e-06  8.08e-09  1.14e-07  9.77e-01  
 18  +3.8470e-01  +3.8470e-01  7.52e-07  2.90e-10  4.91e-08  8.08e-11  1.15e-09  9.90e-01  
 19  +3.8470e-01  +3.8470e-01  7.52e-09  2.90e-12  4.91e-10  8.11e-13  1.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.0244ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:51 PM: Optimal value: 3.847e-01
(CVXPY) Oct 06 04:17:51 PM: Compilation took 3.551e-02 seconds
(CVXPY) Oct 06 04:17:51 PM: Solver (including time spent in interface) took 1.202e-01 seconds
Iteration: 16, Objective: 0.3847
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:51 PM: Your problem has 2674 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:51 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2674
  constraints   = 5174
  nnz(P)        = 0
  nnz(A)        = 40945
  cones (total) = 1
    : Nonnegative = 1,  numel = 5174

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5017e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7887e-01  +5.4369e+02  5.43e+02  4.34e-01  5.38e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3000e-01  +5.9938e+01  5.94e+01  1.62e-01  2.55e+01  1.67e-02  2.71e-01  9.54e-01  
  3  +5.0800e-01  +1.5376e+01  1.49e+01  1.03e-01  1.62e+01  4.62e-05  2.45e-01  3.50e-01  
  4  +5.0097e-01  +1.9771e+00  1.48e+00  1.46e-02  2.40e+00  9.12e-06  1.37e-01  6.68e-01  
  5  +5.0022e-01  +1.1436e+00  6.43e-01  6.16e-03  1.03e+00  1.22e-05  5.85e-02  7.68e-01  
  6  +4.9781e-01  +1.1519e+00  6.54e-01  1.65e-03  2.83e-01  1.08e-04  4.66e-03  9.88e-01  
  7  +4.8936e-01  +1.0379e+00  5.49e-01  4.32e-04  7.47e-02  3.17e-04  1.17e-03  7.63e-01  
  8  +4.8076e-01  +9.6379e-01  4.83e-01  2.79e-04  4.81e-02  3.39e-04  7.62e-04  3.98e-01  
  9  +4.7489e-01  +9.0496e-01  4.30e-01  2.30e-04  3.95e-02  2.68e-04  6.36e-04  2.74e-01  
 10  +4.5191e-01  +6.9103e-01  2.39e-01  1.15e-04  1.97e-02  6.28e-06  3.43e-04  8.63e-01  
 11  +4.2541e-01  +5.6071e-01  1.35e-01  5.95e-05  1.01e-02  4.76e-06  1.93e-04  5.22e-01  
 12  +4.0982e-01  +4.9168e-01  8.19e-02  3.45e-05  5.83e-03  3.72e-06  1.19e-04  4.80e-01  
 13  +4.0307e-01  +4.6273e-01  5.97e-02  2.46e-05  4.16e-03  3.27e-06  8.74e-05  3.71e-01  
 14  +3.9056e-01  +4.1005e-01  1.95e-02  7.83e-06  1.32e-03  1.28e-06  2.97e-05  7.40e-01  
 15  +3.8671e-01  +3.9403e-01  7.32e-03  2.88e-06  4.86e-04  7.15e-07  1.12e-05  8.93e-01  
 16  +3.8484e-01  +3.8710e-01  2.26e-03  8.81e-07  1.49e-04  2.25e-07  3.48e-06  7.93e-01  
 17  +3.8402e-01  +3.8409e-01  6.55e-05  2.55e-08  4.30e-06  6.51e-09  1.01e-07  9.72e-01  
 18  +3.8400e-01  +3.8400e-01  6.55e-07  2.55e-10  4.30e-08  6.52e-11  1.01e-09  9.90e-01  
 19  +3.8400e-01  +3.8400e-01  6.55e-09  2.55e-12  4.30e-10  6.53e-13  1.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.321ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:51 PM: Optimal value: 3.840e-01
(CVXPY) Oct 06 04:17:51 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:17:51 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 17, Objective: 0.3840
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:51 PM: Your problem has 2684 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:51 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2684
  constraints   = 5184
  nnz(P)        = 0
  nnz(A)        = 41182
  cones (total) = 1
    : Nonnegative = 1,  numel = 5184

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5018e+03  2.50e+03  9.80e-01  8.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.7873e-01  +5.4381e+02  5.43e+02  4.34e-01  5.37e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.2990e-01  +5.9841e+01  5.93e+01  1.62e-01  2.54e+01  1.67e-02  2.71e-01  9.55e-01  
  3  +5.0798e-01  +1.5361e+01  1.49e+01  1.02e-01  1.61e+01  4.63e-05  2.45e-01  3.52e-01  
  4  +5.0100e-01  +2.0308e+00  1.53e+00  1.51e-02  2.48e+00  9.29e-06  1.39e-01  6.55e-01  
  5  +5.0018e-01  +1.1120e+00  6.12e-01  5.85e-03  9.78e-01  1.23e-05  5.61e-02  8.05e-01  
  6  +4.9727e-01  +1.2625e+00  7.65e-01  1.71e-03  2.95e-01  1.27e-04  4.81e-03  9.90e-01  
  7  +4.8820e-01  +1.1170e+00  6.29e-01  4.95e-04  8.53e-02  3.22e-04  1.34e-03  7.25e-01  
  8  +4.7995e-01  +1.0349e+00  5.55e-01  3.24e-04  5.57e-02  3.43e-04  8.85e-04  3.85e-01  
  9  +4.7628e-01  +9.4529e-01  4.69e-01  2.64e-04  4.54e-02  2.04e-04  7.31e-04  3.85e-01  
 10  +4.5702e-01  +7.2057e-01  2.64e-01  1.30e-04  2.22e-02  2.20e-06  3.80e-04  9.41e-01  
 11  +4.2566e-01  +5.6139e-01  1.36e-01  5.96e-05  1.01e-02  2.59e-06  1.92e-04  5.54e-01  
 12  +4.1363e-01  +5.0897e-01  9.53e-02  4.05e-05  6.86e-03  2.88e-06  1.37e-04  3.76e-01  
 13  +4.0736e-01  +4.8227e-01  7.49e-02  3.12e-05  5.28e-03  2.89e-06  1.08e-04  2.91e-01  
 14  +3.9655e-01  +4.3614e-01  3.96e-02  1.60e-05  2.70e-03  3.24e-06  5.82e-05  7.77e-01  
 15  +3.8775e-01  +4.0006e-01  1.23e-02  4.89e-06  8.25e-04  1.25e-06  1.88e-05  8.86e-01  
 16  +3.8562e-01  +3.9163e-01  6.01e-03  2.36e-06  3.98e-04  6.39e-07  9.23e-06  7.93e-01  
 17  +3.8348e-01  +3.8369e-01  2.12e-04  8.30e-08  1.40e-05  2.22e-08  3.31e-07  9.90e-01  
 18  +3.8340e-01  +3.8340e-01  2.13e-06  8.33e-10  1.41e-07  2.23e-10  3.33e-09  9.90e-01  
 19  +3.8340e-01  +3.8340e-01  2.13e-08  8.33e-12  1.41e-09  2.23e-12  3.33e-11  9.90e-01  
 20  +3.8340e-01  +3.8340e-01  2.13e-10  8.34e-14  1.41e-11  2.24e-14  3.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.3273ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:51 PM: Optimal value: 3.834e-01
(CVXPY) Oct 06 04:17:51 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:17:51 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 18, Objective: 0.3834
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:51 PM: Your problem has 2694 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:52 PM: Finished problem compilation (took 4.689e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2694
  constraints   = 5194
  nnz(P)        = 0
  nnz(A)        = 41543
  cones (total) = 1
    : Nonnegative = 1,  numel = 5194

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.38e+01  1.00e+00  1.00e+00   ------   
  1  +5.7850e-01  +5.4392e+02  5.43e+02  4.34e-01  5.37e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2975e-01  +5.9707e+01  5.92e+01  1.62e-01  2.53e+01  1.68e-02  2.70e-01  9.57e-01  
  3  +5.0796e-01  +1.5332e+01  1.48e+01  1.02e-01  1.61e+01  4.66e-05  2.44e-01  3.57e-01  
  4  +5.0097e-01  +1.9897e+00  1.49e+00  1.47e-02  2.42e+00  9.23e-06  1.35e-01  6.69e-01  
  5  +5.0022e-01  +1.1649e+00  6.65e-01  6.35e-03  1.06e+00  1.30e-05  5.53e-02  7.86e-01  
  6  +4.9667e-01  +1.1822e+00  6.86e-01  1.26e-03  2.18e-01  1.52e-04  3.47e-03  9.90e-01  
  7  +4.9038e-01  +1.0971e+00  6.07e-01  5.54e-04  9.57e-02  2.74e-04  1.50e-03  5.81e-01  
  8  +4.8177e-01  +9.9843e-01  5.17e-01  3.26e-04  5.61e-02  2.95e-04  8.86e-04  4.84e-01  
  9  +4.7571e-01  +9.3448e-01  4.59e-01  2.55e-04  4.39e-02  2.35e-04  7.05e-04  3.37e-01  
 10  +4.5991e-01  +7.4992e-01  2.90e-01  1.54e-04  2.63e-02  2.33e-06  4.49e-04  8.70e-01  
 11  +4.2198e-01  +5.5017e-01  1.28e-01  5.58e-05  9.45e-03  3.35e-06  1.80e-04  6.79e-01  
 12  +4.1164e-01  +5.0676e-01  9.51e-02  4.04e-05  6.84e-03  3.87e-06  1.37e-04  3.72e-01  
 13  +4.0087e-01  +4.6127e-01  6.04e-02  2.51e-05  4.24e-03  3.19e-06  8.93e-05  4.64e-01  
 14  +3.9172e-01  +4.2303e-01  3.13e-02  1.28e-05  2.15e-03  2.08e-06  4.78e-05  5.95e-01  
 15  +3.8569e-01  +3.9797e-01  1.23e-02  4.94e-06  8.32e-04  1.11e-06  1.92e-05  8.23e-01  
 16  +3.8348e-01  +3.8926e-01  5.77e-03  2.30e-06  3.87e-04  5.65e-07  9.10e-06  7.45e-01  
 17  +3.8148e-01  +3.8170e-01  2.17e-04  8.59e-08  1.45e-05  2.18e-08  3.47e-07  9.90e-01  
 18  +3.8140e-01  +3.8140e-01  2.18e-06  8.63e-10  1.46e-07  2.19e-10  3.49e-09  9.90e-01  
 19  +3.8140e-01  +3.8140e-01  2.18e-08  8.63e-12  1.46e-09  2.19e-12  3.49e-11  9.90e-01  
 20  +3.8140e-01  +3.8140e-01  2.18e-10  8.62e-14  1.46e-11  2.20e-14  3.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.562ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:52 PM: Optimal value: 3.814e-01
(CVXPY) Oct 06 04:17:52 PM: Compilation took 4.689e-02 seconds
(CVXPY) Oct 06 04:17:52 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 19, Objective: 0.3814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:52 PM: Your problem has 2704 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:52 PM: Finished problem compilation (took 3.127e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2704
  constraints   = 5204
  nnz(P)        = 0
  nnz(A)        = 41778
  cones (total) = 1
    : Nonnegative = 1,  numel = 5204

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.38e+01  1.00e+00  1.00e+00   ------   
  1  +5.7841e-01  +5.4398e+02  5.43e+02  4.35e-01  5.36e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2970e-01  +5.9675e+01  5.91e+01  1.62e-01  2.52e+01  1.68e-02  2.70e-01  9.58e-01  
  3  +5.0795e-01  +1.5323e+01  1.48e+01  1.02e-01  1.60e+01  4.67e-05  2.44e-01  3.58e-01  
  4  +5.0095e-01  +1.9554e+00  1.45e+00  1.44e-02  2.37e+00  9.15e-06  1.33e-01  6.79e-01  
  5  +5.0022e-01  +1.1753e+00  6.75e-01  6.44e-03  1.07e+00  1.34e-05  5.36e-02  7.94e-01  
  6  +4.9664e-01  +1.1880e+00  6.91e-01  1.22e-03  2.10e-01  1.59e-04  3.33e-03  9.90e-01  
  7  +4.8981e-01  +1.0977e+00  6.08e-01  5.16e-04  8.91e-02  2.92e-04  1.39e-03  5.95e-01  
  8  +4.8117e-01  +9.9498e-01  5.14e-01  3.10e-04  5.34e-02  2.94e-04  8.41e-04  4.91e-01  
  9  +4.7302e-01  +9.1559e-01  4.43e-01  2.37e-04  4.08e-02  2.26e-04  6.58e-04  3.38e-01  
 10  +4.5608e-01  +7.4021e-01  2.84e-01  1.47e-04  2.51e-02  1.16e-05  4.33e-04  8.20e-01  
 11  +4.1825e-01  +5.3952e-01  1.21e-01  5.26e-05  8.90e-03  5.08e-06  1.73e-04  6.55e-01  
 12  +4.0899e-01  +5.0069e-01  9.17e-02  3.89e-05  6.56e-03  5.01e-06  1.33e-04  3.74e-01  
 13  +3.9808e-01  +4.5451e-01  5.64e-02  2.34e-05  3.95e-03  3.43e-06  8.43e-05  4.46e-01  
 14  +3.8966e-01  +4.1925e-01  2.96e-02  1.21e-05  2.03e-03  2.04e-06  4.56e-05  5.58e-01  
 15  +3.8277e-01  +3.9046e-01  7.69e-03  3.09e-06  5.20e-04  8.16e-07  1.22e-05  9.90e-01  
 16  +3.8008e-01  +3.8032e-01  2.32e-04  9.30e-08  1.57e-05  2.40e-08  3.78e-07  9.72e-01  
 17  +3.8000e-01  +3.8000e-01  2.34e-06  9.35e-10  1.58e-07  2.41e-10  3.80e-09  9.90e-01  
 18  +3.8000e-01  +3.8000e-01  2.34e-08  9.35e-12  1.58e-09  2.41e-12  3.80e-11  9.90e-01  
 19  +3.8000e-01  +3.8000e-01  2.34e-10  9.36e-14  1.58e-11  2.41e-14  3.81e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 125.2253ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:52 PM: Optimal value: 3.800e-01
(CVXPY) Oct 06 04:17:52 PM: Compilation took 3.127e-02 seconds
(CVXPY) Oct 06 04:17:52 PM: Solver (including time spent in interface) took 1.251e-01 seconds
Iteration: 20, Objective: 0.3800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:52 PM: Your problem has 2712 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:52 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2712
  constraints   = 5212
  nnz(P)        = 0
  nnz(A)        = 41895
  cones (total) = 1
    : Nonnegative = 1,  numel = 5212

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.37e+01  1.00e+00  1.00e+00   ------   
  1  +5.7838e-01  +5.4400e+02  5.43e+02  4.35e-01  5.35e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2967e-01  +5.9630e+01  5.91e+01  1.61e-01  2.51e+01  1.68e-02  2.70e-01  9.58e-01  
  3  +5.0794e-01  +1.5311e+01  1.48e+01  1.02e-01  1.60e+01  4.67e-05  2.43e-01  3.59e-01  
  4  +5.0096e-01  +1.9616e+00  1.46e+00  1.45e-02  2.38e+00  9.17e-06  1.33e-01  6.78e-01  
  5  +5.0021e-01  +1.1673e+00  6.67e-01  6.36e-03  1.06e+00  1.35e-05  5.26e-02  8.01e-01  
  6  +4.9629e-01  +1.1914e+00  6.95e-01  1.15e-03  1.97e-01  1.72e-04  3.12e-03  9.88e-01  
  7  +4.9014e-01  +1.1025e+00  6.12e-01  5.40e-04  9.31e-02  2.78e-04  1.45e-03  5.60e-01  
  8  +4.8156e-01  +1.0008e+00  5.19e-01  3.19e-04  5.48e-02  2.89e-04  8.65e-04  4.99e-01  
  9  +4.7437e-01  +9.2495e-01  4.51e-01  2.48e-04  4.25e-02  2.18e-04  6.84e-04  3.47e-01  
 10  +4.5953e-01  +7.6709e-01  3.08e-01  1.62e-04  2.77e-02  3.48e-05  4.72e-04  7.39e-01  
 11  +4.2104e-01  +5.5508e-01  1.34e-01  5.82e-05  9.84e-03  1.25e-05  1.88e-04  6.63e-01  
 12  +4.1284e-01  +5.2012e-01  1.07e-01  4.57e-05  7.72e-03  1.02e-05  1.53e-04  2.97e-01  
 13  +4.0297e-01  +4.7761e-01  7.46e-02  3.13e-05  5.27e-03  7.03e-06  1.10e-04  3.36e-01  
 14  +3.9352e-01  +4.3745e-01  4.39e-02  1.81e-05  3.05e-03  4.14e-06  6.69e-05  4.55e-01  
 15  +3.8181e-01  +3.8841e-01  6.60e-03  2.67e-06  4.49e-04  5.89e-07  1.06e-05  8.73e-01  
 16  +3.7966e-01  +3.7984e-01  1.77e-04  7.11e-08  1.20e-05  1.59e-08  2.89e-07  9.81e-01  
 17  +3.7960e-01  +3.7960e-01  1.78e-06  7.14e-10  1.20e-07  1.59e-10  2.91e-09  9.90e-01  
 18  +3.7960e-01  +3.7960e-01  1.78e-08  7.14e-12  1.20e-09  1.59e-12  2.91e-11  9.90e-01  
 19  +3.7960e-01  +3.7960e-01  1.78e-10  7.14e-14  1.20e-11  1.60e-14  2.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.1286ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:52 PM: Optimal value: 3.796e-01
(CVXPY) Oct 06 04:17:52 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:17:52 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 21, Objective: 0.3796
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:53 PM: Your problem has 2713 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:53 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2713
  constraints   = 5213
  nnz(P)        = 0
  nnz(A)        = 41920
  cones (total) = 1
    : Nonnegative = 1,  numel = 5213

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.37e+01  1.00e+00  1.00e+00   ------   
  1  +5.7836e-01  +5.4401e+02  5.43e+02  4.35e-01  5.35e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2966e-01  +5.9625e+01  5.91e+01  1.61e-01  2.51e+01  1.68e-02  2.70e-01  9.58e-01  
  3  +5.0794e-01  +1.5311e+01  1.48e+01  1.02e-01  1.60e+01  4.67e-05  2.43e-01  3.59e-01  
  4  +5.0095e-01  +1.9568e+00  1.46e+00  1.44e-02  2.37e+00  9.16e-06  1.33e-01  6.80e-01  
  5  +5.0022e-01  +1.1706e+00  6.70e-01  6.39e-03  1.06e+00  1.36e-05  5.24e-02  8.05e-01  
  6  +4.9624e-01  +1.1871e+00  6.91e-01  1.12e-03  1.94e-01  1.74e-04  3.06e-03  9.89e-01  
  7  +4.8984e-01  +1.0964e+00  6.07e-01  5.21e-04  8.98e-02  2.85e-04  1.40e-03  5.66e-01  
  8  +4.8097e-01  +9.9468e-01  5.14e-01  3.08e-04  5.31e-02  2.94e-04  8.38e-04  4.97e-01  
  9  +4.7340e-01  +9.2023e-01  4.47e-01  2.42e-04  4.15e-02  2.27e-04  6.69e-04  3.19e-01  
 10  +4.5541e-01  +7.3409e-01  2.79e-01  1.44e-04  2.46e-02  2.23e-06  4.24e-04  8.64e-01  
 11  +4.2067e-01  +5.5360e-01  1.33e-01  5.85e-05  9.90e-03  2.36e-06  1.91e-04  6.01e-01  
 12  +4.0902e-01  +5.0324e-01  9.42e-02  4.03e-05  6.80e-03  3.14e-06  1.38e-04  3.99e-01  
 13  +3.9723e-01  +4.5272e-01  5.55e-02  2.31e-05  3.90e-03  2.44e-06  8.38e-05  4.84e-01  
 14  +3.8370e-01  +3.9552e-01  1.18e-02  4.78e-06  8.05e-04  1.19e-06  1.87e-05  9.80e-01  
 15  +3.7991e-01  +3.8078e-01  8.72e-04  3.51e-07  5.91e-05  8.62e-08  1.43e-06  9.37e-01  
 16  +3.7960e-01  +3.7961e-01  9.50e-06  3.82e-09  6.44e-07  9.37e-10  1.56e-08  9.89e-01  
 17  +3.7960e-01  +3.7960e-01  9.50e-08  3.82e-11  6.44e-09  9.37e-12  1.56e-10  9.90e-01  
 18  +3.7960e-01  +3.7960e-01  9.50e-10  3.82e-13  6.44e-11  9.38e-14  1.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 122.2208ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:53 PM: Optimal value: 3.796e-01
(CVXPY) Oct 06 04:17:53 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:17:53 PM: Solver (including time spent in interface) took 1.416e-01 seconds
Iteration: 22, Objective: 0.3796
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:53 PM: Your problem has 2720 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:53 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:53 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2720
  constraints   = 5220
  nnz(P)        = 0
  nnz(A)        = 42008
  cones (total) = 1
    : Nonnegative = 1,  numel = 5220

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.36e+01  1.00e+00  1.00e+00   ------   
  1  +5.7834e-01  +5.4402e+02  5.43e+02  4.35e-01  5.35e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2965e-01  +5.9609e+01  5.91e+01  1.61e-01  2.51e+01  1.68e-02  2.70e-01  9.58e-01  
  3  +5.0794e-01  +1.5309e+01  1.48e+01  1.02e-01  1.60e+01  4.67e-05  2.43e-01  3.60e-01  
  4  +5.0096e-01  +1.9754e+00  1.47e+00  1.46e-02  2.40e+00  9.21e-06  1.34e-01  6.75e-01  
  5  +5.0021e-01  +1.1669e+00  6.67e-01  6.36e-03  1.06e+00  1.34e-05  5.28e-02  7.98e-01  
  6  +4.9612e-01  +1.2124e+00  7.16e-01  1.15e-03  1.97e-01  1.77e-04  3.12e-03  9.90e-01  
  7  +4.8895e-01  +1.1054e+00  6.16e-01  5.03e-04  8.66e-02  2.95e-04  1.35e-03  5.92e-01  
  8  +4.8038e-01  +1.0058e+00  5.25e-01  3.11e-04  5.35e-02  2.92e-04  8.46e-04  4.72e-01  
  9  +4.7270e-01  +9.2414e-01  4.51e-01  2.45e-04  4.19e-02  2.17e-04  6.79e-04  3.19e-01  
 10  +4.5583e-01  +7.3967e-01  2.84e-01  1.48e-04  2.52e-02  2.13e-06  4.35e-04  8.69e-01  
 11  +4.2115e-01  +5.5736e-01  1.36e-01  6.02e-05  1.02e-02  2.47e-06  1.96e-04  6.03e-01  
 12  +4.0858e-01  +5.0245e-01  9.39e-02  4.03e-05  6.79e-03  3.20e-06  1.38e-04  4.18e-01  
 13  +3.9783e-01  +4.5606e-01  5.82e-02  2.44e-05  4.10e-03  2.65e-06  8.82e-05  4.65e-01  
 14  +3.8538e-01  +4.0287e-01  1.75e-02  7.12e-06  1.20e-03  1.55e-06  2.77e-05  9.06e-01  
 15  +3.8013e-01  +3.8195e-01  1.82e-03  7.37e-07  1.24e-04  1.59e-07  2.99e-06  9.03e-01  
 16  +3.7951e-01  +3.7953e-01  2.30e-05  9.30e-09  1.57e-06  1.99e-09  3.80e-08  9.87e-01  
 17  +3.7950e-01  +3.7950e-01  2.30e-07  9.30e-11  1.57e-08  2.00e-11  3.81e-10  9.90e-01  
 18  +3.7950e-01  +3.7950e-01  2.30e-09  9.31e-13  1.57e-10  2.00e-13  3.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 116.6146ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:53 PM: Optimal value: 3.795e-01
(CVXPY) Oct 06 04:17:53 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:17:53 PM: Solver (including time spent in interface) took 1.249e-01 seconds
Iteration: 23, Objective: 0.3795
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:53 PM: Your problem has 2721 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:53 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2721
  constraints   = 5221
  nnz(P)        = 0
  nnz(A)        = 42030
  cones (total) = 1
    : Nonnegative = 1,  numel = 5221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.36e+01  1.00e+00  1.00e+00   ------   
  1  +5.7834e-01  +5.4401e+02  5.43e+02  4.35e-01  5.34e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2963e-01  +5.9594e+01  5.91e+01  1.61e-01  2.51e+01  1.68e-02  2.70e-01  9.58e-01  
  3  +5.0793e-01  +1.5304e+01  1.48e+01  1.02e-01  1.60e+01  4.67e-05  2.43e-01  3.60e-01  
  4  +5.0096e-01  +1.9752e+00  1.47e+00  1.46e-02  2.40e+00  9.22e-06  1.34e-01  6.75e-01  
  5  +5.0021e-01  +1.1662e+00  6.66e-01  6.35e-03  1.06e+00  1.35e-05  5.25e-02  8.01e-01  
  6  +4.9633e-01  +1.1954e+00  6.99e-01  1.18e-03  2.04e-01  1.67e-04  3.24e-03  9.83e-01  
  7  +4.8851e-01  +1.0837e+00  5.95e-01  4.72e-04  8.14e-02  3.05e-04  1.27e-03  6.32e-01  
  8  +4.7948e-01  +9.8856e-01  5.09e-01  2.93e-04  5.04e-02  3.02e-04  7.99e-04  4.70e-01  
  9  +4.7270e-01  +9.1565e-01  4.43e-01  2.40e-04  4.12e-02  2.17e-04  6.67e-04  3.01e-01  
 10  +4.5376e-01  +7.2914e-01  2.75e-01  1.40e-04  2.38e-02  2.18e-06  4.13e-04  8.84e-01  
 11  +4.2136e-01  +5.5926e-01  1.38e-01  6.13e-05  1.04e-02  2.35e-06  2.00e-04  5.67e-01  
 12  +4.0850e-01  +5.0256e-01  9.41e-02  4.04e-05  6.81e-03  3.80e-06  1.39e-04  4.81e-01  
 13  +3.9654e-01  +4.5070e-01  5.42e-02  2.26e-05  3.81e-03  2.70e-06  8.26e-05  4.97e-01  
 14  +3.8331e-01  +3.9424e-01  1.09e-02  4.44e-06  7.47e-04  1.12e-06  1.75e-05  9.90e-01  
 15  +3.7974e-01  +3.8043e-01  6.86e-04  2.77e-07  4.67e-05  6.86e-08  1.13e-06  9.48e-01  
 16  +3.7950e-01  +3.7951e-01  7.28e-06  2.94e-09  4.95e-07  7.27e-10  1.20e-08  9.89e-01  
 17  +3.7950e-01  +3.7950e-01  7.29e-08  2.94e-11  4.96e-09  7.27e-12  1.20e-10  9.90e-01  
 18  +3.7950e-01  +3.7950e-01  7.29e-10  2.94e-13  4.96e-11  7.28e-14  1.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.71ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:54 PM: Optimal value: 3.795e-01
(CVXPY) Oct 06 04:17:54 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:17:54 PM: Solver (including time spent in interface) took 1.253e-01 seconds
Iteration: 24, Objective: 0.3795
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:17:54 PM: Your problem has 2722 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:17:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:17:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:17:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:17:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:17:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:17:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:17:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:17:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:17:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:17:54 PM: Finished problem compilation (took 3.160e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2722
  constraints   = 5222
  nnz(P)        = 0
  nnz(A)        = 42052
  cones (total) = 1
    : Nonnegative = 1,  numel = 5222

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.36e+01  1.00e+00  1.00e+00   ------   
  1  +5.7836e-01  +5.4399e+02  5.43e+02  4.35e-01  5.34e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2963e-01  +5.9585e+01  5.91e+01  1.61e-01  2.51e+01  1.68e-02  2.70e-01  9.58e-01  
  3  +5.0793e-01  +1.5301e+01  1.48e+01  1.02e-01  1.60e+01  4.67e-05  2.43e-01  3.60e-01  
  4  +5.0097e-01  +1.9840e+00  1.48e+00  1.47e-02  2.41e+00  9.24e-06  1.34e-01  6.72e-01  
  5  +5.0021e-01  +1.1655e+00  6.65e-01  6.35e-03  1.06e+00  1.34e-05  5.28e-02  8.01e-01  
  6  +4.9640e-01  +1.1953e+00  6.99e-01  1.21e-03  2.08e-01  1.64e-04  3.32e-03  9.82e-01  
  7  +4.8846e-01  +1.0817e+00  5.93e-01  4.71e-04  8.11e-02  3.06e-04  1.27e-03  6.43e-01  
  8  +4.7953e-01  +9.8812e-01  5.09e-01  2.94e-04  5.05e-02  3.02e-04  7.99e-04  4.69e-01  
  9  +4.7278e-01  +9.1545e-01  4.43e-01  2.41e-04  4.12e-02  2.17e-04  6.68e-04  3.02e-01  
 10  +4.5361e-01  +7.2810e-01  2.74e-01  1.39e-04  2.37e-02  2.18e-06  4.11e-04  8.86e-01  
 11  +4.2132e-01  +5.5906e-01  1.38e-01  6.13e-05  1.03e-02  2.38e-06  2.00e-04  5.66e-01  
 12  +4.0846e-01  +5.0237e-01  9.39e-02  4.04e-05  6.80e-03  3.76e-06  1.39e-04  4.78e-01  
 13  +3.9637e-01  +4.4995e-01  5.36e-02  2.24e-05  3.77e-03  2.66e-06  8.17e-05  5.02e-01  
 14  +3.8325e-01  +3.9402e-01  1.08e-02  4.37e-06  7.36e-04  1.10e-06  1.72e-05  9.90e-01  
 15  +3.7973e-01  +3.8037e-01  6.40e-04  2.59e-07  4.36e-05  6.41e-08  1.05e-06  9.57e-01  
 16  +3.7950e-01  +3.7951e-01  6.76e-06  2.73e-09  4.60e-07  6.75e-10  1.12e-08  9.90e-01  
 17  +3.7950e-01  +3.7950e-01  6.76e-08  2.73e-11  4.60e-09  6.76e-12  1.12e-10  9.90e-01  
 18  +3.7950e-01  +3.7950e-01  6.76e-10  2.73e-13  4.60e-11  6.77e-14  1.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 120.5036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:17:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:17:54 PM: Optimal value: 3.795e-01
(CVXPY) Oct 06 04:17:54 PM: Compilation took 3.160e-02 seconds
(CVXPY) Oct 06 04:17:54 PM: Solver (including time spent in interface) took 1.250e-01 seconds
FULL MODEL:
  Accruacy: 0.5986
  Our objective: 0.1972

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.1452)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.0052)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0048)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.002)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 17.199108123779297
Best over terms:
  Our final objective: 0.1452
    Its accruacy: 0.5726
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1452
  Highest accruacy: 0.5726
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

