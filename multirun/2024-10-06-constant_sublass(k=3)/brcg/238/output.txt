Command:
python test_script.py -s constant_subclass -d 6 -n 50000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15380000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 6.

Computed total variation: 0.15452
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:00:17 PM: Your problem has 25013 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:00:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:00:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:00:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:00:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:00:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:00:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:00:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:00:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:00:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:00:17 PM: Finished problem compilation (took 2.060e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25013
  constraints   = 50013
  nnz(P)        = 0
  nnz(A)        = 225013
  cones (total) = 1
    : Nonnegative = 1,  numel = 50013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.9317e-01  +5.1431e+03  5.14e+03  3.90e-01  1.36e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4210e-01  +6.8128e+02  6.81e+02  1.56e-01  6.86e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7215e+02  1.72e+02  1.40e-01  6.16e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0079e-01  +1.0489e+01  9.99e+00  2.90e-02  1.25e+01  3.47e-06  1.91e-01  4.76e-01  
  5  +4.9999e-01  +1.0386e+00  5.39e-01  1.63e-03  7.25e-01  2.99e-05  1.69e-01  6.63e-01  
  6  +4.9999e-01  +6.2041e-01  1.20e-01  3.61e-04  1.61e-01  1.40e-05  2.72e-02  8.52e-01  
  7  +4.9884e-01  +9.5419e-01  4.55e-01  5.13e-04  2.30e-01  7.18e-04  1.87e-03  9.76e-01  
  8  +4.8173e-01  +8.6430e-01  3.83e-01  3.29e-05  1.48e-02  1.00e-02  1.05e-04  9.46e-01  
  9  +4.7654e-01  +6.1109e-01  1.35e-01  8.08e-06  3.62e-03  2.92e-03  2.54e-05  9.17e-01  
 10  +4.6037e-01  +4.8389e-01  2.35e-02  1.21e-06  5.43e-04  1.30e-04  4.11e-06  8.87e-01  
 11  +4.5423e-01  +4.5680e-01  2.57e-03  1.13e-07  5.08e-05  7.06e-06  4.53e-07  9.37e-01  
 12  +4.5327e-01  +4.5331e-01  3.48e-05  1.46e-09  6.51e-07  8.35e-08  6.16e-09  9.88e-01  
 13  +4.5326e-01  +4.5326e-01  3.48e-07  1.45e-11  6.51e-09  8.35e-10  6.16e-11  9.90e-01  
 14  +4.5326e-01  +4.5326e-01  3.51e-09  1.47e-13  6.57e-11  1.20e-11  8.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 468.7443ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:00:18 PM: Optimal value: 4.533e-01
(CVXPY) Oct 06 04:00:18 PM: Compilation took 2.060e-01 seconds
(CVXPY) Oct 06 04:00:18 PM: Solver (including time spent in interface) took 5.197e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4533
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:00:18 PM: Your problem has 25023 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:00:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:00:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:00:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:00:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:00:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:00:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:00:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:00:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:00:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:00:18 PM: Finished problem compilation (took 1.865e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25023
  constraints   = 50023
  nnz(P)        = 0
  nnz(A)        = 269023
  cones (total) = 1
    : Nonnegative = 1,  numel = 50023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.34e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1432e+03  5.14e+03  3.90e-01  1.42e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8090e+02  6.80e+02  1.56e-01  7.19e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1083e-01  +1.7193e+02  1.71e+02  1.40e-01  6.45e+01  2.95e-05  2.40e-01  1.13e-01  
  4  +5.0078e-01  +1.0266e+01  9.77e+00  2.84e-02  1.29e+01  3.50e-06  1.90e-01  4.89e-01  
  5  +5.0002e-01  +1.4343e+00  9.34e-01  2.83e-03  1.32e+00  3.25e-05  1.71e-01  5.11e-01  
  6  +5.0000e-01  +7.7637e-01  2.76e-01  8.27e-04  3.87e-01  1.07e-05  5.27e-02  7.85e-01  
  7  +4.9999e-01  +7.7563e-01  2.76e-01  8.23e-04  3.85e-01  1.92e-05  2.05e-02  7.24e-01  
  8  +4.9929e-01  +6.9809e-01  1.99e-01  1.71e-04  8.07e-02  4.36e-04  5.26e-04  9.90e-01  
  9  +4.9709e-01  +6.9245e-01  1.95e-01  4.73e-05  2.23e-02  1.63e-03  1.34e-04  7.56e-01  
 10  +4.9630e-01  +6.8978e-01  1.93e-01  3.13e-05  1.48e-02  1.90e-03  8.65e-05  5.63e-01  
 11  +4.9389e-01  +6.8270e-01  1.89e-01  1.93e-05  9.11e-03  2.84e-03  5.29e-05  4.12e-01  
 12  +4.9262e-01  +6.7827e-01  1.86e-01  1.58e-05  7.48e-03  3.10e-03  4.32e-05  2.41e-01  
 13  +4.9413e-01  +6.7586e-01  1.82e-01  1.20e-05  5.68e-03  8.42e-04  3.22e-05  9.55e-01  
 14  +4.9397e-01  +6.7354e-01  1.80e-01  1.15e-05  5.46e-03  5.86e-04  3.11e-05  3.13e-01  
 15  +4.8342e-01  +6.3270e-01  1.49e-01  5.46e-06  2.58e-03  6.97e-04  1.48e-05  6.60e-01  
 16  +4.7934e-01  +6.1605e-01  1.37e-01  5.18e-06  2.45e-03  5.31e-04  1.48e-05  6.54e-02  
 17  +4.7750e-01  +6.1051e-01  1.33e-01  5.06e-06  2.39e-03  4.46e-04  1.44e-05  1.37e-01  
 18  +4.5624e-01  +5.2729e-01  7.11e-02  2.67e-06  1.25e-03  9.06e-05  7.93e-06  6.26e-01  
 19  +4.4528e-01  +4.9670e-01  5.14e-02  1.74e-06  8.16e-04  4.64e-05  5.21e-06  5.39e-01  
 20  +4.2578e-01  +4.3133e-01  5.56e-03  1.77e-07  8.29e-05  1.96e-06  5.57e-07  9.21e-01  
 21  +4.2323e-01  +4.2330e-01  6.53e-05  2.06e-09  9.66e-07  2.11e-08  6.54e-09  9.89e-01  
 22  +4.2320e-01  +4.2320e-01  6.53e-07  2.06e-11  9.66e-09  2.11e-10  6.54e-11  9.90e-01  
 23  +4.2320e-01  +4.2320e-01  6.53e-09  2.06e-13  9.67e-11  2.17e-12  6.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 866.2328ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:00:19 PM: Optimal value: 4.232e-01
(CVXPY) Oct 06 04:00:19 PM: Compilation took 1.865e-01 seconds
(CVXPY) Oct 06 04:00:19 PM: Solver (including time spent in interface) took 9.232e-01 seconds
Iteration: 2, Objective: 0.4232
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:00:19 PM: Your problem has 25025 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:00:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:00:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:00:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:00:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:00:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:00:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:00:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:00:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:00:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:00:19 PM: Finished problem compilation (took 1.903e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25025
  constraints   = 50025
  nnz(P)        = 0
  nnz(A)        = 270200
  cones (total) = 1
    : Nonnegative = 1,  numel = 50025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.34e+02  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +5.1433e+03  5.14e+03  3.90e-01  1.42e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4205e-01  +6.8079e+02  6.80e+02  1.56e-01  7.19e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1083e-01  +1.7191e+02  1.71e+02  1.40e-01  6.45e+01  2.95e-05  2.40e-01  1.13e-01  
  4  +5.0078e-01  +1.0267e+01  9.77e+00  2.84e-02  1.29e+01  3.50e-06  1.89e-01  4.89e-01  
  5  +5.0002e-01  +1.4413e+00  9.41e-01  2.85e-03  1.33e+00  3.25e-05  1.71e-01  5.09e-01  
  6  +5.0000e-01  +7.8094e-01  2.81e-01  8.41e-04  3.94e-01  1.11e-05  5.36e-02  7.56e-01  
  7  +4.9999e-01  +7.7894e-01  2.79e-01  8.32e-04  3.90e-01  2.19e-05  1.85e-02  7.74e-01  
  8  +4.9998e-01  +7.8354e-01  2.84e-01  8.25e-04  3.87e-01  2.75e-05  9.69e-03  7.24e-01  
  9  +4.9832e-01  +7.4979e-01  2.51e-01  7.52e-05  3.56e-02  1.01e-03  2.11e-04  9.79e-01  
 10  +4.9383e-01  +7.3342e-01  2.40e-01  2.19e-05  1.04e-02  3.19e-03  6.01e-05  7.27e-01  
 11  +4.9181e-01  +7.0455e-01  2.13e-01  1.32e-05  6.26e-03  2.99e-03  3.60e-05  6.44e-01  
 12  +4.8651e-01  +6.7085e-01  1.84e-01  8.54e-06  4.04e-03  2.54e-03  2.33e-05  5.46e-01  
 13  +4.8468e-01  +6.5810e-01  1.73e-01  7.91e-06  3.74e-03  1.89e-03  2.17e-05  2.31e-01  
 14  +4.8255e-01  +6.4762e-01  1.65e-01  7.24e-06  3.42e-03  1.53e-03  1.99e-05  2.10e-01  
 15  +4.7808e-01  +6.2316e-01  1.45e-01  6.38e-06  3.01e-03  5.31e-04  1.81e-05  4.93e-01  
 16  +4.6760e-01  +5.7414e-01  1.07e-01  4.54e-06  2.14e-03  5.38e-06  1.32e-05  8.05e-01  
 17  +4.5264e-01  +5.2405e-01  7.14e-02  2.59e-06  1.22e-03  3.14e-06  7.71e-06  5.29e-01  
 18  +4.3023e-01  +4.4688e-01  1.66e-02  5.46e-07  2.56e-04  4.59e-07  1.71e-06  8.30e-01  
 19  +4.2369e-01  +4.2528e-01  1.60e-03  5.12e-08  2.40e-05  2.73e-08  1.64e-07  9.82e-01  
 20  +4.2367e-01  +4.2523e-01  1.56e-03  4.97e-08  2.33e-05  2.68e-08  1.59e-07  6.68e-02  
 21  +4.2366e-01  +4.2519e-01  1.53e-03  4.92e-08  2.31e-05  2.57e-08  1.59e-07  2.51e-02  
 22  +4.2364e-01  +4.2512e-01  1.49e-03  4.78e-08  2.24e-05  2.48e-08  1.53e-07  2.18e-01  
 23  +4.2341e-01  +4.2441e-01  9.98e-04  3.18e-08  1.49e-05  1.67e-08  1.02e-07  4.38e-01  
 24  +4.2302e-01  +4.2320e-01  1.76e-04  5.61e-09  2.63e-06  2.77e-09  1.80e-08  9.90e-01  
 25  +4.2294e-01  +4.2294e-01  1.86e-06  5.91e-11  2.78e-08  2.92e-11  1.90e-10  9.90e-01  
 26  +4.2294e-01  +4.2294e-01  1.86e-08  5.91e-13  2.78e-10  2.92e-13  1.90e-12  9.90e-01  
 27  +4.2294e-01  +4.2294e-01  1.86e-10  5.89e-15  2.78e-12  3.01e-15  1.96e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0771505s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:00:20 PM: Optimal value: 4.229e-01
(CVXPY) Oct 06 04:00:20 PM: Compilation took 1.903e-01 seconds
(CVXPY) Oct 06 04:00:20 PM: Solver (including time spent in interface) took 1.135e+00 seconds
FULL MODEL:
  Accruacy: 0.57726
  Our objective: 0.15451999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.1538)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.00072)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.13010287284851
Best over terms:
  Our final objective: 0.15380000000000002
    Its accruacy: 0.5769
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15380000000000002
  Highest accruacy: 0.5769
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

