Command:
python test_script.py -s constant_subclass -d 10 -n 10 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 10.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:13 PM: Your problem has 26 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:13 PM: Finished problem compilation (took 4.697e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 26
  constraints   = 31
  nnz(P)        = 0
  nnz(A)        = 86
  cones (total) = 1
    : Nonnegative = 1,  numel = 31

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6052e-01  +6.1445e+00  5.68e+00  7.75e-01  2.71e+00  1.00e+00  1.27e+00   ------   
  1  +4.4145e-01  +1.2572e+00  8.16e-01  3.15e-01  1.25e+00  3.49e-03  6.30e-01  6.99e-01  
  2  +2.9734e-01  +4.8439e-01  1.87e-01  7.77e-02  3.42e-01  1.02e-02  2.25e-01  7.79e-01  
  3  +2.1608e-01  +2.7984e-01  6.38e-02  1.71e-02  8.93e-02  4.53e-03  7.04e-02  9.08e-01  
  4  +2.0056e-01  +2.0206e-01  1.50e-03  4.14e-04  2.15e-03  1.07e-04  1.82e-03  9.75e-01  
  5  +2.0020e-01  +2.0022e-01  1.49e-05  4.15e-06  2.15e-05  1.07e-06  1.82e-05  9.90e-01  
  6  +2.0020e-01  +2.0020e-01  1.49e-07  4.15e-08  2.15e-07  1.07e-08  1.82e-07  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  1.49e-09  4.15e-10  2.15e-09  1.07e-10  1.82e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 270.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:13 PM: Optimal value: 2.002e-01
(CVXPY) Oct 06 04:22:13 PM: Compilation took 4.697e-02 seconds
(CVXPY) Oct 06 04:22:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:13 PM: Your problem has 36 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 41
  nnz(P)        = 0
  nnz(A)        = 118
  cones (total) = 1
    : Nonnegative = 1,  numel = 41

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.8498e-01  +6.6344e+00  6.25e+00  8.04e-01  2.83e+00  1.00e+00  1.36e+00   ------   
  1  +2.0506e-01  +1.1009e+00  8.96e-01  3.18e-01  1.18e+00  3.81e-03  6.07e-01  7.18e-01  
  2  +4.6602e-02  +3.5969e-01  3.13e-01  1.05e-01  4.33e-01  1.29e-02  2.86e-01  6.81e-01  
  3  +1.6269e-02  +8.3135e-02  6.69e-02  2.02e-02  9.38e-02  4.84e-03  6.90e-02  8.10e-01  
  4  +5.2543e-04  +2.3756e-03  1.85e-03  5.40e-04  2.66e-03  7.57e-05  2.00e-03  9.87e-01  
  5  +2.2358e-04  +2.8379e-04  6.02e-05  1.90e-05  9.04e-05  7.32e-07  7.06e-05  9.65e-01  
  6  +2.0058e-04  +2.0216e-04  1.58e-06  5.63e-07  2.43e-06  5.08e-08  2.31e-06  9.75e-01  
  7  +2.0001e-04  +2.0002e-04  1.57e-08  5.62e-09  2.43e-08  5.06e-10  2.32e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  1.57e-10  5.62e-11  2.43e-10  5.06e-12  2.32e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 238.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:13 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:22:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:13 PM: Your problem has 44 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 49
  nnz(P)        = 0
  nnz(A)        = 149
  cones (total) = 1
    : Nonnegative = 1,  numel = 49

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3444e-01  +6.5082e+00  6.17e+00  8.21e-01  2.99e+00  1.00e+00  1.33e+00   ------   
  1  +1.0375e-01  +1.0273e+00  9.24e-01  3.48e-01  1.23e+00  4.01e-03  5.91e-01  7.01e-01  
  2  +9.0631e-03  +2.1727e-01  2.08e-01  8.19e-02  3.60e-01  9.95e-03  2.11e-01  7.56e-01  
  3  +1.3905e-03  +2.1905e-02  2.05e-02  8.26e-03  3.82e-02  1.36e-03  2.49e-02  9.00e-01  
  4  +2.5178e-04  +5.5587e-04  3.04e-04  1.25e-04  5.77e-04  1.80e-05  3.83e-04  9.85e-01  
  5  +2.3166e-04  +3.0480e-04  7.31e-05  3.41e-05  1.43e-04  3.60e-06  1.05e-04  7.49e-01  
  6  +2.0321e-04  +2.1861e-04  1.54e-05  6.15e-06  2.72e-05  6.10e-07  2.56e-05  9.90e-01  
  7  +2.0008e-04  +2.0030e-04  2.26e-07  8.90e-08  3.96e-07  8.05e-09  3.85e-07  9.85e-01  
  8  +2.0000e-04  +2.0000e-04  2.26e-09  8.89e-10  3.95e-09  8.05e-11  3.85e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 345.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:13 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:22:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:13 PM: Your problem has 45 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 45
  constraints   = 50
  nnz(P)        = 0
  nnz(A)        = 152
  cones (total) = 1
    : Nonnegative = 1,  numel = 50

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.1740e-01  +6.4272e+00  6.11e+00  8.23e-01  2.98e+00  1.00e+00  1.31e+00   ------   
  1  +6.6798e-02  +9.8728e-01  9.20e-01  3.50e-01  1.21e+00  4.10e-03  5.75e-01  7.00e-01  
  2  +1.6807e-03  +1.6428e-01  1.63e-01  7.22e-02  3.01e-01  9.92e-03  1.76e-01  8.22e-01  
  3  +6.3078e-04  +9.5073e-03  8.88e-03  4.06e-03  1.74e-02  7.81e-04  1.12e-02  9.47e-01  
  4  +2.2657e-04  +3.7158e-04  1.45e-04  6.91e-05  2.93e-04  9.25e-06  1.92e-04  9.83e-01  
  5  +2.0785e-04  +2.3041e-04  2.26e-05  1.23e-05  4.69e-05  1.07e-06  3.62e-05  8.51e-01  
  6  +2.0011e-04  +2.0053e-04  4.21e-07  2.21e-07  8.59e-07  1.68e-08  7.20e-07  9.90e-01  
  7  +2.0000e-04  +2.0001e-04  4.21e-09  2.21e-09  8.58e-09  1.68e-10  7.20e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 243.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:13 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:22:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x2 = 0 AND x7 = 1) <-- (term's our objective: 0.6)
 OR (x0 = 1 AND x2 = 1 AND x8 = 1) <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.160520315170288
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

