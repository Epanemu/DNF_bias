Command:
python test_script.py -s constant_subclass -d 9 -n 50 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 9.

Computed total variation: 0.96
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:59 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:59 PM: Finished problem compilation (took 4.690e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8988e-01  +2.6699e+01  2.62e+01  8.38e-01  6.98e+00  1.00e+00  1.10e+00   ------   
  1  +5.5532e-01  +5.7945e+00  5.24e+00  3.63e-01  4.05e+00  3.69e-03  6.21e-01  6.06e-01  
  2  +4.4608e-01  +1.2252e+00  7.79e-01  7.87e-02  1.08e+00  2.15e-02  2.17e-01  9.90e-01  
  3  +3.9348e-01  +6.5270e-01  2.59e-01  2.00e-02  2.80e-01  6.62e-03  6.96e-02  7.66e-01  
  4  +3.7212e-01  +4.9922e-01  1.27e-01  8.34e-03  1.16e-01  2.74e-03  3.36e-02  6.36e-01  
  5  +3.5126e-01  +3.9821e-01  4.70e-02  2.28e-03  3.24e-02  9.44e-04  1.17e-02  7.29e-01  
  6  +3.4050e-01  +3.4196e-01  1.45e-03  6.91e-05  9.80e-04  1.23e-05  3.85e-04  9.83e-01  
  7  +3.4010e-01  +3.4012e-01  1.46e-05  6.92e-07  9.81e-06  1.23e-07  3.87e-06  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  1.46e-07  6.92e-09  9.80e-08  1.23e-09  3.87e-08  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  1.46e-09  6.92e-11  9.80e-10  1.23e-11  3.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 613.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:59 PM: Optimal value: 3.401e-01
(CVXPY) Oct 06 04:13:59 PM: Compilation took 4.690e-02 seconds
(CVXPY) Oct 06 04:13:59 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:59 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:59 PM: Finished problem compilation (took 9.413e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 394
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7095e-01  +2.7023e+01  2.66e+01  8.49e-01  7.09e+00  1.00e+00  1.12e+00   ------   
  1  +4.7564e-01  +5.8044e+00  5.33e+00  3.67e-01  3.93e+00  3.80e-03  6.11e-01  6.10e-01  
  2  +3.3536e-01  +1.2307e+00  8.95e-01  7.22e-02  9.64e-01  2.29e-02  1.86e-01  9.75e-01  
  3  +2.5206e-01  +6.5322e-01  4.01e-01  2.10e-02  2.92e-01  1.41e-02  6.47e-02  7.26e-01  
  4  +1.9606e-01  +3.3970e-01  1.44e-01  6.49e-03  9.03e-02  4.59e-03  2.28e-02  7.02e-01  
  5  +1.6677e-01  +1.8924e-01  2.25e-02  1.01e-03  1.40e-02  4.76e-04  3.82e-03  8.99e-01  
  6  +1.6051e-01  +1.6094e-01  4.37e-04  1.99e-05  2.74e-04  4.74e-06  7.68e-05  9.87e-01  
  7  +1.6036e-01  +1.6039e-01  2.56e-05  1.22e-06  1.64e-05  1.10e-07  5.35e-06  9.32e-01  
  8  +1.6035e-01  +1.6035e-01  2.80e-07  1.35e-08  1.80e-07  1.34e-09  6.09e-08  9.89e-01  
  9  +1.6035e-01  +1.6035e-01  2.80e-09  1.35e-10  1.80e-09  1.34e-11  6.09e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 556.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:59 PM: Optimal value: 1.604e-01
(CVXPY) Oct 06 04:13:59 PM: Compilation took 9.413e-04 seconds
(CVXPY) Oct 06 04:13:59 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:59 PM: Your problem has 64 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:59 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 64
  constraints   = 89
  nnz(P)        = 0
  nnz(A)        = 438
  cones (total) = 1
    : Nonnegative = 1,  numel = 89

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6186e-01  +2.7427e+01  2.70e+01  8.57e-01  6.88e+00  1.00e+00  1.13e+00   ------   
  1  +4.1879e-01  +5.8028e+00  5.38e+00  3.65e-01  3.68e+00  3.88e-03  6.05e-01  6.17e-01  
  2  +2.1141e-01  +1.7533e+00  1.54e+00  9.39e-02  1.16e+00  2.08e-02  2.38e-01  7.92e-01  
  3  +1.5365e-01  +5.0463e-01  3.51e-01  2.04e-02  2.63e-01  8.46e-03  6.24e-02  8.84e-01  
  4  +1.1364e-01  +2.3014e-01  1.16e-01  6.54e-03  8.47e-02  2.53e-03  2.20e-02  7.17e-01  
  5  +9.7830e-02  +1.6943e-01  7.16e-02  3.55e-03  4.86e-02  1.29e-03  1.24e-02  6.46e-01  
  6  +8.2652e-02  +9.1293e-02  8.64e-03  4.18e-04  5.72e-03  1.49e-04  1.53e-03  8.78e-01  
  7  +8.0627e-02  +8.0859e-02  2.32e-04  1.15e-05  1.56e-04  1.52e-06  4.33e-05  9.72e-01  
  8  +8.0553e-02  +8.0561e-02  7.87e-06  4.21e-07  5.43e-06  6.34e-08  1.79e-06  9.63e-01  
  9  +8.0550e-02  +8.0550e-02  7.88e-08  4.22e-09  5.44e-08  6.35e-10  1.80e-08  9.90e-01  
 10  +8.0550e-02  +8.0550e-02  7.88e-10  4.22e-11  5.44e-10  6.35e-12  1.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 663.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:59 PM: Optimal value: 8.055e-02
(CVXPY) Oct 06 04:13:59 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:13:59 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 3, Objective: 0.0806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:59 PM: Your problem has 74 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:59 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 74
  constraints   = 99
  nnz(P)        = 0
  nnz(A)        = 483
  cones (total) = 1
    : Nonnegative = 1,  numel = 99

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5789e-01  +2.7478e+01  2.70e+01  8.64e-01  6.70e+00  1.00e+00  1.13e+00   ------   
  1  +3.8424e-01  +5.9487e+00  5.56e+00  3.78e-01  3.58e+00  3.96e-03  6.10e-01  6.03e-01  
  2  +1.1888e-01  +2.1010e+00  1.98e+00  1.12e-01  1.30e+00  2.34e-02  2.68e-01  7.42e-01  
  3  +1.1741e-01  +4.4547e-01  3.28e-01  2.18e-02  2.66e-01  9.26e-03  6.34e-02  8.07e-01  
  4  +8.8018e-02  +2.1406e-01  1.26e-01  8.19e-03  9.97e-02  3.00e-03  2.60e-02  7.06e-01  
  5  +7.6203e-02  +1.6125e-01  8.50e-02  4.84e-03  6.29e-02  1.70e-03  1.60e-02  5.92e-01  
  6  +6.1410e-02  +6.5508e-02  4.10e-03  2.29e-04  2.97e-03  6.73e-05  7.97e-04  9.56e-01  
  7  +6.0693e-02  +6.1039e-02  3.46e-04  2.03e-05  2.55e-04  3.42e-06  7.35e-05  9.09e-01  
  8  +6.0616e-02  +6.0663e-02  4.69e-05  2.87e-06  3.48e-05  3.78e-07  1.20e-05  9.26e-01  
  9  +6.0600e-02  +6.0601e-02  7.88e-07  4.80e-08  5.81e-07  5.74e-09  2.07e-07  9.90e-01  
 10  +6.0600e-02  +6.0600e-02  7.88e-09  4.80e-10  5.81e-09  5.74e-11  2.07e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 772.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:59 PM: Optimal value: 6.060e-02
(CVXPY) Oct 06 04:13:59 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:13:59 PM: Solver (including time spent in interface) took 1.489e-02 seconds
Iteration: 4, Objective: 0.0606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:59 PM: Your problem has 80 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:59 PM: Finished problem compilation (took 1.569e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 80
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 501
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5061e-01  +2.7569e+01  2.71e+01  8.68e-01  6.57e+00  1.00e+00  1.13e+00   ------   
  1  +3.2394e-01  +6.1249e+00  5.80e+00  3.79e-01  3.47e+00  4.16e-03  6.05e-01  5.90e-01  
  2  +6.6060e-02  +2.2845e+00  2.22e+00  1.26e-01  1.38e+00  2.49e-02  2.90e-01  7.11e-01  
  3  +9.7343e-02  +3.8331e-01  2.86e-01  2.18e-02  2.48e-01  1.09e-02  6.06e-02  8.62e-01  
  4  +6.8138e-02  +2.0703e-01  1.39e-01  9.60e-03  1.13e-01  4.87e-03  2.90e-02  6.46e-01  
  5  +5.8777e-02  +1.6609e-01  1.07e-01  6.49e-03  8.17e-02  3.42e-03  2.06e-02  4.40e-01  
  6  +4.2070e-02  +4.9054e-02  6.98e-03  4.15e-04  5.22e-03  1.37e-04  1.40e-03  9.60e-01  
  7  +4.0808e-02  +4.1221e-02  4.13e-04  2.56e-05  3.15e-04  4.80e-06  8.84e-05  9.37e-01  
  8  +4.0720e-02  +4.0784e-02  6.42e-05  4.23e-06  4.96e-05  5.91e-07  1.65e-05  8.81e-01  
  9  +4.0701e-02  +4.0702e-02  1.62e-06  1.06e-07  1.24e-06  1.20e-08  4.35e-07  9.90e-01  
 10  +4.0700e-02  +4.0700e-02  1.62e-08  1.06e-09  1.24e-08  1.20e-10  4.35e-09  9.90e-01  
 11  +4.0700e-02  +4.0700e-02  1.62e-10  1.06e-11  1.24e-10  1.20e-12  4.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 791.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:59 PM: Optimal value: 4.070e-02
(CVXPY) Oct 06 04:13:59 PM: Compilation took 1.569e-02 seconds
(CVXPY) Oct 06 04:13:59 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:00 PM: Your problem has 81 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:00 PM: Finished problem compilation (took 1.560e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 506
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4740e-01  +2.7630e+01  2.72e+01  8.68e-01  6.56e+00  1.00e+00  1.14e+00   ------   
  1  +3.1158e-01  +6.1598e+00  5.85e+00  3.80e-01  3.46e+00  4.18e-03  6.08e-01  5.88e-01  
  2  +5.8959e-02  +2.1050e+00  2.05e+00  1.18e-01  1.29e+00  2.52e-02  2.78e-01  7.43e-01  
  3  +9.0643e-02  +3.9834e-01  3.08e-01  2.38e-02  2.67e-01  1.06e-02  6.59e-02  8.26e-01  
  4  +6.3009e-02  +2.0192e-01  1.39e-01  9.71e-03  1.13e-01  4.42e-03  2.95e-02  6.80e-01  
  5  +4.9512e-02  +1.0976e-01  6.02e-02  3.89e-03  4.68e-02  1.71e-03  1.24e-02  6.64e-01  
  6  +4.0992e-02  +4.2763e-02  1.77e-03  1.14e-04  1.37e-03  3.75e-05  3.80e-04  9.72e-01  
  7  +4.0729e-02  +4.0885e-02  1.56e-04  1.09e-05  1.25e-04  1.70e-06  3.85e-05  9.03e-01  
  8  +4.0702e-02  +4.0715e-02  1.33e-05  9.53e-07  1.07e-05  1.45e-07  3.54e-06  9.18e-01  
  9  +4.0700e-02  +4.0700e-02  1.38e-07  9.92e-09  1.12e-07  1.51e-09  3.70e-08  9.90e-01  
 10  +4.0700e-02  +4.0700e-02  1.38e-09  9.93e-11  1.12e-09  1.51e-11  3.70e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 829.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:00 PM: Optimal value: 4.070e-02
(CVXPY) Oct 06 04:14:00 PM: Compilation took 1.560e-02 seconds
(CVXPY) Oct 06 04:14:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:00 PM: Your problem has 84 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:00 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 525
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4457e-01  +2.7563e+01  2.71e+01  8.70e-01  6.55e+00  1.00e+00  1.13e+00   ------   
  1  +3.0160e-01  +6.2920e+00  5.99e+00  3.90e-01  3.49e+00  4.24e-03  6.12e-01  5.75e-01  
  2  +6.4815e-02  +2.2287e+00  2.16e+00  1.28e-01  1.38e+00  2.56e-02  2.93e-01  7.15e-01  
  3  +9.3780e-02  +4.1977e-01  3.26e-01  2.56e-02  2.89e-01  1.09e-02  7.00e-02  8.25e-01  
  4  +6.2785e-02  +2.0009e-01  1.37e-01  9.86e-03  1.15e-01  3.97e-03  2.96e-02  7.31e-01  
  5  +4.9920e-02  +1.1196e-01  6.20e-02  4.12e-03  4.95e-02  1.58e-03  1.30e-02  6.64e-01  
  6  +4.0974e-02  +4.2563e-02  1.59e-03  1.06e-04  1.26e-03  2.80e-05  3.46e-04  9.76e-01  
  7  +4.0726e-02  +4.0880e-02  1.54e-04  1.11e-05  1.26e-04  1.40e-06  3.92e-05  8.94e-01  
  8  +4.0704e-02  +4.0725e-02  2.13e-05  1.57e-06  1.76e-05  1.86e-07  5.83e-06  9.18e-01  
  9  +4.0700e-02  +4.0700e-02  2.28e-07  1.68e-08  1.88e-07  1.96e-09  6.28e-08  9.89e-01  
 10  +4.0700e-02  +4.0700e-02  2.28e-09  1.68e-10  1.88e-09  1.96e-11  6.28e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 772.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:00 PM: Optimal value: 4.070e-02
(CVXPY) Oct 06 04:14:00 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:14:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.94
  Our objective: 0.88

IF 
    (x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.4)
 OR (x0 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x8 = 1) <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 1 AND x8 = 1) <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 0 AND x8 = 1) <-- (term's our objective: 0.2)
 OR (x1 = 1 AND x2 = 1 AND x4 = 0 AND x6 = 1 AND x8 = 1) <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.295501470565796
Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

