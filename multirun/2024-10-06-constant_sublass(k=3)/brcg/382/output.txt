Command:
python test_script.py -s constant_subclass -d 10 -n 1000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.218
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 10.

Computed total variation: 0.704
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:01 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:01 PM: Finished problem compilation (took 6.288e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 6521
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9996e-01  +5.0105e+02  5.01e+02  9.56e-01  3.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7782e-01  +1.1025e+02  1.10e+02  4.26e-01  2.44e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2751e-01  +1.2133e+01  1.16e+01  1.48e-01  1.08e+01  1.81e-02  2.81e-01  9.80e-01  
  3  +5.0522e-01  +2.9666e+00  2.46e+00  5.22e-02  3.76e+00  4.79e-05  2.26e-01  6.13e-01  
  4  +5.0068e-01  +8.8655e-01  3.86e-01  8.65e-03  6.51e-01  1.43e-05  7.10e-02  7.59e-01  
  5  +4.9401e-01  +1.0125e+00  5.18e-01  3.00e-03  2.33e-01  1.24e-04  8.61e-03  9.38e-01  
  6  +4.7803e-01  +8.0060e-01  3.23e-01  9.76e-04  7.58e-02  1.53e-04  2.84e-03  6.95e-01  
  7  +4.6037e-01  +6.3809e-01  1.78e-01  4.90e-04  3.76e-02  7.46e-05  1.56e-03  5.47e-01  
  8  +4.4604e-01  +5.3472e-01  8.87e-02  2.30e-04  1.76e-02  3.48e-05  7.87e-04  6.52e-01  
  9  +4.3606e-01  +4.6633e-01  3.03e-02  7.71e-05  5.87e-03  1.34e-05  2.80e-04  9.90e-01  
 10  +4.2960e-01  +4.3396e-01  4.36e-03  1.06e-05  8.06e-04  1.86e-06  4.15e-05  8.65e-01  
 11  +4.2820e-01  +4.2855e-01  3.48e-04  7.38e-07  5.63e-05  1.50e-07  3.31e-06  9.55e-01  
 12  +4.2810e-01  +4.2810e-01  3.51e-06  7.41e-09  5.65e-07  1.51e-09  3.34e-08  9.90e-01  
 13  +4.2810e-01  +4.2810e-01  3.51e-08  7.41e-11  5.65e-09  1.51e-11  3.34e-10  9.90e-01  
 14  +4.2810e-01  +4.2810e-01  3.51e-10  7.41e-13  5.65e-11  1.52e-13  3.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.0986ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:01 PM: Optimal value: 4.281e-01
(CVXPY) Oct 06 04:25:01 PM: Compilation took 6.288e-02 seconds
(CVXPY) Oct 06 04:25:01 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:01 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:01 PM: Finished problem compilation (took 6.397e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 7735
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9976e-01  +5.0129e+02  5.01e+02  9.57e-01  3.93e+01  1.00e+00  1.01e+00   ------   
  1  +5.7665e-01  +1.1045e+02  1.10e+02  4.30e-01  2.55e+01  3.75e-03  5.93e-01  5.75e-01  
  2  +5.2588e-01  +1.2084e+01  1.16e+01  1.48e-01  1.12e+01  1.86e-02  2.83e-01  9.90e-01  
  3  +5.0537e-01  +2.7482e+00  2.24e+00  5.05e-02  3.85e+00  5.51e-05  1.86e-01  7.67e-01  
  4  +5.0088e-01  +1.1226e+00  6.22e-01  1.45e-02  1.13e+00  2.76e-05  7.50e-02  6.46e-01  
  5  +4.9269e-01  +9.6816e-01  4.75e-01  3.10e-03  2.57e-01  1.37e-04  8.37e-03  9.30e-01  
  6  +4.7612e-01  +8.1458e-01  3.38e-01  1.16e-03  9.60e-02  1.86e-04  3.14e-03  6.60e-01  
  7  +4.7353e-01  +7.9983e-01  3.26e-01  1.04e-03  8.59e-02  1.75e-04  2.80e-03  2.65e-01  
  8  +4.5944e-01  +7.3060e-01  2.71e-01  6.27e-04  5.17e-02  1.81e-04  1.70e-03  4.61e-01  
  9  +4.4216e-01  +6.5003e-01  2.08e-01  4.23e-04  3.49e-02  1.36e-04  1.17e-03  4.43e-01  
 10  +4.2030e-01  +5.5369e-01  1.33e-01  2.51e-04  2.07e-02  8.11e-05  7.21e-04  5.17e-01  
 11  +3.8845e-01  +4.2051e-01  3.21e-02  5.66e-05  4.69e-03  1.55e-05  1.73e-04  8.13e-01  
 12  +3.8041e-01  +3.9148e-01  1.11e-02  1.90e-05  1.61e-03  6.02e-06  5.85e-05  7.20e-01  
 13  +3.7880e-01  +3.8612e-01  7.32e-03  1.23e-05  1.06e-03  4.20e-06  3.78e-05  4.28e-01  
 14  +3.7602e-01  +3.7649e-01  4.73e-04  7.92e-07  6.83e-05  3.56e-07  2.44e-06  9.90e-01  
 15  +3.7580e-01  +3.7581e-01  4.77e-06  7.99e-09  6.89e-07  3.59e-09  2.47e-08  9.90e-01  
 16  +3.7580e-01  +3.7580e-01  4.77e-08  7.99e-11  6.90e-09  3.59e-11  2.47e-10  9.90e-01  
 17  +3.7580e-01  +3.7580e-01  4.77e-10  7.99e-13  6.90e-11  3.59e-13  2.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.3194ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:01 PM: Optimal value: 3.758e-01
(CVXPY) Oct 06 04:25:01 PM: Compilation took 6.397e-04 seconds
(CVXPY) Oct 06 04:25:01 PM: Solver (including time spent in interface) took 1.590e-02 seconds
Iteration: 2, Objective: 0.3758
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:01 PM: Your problem has 541 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:01 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 1041
  nnz(P)        = 0
  nnz(A)        = 7970
  cones (total) = 1
    : Nonnegative = 1,  numel = 1041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +5.0137e+02  5.01e+02  9.57e-01  3.92e+01  1.00e+00  1.01e+00   ------   
  1  +5.7505e-01  +1.1045e+02  1.10e+02  4.31e-01  2.53e+01  3.75e-03  5.93e-01  5.75e-01  
  2  +5.2472e-01  +1.2256e+01  1.17e+01  1.48e-01  1.11e+01  1.89e-02  2.82e-01  9.90e-01  
  3  +5.0578e-01  +2.3072e+00  1.80e+00  4.17e-02  3.27e+00  6.22e-05  1.31e-01  8.97e-01  
  4  +4.9990e-01  +1.0791e+00  5.79e-01  1.04e-02  8.45e-01  8.16e-05  3.18e-02  8.25e-01  
  5  +4.8853e-01  +1.0096e+00  5.21e-01  2.52e-03  2.11e-01  3.11e-04  6.41e-03  8.11e-01  
  6  +4.8266e-01  +9.6443e-01  4.82e-01  1.99e-03  1.66e-01  3.08e-04  5.08e-03  2.66e-01  
  7  +4.7209e-01  +9.3595e-01  4.64e-01  1.44e-03  1.19e-01  2.30e-04  3.76e-03  8.02e-01  
  8  +4.5315e-01  +8.1811e-01  3.65e-01  8.73e-04  7.18e-02  2.10e-04  2.34e-03  4.62e-01  
  9  +4.1881e-01  +6.3950e-01  2.21e-01  4.60e-04  3.77e-02  1.13e-04  1.30e-03  7.19e-01  
 10  +4.1125e-01  +6.0912e-01  1.98e-01  3.93e-04  3.21e-02  1.07e-04  1.12e-03  2.86e-01  
 11  +3.7535e-01  +4.4421e-01  6.89e-02  1.30e-04  1.06e-02  3.67e-05  3.99e-04  8.87e-01  
 12  +3.5736e-01  +3.7288e-01  1.55e-02  2.85e-05  2.36e-03  8.20e-06  9.20e-05  8.04e-01  
 13  +3.5174e-01  +3.5246e-01  7.26e-04  1.32e-06  1.10e-04  3.88e-07  4.36e-06  9.67e-01  
 14  +3.5147e-01  +3.5151e-01  4.51e-05  8.20e-08  6.83e-06  2.40e-08  2.72e-07  9.41e-01  
 15  +3.5145e-01  +3.5145e-01  4.73e-07  8.60e-10  7.17e-08  2.52e-10  2.86e-09  9.90e-01  
 16  +3.5145e-01  +3.5145e-01  4.73e-09  8.60e-12  7.17e-10  2.52e-12  2.86e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.3597ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:01 PM: Optimal value: 3.515e-01
(CVXPY) Oct 06 04:25:01 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:01 PM: Solver (including time spent in interface) took 1.536e-02 seconds
Iteration: 3, Objective: 0.3515
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:01 PM: Your problem has 551 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:01 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 551
  constraints   = 1051
  nnz(P)        = 0
  nnz(A)        = 8179
  cones (total) = 1
    : Nonnegative = 1,  numel = 1051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0143e+02  5.01e+02  9.57e-01  3.91e+01  1.00e+00  1.01e+00   ------   
  1  +5.7383e-01  +1.1047e+02  1.10e+02  4.32e-01  2.52e+01  3.75e-03  5.93e-01  5.75e-01  
  2  +5.2387e-01  +1.2381e+01  1.19e+01  1.48e-01  1.10e+01  1.90e-02  2.81e-01  9.90e-01  
  3  +5.0607e-01  +2.0612e+00  1.56e+00  3.51e-02  2.80e+00  6.81e-05  1.03e-01  9.30e-01  
  4  +5.0593e-01  +2.0850e+00  1.58e+00  2.46e-02  2.01e+00  1.25e-04  6.23e-02  4.46e-01  
  5  +5.0064e-01  +1.9978e+00  1.50e+00  1.14e-02  9.48e-01  2.43e-04  2.79e-02  9.01e-01  
  6  +4.8808e-01  +1.6158e+00  1.13e+00  3.93e-03  3.29e-01  3.96e-04  9.46e-03  6.67e-01  
  7  +4.7153e-01  +1.3115e+00  8.40e-01  2.35e-03  1.95e-01  3.41e-04  5.84e-03  4.93e-01  
  8  +4.5940e-01  +1.1235e+00  6.64e-01  1.60e-03  1.33e-01  3.08e-04  4.07e-03  5.81e-01  
  9  +4.4327e-01  +9.6182e-01  5.19e-01  1.19e-03  9.79e-02  2.39e-04  3.12e-03  3.91e-01  
 10  +4.0216e-01  +6.2106e-01  2.19e-01  4.80e-04  3.90e-02  9.80e-05  1.37e-03  9.90e-01  
 11  +3.9385e-01  +5.8662e-01  1.93e-01  3.98e-04  3.22e-02  9.06e-05  1.16e-03  2.13e-01  
 12  +3.7584e-01  +5.0142e-01  1.26e-01  2.54e-04  2.06e-02  7.38e-05  7.67e-04  8.20e-01  
 13  +3.4891e-01  +3.8377e-01  3.49e-02  6.83e-05  5.50e-03  1.80e-05  2.21e-04  7.67e-01  
 14  +3.3959e-01  +3.4536e-01  5.76e-03  1.12e-05  9.01e-04  2.91e-06  3.78e-05  8.48e-01  
 15  +3.3790e-01  +3.3870e-01  7.95e-04  1.55e-06  1.24e-04  4.84e-07  5.31e-06  9.90e-01  
 16  +3.3761e-01  +3.3762e-01  1.43e-05  2.78e-08  2.23e-06  8.41e-09  9.60e-08  9.82e-01  
 17  +3.3760e-01  +3.3760e-01  1.43e-07  2.79e-10  2.24e-08  8.42e-11  9.63e-10  9.90e-01  
 18  +3.3760e-01  +3.3760e-01  1.43e-09  2.79e-12  2.24e-10  8.43e-13  9.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.5365ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:01 PM: Optimal value: 3.376e-01
(CVXPY) Oct 06 04:25:01 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:25:01 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 4, Objective: 0.3376
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:01 PM: Your problem has 561 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:01 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 561
  constraints   = 1061
  nnz(P)        = 0
  nnz(A)        = 8452
  cones (total) = 1
    : Nonnegative = 1,  numel = 1061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0160e+02  5.01e+02  9.57e-01  3.90e+01  1.00e+00  1.01e+00   ------   
  1  +5.7193e-01  +1.1057e+02  1.10e+02  4.33e-01  2.50e+01  3.75e-03  5.93e-01  5.75e-01  
  2  +5.2248e-01  +1.2539e+01  1.20e+01  1.48e-01  1.09e+01  1.93e-02  2.80e-01  9.90e-01  
  3  +5.0906e-01  +3.6400e+00  3.13e+00  5.93e-02  4.70e+00  3.43e-03  1.45e-01  6.19e-01  
  4  +4.9895e-01  +1.5783e+00  1.08e+00  1.53e-02  1.25e+00  4.79e-03  4.06e-02  9.90e-01  
  5  +4.9450e-01  +1.6561e+00  1.16e+00  9.62e-03  7.97e-01  5.67e-03  2.43e-02  6.64e-01  
  6  +4.7993e-01  +1.4164e+00  9.37e-01  4.01e-03  3.35e-01  8.59e-03  9.89e-03  6.17e-01  
  7  +4.7035e-01  +1.2569e+00  7.87e-01  2.84e-03  2.35e-01  5.97e-03  7.13e-03  4.43e-01  
  8  +4.6693e-01  +1.2350e+00  7.68e-01  2.23e-03  1.84e-01  3.91e-03  5.59e-03  5.62e-01  
  9  +4.5068e-01  +1.0447e+00  5.94e-01  1.54e-03  1.27e-01  1.25e-03  3.99e-03  6.65e-01  
 10  +4.1665e-01  +7.9211e-01  3.75e-01  8.72e-04  7.08e-02  2.19e-04  2.40e-03  8.04e-01  
 11  +3.6259e-01  +4.8423e-01  1.22e-01  2.56e-04  2.05e-02  4.49e-05  7.97e-04  7.54e-01  
 12  +3.4678e-01  +4.1221e-01  6.54e-02  1.37e-04  1.09e-02  2.56e-05  4.51e-04  4.99e-01  
 13  +3.3538e-01  +3.6156e-01  2.62e-02  5.41e-05  4.32e-03  1.22e-05  1.87e-04  7.33e-01  
 14  +3.2991e-01  +3.3844e-01  8.52e-03  1.71e-05  1.37e-03  5.06e-06  6.17e-05  9.90e-01  
 15  +3.2712e-01  +3.2774e-01  6.19e-04  1.23e-06  9.87e-05  3.62e-07  4.56e-06  9.31e-01  
 16  +3.2690e-01  +3.2691e-01  6.37e-06  1.26e-08  1.01e-06  3.71e-09  4.70e-08  9.90e-01  
 17  +3.2690e-01  +3.2690e-01  6.37e-08  1.26e-10  1.01e-08  3.71e-11  4.70e-10  9.90e-01  
 18  +3.2690e-01  +3.2690e-01  6.37e-10  1.26e-12  1.01e-10  3.71e-13  4.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.801ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:02 PM: Optimal value: 3.269e-01
(CVXPY) Oct 06 04:25:02 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:25:02 PM: Solver (including time spent in interface) took 2.360e-02 seconds
Iteration: 5, Objective: 0.3269
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:02 PM: Your problem has 571 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 571
  constraints   = 1071
  nnz(P)        = 0
  nnz(A)        = 8611
  cones (total) = 1
    : Nonnegative = 1,  numel = 1071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0172e+02  5.01e+02  9.57e-01  3.89e+01  1.00e+00  1.01e+00   ------   
  1  +5.6981e-01  +1.1061e+02  1.10e+02  4.33e-01  2.48e+01  3.76e-03  5.93e-01  5.75e-01  
  2  +5.2139e-01  +1.2690e+01  1.22e+01  1.47e-01  1.08e+01  1.95e-02  2.78e-01  9.90e-01  
  3  +5.0927e-01  +3.8914e+00  3.38e+00  5.94e-02  4.71e+00  4.21e-03  1.40e-01  5.88e-01  
  4  +5.0349e-01  +2.7139e+00  2.21e+00  3.06e-02  2.49e+00  4.93e-03  7.48e-02  5.91e-01  
  5  +4.9941e-01  +2.7961e+00  2.30e+00  1.97e-02  1.62e+00  3.77e-03  4.70e-02  7.81e-01  
  6  +4.8317e-01  +2.1169e+00  1.63e+00  6.53e-03  5.47e-01  5.67e-03  1.54e-02  6.75e-01  
  7  +4.6369e-01  +1.6325e+00  1.17e+00  3.81e-03  3.16e-01  3.77e-03  9.34e-03  5.09e-01  
  8  +4.4531e-01  +1.3399e+00  8.95e-01  2.28e-03  1.88e-01  2.38e-03  5.73e-03  5.80e-01  
  9  +4.3644e-01  +1.1851e+00  7.49e-01  1.85e-03  1.52e-01  1.21e-03  4.72e-03  4.86e-01  
 10  +4.1633e-01  +9.5855e-01  5.42e-01  1.34e-03  1.09e-01  4.32e-04  3.60e-03  5.90e-01  
 11  +3.6096e-01  +5.6617e-01  2.05e-01  4.47e-04  3.58e-02  1.09e-04  1.34e-03  7.18e-01  
 12  +3.3499e-01  +4.3569e-01  1.01e-01  2.18e-04  1.74e-02  5.57e-05  7.15e-04  6.39e-01  
 13  +3.2277e-01  +3.7849e-01  5.57e-02  1.18e-04  9.43e-03  3.16e-05  4.12e-04  5.97e-01  
 14  +3.0955e-01  +3.1987e-01  1.03e-02  2.14e-05  1.71e-03  5.41e-06  8.27e-05  8.28e-01  
 15  +3.0629e-01  +3.0656e-01  2.66e-04  5.46e-07  4.37e-05  1.22e-07  2.21e-06  9.79e-01  
 16  +3.0620e-01  +3.0620e-01  2.67e-06  5.47e-09  4.38e-07  1.22e-09  2.22e-08  9.90e-01  
 17  +3.0620e-01  +3.0620e-01  2.67e-08  5.47e-11  4.38e-09  1.22e-11  2.22e-10  9.90e-01  
 18  +3.0620e-01  +3.0620e-01  2.67e-10  5.47e-13  4.38e-11  1.22e-13  2.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.1805ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:02 PM: Optimal value: 3.062e-01
(CVXPY) Oct 06 04:25:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:02 PM: Solver (including time spent in interface) took 3.075e-02 seconds
Iteration: 6, Objective: 0.3062
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:02 PM: Your problem has 581 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 581
  constraints   = 1081
  nnz(P)        = 0
  nnz(A)        = 8852
  cones (total) = 1
    : Nonnegative = 1,  numel = 1081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0174e+02  5.01e+02  9.58e-01  3.88e+01  1.00e+00  1.01e+00   ------   
  1  +5.6871e-01  +1.1062e+02  1.10e+02  4.34e-01  2.47e+01  3.76e-03  5.92e-01  5.75e-01  
  2  +5.2071e-01  +1.2766e+01  1.22e+01  1.47e-01  1.07e+01  1.96e-02  2.77e-01  9.90e-01  
  3  +5.0909e-01  +3.8870e+00  3.38e+00  5.73e-02  4.54e+00  4.37e-03  1.34e-01  5.90e-01  
  4  +5.0524e-01  +3.1031e+00  2.60e+00  3.60e-02  2.92e+00  4.87e-03  8.57e-02  4.18e-01  
  5  +5.0118e-01  +2.9895e+00  2.49e+00  2.63e-02  2.14e+00  3.31e-03  6.36e-02  6.23e-01  
  6  +4.8557e-01  +2.1475e+00  1.66e+00  7.28e-03  6.11e-01  5.58e-03  1.71e-02  7.35e-01  
  7  +4.6648e-01  +1.6603e+00  1.19e+00  4.24e-03  3.52e-01  3.77e-03  1.03e-02  4.96e-01  
  8  +4.5363e-01  +1.5248e+00  1.07e+00  2.90e-03  2.40e-01  3.15e-03  7.13e-03  4.91e-01  
  9  +4.3830e-01  +1.2820e+00  8.44e-01  2.12e-03  1.75e-01  1.65e-03  5.36e-03  4.77e-01  
 10  +3.9964e-01  +8.5379e-01  4.54e-01  1.12e-03  9.10e-02  1.54e-05  3.09e-03  8.77e-01  
 11  +3.5119e-01  +5.5872e-01  2.08e-01  4.70e-04  3.75e-02  1.79e-05  1.44e-03  5.81e-01  
 12  +3.2389e-01  +4.2802e-01  1.04e-01  2.27e-04  1.81e-02  5.64e-05  7.73e-04  9.48e-01  
 13  +3.0316e-01  +3.2813e-01  2.50e-02  5.37e-05  4.27e-03  1.35e-05  2.04e-04  9.90e-01  
 14  +2.9609e-01  +2.9840e-01  2.30e-03  4.94e-06  3.91e-04  1.12e-06  2.02e-05  9.35e-01  
 15  +2.9534e-01  +2.9547e-01  1.25e-04  2.67e-07  2.11e-05  5.85e-08  1.11e-06  9.59e-01  
 16  +2.9530e-01  +2.9530e-01  1.26e-06  2.68e-09  2.12e-07  5.88e-10  1.12e-08  9.90e-01  
 17  +2.9530e-01  +2.9530e-01  1.26e-08  2.68e-11  2.12e-09  5.89e-12  1.12e-10  9.90e-01  
 18  +2.9530e-01  +2.9530e-01  1.26e-10  2.68e-13  2.12e-11  5.91e-14  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.5834ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:02 PM: Optimal value: 2.953e-01
(CVXPY) Oct 06 04:25:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:02 PM: Solver (including time spent in interface) took 3.123e-02 seconds
Iteration: 7, Objective: 0.2953
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:02 PM: Your problem has 591 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 591
  constraints   = 1091
  nnz(P)        = 0
  nnz(A)        = 8972
  cones (total) = 1
    : Nonnegative = 1,  numel = 1091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0191e+02  5.01e+02  9.58e-01  3.86e+01  1.00e+00  1.01e+00   ------   
  1  +5.6663e-01  +1.1058e+02  1.10e+02  4.34e-01  2.45e+01  3.77e-03  5.91e-01  5.76e-01  
  2  +5.1952e-01  +1.2968e+01  1.24e+01  1.46e-01  1.06e+01  1.99e-02  2.75e-01  9.90e-01  
  3  +5.0833e-01  +3.7004e+00  3.19e+00  5.10e-02  4.07e+00  4.36e-03  1.18e-01  6.18e-01  
  4  +5.0673e-01  +3.4348e+00  2.93e+00  3.98e-02  3.22e+00  4.83e-03  9.16e-02  2.35e-01  
  5  +5.0248e-01  +3.1784e+00  2.68e+00  3.32e-02  2.67e+00  3.04e-03  8.17e-02  3.84e-01  
  6  +4.8361e-01  +2.0007e+00  1.52e+00  6.26e-03  5.29e-01  6.44e-03  1.44e-02  8.33e-01  
  7  +4.6335e-01  +1.6853e+00  1.22e+00  3.86e-03  3.24e-01  5.35e-03  9.10e-03  4.56e-01  
  8  +4.4282e-01  +1.4425e+00  1.00e+00  2.58e-03  2.14e-01  3.25e-03  6.25e-03  5.44e-01  
  9  +4.1763e-01  +1.1885e+00  7.71e-01  1.84e-03  1.52e-01  1.97e-03  4.65e-03  3.88e-01  
 10  +3.5961e-01  +6.7686e-01  3.17e-01  7.55e-04  6.07e-02  1.44e-04  2.17e-03  7.63e-01  
 11  +3.2142e-01  +4.6551e-01  1.44e-01  3.35e-04  2.69e-02  6.08e-05  1.08e-03  5.78e-01  
 12  +3.0534e-01  +3.8887e-01  8.35e-02  1.89e-04  1.52e-02  3.61e-05  6.57e-04  4.66e-01  
 13  +2.9016e-01  +3.1711e-01  2.69e-02  6.01e-05  4.83e-03  1.28e-05  2.29e-04  8.26e-01  
 14  +2.8660e-01  +3.0163e-01  1.50e-02  3.28e-05  2.65e-03  7.37e-06  1.29e-04  6.01e-01  
 15  +2.8200e-01  +2.8255e-01  5.48e-04  1.19e-06  9.58e-05  2.35e-07  4.92e-06  9.90e-01  
 16  +2.8180e-01  +2.8181e-01  5.53e-06  1.20e-08  9.68e-07  2.36e-09  4.99e-08  9.90e-01  
 17  +2.8180e-01  +2.8180e-01  5.53e-08  1.20e-10  9.68e-09  2.36e-11  4.99e-10  9.90e-01  
 18  +2.8180e-01  +2.8180e-01  5.53e-10  1.20e-12  9.68e-11  2.36e-13  5.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.7395ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:02 PM: Optimal value: 2.818e-01
(CVXPY) Oct 06 04:25:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:02 PM: Solver (including time spent in interface) took 3.133e-02 seconds
Iteration: 8, Objective: 0.2818
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:02 PM: Your problem has 601 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:02 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 601
  constraints   = 1101
  nnz(P)        = 0
  nnz(A)        = 9065
  cones (total) = 1
    : Nonnegative = 1,  numel = 1101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0197e+02  5.01e+02  9.58e-01  3.85e+01  1.00e+00  1.01e+00   ------   
  1  +5.6521e-01  +1.1057e+02  1.10e+02  4.35e-01  2.43e+01  3.77e-03  5.91e-01  5.77e-01  
  2  +5.1854e-01  +1.3094e+01  1.26e+01  1.45e-01  1.05e+01  2.00e-02  2.73e-01  9.90e-01  
  3  +5.0761e-01  +3.4867e+00  2.98e+00  4.59e-02  3.67e+00  4.22e-03  1.06e-01  6.46e-01  
  4  +5.0663e-01  +3.3826e+00  2.88e+00  3.81e-02  3.09e+00  4.68e-03  8.71e-02  1.85e-01  
  5  +5.0240e-01  +3.2732e+00  2.77e+00  3.25e-02  2.62e+00  3.20e-03  7.82e-02  3.93e-01  
  6  +4.8277e-01  +2.1851e+00  1.70e+00  6.71e-03  5.68e-01  6.78e-03  1.52e-02  8.13e-01  
  7  +4.6229e-01  +1.8459e+00  1.38e+00  4.25e-03  3.58e-01  5.65e-03  9.88e-03  4.36e-01  
  8  +4.4014e-01  +1.5759e+00  1.14e+00  2.84e-03  2.37e-01  4.25e-03  6.79e-03  4.41e-01  
  9  +4.1858e-01  +1.3201e+00  9.01e-01  2.17e-03  1.79e-01  2.63e-03  5.36e-03  3.39e-01  
 10  +3.6222e-01  +7.4241e-01  3.80e-01  9.32e-04  7.52e-02  2.29e-05  2.61e-03  8.15e-01  
 11  +3.1433e-01  +4.5951e-01  1.45e-01  3.44e-04  2.76e-02  1.89e-05  1.10e-03  6.44e-01  
 12  +2.9725e-01  +3.8323e-01  8.60e-02  1.96e-04  1.60e-02  1.90e-05  6.69e-04  5.22e-01  
 13  +2.8267e-01  +3.1766e-01  3.50e-02  7.83e-05  6.41e-03  1.17e-05  2.91e-04  7.32e-01  
 14  +2.7287e-01  +2.7518e-01  2.31e-03  5.13e-06  4.19e-04  7.30e-07  2.08e-05  9.48e-01  
 15  +2.7212e-01  +2.7217e-01  5.57e-05  1.24e-07  1.01e-05  1.73e-08  5.09e-07  9.77e-01  
 16  +2.7210e-01  +2.7210e-01  5.57e-07  1.24e-09  1.01e-07  1.73e-10  5.10e-09  9.90e-01  
 17  +2.7210e-01  +2.7210e-01  5.57e-09  1.24e-11  1.01e-09  1.73e-12  5.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.4938ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:02 PM: Optimal value: 2.721e-01
(CVXPY) Oct 06 04:25:02 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:02 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 9, Objective: 0.2721
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:03 PM: Your problem has 611 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:03 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 611
  constraints   = 1111
  nnz(P)        = 0
  nnz(A)        = 9147
  cones (total) = 1
    : Nonnegative = 1,  numel = 1111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0207e+02  5.02e+02  9.58e-01  3.83e+01  1.00e+00  1.01e+00   ------   
  1  +5.6397e-01  +1.1058e+02  1.10e+02  4.35e-01  2.41e+01  3.78e-03  5.90e-01  5.77e-01  
  2  +5.1785e-01  +1.3210e+01  1.27e+01  1.45e-01  1.04e+01  2.02e-02  2.72e-01  9.90e-01  
  3  +5.0689e-01  +3.2507e+00  2.74e+00  4.09e-02  3.29e+00  3.99e-03  9.49e-02  6.84e-01  
  4  +5.0632e-01  +3.2776e+00  2.77e+00  3.56e-02  2.89e+00  4.45e-03  8.12e-02  1.75e-01  
  5  +5.0135e-01  +3.4923e+00  2.99e+00  2.85e-02  2.31e+00  3.65e-03  6.58e-02  5.55e-01  
  6  +4.7864e-01  +2.4381e+00  1.96e+00  6.54e-03  5.53e-01  7.29e-03  1.47e-02  7.81e-01  
  7  +4.5588e-01  +2.0143e+00  1.56e+00  4.22e-03  3.54e-01  5.71e-03  9.72e-03  4.27e-01  
  8  +4.3111e-01  +1.5913e+00  1.16e+00  2.88e-03  2.39e-01  2.88e-03  6.88e-03  4.86e-01  
  9  +3.9150e-01  +1.0465e+00  6.55e-01  1.76e-03  1.43e-01  2.43e-05  4.62e-03  8.03e-01  
 10  +3.2694e-01  +5.5005e-01  2.23e-01  5.39e-04  4.30e-02  1.69e-05  1.60e-03  6.84e-01  
 11  +2.9468e-01  +3.9794e-01  1.03e-01  2.40e-04  1.94e-02  2.29e-05  7.96e-04  6.49e-01  
 12  +2.8631e-01  +3.6007e-01  7.38e-02  1.69e-04  1.37e-02  2.13e-05  5.84e-04  4.18e-01  
 13  +2.7143e-01  +2.9224e-01  2.08e-02  4.69e-05  3.81e-03  6.61e-06  1.79e-04  7.49e-01  
 14  +2.6567e-01  +2.6678e-01  1.11e-03  2.49e-06  2.02e-04  3.77e-07  1.01e-05  9.67e-01  
 15  +2.6531e-01  +2.6532e-01  1.81e-05  4.08e-08  3.30e-06  6.04e-09  1.67e-07  9.84e-01  
 16  +2.6530e-01  +2.6530e-01  1.81e-07  4.08e-10  3.30e-08  6.04e-11  1.68e-09  9.90e-01  
 17  +2.6530e-01  +2.6530e-01  1.81e-09  4.08e-12  3.30e-10  6.05e-13  1.68e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.7662ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:03 PM: Optimal value: 2.653e-01
(CVXPY) Oct 06 04:25:03 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:03 PM: Solver (including time spent in interface) took 3.117e-02 seconds
Iteration: 10, Objective: 0.2653
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:03 PM: Your problem has 621 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:03 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 621
  constraints   = 1121
  nnz(P)        = 0
  nnz(A)        = 9260
  cones (total) = 1
    : Nonnegative = 1,  numel = 1121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0213e+02  5.02e+02  9.58e-01  3.82e+01  1.00e+00  1.01e+00   ------   
  1  +5.6326e-01  +1.1060e+02  1.10e+02  4.36e-01  2.39e+01  3.78e-03  5.90e-01  5.77e-01  
  2  +5.1725e-01  +1.3279e+01  1.28e+01  1.44e-01  1.03e+01  2.03e-02  2.71e-01  9.90e-01  
  3  +5.0605e-01  +2.9743e+00  2.47e+00  3.59e-02  2.89e+00  3.73e-03  8.37e-02  7.23e-01  
  4  +5.0567e-01  +3.1015e+00  2.60e+00  3.21e-02  2.61e+00  4.18e-03  7.33e-02  1.92e-01  
  5  +4.9923e-01  +3.6681e+00  3.17e+00  2.28e-02  1.87e+00  4.52e-03  5.12e-02  6.83e-01  
  6  +4.7513e-01  +2.6517e+00  2.18e+00  6.82e-03  5.74e-01  7.09e-03  1.53e-02  7.03e-01  
  7  +4.4979e-01  +2.0973e+00  1.65e+00  4.35e-03  3.63e-01  4.62e-03  1.01e-02  4.89e-01  
  8  +4.2797e-01  +1.6653e+00  1.24e+00  3.12e-03  2.58e-01  2.26e-03  7.47e-03  4.69e-01  
  9  +3.7702e-01  +9.8889e-01  6.12e-01  1.51e-03  1.22e-01  4.54e-04  3.97e-03  6.78e-01  
 10  +3.1266e-01  +4.9948e-01  1.87e-01  4.57e-04  3.62e-02  7.72e-05  1.41e-03  7.26e-01  
 11  +2.8646e-01  +3.8196e-01  9.55e-02  2.25e-04  1.80e-02  4.41e-05  7.64e-04  6.29e-01  
 12  +2.7259e-01  +3.1880e-01  4.62e-02  1.06e-04  8.60e-03  2.16e-05  3.93e-04  6.07e-01  
 13  +2.6146e-01  +2.6822e-01  6.76e-03  1.55e-05  1.25e-03  2.91e-06  6.25e-05  8.82e-01  
 14  +2.5948e-01  +2.5971e-01  2.37e-04  5.44e-07  4.37e-05  9.23e-08  2.27e-06  9.66e-01  
 15  +2.5940e-01  +2.5940e-01  2.43e-06  5.57e-09  4.47e-07  9.42e-10  2.33e-08  9.90e-01  
 16  +2.5940e-01  +2.5940e-01  2.43e-08  5.58e-11  4.47e-09  9.42e-12  2.34e-10  9.90e-01  
 17  +2.5940e-01  +2.5940e-01  2.43e-10  5.58e-13  4.47e-11  9.43e-14  2.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.8597ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:03 PM: Optimal value: 2.594e-01
(CVXPY) Oct 06 04:25:03 PM: Compilation took 1.501e-02 seconds
(CVXPY) Oct 06 04:25:03 PM: Solver (including time spent in interface) took 1.671e-02 seconds
Iteration: 11, Objective: 0.2594
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:03 PM: Your problem has 631 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:03 PM: Finished problem compilation (took 6.159e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 631
  constraints   = 1131
  nnz(P)        = 0
  nnz(A)        = 9487
  cones (total) = 1
    : Nonnegative = 1,  numel = 1131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0222e+02  5.02e+02  9.59e-01  3.81e+01  1.00e+00  1.01e+00   ------   
  1  +5.6215e-01  +1.1058e+02  1.10e+02  4.37e-01  2.38e+01  3.78e-03  5.89e-01  5.78e-01  
  2  +5.1643e-01  +1.3365e+01  1.28e+01  1.44e-01  1.02e+01  2.03e-02  2.69e-01  9.90e-01  
  3  +5.0503e-01  +2.6385e+00  2.13e+00  3.00e-02  2.43e+00  3.40e-03  7.02e-02  7.69e-01  
  4  +5.0439e-01  +2.8608e+00  2.36e+00  2.65e-02  2.16e+00  3.91e-03  6.02e-02  2.77e-01  
  5  +4.9267e-01  +3.4170e+00  2.92e+00  1.40e-02  1.17e+00  5.99e-03  3.10e-02  7.80e-01  
  6  +4.6618e-01  +2.4334e+00  1.97e+00  5.98e-03  5.02e-01  5.63e-03  1.35e-02  5.99e-01  
  7  +4.4342e-01  +2.0654e+00  1.62e+00  4.12e-03  3.43e-01  4.49e-03  9.54e-03  3.92e-01  
  8  +4.1777e-01  +1.6674e+00  1.25e+00  2.89e-03  2.39e-01  2.91e-03  6.93e-03  3.89e-01  
  9  +3.6932e-01  +9.6307e-01  5.94e-01  1.51e-03  1.21e-01  2.42e-04  4.04e-03  7.52e-01  
 10  +3.0815e-01  +4.8323e-01  1.75e-01  4.32e-04  3.40e-02  5.03e-05  1.34e-03  7.27e-01  
 11  +2.8478e-01  +3.7663e-01  9.19e-02  2.19e-04  1.75e-02  3.28e-05  7.26e-04  5.91e-01  
 12  +2.7622e-01  +3.3891e-01  6.27e-02  1.46e-04  1.18e-02  2.36e-05  5.02e-04  3.82e-01  
 13  +2.6346e-01  +2.8229e-01  1.88e-02  4.24e-05  3.46e-03  7.70e-06  1.58e-04  7.73e-01  
 14  +2.5794e-01  +2.5892e-01  9.76e-04  2.18e-06  1.78e-04  3.84e-07  8.59e-06  9.79e-01  
 15  +2.5760e-01  +2.5762e-01  1.28e-05  2.87e-08  2.33e-06  4.90e-09  1.14e-07  9.87e-01  
 16  +2.5760e-01  +2.5760e-01  1.28e-07  2.87e-10  2.33e-08  4.90e-11  1.14e-09  9.90e-01  
 17  +2.5760e-01  +2.5760e-01  1.28e-09  2.87e-12  2.33e-10  4.90e-13  1.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.7207ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:03 PM: Optimal value: 2.576e-01
(CVXPY) Oct 06 04:25:03 PM: Compilation took 6.159e-03 seconds
(CVXPY) Oct 06 04:25:03 PM: Solver (including time spent in interface) took 1.597e-02 seconds
Iteration: 12, Objective: 0.2576
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:03 PM: Your problem has 641 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:03 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 641
  constraints   = 1141
  nnz(P)        = 0
  nnz(A)        = 9601
  cones (total) = 1
    : Nonnegative = 1,  numel = 1141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9934e-01  +5.0229e+02  5.02e+02  9.59e-01  3.79e+01  1.00e+00  1.01e+00   ------   
  1  +5.6084e-01  +1.1062e+02  1.10e+02  4.37e-01  2.36e+01  3.79e-03  5.88e-01  5.78e-01  
  2  +5.1562e-01  +1.3442e+01  1.29e+01  1.43e-01  1.01e+01  2.04e-02  2.68e-01  9.90e-01  
  3  +5.0427e-01  +2.5369e+00  2.03e+00  2.76e-02  2.24e+00  3.43e-03  6.45e-02  7.87e-01  
  4  +4.9590e-01  +3.1747e+00  2.68e+00  1.60e-02  1.33e+00  5.67e-03  3.55e-02  7.42e-01  
  5  +4.7150e-01  +2.4505e+00  1.98e+00  6.36e-03  5.34e-01  7.21e-03  1.43e-02  6.18e-01  
  6  +4.4830e-01  +2.1033e+00  1.65e+00  4.41e-03  3.68e-01  5.69e-03  1.01e-02  4.01e-01  
  7  +4.2745e-01  +1.8083e+00  1.38e+00  3.35e-03  2.77e-01  3.89e-03  7.93e-03  3.63e-01  
  8  +3.8860e-01  +1.1579e+00  7.69e-01  2.10e-03  1.69e-01  3.16e-05  5.46e-03  7.64e-01  
  9  +3.2457e-01  +6.0555e-01  2.81e-01  6.99e-04  5.49e-02  2.85e-05  2.05e-03  6.75e-01  
 10  +2.9298e-01  +4.3253e-01  1.40e-01  3.43e-04  2.69e-02  2.40e-05  1.10e-03  5.48e-01  
 11  +2.7821e-01  +3.5921e-01  8.10e-02  1.93e-04  1.53e-02  1.81e-05  6.51e-04  4.89e-01  
 12  +2.6730e-01  +3.0681e-01  3.95e-02  9.27e-05  7.41e-03  1.11e-05  3.29e-04  5.96e-01  
 13  +2.6172e-01  +2.7934e-01  1.76e-02  4.04e-05  3.26e-03  7.94e-06  1.49e-04  8.75e-01  
 14  +2.5749e-01  +2.6246e-01  4.97e-03  1.11e-05  9.08e-04  2.32e-06  4.23e-05  7.74e-01  
 15  +2.5581e-01  +2.5612e-01  3.09e-04  6.80e-07  5.59e-05  1.36e-07  2.67e-06  9.45e-01  
 16  +2.5570e-01  +2.5570e-01  3.19e-06  7.02e-09  5.77e-07  1.39e-09  2.77e-08  9.90e-01  
 17  +2.5570e-01  +2.5570e-01  3.19e-08  7.03e-11  5.77e-09  1.39e-11  2.77e-10  9.90e-01  
 18  +2.5570e-01  +2.5570e-01  3.19e-10  7.03e-13  5.77e-11  1.39e-13  2.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.6115ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:03 PM: Optimal value: 2.557e-01
(CVXPY) Oct 06 04:25:03 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:03 PM: Solver (including time spent in interface) took 3.131e-02 seconds
Iteration: 13, Objective: 0.2557
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:03 PM: Your problem has 651 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:04 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 651
  constraints   = 1151
  nnz(P)        = 0
  nnz(A)        = 9659
  cones (total) = 1
    : Nonnegative = 1,  numel = 1151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0242e+02  5.02e+02  9.59e-01  3.78e+01  1.00e+00  1.01e+00   ------   
  1  +5.5888e-01  +1.1068e+02  1.10e+02  4.37e-01  2.35e+01  3.79e-03  5.88e-01  5.78e-01  
  2  +5.1445e-01  +1.3612e+01  1.31e+01  1.42e-01  9.98e+00  2.07e-02  2.67e-01  9.90e-01  
  3  +5.0325e-01  +2.5891e+00  2.09e+00  2.67e-02  2.16e+00  3.82e-03  6.20e-02  7.91e-01  
  4  +4.8992e-01  +2.8882e+00  2.40e+00  1.20e-02  1.00e+00  7.53e-03  2.66e-02  7.29e-01  
  5  +4.6034e-01  +2.1658e+00  1.71e+00  5.32e-03  4.45e-01  7.32e-03  1.20e-02  6.09e-01  
  6  +4.3101e-01  +1.8702e+00  1.44e+00  3.47e-03  2.88e-01  6.10e-03  8.05e-03  4.51e-01  
  7  +3.9949e-01  +1.2810e+00  8.82e-01  2.52e-03  2.04e-01  7.78e-04  6.35e-03  5.06e-01  
  8  +3.3040e-01  +6.8117e-01  3.51e-01  8.72e-04  6.87e-02  2.10e-04  2.48e-03  7.35e-01  
  9  +2.9645e-01  +4.7843e-01  1.82e-01  4.52e-04  3.53e-02  1.06e-04  1.41e-03  5.11e-01  
 10  +2.7960e-01  +3.8699e-01  1.07e-01  2.62e-04  2.06e-02  6.32e-05  8.61e-04  4.64e-01  
 11  +2.6664e-01  +3.2157e-01  5.49e-02  1.31e-04  1.04e-02  3.18e-05  4.54e-04  5.53e-01  
 12  +2.5824e-01  +2.8005e-01  2.18e-02  5.05e-05  4.05e-03  1.23e-05  1.84e-04  7.91e-01  
 13  +2.5367e-01  +2.6159e-01  7.93e-03  1.76e-05  1.44e-03  4.30e-06  6.71e-05  7.64e-01  
 14  +2.5113e-01  +2.5150e-01  3.66e-04  8.06e-07  6.62e-05  1.75e-07  3.18e-06  9.60e-01  
 15  +2.5100e-01  +2.5101e-01  3.73e-06  8.21e-09  6.74e-07  1.75e-09  3.25e-08  9.90e-01  
 16  +2.5100e-01  +2.5100e-01  3.73e-08  8.21e-11  6.74e-09  1.76e-11  3.25e-10  9.90e-01  
 17  +2.5100e-01  +2.5100e-01  3.73e-10  8.21e-13  6.74e-11  1.76e-13  3.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.969ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:04 PM: Optimal value: 2.510e-01
(CVXPY) Oct 06 04:25:04 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:25:04 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 14, Objective: 0.2510
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:04 PM: Your problem has 661 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:04 PM: Finished problem compilation (took 5.147e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 661
  constraints   = 1161
  nnz(P)        = 0
  nnz(A)        = 9749
  cones (total) = 1
    : Nonnegative = 1,  numel = 1161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0249e+02  5.02e+02  9.59e-01  3.76e+01  1.00e+00  1.01e+00   ------   
  1  +5.5709e-01  +1.1072e+02  1.10e+02  4.38e-01  2.33e+01  3.80e-03  5.88e-01  5.78e-01  
  2  +5.1321e-01  +1.3726e+01  1.32e+01  1.41e-01  9.91e+00  2.08e-02  2.66e-01  9.90e-01  
  3  +5.0215e-01  +2.6222e+00  2.12e+00  2.58e-02  2.10e+00  4.14e-03  5.96e-02  7.96e-01  
  4  +4.8473e-01  +2.6936e+00  2.21e+00  1.00e-02  8.40e-01  8.71e-03  2.23e-02  7.26e-01  
  5  +4.5414e-01  +2.0679e+00  1.61e+00  5.22e-03  4.34e-01  6.87e-03  1.19e-02  5.61e-01  
  6  +4.2844e-01  +1.8528e+00  1.42e+00  3.59e-03  2.97e-01  6.28e-03  8.34e-03  3.98e-01  
  7  +3.8203e-01  +1.1683e+00  7.86e-01  2.19e-03  1.75e-01  5.18e-05  5.61e-03  7.11e-01  
  8  +3.1215e-01  +5.6726e-01  2.55e-01  6.54e-04  5.11e-02  3.13e-05  1.92e-03  7.12e-01  
  9  +2.8172e-01  +4.1466e-01  1.33e-01  3.33e-04  2.61e-02  3.06e-05  1.06e-03  5.84e-01  
 10  +2.7067e-01  +3.6028e-01  8.96e-02  2.19e-04  1.73e-02  2.32e-05  7.24e-04  3.80e-01  
 11  +2.6028e-01  +3.1032e-01  5.00e-02  1.19e-04  9.58e-03  1.63e-05  4.07e-04  5.71e-01  
 12  +2.5408e-01  +2.8239e-01  2.83e-02  6.58e-05  5.36e-03  1.03e-05  2.32e-04  5.49e-01  
 13  +2.4829e-01  +2.5719e-01  8.90e-03  2.02e-05  1.66e-03  3.51e-06  7.45e-05  7.55e-01  
 14  +2.4561e-01  +2.4674e-01  1.13e-03  2.50e-06  2.07e-04  4.87e-07  9.61e-06  9.40e-01  
 15  +2.4521e-01  +2.4522e-01  1.44e-05  3.19e-08  2.65e-06  5.92e-09  1.24e-07  9.87e-01  
 16  +2.4520e-01  +2.4520e-01  1.44e-07  3.19e-10  2.65e-08  5.92e-11  1.24e-09  9.90e-01  
 17  +2.4520e-01  +2.4520e-01  1.44e-09  3.19e-12  2.65e-10  5.92e-13  1.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.8331ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:04 PM: Optimal value: 2.452e-01
(CVXPY) Oct 06 04:25:04 PM: Compilation took 5.147e-03 seconds
(CVXPY) Oct 06 04:25:04 PM: Solver (including time spent in interface) took 2.630e-02 seconds
Iteration: 15, Objective: 0.2452
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:04 PM: Your problem has 669 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:04 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 669
  constraints   = 1169
  nnz(P)        = 0
  nnz(A)        = 9916
  cones (total) = 1
    : Nonnegative = 1,  numel = 1169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0246e+02  5.02e+02  9.59e-01  3.76e+01  1.00e+00  1.01e+00   ------   
  1  +5.5600e-01  +1.1074e+02  1.10e+02  4.38e-01  2.32e+01  3.80e-03  5.87e-01  5.78e-01  
  2  +5.1245e-01  +1.3814e+01  1.33e+01  1.41e-01  9.84e+00  2.10e-02  2.65e-01  9.90e-01  
  3  +5.0139e-01  +2.6617e+00  2.16e+00  2.55e-02  2.06e+00  4.38e-03  5.85e-02  7.97e-01  
  4  +4.8098e-01  +2.6160e+00  2.13e+00  9.14e-03  7.67e-01  9.48e-03  2.03e-02  7.29e-01  
  5  +4.4811e-01  +2.0755e+00  1.63e+00  4.96e-03  4.13e-01  7.86e-03  1.13e-02  5.39e-01  
  6  +4.2638e-01  +1.8244e+00  1.40e+00  3.74e-03  3.09e-01  5.84e-03  8.71e-03  3.62e-01  
  7  +3.7242e-01  +1.1167e+00  7.44e-01  2.01e-03  1.61e-01  5.26e-05  5.17e-03  7.82e-01  
  8  +3.0223e-01  +5.2392e-01  2.22e-01  5.77e-04  4.49e-02  3.08e-05  1.72e-03  7.31e-01  
  9  +2.7706e-01  +4.0348e-01  1.26e-01  3.19e-04  2.51e-02  2.84e-05  1.02e-03  5.33e-01  
 10  +2.6704e-01  +3.5635e-01  8.93e-02  2.20e-04  1.75e-02  2.25e-05  7.24e-04  3.48e-01  
 11  +2.5600e-01  +3.0445e-01  4.84e-02  1.16e-04  9.40e-03  1.56e-05  3.98e-04  5.88e-01  
 12  +2.5108e-01  +2.8287e-01  3.18e-02  7.41e-05  6.13e-03  1.17e-05  2.59e-04  5.08e-01  
 13  +2.4678e-01  +2.6371e-01  1.69e-02  3.90e-05  3.24e-03  7.02e-06  1.41e-04  6.47e-01  
 14  +2.4246e-01  +2.4550e-01  3.04e-03  6.94e-06  5.77e-04  1.34e-06  2.60e-05  9.14e-01  
 15  +2.4182e-01  +2.4296e-01  1.15e-03  2.60e-06  2.16e-04  5.37e-07  9.88e-06  8.78e-01  
 16  +2.4141e-01  +2.4144e-01  2.84e-05  6.43e-08  5.33e-06  1.30e-08  2.47e-07  9.75e-01  
 17  +2.4140e-01  +2.4140e-01  2.84e-07  6.44e-10  5.34e-08  1.30e-10  2.47e-09  9.90e-01  
 18  +2.4140e-01  +2.4140e-01  2.85e-09  6.46e-12  5.36e-10  1.30e-12  2.48e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.1909ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:04 PM: Optimal value: 2.414e-01
(CVXPY) Oct 06 04:25:04 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:25:04 PM: Solver (including time spent in interface) took 3.420e-02 seconds
Iteration: 16, Objective: 0.2414
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:04 PM: Your problem has 679 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:04 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 679
  constraints   = 1179
  nnz(P)        = 0
  nnz(A)        = 9980
  cones (total) = 1
    : Nonnegative = 1,  numel = 1179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +5.0239e+02  5.02e+02  9.59e-01  3.74e+01  1.00e+00  1.01e+00   ------   
  1  +5.5429e-01  +1.1076e+02  1.10e+02  4.38e-01  2.31e+01  3.80e-03  5.87e-01  5.78e-01  
  2  +5.1117e-01  +1.3946e+01  1.34e+01  1.40e-01  9.75e+00  2.12e-02  2.63e-01  9.90e-01  
  3  +5.0004e-01  +2.8168e+00  2.32e+00  2.59e-02  2.09e+00  4.93e-03  5.92e-02  7.93e-01  
  4  +4.7461e-01  +2.5443e+00  2.07e+00  8.34e-03  6.98e-01  1.05e-02  1.86e-02  7.31e-01  
  5  +4.4201e-01  +2.0953e+00  1.65e+00  4.91e-03  4.07e-01  8.81e-03  1.12e-02  4.95e-01  
  6  +4.2097e-01  +1.8470e+00  1.43e+00  3.84e-03  3.15e-01  6.06e-03  8.97e-03  3.61e-01  
  7  +3.7222e-01  +1.1856e+00  8.13e-01  2.25e-03  1.79e-01  5.42e-05  5.75e-03  7.86e-01  
  8  +3.0336e-01  +5.6009e-01  2.57e-01  6.71e-04  5.22e-02  3.44e-05  1.97e-03  7.20e-01  
  9  +2.7256e-01  +4.0271e-01  1.30e-01  3.32e-04  2.61e-02  3.02e-05  1.06e-03  5.90e-01  
 10  +2.6309e-01  +3.5634e-01  9.32e-02  2.33e-04  1.84e-02  2.51e-05  7.61e-04  3.67e-01  
 11  +2.5165e-01  +3.0007e-01  4.84e-02  1.18e-04  9.48e-03  1.62e-05  4.00e-04  6.06e-01  
 12  +2.4727e-01  +2.8027e-01  3.30e-02  7.78e-05  6.42e-03  1.26e-05  2.69e-04  5.01e-01  
 13  +2.4254e-01  +2.5881e-01  1.63e-02  3.79e-05  3.14e-03  6.73e-06  1.35e-04  6.48e-01  
 14  +2.3868e-01  +2.4208e-01  3.39e-03  7.82e-06  6.48e-04  1.47e-06  2.88e-05  8.67e-01  
 15  +2.3813e-01  +2.3983e-01  1.70e-03  3.87e-06  3.21e-04  7.70e-07  1.45e-05  6.87e-01  
 16  +2.3771e-01  +2.3824e-01  5.31e-04  1.19e-06  9.89e-05  2.49e-07  4.50e-06  7.74e-01  
 17  +2.3753e-01  +2.3759e-01  6.82e-05  1.49e-07  1.25e-05  3.26e-08  5.74e-07  9.02e-01  
 18  +2.3750e-01  +2.3750e-01  7.54e-07  1.64e-09  1.38e-07  3.60e-10  6.34e-09  9.89e-01  
 19  +2.3750e-01  +2.3750e-01  7.56e-09  1.65e-11  1.38e-09  3.61e-12  6.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.7107ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:04 PM: Optimal value: 2.375e-01
(CVXPY) Oct 06 04:25:04 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:04 PM: Solver (including time spent in interface) took 3.340e-02 seconds
Iteration: 17, Objective: 0.2375
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:04 PM: Your problem has 689 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:04 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 689
  constraints   = 1189
  nnz(P)        = 0
  nnz(A)        = 10073
  cones (total) = 1
    : Nonnegative = 1,  numel = 1189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0238e+02  5.02e+02  9.60e-01  3.73e+01  1.00e+00  1.01e+00   ------   
  1  +5.5286e-01  +1.1078e+02  1.10e+02  4.39e-01  2.29e+01  3.81e-03  5.86e-01  5.78e-01  
  2  +5.1005e-01  +1.4057e+01  1.35e+01  1.40e-01  9.66e+00  2.13e-02  2.62e-01  9.90e-01  
  3  +4.9860e-01  +2.7893e+00  2.29e+00  2.45e-02  1.98e+00  5.15e-03  5.59e-02  8.06e-01  
  4  +4.7172e-01  +2.4593e+00  1.99e+00  8.08e-03  6.74e-01  1.04e-02  1.80e-02  7.14e-01  
  5  +4.4053e-01  +2.1346e+00  1.69e+00  4.97e-03  4.12e-01  9.95e-03  1.13e-02  4.54e-01  
  6  +4.1789e-01  +1.8753e+00  1.46e+00  3.83e-03  3.14e-01  7.17e-03  8.93e-03  3.48e-01  
  7  +3.6665e-01  +1.1547e+00  7.88e-01  2.17e-03  1.72e-01  6.25e-05  5.57e-03  7.63e-01  
  8  +2.9574e-01  +5.2302e-01  2.27e-01  5.97e-04  4.61e-02  3.40e-05  1.77e-03  7.49e-01  
  9  +2.7559e-01  +4.3558e-01  1.60e-01  4.09e-04  3.19e-02  4.16e-05  1.28e-03  4.81e-01  
 10  +2.5618e-01  +3.3888e-01  8.27e-02  2.05e-04  1.61e-02  2.43e-05  6.85e-04  5.30e-01  
 11  +2.4656e-01  +2.9233e-01  4.58e-02  1.12e-04  8.83e-03  1.52e-05  3.90e-04  5.36e-01  
 12  +2.4349e-01  +2.7781e-01  3.43e-02  8.25e-05  6.58e-03  1.28e-05  2.91e-04  4.23e-01  
 13  +2.3883e-01  +2.5625e-01  1.74e-02  4.15e-05  3.31e-03  7.21e-06  1.51e-04  6.73e-01  
 14  +2.3463e-01  +2.3796e-01  3.33e-03  7.88e-06  6.26e-04  1.38e-06  2.99e-05  8.60e-01  
 15  +2.3407e-01  +2.3563e-01  1.56e-03  3.68e-06  2.92e-04  6.78e-07  1.41e-05  7.11e-01  
 16  +2.3364e-01  +2.3400e-01  3.58e-04  8.18e-07  6.57e-05  1.64e-07  3.20e-06  8.73e-01  
 17  +2.3351e-01  +2.3353e-01  2.05e-05  4.59e-08  3.71e-06  9.38e-09  1.82e-07  9.53e-01  
 18  +2.3350e-01  +2.3350e-01  2.07e-07  4.64e-10  3.75e-08  9.47e-11  1.84e-09  9.90e-01  
 19  +2.3350e-01  +2.3350e-01  2.07e-09  4.64e-12  3.75e-10  9.52e-13  1.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.5111ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:04 PM: Optimal value: 2.335e-01
(CVXPY) Oct 06 04:25:04 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:25:04 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 18, Objective: 0.2335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:05 PM: Your problem has 699 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:05 PM: Finished problem compilation (took 1.554e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 699
  constraints   = 1199
  nnz(P)        = 0
  nnz(A)        = 10154
  cones (total) = 1
    : Nonnegative = 1,  numel = 1199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +5.0245e+02  5.02e+02  9.60e-01  3.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.5148e-01  +1.1083e+02  1.10e+02  4.39e-01  2.28e+01  3.81e-03  5.86e-01  5.78e-01  
  2  +5.0915e-01  +1.4126e+01  1.36e+01  1.39e-01  9.55e+00  2.14e-02  2.61e-01  9.90e-01  
  3  +4.9732e-01  +2.7926e+00  2.30e+00  2.37e-02  1.91e+00  5.37e-03  5.41e-02  8.12e-01  
  4  +4.6929e-01  +2.3990e+00  1.93e+00  8.03e-03  6.66e-01  1.01e-02  1.80e-02  7.00e-01  
  5  +4.3574e-01  +2.1020e+00  1.67e+00  4.85e-03  4.00e-01  1.01e-02  1.11e-02  4.65e-01  
  6  +4.1399e-01  +1.8735e+00  1.46e+00  3.84e-03  3.13e-01  7.05e-03  9.00e-03  3.58e-01  
  7  +3.6342e-01  +1.1477e+00  7.84e-01  2.17e-03  1.71e-01  6.11e-05  5.60e-03  7.62e-01  
  8  +2.9259e-01  +5.1739e-01  2.25e-01  5.93e-04  4.56e-02  3.38e-05  1.77e-03  7.52e-01  
  9  +2.7164e-01  +4.2798e-01  1.56e-01  3.99e-04  3.11e-02  4.20e-05  1.25e-03  5.08e-01  
 10  +2.5163e-01  +3.2955e-01  7.79e-02  1.92e-04  1.51e-02  2.31e-05  6.42e-04  5.38e-01  
 11  +2.4084e-01  +2.7855e-01  3.77e-02  9.11e-05  7.20e-03  1.25e-05  3.19e-04  5.85e-01  
 12  +2.3733e-01  +2.6208e-01  2.48e-02  5.90e-05  4.69e-03  9.23e-06  2.11e-04  5.09e-01  
 13  +2.3204e-01  +2.3875e-01  6.71e-03  1.58e-05  1.25e-03  2.87e-06  5.89e-05  8.73e-01  
 14  +2.3021e-01  +2.3138e-01  1.17e-03  2.73e-06  2.17e-04  5.06e-07  1.05e-05  8.94e-01  
 15  +2.2981e-01  +2.2983e-01  2.18e-05  5.10e-08  4.04e-06  8.97e-09  1.98e-07  9.81e-01  
 16  +2.2980e-01  +2.2980e-01  2.18e-07  5.10e-10  4.04e-08  8.97e-11  1.99e-09  9.90e-01  
 17  +2.2980e-01  +2.2980e-01  2.18e-09  5.10e-12  4.04e-10  8.97e-13  1.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.2585ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:05 PM: Optimal value: 2.298e-01
(CVXPY) Oct 06 04:25:05 PM: Compilation took 1.554e-02 seconds
(CVXPY) Oct 06 04:25:05 PM: Solver (including time spent in interface) took 3.254e-02 seconds
Iteration: 19, Objective: 0.2298
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:05 PM: Your problem has 709 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:05 PM: Finished problem compilation (took 1.361e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 709
  constraints   = 1209
  nnz(P)        = 0
  nnz(A)        = 10201
  cones (total) = 1
    : Nonnegative = 1,  numel = 1209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +5.0245e+02  5.02e+02  9.60e-01  3.70e+01  1.00e+00  1.01e+00   ------   
  1  +5.5097e-01  +1.1080e+02  1.10e+02  4.39e-01  2.26e+01  3.81e-03  5.85e-01  5.79e-01  
  2  +5.0867e-01  +1.4159e+01  1.37e+01  1.39e-01  9.48e+00  2.14e-02  2.61e-01  9.90e-01  
  3  +4.9675e-01  +2.8388e+00  2.34e+00  2.38e-02  1.91e+00  5.54e-03  5.42e-02  8.11e-01  
  4  +4.6636e-01  +2.3836e+00  1.92e+00  7.68e-03  6.36e-01  1.05e-02  1.73e-02  7.10e-01  
  5  +4.3455e-01  +2.1330e+00  1.70e+00  4.87e-03  4.01e-01  1.08e-02  1.11e-02  4.25e-01  
  6  +4.1136e-01  +1.8797e+00  1.47e+00  3.81e-03  3.10e-01  7.69e-03  8.93e-03  3.42e-01  
  7  +3.6527e-01  +1.2035e+00  8.38e-01  2.37e-03  1.86e-01  6.45e-05  6.11e-03  7.45e-01  
  8  +2.9406e-01  +5.3553e-01  2.41e-01  6.37e-04  4.89e-02  3.38e-05  1.88e-03  7.52e-01  
  9  +2.6535e-01  +4.1036e-01  1.45e-01  3.67e-04  2.86e-02  4.20e-05  1.16e-03  6.10e-01  
 10  +2.5065e-01  +3.3680e-01  8.62e-02  2.13e-04  1.67e-02  2.72e-05  7.10e-04  4.54e-01  
 11  +2.3983e-01  +2.8391e-01  4.41e-02  1.06e-04  8.41e-03  1.61e-05  3.72e-04  6.07e-01  
 12  +2.3294e-01  +2.5202e-01  1.91e-02  4.51e-05  3.59e-03  7.31e-06  1.65e-04  6.26e-01  
 13  +2.2890e-01  +2.3381e-01  4.91e-03  1.15e-05  9.12e-04  2.28e-06  4.44e-05  9.90e-01  
 14  +2.2720e-01  +2.2735e-01  1.45e-04  3.38e-07  2.68e-05  5.50e-08  1.35e-06  9.74e-01  
 15  +2.2715e-01  +2.2715e-01  1.46e-06  3.41e-09  2.70e-07  5.50e-10  1.36e-08  9.90e-01  
 16  +2.2715e-01  +2.2715e-01  1.46e-08  3.41e-11  2.70e-09  5.51e-12  1.36e-10  9.90e-01  
 17  +2.2715e-01  +2.2715e-01  1.46e-10  3.41e-13  2.70e-11  5.51e-14  1.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.8127ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:05 PM: Optimal value: 2.272e-01
(CVXPY) Oct 06 04:25:05 PM: Compilation took 1.361e-02 seconds
(CVXPY) Oct 06 04:25:05 PM: Solver (including time spent in interface) took 3.134e-02 seconds
Iteration: 20, Objective: 0.2272
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:05 PM: Your problem has 719 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:05 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 719
  constraints   = 1219
  nnz(P)        = 0
  nnz(A)        = 10257
  cones (total) = 1
    : Nonnegative = 1,  numel = 1219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9914e-01  +5.0263e+02  5.02e+02  9.60e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.4849e-01  +1.1097e+02  1.10e+02  4.40e-01  2.25e+01  3.82e-03  5.85e-01  5.78e-01  
  2  +5.0677e-01  +1.4318e+01  1.38e+01  1.38e-01  9.41e+00  2.17e-02  2.60e-01  9.90e-01  
  3  +4.9428e-01  +2.8607e+00  2.37e+00  2.27e-02  1.82e+00  5.95e-03  5.16e-02  8.19e-01  
  4  +4.5997e-01  +2.2960e+00  1.84e+00  7.27e-03  5.99e-01  1.05e-02  1.64e-02  7.07e-01  
  5  +4.2598e-01  +2.0371e+00  1.61e+00  4.53e-03  3.71e-01  1.10e-02  1.04e-02  4.23e-01  
  6  +4.0385e-01  +1.8245e+00  1.42e+00  3.71e-03  3.00e-01  7.49e-03  8.74e-03  3.33e-01  
  7  +3.5529e-01  +1.1405e+00  7.85e-01  2.24e-03  1.75e-01  6.21e-05  5.86e-03  7.46e-01  
  8  +2.8645e-01  +5.1195e-01  2.25e-01  6.07e-04  4.64e-02  3.23e-05  1.82e-03  7.52e-01  
  9  +2.6398e-01  +4.1426e-01  1.50e-01  3.90e-04  3.02e-02  3.93e-05  1.23e-03  5.33e-01  
 10  +2.4650e-01  +3.2806e-01  8.16e-02  2.04e-04  1.60e-02  2.37e-05  6.85e-04  5.05e-01  
 11  +2.3572e-01  +2.7650e-01  4.08e-02  9.96e-05  7.86e-03  1.41e-05  3.51e-04  6.22e-01  
 12  +2.3083e-01  +2.5186e-01  2.10e-02  5.08e-05  4.03e-03  9.39e-06  1.85e-04  8.61e-01  
 13  +2.2614e-01  +2.3160e-01  5.46e-03  1.31e-05  1.04e-03  2.46e-06  5.00e-05  8.75e-01  
 14  +2.2530e-01  +2.2832e-01  3.01e-03  7.20e-06  5.68e-04  1.36e-06  2.80e-05  5.99e-01  
 15  +2.2434e-01  +2.2460e-01  2.58e-04  6.11e-07  4.82e-05  1.12e-07  2.44e-06  9.27e-01  
 16  +2.2425e-01  +2.2425e-01  2.95e-06  6.98e-09  5.51e-07  1.27e-09  2.80e-08  9.89e-01  
 17  +2.2425e-01  +2.2425e-01  2.95e-08  6.99e-11  5.51e-09  1.27e-11  2.81e-10  9.90e-01  
 18  +2.2425e-01  +2.2425e-01  2.96e-10  6.99e-13  5.52e-11  1.28e-13  2.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.0377ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:05 PM: Optimal value: 2.243e-01
(CVXPY) Oct 06 04:25:05 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:05 PM: Solver (including time spent in interface) took 3.272e-02 seconds
Iteration: 21, Objective: 0.2243
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:05 PM: Your problem has 729 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:05 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 729
  constraints   = 1229
  nnz(P)        = 0
  nnz(A)        = 10354
  cones (total) = 1
    : Nonnegative = 1,  numel = 1229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +5.0276e+02  5.02e+02  9.60e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.4635e-01  +1.1094e+02  1.10e+02  4.38e-01  2.23e+01  3.83e-03  5.83e-01  5.79e-01  
  2  +5.0534e-01  +1.4484e+01  1.40e+01  1.36e-01  9.27e+00  2.19e-02  2.56e-01  9.90e-01  
  3  +4.9194e-01  +2.9658e+00  2.47e+00  2.23e-02  1.79e+00  6.48e-03  5.05e-02  8.21e-01  
  4  +4.5399e-01  +2.3219e+00  1.87e+00  7.17e-03  5.89e-01  1.09e-02  1.62e-02  6.99e-01  
  5  +4.2457e-01  +2.1163e+00  1.69e+00  4.88e-03  3.99e-01  1.12e-02  1.11e-02  3.72e-01  
  6  +3.9992e-01  +1.8637e+00  1.46e+00  3.84e-03  3.11e-01  8.12e-03  9.00e-03  3.27e-01  
  7  +3.4280e-01  +1.0655e+00  7.23e-01  2.02e-03  1.58e-01  6.84e-05  5.30e-03  7.70e-01  
  8  +2.7914e-01  +5.0464e-01  2.26e-01  6.15e-04  4.69e-02  3.51e-05  1.86e-03  7.19e-01  
  9  +2.5433e-01  +3.8992e-01  1.36e-01  3.54e-04  2.74e-02  3.78e-05  1.14e-03  5.99e-01  
 10  +2.3783e-01  +3.0643e-01  6.86e-02  1.74e-04  1.36e-02  2.06e-05  5.92e-04  5.30e-01  
 11  +2.2966e-01  +2.6642e-01  3.68e-02  9.11e-05  7.17e-03  1.26e-05  3.24e-04  5.86e-01  
 12  +2.2562e-01  +2.4534e-01  1.97e-02  4.83e-05  3.82e-03  8.70e-06  1.77e-04  8.78e-01  
 13  +2.2127e-01  +2.2657e-01  5.30e-03  1.29e-05  1.02e-03  2.34e-06  4.96e-05  8.59e-01  
 14  +2.2040e-01  +2.2314e-01  2.74e-03  6.63e-06  5.23e-04  1.21e-06  2.61e-05  6.25e-01  
 15  +2.1952e-01  +2.1972e-01  2.01e-04  4.82e-07  3.80e-05  8.51e-08  1.95e-06  9.37e-01  
 16  +2.1945e-01  +2.1945e-01  2.17e-06  5.20e-09  4.09e-07  9.14e-10  2.11e-08  9.89e-01  
 17  +2.1945e-01  +2.1945e-01  2.17e-08  5.20e-11  4.10e-09  9.15e-12  2.11e-10  9.90e-01  
 18  +2.1945e-01  +2.1945e-01  2.17e-10  5.21e-13  4.10e-11  9.16e-14  2.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 32.9424ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:06 PM: Optimal value: 2.195e-01
(CVXPY) Oct 06 04:25:06 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:06 PM: Solver (including time spent in interface) took 3.132e-02 seconds
Iteration: 22, Objective: 0.2195
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:06 PM: Your problem has 739 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:06 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 739
  constraints   = 1239
  nnz(P)        = 0
  nnz(A)        = 10559
  cones (total) = 1
    : Nonnegative = 1,  numel = 1239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9914e-01  +5.0276e+02  5.02e+02  9.60e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.4509e-01  +1.1089e+02  1.10e+02  4.38e-01  2.22e+01  3.84e-03  5.82e-01  5.80e-01  
  2  +5.0397e-01  +1.4560e+01  1.41e+01  1.35e-01  9.15e+00  2.19e-02  2.54e-01  9.90e-01  
  3  +4.8958e-01  +2.9970e+00  2.51e+00  2.17e-02  1.73e+00  6.83e-03  4.91e-02  8.24e-01  
  4  +4.5121e-01  +2.2843e+00  1.83e+00  7.35e-03  6.01e-01  1.03e-02  1.67e-02  6.79e-01  
  5  +4.2185e-01  +2.1132e+00  1.69e+00  5.02e-03  4.09e-01  1.09e-02  1.15e-02  3.69e-01  
  6  +3.9827e-01  +1.9005e+00  1.50e+00  3.99e-03  3.22e-01  8.23e-03  9.36e-03  3.27e-01  
  7  +3.4783e-01  +1.1605e+00  8.13e-01  2.32e-03  1.81e-01  6.95e-05  6.03e-03  7.66e-01  
  8  +2.8439e-01  +5.4585e-01  2.61e-01  7.17e-04  5.46e-02  3.58e-05  2.12e-03  7.08e-01  
  9  +2.5301e-01  +3.9530e-01  1.42e-01  3.70e-04  2.86e-02  3.86e-05  1.18e-03  6.38e-01  
 10  +2.3431e-01  +2.9957e-01  6.53e-02  1.64e-04  1.28e-02  2.05e-05  5.54e-04  6.11e-01  
 11  +2.2711e-01  +2.6418e-01  3.71e-02  9.08e-05  7.20e-03  1.36e-05  3.18e-04  5.92e-01  
 12  +2.2273e-01  +2.4295e-01  2.02e-02  4.89e-05  3.90e-03  8.31e-06  1.76e-04  6.69e-01  
 13  +2.1857e-01  +2.2400e-01  5.44e-03  1.31e-05  1.04e-03  2.52e-06  4.92e-05  9.90e-01  
 14  +2.1696e-01  +2.1783e-01  8.65e-04  2.09e-06  1.65e-04  3.78e-07  8.10e-06  8.92e-01  
 15  +2.1666e-01  +2.1670e-01  3.56e-05  8.58e-08  6.78e-06  1.49e-08  3.38e-07  9.70e-01  
 16  +2.1665e-01  +2.1665e-01  3.60e-07  8.68e-10  6.86e-08  1.50e-10  3.43e-09  9.90e-01  
 17  +2.1665e-01  +2.1665e-01  3.60e-09  8.69e-12  6.87e-10  1.51e-12  3.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.2261ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:06 PM: Optimal value: 2.167e-01
(CVXPY) Oct 06 04:25:06 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:06 PM: Solver (including time spent in interface) took 4.591e-02 seconds
Iteration: 23, Objective: 0.2167
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:06 PM: Your problem has 749 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:06 PM: Finished problem compilation (took 1.089e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 749
  constraints   = 1249
  nnz(P)        = 0
  nnz(A)        = 10658
  cones (total) = 1
    : Nonnegative = 1,  numel = 1249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9912e-01  +5.0279e+02  5.02e+02  9.61e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.4316e-01  +1.1097e+02  1.10e+02  4.38e-01  2.21e+01  3.84e-03  5.81e-01  5.80e-01  
  2  +5.0212e-01  +1.4682e+01  1.42e+01  1.34e-01  9.06e+00  2.21e-02  2.53e-01  9.90e-01  
  3  +4.8660e-01  +2.9725e+00  2.49e+00  2.05e-02  1.64e+00  7.10e-03  4.65e-02  8.35e-01  
  4  +4.4563e-01  +2.1667e+00  1.72e+00  6.98e-03  5.68e-01  9.58e-03  1.59e-02  6.76e-01  
  5  +4.1632e-01  +2.0681e+00  1.65e+00  4.90e-03  3.97e-01  1.05e-02  1.13e-02  3.70e-01  
  6  +3.9130e-01  +1.8361e+00  1.44e+00  3.87e-03  3.11e-01  7.40e-03  9.15e-03  3.50e-01  
  7  +3.3311e-01  +1.0036e+00  6.71e-01  1.89e-03  1.47e-01  6.31e-05  5.01e-03  7.81e-01  
  8  +2.7461e-01  +5.0851e-01  2.34e-01  6.45e-04  4.91e-02  3.13e-05  1.94e-03  6.65e-01  
  9  +2.4934e-01  +3.8619e-01  1.37e-01  3.60e-04  2.78e-02  3.31e-05  1.15e-03  5.78e-01  
 10  +2.2950e-01  +2.8565e-01  5.61e-02  1.42e-04  1.11e-02  1.59e-05  4.86e-04  6.46e-01  
 11  +2.2131e-01  +2.4694e-01  2.56e-02  6.32e-05  4.99e-03  8.23e-06  2.25e-04  6.25e-01  
 12  +2.1617e-01  +2.2314e-01  6.97e-03  1.70e-05  1.34e-03  2.41e-06  6.28e-05  7.79e-01  
 13  +2.1521e-01  +2.1903e-01  3.82e-03  9.23e-06  7.30e-04  1.39e-06  3.46e-05  5.41e-01  
 14  +2.1500e-01  +2.1806e-01  3.06e-03  7.38e-06  5.83e-04  1.20e-06  2.79e-05  4.53e-01  
 15  +2.1418e-01  +2.1484e-01  6.60e-04  1.57e-06  1.24e-04  2.74e-07  6.03e-06  8.52e-01  
 16  +2.1396e-01  +2.1400e-01  3.50e-05  8.33e-08  6.59e-06  1.46e-08  3.21e-07  9.51e-01  
 17  +2.1395e-01  +2.1395e-01  3.53e-07  8.39e-10  6.63e-08  1.47e-10  3.24e-09  9.90e-01  
 18  +2.1395e-01  +2.1395e-01  3.53e-09  8.39e-12  6.64e-10  1.47e-12  3.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.639ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:06 PM: Optimal value: 2.140e-01
(CVXPY) Oct 06 04:25:06 PM: Compilation took 1.089e-03 seconds
(CVXPY) Oct 06 04:25:06 PM: Solver (including time spent in interface) took 4.648e-02 seconds
Iteration: 24, Objective: 0.2140
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:06 PM: Your problem has 759 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:06 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 759
  constraints   = 1259
  nnz(P)        = 0
  nnz(A)        = 10769
  cones (total) = 1
    : Nonnegative = 1,  numel = 1259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +5.0289e+02  5.02e+02  9.61e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.4136e-01  +1.1106e+02  1.11e+02  4.39e-01  2.19e+01  3.85e-03  5.81e-01  5.80e-01  
  2  +5.0099e-01  +1.4769e+01  1.43e+01  1.34e-01  8.99e+00  2.22e-02  2.52e-01  9.90e-01  
  3  +4.8478e-01  +2.9162e+00  2.43e+00  1.96e-02  1.56e+00  7.12e-03  4.43e-02  8.51e-01  
  4  +4.4162e-01  +2.0752e+00  1.63e+00  6.61e-03  5.36e-01  9.10e-03  1.51e-02  6.79e-01  
  5  +4.1311e-01  +1.9946e+00  1.58e+00  4.70e-03  3.81e-01  1.01e-02  1.08e-02  3.59e-01  
  6  +3.8775e-01  +1.7680e+00  1.38e+00  3.70e-03  2.97e-01  7.46e-03  8.75e-03  3.24e-01  
  7  +3.2870e-01  +9.8075e-01  6.52e-01  1.86e-03  1.44e-01  6.28e-05  4.94e-03  7.78e-01  
  8  +2.7105e-01  +4.9179e-01  2.21e-01  6.14e-04  4.66e-02  3.02e-05  1.85e-03  6.77e-01  
  9  +2.4628e-01  +3.7362e-01  1.27e-01  3.37e-04  2.60e-02  3.21e-05  1.08e-03  6.03e-01  
 10  +2.2867e-01  +2.8506e-01  5.64e-02  1.43e-04  1.12e-02  1.72e-05  4.85e-04  6.46e-01  
 11  +2.2178e-01  +2.5282e-01  3.10e-02  7.66e-05  6.09e-03  1.07e-05  2.66e-04  5.54e-01  
 12  +2.1799e-01  +2.3519e-01  1.72e-02  4.18e-05  3.35e-03  6.81e-06  1.48e-04  6.54e-01  
 13  +2.1483e-01  +2.2162e-01  6.79e-03  1.64e-05  1.32e-03  2.78e-06  5.92e-05  6.94e-01  
 14  +2.1363e-01  +2.1668e-01  3.05e-03  7.27e-06  5.91e-04  1.32e-06  2.66e-05  7.03e-01  
 15  +2.1303e-01  +2.1431e-01  1.28e-03  3.04e-06  2.47e-04  5.77e-07  1.13e-05  8.27e-01  
 16  +2.1257e-01  +2.1264e-01  6.39e-05  1.52e-07  1.23e-05  2.83e-08  5.67e-07  9.55e-01  
 17  +2.1255e-01  +2.1255e-01  6.50e-07  1.54e-09  1.26e-07  2.88e-10  5.77e-09  9.90e-01  
 18  +2.1255e-01  +2.1255e-01  6.51e-09  1.55e-11  1.26e-09  2.89e-12  5.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.743ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:06 PM: Optimal value: 2.126e-01
(CVXPY) Oct 06 04:25:06 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:06 PM: Solver (including time spent in interface) took 4.716e-02 seconds
Iteration: 25, Objective: 0.2126
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:06 PM: Your problem has 769 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:06 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 769
  constraints   = 1269
  nnz(P)        = 0
  nnz(A)        = 10832
  cones (total) = 1
    : Nonnegative = 1,  numel = 1269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9908e-01  +5.0289e+02  5.02e+02  9.61e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.3954e-01  +1.1115e+02  1.11e+02  4.38e-01  2.18e+01  3.86e-03  5.80e-01  5.80e-01  
  2  +4.9948e-01  +1.4905e+01  1.44e+01  1.33e-01  8.88e+00  2.24e-02  2.51e-01  9.90e-01  
  3  +4.8191e-01  +2.7823e+00  2.30e+00  1.77e-02  1.41e+00  7.20e-03  4.02e-02  8.70e-01  
  4  +4.3203e-01  +1.9454e+00  1.51e+00  5.76e-03  4.64e-01  9.12e-03  1.32e-02  7.01e-01  
  5  +3.9553e-01  +1.8328e+00  1.44e+00  3.87e-03  3.12e-01  9.35e-03  9.02e-03  4.49e-01  
  6  +3.6892e-01  +1.2839e+00  9.15e-01  3.10e-03  2.41e-01  9.96e-04  7.88e-03  4.51e-01  
  7  +3.5291e-01  +1.1747e+00  8.22e-01  2.67e-03  2.06e-01  8.33e-04  6.90e-03  2.21e-01  
  8  +3.0127e-01  +8.6556e-01  5.64e-01  1.62e-03  1.23e-01  2.28e-04  4.55e-03  9.90e-01  
  9  +2.6150e-01  +4.9090e-01  2.29e-01  6.44e-04  4.88e-02  8.54e-05  1.99e-03  5.90e-01  
 10  +2.3688e-01  +3.4072e-01  1.04e-01  2.79e-04  2.14e-02  4.14e-05  9.20e-04  6.15e-01  
 11  +2.2523e-01  +2.7786e-01  5.26e-02  1.36e-04  1.06e-02  2.26e-05  4.65e-04  6.58e-01  
 12  +2.1909e-01  +2.4767e-01  2.86e-02  7.20e-05  5.65e-03  1.24e-05  2.54e-04  5.09e-01  
 13  +2.1360e-01  +2.2130e-01  7.70e-03  1.90e-05  1.50e-03  3.40e-06  6.98e-05  8.22e-01  
 14  +2.1206e-01  +2.1472e-01  2.66e-03  6.47e-06  5.09e-04  1.18e-06  2.46e-05  7.68e-01  
 15  +2.1134e-01  +2.1186e-01  5.14e-04  1.23e-06  9.71e-05  2.28e-07  4.81e-06  9.65e-01  
 16  +2.1115e-01  +2.1116e-01  8.77e-06  2.10e-08  1.65e-06  3.84e-09  8.24e-08  9.83e-01  
 17  +2.1115e-01  +2.1115e-01  8.78e-08  2.10e-10  1.65e-08  3.84e-11  8.25e-10  9.90e-01  
 18  +2.1115e-01  +2.1115e-01  8.79e-10  2.11e-12  1.65e-10  3.85e-13  8.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.4169ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:07 PM: Optimal value: 2.112e-01
(CVXPY) Oct 06 04:25:07 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:07 PM: Solver (including time spent in interface) took 4.634e-02 seconds
Iteration: 26, Objective: 0.2112
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:07 PM: Your problem has 779 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:07 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 779
  constraints   = 1279
  nnz(P)        = 0
  nnz(A)        = 11029
  cones (total) = 1
    : Nonnegative = 1,  numel = 1279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0294e+02  5.02e+02  9.61e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.3835e-01  +1.1116e+02  1.11e+02  4.38e-01  2.17e+01  3.87e-03  5.78e-01  5.80e-01  
  2  +4.9844e-01  +1.4962e+01  1.45e+01  1.32e-01  8.78e+00  2.25e-02  2.48e-01  9.90e-01  
  3  +4.7961e-01  +2.6607e+00  2.18e+00  1.63e-02  1.30e+00  7.24e-03  3.70e-02  8.79e-01  
  4  +4.3195e-01  +1.9372e+00  1.51e+00  5.95e-03  4.78e-01  8.68e-03  1.37e-02  6.65e-01  
  5  +4.0170e-01  +1.8306e+00  1.43e+00  4.24e-03  3.41e-01  8.86e-03  9.86e-03  3.85e-01  
  6  +3.6099e-01  +1.2837e+00  9.23e-01  2.87e-03  2.24e-01  1.08e-03  7.19e-03  6.24e-01  
  7  +3.2342e-01  +9.4927e-01  6.26e-01  1.85e-03  1.43e-01  6.56e-04  4.92e-03  3.79e-01  
  8  +2.7029e-01  +5.4356e-01  2.73e-01  7.71e-04  5.86e-02  1.97e-04  2.29e-03  7.12e-01  
  9  +2.3819e-01  +3.5112e-01  1.13e-01  3.07e-04  2.35e-02  7.45e-05  9.93e-04  6.86e-01  
 10  +2.2467e-01  +2.8115e-01  5.65e-02  1.47e-04  1.14e-02  3.59e-05  4.96e-04  6.17e-01  
 11  +2.2005e-01  +2.5907e-01  3.90e-02  9.82e-05  7.74e-03  2.40e-05  3.36e-04  4.67e-01  
 12  +2.1488e-01  +2.3362e-01  1.87e-02  4.64e-05  3.67e-03  9.99e-06  1.64e-04  7.74e-01  
 13  +2.1258e-01  +2.2354e-01  1.10e-02  2.67e-05  2.13e-03  5.60e-06  9.60e-05  6.62e-01  
 14  +2.0976e-01  +2.1229e-01  2.53e-03  6.07e-06  4.86e-04  1.24e-06  2.25e-05  8.14e-01  
 15  +2.0901e-01  +2.0946e-01  4.42e-04  1.06e-06  8.48e-05  2.07e-07  4.02e-06  8.80e-01  
 16  +2.0885e-01  +2.0886e-01  6.31e-06  1.51e-08  1.21e-06  2.85e-09  5.77e-08  9.87e-01  
 17  +2.0885e-01  +2.0885e-01  6.31e-08  1.52e-10  1.21e-08  2.86e-11  5.77e-10  9.90e-01  
 18  +2.0885e-01  +2.0885e-01  6.32e-10  1.52e-12  1.21e-10  2.86e-13  5.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.6481ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:07 PM: Optimal value: 2.089e-01
(CVXPY) Oct 06 04:25:07 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:07 PM: Solver (including time spent in interface) took 6.144e-02 seconds
Iteration: 27, Objective: 0.2089
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:07 PM: Your problem has 789 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:07 PM: Finished problem compilation (took 1.632e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 789
  constraints   = 1289
  nnz(P)        = 0
  nnz(A)        = 11094
  cones (total) = 1
    : Nonnegative = 1,  numel = 1289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0298e+02  5.02e+02  9.61e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.3770e-01  +1.1117e+02  1.11e+02  4.38e-01  2.16e+01  3.87e-03  5.78e-01  5.80e-01  
  2  +4.9763e-01  +1.4999e+01  1.45e+01  1.31e-01  8.69e+00  2.25e-02  2.48e-01  9.90e-01  
  3  +4.7809e-01  +2.7268e+00  2.25e+00  1.65e-02  1.31e+00  7.42e-03  3.76e-02  8.77e-01  
  4  +4.3118e-01  +1.9607e+00  1.53e+00  6.17e-03  4.93e-01  8.34e-03  1.43e-02  6.56e-01  
  5  +4.0324e-01  +1.8643e+00  1.46e+00  4.49e-03  3.59e-01  8.70e-03  1.05e-02  3.52e-01  
  6  +3.6572e-01  +1.5015e+00  1.14e+00  3.15e-03  2.49e-01  4.47e-03  7.66e-03  4.83e-01  
  7  +2.9387e-01  +6.5276e-01  3.59e-01  1.02e-03  7.73e-02  1.83e-04  2.85e-03  7.94e-01  
  8  +2.6429e-01  +4.9423e-01  2.30e-01  6.36e-04  4.84e-02  1.18e-04  1.90e-03  4.29e-01  
  9  +2.3523e-01  +3.3542e-01  1.00e-01  2.67e-04  2.05e-02  5.14e-05  8.67e-04  6.01e-01  
 10  +2.2300e-01  +2.7562e-01  5.26e-02  1.35e-04  1.05e-02  2.71e-05  4.56e-04  6.06e-01  
 11  +2.1824e-01  +2.5349e-01  3.53e-02  8.86e-05  6.97e-03  1.81e-05  3.04e-04  4.37e-01  
 12  +2.1307e-01  +2.2918e-01  1.61e-02  3.99e-05  3.15e-03  7.96e-06  1.42e-04  7.03e-01  
 13  +2.1134e-01  +2.2155e-01  1.02e-02  2.50e-05  1.99e-03  5.01e-06  8.96e-05  5.34e-01  
 14  +2.0885e-01  +2.1134e-01  2.49e-03  6.02e-06  4.80e-04  1.18e-06  2.22e-05  8.50e-01  
 15  +2.0821e-01  +2.0891e-01  6.99e-04  1.68e-06  1.34e-04  3.23e-07  6.33e-06  7.87e-01  
 16  +2.0796e-01  +2.0799e-01  2.72e-05  6.56e-08  5.21e-06  1.17e-08  2.50e-07  9.73e-01  
 17  +2.0795e-01  +2.0795e-01  2.87e-07  6.93e-10  5.51e-08  1.23e-10  2.64e-09  9.89e-01  
 18  +2.0795e-01  +2.0795e-01  2.90e-09  7.00e-12  5.57e-10  1.24e-12  2.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.9182ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:07 PM: Optimal value: 2.080e-01
(CVXPY) Oct 06 04:25:07 PM: Compilation took 1.632e-02 seconds
(CVXPY) Oct 06 04:25:07 PM: Solver (including time spent in interface) took 6.206e-02 seconds
Iteration: 28, Objective: 0.2080
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:07 PM: Your problem has 799 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:07 PM: Finished problem compilation (took 1.572e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 799
  constraints   = 1299
  nnz(P)        = 0
  nnz(A)        = 11155
  cones (total) = 1
    : Nonnegative = 1,  numel = 1299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +5.0299e+02  5.02e+02  9.61e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.3666e-01  +1.1121e+02  1.11e+02  4.39e-01  2.15e+01  3.87e-03  5.78e-01  5.80e-01  
  2  +4.9653e-01  +1.5082e+01  1.46e+01  1.31e-01  8.62e+00  2.26e-02  2.48e-01  9.90e-01  
  3  +4.7635e-01  +2.7569e+00  2.28e+00  1.64e-02  1.29e+00  7.57e-03  3.74e-02  8.78e-01  
  4  +4.3007e-01  +2.0268e+00  1.60e+00  6.52e-03  5.18e-01  8.28e-03  1.51e-02  6.37e-01  
  5  +3.9011e-01  +1.8596e+00  1.47e+00  4.23e-03  3.36e-01  8.10e-03  9.98e-03  4.82e-01  
  6  +3.6171e-01  +1.3018e+00  9.40e-01  3.33e-03  2.55e-01  6.01e-05  8.64e-03  6.03e-01  
  7  +3.0593e-01  +8.6150e-01  5.56e-01  1.67e-03  1.27e-01  1.13e-04  4.64e-03  6.60e-01  
  8  +2.5864e-01  +4.7661e-01  2.18e-01  6.26e-04  4.70e-02  4.89e-05  1.93e-03  6.48e-01  
  9  +2.2985e-01  +3.1798e-01  8.81e-02  2.39e-04  1.83e-02  2.59e-05  7.96e-04  6.95e-01  
 10  +2.2082e-01  +2.7342e-01  5.26e-02  1.37e-04  1.06e-02  1.82e-05  4.68e-04  5.74e-01  
 11  +2.1559e-01  +2.4893e-01  3.33e-02  8.49e-05  6.66e-03  1.20e-05  2.96e-04  4.29e-01  
 12  +2.1076e-01  +2.2559e-01  1.48e-02  3.72e-05  2.93e-03  5.85e-06  1.34e-04  7.21e-01  
 13  +2.0840e-01  +2.1521e-01  6.81e-03  1.68e-05  1.33e-03  2.90e-06  6.14e-05  7.47e-01  
 14  +2.0698e-01  +2.0957e-01  2.59e-03  6.33e-06  5.04e-04  1.12e-06  2.36e-05  7.26e-01  
 15  +2.0631e-01  +2.0701e-01  6.98e-04  1.69e-06  1.35e-04  3.03e-07  6.42e-06  8.60e-01  
 16  +2.0606e-01  +2.0609e-01  3.04e-05  7.37e-08  5.86e-06  1.26e-08  2.83e-07  9.64e-01  
 17  +2.0605e-01  +2.0605e-01  3.20e-07  7.76e-10  6.17e-08  1.33e-10  2.98e-09  9.89e-01  
 18  +2.0605e-01  +2.0605e-01  3.23e-09  7.83e-12  6.22e-10  1.34e-12  3.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.7176ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:07 PM: Optimal value: 2.061e-01
(CVXPY) Oct 06 04:25:07 PM: Compilation took 1.572e-02 seconds
(CVXPY) Oct 06 04:25:07 PM: Solver (including time spent in interface) took 4.774e-02 seconds
Iteration: 29, Objective: 0.2061
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:08 PM: Your problem has 809 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:08 PM: Finished problem compilation (took 1.675e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 809
  constraints   = 1309
  nnz(P)        = 0
  nnz(A)        = 11222
  cones (total) = 1
    : Nonnegative = 1,  numel = 1309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9903e-01  +5.0300e+02  5.02e+02  9.61e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.3573e-01  +1.1127e+02  1.11e+02  4.40e-01  2.14e+01  3.87e-03  5.78e-01  5.80e-01  
  2  +4.9562e-01  +1.5131e+01  1.46e+01  1.30e-01  8.56e+00  2.27e-02  2.48e-01  9.90e-01  
  3  +4.7488e-01  +2.7685e+00  2.29e+00  1.63e-02  1.28e+00  7.65e-03  3.72e-02  8.79e-01  
  4  +4.2899e-01  +2.0284e+00  1.60e+00  6.63e-03  5.25e-01  8.00e-03  1.55e-02  6.29e-01  
  5  +3.8747e-01  +1.8663e+00  1.48e+00  4.26e-03  3.37e-01  7.82e-03  1.01e-02  5.00e-01  
  6  +3.5863e-01  +1.3146e+00  9.56e-01  3.36e-03  2.56e-01  5.89e-05  8.71e-03  6.31e-01  
  7  +2.8555e-01  +6.6187e-01  3.76e-01  1.09e-03  8.14e-02  7.19e-05  3.10e-03  7.66e-01  
  8  +2.5728e-01  +4.8391e-01  2.27e-01  6.40e-04  4.82e-02  5.25e-05  1.95e-03  4.51e-01  
  9  +2.2764e-01  +3.0835e-01  8.07e-02  2.18e-04  1.67e-02  2.25e-05  7.29e-04  6.90e-01  
 10  +2.1905e-01  +2.6591e-01  4.69e-02  1.22e-04  9.44e-03  1.55e-05  4.19e-04  5.74e-01  
 11  +2.1449e-01  +2.4442e-01  2.99e-02  7.62e-05  5.97e-03  1.05e-05  2.67e-04  4.60e-01  
 12  +2.0976e-01  +2.2193e-01  1.22e-02  3.06e-05  2.40e-03  4.72e-06  1.11e-04  7.48e-01  
 13  +2.0749e-01  +2.1203e-01  4.54e-03  1.14e-05  8.92e-04  1.78e-06  4.25e-05  6.91e-01  
 14  +2.0652e-01  +2.0794e-01  1.42e-03  3.56e-06  2.79e-04  5.64e-07  1.35e-05  7.28e-01  
 15  +2.0630e-01  +2.0706e-01  7.51e-04  1.87e-06  1.47e-04  3.08e-07  7.09e-06  6.08e-01  
 16  +2.0610e-01  +2.0625e-01  1.49e-04  3.71e-07  2.92e-05  6.29e-08  1.42e-06  9.62e-01  
 17  +2.0605e-01  +2.0605e-01  3.51e-06  8.73e-09  6.87e-07  1.49e-09  3.33e-08  9.77e-01  
 18  +2.0605e-01  +2.0605e-01  3.52e-08  8.74e-11  6.88e-09  1.49e-11  3.34e-10  9.90e-01  
 19  +2.0605e-01  +2.0605e-01  3.52e-10  8.74e-13  6.89e-11  1.49e-13  3.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 55.8997ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:08 PM: Optimal value: 2.061e-01
(CVXPY) Oct 06 04:25:08 PM: Compilation took 1.675e-02 seconds
(CVXPY) Oct 06 04:25:08 PM: Solver (including time spent in interface) took 6.205e-02 seconds
Iteration: 30, Objective: 0.2061
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:08 PM: Your problem has 819 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:08 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 819
  constraints   = 1319
  nnz(P)        = 0
  nnz(A)        = 11251
  cones (total) = 1
    : Nonnegative = 1,  numel = 1319

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9903e-01  +5.0301e+02  5.03e+02  9.62e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.3540e-01  +1.1128e+02  1.11e+02  4.40e-01  2.12e+01  3.87e-03  5.78e-01  5.80e-01  
  2  +4.9523e-01  +1.5157e+01  1.47e+01  1.30e-01  8.53e+00  2.28e-02  2.47e-01  9.90e-01  
  3  +4.7428e-01  +2.7855e+00  2.31e+00  1.63e-02  1.28e+00  7.71e-03  3.73e-02  8.77e-01  
  4  +4.2836e-01  +2.0395e+00  1.61e+00  6.68e-03  5.28e-01  7.96e-03  1.56e-02  6.27e-01  
  5  +3.8991e-01  +1.8929e+00  1.50e+00  4.43e-03  3.50e-01  7.96e-03  1.05e-02  4.62e-01  
  6  +3.7307e-01  +1.4594e+00  1.09e+00  3.74e-03  2.89e-01  2.41e-03  9.36e-03  3.53e-01  
  7  +3.5432e-01  +1.3061e+00  9.52e-01  3.12e-03  2.39e-01  1.91e-03  7.98e-03  2.39e-01  
  8  +2.9671e-01  +8.8297e-01  5.86e-01  1.72e-03  1.29e-01  1.32e-04  4.84e-03  9.90e-01  
  9  +2.5584e-01  +4.8462e-01  2.29e-01  6.60e-04  4.92e-02  5.29e-05  2.05e-03  6.19e-01  
 10  +2.2775e-01  +3.1499e-01  8.72e-02  2.39e-04  1.81e-02  2.58e-05  8.01e-04  7.05e-01  
 11  +2.1917e-01  +2.7127e-01  5.21e-02  1.37e-04  1.05e-02  1.77e-05  4.71e-04  5.48e-01  
 12  +2.1468e-01  +2.4939e-01  3.47e-02  8.94e-05  6.95e-03  1.22e-05  3.13e-04  4.03e-01  
 13  +2.0971e-01  +2.2460e-01  1.49e-02  3.77e-05  2.95e-03  5.83e-06  1.36e-04  7.41e-01  
 14  +2.0744e-01  +2.1472e-01  7.28e-03  1.82e-05  1.43e-03  2.96e-06  6.67e-05  6.44e-01  
 15  +2.0595e-01  +2.0856e-01  2.60e-03  6.45e-06  5.09e-04  1.08e-06  2.42e-05  7.23e-01  
 16  +2.0525e-01  +2.0577e-01  5.28e-04  1.30e-06  1.03e-04  2.18e-07  4.98e-06  8.77e-01  
 17  +2.0506e-01  +2.0508e-01  1.85e-05  4.56e-08  3.59e-06  7.50e-09  1.77e-07  9.80e-01  
 18  +2.0505e-01  +2.0505e-01  1.89e-07  4.64e-10  3.65e-08  7.62e-11  1.80e-09  9.90e-01  
 19  +2.0505e-01  +2.0505e-01  1.90e-09  4.67e-12  3.67e-10  7.66e-13  1.81e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.5053ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:08 PM: Optimal value: 2.051e-01
(CVXPY) Oct 06 04:25:08 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:08 PM: Solver (including time spent in interface) took 6.251e-02 seconds
Iteration: 31, Objective: 0.2051
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:08 PM: Your problem has 822 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:08 PM: Finished problem compilation (took 1.572e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 822
  constraints   = 1322
  nnz(P)        = 0
  nnz(A)        = 11283
  cones (total) = 1
    : Nonnegative = 1,  numel = 1322

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +5.0302e+02  5.03e+02  9.62e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.3507e-01  +1.1130e+02  1.11e+02  4.41e-01  2.12e+01  3.87e-03  5.78e-01  5.80e-01  
  2  +4.9478e-01  +1.5174e+01  1.47e+01  1.30e-01  8.51e+00  2.28e-02  2.47e-01  9.90e-01  
  3  +4.7333e-01  +2.7050e+00  2.23e+00  1.56e-02  1.22e+00  7.65e-03  3.58e-02  8.84e-01  
  4  +4.2656e-01  +2.0234e+00  1.60e+00  6.58e-03  5.19e-01  7.94e-03  1.54e-02  6.25e-01  
  5  +3.8923e-01  +1.8641e+00  1.47e+00  4.44e-03  3.49e-01  7.16e-03  1.06e-02  4.85e-01  
  6  +3.5922e-01  +1.3415e+00  9.82e-01  3.47e-03  2.64e-01  5.65e-05  8.98e-03  6.66e-01  
  7  +2.8875e-01  +6.9123e-01  4.02e-01  1.17e-03  8.79e-02  6.09e-05  3.34e-03  7.20e-01  
  8  +2.5748e-01  +4.8951e-01  2.32e-01  6.61e-04  4.95e-02  4.55e-05  2.02e-03  4.75e-01  
  9  +2.2836e-01  +3.1810e-01  8.97e-02  2.45e-04  1.86e-02  2.15e-05  8.17e-04  6.57e-01  
 10  +2.1941e-01  +2.7381e-01  5.44e-02  1.42e-04  1.10e-02  1.66e-05  4.88e-04  5.70e-01  
 11  +2.1500e-01  +2.5285e-01  3.78e-02  9.72e-05  7.56e-03  1.22e-05  3.39e-04  3.82e-01  
 12  +2.1005e-01  +2.2884e-01  1.88e-02  4.76e-05  3.72e-03  6.81e-06  1.71e-04  6.54e-01  
 13  +2.0748e-01  +2.1724e-01  9.76e-03  2.44e-05  1.92e-03  3.86e-06  8.89e-05  6.52e-01  
 14  +2.0594e-01  +2.1098e-01  5.03e-03  1.23e-05  9.85e-04  2.07e-06  4.55e-05  5.88e-01  
 15  +2.0456e-01  +2.0560e-01  1.05e-03  2.53e-06  2.03e-04  4.36e-07  9.55e-06  8.59e-01  
 16  +2.0419e-01  +2.0423e-01  3.78e-05  9.12e-08  7.31e-06  1.60e-08  3.47e-07  9.90e-01  
 17  +2.0418e-01  +2.0418e-01  3.80e-07  9.19e-10  7.37e-08  1.61e-10  3.50e-09  9.90e-01  
 18  +2.0418e-01  +2.0418e-01  3.80e-09  9.19e-12  7.37e-10  1.61e-12  3.50e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.6642ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:08 PM: Optimal value: 2.042e-01
(CVXPY) Oct 06 04:25:08 PM: Compilation took 1.572e-02 seconds
(CVXPY) Oct 06 04:25:08 PM: Solver (including time spent in interface) took 6.338e-02 seconds
Iteration: 32, Objective: 0.2042
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:08 PM: Your problem has 823 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:08 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 823
  constraints   = 1323
  nnz(P)        = 0
  nnz(A)        = 11314
  cones (total) = 1
    : Nonnegative = 1,  numel = 1323

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +5.0303e+02  5.03e+02  9.62e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.3500e-01  +1.1131e+02  1.11e+02  4.41e-01  2.12e+01  3.87e-03  5.78e-01  5.80e-01  
  2  +4.9471e-01  +1.5177e+01  1.47e+01  1.30e-01  8.50e+00  2.28e-02  2.47e-01  9.90e-01  
  3  +4.7313e-01  +2.6487e+00  2.18e+00  1.52e-02  1.19e+00  7.59e-03  3.49e-02  8.87e-01  
  4  +4.2598e-01  +2.0042e+00  1.58e+00  6.46e-03  5.10e-01  7.96e-03  1.51e-02  6.24e-01  
  5  +3.9032e-01  +1.8494e+00  1.46e+00  4.45e-03  3.50e-01  7.01e-03  1.06e-02  4.75e-01  
  6  +3.5929e-01  +1.3422e+00  9.83e-01  3.46e-03  2.64e-01  5.62e-05  8.97e-03  6.79e-01  
  7  +2.9232e-01  +7.2124e-01  4.29e-01  1.26e-03  9.46e-02  5.66e-05  3.57e-03  6.80e-01  
  8  +2.5806e-01  +4.9087e-01  2.33e-01  6.67e-04  4.99e-02  4.12e-05  2.04e-03  5.04e-01  
  9  +2.2856e-01  +3.1830e-01  8.97e-02  2.45e-04  1.86e-02  2.03e-05  8.19e-04  6.66e-01  
 10  +2.2018e-01  +2.7727e-01  5.71e-02  1.50e-04  1.15e-02  1.66e-05  5.12e-04  5.38e-01  
 11  +2.1487e-01  +2.5230e-01  3.74e-02  9.59e-05  7.47e-03  1.15e-05  3.34e-04  4.08e-01  
 12  +2.1128e-01  +2.3514e-01  2.39e-02  6.00e-05  4.73e-03  8.17e-06  2.12e-04  4.99e-01  
 13  +2.0785e-01  +2.1988e-01  1.20e-02  2.95e-05  2.36e-03  4.65e-06  1.06e-04  6.79e-01  
 14  +2.0525e-01  +2.0931e-01  4.06e-03  9.83e-06  7.89e-04  1.63e-06  3.64e-05  7.48e-01  
 15  +2.0395e-01  +2.0430e-01  3.46e-04  8.35e-07  6.68e-05  1.31e-07  3.17e-06  9.23e-01  
 16  +2.0383e-01  +2.0383e-01  3.92e-06  9.46e-09  7.55e-07  1.47e-09  3.61e-08  9.89e-01  
 17  +2.0383e-01  +2.0383e-01  3.92e-08  9.46e-11  7.56e-09  1.47e-11  3.61e-10  9.90e-01  
 18  +2.0383e-01  +2.0383e-01  3.93e-10  9.48e-13  7.57e-11  1.47e-13  3.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.7567ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:08 PM: Optimal value: 2.038e-01
(CVXPY) Oct 06 04:25:08 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:08 PM: Solver (including time spent in interface) took 4.739e-02 seconds
Iteration: 33, Objective: 0.2038
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:09 PM: Your problem has 833 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:09 PM: Finished problem compilation (took 1.556e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 833
  constraints   = 1333
  nnz(P)        = 0
  nnz(A)        = 11392
  cones (total) = 1
    : Nonnegative = 1,  numel = 1333

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9901e-01  +5.0269e+02  5.02e+02  9.62e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.3358e-01  +1.1133e+02  1.11e+02  4.41e-01  2.11e+01  3.88e-03  5.77e-01  5.80e-01  
  2  +4.9286e-01  +1.5254e+01  1.48e+01  1.29e-01  8.44e+00  2.29e-02  2.47e-01  9.90e-01  
  3  +4.6990e-01  +2.4907e+00  2.02e+00  1.37e-02  1.07e+00  7.52e-03  3.16e-02  9.03e-01  
  4  +4.1906e-01  +1.9846e+00  1.57e+00  6.14e-03  4.81e-01  8.04e-03  1.45e-02  6.30e-01  
  5  +3.8939e-01  +1.8698e+00  1.48e+00  4.75e-03  3.69e-01  5.96e-03  1.15e-02  4.52e-01  
  6  +3.5709e-01  +1.3872e+00  1.03e+00  3.63e-03  2.75e-01  5.06e-05  9.42e-03  7.41e-01  
  7  +2.8574e-01  +6.6757e-01  3.82e-01  1.12e-03  8.29e-02  3.35e-05  3.18e-03  6.96e-01  
  8  +2.5544e-01  +4.8332e-01  2.28e-01  6.50e-04  4.85e-02  3.42e-05  1.99e-03  4.70e-01  
  9  +2.2754e-01  +3.1904e-01  9.15e-02  2.51e-04  1.90e-02  1.84e-05  8.37e-04  6.43e-01  
 10  +2.1984e-01  +2.8143e-01  6.16e-02  1.63e-04  1.25e-02  1.55e-05  5.55e-04  4.61e-01  
 11  +2.1440e-01  +2.5521e-01  4.08e-02  1.05e-04  8.21e-03  1.16e-05  3.66e-04  4.33e-01  
 12  +2.1116e-01  +2.3946e-01  2.83e-02  7.17e-05  5.66e-03  9.02e-06  2.52e-04  4.41e-01  
 13  +2.0659e-01  +2.1932e-01  1.27e-02  3.10e-05  2.52e-03  4.73e-06  1.11e-04  6.99e-01  
 14  +2.0538e-01  +2.1406e-01  8.68e-03  2.04e-05  1.70e-03  3.73e-06  7.36e-05  6.91e-01  
 15  +2.0383e-01  +2.0843e-01  4.60e-03  1.04e-05  8.88e-04  2.09e-06  3.80e-05  7.67e-01  
 16  +2.0224e-01  +2.0278e-01  5.41e-04  1.21e-06  1.04e-04  2.50e-07  4.54e-06  9.90e-01  
 17  +2.0200e-01  +2.0201e-01  7.17e-06  1.60e-08  1.37e-06  3.17e-09  6.04e-08  9.87e-01  
 18  +2.0200e-01  +2.0200e-01  7.18e-08  1.61e-10  1.37e-08  3.17e-11  6.05e-10  9.90e-01  
 19  +2.0200e-01  +2.0200e-01  7.18e-10  1.61e-12  1.37e-10  3.18e-13  6.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.9786ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:09 PM: Optimal value: 2.020e-01
(CVXPY) Oct 06 04:25:09 PM: Compilation took 1.556e-02 seconds
(CVXPY) Oct 06 04:25:09 PM: Solver (including time spent in interface) took 6.256e-02 seconds
Iteration: 34, Objective: 0.2020
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:09 PM: Your problem has 843 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:09 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 843
  constraints   = 1343
  nnz(P)        = 0
  nnz(A)        = 11473
  cones (total) = 1
    : Nonnegative = 1,  numel = 1343

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9900e-01  +5.0268e+02  5.02e+02  9.62e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.3340e-01  +1.1131e+02  1.11e+02  4.42e-01  2.10e+01  3.88e-03  5.77e-01  5.80e-01  
  2  +4.9259e-01  +1.5252e+01  1.48e+01  1.29e-01  8.38e+00  2.29e-02  2.47e-01  9.90e-01  
  3  +4.6908e-01  +2.5031e+00  2.03e+00  1.37e-02  1.07e+00  7.52e-03  3.17e-02  9.07e-01  
  4  +4.1836e-01  +1.9827e+00  1.56e+00  6.16e-03  4.81e-01  7.89e-03  1.46e-02  6.26e-01  
  5  +3.9083e-01  +1.8307e+00  1.44e+00  4.73e-03  3.67e-01  5.53e-03  1.15e-02  4.53e-01  
  6  +3.5606e-01  +1.4140e+00  1.06e+00  3.65e-03  2.77e-01  4.88e-04  9.43e-03  7.16e-01  
  7  +2.8745e-01  +6.9066e-01  4.03e-01  1.17e-03  8.72e-02  1.76e-04  3.32e-03  6.80e-01  
  8  +2.5483e-01  +4.8243e-01  2.28e-01  6.48e-04  4.83e-02  1.02e-04  1.98e-03  4.91e-01  
  9  +2.2703e-01  +3.1995e-01  9.29e-02  2.54e-04  1.92e-02  4.41e-05  8.41e-04  7.06e-01  
 10  +2.1878e-01  +2.7882e-01  6.00e-02  1.58e-04  1.22e-02  2.90e-05  5.35e-04  4.90e-01  
 11  +2.1233e-01  +2.4773e-01  3.54e-02  9.06e-05  7.08e-03  1.72e-05  3.14e-04  4.77e-01  
 12  +2.0967e-01  +2.3472e-01  2.51e-02  6.26e-05  4.99e-03  1.22e-05  2.19e-04  4.65e-01  
 13  +2.0567e-01  +2.1724e-01  1.16e-02  2.73e-05  2.26e-03  5.86e-06  9.74e-05  7.50e-01  
 14  +2.0312e-01  +2.0828e-01  5.15e-03  1.15e-05  9.84e-04  2.55e-06  4.24e-05  6.75e-01  
 15  +2.0129e-01  +2.0175e-01  4.54e-04  9.98e-07  8.57e-05  2.01e-07  3.80e-06  9.41e-01  
 16  +2.0110e-01  +2.0111e-01  5.60e-06  1.23e-08  1.05e-06  2.41e-09  4.71e-08  9.88e-01  
 17  +2.0110e-01  +2.0110e-01  5.62e-08  1.23e-10  1.06e-08  2.41e-11  4.72e-10  9.90e-01  
 18  +2.0110e-01  +2.0110e-01  5.63e-10  1.24e-12  1.06e-10  2.42e-13  4.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.091ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:09 PM: Optimal value: 2.011e-01
(CVXPY) Oct 06 04:25:09 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:09 PM: Solver (including time spent in interface) took 4.696e-02 seconds
Iteration: 35, Objective: 0.2011
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:09 PM: Your problem has 853 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:09 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 853
  constraints   = 1353
  nnz(P)        = 0
  nnz(A)        = 11594
  cones (total) = 1
    : Nonnegative = 1,  numel = 1353

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9901e-01  +5.0267e+02  5.02e+02  9.62e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.3301e-01  +1.1129e+02  1.11e+02  4.42e-01  2.09e+01  3.88e-03  5.77e-01  5.80e-01  
  2  +4.9199e-01  +1.5282e+01  1.48e+01  1.29e-01  8.30e+00  2.30e-02  2.46e-01  9.90e-01  
  3  +4.6736e-01  +2.4586e+00  1.99e+00  1.31e-02  1.02e+00  7.56e-03  3.06e-02  9.13e-01  
  4  +4.1565e-01  +2.0124e+00  1.60e+00  6.19e-03  4.81e-01  8.02e-03  1.47e-02  6.20e-01  
  5  +3.8989e-01  +1.8562e+00  1.47e+00  4.86e-03  3.75e-01  5.41e-03  1.18e-02  4.41e-01  
  6  +3.5458e-01  +1.4397e+00  1.09e+00  3.71e-03  2.80e-01  5.66e-04  9.61e-03  7.23e-01  
  7  +2.8839e-01  +7.0537e-01  4.17e-01  1.22e-03  9.02e-02  1.99e-04  3.45e-03  6.73e-01  
  8  +2.5449e-01  +4.8191e-01  2.27e-01  6.51e-04  4.83e-02  1.10e-04  2.00e-03  5.09e-01  
  9  +2.2679e-01  +3.1943e-01  9.26e-02  2.54e-04  1.91e-02  4.65e-05  8.42e-04  7.06e-01  
 10  +2.1872e-01  +2.7999e-01  6.13e-02  1.61e-04  1.24e-02  3.10e-05  5.44e-04  5.10e-01  
 11  +2.1100e-01  +2.4200e-01  3.10e-02  7.91e-05  6.19e-03  1.55e-05  2.76e-04  6.14e-01  
 12  +2.0768e-01  +2.2671e-01  1.90e-02  4.72e-05  3.77e-03  9.31e-06  1.67e-04  5.78e-01  
 13  +2.0479e-01  +2.1452e-01  9.72e-03  2.31e-05  1.90e-03  4.76e-06  8.31e-05  7.22e-01  
 14  +2.0398e-01  +2.1123e-01  7.26e-03  1.68e-05  1.40e-03  3.54e-06  6.09e-05  5.71e-01  
 15  +2.0184e-01  +2.0362e-01  1.78e-03  4.00e-06  3.40e-04  8.45e-07  1.50e-05  7.88e-01  
 16  +2.0120e-01  +2.0145e-01  2.44e-04  5.39e-07  4.60e-05  1.16e-07  2.07e-06  9.13e-01  
 17  +2.0110e-01  +2.0110e-01  2.79e-06  6.14e-09  5.25e-07  1.31e-09  2.36e-08  9.90e-01  
 18  +2.0110e-01  +2.0110e-01  2.79e-08  6.16e-11  5.26e-09  1.31e-11  2.37e-10  9.90e-01  
 19  +2.0110e-01  +2.0110e-01  2.80e-10  6.18e-13  5.28e-11  1.32e-13  2.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.1733ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:09 PM: Optimal value: 2.011e-01
(CVXPY) Oct 06 04:25:09 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:25:09 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 36, Objective: 0.2011
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:09 PM: Your problem has 863 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:09 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 863
  constraints   = 1363
  nnz(P)        = 0
  nnz(A)        = 11666
  cones (total) = 1
    : Nonnegative = 1,  numel = 1363

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9900e-01  +5.0266e+02  5.02e+02  9.62e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.3194e-01  +1.1133e+02  1.11e+02  4.42e-01  2.08e+01  3.88e-03  5.76e-01  5.80e-01  
  2  +4.9114e-01  +1.5316e+01  1.48e+01  1.28e-01  8.26e+00  2.30e-02  2.46e-01  9.90e-01  
  3  +4.6614e-01  +2.4404e+00  1.97e+00  1.30e-02  1.00e+00  7.52e-03  3.02e-02  9.14e-01  
  4  +4.1402e-01  +2.0458e+00  1.63e+00  6.30e-03  4.88e-01  8.06e-03  1.50e-02  6.12e-01  
  5  +3.9041e-01  +1.8760e+00  1.49e+00  5.02e-03  3.86e-01  5.37e-03  1.23e-02  4.20e-01  
  6  +3.5333e-01  +1.4704e+00  1.12e+00  3.79e-03  2.85e-01  7.17e-04  9.79e-03  7.25e-01  
  7  +2.8881e-01  +7.1407e-01  4.25e-01  1.25e-03  9.25e-02  2.37e-04  3.54e-03  6.69e-01  
  8  +2.5351e-01  +4.8046e-01  2.27e-01  6.54e-04  4.84e-02  1.25e-04  2.01e-03  5.22e-01  
  9  +2.2618e-01  +3.1780e-01  9.16e-02  2.54e-04  1.90e-02  5.04e-05  8.45e-04  6.48e-01  
 10  +2.1782e-01  +2.7719e-01  5.94e-02  1.58e-04  1.21e-02  3.23e-05  5.36e-04  5.04e-01  
 11  +2.1137e-01  +2.4553e-01  3.42e-02  8.86e-05  6.87e-03  1.81e-05  3.10e-04  5.25e-01  
 12  +2.0904e-01  +2.3473e-01  2.57e-02  6.50e-05  5.13e-03  1.33e-05  2.28e-04  4.32e-01  
 13  +2.0644e-01  +2.2323e-01  1.68e-02  4.04e-05  3.30e-03  8.63e-06  1.43e-04  6.22e-01  
 14  +2.0313e-01  +2.1053e-01  7.40e-03  1.70e-05  1.43e-03  3.65e-06  6.19e-05  7.58e-01  
 15  +2.0214e-01  +2.0632e-01  4.19e-03  9.67e-06  8.05e-04  2.01e-06  3.58e-05  9.67e-01  
 16  +2.0042e-01  +2.0069e-01  2.67e-04  6.07e-07  5.09e-05  1.13e-07  2.31e-06  9.58e-01  
 17  +2.0030e-01  +2.0030e-01  2.96e-06  6.72e-09  5.62e-07  1.24e-09  2.56e-08  9.89e-01  
 18  +2.0030e-01  +2.0030e-01  2.96e-08  6.73e-11  5.63e-09  1.24e-11  2.57e-10  9.90e-01  
 19  +2.0030e-01  +2.0030e-01  2.97e-10  6.73e-13  5.63e-11  1.24e-13  2.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.9817ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:10 PM: Optimal value: 2.003e-01
(CVXPY) Oct 06 04:25:10 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:10 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 37, Objective: 0.2003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:10 PM: Your problem has 868 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:10 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 868
  constraints   = 1368
  nnz(P)        = 0
  nnz(A)        = 11792
  cones (total) = 1
    : Nonnegative = 1,  numel = 1368

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9899e-01  +5.0270e+02  5.02e+02  9.62e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.3225e-01  +1.1127e+02  1.11e+02  4.42e-01  2.07e+01  3.88e-03  5.76e-01  5.80e-01  
  2  +4.9112e-01  +1.5292e+01  1.48e+01  1.28e-01  8.22e+00  2.30e-02  2.45e-01  9.90e-01  
  3  +4.6584e-01  +2.4565e+00  1.99e+00  1.30e-02  1.01e+00  7.53e-03  3.04e-02  9.13e-01  
  4  +4.1268e-01  +2.0325e+00  1.62e+00  6.26e-03  4.84e-01  7.88e-03  1.49e-02  6.19e-01  
  5  +3.8956e-01  +1.8640e+00  1.47e+00  5.00e-03  3.84e-01  5.20e-03  1.22e-02  4.23e-01  
  6  +3.5462e-01  +1.4706e+00  1.12e+00  3.84e-03  2.89e-01  7.18e-04  9.92e-03  7.14e-01  
  7  +2.8957e-01  +7.2395e-01  4.34e-01  1.28e-03  9.46e-02  2.50e-04  3.62e-03  6.66e-01  
  8  +2.5384e-01  +4.8588e-01  2.32e-01  6.69e-04  4.95e-02  1.31e-04  2.05e-03  5.40e-01  
  9  +2.2640e-01  +3.2002e-01  9.36e-02  2.60e-04  1.95e-02  5.24e-05  8.64e-04  6.48e-01  
 10  +2.1804e-01  +2.7911e-01  6.11e-02  1.63e-04  1.24e-02  3.39e-05  5.53e-04  4.74e-01  
 11  +2.1186e-01  +2.4871e-01  3.69e-02  9.55e-05  7.43e-03  2.01e-05  3.32e-04  4.92e-01  
 12  +2.1063e-01  +2.4310e-01  3.25e-02  8.20e-05  6.52e-03  1.77e-05  2.83e-04  2.54e-01  
 13  +2.0796e-01  +2.2864e-01  2.07e-02  5.09e-05  4.11e-03  1.01e-05  1.78e-04  8.83e-01  
 14  +2.0427e-01  +2.1480e-01  1.05e-02  2.49e-05  2.06e-03  5.01e-06  8.92e-05  6.71e-01  
 15  +2.0204e-01  +2.0617e-01  4.14e-03  9.66e-06  8.02e-04  1.97e-06  3.54e-05  9.90e-01  
 16  +2.0068e-01  +2.0159e-01  9.04e-04  2.09e-06  1.74e-04  4.23e-07  7.81e-06  8.11e-01  
 17  +2.0032e-01  +2.0036e-01  3.98e-05  9.18e-08  7.66e-06  1.85e-08  3.46e-07  9.90e-01  
 18  +2.0030e-01  +2.0030e-01  4.00e-07  9.22e-10  7.69e-08  1.86e-10  3.47e-09  9.90e-01  
 19  +2.0030e-01  +2.0030e-01  4.00e-09  9.23e-12  7.69e-10  1.86e-12  3.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.5538ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:10 PM: Optimal value: 2.003e-01
(CVXPY) Oct 06 04:25:10 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:10 PM: Solver (including time spent in interface) took 6.270e-02 seconds
Iteration: 38, Objective: 0.2003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:10 PM: Your problem has 878 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:10 PM: Finished problem compilation (took 1.572e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 878
  constraints   = 1378
  nnz(P)        = 0
  nnz(A)        = 11830
  cones (total) = 1
    : Nonnegative = 1,  numel = 1378

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9898e-01  +5.0273e+02  5.02e+02  9.62e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.3155e-01  +1.1133e+02  1.11e+02  4.43e-01  2.06e+01  3.88e-03  5.76e-01  5.80e-01  
  2  +4.9064e-01  +1.5316e+01  1.48e+01  1.28e-01  8.20e+00  2.30e-02  2.45e-01  9.90e-01  
  3  +4.6551e-01  +2.6967e+00  2.23e+00  1.46e-02  1.12e+00  7.85e-03  3.40e-02  8.96e-01  
  4  +4.0983e-01  +2.0772e+00  1.67e+00  6.45e-03  4.97e-01  7.62e-03  1.54e-02  6.48e-01  
  5  +3.8609e-01  +1.8872e+00  1.50e+00  5.01e-03  3.85e-01  5.45e-03  1.22e-02  4.07e-01  
  6  +3.4977e-01  +1.4135e+00  1.06e+00  3.65e-03  2.74e-01  2.14e-04  9.52e-03  7.86e-01  
  7  +2.8322e-01  +6.6156e-01  3.78e-01  1.12e-03  8.26e-02  7.69e-05  3.22e-03  6.96e-01  
  8  +2.5244e-01  +4.7945e-01  2.27e-01  6.56e-04  4.85e-02  6.10e-05  2.02e-03  5.11e-01  
  9  +2.2470e-01  +3.1079e-01  8.61e-02  2.39e-04  1.79e-02  2.61e-05  8.01e-04  6.64e-01  
 10  +2.1757e-01  +2.7659e-01  5.90e-02  1.57e-04  1.20e-02  2.05e-05  5.35e-04  5.02e-01  
 11  +2.1207e-01  +2.4926e-01  3.72e-02  9.60e-05  7.51e-03  1.43e-05  3.32e-04  5.54e-01  
 12  +2.1007e-01  +2.4034e-01  3.03e-02  7.63e-05  6.08e-03  1.21e-05  2.65e-04  3.20e-01  
 13  +2.0721e-01  +2.2743e-01  2.02e-02  4.96e-05  4.03e-03  8.53e-06  1.74e-04  5.11e-01  
 14  +2.0355e-01  +2.1239e-01  8.84e-03  2.11e-05  1.74e-03  3.84e-06  7.63e-05  6.83e-01  
 15  +2.0184e-01  +2.0590e-01  4.05e-03  9.51e-06  7.88e-04  1.79e-06  3.50e-05  6.40e-01  
 16  +2.0114e-01  +2.0311e-01  1.96e-03  4.57e-06  3.80e-04  9.22e-07  1.70e-05  9.90e-01  
 17  +2.0035e-01  +2.0047e-01  1.18e-04  2.74e-07  2.28e-05  5.41e-08  1.03e-06  9.53e-01  
 18  +2.0030e-01  +2.0030e-01  1.23e-06  2.85e-09  2.37e-07  5.62e-10  1.08e-08  9.90e-01  
 19  +2.0030e-01  +2.0030e-01  1.23e-08  2.86e-11  2.37e-09  5.63e-12  1.08e-10  9.90e-01  
 20  +2.0030e-01  +2.0030e-01  1.23e-10  2.86e-13  2.38e-11  5.64e-14  1.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.8718ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:10 PM: Optimal value: 2.003e-01
(CVXPY) Oct 06 04:25:10 PM: Compilation took 1.572e-02 seconds
(CVXPY) Oct 06 04:25:10 PM: Solver (including time spent in interface) took 7.813e-02 seconds
Iteration: 39, Objective: 0.2003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:10 PM: Your problem has 879 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 879
  constraints   = 1379
  nnz(P)        = 0
  nnz(A)        = 11868
  cones (total) = 1
    : Nonnegative = 1,  numel = 1379

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9898e-01  +5.0273e+02  5.02e+02  9.62e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.3154e-01  +1.1132e+02  1.11e+02  4.43e-01  2.06e+01  3.88e-03  5.76e-01  5.80e-01  
  2  +4.9062e-01  +1.5313e+01  1.48e+01  1.28e-01  8.19e+00  2.30e-02  2.45e-01  9.90e-01  
  3  +4.6533e-01  +2.6946e+00  2.23e+00  1.46e-02  1.12e+00  7.83e-03  3.39e-02  8.98e-01  
  4  +4.1017e-01  +2.0803e+00  1.67e+00  6.49e-03  5.00e-01  7.58e-03  1.55e-02  6.43e-01  
  5  +3.8566e-01  +1.8903e+00  1.50e+00  5.01e-03  3.85e-01  5.48e-03  1.22e-02  4.11e-01  
  6  +3.4966e-01  +1.4020e+00  1.05e+00  3.64e-03  2.72e-01  5.68e-05  9.51e-03  8.04e-01  
  7  +2.8252e-01  +6.5670e-01  3.74e-01  1.11e-03  8.18e-02  3.35e-05  3.20e-03  6.99e-01  
  8  +2.5196e-01  +4.7625e-01  2.24e-01  6.48e-04  4.79e-02  3.94e-05  2.00e-03  5.10e-01  
  9  +2.2504e-01  +3.1311e-01  8.81e-02  2.45e-04  1.83e-02  1.96e-05  8.19e-04  6.52e-01  
 10  +2.1741e-01  +2.7611e-01  5.87e-02  1.56e-04  1.20e-02  1.66e-05  5.33e-04  5.10e-01  
 11  +2.1209e-01  +2.4949e-01  3.74e-02  9.65e-05  7.56e-03  1.26e-05  3.34e-04  5.51e-01  
 12  +2.1023e-01  +2.4123e-01  3.10e-02  7.81e-05  6.23e-03  1.10e-05  2.71e-04  2.85e-01  
 13  +2.0744e-01  +2.2846e-01  2.10e-02  5.14e-05  4.19e-03  8.22e-06  1.80e-04  5.06e-01  
 14  +2.0384e-01  +2.1349e-01  9.64e-03  2.30e-05  1.90e-03  4.08e-06  8.24e-05  7.50e-01  
 15  +2.0155e-01  +2.0476e-01  3.21e-03  7.48e-06  6.26e-04  1.43e-06  2.75e-05  8.11e-01  
 16  +2.0067e-01  +2.0161e-01  9.47e-04  2.17e-06  1.84e-04  4.36e-07  8.11e-06  8.42e-01  
 17  +2.0042e-01  +2.0082e-01  3.99e-04  8.89e-07  7.68e-05  1.87e-07  3.38e-06  6.70e-01  
 18  +2.0026e-01  +2.0029e-01  2.70e-05  5.98e-08  5.18e-06  1.27e-08  2.29e-07  9.58e-01  
 19  +2.0025e-01  +2.0025e-01  2.73e-07  6.06e-10  5.25e-08  1.29e-10  2.32e-09  9.90e-01  
 20  +2.0025e-01  +2.0025e-01  2.74e-09  6.07e-12  5.26e-10  1.29e-12  2.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 73.6544ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:10 PM: Optimal value: 2.003e-01
(CVXPY) Oct 06 04:25:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:10 PM: Solver (including time spent in interface) took 7.707e-02 seconds
Iteration: 40, Objective: 0.2003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:11 PM: Your problem has 880 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:11 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 880
  constraints   = 1380
  nnz(P)        = 0
  nnz(A)        = 11872
  cones (total) = 1
    : Nonnegative = 1,  numel = 1380

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9898e-01  +5.0273e+02  5.02e+02  9.62e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.3152e-01  +1.1132e+02  1.11e+02  4.43e-01  2.06e+01  3.89e-03  5.75e-01  5.80e-01  
  2  +4.9056e-01  +1.5314e+01  1.48e+01  1.28e-01  8.19e+00  2.30e-02  2.45e-01  9.90e-01  
  3  +4.6519e-01  +2.6900e+00  2.22e+00  1.45e-02  1.12e+00  7.83e-03  3.38e-02  8.99e-01  
  4  +4.0998e-01  +2.0843e+00  1.67e+00  6.50e-03  5.00e-01  7.60e-03  1.55e-02  6.42e-01  
  5  +3.8592e-01  +1.8907e+00  1.50e+00  5.03e-03  3.86e-01  5.42e-03  1.23e-02  4.11e-01  
  6  +3.5035e-01  +1.4157e+00  1.07e+00  3.68e-03  2.76e-01  1.61e-04  9.61e-03  7.91e-01  
  7  +2.8349e-01  +6.6693e-01  3.83e-01  1.14e-03  8.38e-02  6.36e-05  3.27e-03  6.95e-01  
  8  +2.5220e-01  +4.7850e-01  2.26e-01  6.55e-04  4.83e-02  5.35e-05  2.02e-03  5.15e-01  
  9  +2.2510e-01  +3.1367e-01  8.86e-02  2.47e-04  1.84e-02  2.44e-05  8.25e-04  6.53e-01  
 10  +2.1735e-01  +2.7600e-01  5.86e-02  1.57e-04  1.20e-02  1.90e-05  5.33e-04  5.12e-01  
 11  +2.1212e-01  +2.4973e-01  3.76e-02  9.72e-05  7.60e-03  1.38e-05  3.36e-04  5.49e-01  
 12  +2.1028e-01  +2.4151e-01  3.12e-02  7.89e-05  6.28e-03  1.19e-05  2.74e-04  2.79e-01  
 13  +2.0746e-01  +2.2855e-01  2.11e-02  5.17e-05  4.20e-03  8.70e-06  1.81e-04  5.20e-01  
 14  +2.0386e-01  +2.1360e-01  9.74e-03  2.32e-05  1.92e-03  4.22e-06  8.34e-05  7.38e-01  
 15  +2.0156e-01  +2.0482e-01  3.26e-03  7.60e-06  6.35e-04  1.46e-06  2.80e-05  8.06e-01  
 16  +2.0068e-01  +2.0166e-01  9.83e-04  2.25e-06  1.91e-04  4.54e-07  8.44e-06  8.44e-01  
 17  +2.0043e-01  +2.0086e-01  4.25e-04  9.49e-07  8.18e-05  1.99e-07  3.61e-06  6.58e-01  
 18  +2.0026e-01  +2.0030e-01  3.30e-05  7.31e-08  6.32e-06  1.55e-08  2.80e-07  9.44e-01  
 19  +2.0025e-01  +2.0025e-01  3.37e-07  7.48e-10  6.47e-08  1.59e-10  2.87e-09  9.90e-01  
 20  +2.0025e-01  +2.0025e-01  3.38e-09  7.50e-12  6.49e-10  1.59e-12  2.88e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 74.7476ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:11 PM: Optimal value: 2.003e-01
(CVXPY) Oct 06 04:25:11 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:11 PM: Solver (including time spent in interface) took 7.862e-02 seconds
FULL MODEL:
  Accruacy: 0.766
  Our objective: 0.532

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.218)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1)                                             <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.026)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0)                                                        <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.01)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.002)
 OR (x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.012)
 OR (x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.008)
 OR (x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x9 = 1)                                             <-- (term's our objective: 0.032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 15.147587537765503
Best over terms:
  Our final objective: 0.218
    Its accruacy: 0.609
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.218
  Highest accruacy: 0.609
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

