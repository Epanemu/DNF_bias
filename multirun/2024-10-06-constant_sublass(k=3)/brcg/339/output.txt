Command:
python test_script.py -s constant_subclass -d 9 -n 500 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14400000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 9.

Computed total variation: 0.648
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:19 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:19 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 3019
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9976e-01  +2.5105e+02  2.51e+02  9.38e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.8003e-01  +5.4664e+01  5.41e+01  4.07e-01  1.58e+01  3.78e-03  5.78e-01  5.87e-01  
  2  +5.2816e-01  +6.2604e+00  5.73e+00  1.27e-01  6.26e+00  1.69e-02  2.61e-01  9.78e-01  
  3  +5.0190e-01  +1.4062e+00  9.04e-01  2.83e-02  1.39e+00  3.97e-05  1.76e-01  9.15e-01  
  4  +4.9910e-01  +7.2933e-01  2.30e-01  6.91e-03  3.50e-01  2.36e-05  3.79e-02  8.27e-01  
  5  +4.8173e-01  +6.8511e-01  2.03e-01  1.54e-03  8.01e-02  1.43e-04  4.72e-03  8.99e-01  
  6  +4.6389e-01  +5.8114e-01  1.17e-01  6.82e-04  3.51e-02  8.74e-05  2.27e-03  5.86e-01  
  7  +4.4554e-01  +5.0667e-01  6.11e-02  2.76e-04  1.41e-02  4.78e-05  1.03e-03  6.15e-01  
  8  +4.3065e-01  +4.4451e-01  1.39e-02  5.68e-05  2.91e-03  1.14e-05  2.39e-04  9.90e-01  
  9  +4.2619e-01  +4.2645e-01  2.61e-04  1.05e-06  5.35e-05  1.81e-07  4.54e-06  9.83e-01  
 10  +4.2610e-01  +4.2610e-01  2.61e-06  1.05e-08  5.35e-07  1.81e-09  4.55e-08  9.90e-01  
 11  +4.2610e-01  +4.2610e-01  2.61e-08  1.05e-10  5.35e-09  1.81e-11  4.55e-10  9.90e-01  
 12  +4.2610e-01  +4.2610e-01  2.61e-10  1.05e-12  5.35e-11  1.81e-13  4.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5026ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:19 PM: Optimal value: 4.261e-01
(CVXPY) Oct 06 04:15:19 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:15:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4261
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:19 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:19 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 3462
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +2.5126e+02  2.51e+02  9.39e-01  2.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.7753e-01  +5.4800e+01  5.42e+01  4.11e-01  1.61e+01  3.78e-03  5.81e-01  5.85e-01  
  2  +5.2587e-01  +6.2360e+00  5.71e+00  1.26e-01  6.31e+00  1.74e-02  2.59e-01  9.90e-01  
  3  +5.0369e-01  +1.4562e+00  9.53e-01  3.31e-02  1.68e+00  7.12e-04  1.30e-01  9.11e-01  
  4  +4.9769e-01  +8.7129e-01  3.74e-01  8.54e-03  4.55e-01  8.03e-04  2.67e-02  8.80e-01  
  5  +4.8330e-01  +7.9420e-01  3.11e-01  2.60e-03  1.41e-01  1.99e-03  7.35e-03  7.35e-01  
  6  +4.7456e-01  +7.6558e-01  2.91e-01  1.91e-03  1.03e-01  1.20e-03  5.55e-03  6.02e-01  
  7  +4.5727e-01  +6.7601e-01  2.19e-01  1.09e-03  5.90e-02  7.51e-04  3.22e-03  6.30e-01  
  8  +4.4006e-01  +5.9871e-01  1.59e-01  6.74e-04  3.62e-02  4.13e-04  2.06e-03  5.76e-01  
  9  +4.1038e-01  +4.6919e-01  5.88e-02  2.34e-04  1.26e-02  1.44e-05  7.70e-04  9.90e-01  
 10  +3.9196e-01  +4.0070e-01  8.74e-03  3.24e-05  1.76e-03  3.60e-06  1.14e-04  8.83e-01  
 11  +3.8837e-01  +3.8853e-01  1.62e-04  5.93e-07  3.23e-05  8.34e-08  2.14e-06  9.84e-01  
 12  +3.8830e-01  +3.8830e-01  1.62e-06  5.93e-09  3.23e-07  8.34e-10  2.14e-08  9.90e-01  
 13  +3.8830e-01  +3.8830e-01  1.62e-08  5.93e-11  3.23e-09  8.34e-12  2.14e-10  9.90e-01  
 14  +3.8830e-01  +3.8830e-01  1.62e-10  5.93e-13  3.23e-11  8.34e-14  2.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2647ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:19 PM: Optimal value: 3.883e-01
(CVXPY) Oct 06 04:15:19 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3883
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:20 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:20 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3726
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +2.5116e+02  2.51e+02  9.39e-01  2.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.7502e-01  +5.4894e+01  5.43e+01  4.15e-01  1.61e+01  3.78e-03  5.83e-01  5.84e-01  
  2  +5.2415e-01  +6.3321e+00  5.81e+00  1.27e-01  6.31e+00  1.77e-02  2.61e-01  9.90e-01  
  3  +5.0463e-01  +1.3067e+00  8.02e-01  2.77e-02  1.44e+00  9.31e-04  8.98e-02  9.25e-01  
  4  +5.0245e-01  +1.2869e+00  7.84e-01  1.62e-02  8.71e-01  1.52e-03  4.46e-02  5.50e-01  
  5  +4.9072e-01  +1.1573e+00  6.67e-01  5.61e-03  3.06e-01  2.69e-03  1.49e-02  7.36e-01  
  6  +4.7693e-01  +9.9399e-01  5.17e-01  3.36e-03  1.83e-01  2.17e-03  9.10e-03  4.72e-01  
  7  +4.5639e-01  +8.4436e-01  3.88e-01  1.73e-03  9.40e-02  1.91e-03  4.81e-03  5.56e-01  
  8  +4.4601e-01  +7.5239e-01  3.06e-01  1.49e-03  8.06e-02  9.49e-04  4.27e-03  3.05e-01  
  9  +4.0830e-01  +5.4497e-01  1.37e-01  5.48e-04  2.94e-02  3.08e-04  1.69e-03  7.22e-01  
 10  +3.8149e-01  +4.1949e-01  3.80e-02  1.50e-04  8.05e-03  6.85e-05  5.00e-04  7.47e-01  
 11  +3.7549e-01  +3.9307e-01  1.76e-02  6.89e-05  3.70e-03  3.12e-05  2.34e-04  5.52e-01  
 12  +3.7206e-01  +3.7840e-01  6.34e-03  2.42e-05  1.31e-03  1.05e-05  8.33e-05  7.66e-01  
 13  +3.7002e-01  +3.7114e-01  1.12e-03  4.12e-06  2.25e-04  1.76e-06  1.44e-05  8.74e-01  
 14  +3.6960e-01  +3.6962e-01  1.28e-05  4.72e-08  2.57e-06  2.03e-08  1.65e-07  9.89e-01  
 15  +3.6960e-01  +3.6960e-01  1.28e-07  4.72e-10  2.57e-08  2.03e-10  1.65e-09  9.90e-01  
 16  +3.6960e-01  +3.6960e-01  1.28e-09  4.72e-12  2.57e-10  2.03e-12  1.65e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.476ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:20 PM: Optimal value: 3.696e-01
(CVXPY) Oct 06 04:15:20 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:20 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 3, Objective: 0.3696
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:20 PM: Your problem has 299 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:20 PM: Finished problem compilation (took 7.679e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 299
  constraints   = 549
  nnz(P)        = 0
  nnz(A)        = 3871
  cones (total) = 1
    : Nonnegative = 1,  numel = 549

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +2.5149e+02  2.51e+02  9.40e-01  2.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7317e-01  +5.4885e+01  5.43e+01  4.16e-01  1.59e+01  3.78e-03  5.82e-01  5.85e-01  
  2  +5.2270e-01  +6.4332e+00  5.91e+00  1.26e-01  6.20e+00  1.80e-02  2.57e-01  9.90e-01  
  3  +5.0572e-01  +1.5031e+00  9.97e-01  3.07e-02  1.62e+00  2.18e-03  8.74e-02  8.04e-01  
  4  +5.0550e-01  +1.5756e+00  1.07e+00  2.56e-02  1.37e+00  2.77e-03  6.78e-02  2.93e-01  
  5  +5.0211e-01  +1.7389e+00  1.24e+00  2.09e-02  1.12e+00  2.42e-03  5.54e-02  5.73e-01  
  6  +4.8527e-01  +1.4051e+00  9.20e-01  5.92e-03  3.27e-01  4.73e-03  1.50e-02  7.41e-01  
  7  +4.6581e-01  +1.1359e+00  6.70e-01  3.84e-03  2.11e-01  2.95e-03  1.02e-02  4.20e-01  
  8  +4.5062e-01  +9.8137e-01  5.31e-01  2.71e-03  1.48e-01  2.02e-03  7.39e-03  3.94e-01  
  9  +4.2255e-01  +6.9882e-01  2.76e-01  1.38e-03  7.45e-02  2.77e-04  4.07e-03  7.63e-01  
 10  +3.9977e-01  +5.6543e-01  1.66e-01  7.78e-04  4.19e-02  1.55e-04  2.41e-03  9.90e-01  
 11  +3.8264e-01  +4.8219e-01  9.95e-02  4.40e-04  2.37e-02  9.23e-05  1.42e-03  4.51e-01  
 12  +3.6112e-01  +3.7961e-01  1.85e-02  7.79e-05  4.22e-03  1.76e-05  2.67e-04  9.11e-01  
 13  +3.5726e-01  +3.6316e-01  5.89e-03  2.48e-05  1.34e-03  5.60e-06  8.68e-05  7.01e-01  
 14  +3.5564e-01  +3.5641e-01  7.69e-04  3.23e-06  1.74e-04  8.36e-07  1.15e-05  9.90e-01  
 15  +3.5537e-01  +3.5538e-01  1.24e-05  5.20e-08  2.80e-06  1.32e-08  1.87e-07  9.86e-01  
 16  +3.5537e-01  +3.5537e-01  1.24e-07  5.20e-10  2.80e-08  1.32e-10  1.87e-09  9.90e-01  
 17  +3.5537e-01  +3.5537e-01  1.24e-09  5.20e-12  2.80e-10  1.32e-12  1.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8612ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:20 PM: Optimal value: 3.554e-01
(CVXPY) Oct 06 04:15:20 PM: Compilation took 7.679e-04 seconds
(CVXPY) Oct 06 04:15:20 PM: Solver (including time spent in interface) took 9.007e-03 seconds
Iteration: 4, Objective: 0.3554
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:20 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:20 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 4077
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9914e-01  +2.5152e+02  2.51e+02  9.40e-01  2.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7048e-01  +5.4949e+01  5.44e+01  4.18e-01  1.58e+01  3.79e-03  5.82e-01  5.84e-01  
  2  +5.2080e-01  +6.5377e+00  6.02e+00  1.26e-01  6.17e+00  1.83e-02  2.57e-01  9.90e-01  
  3  +5.0579e-01  +1.6322e+00  1.13e+00  3.12e-02  1.66e+00  3.14e-03  8.35e-02  7.45e-01  
  4  +5.0543e-01  +1.6935e+00  1.19e+00  2.70e-02  1.45e+00  3.71e-03  6.94e-02  2.28e-01  
  5  +5.0143e-01  +1.9243e+00  1.42e+00  2.25e-02  1.21e+00  3.48e-03  5.75e-02  5.54e-01  
  6  +4.8189e-01  +1.5480e+00  1.07e+00  6.87e-03  3.81e-01  6.27e-03  1.70e-02  7.15e-01  
  7  +4.5185e-01  +1.1635e+00  7.12e-01  3.65e-03  2.00e-01  3.82e-03  9.54e-03  5.46e-01  
  8  +4.2608e-01  +8.2787e-01  4.02e-01  2.18e-03  1.18e-01  5.03e-04  6.21e-03  6.69e-01  
  9  +3.9604e-01  +6.3652e-01  2.40e-01  1.18e-03  6.32e-02  2.57e-04  3.57e-03  6.12e-01  
 10  +3.6679e-01  +4.6966e-01  1.03e-01  4.65e-04  2.50e-02  1.06e-04  1.51e-03  6.86e-01  
 11  +3.5211e-01  +4.0239e-01  5.03e-02  2.15e-04  1.17e-02  5.32e-05  7.28e-04  7.06e-01  
 12  +3.3996e-01  +3.4941e-01  9.45e-03  3.93e-05  2.14e-03  9.82e-06  1.39e-04  8.33e-01  
 13  +3.3718e-01  +3.3786e-01  6.88e-04  2.85e-06  1.55e-04  7.03e-07  1.02e-05  9.36e-01  
 14  +3.3696e-01  +3.3698e-01  2.25e-05  9.33e-08  5.05e-06  2.32e-08  3.36e-07  9.71e-01  
 15  +3.3695e-01  +3.3695e-01  2.25e-07  9.34e-10  5.06e-08  2.32e-10  3.36e-09  9.90e-01  
 16  +3.3695e-01  +3.3695e-01  2.25e-09  9.34e-12  5.06e-10  2.32e-12  3.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.1591ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:20 PM: Optimal value: 3.370e-01
(CVXPY) Oct 06 04:15:20 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:15:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.3370
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:20 PM: Your problem has 319 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:20 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 319
  constraints   = 569
  nnz(P)        = 0
  nnz(A)        = 4236
  cones (total) = 1
    : Nonnegative = 1,  numel = 569

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9904e-01  +2.5153e+02  2.51e+02  9.41e-01  2.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.6754e-01  +5.4972e+01  5.44e+01  4.20e-01  1.56e+01  3.79e-03  5.82e-01  5.85e-01  
  2  +5.1880e-01  +6.6404e+00  6.12e+00  1.26e-01  6.08e+00  1.86e-02  2.55e-01  9.90e-01  
  3  +5.0441e-01  +1.5066e+00  1.00e+00  2.54e-02  1.36e+00  3.28e-03  6.65e-02  7.72e-01  
  4  +4.9494e-01  +2.0060e+00  1.51e+00  1.37e-02  7.57e-01  6.98e-03  3.29e-02  8.19e-01  
  5  +4.6995e-01  +1.4139e+00  9.44e-01  6.47e-03  3.55e-01  4.10e-03  1.62e-02  6.11e-01  
  6  +4.4567e-01  +1.2127e+00  7.67e-01  3.91e-03  2.13e-01  3.75e-03  1.01e-02  4.38e-01  
  7  +4.1600e-01  +8.7778e-01  4.62e-01  2.29e-03  1.23e-01  1.04e-03  6.37e-03  6.16e-01  
  8  +3.6949e-01  +5.3189e-01  1.62e-01  7.90e-04  4.19e-02  2.90e-05  2.50e-03  9.90e-01  
  9  +3.4714e-01  +4.3130e-01  8.42e-02  3.77e-04  2.02e-02  2.96e-05  1.24e-03  5.97e-01  
 10  +3.3076e-01  +3.5809e-01  2.73e-02  1.19e-04  6.40e-03  1.74e-05  4.12e-04  8.00e-01  
 11  +3.2587e-01  +3.3692e-01  1.10e-02  4.78e-05  2.57e-03  8.72e-06  1.68e-04  7.27e-01  
 12  +3.2290e-01  +3.2455e-01  1.64e-03  7.12e-06  3.82e-04  1.29e-06  2.55e-05  8.55e-01  
 13  +3.2244e-01  +3.2269e-01  2.48e-04  1.08e-06  5.78e-05  2.17e-07  3.88e-06  8.99e-01  
 14  +3.2236e-01  +3.2236e-01  3.10e-06  1.35e-08  7.22e-07  2.71e-09  4.85e-08  9.88e-01  
 15  +3.2236e-01  +3.2236e-01  3.10e-08  1.35e-10  7.22e-09  2.71e-11  4.85e-10  9.90e-01  
 16  +3.2236e-01  +3.2236e-01  3.10e-10  1.35e-12  7.22e-11  2.71e-13  4.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.8164ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:20 PM: Optimal value: 3.224e-01
(CVXPY) Oct 06 04:15:20 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:20 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 6, Objective: 0.3224
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:20 PM: Your problem has 329 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:20 PM: Finished problem compilation (took 1.502e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 329
  constraints   = 579
  nnz(P)        = 0
  nnz(A)        = 4320
  cones (total) = 1
    : Nonnegative = 1,  numel = 579

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9893e-01  +2.5155e+02  2.51e+02  9.41e-01  2.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.6484e-01  +5.5005e+01  5.44e+01  4.21e-01  1.54e+01  3.80e-03  5.81e-01  5.85e-01  
  2  +5.1716e-01  +6.7463e+00  6.23e+00  1.25e-01  6.00e+00  1.89e-02  2.53e-01  9.90e-01  
  3  +5.0351e-01  +1.6449e+00  1.14e+00  2.66e-02  1.42e+00  4.09e-03  6.77e-02  7.58e-01  
  4  +4.8966e-01  +1.7480e+00  1.26e+00  1.17e-02  6.46e-01  8.20e-03  2.82e-02  7.04e-01  
  5  +4.6162e-01  +1.4403e+00  9.79e-01  5.68e-03  3.13e-01  8.68e-03  1.40e-02  5.64e-01  
  6  +4.3160e-01  +1.1352e+00  7.04e-01  3.55e-03  1.93e-01  5.07e-03  9.19e-03  4.57e-01  
  7  +3.9132e-01  +7.5993e-01  3.69e-01  1.99e-03  1.05e-01  4.24e-05  5.79e-03  7.76e-01  
  8  +3.4570e-01  +4.7636e-01  1.31e-01  6.38e-04  3.34e-02  2.85e-05  2.05e-03  6.92e-01  
  9  +3.3370e-01  +4.2493e-01  9.12e-02  4.20e-04  2.22e-02  3.16e-05  1.37e-03  4.28e-01  
 10  +3.1674e-01  +3.4737e-01  3.06e-02  1.38e-04  7.32e-03  1.85e-05  4.74e-04  7.79e-01  
 11  +3.0953e-01  +3.1508e-01  5.55e-03  2.48e-05  1.32e-03  3.52e-06  8.84e-05  8.35e-01  
 12  +3.0853e-01  +3.1095e-01  2.42e-03  1.08e-05  5.76e-04  1.65e-06  3.88e-05  6.20e-01  
 13  +3.0781e-01  +3.0799e-01  1.71e-04  7.69e-07  4.09e-05  1.19e-07  2.79e-06  9.37e-01  
 14  +3.0776e-01  +3.0776e-01  1.95e-06  8.75e-09  4.66e-07  1.36e-09  3.18e-08  9.89e-01  
 15  +3.0776e-01  +3.0776e-01  1.95e-08  8.75e-11  4.66e-09  1.36e-11  3.18e-10  9.90e-01  
 16  +3.0776e-01  +3.0776e-01  1.95e-10  8.75e-13  4.66e-11  1.36e-13  3.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.3696ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:20 PM: Optimal value: 3.078e-01
(CVXPY) Oct 06 04:15:20 PM: Compilation took 1.502e-02 seconds
(CVXPY) Oct 06 04:15:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.3078
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:21 PM: Your problem has 339 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:21 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 339
  constraints   = 589
  nnz(P)        = 0
  nnz(A)        = 4413
  cones (total) = 1
    : Nonnegative = 1,  numel = 589

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9869e-01  +2.5175e+02  2.51e+02  9.42e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.5844e-01  +5.4992e+01  5.44e+01  4.20e-01  1.52e+01  3.81e-03  5.79e-01  5.86e-01  
  2  +5.1300e-01  +6.9893e+00  6.48e+00  1.22e-01  5.86e+00  1.95e-02  2.46e-01  9.90e-01  
  3  +4.9871e-01  +1.8222e+00  1.32e+00  2.52e-02  1.36e+00  5.85e-03  6.11e-02  7.64e-01  
  4  +4.6886e-01  +1.6807e+00  1.21e+00  8.78e-03  4.87e-01  1.24e-02  2.06e-02  6.99e-01  
  5  +4.3061e-01  +1.2977e+00  8.67e-01  4.74e-03  2.59e-01  8.64e-03  1.17e-02  5.30e-01  
  6  +3.8845e-01  +9.2406e-01  5.36e-01  2.84e-03  1.51e-01  2.72e-03  7.59e-03  5.43e-01  
  7  +3.2810e-01  +5.0619e-01  1.78e-01  8.82e-04  4.62e-02  4.99e-04  2.70e-03  7.15e-01  
  8  +3.0740e-01  +4.1357e-01  1.06e-01  5.06e-04  2.68e-02  2.61e-04  1.65e-03  5.07e-01  
  9  +2.9273e-01  +3.4768e-01  5.49e-02  2.55e-04  1.37e-02  1.23e-04  8.92e-04  5.33e-01  
 10  +2.7847e-01  +2.8612e-01  7.65e-03  3.41e-05  1.84e-03  1.25e-05  1.34e-04  8.91e-01  
 11  +2.7610e-01  +2.7693e-01  8.27e-04  3.66e-06  1.97e-04  1.06e-06  1.51e-05  9.23e-01  
 12  +2.7581e-01  +2.7583e-01  2.35e-05  1.04e-07  5.62e-06  2.24e-08  4.38e-07  9.90e-01  
 13  +2.7580e-01  +2.7580e-01  2.35e-07  1.04e-09  5.62e-08  2.24e-10  4.38e-09  9.90e-01  
 14  +2.7580e-01  +2.7580e-01  2.35e-09  1.04e-11  5.62e-10  2.24e-12  4.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.8407ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:21 PM: Optimal value: 2.758e-01
(CVXPY) Oct 06 04:15:21 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:21 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 8, Objective: 0.2758
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:21 PM: Your problem has 349 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:21 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 349
  constraints   = 599
  nnz(P)        = 0
  nnz(A)        = 4575
  cones (total) = 1
    : Nonnegative = 1,  numel = 599

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9858e-01  +2.5176e+02  2.51e+02  9.42e-01  2.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.5529e-01  +5.5109e+01  5.46e+01  4.22e-01  1.51e+01  3.82e-03  5.79e-01  5.85e-01  
  2  +5.1083e-01  +7.0958e+00  6.58e+00  1.22e-01  5.78e+00  1.98e-02  2.45e-01  9.90e-01  
  3  +4.9566e-01  +1.8964e+00  1.40e+00  2.45e-02  1.31e+00  6.61e-03  5.93e-02  7.74e-01  
  4  +4.5917e-01  +1.6759e+00  1.22e+00  8.56e-03  4.70e-01  1.28e-02  2.03e-02  6.86e-01  
  5  +4.2323e-01  +1.3803e+00  9.57e-01  5.23e-03  2.84e-01  1.01e-02  1.29e-02  4.53e-01  
  6  +3.6612e-01  +8.0005e-01  4.34e-01  2.41e-03  1.26e-01  8.88e-05  6.73e-03  7.55e-01  
  7  +3.1510e-01  +5.0500e-01  1.90e-01  9.56e-04  4.97e-02  7.52e-05  2.99e-03  6.67e-01  
  8  +2.8669e-01  +3.7757e-01  9.09e-02  4.28e-04  2.25e-02  4.95e-05  1.48e-03  6.28e-01  
  9  +2.6765e-01  +2.9287e-01  2.52e-02  1.15e-04  6.08e-03  1.50e-05  4.41e-04  7.61e-01  
 10  +2.6103e-01  +2.6432e-01  3.29e-03  1.49e-05  7.85e-04  1.83e-06  6.08e-05  8.66e-01  
 11  +2.6011e-01  +2.6046e-01  3.49e-04  1.59e-06  8.36e-05  1.91e-07  6.69e-06  8.99e-01  
 12  +2.6000e-01  +2.6001e-01  4.23e-06  1.93e-08  1.01e-06  2.39e-09  8.19e-08  9.89e-01  
 13  +2.6000e-01  +2.6000e-01  4.23e-08  1.93e-10  1.01e-08  2.39e-11  8.19e-10  9.90e-01  
 14  +2.6000e-01  +2.6000e-01  4.23e-10  1.93e-12  1.01e-10  2.39e-13  8.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.6859ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:21 PM: Optimal value: 2.600e-01
(CVXPY) Oct 06 04:15:21 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:21 PM: Solver (including time spent in interface) took 1.643e-02 seconds
Iteration: 9, Objective: 0.2600
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:21 PM: Your problem has 359 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:21 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 359
  constraints   = 609
  nnz(P)        = 0
  nnz(A)        = 4679
  cones (total) = 1
    : Nonnegative = 1,  numel = 609

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9853e-01  +2.5179e+02  2.51e+02  9.43e-01  2.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.5249e-01  +5.5222e+01  5.47e+01  4.23e-01  1.49e+01  3.83e-03  5.79e-01  5.84e-01  
  2  +5.0925e-01  +7.1532e+00  6.64e+00  1.22e-01  5.69e+00  2.00e-02  2.44e-01  9.90e-01  
  3  +4.9314e-01  +1.9056e+00  1.41e+00  2.35e-02  1.25e+00  6.99e-03  5.68e-02  7.85e-01  
  4  +4.5326e-01  +1.6262e+00  1.17e+00  8.41e-03  4.57e-01  1.22e-02  2.01e-02  6.75e-01  
  5  +4.1493e-01  +1.3640e+00  9.49e-01  5.14e-03  2.77e-01  1.02e-02  1.27e-02  4.58e-01  
  6  +3.6130e-01  +8.1435e-01  4.53e-01  2.54e-03  1.32e-01  1.01e-03  7.07e-03  6.64e-01  
  7  +3.1583e-01  +5.5333e-01  2.37e-01  1.23e-03  6.35e-02  3.85e-04  3.76e-03  6.60e-01  
  8  +2.7743e-01  +3.5293e-01  7.55e-02  3.60e-04  1.88e-02  1.03e-04  1.25e-03  7.55e-01  
  9  +2.6600e-01  +3.0406e-01  3.81e-02  1.77e-04  9.25e-03  4.58e-05  6.57e-04  6.30e-01  
 10  +2.5548e-01  +2.5947e-01  3.99e-03  1.82e-05  9.52e-04  4.00e-06  7.25e-05  9.07e-01  
 11  +2.5435e-01  +2.5480e-01  4.44e-04  2.03e-06  1.06e-04  3.97e-07  8.44e-06  9.03e-01  
 12  +2.5420e-01  +2.5421e-01  5.96e-06  2.73e-08  1.41e-06  4.94e-09  1.15e-07  9.89e-01  
 13  +2.5420e-01  +2.5420e-01  5.96e-08  2.73e-10  1.41e-08  4.94e-11  1.15e-09  9.90e-01  
 14  +2.5420e-01  +2.5420e-01  5.97e-10  2.73e-12  1.42e-10  4.95e-13  1.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.0207ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:21 PM: Optimal value: 2.542e-01
(CVXPY) Oct 06 04:15:21 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:21 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 10, Objective: 0.2542
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:21 PM: Your problem has 369 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:21 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 369
  constraints   = 619
  nnz(P)        = 0
  nnz(A)        = 4779
  cones (total) = 1
    : Nonnegative = 1,  numel = 619

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9848e-01  +2.5190e+02  2.51e+02  9.43e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.5006e-01  +5.5311e+01  5.48e+01  4.24e-01  1.48e+01  3.84e-03  5.78e-01  5.84e-01  
  2  +5.0740e-01  +7.2161e+00  6.71e+00  1.21e-01  5.63e+00  2.02e-02  2.43e-01  9.90e-01  
  3  +4.9025e-01  +1.9275e+00  1.44e+00  2.26e-02  1.20e+00  7.44e-03  5.46e-02  7.92e-01  
  4  +4.4206e-01  +1.6554e+00  1.21e+00  8.06e-03  4.35e-01  1.30e-02  1.93e-02  6.96e-01  
  5  +4.0264e-01  +1.3399e+00  9.37e-01  5.07e-03  2.71e-01  9.06e-03  1.26e-02  4.58e-01  
  6  +3.4228e-01  +7.3152e-01  3.89e-01  2.18e-03  1.12e-01  3.04e-04  6.25e-03  7.54e-01  
  7  +3.0409e-01  +5.2325e-01  2.19e-01  1.15e-03  5.86e-02  1.76e-04  3.60e-03  5.64e-01  
  8  +2.7150e-01  +3.5299e-01  8.15e-02  4.03e-04  2.06e-02  6.41e-05  1.42e-03  6.71e-01  
  9  +2.5729e-01  +2.8776e-01  3.05e-02  1.45e-04  7.48e-03  2.48e-05  5.50e-04  7.13e-01  
 10  +2.4935e-01  +2.5223e-01  2.88e-03  1.35e-05  6.95e-04  2.22e-06  5.50e-05  9.43e-01  
 11  +2.4844e-01  +2.4857e-01  1.22e-04  5.74e-07  2.95e-05  7.79e-08  2.43e-06  9.72e-01  
 12  +2.4840e-01  +2.4840e-01  1.25e-06  5.88e-09  3.01e-07  7.87e-10  2.50e-08  9.90e-01  
 13  +2.4840e-01  +2.4840e-01  1.25e-08  5.90e-11  3.02e-09  7.90e-12  2.51e-10  9.90e-01  
 14  +2.4840e-01  +2.4840e-01  1.26e-10  5.92e-13  3.03e-11  7.92e-14  2.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.5134ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:21 PM: Optimal value: 2.484e-01
(CVXPY) Oct 06 04:15:21 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:15:21 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 11, Objective: 0.2484
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:21 PM: Your problem has 379 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:21 PM: Finished problem compilation (took 1.553e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 379
  constraints   = 629
  nnz(P)        = 0
  nnz(A)        = 4857
  cones (total) = 1
    : Nonnegative = 1,  numel = 629

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9845e-01  +2.5190e+02  2.51e+02  9.44e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.4741e-01  +5.5340e+01  5.48e+01  4.25e-01  1.46e+01  3.85e-03  5.77e-01  5.84e-01  
  2  +5.0475e-01  +7.2866e+00  6.78e+00  1.20e-01  5.53e+00  2.04e-02  2.42e-01  9.90e-01  
  3  +4.8557e-01  +1.9378e+00  1.45e+00  2.12e-02  1.12e+00  7.94e-03  5.13e-02  8.10e-01  
  4  +4.3080e-01  +1.6864e+00  1.26e+00  8.24e-03  4.39e-01  1.21e-02  2.00e-02  7.10e-01  
  5  +3.9426e-01  +1.3378e+00  9.44e-01  5.30e-03  2.79e-01  7.15e-03  1.34e-02  4.76e-01  
  6  +3.3328e-01  +7.1424e-01  3.81e-01  2.12e-03  1.08e-01  7.40e-04  6.14e-03  7.34e-01  
  7  +2.9680e-01  +5.1542e-01  2.19e-01  1.16e-03  5.86e-02  3.55e-04  3.66e-03  5.57e-01  
  8  +2.6674e-01  +3.5225e-01  8.55e-02  4.35e-04  2.20e-02  1.22e-04  1.54e-03  6.45e-01  
  9  +2.5233e-01  +2.7867e-01  2.63e-02  1.32e-04  6.65e-03  3.47e-05  5.04e-04  7.10e-01  
 10  +2.4658e-01  +2.5066e-01  4.08e-03  2.03e-05  1.02e-03  4.35e-06  8.22e-05  8.98e-01  
 11  +2.4573e-01  +2.4689e-01  1.17e-03  5.82e-06  2.92e-04  1.20e-06  2.43e-05  7.38e-01  
 12  +2.4542e-01  +2.4564e-01  2.23e-04  1.10e-06  5.56e-05  2.10e-07  4.68e-06  8.62e-01  
 13  +2.4535e-01  +2.4535e-01  2.77e-06  1.37e-08  6.91e-07  2.56e-09  5.85e-08  9.88e-01  
 14  +2.4535e-01  +2.4535e-01  2.78e-08  1.37e-10  6.91e-09  2.56e-11  5.85e-10  9.90e-01  
 15  +2.4535e-01  +2.4535e-01  2.78e-10  1.37e-12  6.91e-11  2.56e-13  5.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.6726ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:21 PM: Optimal value: 2.454e-01
(CVXPY) Oct 06 04:15:21 PM: Compilation took 1.553e-02 seconds
(CVXPY) Oct 06 04:15:21 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 12, Objective: 0.2454
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:22 PM: Your problem has 389 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:22 PM: Finished problem compilation (took 1.736e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 389
  constraints   = 639
  nnz(P)        = 0
  nnz(A)        = 4927
  cones (total) = 1
    : Nonnegative = 1,  numel = 639

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9843e-01  +2.5195e+02  2.51e+02  9.44e-01  2.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.4547e-01  +5.5391e+01  5.48e+01  4.25e-01  1.44e+01  3.86e-03  5.77e-01  5.84e-01  
  2  +5.0300e-01  +7.3111e+00  6.81e+00  1.19e-01  5.43e+00  2.05e-02  2.41e-01  9.90e-01  
  3  +4.8247e-01  +2.0048e+00  1.52e+00  2.14e-02  1.12e+00  8.39e-03  5.19e-02  8.03e-01  
  4  +4.2410e-01  +1.6762e+00  1.25e+00  8.22e-03  4.33e-01  1.19e-02  2.01e-02  7.02e-01  
  5  +3.9021e-01  +1.2990e+00  9.09e-01  5.32e-03  2.77e-01  6.16e-03  1.37e-02  4.79e-01  
  6  +3.2860e-01  +7.0186e-01  3.73e-01  2.08e-03  1.05e-01  1.22e-03  6.03e-03  6.65e-01  
  7  +2.9838e-01  +5.4156e-01  2.43e-01  1.30e-03  6.54e-02  6.77e-04  4.05e-03  4.50e-01  
  8  +2.6153e-01  +3.4213e-01  8.06e-02  4.10e-04  2.06e-02  1.82e-04  1.45e-03  7.03e-01  
  9  +2.4760e-01  +2.7431e-01  2.67e-02  1.34e-04  6.68e-03  5.33e-05  5.13e-04  6.92e-01  
 10  +2.4136e-01  +2.4448e-01  3.12e-03  1.56e-05  7.74e-04  4.61e-06  6.41e-05  9.05e-01  
 11  +2.4069e-01  +2.4157e-01  8.80e-04  4.41e-06  2.18e-04  1.14e-06  1.89e-05  7.68e-01  
 12  +2.4044e-01  +2.4057e-01  1.29e-04  6.38e-07  3.16e-05  1.24e-07  2.82e-06  9.41e-01  
 13  +2.4040e-01  +2.4040e-01  1.48e-06  7.30e-09  3.62e-07  1.42e-09  3.24e-08  9.89e-01  
 14  +2.4040e-01  +2.4040e-01  1.48e-08  7.31e-11  3.62e-09  1.42e-11  3.24e-10  9.90e-01  
 15  +2.4040e-01  +2.4040e-01  1.48e-10  7.31e-13  3.62e-11  1.42e-13  3.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.9043ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:22 PM: Optimal value: 2.404e-01
(CVXPY) Oct 06 04:15:22 PM: Compilation took 1.736e-02 seconds
(CVXPY) Oct 06 04:15:22 PM: Solver (including time spent in interface) took 1.409e-02 seconds
Iteration: 13, Objective: 0.2404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:22 PM: Your problem has 399 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:22 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 399
  constraints   = 649
  nnz(P)        = 0
  nnz(A)        = 4994
  cones (total) = 1
    : Nonnegative = 1,  numel = 649

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9840e-01  +2.5214e+02  2.52e+02  9.45e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.4418e-01  +5.5449e+01  5.49e+01  4.26e-01  1.43e+01  3.86e-03  5.77e-01  5.84e-01  
  2  +5.0177e-01  +7.3388e+00  6.84e+00  1.18e-01  5.35e+00  2.06e-02  2.40e-01  9.90e-01  
  3  +4.8013e-01  +1.9739e+00  1.49e+00  2.04e-02  1.07e+00  8.47e-03  4.98e-02  8.11e-01  
  4  +4.2149e-01  +1.7456e+00  1.32e+00  8.73e-03  4.57e-01  1.17e-02  2.15e-02  6.91e-01  
  5  +3.9072e-01  +1.3551e+00  9.64e-01  5.83e-03  3.01e-01  5.83e-03  1.51e-02  4.64e-01  
  6  +3.2117e-01  +6.7553e-01  3.54e-01  1.97e-03  9.84e-02  4.57e-04  5.78e-03  8.04e-01  
  7  +2.9178e-01  +5.2706e-01  2.35e-01  1.25e-03  6.26e-02  2.89e-04  3.94e-03  4.36e-01  
  8  +2.5751e-01  +3.4708e-01  8.96e-02  4.56e-04  2.29e-02  1.01e-04  1.60e-03  6.59e-01  
  9  +2.4297e-01  +2.7565e-01  3.27e-02  1.61e-04  8.12e-03  3.58e-05  6.00e-04  7.38e-01  
 10  +2.3637e-01  +2.4652e-01  1.02e-02  4.92e-05  2.47e-03  8.38e-06  1.95e-04  9.58e-01  
 11  +2.3321e-01  +2.3409e-01  8.86e-04  4.23e-06  2.13e-04  6.15e-07  1.76e-05  9.21e-01  
 12  +2.3291e-01  +2.3295e-01  3.84e-05  1.84e-07  9.24e-06  2.53e-08  7.90e-07  9.60e-01  
 13  +2.3290e-01  +2.3290e-01  3.85e-07  1.85e-09  9.27e-08  2.53e-10  7.94e-09  9.90e-01  
 14  +2.3290e-01  +2.3290e-01  3.86e-09  1.85e-11  9.29e-10  2.54e-12  7.96e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.2936ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:22 PM: Optimal value: 2.329e-01
(CVXPY) Oct 06 04:15:22 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:22 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 14, Objective: 0.2329
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:22 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:22 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 5066
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9843e-01  +2.5209e+02  2.52e+02  9.45e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.4175e-01  +5.5417e+01  5.49e+01  4.26e-01  1.41e+01  3.87e-03  5.74e-01  5.86e-01  
  2  +4.9961e-01  +7.4471e+00  6.95e+00  1.17e-01  5.22e+00  2.08e-02  2.36e-01  9.90e-01  
  3  +4.7429e-01  +1.9238e+00  1.45e+00  1.81e-02  9.41e-01  9.06e-03  4.40e-02  8.35e-01  
  4  +4.2221e-01  +1.7244e+00  1.30e+00  8.78e-03  4.59e-01  1.24e-02  2.15e-02  5.84e-01  
  5  +3.8395e-01  +1.2952e+00  9.11e-01  5.59e-03  2.87e-01  5.42e-03  1.45e-02  5.15e-01  
  6  +3.0671e-01  +6.0287e-01  2.96e-01  1.63e-03  8.08e-02  6.13e-04  4.83e-03  7.89e-01  
  7  +2.7613e-01  +4.6648e-01  1.90e-01  1.00e-03  5.00e-02  3.40e-04  3.22e-03  5.25e-01  
  8  +2.4428e-01  +2.9731e-01  5.30e-02  2.74e-04  1.35e-02  7.96e-05  9.82e-04  7.54e-01  
  9  +2.4195e-01  +2.8731e-01  4.54e-02  2.28e-04  1.14e-02  6.50e-05  8.25e-04  3.06e-01  
 10  +2.3217e-01  +2.4232e-01  1.02e-02  4.90e-05  2.44e-03  1.07e-05  1.92e-04  9.21e-01  
 11  +2.2944e-01  +2.3095e-01  1.51e-03  7.26e-06  3.59e-04  1.36e-06  3.03e-05  8.78e-01  
 12  +2.2896e-01  +2.2914e-01  1.77e-04  8.42e-07  4.14e-05  1.48e-07  3.68e-06  9.07e-01  
 13  +2.2890e-01  +2.2890e-01  2.27e-06  1.08e-08  5.31e-07  1.87e-09  4.76e-08  9.88e-01  
 14  +2.2890e-01  +2.2890e-01  2.28e-08  1.08e-10  5.33e-09  1.87e-11  4.77e-10  9.90e-01  
 15  +2.2890e-01  +2.2890e-01  2.28e-10  1.08e-12  5.33e-11  1.88e-13  4.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.0717ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:22 PM: Optimal value: 2.289e-01
(CVXPY) Oct 06 04:15:22 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:22 PM: Solver (including time spent in interface) took 1.617e-02 seconds
Iteration: 15, Objective: 0.2289
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:22 PM: Your problem has 419 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:22 PM: Finished problem compilation (took 1.705e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 419
  constraints   = 669
  nnz(P)        = 0
  nnz(A)        = 5142
  cones (total) = 1
    : Nonnegative = 1,  numel = 669

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9829e-01  +2.5227e+02  2.52e+02  9.46e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.3813e-01  +5.5565e+01  5.50e+01  4.28e-01  1.40e+01  3.88e-03  5.75e-01  5.84e-01  
  2  +4.9608e-01  +7.5739e+00  7.08e+00  1.16e-01  5.15e+00  2.12e-02  2.35e-01  9.90e-01  
  3  +4.6643e-01  +1.9893e+00  1.52e+00  1.78e-02  9.19e-01  9.77e-03  4.32e-02  8.42e-01  
  4  +4.1526e-01  +1.8533e+00  1.44e+00  9.70e-03  5.05e-01  1.27e-02  2.37e-02  5.43e-01  
  5  +3.6999e-01  +1.2563e+00  8.86e-01  5.58e-03  2.84e-01  3.50e-03  1.47e-02  6.15e-01  
  6  +2.9220e-01  +5.6533e-01  2.73e-01  1.56e-03  7.66e-02  2.97e-04  4.72e-03  8.32e-01  
  7  +2.6946e-01  +4.7578e-01  2.06e-01  1.12e-03  5.58e-02  2.23e-04  3.59e-03  5.03e-01  
  8  +2.4308e-01  +3.3380e-01  9.07e-02  4.76e-04  2.37e-02  9.46e-05  1.67e-03  5.71e-01  
  9  +2.3209e-01  +2.7613e-01  4.40e-02  2.24e-04  1.12e-02  4.38e-05  8.32e-04  8.72e-01  
 10  +2.2283e-01  +2.3416e-01  1.13e-02  5.63e-05  2.82e-03  9.54e-06  2.24e-04  9.90e-01  
 11  +2.1964e-01  +2.2117e-01  1.53e-03  7.55e-06  3.75e-04  1.15e-06  3.17e-05  8.83e-01  
 12  +2.1913e-01  +2.1921e-01  7.85e-05  3.87e-07  1.92e-05  5.43e-08  1.70e-06  9.70e-01  
 13  +2.1910e-01  +2.1910e-01  7.97e-07  3.93e-09  1.94e-07  5.48e-10  1.73e-08  9.90e-01  
 14  +2.1910e-01  +2.1910e-01  7.98e-09  3.94e-11  1.95e-09  5.49e-12  1.73e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.5961ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:22 PM: Optimal value: 2.191e-01
(CVXPY) Oct 06 04:15:22 PM: Compilation took 1.705e-02 seconds
(CVXPY) Oct 06 04:15:22 PM: Solver (including time spent in interface) took 1.451e-02 seconds
Iteration: 16, Objective: 0.2191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:22 PM: Your problem has 429 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:22 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 429
  constraints   = 679
  nnz(P)        = 0
  nnz(A)        = 5190
  cones (total) = 1
    : Nonnegative = 1,  numel = 679

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9828e-01  +2.5228e+02  2.52e+02  9.46e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.3705e-01  +5.5638e+01  5.51e+01  4.29e-01  1.38e+01  3.88e-03  5.75e-01  5.84e-01  
  2  +4.9485e-01  +7.6063e+00  7.11e+00  1.16e-01  5.10e+00  2.13e-02  2.35e-01  9.90e-01  
  3  +4.6445e-01  +1.9993e+00  1.53e+00  1.77e-02  9.11e-01  9.82e-03  4.31e-02  8.42e-01  
  4  +4.1252e-01  +1.8732e+00  1.46e+00  9.77e-03  5.06e-01  1.27e-02  2.40e-02  5.41e-01  
  5  +3.6883e-01  +1.2850e+00  9.16e-01  5.72e-03  2.91e-01  4.17e-03  1.50e-02  5.76e-01  
  6  +2.9126e-01  +5.7386e-01  2.83e-01  1.61e-03  7.91e-02  3.04e-04  4.84e-03  8.40e-01  
  7  +2.6753e-01  +4.8129e-01  2.14e-01  1.15e-03  5.75e-02  2.30e-04  3.65e-03  4.86e-01  
  8  +2.3618e-01  +3.1648e-01  8.03e-02  4.12e-04  2.07e-02  8.35e-05  1.45e-03  6.51e-01  
  9  +2.2858e-01  +2.7930e-01  5.07e-02  2.54e-04  1.28e-02  5.15e-05  9.21e-04  6.58e-01  
 10  +2.1744e-01  +2.2958e-01  1.21e-02  5.91e-05  2.98e-03  1.07e-05  2.31e-04  9.44e-01  
 11  +2.1395e-01  +2.1552e-01  1.57e-03  7.63e-06  3.80e-04  1.21e-06  3.14e-05  8.82e-01  
 12  +2.1342e-01  +2.1349e-01  6.19e-05  3.03e-07  1.50e-05  4.22e-08  1.29e-06  9.73e-01  
 13  +2.1340e-01  +2.1340e-01  6.25e-07  3.06e-09  1.52e-07  4.25e-10  1.31e-08  9.90e-01  
 14  +2.1340e-01  +2.1340e-01  6.26e-09  3.07e-11  1.52e-09  4.26e-12  1.31e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.4706ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:22 PM: Optimal value: 2.134e-01
(CVXPY) Oct 06 04:15:22 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:22 PM: Solver (including time spent in interface) took 1.507e-02 seconds
Iteration: 17, Objective: 0.2134
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:23 PM: Your problem has 439 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:23 PM: Finished problem compilation (took 1.459e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 439
  constraints   = 689
  nnz(P)        = 0
  nnz(A)        = 5241
  cones (total) = 1
    : Nonnegative = 1,  numel = 689

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9809e-01  +2.5232e+02  2.52e+02  9.46e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.3241e-01  +5.5948e+01  5.54e+01  4.34e-01  1.38e+01  3.88e-03  5.80e-01  5.80e-01  
  2  +4.9114e-01  +7.7718e+00  7.28e+00  1.18e-01  5.16e+00  2.20e-02  2.40e-01  9.90e-01  
  3  +4.5982e-01  +2.1767e+00  1.72e+00  1.98e-02  1.01e+00  1.03e-02  4.78e-02  8.27e-01  
  4  +4.0179e-01  +2.0021e+00  1.60e+00  1.06e-02  5.42e-01  1.25e-02  2.60e-02  5.77e-01  
  5  +3.6268e-01  +1.3773e+00  1.01e+00  6.32e-03  3.19e-01  5.11e-03  1.65e-02  5.13e-01  
  6  +2.9214e-01  +5.9424e-01  3.02e-01  1.78e-03  8.68e-02  5.75e-04  5.33e-03  7.82e-01  
  7  +2.6413e-01  +4.7776e-01  2.14e-01  1.18e-03  5.85e-02  3.53e-04  3.78e-03  5.12e-01  
  8  +2.3404e-01  +3.1585e-01  8.18e-02  4.32e-04  2.15e-02  1.25e-04  1.53e-03  6.42e-01  
  9  +2.2588e-01  +2.7542e-01  4.95e-02  2.55e-04  1.27e-02  6.52e-05  9.38e-04  6.05e-01  
 10  +2.1618e-01  +2.3063e-01  1.45e-02  7.24e-05  3.62e-03  1.24e-05  2.83e-04  9.90e-01  
 11  +2.1213e-01  +2.1399e-01  1.86e-03  9.29e-06  4.61e-04  1.41e-06  3.83e-05  8.78e-01  
 12  +2.1153e-01  +2.1160e-01  7.68e-05  3.86e-07  1.90e-05  5.12e-08  1.65e-06  9.77e-01  
 13  +2.1150e-01  +2.1150e-01  7.83e-07  3.94e-09  1.94e-07  5.21e-10  1.69e-08  9.90e-01  
 14  +2.1150e-01  +2.1150e-01  7.84e-09  3.94e-11  1.94e-09  5.21e-12  1.69e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.4681ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:23 PM: Optimal value: 2.115e-01
(CVXPY) Oct 06 04:15:23 PM: Compilation took 1.459e-02 seconds
(CVXPY) Oct 06 04:15:23 PM: Solver (including time spent in interface) took 1.571e-02 seconds
Iteration: 18, Objective: 0.2115
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:23 PM: Your problem has 449 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:23 PM: Finished problem compilation (took 1.571e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 449
  constraints   = 699
  nnz(P)        = 0
  nnz(A)        = 5316
  cones (total) = 1
    : Nonnegative = 1,  numel = 699

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9805e-01  +2.5226e+02  2.52e+02  9.47e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.3054e-01  +5.6075e+01  5.55e+01  4.35e-01  1.37e+01  3.88e-03  5.81e-01  5.78e-01  
  2  +4.8985e-01  +7.8040e+00  7.31e+00  1.19e-01  5.15e+00  2.22e-02  2.41e-01  9.90e-01  
  3  +4.5757e-01  +2.1971e+00  1.74e+00  2.01e-02  1.02e+00  1.02e-02  4.87e-02  8.25e-01  
  4  +3.9667e-01  +2.0492e+00  1.65e+00  1.09e-02  5.54e-01  1.23e-02  2.70e-02  5.80e-01  
  5  +3.5018e-01  +1.2078e+00  8.58e-01  5.37e-03  2.67e-01  2.87e-03  1.43e-02  6.43e-01  
  6  +2.8558e-01  +5.8286e-01  2.97e-01  1.75e-03  8.51e-02  6.45e-04  5.29e-03  6.97e-01  
  7  +2.6601e-01  +5.0021e-01  2.34e-01  1.32e-03  6.48e-02  4.47e-04  4.15e-03  4.05e-01  
  8  +2.2979e-01  +3.0507e-01  7.53e-02  3.99e-04  1.98e-02  1.25e-04  1.41e-03  7.20e-01  
  9  +2.2278e-01  +2.7011e-01  4.73e-02  2.46e-04  1.22e-02  6.94e-05  8.93e-04  5.33e-01  
 10  +2.1358e-01  +2.2649e-01  1.29e-02  6.59e-05  3.28e-03  1.26e-05  2.53e-04  9.35e-01  
 11  +2.1017e-01  +2.1190e-01  1.73e-03  8.87e-06  4.37e-04  1.46e-06  3.57e-05  8.70e-01  
 12  +2.0963e-01  +2.0973e-01  9.45e-05  4.88e-07  2.38e-05  7.11e-08  2.03e-06  9.61e-01  
 13  +2.0960e-01  +2.0960e-01  9.71e-07  5.02e-09  2.45e-07  7.29e-10  2.10e-08  9.90e-01  
 14  +2.0960e-01  +2.0960e-01  9.72e-09  5.02e-11  2.45e-09  7.30e-12  2.10e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.9514ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:23 PM: Optimal value: 2.096e-01
(CVXPY) Oct 06 04:15:23 PM: Compilation took 1.571e-02 seconds
(CVXPY) Oct 06 04:15:23 PM: Solver (including time spent in interface) took 1.576e-02 seconds
Iteration: 19, Objective: 0.2096
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:23 PM: Your problem has 459 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:23 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 459
  constraints   = 709
  nnz(P)        = 0
  nnz(A)        = 5358
  cones (total) = 1
    : Nonnegative = 1,  numel = 709

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9806e-01  +2.5219e+02  2.52e+02  9.47e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.2905e-01  +5.5979e+01  5.55e+01  4.36e-01  1.36e+01  3.88e-03  5.80e-01  5.80e-01  
  2  +4.8779e-01  +7.8845e+00  7.40e+00  1.17e-01  5.04e+00  2.23e-02  2.38e-01  9.90e-01  
  3  +4.5332e-01  +2.2946e+00  1.84e+00  2.03e-02  1.02e+00  1.08e-02  4.92e-02  8.21e-01  
  4  +3.8646e-01  +1.9981e+00  1.61e+00  1.02e-02  5.16e-01  1.26e-02  2.53e-02  5.88e-01  
  5  +3.3525e-01  +9.8256e-01  6.47e-01  4.17e-03  2.04e-01  1.13e-04  1.15e-02  7.95e-01  
  6  +2.7686e-01  +5.4699e-01  2.70e-01  1.61e-03  7.74e-02  8.32e-05  4.93e-03  6.57e-01  
  7  +2.5065e-01  +4.2193e-01  1.71e-01  9.58e-04  4.68e-02  8.47e-05  3.13e-03  5.60e-01  
  8  +2.2817e-01  +3.0012e-01  7.20e-02  3.86e-04  1.90e-02  4.15e-05  1.36e-03  6.57e-01  
  9  +2.2182e-01  +2.6752e-01  4.57e-02  2.40e-04  1.18e-02  2.97e-05  8.67e-04  4.99e-01  
 10  +2.1270e-01  +2.2316e-01  1.05e-02  5.38e-05  2.65e-03  7.57e-06  2.06e-04  8.76e-01  
 11  +2.1002e-01  +2.1133e-01  1.31e-03  6.78e-06  3.30e-04  8.27e-07  2.74e-05  8.85e-01  
 12  +2.0962e-01  +2.0967e-01  5.09e-05  2.66e-07  1.28e-05  3.13e-08  1.11e-06  9.70e-01  
 13  +2.0960e-01  +2.0960e-01  5.12e-07  2.67e-09  1.29e-07  3.15e-10  1.12e-08  9.90e-01  
 14  +2.0960e-01  +2.0960e-01  5.13e-09  2.68e-11  1.29e-09  3.16e-12  1.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.3107ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:23 PM: Optimal value: 2.096e-01
(CVXPY) Oct 06 04:15:23 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:23 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 20, Objective: 0.2096
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:23 PM: Your problem has 460 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:23 PM: Finished problem compilation (took 5.795e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 460
  constraints   = 710
  nnz(P)        = 0
  nnz(A)        = 5373
  cones (total) = 1
    : Nonnegative = 1,  numel = 710

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9806e-01  +2.5218e+02  2.52e+02  9.47e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.2907e-01  +5.5983e+01  5.55e+01  4.36e-01  1.36e+01  3.88e-03  5.80e-01  5.79e-01  
  2  +4.8770e-01  +7.8822e+00  7.39e+00  1.17e-01  5.04e+00  2.23e-02  2.38e-01  9.90e-01  
  3  +4.5331e-01  +2.3017e+00  1.85e+00  2.05e-02  1.03e+00  1.08e-02  4.95e-02  8.18e-01  
  4  +3.8645e-01  +2.0088e+00  1.62e+00  1.03e-02  5.20e-01  1.26e-02  2.55e-02  5.87e-01  
  5  +3.3509e-01  +9.7652e-01  6.41e-01  4.12e-03  2.02e-01  1.13e-04  1.13e-02  7.96e-01  
  6  +2.7755e-01  +5.6173e-01  2.84e-01  1.69e-03  8.14e-02  1.04e-04  5.16e-03  6.70e-01  
  7  +2.5097e-01  +4.2584e-01  1.75e-01  9.80e-04  4.78e-02  8.87e-05  3.20e-03  5.38e-01  
  8  +2.2866e-01  +3.0517e-01  7.65e-02  4.10e-04  2.02e-02  4.47e-05  1.44e-03  6.38e-01  
  9  +2.2099e-01  +2.6733e-01  4.63e-02  2.38e-04  1.19e-02  3.17e-05  8.54e-04  5.59e-01  
 10  +2.1345e-01  +2.3260e-01  1.91e-02  9.56e-05  4.82e-03  1.41e-05  3.59e-04  7.12e-01  
 11  +2.0857e-01  +2.1120e-01  2.63e-03  1.31e-05  6.54e-04  1.72e-06  5.18e-05  8.72e-01  
 12  +2.0787e-01  +2.0834e-01  4.75e-04  2.38e-06  1.18e-04  3.34e-07  9.84e-06  8.89e-01  
 13  +2.0770e-01  +2.0771e-01  8.97e-06  4.50e-08  2.22e-06  6.10e-09  1.88e-07  9.81e-01  
 14  +2.0770e-01  +2.0770e-01  8.97e-08  4.50e-10  2.22e-08  6.10e-11  1.88e-09  9.90e-01  
 15  +2.0770e-01  +2.0770e-01  8.98e-10  4.50e-12  2.23e-10  6.10e-13  1.88e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.8382ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:23 PM: Optimal value: 2.077e-01
(CVXPY) Oct 06 04:15:23 PM: Compilation took 5.795e-03 seconds
(CVXPY) Oct 06 04:15:23 PM: Solver (including time spent in interface) took 2.381e-02 seconds
Iteration: 21, Objective: 0.2077
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:23 PM: Your problem has 470 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:23 PM: Finished problem compilation (took 1.570e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 470
  constraints   = 720
  nnz(P)        = 0
  nnz(A)        = 5410
  cones (total) = 1
    : Nonnegative = 1,  numel = 720

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9804e-01  +2.5216e+02  2.52e+02  9.47e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.2657e-01  +5.6111e+01  5.56e+01  4.36e-01  1.35e+01  3.89e-03  5.80e-01  5.78e-01  
  2  +4.8568e-01  +8.0623e+00  7.58e+00  1.19e-01  5.11e+00  2.24e-02  2.44e-01  9.79e-01  
  3  +4.5177e-01  +2.3545e+00  1.90e+00  2.16e-02  1.07e+00  1.03e-02  5.25e-02  8.13e-01  
  4  +3.8646e-01  +2.0783e+00  1.69e+00  1.11e-02  5.55e-01  1.21e-02  2.77e-02  5.76e-01  
  5  +3.4183e-01  +1.1363e+00  7.94e-01  5.14e-03  2.51e-01  1.67e-03  1.39e-02  6.95e-01  
  6  +2.7761e-01  +5.5903e-01  2.81e-01  1.69e-03  8.06e-02  3.99e-04  5.16e-03  7.26e-01  
  7  +2.6023e-01  +4.8259e-01  2.22e-01  1.28e-03  6.15e-02  2.99e-04  4.05e-03  3.61e-01  
  8  +2.2627e-01  +3.0316e-01  7.69e-02  4.13e-04  2.00e-02  9.38e-05  1.45e-03  7.15e-01  
  9  +2.1870e-01  +2.6490e-01  4.62e-02  2.43e-04  1.19e-02  5.22e-05  8.83e-04  5.51e-01  
 10  +2.0993e-01  +2.2341e-01  1.35e-02  6.94e-05  3.39e-03  1.24e-05  2.66e-04  8.95e-01  
 11  +2.0647e-01  +2.0852e-01  2.05e-03  1.06e-05  5.13e-04  1.65e-06  4.27e-05  8.52e-01  
 12  +2.0588e-01  +2.0612e-01  2.35e-04  1.23e-06  5.89e-05  1.79e-07  5.14e-06  9.54e-01  
 13  +2.0580e-01  +2.0580e-01  2.95e-06  1.54e-08  7.37e-07  2.21e-09  6.48e-08  9.87e-01  
 14  +2.0580e-01  +2.0580e-01  2.95e-08  1.54e-10  7.38e-09  2.21e-11  6.48e-10  9.90e-01  
 15  +2.0580e-01  +2.0580e-01  2.95e-10  1.54e-12  7.38e-11  2.21e-13  6.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.7477ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:23 PM: Optimal value: 2.058e-01
(CVXPY) Oct 06 04:15:23 PM: Compilation took 1.570e-02 seconds
(CVXPY) Oct 06 04:15:23 PM: Solver (including time spent in interface) took 1.662e-02 seconds
FULL MODEL:
  Accruacy: 0.768
  Our objective: 0.536

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x7 = 0)                                                        <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.036)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0)                       <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x3 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.036)
 OR (x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.016)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.016)
 OR (x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.012)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 8.958995819091797
Best over terms:
  Our final objective: 0.09999999999999999
    Its accruacy: 0.55
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.09999999999999999
  Highest accruacy: 0.55
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

