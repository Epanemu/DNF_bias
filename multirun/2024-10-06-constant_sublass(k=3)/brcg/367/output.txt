Command:
python test_script.py -s constant_subclass -d 10 -n 50 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 10.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:35 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Finished problem compilation (took 4.731e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 346
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9445e-01  +2.6329e+01  2.58e+01  8.40e-01  7.18e+00  1.00e+00  1.08e+00   ------   
  1  +5.5935e-01  +5.8569e+00  5.30e+00  3.77e-01  4.22e+00  3.70e-03  6.22e-01  5.90e-01  
  2  +4.7172e-01  +1.2730e+00  8.01e-01  8.99e-02  1.25e+00  2.34e-02  2.44e-01  9.90e-01  
  3  +4.1165e-01  +6.9751e-01  2.86e-01  2.10e-02  3.05e-01  1.11e-02  6.87e-02  7.80e-01  
  4  +3.9045e-01  +5.0199e-01  1.12e-01  7.62e-03  1.10e-01  4.00e-03  2.84e-02  6.44e-01  
  5  +3.7862e-01  +4.0239e-01  2.38e-02  1.64e-03  2.35e-02  7.39e-04  6.61e-03  7.90e-01  
  6  +3.7527e-01  +3.7599e-01  7.20e-04  5.10e-05  7.33e-04  1.65e-05  2.12e-04  9.72e-01  
  7  +3.7515e-01  +3.7516e-01  7.36e-06  5.23e-07  7.52e-06  1.69e-07  2.18e-06  9.90e-01  
  8  +3.7515e-01  +3.7515e-01  7.36e-08  5.23e-09  7.52e-08  1.69e-09  2.18e-08  9.90e-01  
  9  +3.7515e-01  +3.7515e-01  7.36e-10  5.23e-11  7.52e-10  1.69e-11  2.18e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 641.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:35 PM: Optimal value: 3.752e-01
(CVXPY) Oct 06 04:22:35 PM: Compilation took 4.731e-02 seconds
(CVXPY) Oct 06 04:22:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3752
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:35 PM: Your problem has 56 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 81
  nnz(P)        = 0
  nnz(A)        = 423
  cones (total) = 1
    : Nonnegative = 1,  numel = 81

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8178e-01  +2.6934e+01  2.65e+01  8.51e-01  7.28e+00  1.00e+00  1.11e+00   ------   
  1  +4.9315e-01  +5.9365e+00  5.44e+00  3.82e-01  4.12e+00  3.80e-03  6.25e-01  5.94e-01  
  2  +3.6473e-01  +1.3187e+00  9.54e-01  8.12e-02  1.11e+00  2.69e-02  2.11e-01  9.90e-01  
  3  +2.9150e-01  +6.0764e-01  3.16e-01  2.14e-02  2.97e-01  9.87e-03  6.65e-02  7.56e-01  
  4  +2.5332e-01  +3.8914e-01  1.36e-01  7.42e-03  1.09e-01  4.55e-03  2.60e-02  6.71e-01  
  5  +2.3907e-01  +3.4993e-01  1.11e-01  5.23e-03  8.36e-02  3.35e-03  1.86e-02  4.43e-01  
  6  +2.1048e-01  +2.3970e-01  2.92e-02  1.25e-03  2.03e-02  7.43e-04  4.84e-03  7.63e-01  
  7  +2.0070e-01  +2.0139e-01  6.89e-04  2.99e-05  4.82e-04  7.40e-06  1.21e-04  9.84e-01  
  8  +2.0042e-01  +2.0045e-01  3.78e-05  1.67e-06  2.64e-05  3.09e-07  6.96e-06  9.44e-01  
  9  +2.0040e-01  +2.0040e-01  4.01e-07  1.78e-08  2.80e-07  3.22e-09  7.51e-08  9.89e-01  
 10  +2.0040e-01  +2.0040e-01  4.01e-09  1.78e-10  2.80e-09  3.22e-11  7.51e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 673.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:35 PM: Optimal value: 2.004e-01
(CVXPY) Oct 06 04:22:35 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:35 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 2, Objective: 0.2004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:35 PM: Your problem has 66 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 66
  constraints   = 91
  nnz(P)        = 0
  nnz(A)        = 469
  cones (total) = 1
    : Nonnegative = 1,  numel = 91

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7244e-01  +2.6907e+01  2.64e+01  8.59e-01  7.06e+00  1.00e+00  1.11e+00   ------   
  1  +4.3227e-01  +5.8672e+00  5.43e+00  3.80e-01  3.83e+00  3.92e-03  6.03e-01  6.02e-01  
  2  +2.3759e-01  +1.6412e+00  1.40e+00  9.32e-02  1.26e+00  2.62e-02  2.20e-01  8.68e-01  
  3  +1.9414e-01  +4.9423e-01  3.00e-01  1.97e-02  2.77e-01  8.65e-03  5.38e-02  8.04e-01  
  4  +1.4803e-01  +3.1551e-01  1.67e-01  8.94e-03  1.34e-01  4.90e-03  2.62e-02  5.95e-01  
  5  +1.2405e-01  +2.3992e-01  1.16e-01  5.31e-03  8.59e-02  3.29e-03  1.63e-02  4.67e-01  
  6  +8.5692e-02  +9.8226e-02  1.25e-02  5.33e-04  8.61e-03  1.89e-04  1.76e-03  9.43e-01  
  7  +8.0897e-02  +8.1325e-02  4.28e-04  1.85e-05  2.95e-04  4.39e-06  6.26e-05  9.65e-01  
  8  +8.0710e-02  +8.0727e-02  1.74e-05  8.13e-07  1.22e-05  8.10e-08  3.02e-06  9.68e-01  
  9  +8.0700e-02  +8.0700e-02  1.79e-07  8.41e-09  1.25e-07  8.54e-10  3.17e-08  9.90e-01  
 10  +8.0700e-02  +8.0700e-02  1.79e-09  8.43e-11  1.26e-09  8.56e-12  3.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 743.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:35 PM: Optimal value: 8.070e-02
(CVXPY) Oct 06 04:22:35 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.0807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:35 PM: Your problem has 76 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 76
  constraints   = 101
  nnz(P)        = 0
  nnz(A)        = 506
  cones (total) = 1
    : Nonnegative = 1,  numel = 101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6602e-01  +2.7304e+01  2.68e+01  8.66e-01  6.84e+00  1.00e+00  1.12e+00   ------   
  1  +3.5969e-01  +5.9703e+00  5.61e+00  3.74e-01  3.58e+00  4.12e-03  5.91e-01  6.02e-01  
  2  +1.5002e-01  +1.4348e+00  1.28e+00  8.47e-02  1.07e+00  2.34e-02  1.97e-01  8.74e-01  
  3  +1.1248e-01  +3.8978e-01  2.77e-01  1.83e-02  2.40e-01  7.76e-03  4.99e-02  7.85e-01  
  4  +8.0919e-02  +2.4258e-01  1.62e-01  9.46e-03  1.32e-01  4.47e-03  2.76e-02  5.27e-01  
  5  +4.7689e-02  +7.1385e-02  2.37e-02  1.30e-03  1.84e-02  2.39e-04  4.22e-03  9.90e-01  
  6  +4.1027e-02  +4.1745e-02  7.18e-04  3.96e-05  5.55e-04  5.27e-06  1.31e-04  9.70e-01  
  7  +4.0825e-02  +4.0902e-02  7.75e-05  4.73e-06  6.18e-05  4.52e-07  1.67e-05  9.02e-01  
  8  +4.0801e-02  +4.0803e-02  2.29e-06  1.43e-07  1.84e-06  1.56e-08  5.09e-07  9.80e-01  
  9  +4.0800e-02  +4.0800e-02  2.29e-08  1.43e-09  1.84e-08  1.56e-10  5.09e-09  9.90e-01  
 10  +4.0800e-02  +4.0800e-02  2.29e-10  1.43e-11  1.84e-10  1.56e-12  5.09e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 819.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:35 PM: Optimal value: 4.080e-02
(CVXPY) Oct 06 04:22:35 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:22:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.0408
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:35 PM: Your problem has 86 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Finished problem compilation (took 1.567e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 86
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 547
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6268e-01  +2.7275e+01  2.68e+01  8.72e-01  6.66e+00  1.00e+00  1.12e+00   ------   
  1  +3.1884e-01  +6.2797e+00  5.96e+00  3.89e-01  3.49e+00  4.34e-03  5.94e-01  5.76e-01  
  2  +1.1357e-01  +1.3514e+00  1.24e+00  8.66e-02  1.03e+00  2.72e-02  1.98e-01  9.08e-01  
  3  +8.2829e-02  +3.5609e-01  2.73e-01  1.86e-02  2.35e-01  8.97e-03  5.01e-02  8.00e-01  
  4  +6.4777e-02  +2.6922e-01  2.04e-01  1.30e-02  1.70e-01  6.60e-03  3.60e-02  3.41e-01  
  5  +3.2110e-02  +8.1107e-02  4.90e-02  2.97e-03  3.90e-02  4.82e-04  9.30e-03  9.90e-01  
  6  +2.1319e-02  +2.3305e-02  1.99e-03  1.19e-04  1.55e-03  1.58e-05  3.84e-04  9.67e-01  
  7  +2.0877e-02  +2.1114e-02  2.37e-04  1.52e-05  1.88e-04  1.14e-06  5.30e-05  8.67e-01  
  8  +2.0821e-02  +2.0887e-02  6.68e-05  4.28e-06  5.19e-05  4.07e-07  1.66e-05  7.98e-01  
  9  +2.0800e-02  +2.0801e-02  8.74e-07  5.61e-08  6.77e-07  4.91e-09  2.25e-07  9.87e-01  
 10  +2.0800e-02  +2.0800e-02  8.73e-09  5.61e-10  6.76e-09  4.91e-11  2.25e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 816.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:35 PM: Optimal value: 2.080e-02
(CVXPY) Oct 06 04:22:35 PM: Compilation took 1.567e-02 seconds
(CVXPY) Oct 06 04:22:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:35 PM: Your problem has 96 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:35 PM: Finished problem compilation (took 1.558e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 96
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 593
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5314e-01  +2.7473e+01  2.70e+01  8.77e-01  6.54e+00  1.00e+00  1.12e+00   ------   
  1  +2.4359e-01  +6.5978e+00  6.35e+00  4.00e-01  3.42e+00  4.57e-03  5.99e-01  5.54e-01  
  2  +6.2828e-02  +2.0640e+00  2.00e+00  1.41e-01  1.54e+00  2.53e-02  2.89e-01  7.08e-01  
  3  +6.4863e-02  +3.7751e-01  3.13e-01  2.58e-02  3.06e-01  8.87e-03  6.55e-02  8.15e-01  
  4  +2.6854e-02  +1.4037e-01  1.14e-01  8.15e-03  1.03e-01  3.28e-03  2.34e-02  6.94e-01  
  5  +7.4285e-03  +4.1464e-02  3.40e-02  2.26e-03  2.91e-02  6.49e-04  6.84e-03  8.38e-01  
  6  +1.0885e-03  +2.2408e-03  1.15e-03  7.62e-05  9.77e-04  1.55e-05  2.37e-04  9.67e-01  
  7  +8.5378e-04  +1.0139e-03  1.60e-04  1.16e-05  1.35e-04  1.08e-06  4.20e-05  8.62e-01  
  8  +8.0483e-04  +8.1839e-04  1.36e-05  9.73e-07  1.10e-05  9.07e-08  3.99e-06  9.27e-01  
  9  +8.0005e-04  +8.0019e-04  1.42e-07  1.01e-08  1.14e-07  9.43e-10  4.21e-08  9.90e-01  
 10  +8.0000e-04  +8.0000e-04  1.42e-09  1.02e-10  1.15e-09  9.48e-12  4.24e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 851.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:35 PM: Optimal value: 8.000e-04
(CVXPY) Oct 06 04:22:35 PM: Compilation took 1.558e-02 seconds
(CVXPY) Oct 06 04:22:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:36 PM: Your problem has 106 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:36 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 106
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 645
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4775e-01  +2.7773e+01  2.73e+01  8.81e-01  6.46e+00  1.00e+00  1.13e+00   ------   
  1  +1.9596e-01  +6.9159e+00  6.72e+00  4.17e-01  3.42e+00  4.71e-03  6.14e-01  5.34e-01  
  2  +3.7232e-02  +1.9020e+00  1.86e+00  1.41e-01  1.46e+00  2.73e-02  2.90e-01  7.43e-01  
  3  +5.7853e-02  +3.5927e-01  3.01e-01  2.76e-02  3.11e-01  9.15e-03  7.00e-02  8.03e-01  
  4  +2.5234e-02  +1.4255e-01  1.17e-01  9.41e-03  1.14e-01  3.63e-03  2.65e-02  6.73e-01  
  5  +5.5606e-03  +3.5842e-02  3.03e-02  2.17e-03  2.76e-02  5.62e-04  6.54e-03  8.83e-01  
  6  +9.9776e-04  +1.8608e-03  8.63e-04  6.26e-05  7.88e-04  9.84e-06  1.93e-04  9.71e-01  
  7  +8.3009e-04  +9.9167e-04  1.62e-04  1.31e-05  1.46e-04  1.24e-06  4.74e-05  8.20e-01  
  8  +8.0314e-04  +8.2226e-04  1.91e-05  1.57e-06  1.71e-05  1.47e-07  5.97e-06  8.93e-01  
  9  +8.0003e-04  +8.0025e-04  2.12e-07  1.74e-08  1.89e-07  1.64e-09  6.65e-08  9.89e-01  
 10  +8.0000e-04  +8.0000e-04  2.12e-09  1.74e-10  1.90e-09  1.64e-11  6.65e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.829ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:36 PM: Optimal value: 8.000e-04
(CVXPY) Oct 06 04:22:36 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:36 PM: Your problem has 116 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:36 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 116
  constraints   = 141
  nnz(P)        = 0
  nnz(A)        = 677
  cones (total) = 1
    : Nonnegative = 1,  numel = 141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4657e-01  +2.7769e+01  2.73e+01  8.86e-01  6.30e+00  1.00e+00  1.13e+00   ------   
  1  +1.6565e-01  +7.0712e+00  6.91e+00  4.26e-01  3.30e+00  4.85e-03  6.12e-01  5.35e-01  
  2  +2.6258e-02  +1.7943e+00  1.77e+00  1.38e-01  1.39e+00  2.83e-02  2.89e-01  7.57e-01  
  3  +5.4332e-02  +3.0204e-01  2.48e-01  2.36e-02  2.58e-01  8.65e-03  6.20e-02  8.32e-01  
  4  +2.3730e-02  +1.3586e-01  1.12e-01  9.01e-03  1.08e-01  3.70e-03  2.61e-02  6.84e-01  
  5  +5.6299e-03  +3.3595e-02  2.80e-02  2.16e-03  2.65e-02  1.48e-04  6.65e-03  9.90e-01  
  6  +1.0734e-03  +2.6626e-03  1.59e-03  1.21e-04  1.48e-03  6.97e-06  3.85e-04  9.48e-01  
  7  +8.3801e-04  +1.2028e-03  3.65e-04  3.03e-05  3.37e-04  1.33e-06  1.12e-04  7.52e-01  
  8  +7.7222e-04  +8.4307e-04  7.09e-05  5.85e-06  6.15e-05  2.95e-07  2.54e-05  8.54e-01  
  9  +7.5232e-04  +7.6103e-04  8.71e-06  6.81e-07  7.18e-06  4.25e-08  3.28e-06  9.68e-01  
 10  +7.5002e-04  +7.5012e-04  9.19e-08  7.17e-09  7.56e-08  4.45e-10  3.49e-08  9.89e-01  
 11  +7.5000e-04  +7.5000e-04  9.26e-10  7.22e-11  7.61e-10  4.49e-12  3.51e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0272ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:36 PM: Optimal value: 7.500e-04
(CVXPY) Oct 06 04:22:36 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:36 PM: Your problem has 117 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:36 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 142
  nnz(P)        = 0
  nnz(A)        = 680
  cones (total) = 1
    : Nonnegative = 1,  numel = 142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4264e-01  +2.7698e+01  2.73e+01  8.85e-01  6.28e+00  1.00e+00  1.12e+00   ------   
  1  +1.2789e-01  +7.1683e+00  7.04e+00  4.24e-01  3.27e+00  4.99e-03  6.04e-01  5.44e-01  
  2  +1.8004e-02  +1.6267e+00  1.61e+00  1.33e-01  1.31e+00  2.89e-02  2.75e-01  7.90e-01  
  3  +4.6788e-02  +2.8582e-01  2.39e-01  2.39e-02  2.51e-01  8.42e-03  6.13e-02  8.19e-01  
  4  +2.2751e-02  +1.4589e-01  1.23e-01  1.07e-02  1.21e-01  4.17e-03  2.97e-02  5.97e-01  
  5  +4.8047e-03  +3.3547e-02  2.87e-02  2.40e-03  2.76e-02  2.09e-04  7.04e-03  9.90e-01  
  6  +1.0114e-03  +2.3315e-03  1.32e-03  1.10e-04  1.26e-03  7.02e-06  3.32e-04  9.54e-01  
  7  +8.3306e-04  +1.1805e-03  3.47e-04  3.15e-05  3.31e-04  1.60e-06  1.10e-04  7.40e-01  
  8  +7.7919e-04  +8.7826e-04  9.91e-05  8.63e-06  8.91e-05  4.61e-07  3.51e-05  7.50e-01  
  9  +7.5302e-04  +7.6456e-04  1.15e-05  9.07e-07  9.56e-06  5.86e-08  4.34e-06  9.90e-01  
 10  +7.5003e-04  +7.5016e-04  1.29e-07  1.01e-08  1.07e-07  6.50e-10  4.90e-08  9.89e-01  
 11  +7.5000e-04  +7.5000e-04  1.30e-09  1.02e-10  1.07e-09  6.54e-12  4.93e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3072ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:36 PM: Optimal value: 7.500e-04
(CVXPY) Oct 06 04:22:36 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:36 PM: Your problem has 127 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:36 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 127
  constraints   = 152
  nnz(P)        = 0
  nnz(A)        = 717
  cones (total) = 1
    : Nonnegative = 1,  numel = 152

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3434e-01  +2.7752e+01  2.73e+01  8.89e-01  6.16e+00  1.00e+00  1.12e+00   ------   
  1  +7.4509e-02  +7.6427e+00  7.57e+00  4.43e-01  3.27e+00  5.25e-03  6.15e-01  5.45e-01  
  2  +2.7922e-02  +1.6793e+00  1.65e+00  1.47e-01  1.37e+00  3.31e-02  3.01e-01  7.89e-01  
  3  +4.5819e-02  +3.0100e-01  2.55e-01  2.71e-02  2.73e-01  8.69e-03  7.00e-02  8.06e-01  
  4  +1.7181e-02  +1.1633e-01  9.91e-02  9.13e-03  1.00e-01  3.30e-03  2.60e-02  6.92e-01  
  5  +3.4812e-03  +2.4593e-02  2.11e-02  1.89e-03  2.11e-02  1.33e-04  5.65e-03  9.90e-01  
  6  +9.2995e-04  +1.7974e-03  8.67e-04  7.83e-05  8.64e-04  3.38e-06  2.41e-04  9.59e-01  
  7  +8.1422e-04  +1.1414e-03  3.27e-04  3.19e-05  3.24e-04  1.40e-06  1.14e-04  6.51e-01  
  8  +7.7457e-04  +8.7858e-04  1.04e-04  1.01e-05  1.00e-04  4.47e-07  3.98e-05  7.10e-01  
  9  +7.5778e-04  +7.9684e-04  3.91e-05  3.63e-06  3.58e-05  1.79e-07  1.57e-05  8.71e-01  
 10  +7.5056e-04  +7.5295e-04  2.39e-06  2.18e-07  2.15e-06  1.06e-08  9.80e-07  9.52e-01  
 11  +7.5001e-04  +7.5003e-04  2.83e-08  2.58e-09  2.54e-08  1.26e-10  1.16e-08  9.88e-01  
 12  +7.5000e-04  +7.5000e-04  2.85e-10  2.60e-11  2.56e-10  1.27e-12  1.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2146ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:36 PM: Optimal value: 7.500e-04
(CVXPY) Oct 06 04:22:36 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x8 = 0) <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 0 AND x4 = 0 AND x7 = 0 AND x9 = 1) <-- (term's our objective: 0.16)
 OR (x1 = 0 AND x3 = 1 AND x5 = 0 AND x7 = 1 AND x9 = 1) <-- (term's our objective: 0.12)
 OR (x2 = 0 AND x4 = 1 AND x9 = 0)                       <-- (term's our objective: 0.12)
 OR (x2 = 1 AND x5 = 1 AND x6 = 0 AND x9 = 0)            <-- (term's our objective: 0.12)
 OR (x4 = 1 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.16)
 OR (x5 = 1 AND x6 = 0 AND x8 = 0)                       <-- (term's our objective: 0.24)
 OR (x5 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.260521650314331
Best over terms:
  Our final objective: 0.24
    Its accruacy: 0.62
    Its hamming distance: 6
  Shortest hamming distance: 4
    Its our objective: 0.12
  Highest accruacy: 0.62
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

