Command:
python test_script.py -s constant_subclass -d 4 -n 100 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.26
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:31 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:31 PM: Finished problem compilation (took 4.011e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9652e-01  +5.0716e+01  5.02e+01  8.58e-01  7.87e+00  1.00e+00  1.03e+00   ------   
  1  +6.0365e-01  +1.0117e+01  9.51e+00  2.96e-01  4.14e+00  4.08e-03  4.89e-01  6.68e-01  
  2  +5.3499e-01  +1.6578e+00  1.12e+00  7.13e-02  1.16e+00  9.45e-03  1.76e-01  8.73e-01  
  3  +4.9873e-01  +7.1920e-01  2.20e-01  1.64e-02  2.67e-01  5.11e-03  6.97e-02  9.90e-01  
  4  +4.8035e-01  +6.2471e-01  1.44e-01  3.84e-03  6.50e-02  1.02e-02  1.37e-02  8.48e-01  
  5  +4.6235e-01  +4.9937e-01  3.70e-02  8.86e-04  1.50e-02  1.07e-04  3.60e-03  8.64e-01  
  6  +4.5074e-01  +4.5243e-01  1.69e-03  3.50e-05  5.92e-04  2.62e-06  1.67e-04  9.69e-01  
  7  +4.5011e-01  +4.5012e-01  1.74e-05  3.57e-07  6.05e-06  2.68e-08  1.73e-06  9.90e-01  
  8  +4.5010e-01  +4.5010e-01  1.74e-07  3.57e-09  6.05e-08  2.68e-10  1.73e-08  9.90e-01  
  9  +4.5010e-01  +4.5010e-01  1.74e-09  3.57e-11  6.05e-10  2.68e-12  1.73e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 597.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:31 PM: Optimal value: 4.501e-01
(CVXPY) Oct 06 03:49:31 PM: Compilation took 4.011e-02 seconds
(CVXPY) Oct 06 03:49:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:31 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:31 PM: Finished problem compilation (took 1.004e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 461
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9270e-01  +5.1073e+01  5.06e+01  8.66e-01  8.12e+00  1.00e+00  1.06e+00   ------   
  1  +5.8223e-01  +1.0370e+01  9.79e+00  3.16e-01  4.28e+00  4.03e-03  5.17e-01  6.54e-01  
  2  +5.2242e-01  +1.4911e+00  9.69e-01  5.87e-02  9.99e-01  1.13e-02  1.50e-01  9.68e-01  
  3  +5.0894e-01  +1.3068e+00  7.98e-01  3.51e-02  6.06e-01  1.23e-02  9.41e-02  4.15e-01  
  4  +4.7358e-01  +9.8985e-01  5.16e-01  1.38e-02  2.41e-01  1.08e-02  4.18e-02  6.21e-01  
  5  +4.4147e-01  +7.6155e-01  3.20e-01  7.33e-03  1.27e-01  5.97e-03  2.44e-02  4.90e-01  
  6  +4.0152e-01  +4.8309e-01  8.16e-02  1.87e-03  3.19e-02  6.65e-04  7.31e-03  8.04e-01  
  7  +3.8362e-01  +3.9397e-01  1.03e-02  2.36e-04  4.01e-03  3.96e-05  1.03e-03  9.90e-01  
  8  +3.8061e-01  +3.8149e-01  8.88e-04  2.01e-05  3.40e-04  3.20e-06  9.08e-05  9.15e-01  
  9  +3.8032e-01  +3.8039e-01  6.75e-05  1.50e-06  2.54e-05  2.40e-07  7.09e-06  9.38e-01  
 10  +3.8030e-01  +3.8030e-01  7.13e-07  1.59e-08  2.68e-07  2.53e-09  7.52e-08  9.90e-01  
 11  +3.8030e-01  +3.8030e-01  7.13e-09  1.59e-10  2.68e-09  2.53e-11  7.52e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0044ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:31 PM: Optimal value: 3.803e-01
(CVXPY) Oct 06 03:49:31 PM: Compilation took 1.004e-02 seconds
(CVXPY) Oct 06 03:49:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:31 PM: Your problem has 70 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:31 PM: Finished problem compilation (took 6.641e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 70
  constraints   = 120
  nnz(P)        = 0
  nnz(A)        = 466
  cones (total) = 1
    : Nonnegative = 1,  numel = 120

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9256e-01  +5.0966e+01  5.05e+01  8.66e-01  8.10e+00  1.00e+00  1.05e+00   ------   
  1  +5.8072e-01  +1.0366e+01  9.78e+00  3.17e-01  4.26e+00  4.03e-03  5.17e-01  6.53e-01  
  2  +5.2149e-01  +1.5124e+00  9.91e-01  5.97e-02  1.01e+00  1.14e-02  1.52e-01  9.62e-01  
  3  +5.0544e-01  +1.3042e+00  7.99e-01  3.40e-02  5.84e-01  1.23e-02  9.14e-02  4.53e-01  
  4  +4.6534e-01  +9.3768e-01  4.72e-01  1.22e-02  2.11e-01  1.02e-02  3.72e-02  6.42e-01  
  5  +4.3401e-01  +7.1640e-01  2.82e-01  6.56e-03  1.13e-01  5.13e-03  2.22e-02  4.71e-01  
  6  +4.0104e-01  +5.1877e-01  1.18e-01  2.63e-03  4.47e-02  1.46e-03  1.02e-02  6.57e-01  
  7  +3.7454e-01  +3.8637e-01  1.18e-02  2.62e-04  4.42e-03  1.27e-05  1.19e-03  9.84e-01  
  8  +3.7069e-01  +3.7171e-01  1.02e-03  2.24e-05  3.76e-04  1.23e-06  1.06e-04  9.16e-01  
  9  +3.7031e-01  +3.7034e-01  2.84e-05  6.08e-07  1.02e-05  8.24e-08  3.02e-06  9.88e-01  
 10  +3.7030e-01  +3.7030e-01  2.86e-07  6.11e-09  1.03e-07  8.26e-10  3.04e-08  9.90e-01  
 11  +3.7030e-01  +3.7030e-01  2.86e-09  6.11e-11  1.03e-09  8.26e-12  3.04e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 960.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:31 PM: Optimal value: 3.703e-01
(CVXPY) Oct 06 03:49:31 PM: Compilation took 6.641e-03 seconds
(CVXPY) Oct 06 03:49:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:31 PM: Your problem has 72 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:31 PM: Finished problem compilation (took 9.620e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 122
  nnz(P)        = 0
  nnz(A)        = 480
  cones (total) = 1
    : Nonnegative = 1,  numel = 122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9256e-01  +5.0963e+01  5.05e+01  8.68e-01  8.08e+00  1.00e+00  1.05e+00   ------   
  1  +5.8031e-01  +1.0391e+01  9.81e+00  3.20e-01  4.23e+00  4.03e-03  5.18e-01  6.51e-01  
  2  +5.2103e-01  +1.5764e+00  1.06e+00  6.35e-02  1.07e+00  1.15e-02  1.61e-01  9.44e-01  
  3  +4.9885e-01  +1.1908e+00  6.92e-01  2.88e-02  4.93e-01  1.10e-02  8.00e-02  5.42e-01  
  4  +4.5955e-01  +8.9753e-01  4.38e-01  1.11e-02  1.92e-01  9.36e-03  3.49e-02  6.11e-01  
  5  +4.2944e-01  +6.9340e-01  2.64e-01  6.13e-03  1.05e-01  4.73e-03  2.12e-02  4.66e-01  
  6  +3.9758e-01  +5.0431e-01  1.07e-01  2.39e-03  4.05e-02  1.45e-03  9.38e-03  6.34e-01  
  7  +3.7359e-01  +3.8283e-01  9.24e-03  2.08e-04  3.49e-03  1.28e-05  9.36e-04  9.88e-01  
  8  +3.7087e-01  +3.7237e-01  1.50e-03  3.35e-05  5.61e-04  2.34e-06  1.57e-04  8.45e-01  
  9  +3.7034e-01  +3.7046e-01  1.12e-04  2.42e-06  4.06e-05  4.31e-07  1.21e-05  9.90e-01  
 10  +3.7030e-01  +3.7030e-01  1.21e-06  2.61e-08  4.38e-07  4.58e-09  1.31e-07  9.89e-01  
 11  +3.7030e-01  +3.7030e-01  1.21e-08  2.61e-10  4.37e-09  4.58e-11  1.31e-09  9.90e-01  
 12  +3.7030e-01  +3.7030e-01  1.21e-10  2.61e-12  4.37e-11  4.59e-13  1.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 727.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:31 PM: Optimal value: 3.703e-01
(CVXPY) Oct 06 03:49:31 PM: Compilation took 9.620e-03 seconds
(CVXPY) Oct 06 03:49:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.3703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:31 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:31 PM: Finished problem compilation (took 3.021e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 487
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9248e-01  +5.0969e+01  5.05e+01  8.68e-01  8.07e+00  1.00e+00  1.05e+00   ------   
  1  +5.7935e-01  +1.0418e+01  9.84e+00  3.22e-01  4.24e+00  4.03e-03  5.20e-01  6.50e-01  
  2  +5.2038e-01  +1.5864e+00  1.07e+00  6.42e-02  1.08e+00  1.16e-02  1.63e-01  9.43e-01  
  3  +4.9732e-01  +1.1890e+00  6.92e-01  2.88e-02  4.92e-01  1.10e-02  8.04e-02  5.53e-01  
  4  +4.5840e-01  +8.9426e-01  4.36e-01  1.13e-02  1.94e-01  9.00e-03  3.57e-02  6.11e-01  
  5  +4.2969e-01  +7.0062e-01  2.71e-01  6.32e-03  1.08e-01  4.97e-03  2.19e-02  4.52e-01  
  6  +3.9691e-01  +5.0055e-01  1.04e-01  2.34e-03  3.96e-02  1.31e-03  9.25e-03  6.80e-01  
  7  +3.7344e-01  +3.8217e-01  8.73e-03  1.98e-04  3.31e-03  1.16e-05  8.90e-04  9.90e-01  
  8  +3.7093e-01  +3.7256e-01  1.63e-03  3.67e-05  6.13e-04  2.63e-06  1.72e-04  8.28e-01  
  9  +3.7036e-01  +3.7052e-01  1.63e-04  3.53e-06  5.89e-05  6.40e-07  1.76e-05  9.90e-01  
 10  +3.7030e-01  +3.7030e-01  1.86e-06  4.02e-08  6.72e-07  7.11e-09  2.03e-07  9.89e-01  
 11  +3.7030e-01  +3.7030e-01  1.86e-08  4.02e-10  6.72e-09  7.11e-11  2.03e-09  9.90e-01  
 12  +3.7030e-01  +3.7030e-01  1.86e-10  4.02e-12  6.72e-11  7.12e-13  2.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 764.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:31 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:31 PM: Optimal value: 3.703e-01
(CVXPY) Oct 06 03:49:31 PM: Compilation took 3.021e-03 seconds
(CVXPY) Oct 06 03:49:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.62
  Our objective: 0.24

IF 
    (x0 = 0 AND x2 = 0)                       <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.04)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.780244827270508
Best over terms:
  Our final objective: 0.15999999999999998
    Its accruacy: 0.58
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.15999999999999998
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

