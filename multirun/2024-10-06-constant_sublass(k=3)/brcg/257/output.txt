Command:
python test_script.py -s constant_subclass -d 7 -n 500 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.176
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 7.

Computed total variation: 0.43200000000000005
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:14 PM: Your problem has 265 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Finished problem compilation (took 3.390e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 265
  constraints   = 515
  nnz(P)        = 0
  nnz(A)        = 2515
  cones (total) = 1
    : Nonnegative = 1,  numel = 515

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +2.5098e+02  2.50e+02  9.36e-01  2.27e+01  1.00e+00  1.01e+00   ------   
  1  +5.8726e-01  +5.2960e+01  5.24e+01  3.81e-01  1.39e+01  3.86e-03  5.48e-01  6.11e-01  
  2  +5.3443e-01  +6.6383e+00  6.10e+00  1.20e-01  5.47e+00  1.36e-02  2.40e-01  9.06e-01  
  3  +5.0049e-01  +1.2412e+00  7.41e-01  2.22e-02  1.00e+00  6.97e-05  1.77e-01  8.64e-01  
  4  +4.9835e-01  +7.0624e-01  2.08e-01  5.97e-03  2.75e-01  4.37e-05  3.55e-02  8.45e-01  
  5  +4.7915e-01  +6.4405e-01  1.65e-01  1.32e-03  6.23e-02  2.43e-04  4.25e-03  9.00e-01  
  6  +4.6394e-01  +5.6861e-01  1.05e-01  6.27e-04  2.94e-02  1.54e-04  2.17e-03  5.86e-01  
  7  +4.4709e-01  +4.9615e-01  4.91e-02  2.32e-04  1.08e-02  6.24e-05  9.09e-04  6.81e-01  
  8  +4.3817e-01  +4.5802e-01  1.99e-02  8.68e-05  4.05e-03  1.62e-05  3.69e-04  9.90e-01  
  9  +4.3236e-01  +4.3320e-01  8.46e-04  3.52e-06  1.64e-04  6.01e-07  1.59e-05  9.61e-01  
 10  +4.3210e-01  +4.3211e-01  8.48e-06  3.53e-08  1.65e-06  6.02e-09  1.60e-07  9.90e-01  
 11  +4.3210e-01  +4.3210e-01  8.48e-08  3.53e-10  1.65e-08  6.02e-11  1.60e-09  9.90e-01  
 12  +4.3210e-01  +4.3210e-01  8.48e-10  3.53e-12  1.65e-10  6.02e-13  1.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7844ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:14 PM: Optimal value: 4.321e-01
(CVXPY) Oct 06 04:02:14 PM: Compilation took 3.390e-02 seconds
(CVXPY) Oct 06 04:02:14 PM: Solver (including time spent in interface) took 1.014e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4321
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:14 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 3142
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +2.5125e+02  2.51e+02  9.37e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.8446e-01  +5.3260e+01  5.27e+01  3.88e-01  1.47e+01  3.84e-03  5.61e-01  6.07e-01  
  2  +5.3122e-01  +6.3404e+00  5.81e+00  1.16e-01  5.54e+00  1.44e-02  2.37e-01  9.42e-01  
  3  +5.0101e-01  +1.3953e+00  8.94e-01  2.79e-02  1.31e+00  7.85e-04  1.64e-01  8.68e-01  
  4  +4.9752e-01  +7.9276e-01  2.95e-01  8.15e-03  3.99e-01  5.84e-04  3.52e-02  8.19e-01  
  5  +4.8449e-01  +7.5163e-01  2.67e-01  2.93e-03  1.48e-01  1.73e-03  8.90e-03  7.81e-01  
  6  +4.7412e-01  +7.1001e-01  2.36e-01  1.75e-03  8.85e-02  1.86e-03  5.26e-03  5.10e-01  
  7  +4.6257e-01  +6.7180e-01  2.09e-01  1.16e-03  5.85e-02  1.51e-03  3.48e-03  5.39e-01  
  8  +4.4360e-01  +5.9867e-01  1.55e-01  7.24e-04  3.66e-02  5.59e-04  2.26e-03  6.81e-01  
  9  +4.1213e-01  +4.6898e-01  5.69e-02  2.22e-04  1.12e-02  9.05e-05  7.52e-04  8.64e-01  
 10  +3.9406e-01  +3.9868e-01  4.62e-03  1.75e-05  8.86e-04  4.32e-06  6.49e-05  9.31e-01  
 11  +3.9224e-01  +3.9233e-01  9.15e-05  3.48e-07  1.75e-05  6.00e-08  1.34e-06  9.84e-01  
 12  +3.9220e-01  +3.9220e-01  9.12e-07  3.47e-09  1.75e-07  5.99e-10  1.34e-08  9.90e-01  
 13  +3.9220e-01  +3.9220e-01  9.12e-09  3.47e-11  1.75e-09  5.99e-12  1.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5668ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:14 PM: Optimal value: 3.922e-01
(CVXPY) Oct 06 04:02:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:02:14 PM: Solver (including time spent in interface) took 9.842e-03 seconds
Iteration: 2, Objective: 0.3922
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:14 PM: Your problem has 285 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 285
  constraints   = 535
  nnz(P)        = 0
  nnz(A)        = 3364
  cones (total) = 1
    : Nonnegative = 1,  numel = 535

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9881e-01  +2.5154e+02  2.51e+02  9.38e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.7981e-01  +5.3385e+01  5.28e+01  3.91e-01  1.46e+01  3.84e-03  5.62e-01  6.06e-01  
  2  +5.2788e-01  +5.9915e+00  5.46e+00  1.08e-01  5.16e+00  1.49e-02  2.22e-01  9.81e-01  
  3  +5.0044e-01  +1.5047e+00  1.00e+00  3.10e-02  1.48e+00  2.01e-03  1.30e-01  9.47e-01  
  4  +4.8244e-01  +1.1301e+00  6.48e-01  7.56e-03  3.82e-01  4.89e-03  2.16e-02  9.04e-01  
  5  +4.6524e-01  +9.2468e-01  4.59e-01  3.77e-03  1.90e-01  4.09e-03  1.11e-02  5.37e-01  
  6  +4.5593e-01  +8.9475e-01  4.39e-01  2.56e-03  1.30e-01  4.38e-03  7.36e-03  4.57e-01  
  7  +4.4450e-01  +7.8881e-01  3.44e-01  1.75e-03  8.82e-02  2.08e-03  5.17e-03  5.73e-01  
  8  +4.3209e-01  +6.9969e-01  2.68e-01  1.41e-03  7.10e-02  7.50e-04  4.33e-03  4.86e-01  
  9  +4.0773e-01  +5.7310e-01  1.65e-01  7.34e-04  3.67e-02  4.66e-04  2.36e-03  4.94e-01  
 10  +3.8485e-01  +4.5757e-01  7.27e-02  2.98e-04  1.49e-02  6.17e-05  1.02e-03  9.90e-01  
 11  +3.6503e-01  +3.7273e-01  7.70e-03  3.08e-05  1.54e-03  5.33e-06  1.14e-04  9.01e-01  
 12  +3.6251e-01  +3.6276e-01  2.49e-04  9.96e-07  4.96e-05  1.71e-07  3.74e-06  9.68e-01  
 13  +3.6244e-01  +3.6246e-01  2.92e-05  1.17e-07  5.83e-06  2.12e-08  4.40e-07  8.93e-01  
 14  +3.6243e-01  +3.6243e-01  2.93e-07  1.17e-09  5.85e-08  2.13e-10  4.41e-09  9.90e-01  
 15  +3.6243e-01  +3.6243e-01  2.93e-09  1.17e-11  5.86e-10  2.13e-12  4.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.4286ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:14 PM: Optimal value: 3.624e-01
(CVXPY) Oct 06 04:02:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:02:14 PM: Solver (including time spent in interface) took 9.724e-03 seconds
Iteration: 3, Objective: 0.3624
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:14 PM: Your problem has 295 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Finished problem compilation (took 1.348e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 295
  constraints   = 545
  nnz(P)        = 0
  nnz(A)        = 3558
  cones (total) = 1
    : Nonnegative = 1,  numel = 545

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9862e-01  +2.5149e+02  2.51e+02  9.39e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.7691e-01  +5.3450e+01  5.29e+01  3.93e-01  1.45e+01  3.85e-03  5.61e-01  6.06e-01  
  2  +5.2601e-01  +5.9599e+00  5.43e+00  1.06e-01  5.03e+00  1.52e-02  2.18e-01  9.90e-01  
  3  +5.0094e-01  +1.3561e+00  8.55e-01  2.62e-02  1.28e+00  1.67e-03  8.73e-02  9.90e-01  
  4  +4.8545e-01  +1.3165e+00  8.31e-01  9.19e-03  4.70e-01  4.35e-03  2.45e-02  7.76e-01  
  5  +4.6750e-01  +1.0452e+00  5.78e-01  4.69e-03  2.39e-01  3.32e-03  1.30e-02  5.32e-01  
  6  +4.4962e-01  +9.4545e-01  4.96e-01  2.60e-03  1.32e-01  3.35e-03  7.30e-03  5.60e-01  
  7  +4.2090e-01  +7.1445e-01  2.94e-01  1.48e-03  7.43e-02  5.77e-04  4.48e-03  6.78e-01  
  8  +3.7851e-01  +4.8455e-01  1.06e-01  4.65e-04  2.31e-02  1.51e-04  1.59e-03  7.03e-01  
  9  +3.5788e-01  +3.9381e-01  3.59e-02  1.53e-04  7.64e-03  4.45e-05  5.82e-04  7.08e-01  
 10  +3.4745e-01  +3.4974e-01  2.29e-03  9.62e-06  4.79e-04  2.18e-06  3.91e-05  9.90e-01  
 11  +3.4666e-01  +3.4668e-01  2.53e-05  1.06e-07  5.30e-06  2.40e-08  4.34e-07  9.89e-01  
 12  +3.4665e-01  +3.4665e-01  2.53e-07  1.06e-09  5.30e-08  2.40e-10  4.34e-09  9.90e-01  
 13  +3.4665e-01  +3.4665e-01  2.53e-09  1.06e-11  5.30e-10  2.40e-12  4.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.383ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:14 PM: Optimal value: 3.467e-01
(CVXPY) Oct 06 04:02:14 PM: Compilation took 1.348e-02 seconds
(CVXPY) Oct 06 04:02:14 PM: Solver (including time spent in interface) took 6.628e-03 seconds
Iteration: 4, Objective: 0.3467
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:14 PM: Your problem has 305 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Finished problem compilation (took 8.633e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 305
  constraints   = 555
  nnz(P)        = 0
  nnz(A)        = 3735
  cones (total) = 1
    : Nonnegative = 1,  numel = 555

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9851e-01  +2.5163e+02  2.51e+02  9.39e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.7359e-01  +5.3554e+01  5.30e+01  3.95e-01  1.44e+01  3.85e-03  5.61e-01  6.05e-01  
  2  +5.2352e-01  +6.0436e+00  5.52e+00  1.06e-01  4.99e+00  1.54e-02  2.17e-01  9.90e-01  
  3  +5.0298e-01  +1.5027e+00  1.00e+00  2.58e-02  1.29e+00  2.96e-03  7.06e-02  8.24e-01  
  4  +4.9217e-01  +1.5033e+00  1.01e+00  1.15e-02  5.89e-01  5.84e-03  2.91e-02  6.47e-01  
  5  +4.6742e-01  +1.0428e+00  5.75e-01  5.16e-03  2.60e-01  2.24e-03  1.42e-02  6.65e-01  
  6  +4.5666e-01  +1.0538e+00  5.97e-01  3.57e-03  1.80e-01  2.57e-03  9.77e-03  4.95e-01  
  7  +4.4113e-01  +9.4540e-01  5.04e-01  2.55e-03  1.29e-01  2.15e-03  7.19e-03  3.33e-01  
  8  +4.0464e-01  +6.7321e-01  2.69e-01  1.41e-03  6.96e-02  1.86e-05  4.44e-03  7.92e-01  
  9  +3.6362e-01  +4.5555e-01  9.19e-02  4.18e-04  2.04e-02  1.54e-05  1.49e-03  7.05e-01  
 10  +3.4304e-01  +3.6324e-01  2.02e-02  8.81e-05  4.26e-03  1.50e-05  3.57e-04  9.25e-01  
 11  +3.3773e-01  +3.4121e-01  3.48e-03  1.48e-05  7.14e-04  2.57e-06  6.40e-05  8.39e-01  
 12  +3.3670e-01  +3.3699e-01  2.91e-04  1.24e-06  5.96e-05  1.97e-07  5.54e-06  9.27e-01  
 13  +3.3660e-01  +3.3661e-01  4.02e-06  1.71e-08  8.23e-07  2.44e-09  7.85e-08  9.88e-01  
 14  +3.3660e-01  +3.3660e-01  4.02e-08  1.71e-10  8.23e-09  2.44e-11  7.85e-10  9.90e-01  
 15  +3.3660e-01  +3.3660e-01  4.02e-10  1.71e-12  8.23e-11  2.44e-13  7.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.6493ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:14 PM: Optimal value: 3.366e-01
(CVXPY) Oct 06 04:02:14 PM: Compilation took 8.633e-03 seconds
(CVXPY) Oct 06 04:02:14 PM: Solver (including time spent in interface) took 9.701e-03 seconds
Iteration: 5, Objective: 0.3366
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:14 PM: Your problem has 315 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 315
  constraints   = 565
  nnz(P)        = 0
  nnz(A)        = 3914
  cones (total) = 1
    : Nonnegative = 1,  numel = 565

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9835e-01  +2.5183e+02  2.51e+02  9.40e-01  2.40e+01  1.00e+00  1.02e+00   ------   
  1  +5.7080e-01  +5.3639e+01  5.31e+01  3.97e-01  1.43e+01  3.85e-03  5.61e-01  6.05e-01  
  2  +5.2136e-01  +6.1201e+00  5.60e+00  1.05e-01  4.94e+00  1.56e-02  2.16e-01  9.90e-01  
  3  +5.0334e-01  +1.6876e+00  1.18e+00  2.67e-02  1.34e+00  4.01e-03  6.92e-02  7.37e-01  
  4  +4.9160e-01  +1.6618e+00  1.17e+00  1.28e-02  6.59e-01  6.70e-03  3.20e-02  6.11e-01  
  5  +4.6500e-01  +1.1088e+00  6.44e-01  5.87e-03  2.95e-01  1.98e-03  1.62e-02  6.74e-01  
  6  +4.5033e-01  +1.0629e+00  6.13e-01  3.89e-03  1.95e-01  2.12e-03  1.08e-02  4.67e-01  
  7  +4.3202e-01  +9.5464e-01  5.23e-01  2.68e-03  1.34e-01  1.77e-03  7.64e-03  4.05e-01  
  8  +3.9332e-01  +6.7123e-01  2.78e-01  1.44e-03  7.08e-02  1.55e-05  4.67e-03  8.58e-01  
  9  +3.5533e-01  +4.6398e-01  1.09e-01  5.04e-04  2.44e-02  1.67e-05  1.84e-03  6.51e-01  
 10  +3.3297e-01  +3.6007e-01  2.71e-02  1.22e-04  5.85e-03  1.82e-05  5.03e-04  9.04e-01  
 11  +3.2647e-01  +3.3167e-01  5.20e-03  2.32e-05  1.11e-03  3.43e-06  1.02e-04  8.07e-01  
 12  +3.2601e-01  +3.2962e-01  3.61e-03  1.59e-05  7.66e-04  2.66e-06  7.01e-05  5.49e-01  
 13  +3.2498e-01  +3.2535e-01  3.74e-04  1.64e-06  7.91e-05  3.15e-07  7.35e-06  9.90e-01  
 14  +3.2485e-01  +3.2486e-01  4.46e-06  1.96e-08  9.44e-07  3.74e-09  8.79e-08  9.88e-01  
 15  +3.2485e-01  +3.2485e-01  4.46e-08  1.96e-10  9.45e-09  3.74e-11  8.79e-10  9.90e-01  
 16  +3.2485e-01  +3.2485e-01  4.46e-10  1.96e-12  9.45e-11  3.74e-13  8.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.4358ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:14 PM: Optimal value: 3.249e-01
(CVXPY) Oct 06 04:02:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:02:14 PM: Solver (including time spent in interface) took 1.613e-02 seconds
Iteration: 6, Objective: 0.3249
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:15 PM: Your problem has 325 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:15 PM: Finished problem compilation (took 5.994e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 325
  constraints   = 575
  nnz(P)        = 0
  nnz(A)        = 4065
  cones (total) = 1
    : Nonnegative = 1,  numel = 575

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9828e-01  +2.5194e+02  2.51e+02  9.40e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.6831e-01  +5.3742e+01  5.32e+01  3.99e-01  1.41e+01  3.86e-03  5.62e-01  6.04e-01  
  2  +5.1946e-01  +6.1875e+00  5.67e+00  1.05e-01  4.89e+00  1.58e-02  2.16e-01  9.90e-01  
  3  +5.0222e-01  +1.7078e+00  1.21e+00  2.48e-02  1.26e+00  4.49e-03  6.34e-02  7.30e-01  
  4  +4.8883e-01  +1.6507e+00  1.16e+00  1.24e-02  6.36e-01  6.87e-03  3.09e-02  5.93e-01  
  5  +4.6019e-01  +1.2180e+00  7.58e-01  6.00e-03  3.03e-01  3.98e-03  1.61e-02  6.04e-01  
  6  +4.4124e-01  +1.0893e+00  6.48e-01  4.07e-03  2.04e-01  2.81e-03  1.14e-02  4.92e-01  
  7  +4.2159e-01  +9.6811e-01  5.47e-01  2.98e-03  1.48e-01  2.04e-03  8.69e-03  3.80e-01  
  8  +3.7368e-01  +6.1633e-01  2.43e-01  1.27e-03  6.18e-02  1.81e-05  4.36e-03  8.68e-01  
  9  +3.5168e-01  +4.9747e-01  1.46e-01  7.21e-04  3.47e-02  3.21e-05  2.69e-03  4.91e-01  
 10  +3.2502e-01  +3.5972e-01  3.47e-02  1.63e-04  7.80e-03  1.84e-05  7.02e-04  8.71e-01  
 11  +3.1792e-01  +3.2738e-01  9.46e-03  4.39e-05  2.09e-03  6.17e-06  2.02e-04  8.36e-01  
 12  +3.1536e-01  +3.1617e-01  8.14e-04  3.73e-06  1.78e-04  5.36e-07  1.79e-05  9.36e-01  
 13  +3.1510e-01  +3.1512e-01  1.54e-05  7.05e-08  3.36e-06  9.94e-09  3.43e-07  9.82e-01  
 14  +3.1510e-01  +3.1510e-01  1.54e-07  7.05e-10  3.36e-08  9.94e-11  3.43e-09  9.90e-01  
 15  +3.1510e-01  +3.1510e-01  1.54e-09  7.05e-12  3.36e-10  9.95e-13  3.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.2018ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:15 PM: Optimal value: 3.151e-01
(CVXPY) Oct 06 04:02:15 PM: Compilation took 5.994e-03 seconds
(CVXPY) Oct 06 04:02:15 PM: Solver (including time spent in interface) took 9.138e-03 seconds
Iteration: 7, Objective: 0.3151
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:15 PM: Your problem has 335 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:15 PM: Finished problem compilation (took 8.110e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 335
  constraints   = 585
  nnz(P)        = 0
  nnz(A)        = 4193
  cones (total) = 1
    : Nonnegative = 1,  numel = 585

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9819e-01  +2.5179e+02  2.51e+02  9.40e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.6555e-01  +5.3798e+01  5.32e+01  4.00e-01  1.40e+01  3.86e-03  5.61e-01  6.03e-01  
  2  +5.1746e-01  +6.2465e+00  5.73e+00  1.04e-01  4.81e+00  1.60e-02  2.14e-01  9.90e-01  
  3  +5.0009e-01  +1.7031e+00  1.20e+00  2.26e-02  1.14e+00  4.90e-03  5.74e-02  7.55e-01  
  4  +4.8369e-01  +1.5719e+00  1.09e+00  1.14e-02  5.82e-01  6.66e-03  2.86e-02  5.73e-01  
  5  +4.5404e-01  +1.2006e+00  7.47e-01  5.70e-03  2.86e-01  4.63e-03  1.52e-02  5.60e-01  
  6  +4.3614e-01  +1.1149e+00  6.79e-01  4.11e-03  2.05e-01  3.62e-03  1.14e-02  4.54e-01  
  7  +4.1303e-01  +9.4895e-01  5.36e-01  2.87e-03  1.41e-01  2.45e-03  8.36e-03  3.70e-01  
  8  +3.6333e-01  +5.7840e-01  2.15e-01  1.13e-03  5.45e-02  2.11e-05  3.91e-03  8.38e-01  
  9  +3.5004e-01  +5.1178e-01  1.62e-01  8.18e-04  3.92e-02  3.21e-05  2.96e-03  3.36e-01  
 10  +3.2416e-01  +3.7757e-01  5.34e-02  2.58e-04  1.23e-02  2.08e-05  1.05e-03  7.50e-01  
 11  +3.1332e-01  +3.2731e-01  1.40e-02  6.56e-05  3.12e-03  9.50e-06  2.91e-04  9.05e-01  
 12  +3.0957e-01  +3.1048e-01  9.09e-04  4.25e-06  2.02e-04  5.50e-07  1.97e-05  9.36e-01  
 13  +3.0932e-01  +3.0938e-01  5.83e-05  2.73e-07  1.29e-05  3.46e-08  1.30e-06  9.42e-01  
 14  +3.0930e-01  +3.0930e-01  5.89e-07  2.76e-09  1.31e-07  3.49e-10  1.31e-08  9.90e-01  
 15  +3.0930e-01  +3.0930e-01  5.89e-09  2.76e-11  1.31e-09  3.49e-12  1.31e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.7758ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:15 PM: Optimal value: 3.093e-01
(CVXPY) Oct 06 04:02:15 PM: Compilation took 8.110e-03 seconds
(CVXPY) Oct 06 04:02:15 PM: Solver (including time spent in interface) took 9.859e-03 seconds
Iteration: 8, Objective: 0.3093
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:15 PM: Your problem has 345 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:15 PM: Finished problem compilation (took 9.797e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 345
  constraints   = 595
  nnz(P)        = 0
  nnz(A)        = 4320
  cones (total) = 1
    : Nonnegative = 1,  numel = 595

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9818e-01  +2.5203e+02  2.52e+02  9.41e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.6361e-01  +5.3853e+01  5.33e+01  4.00e-01  1.39e+01  3.88e-03  5.58e-01  6.04e-01  
  2  +5.1603e-01  +6.2580e+00  5.74e+00  1.03e-01  4.72e+00  1.60e-02  2.13e-01  9.90e-01  
  3  +4.9869e-01  +1.8104e+00  1.31e+00  2.33e-02  1.17e+00  5.44e-03  5.84e-02  7.46e-01  
  4  +4.7882e-01  +1.5793e+00  1.10e+00  1.12e-02  5.67e-01  6.72e-03  2.82e-02  5.81e-01  
  5  +4.5182e-01  +1.2635e+00  8.12e-01  6.20e-03  3.11e-01  5.25e-03  1.65e-02  4.85e-01  
  6  +4.3178e-01  +1.1714e+00  7.40e-01  4.34e-03  2.16e-01  4.15e-03  1.20e-02  4.80e-01  
  7  +4.1178e-01  +1.0101e+00  5.98e-01  3.14e-03  1.55e-01  2.88e-03  9.13e-03  3.53e-01  
  8  +3.7127e-01  +6.5139e-01  2.80e-01  1.52e-03  7.33e-02  2.41e-05  5.13e-03  8.47e-01  
  9  +3.4658e-01  +5.0346e-01  1.57e-01  8.03e-04  3.83e-02  3.27e-05  2.95e-03  5.15e-01  
 10  +3.2373e-01  +3.7919e-01  5.55e-02  2.72e-04  1.29e-02  2.05e-05  1.11e-03  7.26e-01  
 11  +3.1303e-01  +3.2624e-01  1.32e-02  6.34e-05  3.01e-03  7.02e-06  2.78e-04  8.47e-01  
 12  +3.1015e-01  +3.1283e-01  2.68e-03  1.27e-05  6.02e-04  2.05e-06  5.81e-05  9.79e-01  
 13  +3.0942e-01  +3.0980e-01  3.81e-04  1.80e-06  8.53e-05  2.80e-07  8.47e-06  8.73e-01  
 14  +3.0930e-01  +3.0931e-01  4.64e-06  2.20e-08  1.04e-06  3.22e-09  1.04e-07  9.89e-01  
 15  +3.0930e-01  +3.0930e-01  4.65e-08  2.20e-10  1.04e-08  3.22e-11  1.04e-09  9.90e-01  
 16  +3.0930e-01  +3.0930e-01  4.65e-10  2.20e-12  1.04e-10  3.23e-13  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0116ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:15 PM: Optimal value: 3.093e-01
(CVXPY) Oct 06 04:02:15 PM: Compilation took 9.797e-03 seconds
(CVXPY) Oct 06 04:02:15 PM: Solver (including time spent in interface) took 1.007e-02 seconds
Iteration: 9, Objective: 0.3093
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:15 PM: Your problem has 355 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:15 PM: Finished problem compilation (took 7.128e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 355
  constraints   = 605
  nnz(P)        = 0
  nnz(A)        = 4390
  cones (total) = 1
    : Nonnegative = 1,  numel = 605

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9807e-01  +2.5201e+02  2.52e+02  9.41e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.6109e-01  +5.3909e+01  5.33e+01  4.03e-01  1.37e+01  3.87e-03  5.60e-01  6.03e-01  
  2  +5.1384e-01  +6.3342e+00  5.82e+00  1.02e-01  4.62e+00  1.62e-02  2.13e-01  9.90e-01  
  3  +4.9565e-01  +1.8786e+00  1.38e+00  2.25e-02  1.12e+00  6.02e-03  5.67e-02  7.58e-01  
  4  +4.7147e-01  +1.5191e+00  1.05e+00  1.04e-02  5.20e-01  6.24e-03  2.69e-02  5.83e-01  
  5  +4.4424e-01  +1.4333e+00  9.89e-01  6.31e-03  3.14e-01  6.99e-03  1.68e-02  4.99e-01  
  6  +4.1712e-01  +1.1328e+00  7.16e-01  4.03e-03  1.98e-01  3.56e-03  1.15e-02  4.85e-01  
  7  +3.8319e-01  +7.9783e-01  4.15e-01  2.49e-03  1.19e-01  2.97e-05  8.02e-03  8.21e-01  
  8  +3.3758e-01  +4.7375e-01  1.36e-01  7.14e-04  3.37e-02  3.05e-05  2.67e-03  7.39e-01  
  9  +3.2165e-01  +3.9429e-01  7.26e-02  3.72e-04  1.75e-02  2.66e-05  1.52e-03  5.69e-01  
 10  +3.0702e-01  +3.2010e-01  1.31e-02  6.57e-05  3.07e-03  5.04e-06  2.99e-04  8.34e-01  
 11  +3.0490e-01  +3.0977e-01  4.87e-03  2.42e-05  1.13e-03  2.37e-06  1.14e-04  7.29e-01  
 12  +3.0376e-01  +3.0460e-01  8.44e-04  4.14e-06  1.93e-04  4.72e-07  2.03e-05  9.11e-01  
 13  +3.0352e-01  +3.0358e-01  6.14e-05  2.97e-07  1.39e-05  3.94e-08  1.50e-06  9.85e-01  
 14  +3.0350e-01  +3.0350e-01  6.30e-07  3.05e-09  1.43e-07  4.04e-10  1.54e-08  9.90e-01  
 15  +3.0350e-01  +3.0350e-01  6.31e-09  3.06e-11  1.43e-09  4.04e-12  1.55e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.1066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:15 PM: Optimal value: 3.035e-01
(CVXPY) Oct 06 04:02:15 PM: Compilation took 7.128e-03 seconds
(CVXPY) Oct 06 04:02:15 PM: Solver (including time spent in interface) took 9.897e-03 seconds
Iteration: 10, Objective: 0.3035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:15 PM: Your problem has 365 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:15 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 365
  constraints   = 615
  nnz(P)        = 0
  nnz(A)        = 4463
  cones (total) = 1
    : Nonnegative = 1,  numel = 615

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9792e-01  +2.5205e+02  2.52e+02  9.42e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.5713e-01  +5.3949e+01  5.34e+01  4.04e-01  1.36e+01  3.88e-03  5.60e-01  6.03e-01  
  2  +5.1113e-01  +6.4498e+00  5.94e+00  1.01e-01  4.53e+00  1.65e-02  2.09e-01  9.90e-01  
  3  +4.9110e-01  +1.9519e+00  1.46e+00  2.15e-02  1.07e+00  6.70e-03  5.33e-02  7.78e-01  
  4  +4.6105e-01  +1.5214e+00  1.06e+00  9.62e-03  4.79e-01  6.65e-03  2.47e-02  5.85e-01  
  5  +4.3292e-01  +1.5002e+00  1.07e+00  6.53e-03  3.23e-01  6.31e-03  1.73e-02  5.42e-01  
  6  +3.8867e-01  +9.0348e-01  5.15e-01  3.24e-03  1.55e-01  5.37e-05  9.82e-03  7.36e-01  
  7  +3.5595e-01  +6.5638e-01  3.00e-01  1.78e-03  8.40e-02  5.07e-05  6.03e-03  4.45e-01  
  8  +3.3254e-01  +5.0716e-01  1.75e-01  9.76e-04  4.56e-02  4.35e-05  3.66e-03  4.71e-01  
  9  +3.1295e-01  +3.9140e-01  7.84e-02  4.19e-04  1.95e-02  2.47e-05  1.75e-03  5.86e-01  
 10  +2.9957e-01  +3.1597e-01  1.64e-02  8.62e-05  3.99e-03  5.79e-06  4.00e-04  8.06e-01  
 11  +2.9693e-01  +3.0180e-01  4.86e-03  2.52e-05  1.17e-03  2.39e-06  1.23e-04  8.20e-01  
 12  +2.9597e-01  +2.9724e-01  1.27e-03  6.47e-06  2.99e-04  7.53e-07  3.28e-05  9.41e-01  
 13  +2.9562e-01  +2.9570e-01  7.71e-05  3.87e-07  1.79e-05  4.55e-08  2.02e-06  9.76e-01  
 14  +2.9560e-01  +2.9560e-01  8.67e-07  4.34e-09  2.01e-07  5.10e-10  2.27e-08  9.89e-01  
 15  +2.9560e-01  +2.9560e-01  8.67e-09  4.34e-11  2.01e-09  5.10e-12  2.28e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.4916ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:15 PM: Optimal value: 2.956e-01
(CVXPY) Oct 06 04:02:15 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:02:15 PM: Solver (including time spent in interface) took 1.878e-02 seconds
Iteration: 11, Objective: 0.2956
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:16 PM: Your problem has 375 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:16 PM: Finished problem compilation (took 9.941e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 375
  constraints   = 625
  nnz(P)        = 0
  nnz(A)        = 4558
  cones (total) = 1
    : Nonnegative = 1,  numel = 625

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9787e-01  +2.5205e+02  2.52e+02  9.42e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.5633e-01  +5.4039e+01  5.35e+01  4.06e-01  1.35e+01  3.88e-03  5.61e-01  6.02e-01  
  2  +5.0986e-01  +6.4646e+00  5.95e+00  1.01e-01  4.49e+00  1.66e-02  2.11e-01  9.90e-01  
  3  +4.9032e-01  +2.0216e+00  1.53e+00  2.23e-02  1.10e+00  6.87e-03  5.57e-02  7.59e-01  
  4  +4.5972e-01  +1.5314e+00  1.07e+00  9.87e-03  4.87e-01  6.42e-03  2.56e-02  5.86e-01  
  5  +4.3178e-01  +1.5537e+00  1.12e+00  6.81e-03  3.34e-01  6.31e-03  1.81e-02  5.54e-01  
  6  +3.8824e-01  +9.4467e-01  5.56e-01  3.48e-03  1.66e-01  2.26e-04  1.06e-02  7.30e-01  
  7  +3.5096e-01  +6.4194e-01  2.91e-01  1.70e-03  7.98e-02  1.16e-04  5.89e-03  4.94e-01  
  8  +3.3051e-01  +5.1019e-01  1.80e-01  1.01e-03  4.69e-02  7.60e-05  3.82e-03  4.06e-01  
  9  +3.1109e-01  +3.9313e-01  8.20e-02  4.40e-04  2.03e-02  3.84e-05  1.84e-03  5.84e-01  
 10  +3.0480e-01  +3.5709e-01  5.23e-02  2.75e-04  1.27e-02  2.90e-05  1.20e-03  5.39e-01  
 11  +2.9548e-01  +3.0845e-01  1.30e-02  6.60e-05  3.04e-03  7.82e-06  3.09e-04  8.20e-01  
 12  +2.9320e-01  +2.9760e-01  4.41e-03  2.18e-05  1.00e-03  2.80e-06  1.06e-04  7.47e-01  
 13  +2.9205e-01  +2.9250e-01  4.52e-04  2.19e-06  1.01e-04  2.76e-07  1.11e-05  9.90e-01  
 14  +2.9190e-01  +2.9191e-01  1.01e-05  4.87e-08  2.24e-06  6.20e-09  2.48e-07  9.80e-01  
 15  +2.9190e-01  +2.9190e-01  1.01e-07  4.87e-10  2.24e-08  6.20e-11  2.48e-09  9.90e-01  
 16  +2.9190e-01  +2.9190e-01  1.01e-09  4.87e-12  2.24e-10  6.21e-13  2.48e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.6576ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:16 PM: Optimal value: 2.919e-01
(CVXPY) Oct 06 04:02:16 PM: Compilation took 9.941e-03 seconds
(CVXPY) Oct 06 04:02:16 PM: Solver (including time spent in interface) took 1.338e-02 seconds
Iteration: 12, Objective: 0.2919
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:16 PM: Your problem has 384 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:16 PM: Finished problem compilation (took 8.091e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 384
  constraints   = 634
  nnz(P)        = 0
  nnz(A)        = 4669
  cones (total) = 1
    : Nonnegative = 1,  numel = 634

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9782e-01  +2.5212e+02  2.52e+02  9.43e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.5309e-01  +5.4176e+01  5.36e+01  4.07e-01  1.34e+01  3.89e-03  5.61e-01  6.01e-01  
  2  +5.0658e-01  +6.5238e+00  6.02e+00  1.01e-01  4.43e+00  1.68e-02  2.11e-01  9.90e-01  
  3  +4.8458e-01  +1.9665e+00  1.48e+00  2.02e-02  9.91e-01  7.05e-03  5.08e-02  7.82e-01  
  4  +4.5394e-01  +1.5103e+00  1.06e+00  1.00e-02  4.89e-01  5.80e-03  2.63e-02  5.44e-01  
  5  +4.2366e-01  +1.4480e+00  1.02e+00  6.38e-03  3.11e-01  6.18e-03  1.73e-02  5.00e-01  
  6  +3.8052e-01  +9.3160e-01  5.51e-01  3.45e-03  1.63e-01  5.42e-05  1.07e-02  7.87e-01  
  7  +3.4162e-01  +6.0062e-01  2.59e-01  1.52e-03  7.08e-02  4.73e-05  5.37e-03  5.63e-01  
  8  +3.1905e-01  +4.5804e-01  1.39e-01  7.79e-04  3.59e-02  3.48e-05  3.04e-03  5.02e-01  
  9  +3.0931e-01  +4.0292e-01  9.36e-02  5.03e-04  2.31e-02  3.45e-05  2.06e-03  4.69e-01  
 10  +2.9805e-01  +3.3992e-01  4.19e-02  2.19e-04  1.01e-02  1.87e-05  9.59e-04  6.29e-01  
 11  +2.9029e-01  +2.9878e-01  8.49e-03  4.37e-05  2.00e-03  4.12e-06  2.03e-04  8.26e-01  
 12  +2.8915e-01  +2.9326e-01  4.10e-03  2.05e-05  9.40e-04  2.25e-06  9.82e-05  6.48e-01  
 13  +2.8814e-01  +2.8859e-01  4.56e-04  2.25e-06  1.03e-04  2.54e-07  1.11e-05  9.12e-01  
 14  +2.8801e-01  +2.8804e-01  3.21e-05  1.59e-07  7.27e-06  2.12e-08  7.90e-07  9.90e-01  
 15  +2.8800e-01  +2.8800e-01  3.23e-07  1.60e-09  7.31e-08  2.13e-10  7.95e-09  9.90e-01  
 16  +2.8800e-01  +2.8800e-01  3.24e-09  1.60e-11  7.32e-10  2.13e-12  7.96e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.2108ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:16 PM: Optimal value: 2.880e-01
(CVXPY) Oct 06 04:02:16 PM: Compilation took 8.091e-03 seconds
(CVXPY) Oct 06 04:02:16 PM: Solver (including time spent in interface) took 2.386e-02 seconds
Iteration: 13, Objective: 0.2880
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:16 PM: Your problem has 388 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:16 PM: Finished problem compilation (took 1.324e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 388
  constraints   = 638
  nnz(P)        = 0
  nnz(A)        = 4706
  cones (total) = 1
    : Nonnegative = 1,  numel = 638

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9775e-01  +2.5204e+02  2.52e+02  9.43e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.5145e-01  +5.4255e+01  5.37e+01  4.08e-01  1.33e+01  3.89e-03  5.61e-01  6.00e-01  
  2  +5.0487e-01  +6.5822e+00  6.08e+00  1.00e-01  4.40e+00  1.70e-02  2.11e-01  9.90e-01  
  3  +4.8180e-01  +1.8979e+00  1.42e+00  1.87e-02  9.16e-01  7.03e-03  4.71e-02  7.97e-01  
  4  +4.4849e-01  +1.5059e+00  1.06e+00  9.53e-03  4.64e-01  6.02e-03  2.50e-02  5.48e-01  
  5  +4.2496e-01  +1.3320e+00  9.07e-01  6.39e-03  3.08e-01  4.59e-03  1.76e-02  4.59e-01  
  6  +3.7280e-01  +8.8400e-01  5.11e-01  3.07e-03  1.45e-01  4.30e-04  9.47e-03  8.38e-01  
  7  +3.2762e-01  +5.0163e-01  1.74e-01  1.01e-03  4.66e-02  1.12e-04  3.73e-03  6.67e-01  
  8  +3.1300e-01  +4.2081e-01  1.08e-01  6.04e-04  2.77e-02  7.17e-05  2.40e-03  4.70e-01  
  9  +3.0775e-01  +3.9285e-01  8.51e-02  4.64e-04  2.13e-02  5.88e-05  1.90e-03  3.32e-01  
 10  +2.9583e-01  +3.2809e-01  3.23e-02  1.71e-04  7.83e-03  2.21e-05  7.55e-04  6.46e-01  
 11  +2.8994e-01  +2.9677e-01  6.82e-03  3.58e-05  1.63e-03  4.75e-06  1.66e-04  8.97e-01  
 12  +2.8944e-01  +2.9453e-01  5.09e-03  2.61e-05  1.19e-03  3.56e-06  1.23e-04  3.98e-01  
 13  +2.8826e-01  +2.8919e-01  9.31e-04  4.71e-06  2.15e-04  6.38e-07  2.28e-05  8.34e-01  
 14  +2.8801e-01  +2.8802e-01  1.88e-05  9.51e-08  4.34e-06  1.25e-08  4.64e-07  9.90e-01  
 15  +2.8800e-01  +2.8800e-01  1.89e-07  9.52e-10  4.35e-08  1.25e-10  4.64e-09  9.90e-01  
 16  +2.8800e-01  +2.8800e-01  1.89e-09  9.52e-12  4.35e-10  1.25e-12  4.65e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.9312ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:16 PM: Optimal value: 2.880e-01
(CVXPY) Oct 06 04:02:16 PM: Compilation took 1.324e-02 seconds
(CVXPY) Oct 06 04:02:16 PM: Solver (including time spent in interface) took 1.706e-02 seconds
Iteration: 14, Objective: 0.2880
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:16 PM: Your problem has 390 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:16 PM: Finished problem compilation (took 9.222e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 390
  constraints   = 640
  nnz(P)        = 0
  nnz(A)        = 4744
  cones (total) = 1
    : Nonnegative = 1,  numel = 640

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9775e-01  +2.5205e+02  2.52e+02  9.43e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.5122e-01  +5.4271e+01  5.37e+01  4.09e-01  1.33e+01  3.89e-03  5.62e-01  6.00e-01  
  2  +5.0460e-01  +6.5863e+00  6.08e+00  1.00e-01  4.40e+00  1.71e-02  2.11e-01  9.90e-01  
  3  +4.8149e-01  +1.9193e+00  1.44e+00  1.89e-02  9.28e-01  7.06e-03  4.79e-02  7.94e-01  
  4  +4.4983e-01  +1.5303e+00  1.08e+00  9.98e-03  4.86e-01  6.00e-03  2.62e-02  5.28e-01  
  5  +4.2458e-01  +1.3478e+00  9.23e-01  6.47e-03  3.12e-01  4.76e-03  1.79e-02  4.73e-01  
  6  +3.7455e-01  +9.1275e-01  5.38e-01  3.21e-03  1.52e-01  5.65e-04  9.87e-03  8.22e-01  
  7  +3.2692e-01  +4.9410e-01  1.67e-01  9.69e-04  4.46e-02  1.21e-04  3.59e-03  7.02e-01  
  8  +3.1453e-01  +4.2863e-01  1.14e-01  6.40e-04  2.94e-02  8.36e-05  2.52e-03  4.14e-01  
  9  +3.0536e-01  +3.8032e-01  7.50e-02  4.08e-04  1.87e-02  5.49e-05  1.70e-03  4.01e-01  
 10  +2.9104e-01  +3.0274e-01  1.17e-02  6.22e-05  2.84e-03  7.82e-06  2.86e-04  9.00e-01  
 11  +2.8933e-01  +2.9417e-01  4.84e-03  2.51e-05  1.14e-03  3.34e-06  1.18e-04  7.42e-01  
 12  +2.8852e-01  +2.9047e-01  1.95e-03  9.97e-06  4.56e-04  1.34e-06  4.78e-05  7.75e-01  
 13  +2.8806e-01  +2.8858e-01  5.17e-04  2.56e-06  1.18e-04  3.56e-07  1.25e-05  7.98e-01  
 14  +2.8791e-01  +2.8796e-01  4.55e-05  2.24e-07  1.03e-05  3.10e-08  1.11e-06  9.18e-01  
 15  +2.8790e-01  +2.8790e-01  4.67e-07  2.30e-09  1.06e-07  3.18e-10  1.14e-08  9.90e-01  
 16  +2.8790e-01  +2.8790e-01  4.68e-09  2.30e-11  1.06e-09  3.19e-12  1.14e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.1633ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:16 PM: Optimal value: 2.879e-01
(CVXPY) Oct 06 04:02:16 PM: Compilation took 9.222e-03 seconds
(CVXPY) Oct 06 04:02:16 PM: Solver (including time spent in interface) took 1.816e-02 seconds
FULL MODEL:
  Accruacy: 0.668
  Our objective: 0.33599999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.176)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x6 = 1)                       <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0)            <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0)            <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.016)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.940353155136108
Best over terms:
  Our final objective: 0.176
    Its accruacy: 0.588
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.176
  Highest accruacy: 0.588
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

