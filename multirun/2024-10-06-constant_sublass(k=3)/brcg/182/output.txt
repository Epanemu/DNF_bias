Command:
python test_script.py -s constant_subclass -d 5 -n 1000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.218
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 5.

Computed total variation: 0.272
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:06 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:06 PM: Finished problem compilation (took 5.022e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 4011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9980e-01  +5.0091e+02  5.00e+02  9.52e-01  2.87e+01  1.00e+00  1.00e+00   ------   
  1  +5.9909e-01  +1.0059e+02  1.00e+02  3.51e-01  1.66e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4439e-01  +1.4358e+01  1.38e+01  1.26e-01  7.33e+00  1.00e-02  2.29e-01  7.96e-01  
  3  +5.0356e-01  +2.3420e+00  1.84e+00  3.76e-02  2.10e+00  1.44e-05  2.12e-01  3.33e-01  
  4  +5.0039e-01  +8.0951e-01  3.09e-01  6.54e-03  3.79e-01  5.16e-06  5.92e-02  7.68e-01  
  5  +4.8851e-01  +9.9879e-01  5.10e-01  1.81e-03  1.08e-01  8.33e-05  5.15e-03  9.63e-01  
  6  +4.6328e-01  +6.4250e-01  1.79e-01  4.47e-04  2.65e-02  4.54e-05  1.37e-03  8.07e-01  
  7  +4.3820e-01  +4.7922e-01  4.10e-02  1.05e-04  6.17e-03  1.93e-05  3.74e-04  9.90e-01  
  8  +4.3007e-01  +4.3603e-01  5.96e-03  1.47e-05  8.64e-04  2.61e-06  5.62e-05  8.59e-01  
  9  +4.2824e-01  +4.2872e-01  4.81e-04  1.02e-06  5.97e-05  2.14e-07  4.54e-06  9.74e-01  
 10  +4.2810e-01  +4.2811e-01  4.86e-06  1.02e-08  6.01e-07  2.16e-09  4.59e-08  9.90e-01  
 11  +4.2810e-01  +4.2810e-01  4.86e-08  1.02e-10  6.01e-09  2.16e-11  4.59e-10  9.90e-01  
 12  +4.2810e-01  +4.2810e-01  4.86e-10  1.02e-12  6.01e-11  2.17e-13  4.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.4502ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:07 PM: Optimal value: 4.281e-01
(CVXPY) Oct 06 03:54:07 PM: Compilation took 5.022e-02 seconds
(CVXPY) Oct 06 03:54:07 PM: Solver (including time spent in interface) took 1.006e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:07 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:07 PM: Finished problem compilation (took 1.002e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 5184
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0132e+02  5.01e+02  9.53e-01  3.11e+01  1.00e+00  1.02e+00   ------   
  1  +5.9744e-01  +1.0109e+02  1.00e+02  3.56e-01  1.79e+01  3.97e-03  5.14e-01  6.42e-01  
  2  +5.4229e-01  +1.3953e+01  1.34e+01  1.24e-01  7.65e+00  1.05e-02  2.28e-01  8.17e-01  
  3  +5.0229e-01  +2.0927e+00  1.59e+00  3.30e-02  1.98e+00  1.40e-05  2.03e-01  4.67e-01  
  4  +5.0024e-01  +9.6804e-01  4.68e-01  9.80e-03  6.06e-01  7.05e-06  6.73e-02  6.99e-01  
  5  +4.8911e-01  +9.4190e-01  4.53e-01  2.40e-03  1.55e-01  5.56e-05  6.68e-03  9.43e-01  
  6  +4.8101e-01  +8.7694e-01  3.96e-01  1.49e-03  9.62e-02  6.66e-05  4.14e-03  3.98e-01  
  7  +4.7583e-01  +8.4366e-01  3.68e-01  1.05e-03  6.74e-02  1.01e-04  2.89e-03  5.36e-01  
  8  +4.6795e-01  +7.7488e-01  3.07e-01  7.51e-04  4.82e-02  1.19e-04  2.09e-03  6.22e-01  
  9  +4.4962e-01  +6.6065e-01  2.11e-01  4.65e-04  2.97e-02  1.01e-04  1.34e-03  9.14e-01  
 10  +4.2142e-01  +5.4079e-01  1.19e-01  2.25e-04  1.43e-02  5.64e-05  6.93e-04  5.33e-01  
 11  +4.0121e-01  +4.5831e-01  5.71e-02  1.03e-04  6.53e-03  2.83e-05  3.37e-04  6.59e-01  
 12  +3.8340e-01  +3.8852e-01  5.13e-03  9.09e-06  5.71e-04  2.39e-06  3.22e-05  9.65e-01  
 13  +3.8124e-01  +3.8133e-01  8.74e-05  1.54e-07  9.68e-06  3.15e-08  5.75e-07  9.85e-01  
 14  +3.8120e-01  +3.8120e-01  8.72e-07  1.54e-09  9.66e-08  3.15e-10  5.75e-09  9.90e-01  
 15  +3.8120e-01  +3.8120e-01  8.72e-09  1.54e-11  9.66e-10  3.15e-12  5.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.7246ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:07 PM: Optimal value: 3.812e-01
(CVXPY) Oct 06 03:54:07 PM: Compilation took 1.002e-02 seconds
(CVXPY) Oct 06 03:54:07 PM: Solver (including time spent in interface) took 7.098e-03 seconds
Iteration: 2, Objective: 0.3812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:07 PM: Your problem has 528 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:07 PM: Finished problem compilation (took 5.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 528
  constraints   = 1028
  nnz(P)        = 0
  nnz(A)        = 5389
  cones (total) = 1
    : Nonnegative = 1,  numel = 1028

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0166e+02  5.01e+02  9.53e-01  3.11e+01  1.00e+00  1.02e+00   ------   
  1  +5.9582e-01  +1.0131e+02  1.01e+02  3.58e-01  1.79e+01  3.97e-03  5.17e-01  6.41e-01  
  2  +5.4147e-01  +1.3797e+01  1.33e+01  1.22e-01  7.52e+00  1.06e-02  2.25e-01  8.28e-01  
  3  +5.0225e-01  +2.1292e+00  1.63e+00  3.38e-02  2.03e+00  9.53e-05  1.98e-01  4.89e-01  
  4  +5.0020e-01  +1.1437e+00  6.44e-01  1.33e-02  8.18e-01  5.56e-05  7.73e-02  6.59e-01  
  5  +4.8299e-01  +1.4933e+00  1.01e+00  3.88e-03  2.51e-01  4.69e-04  1.05e-02  9.90e-01  
  6  +4.6408e-01  +1.0899e+00  6.26e-01  1.73e-03  1.12e-01  3.60e-04  4.84e-03  5.83e-01  
  7  +4.4774e-01  +8.7869e-01  4.31e-01  9.25e-04  5.95e-02  2.70e-04  2.63e-03  6.35e-01  
  8  +4.4035e-01  +7.0976e-01  2.69e-01  6.59e-04  4.21e-02  1.19e-04  1.97e-03  8.52e-01  
  9  +4.0377e-01  +5.1955e-01  1.16e-01  2.34e-04  1.48e-02  5.14e-05  7.66e-04  6.85e-01  
 10  +3.9223e-01  +4.6470e-01  7.25e-02  1.43e-04  9.05e-03  3.27e-05  4.94e-04  4.03e-01  
 11  +3.8870e-01  +4.4773e-01  5.90e-02  1.15e-04  7.26e-03  2.84e-05  4.05e-04  2.96e-01  
 12  +3.7946e-01  +4.0284e-01  2.34e-02  4.57e-05  2.87e-03  1.46e-05  1.71e-04  9.90e-01  
 13  +3.7186e-01  +3.7305e-01  1.18e-03  2.31e-06  1.44e-04  5.16e-07  9.34e-06  9.69e-01  
 14  +3.7141e-01  +3.7142e-01  1.30e-05  2.52e-08  1.58e-06  5.46e-09  1.04e-07  9.89e-01  
 15  +3.7140e-01  +3.7140e-01  1.30e-07  2.52e-10  1.58e-08  5.46e-11  1.04e-09  9.90e-01  
 16  +3.7140e-01  +3.7140e-01  1.30e-09  2.52e-12  1.58e-10  5.46e-13  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.018ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:07 PM: Optimal value: 3.714e-01
(CVXPY) Oct 06 03:54:07 PM: Compilation took 5.009e-03 seconds
(CVXPY) Oct 06 03:54:07 PM: Solver (including time spent in interface) took 9.948e-03 seconds
Iteration: 3, Objective: 0.3714
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:07 PM: Your problem has 532 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:07 PM: Finished problem compilation (took 4.505e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 532
  constraints   = 1032
  nnz(P)        = 0
  nnz(A)        = 5499
  cones (total) = 1
    : Nonnegative = 1,  numel = 1032

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0180e+02  5.01e+02  9.53e-01  3.11e+01  1.00e+00  1.02e+00   ------   
  1  +5.9513e-01  +1.0140e+02  1.01e+02  3.59e-01  1.79e+01  3.97e-03  5.17e-01  6.41e-01  
  2  +5.4082e-01  +1.3656e+01  1.31e+01  1.21e-01  7.44e+00  1.07e-02  2.23e-01  8.34e-01  
  3  +5.0241e-01  +2.2023e+00  1.70e+00  3.53e-02  2.11e+00  1.90e-04  1.96e-01  4.87e-01  
  4  +5.0012e-01  +1.1628e+00  6.63e-01  1.35e-02  8.37e-01  1.12e-04  7.36e-02  6.80e-01  
  5  +4.8163e-01  +1.2529e+00  7.71e-01  3.05e-03  1.97e-01  8.46e-04  8.28e-03  9.61e-01  
  6  +4.7199e-01  +1.1752e+00  7.03e-01  1.99e-03  1.28e-01  9.34e-04  5.40e-03  4.16e-01  
  7  +4.6835e-01  +1.0249e+00  5.56e-01  1.42e-03  9.17e-02  4.54e-04  3.89e-03  6.34e-01  
  8  +4.5050e-01  +7.7328e-01  3.23e-01  8.41e-04  5.38e-02  5.61e-05  2.44e-03  9.90e-01  
  9  +4.1057e-01  +5.6542e-01  1.55e-01  3.20e-04  2.02e-02  4.05e-05  1.01e-03  6.89e-01  
 10  +4.0875e-01  +5.5914e-01  1.50e-01  3.02e-04  1.91e-02  4.37e-05  9.61e-04  1.15e-01  
 11  +3.9465e-01  +4.9179e-01  9.71e-02  1.98e-04  1.24e-02  6.17e-05  6.72e-04  9.90e-01  
 12  +3.7999e-01  +4.2920e-01  4.92e-02  9.69e-05  6.08e-03  3.03e-05  3.51e-04  5.17e-01  
 13  +3.7092e-01  +3.8936e-01  1.84e-02  3.60e-05  2.25e-03  1.13e-05  1.37e-04  9.90e-01  
 14  +3.6470e-01  +3.6523e-01  5.26e-04  1.03e-06  6.42e-05  2.36e-07  4.14e-06  9.89e-01  
 15  +3.6450e-01  +3.6451e-01  5.32e-06  1.04e-08  6.48e-07  2.38e-09  4.21e-08  9.90e-01  
 16  +3.6450e-01  +3.6450e-01  5.32e-08  1.04e-10  6.48e-09  2.38e-11  4.21e-10  9.90e-01  
 17  +3.6450e-01  +3.6450e-01  5.32e-10  1.04e-12  6.48e-11  2.38e-13  4.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0911ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:07 PM: Optimal value: 3.645e-01
(CVXPY) Oct 06 03:54:07 PM: Compilation took 4.505e-03 seconds
(CVXPY) Oct 06 03:54:07 PM: Solver (including time spent in interface) took 1.513e-02 seconds
FULL MODEL:
  Accruacy: 0.632
  Our objective: 0.264

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.218)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.018)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.033620595932007
Best over terms:
  Our final objective: 0.218
    Its accruacy: 0.609
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.218
  Highest accruacy: 0.609
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

