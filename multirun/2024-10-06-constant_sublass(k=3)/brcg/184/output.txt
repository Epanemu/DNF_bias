Command:
python test_script.py -s constant_subclass -d 5 -n 1000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.122
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 5.

Computed total variation: 0.196
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:21 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:21 PM: Finished problem compilation (took 5.283e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 4011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9985e-01  +5.0068e+02  5.00e+02  9.52e-01  2.86e+01  1.00e+00  1.00e+00   ------   
  1  +5.9923e-01  +1.0058e+02  1.00e+02  3.51e-01  1.65e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4482e-01  +1.4454e+01  1.39e+01  1.27e-01  7.35e+00  9.97e-03  2.31e-01  7.92e-01  
  3  +5.0552e-01  +2.7448e+00  2.24e+00  4.56e-02  2.52e+00  1.69e-05  2.20e-01  2.33e-01  
  4  +5.0026e-01  +6.6928e-01  1.69e-01  3.66e-03  2.12e-01  6.77e-06  5.34e-02  9.14e-01  
  5  +4.9981e-01  +6.2537e-01  1.26e-01  2.50e-03  1.45e-01  1.13e-05  1.61e-02  7.66e-01  
  6  +4.9163e-01  +6.0876e-01  1.17e-01  3.39e-04  2.00e-02  1.30e-04  1.09e-03  9.51e-01  
  7  +4.7828e-01  +5.2245e-01  4.42e-02  1.07e-04  6.27e-03  2.05e-05  3.81e-04  7.90e-01  
  8  +4.6760e-01  +4.7775e-01  1.01e-02  2.08e-05  1.22e-03  3.65e-06  8.38e-05  8.71e-01  
  9  +4.6424e-01  +4.6463e-01  3.91e-04  7.75e-07  4.56e-05  1.55e-07  3.26e-06  9.88e-01  
 10  +4.6410e-01  +4.6411e-01  3.91e-06  7.75e-09  4.56e-07  1.55e-09  3.26e-08  9.90e-01  
 11  +4.6410e-01  +4.6410e-01  3.91e-08  7.75e-11  4.56e-09  1.55e-11  3.26e-10  9.90e-01  
 12  +4.6410e-01  +4.6410e-01  3.91e-10  7.75e-13  4.56e-11  1.55e-13  3.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.3623ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:21 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:21 PM: Optimal value: 4.641e-01
(CVXPY) Oct 06 03:54:21 PM: Compilation took 5.283e-02 seconds
(CVXPY) Oct 06 03:54:21 PM: Solver (including time spent in interface) took 7.215e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:21 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:21 PM: Finished problem compilation (took 9.681e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 4751
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0097e+02  5.00e+02  9.53e-01  2.95e+01  1.00e+00  1.01e+00   ------   
  1  +5.9745e-01  +1.0080e+02  1.00e+02  3.53e-01  1.70e+01  3.99e-03  5.06e-01  6.44e-01  
  2  +5.4294e-01  +1.4048e+01  1.35e+01  1.23e-01  7.32e+00  1.02e-02  2.25e-01  8.11e-01  
  3  +5.0451e-01  +2.5482e+00  2.04e+00  4.19e-02  2.39e+00  1.66e-05  2.10e-01  3.03e-01  
  4  +5.0076e-01  +9.0311e-01  4.02e-01  8.66e-03  5.14e-01  6.93e-06  8.07e-02  6.85e-01  
  5  +4.9883e-01  +8.3661e-01  3.38e-01  4.40e-03  2.66e-01  2.40e-05  1.54e-02  9.47e-01  
  6  +4.9005e-01  +7.3726e-01  2.47e-01  1.01e-03  6.18e-02  7.13e-05  3.03e-03  8.06e-01  
  7  +4.8028e-01  +6.4374e-01  1.63e-01  5.47e-04  3.33e-02  5.01e-05  1.70e-03  5.51e-01  
  8  +4.7745e-01  +6.3720e-01  1.60e-01  3.90e-04  2.38e-02  6.46e-05  1.17e-03  3.93e-01  
  9  +4.7419e-01  +6.0550e-01  1.31e-01  3.67e-04  2.24e-02  4.51e-05  1.13e-03  3.26e-01  
 10  +4.7013e-01  +5.8975e-01  1.20e-01  2.72e-04  1.66e-02  4.87e-05  8.25e-04  3.14e-01  
 11  +4.6417e-01  +5.5894e-01  9.48e-02  2.40e-04  1.46e-02  3.22e-05  7.96e-04  3.50e-01  
 12  +4.4531e-01  +4.7798e-01  3.27e-02  5.79e-05  3.51e-03  2.06e-05  1.85e-04  8.57e-01  
 13  +4.3537e-01  +4.4917e-01  1.38e-02  2.31e-05  1.40e-03  8.54e-06  7.65e-05  9.40e-01  
 14  +4.2959e-01  +4.3049e-01  8.95e-04  1.45e-06  8.75e-05  5.29e-07  4.91e-06  9.40e-01  
 15  +4.2920e-01  +4.2921e-01  9.08e-06  1.47e-08  8.87e-07  5.36e-09  4.99e-08  9.90e-01  
 16  +4.2920e-01  +4.2920e-01  9.08e-08  1.47e-10  8.87e-09  5.36e-11  4.99e-10  9.90e-01  
 17  +4.2920e-01  +4.2920e-01  9.08e-10  1.47e-12  8.87e-11  5.36e-13  4.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.5608ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:21 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:21 PM: Optimal value: 4.292e-01
(CVXPY) Oct 06 03:54:21 PM: Compilation took 9.681e-03 seconds
(CVXPY) Oct 06 03:54:21 PM: Solver (including time spent in interface) took 5.095e-03 seconds
Iteration: 2, Objective: 0.4292
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:22 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:22 PM: Finished problem compilation (took 8.714e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 5246
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0118e+02  5.01e+02  9.53e-01  2.98e+01  1.00e+00  1.01e+00   ------   
  1  +5.9627e-01  +1.0093e+02  1.00e+02  3.55e-01  1.71e+01  3.99e-03  5.07e-01  6.44e-01  
  2  +5.4201e-01  +1.3854e+01  1.33e+01  1.22e-01  7.20e+00  1.04e-02  2.22e-01  8.21e-01  
  3  +5.0399e-01  +2.4473e+00  1.94e+00  4.00e-02  2.30e+00  1.65e-05  2.04e-01  3.49e-01  
  4  +5.0090e-01  +1.0519e+00  5.51e-01  1.18e-02  7.01e-01  7.79e-06  8.90e-02  6.04e-01  
  5  +4.9651e-01  +1.1895e+00  6.93e-01  5.81e-03  3.56e-01  4.40e-05  1.80e-02  9.09e-01  
  6  +4.8378e-01  +9.5912e-01  4.75e-01  1.76e-03  1.08e-01  7.35e-05  5.33e-03  7.07e-01  
  7  +4.8112e-01  +8.7129e-01  3.90e-01  1.21e-03  7.44e-02  1.05e-04  3.61e-03  6.94e-01  
  8  +4.8056e-01  +8.4675e-01  3.66e-01  1.18e-03  7.27e-02  9.52e-05  3.57e-03  7.24e-02  
  9  +4.8159e-01  +8.4448e-01  3.63e-01  1.13e-03  6.96e-02  1.07e-04  3.37e-03  3.32e-01  
 10  +4.6857e-01  +7.4522e-01  2.77e-01  6.80e-04  4.18e-02  9.44e-05  2.10e-03  4.08e-01  
 11  +4.6496e-01  +7.1189e-01  2.47e-01  6.49e-04  3.98e-02  8.16e-05  2.04e-03  2.05e-01  
 12  +4.4476e-01  +5.9911e-01  1.54e-01  3.36e-04  2.06e-02  5.59e-05  1.12e-03  5.57e-01  
 13  +4.2771e-01  +5.1307e-01  8.54e-02  1.78e-04  1.08e-02  2.98e-05  6.30e-04  4.78e-01  
 14  +4.1760e-01  +4.6307e-01  4.55e-02  9.20e-05  5.60e-03  1.79e-05  3.40e-04  5.93e-01  
 15  +4.1218e-01  +4.3699e-01  2.48e-02  4.85e-05  2.95e-03  1.19e-05  1.82e-04  6.79e-01  
 16  +4.1098e-01  +4.3251e-01  2.15e-02  4.09e-05  2.49e-03  1.05e-05  1.54e-04  3.51e-01  
 17  +4.0847e-01  +4.2178e-01  1.33e-02  2.47e-05  1.50e-03  7.39e-06  9.33e-05  8.07e-01  
 18  +4.0400e-01  +4.0531e-01  1.31e-03  2.41e-06  1.47e-04  6.61e-07  9.36e-06  9.90e-01  
 19  +4.0351e-01  +4.0352e-01  1.80e-05  3.30e-08  2.01e-06  9.12e-09  1.28e-07  9.86e-01  
 20  +4.0350e-01  +4.0350e-01  1.80e-07  3.30e-10  2.01e-08  9.12e-11  1.28e-09  9.90e-01  
 21  +4.0350e-01  +4.0350e-01  1.80e-09  3.30e-12  2.01e-10  9.13e-13  1.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0035ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:22 PM: Optimal value: 4.035e-01
(CVXPY) Oct 06 03:54:22 PM: Compilation took 8.714e-03 seconds
(CVXPY) Oct 06 03:54:22 PM: Solver (including time spent in interface) took 1.494e-02 seconds
Iteration: 3, Objective: 0.4035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:22 PM: Your problem has 533 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:22 PM: Finished problem compilation (took 5.092e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 1033
  nnz(P)        = 0
  nnz(A)        = 5324
  cones (total) = 1
    : Nonnegative = 1,  numel = 1033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0121e+02  5.01e+02  9.53e-01  2.98e+01  1.00e+00  1.01e+00   ------   
  1  +5.9572e-01  +1.0104e+02  1.00e+02  3.56e-01  1.71e+01  3.98e-03  5.08e-01  6.43e-01  
  2  +5.4180e-01  +1.3820e+01  1.33e+01  1.21e-01  7.17e+00  1.04e-02  2.22e-01  8.24e-01  
  3  +5.0395e-01  +2.4465e+00  1.94e+00  4.00e-02  2.31e+00  1.66e-05  2.03e-01  3.56e-01  
  4  +5.0085e-01  +1.0485e+00  5.48e-01  1.17e-02  6.96e-01  7.90e-06  8.64e-02  6.13e-01  
  5  +4.9811e-01  +1.1378e+00  6.40e-01  7.46e-03  4.55e-01  2.98e-05  2.45e-02  8.11e-01  
  6  +4.8218e-01  +8.7811e-01  3.96e-01  1.31e-03  8.12e-02  8.56e-05  3.92e-03  8.48e-01  
  7  +4.7615e-01  +8.4099e-01  3.65e-01  9.59e-04  5.92e-02  1.04e-04  2.84e-03  4.08e-01  
  8  +4.7065e-01  +7.9727e-01  3.27e-01  7.80e-04  4.81e-02  1.09e-04  2.33e-03  3.41e-01  
  9  +4.6332e-01  +7.1865e-01  2.55e-01  6.86e-04  4.21e-02  8.41e-05  2.16e-03  4.26e-01  
 10  +4.4207e-01  +5.9435e-01  1.52e-01  3.35e-04  2.05e-02  5.86e-05  1.12e-03  6.39e-01  
 11  +4.1978e-01  +4.7124e-01  5.15e-02  1.08e-04  6.56e-03  1.96e-05  3.94e-04  7.34e-01  
 12  +4.1756e-01  +4.5923e-01  4.17e-02  8.87e-05  5.40e-03  1.58e-05  3.35e-04  3.50e-01  
 13  +4.1247e-01  +4.3910e-01  2.66e-02  5.16e-05  3.14e-03  1.26e-05  1.92e-04  6.08e-01  
 14  +4.1138e-01  +4.3425e-01  2.29e-02  4.43e-05  2.69e-03  1.07e-05  1.68e-04  3.49e-01  
 15  +4.0801e-01  +4.1937e-01  1.14e-02  2.14e-05  1.30e-03  6.65e-06  8.08e-05  9.80e-01  
 16  +4.0404e-01  +4.0541e-01  1.37e-03  2.54e-06  1.55e-04  6.56e-07  9.84e-06  9.70e-01  
 17  +4.0351e-01  +4.0353e-01  2.02e-05  3.71e-08  2.26e-06  9.66e-09  1.44e-07  9.86e-01  
 18  +4.0350e-01  +4.0350e-01  2.02e-07  3.72e-10  2.26e-08  9.66e-11  1.44e-09  9.90e-01  
 19  +4.0350e-01  +4.0350e-01  2.02e-09  3.72e-12  2.26e-10  9.68e-13  1.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.3777ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:22 PM: Optimal value: 4.035e-01
(CVXPY) Oct 06 03:54:22 PM: Compilation took 5.092e-03 seconds
(CVXPY) Oct 06 03:54:22 PM: Solver (including time spent in interface) took 1.507e-02 seconds
Iteration: 4, Objective: 0.4035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:22 PM: Your problem has 534 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:22 PM: Finished problem compilation (took 1.188e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 534
  constraints   = 1034
  nnz(P)        = 0
  nnz(A)        = 5341
  cones (total) = 1
    : Nonnegative = 1,  numel = 1034

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0116e+02  5.01e+02  9.53e-01  2.98e+01  1.00e+00  1.01e+00   ------   
  1  +5.9570e-01  +1.0102e+02  1.00e+02  3.56e-01  1.71e+01  3.98e-03  5.08e-01  6.43e-01  
  2  +5.4181e-01  +1.3820e+01  1.33e+01  1.21e-01  7.16e+00  1.04e-02  2.22e-01  8.24e-01  
  3  +5.0395e-01  +2.4463e+00  1.94e+00  4.01e-02  2.30e+00  1.66e-05  2.03e-01  3.55e-01  
  4  +5.0088e-01  +1.0598e+00  5.59e-01  1.19e-02  7.10e-01  7.96e-06  8.78e-02  6.05e-01  
  5  +4.9793e-01  +1.1424e+00  6.44e-01  7.23e-03  4.42e-01  3.13e-05  2.35e-02  8.29e-01  
  6  +4.8179e-01  +8.7733e-01  3.96e-01  1.30e-03  8.05e-02  8.57e-05  3.88e-03  8.42e-01  
  7  +4.7579e-01  +8.3797e-01  3.62e-01  9.61e-04  5.93e-02  1.01e-04  2.85e-03  3.88e-01  
  8  +4.7023e-01  +7.9089e-01  3.21e-01  7.81e-04  4.81e-02  1.04e-04  2.34e-03  3.42e-01  
  9  +4.6422e-01  +7.2636e-01  2.62e-01  7.07e-04  4.34e-02  8.34e-05  2.22e-03  3.44e-01  
 10  +4.4425e-01  +6.0925e-01  1.65e-01  3.63e-04  2.22e-02  6.35e-05  1.20e-03  6.35e-01  
 11  +4.2357e-01  +4.9211e-01  6.85e-02  1.45e-04  8.83e-03  2.58e-05  5.21e-04  6.46e-01  
 12  +4.2043e-01  +4.7796e-01  5.75e-02  1.18e-04  7.17e-03  2.31e-05  4.27e-04  2.91e-01  
 13  +4.1430e-01  +4.4806e-01  3.38e-02  6.77e-05  4.12e-03  1.50e-05  2.52e-04  5.59e-01  
 14  +4.1395e-01  +4.4619e-01  3.22e-02  6.22e-05  3.78e-03  1.53e-05  2.29e-04  2.35e-01  
 15  +4.1241e-01  +4.3866e-01  2.62e-02  4.91e-05  2.99e-03  1.36e-05  1.82e-04  4.76e-01  
 16  +4.0737e-01  +4.1755e-01  1.02e-02  1.91e-05  1.16e-03  5.72e-06  7.26e-05  9.90e-01  
 17  +4.0401e-01  +4.0536e-01  1.35e-03  2.49e-06  1.51e-04  7.36e-07  9.64e-06  9.11e-01  
 18  +4.0351e-01  +4.0352e-01  1.43e-05  2.63e-08  1.60e-06  7.71e-09  1.02e-07  9.89e-01  
 19  +4.0350e-01  +4.0350e-01  1.43e-07  2.63e-10  1.60e-08  7.71e-11  1.02e-09  9.90e-01  
 20  +4.0350e-01  +4.0350e-01  1.43e-09  2.63e-12  1.60e-10  7.71e-13  1.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.559ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:22 PM: Optimal value: 4.035e-01
(CVXPY) Oct 06 03:54:22 PM: Compilation took 1.188e-02 seconds
(CVXPY) Oct 06 03:54:22 PM: Solver (including time spent in interface) took 1.282e-02 seconds
Iteration: 5, Objective: 0.4035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:22 PM: Your problem has 535 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:22 PM: Finished problem compilation (took 5.078e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 535
  constraints   = 1035
  nnz(P)        = 0
  nnz(A)        = 5371
  cones (total) = 1
    : Nonnegative = 1,  numel = 1035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0115e+02  5.01e+02  9.53e-01  2.98e+01  1.00e+00  1.01e+00   ------   
  1  +5.9543e-01  +1.0109e+02  1.00e+02  3.57e-01  1.71e+01  3.98e-03  5.09e-01  6.42e-01  
  2  +5.4165e-01  +1.3789e+01  1.32e+01  1.21e-01  7.15e+00  1.05e-02  2.21e-01  8.26e-01  
  3  +5.0397e-01  +2.4521e+00  1.95e+00  4.02e-02  2.31e+00  1.68e-05  2.03e-01  3.58e-01  
  4  +5.0087e-01  +1.0550e+00  5.54e-01  1.18e-02  7.05e-01  7.99e-06  8.68e-02  6.10e-01  
  5  +4.9597e-01  +1.1837e+00  6.88e-01  5.47e-03  3.36e-01  4.61e-05  1.67e-02  9.08e-01  
  6  +4.7837e-01  +8.6208e-01  3.84e-01  1.22e-03  7.55e-02  7.71e-05  3.69e-03  7.84e-01  
  7  +4.7336e-01  +8.3620e-01  3.63e-01  9.10e-04  5.61e-02  1.01e-04  2.70e-03  4.15e-01  
  8  +4.7039e-01  +8.0338e-01  3.33e-01  8.13e-04  5.01e-02  1.02e-04  2.43e-03  2.33e-01  
  9  +4.6521e-01  +7.4874e-01  2.84e-01  7.39e-04  4.54e-02  8.69e-05  2.29e-03  2.63e-01  
 10  +4.4379e-01  +6.0962e-01  1.66e-01  3.69e-04  2.26e-02  5.58e-05  1.22e-03  5.47e-01  
 11  +4.2162e-01  +4.8210e-01  6.05e-02  1.28e-04  7.80e-03  2.04e-05  4.64e-04  7.02e-01  
 12  +4.1933e-01  +4.7229e-01  5.30e-02  1.08e-04  6.57e-03  1.98e-05  3.91e-04  2.96e-01  
 13  +4.1517e-01  +4.5239e-01  3.72e-02  7.35e-05  4.47e-03  1.56e-05  2.71e-04  4.49e-01  
 14  +4.1301e-01  +4.4305e-01  3.00e-02  5.76e-05  3.50e-03  1.32e-05  2.14e-04  2.85e-01  
 15  +4.0923e-01  +4.2441e-01  1.52e-02  2.91e-05  1.77e-03  8.63e-06  1.10e-04  9.90e-01  
 16  +4.0500e-01  +4.0888e-01  3.88e-03  7.29e-06  4.43e-04  2.20e-06  2.82e-05  7.96e-01  
 17  +4.0449e-01  +4.0706e-01  2.57e-03  4.76e-06  2.89e-04  1.48e-06  1.84e-05  4.13e-01  
 18  +4.0354e-01  +4.0365e-01  1.07e-04  1.97e-07  1.20e-05  6.07e-08  7.67e-07  9.90e-01  
 19  +4.0350e-01  +4.0350e-01  1.07e-06  1.97e-09  1.20e-07  6.08e-10  7.68e-09  9.90e-01  
 20  +4.0350e-01  +4.0350e-01  1.07e-08  1.97e-11  1.20e-09  6.08e-12  7.68e-11  9.90e-01  
 21  +4.0350e-01  +4.0350e-01  1.07e-10  1.97e-13  1.20e-11  6.08e-14  7.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.1777ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:22 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:22 PM: Optimal value: 4.035e-01
(CVXPY) Oct 06 03:54:22 PM: Compilation took 5.078e-03 seconds
(CVXPY) Oct 06 03:54:22 PM: Solver (including time spent in interface) took 1.501e-02 seconds
FULL MODEL:
  Accruacy: 0.587
  Our objective: 0.174

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.056)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.066)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.026)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.006)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.259736776351929
Best over terms:
  Our final objective: 0.06599999999999996
    Its accruacy: 0.533
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.06599999999999996
  Highest accruacy: 0.533
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

