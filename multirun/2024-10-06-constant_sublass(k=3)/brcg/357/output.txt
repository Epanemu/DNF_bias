Command:
python test_script.py -s constant_subclass -d 9 -n 50000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15208
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 9.

Computed total variation: 0.17012
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:20:39 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:20:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:20:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:20:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:20:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:20:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:20:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:20:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:20:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:20:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:20:39 PM: Finished problem compilation (took 2.818e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 300019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4248e+03  5.42e+03  4.36e-01  1.71e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3208e-01  +6.1481e+02  6.14e+02  1.78e-01  8.95e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6047e+02  1.60e+02  1.50e-01  7.61e+01  4.51e-05  2.60e-01  2.61e-01  
  4  +5.0135e-01  +1.7479e+01  1.70e+01  4.67e-02  2.35e+01  5.22e-06  1.96e-01  4.49e-01  
  5  +5.0000e-01  +1.1796e+00  6.80e-01  2.03e-03  1.06e+00  2.57e-05  1.91e-01  2.47e-01  
  6  +4.9999e-01  +6.3749e-01  1.37e-01  4.10e-04  2.15e-01  7.86e-06  3.47e-02  8.34e-01  
  7  +4.9944e-01  +9.8511e-01  4.86e-01  7.62e-04  4.00e-01  2.77e-04  3.04e-03  9.62e-01  
  8  +4.9978e-01  +8.0049e-01  3.01e-01  4.46e-04  2.35e-01  1.07e-04  1.64e-03  7.57e-01  
  9  +4.9393e-01  +7.6868e-01  2.75e-01  2.04e-05  1.08e-02  2.63e-03  5.91e-05  9.64e-01  
 10  +4.8486e-01  +6.4833e-01  1.63e-01  8.88e-06  4.67e-03  1.52e-03  2.66e-05  6.88e-01  
 11  +4.7776e-01  +5.7763e-01  9.99e-02  6.07e-06  3.19e-03  1.30e-05  1.93e-05  7.01e-01  
 12  +4.6232e-01  +4.9227e-01  2.99e-02  1.52e-06  7.99e-04  8.16e-07  5.25e-06  8.86e-01  
 13  +4.5446e-01  +4.5803e-01  3.57e-03  1.60e-07  8.37e-05  7.33e-08  6.29e-07  9.01e-01  
 14  +4.5312e-01  +4.5317e-01  5.51e-05  2.31e-09  1.21e-06  9.92e-10  9.73e-09  9.87e-01  
 15  +4.5310e-01  +4.5310e-01  5.51e-07  2.30e-11  1.21e-08  9.92e-12  9.73e-11  9.90e-01  
 16  +4.5310e-01  +4.5310e-01  5.55e-09  2.32e-13  1.22e-10  1.33e-13  1.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 644.4758ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:20:40 PM: Optimal value: 4.531e-01
(CVXPY) Oct 06 04:20:40 PM: Compilation took 2.818e-01 seconds
(CVXPY) Oct 06 04:20:40 PM: Solver (including time spent in interface) took 7.039e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4531
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:20:40 PM: Your problem has 25029 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:20:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:20:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:20:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:20:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:20:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:20:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:20:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:20:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:20:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:20:40 PM: Finished problem compilation (took 2.187e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25029
  constraints   = 50029
  nnz(P)        = 0
  nnz(A)        = 344022
  cones (total) = 1
    : Nonnegative = 1,  numel = 50029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4251e+03  5.42e+03  4.36e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3204e-01  +6.1452e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6030e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7361e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +4.9999e-01  +1.2068e+00  7.07e-01  2.11e-03  1.14e+00  2.89e-05  1.88e-01  3.09e-01  
  6  +4.9999e-01  +7.1363e-01  2.14e-01  6.38e-04  3.45e-01  1.18e-05  4.96e-02  7.42e-01  
  7  +4.9998e-01  +9.5432e-01  4.54e-01  1.35e-03  7.29e-01  2.43e-05  3.13e-02  8.82e-01  
  8  +4.9978e-01  +7.1411e-01  2.14e-01  4.75e-04  2.58e-01  1.10e-04  2.27e-03  9.31e-01  
  9  +4.9751e-01  +7.0561e-01  2.08e-01  7.11e-05  3.88e-02  1.14e-03  2.06e-04  9.09e-01  
 10  +4.9393e-01  +6.9003e-01  1.96e-01  2.78e-05  1.52e-02  2.51e-03  7.80e-05  6.76e-01  
 11  +4.9508e-01  +6.8956e-01  1.94e-01  2.69e-05  1.47e-02  1.88e-03  7.46e-05  2.96e-01  
 12  +4.9116e-01  +6.7558e-01  1.84e-01  1.49e-05  8.14e-03  2.90e-03  4.09e-05  4.89e-01  
 13  +4.9094e-01  +6.7394e-01  1.83e-01  1.34e-05  7.30e-03  2.70e-03  3.65e-05  2.38e-01  
 14  +4.9117e-01  +6.7304e-01  1.82e-01  1.33e-05  7.27e-03  2.44e-03  3.63e-05  8.84e-02  
 15  +4.8957e-01  +6.6626e-01  1.77e-01  1.11e-05  6.06e-03  2.36e-03  3.02e-05  2.79e-01  
 16  +4.8961e-01  +6.6517e-01  1.76e-01  1.11e-05  6.04e-03  2.18e-03  3.02e-05  6.03e-02  
 17  +4.8658e-01  +6.5372e-01  1.67e-01  9.05e-06  4.95e-03  2.24e-03  2.48e-05  2.13e-01  
 18  +4.8641e-01  +6.4086e-01  1.54e-01  7.95e-06  4.34e-03  2.38e-05  2.19e-05  8.80e-01  
 19  +4.6957e-01  +5.7793e-01  1.08e-01  4.01e-06  2.18e-03  1.77e-05  1.13e-05  5.92e-01  
 20  +4.4580e-01  +4.9561e-01  4.98e-02  1.68e-06  9.11e-04  5.60e-06  5.02e-06  6.15e-01  
 21  +4.2567e-01  +4.2896e-01  3.28e-03  1.04e-07  5.66e-05  5.62e-08  3.29e-07  9.51e-01  
 22  +4.2408e-01  +4.2411e-01  3.37e-05  1.06e-09  5.78e-07  5.62e-10  3.38e-09  9.90e-01  
 23  +4.2406e-01  +4.2406e-01  3.37e-07  1.06e-11  5.78e-09  5.62e-12  3.38e-11  9.90e-01  
 24  +4.2406e-01  +4.2406e-01  3.37e-09  1.07e-13  5.78e-11  5.85e-14  3.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1603568s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:20:41 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 04:20:41 PM: Compilation took 2.187e-01 seconds
(CVXPY) Oct 06 04:20:41 PM: Solver (including time spent in interface) took 1.238e+00 seconds
Iteration: 2, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:20:42 PM: Your problem has 25039 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:20:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:20:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:20:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:20:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:20:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:20:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:20:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:20:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:20:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:20:42 PM: Finished problem compilation (took 2.505e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25039
  constraints   = 50039
  nnz(P)        = 0
  nnz(A)        = 345507
  cones (total) = 1
    : Nonnegative = 1,  numel = 50039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1444e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6027e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7362e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.2972e+00  7.97e-01  2.38e-03  1.29e+00  2.88e-05  1.89e-01  2.75e-01  
  6  +5.0000e-01  +7.1309e-01  2.13e-01  6.36e-04  3.45e-01  9.89e-06  4.80e-02  7.51e-01  
  7  +4.9998e-01  +8.3557e-01  3.36e-01  9.96e-04  5.39e-01  2.12e-05  2.49e-02  7.76e-01  
  8  +4.9965e-01  +7.2036e-01  2.21e-01  3.98e-04  2.16e-01  1.70e-04  1.57e-03  9.44e-01  
  9  +4.9787e-01  +7.1331e-01  2.15e-01  8.92e-05  4.87e-02  9.71e-04  2.61e-04  8.37e-01  
 10  +4.9592e-01  +7.0425e-01  2.08e-01  4.51e-05  2.46e-02  1.74e-03  1.28e-04  5.63e-01  
 11  +4.9430e-01  +6.8997e-01  1.96e-01  2.42e-05  1.32e-02  2.08e-03  6.67e-05  7.41e-01  
 12  +4.9274e-01  +6.8345e-01  1.91e-01  1.77e-05  9.69e-03  2.34e-03  4.86e-05  3.79e-01  
 13  +4.9274e-01  +6.8283e-01  1.90e-01  1.77e-05  9.67e-03  2.26e-03  4.85e-05  3.13e-02  
 14  +4.8939e-01  +6.6596e-01  1.77e-01  1.07e-05  5.85e-03  2.17e-03  2.92e-05  6.65e-01  
 15  +4.8926e-01  +6.6471e-01  1.75e-01  1.07e-05  5.82e-03  2.04e-03  2.92e-05  4.52e-02  
 16  +4.8549e-01  +6.4930e-01  1.64e-01  8.48e-06  4.63e-03  1.97e-03  2.33e-05  2.67e-01  
 17  +4.8462e-01  +6.4290e-01  1.58e-01  8.00e-06  4.37e-03  1.21e-03  2.30e-05  3.01e-01  
 18  +4.8473e-01  +6.4328e-01  1.59e-01  8.02e-06  4.38e-03  1.10e-03  2.29e-05  8.51e-02  
 19  +4.7481e-01  +6.0002e-01  1.25e-01  5.43e-06  2.96e-03  6.91e-04  1.58e-05  4.69e-01  
 20  +4.5131e-01  +5.0975e-01  5.84e-02  2.11e-06  1.15e-03  2.35e-04  6.34e-06  6.83e-01  
 21  +4.5115e-01  +5.0964e-01  5.85e-02  2.10e-06  1.14e-03  2.24e-04  6.30e-06  5.27e-02  
 22  +4.4073e-01  +4.8009e-01  3.94e-02  1.30e-06  7.08e-04  7.80e-05  3.97e-06  6.54e-01  
 23  +4.2534e-01  +4.2910e-01  3.76e-03  1.20e-07  6.49e-05  3.06e-06  3.79e-07  9.40e-01  
 24  +4.2439e-01  +4.2605e-01  1.66e-03  5.25e-08  2.85e-05  1.19e-06  1.67e-07  6.14e-01  
 25  +4.2365e-01  +4.2368e-01  2.81e-05  8.88e-10  4.82e-07  1.20e-08  2.83e-09  9.90e-01  
 26  +4.2364e-01  +4.2364e-01  2.81e-07  8.88e-12  4.82e-09  1.20e-10  2.83e-11  9.90e-01  
 27  +4.2364e-01  +4.2364e-01  2.81e-09  8.87e-14  4.82e-11  1.21e-12  2.85e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2693391s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:20:43 PM: Optimal value: 4.236e-01
(CVXPY) Oct 06 04:20:43 PM: Compilation took 2.505e-01 seconds
(CVXPY) Oct 06 04:20:43 PM: Solver (including time spent in interface) took 1.329e+00 seconds
Iteration: 3, Objective: 0.4236
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:20:43 PM: Your problem has 25049 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:20:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:20:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:20:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:20:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:20:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:20:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:20:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:20:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:20:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:20:44 PM: Finished problem compilation (took 2.500e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25049
  constraints   = 50049
  nnz(P)        = 0
  nnz(A)        = 347028
  cones (total) = 1
    : Nonnegative = 1,  numel = 50049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1434e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6024e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7362e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.2367e+00  7.37e-01  2.20e-03  1.19e+00  2.89e-05  1.88e-01  2.99e-01  
  6  +4.9999e-01  +7.3965e-01  2.40e-01  7.15e-04  3.87e-01  1.22e-05  5.49e-02  7.13e-01  
  7  +4.9998e-01  +1.0166e+00  5.17e-01  1.53e-03  8.26e-01  2.65e-05  3.07e-02  9.43e-01  
  8  +4.9976e-01  +7.1964e-01  2.20e-01  4.59e-04  2.49e-01  1.17e-04  2.02e-03  9.37e-01  
  9  +4.9794e-01  +7.1289e-01  2.15e-01  8.27e-05  4.52e-02  9.40e-04  2.39e-04  8.82e-01  
 10  +4.9649e-01  +7.0667e-01  2.10e-01  4.72e-05  2.58e-02  1.52e-03  1.33e-04  4.92e-01  
 11  +4.9736e-01  +7.0363e-01  2.06e-01  4.50e-05  2.46e-02  1.08e-03  1.25e-04  3.53e-01  
 12  +4.9519e-01  +6.8972e-01  1.95e-01  2.00e-05  1.10e-02  1.64e-03  5.44e-05  8.02e-01  
 13  +4.9428e-01  +6.8620e-01  1.92e-01  1.64e-05  8.97e-03  1.75e-03  4.44e-05  2.71e-01  
 14  +4.9467e-01  +6.8461e-01  1.90e-01  1.61e-05  8.81e-03  1.32e-03  4.36e-05  2.42e-01  
 15  +4.9431e-01  +6.8301e-01  1.89e-01  1.49e-05  8.13e-03  1.28e-03  4.03e-05  1.62e-01  
 16  +4.9565e-01  +6.7917e-01  1.84e-01  1.31e-05  7.18e-03  2.60e-05  3.53e-05  9.90e-01  
 17  +4.9279e-01  +6.6870e-01  1.76e-01  9.42e-06  5.15e-03  2.90e-05  2.54e-05  3.78e-01  
 18  +4.9024e-01  +6.5885e-01  1.69e-01  8.87e-06  4.85e-03  1.51e-05  2.43e-05  4.40e-01  
 19  +4.8703e-01  +6.4512e-01  1.58e-01  7.91e-06  4.32e-03  1.25e-05  2.18e-05  2.27e-01  
 20  +4.6720e-01  +5.7066e-01  1.03e-01  3.73e-06  2.04e-03  7.75e-06  1.06e-05  6.64e-01  
 21  +4.6135e-01  +5.5274e-01  9.14e-02  3.25e-06  1.77e-03  4.95e-06  9.40e-06  3.52e-01  
 22  +4.4672e-01  +5.0242e-01  5.57e-02  1.90e-06  1.03e-03  2.15e-06  5.72e-06  5.43e-01  
 23  +4.4446e-01  +4.9469e-01  5.02e-02  1.70e-06  9.23e-04  1.82e-06  5.13e-06  1.87e-01  
 24  +4.3824e-01  +4.7307e-01  3.48e-02  1.12e-06  6.10e-04  5.53e-07  3.44e-06  9.90e-01  
 25  +4.2937e-01  +4.4355e-01  1.42e-02  4.55e-07  2.47e-04  2.22e-07  1.43e-06  6.36e-01  
 26  +4.2389e-01  +4.2539e-01  1.50e-03  4.80e-08  2.61e-05  2.39e-08  1.54e-07  9.90e-01  
 27  +4.2321e-01  +4.2324e-01  2.42e-05  7.73e-10  4.20e-07  3.84e-10  2.49e-09  9.85e-01  
 28  +4.2320e-01  +4.2320e-01  2.42e-07  7.76e-12  4.21e-09  3.86e-12  2.50e-11  9.90e-01  
 29  +4.2320e-01  +4.2320e-01  2.47e-09  7.89e-14  4.29e-11  3.88e-14  2.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3146194s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:20:45 PM: Optimal value: 4.232e-01
(CVXPY) Oct 06 04:20:45 PM: Compilation took 2.500e-01 seconds
(CVXPY) Oct 06 04:20:45 PM: Solver (including time spent in interface) took 1.375e+00 seconds
Iteration: 4, Objective: 0.4232
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:20:45 PM: Your problem has 25051 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:20:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:20:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:20:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:20:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:20:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:20:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:20:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:20:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:20:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:20:46 PM: Finished problem compilation (took 2.343e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25051
  constraints   = 50051
  nnz(P)        = 0
  nnz(A)        = 347196
  cones (total) = 1
    : Nonnegative = 1,  numel = 50051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3202e-01  +6.1432e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6024e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7364e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.2513e+00  7.51e-01  2.25e-03  1.21e+00  2.89e-05  1.88e-01  2.93e-01  
  6  +4.9999e-01  +7.4692e-01  2.47e-01  7.37e-04  3.99e-01  1.21e-05  5.63e-02  7.06e-01  
  7  +4.9999e-01  +1.0551e+00  5.55e-01  1.64e-03  8.87e-01  2.59e-05  3.21e-02  9.63e-01  
  8  +4.9980e-01  +7.2286e-01  2.23e-01  4.85e-04  2.64e-01  9.93e-05  2.23e-03  9.33e-01  
  9  +4.9813e-01  +7.1647e-01  2.18e-01  8.57e-05  4.68e-02  8.55e-04  2.47e-04  8.90e-01  
 10  +4.9726e-01  +7.0916e-01  2.12e-01  5.16e-05  2.82e-02  1.18e-03  1.45e-04  5.43e-01  
 11  +4.9757e-01  +7.0750e-01  2.10e-01  5.05e-05  2.76e-02  1.03e-03  1.41e-04  1.62e-01  
 12  +4.9472e-01  +6.9573e-01  2.01e-01  2.25e-05  1.23e-02  1.98e-03  6.16e-05  6.33e-01  
 13  +4.9363e-01  +6.9173e-01  1.98e-01  1.83e-05  1.00e-02  2.21e-03  5.01e-05  2.37e-01  
 14  +4.9380e-01  +6.9059e-01  1.97e-01  1.82e-05  9.97e-03  2.00e-03  4.99e-05  8.55e-02  
 15  +4.9390e-01  +6.8979e-01  1.96e-01  1.82e-05  9.97e-03  1.92e-03  4.98e-05  3.35e-02  
 16  +4.9053e-01  +6.7611e-01  1.86e-01  1.19e-05  6.51e-03  2.26e-03  3.24e-05  4.56e-01  
 17  +4.8879e-01  +6.6905e-01  1.80e-01  1.05e-05  5.72e-03  2.27e-03  2.86e-05  1.60e-01  
 18  +4.8964e-01  +6.6515e-01  1.76e-01  9.97e-06  5.45e-03  1.01e-03  2.72e-05  5.10e-01  
 19  +4.8787e-01  +6.5038e-01  1.63e-01  8.73e-06  4.77e-03  1.07e-05  2.39e-05  8.89e-01  
 20  +4.7545e-01  +6.0330e-01  1.28e-01  5.17e-06  2.82e-03  9.35e-06  1.45e-05  4.73e-01  
 21  +4.6064e-01  +5.5020e-01  8.96e-02  3.32e-06  1.81e-03  5.09e-06  9.66e-06  4.46e-01  
 22  +4.4676e-01  +5.0255e-01  5.58e-02  1.93e-06  1.05e-03  1.18e-06  5.81e-06  7.92e-01  
 23  +4.4504e-01  +4.9666e-01  5.16e-02  1.76e-06  9.57e-04  1.05e-06  5.33e-06  2.04e-01  
 24  +4.3825e-01  +4.7326e-01  3.50e-02  1.13e-06  6.16e-04  5.38e-07  3.47e-06  9.90e-01  
 25  +4.2920e-01  +4.4314e-01  1.39e-02  4.49e-07  2.44e-04  2.11e-07  1.41e-06  6.35e-01  
 26  +4.2403e-01  +4.2598e-01  1.95e-03  6.24e-08  3.39e-05  3.10e-08  2.00e-07  9.84e-01  
 27  +4.2317e-01  +4.2323e-01  6.11e-05  1.96e-09  1.06e-06  9.67e-10  6.31e-09  9.75e-01  
 28  +4.2314e-01  +4.2314e-01  6.39e-07  2.05e-11  1.11e-08  1.01e-11  6.60e-11  9.90e-01  
 29  +4.2314e-01  +4.2314e-01  6.51e-09  2.09e-13  1.13e-10  1.02e-13  6.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3208824s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:20:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:20:47 PM: Optimal value: 4.231e-01
(CVXPY) Oct 06 04:20:47 PM: Compilation took 2.343e-01 seconds
(CVXPY) Oct 06 04:20:47 PM: Solver (including time spent in interface) took 1.391e+00 seconds
FULL MODEL:
  Accruacy: 0.57702
  Our objective: 0.15404000000000007

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.15208)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.00104)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.00092)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 18.60802149772644
Best over terms:
  Our final objective: 0.15208
    Its accruacy: 0.57604
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15208
  Highest accruacy: 0.57604
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

