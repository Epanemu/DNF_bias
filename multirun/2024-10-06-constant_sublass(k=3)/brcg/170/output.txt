Command:
python test_script.py -s constant_subclass -d 5 -n 100 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.13999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.42000000000000004
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:04 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:04 PM: Finished problem compilation (took 3.427e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9707e-01  +5.0691e+01  5.02e+01  8.62e-01  8.44e+00  1.00e+00  1.03e+00   ------   
  1  +5.9541e-01  +1.0429e+01  9.83e+00  3.19e-01  4.65e+00  3.98e-03  5.18e-01  6.45e-01  
  2  +5.3038e-01  +1.5870e+00  1.06e+00  7.18e-02  1.25e+00  1.13e-02  1.80e-01  9.32e-01  
  3  +4.9921e-01  +7.0822e-01  2.09e-01  1.63e-02  2.82e-01  4.50e-03  6.56e-02  9.90e-01  
  4  +4.8596e-01  +6.3344e-01  1.47e-01  4.82e-03  8.70e-02  7.66e-03  1.69e-02  7.91e-01  
  5  +4.6585e-01  +5.2355e-01  5.77e-02  1.25e-03  2.26e-02  3.21e-03  4.85e-03  7.69e-01  
  6  +4.5200e-01  +4.5732e-01  5.32e-03  1.07e-04  1.94e-03  5.88e-05  4.88e-04  9.39e-01  
  7  +4.5012e-01  +4.5019e-01  6.36e-05  1.26e-06  2.28e-05  6.20e-07  5.89e-06  9.89e-01  
  8  +4.5010e-01  +4.5010e-01  6.36e-07  1.26e-08  2.28e-07  6.19e-09  5.89e-08  9.90e-01  
  9  +4.5010e-01  +4.5010e-01  6.36e-09  1.26e-10  2.28e-09  6.20e-11  5.89e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 663.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:04 PM: Optimal value: 4.501e-01
(CVXPY) Oct 06 03:53:04 PM: Compilation took 3.427e-02 seconds
(CVXPY) Oct 06 03:53:04 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:04 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:04 PM: Finished problem compilation (took 5.264e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 516
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9137e-01  +5.1463e+01  5.10e+01  8.69e-01  8.65e+00  1.00e+00  1.06e+00   ------   
  1  +5.6872e-01  +1.0600e+01  1.00e+01  3.32e-01  4.68e+00  3.96e-03  5.38e-01  6.41e-01  
  2  +5.0995e-01  +1.8723e+00  1.36e+00  7.90e-02  1.41e+00  1.30e-02  1.93e-01  8.93e-01  
  3  +4.6670e-01  +1.0518e+00  5.85e-01  2.23e-02  4.17e-01  9.32e-03  6.12e-02  7.55e-01  
  4  +4.3253e-01  +8.1819e-01  3.86e-01  1.04e-02  1.95e-01  7.31e-03  3.11e-02  5.50e-01  
  5  +3.8353e-01  +5.9340e-01  2.10e-01  4.07e-03  7.60e-02  4.27e-03  1.34e-02  6.17e-01  
  6  +3.4806e-01  +4.3567e-01  8.76e-02  1.69e-03  3.12e-02  1.39e-03  6.21e-03  6.02e-01  
  7  +3.2229e-01  +3.2748e-01  5.19e-03  1.00e-04  1.84e-03  3.57e-05  4.10e-04  9.48e-01  
  8  +3.2034e-01  +3.2043e-01  8.74e-05  1.70e-06  3.11e-05  3.68e-07  7.11e-06  9.83e-01  
  9  +3.2030e-01  +3.2030e-01  9.22e-07  1.80e-08  3.28e-07  3.57e-09  7.82e-08  9.89e-01  
 10  +3.2030e-01  +3.2030e-01  9.22e-09  1.80e-10  3.28e-09  3.57e-11  7.82e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 952µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:04 PM: Optimal value: 3.203e-01
(CVXPY) Oct 06 03:53:04 PM: Compilation took 5.264e-03 seconds
(CVXPY) Oct 06 03:53:04 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:04 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:04 PM: Finished problem compilation (took 2.098e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9002e-01  +5.1490e+01  5.10e+01  8.74e-01  8.47e+00  1.00e+00  1.06e+00   ------   
  1  +5.5512e-01  +1.0619e+01  1.01e+01  3.38e-01  4.49e+00  3.98e-03  5.37e-01  6.41e-01  
  2  +4.9724e-01  +1.7410e+00  1.24e+00  6.62e-02  1.18e+00  1.38e-02  1.64e-01  9.45e-01  
  3  +4.3594e-01  +1.1430e+00  7.07e-01  2.09e-02  3.87e-01  1.26e-02  5.65e-02  7.36e-01  
  4  +3.8022e-01  +7.5162e-01  3.71e-01  8.95e-03  1.63e-01  6.02e-03  2.69e-02  5.99e-01  
  5  +3.2811e-01  +4.6005e-01  1.32e-01  2.91e-03  5.21e-02  1.63e-03  1.05e-02  6.95e-01  
  6  +2.9764e-01  +3.1749e-01  1.98e-02  4.45e-04  7.88e-03  5.39e-05  1.86e-03  9.90e-01  
  7  +2.9075e-01  +2.9140e-01  6.53e-04  1.45e-05  2.55e-04  1.39e-06  6.38e-05  9.67e-01  
  8  +2.9051e-01  +2.9054e-01  2.73e-05  6.08e-07  1.07e-05  5.18e-08  2.80e-06  9.61e-01  
  9  +2.9050e-01  +2.9050e-01  2.76e-07  6.16e-09  1.08e-07  5.18e-10  2.87e-08  9.90e-01  
 10  +2.9050e-01  +2.9050e-01  2.76e-09  6.16e-11  1.08e-09  5.18e-12  2.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 804.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:04 PM: Optimal value: 2.905e-01
(CVXPY) Oct 06 03:53:04 PM: Compilation took 2.098e-03 seconds
(CVXPY) Oct 06 03:53:04 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2905
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:04 PM: Your problem has 89 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:04 PM: Finished problem compilation (took 4.591e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 614
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8905e-01  +5.1510e+01  5.10e+01  8.78e-01  8.36e+00  1.00e+00  1.06e+00   ------   
  1  +5.4808e-01  +1.0673e+01  1.01e+01  3.45e-01  4.40e+00  3.97e-03  5.42e-01  6.37e-01  
  2  +4.8997e-01  +1.7739e+00  1.28e+00  6.66e-02  1.16e+00  1.43e-02  1.65e-01  9.45e-01  
  3  +4.1903e-01  +1.0930e+00  6.74e-01  1.94e-02  3.51e-01  1.22e-02  5.32e-02  7.52e-01  
  4  +3.6622e-01  +6.9460e-01  3.28e-01  8.18e-03  1.46e-01  5.40e-03  2.51e-02  5.98e-01  
  5  +3.3116e-01  +4.9616e-01  1.65e-01  3.79e-03  6.71e-02  2.52e-03  1.31e-02  5.42e-01  
  6  +2.9759e-01  +3.1997e-01  2.24e-02  5.17e-04  9.13e-03  7.45e-05  2.05e-03  9.60e-01  
  7  +2.9137e-01  +2.9386e-01  2.49e-03  5.76e-05  1.01e-03  7.72e-06  2.39e-04  8.86e-01  
  8  +2.9068e-01  +2.9112e-01  4.44e-04  1.03e-05  1.79e-04  1.71e-06  4.63e-05  9.51e-01  
  9  +2.9051e-01  +2.9052e-01  1.71e-05  3.93e-07  6.79e-06  5.19e-08  1.88e-06  9.69e-01  
 10  +2.9050e-01  +2.9050e-01  1.72e-07  3.95e-09  6.82e-08  5.21e-10  1.90e-08  9.90e-01  
 11  +2.9050e-01  +2.9050e-01  1.72e-09  3.96e-11  6.83e-10  5.21e-12  1.90e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1279ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:04 PM: Optimal value: 2.905e-01
(CVXPY) Oct 06 03:53:04 PM: Compilation took 4.591e-03 seconds
(CVXPY) Oct 06 03:53:04 PM: Solver (including time spent in interface) took 5.183e-03 seconds
FULL MODEL:
  Accruacy: 0.68
  Our objective: 0.36000000000000004

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.1)
 OR (x2 = 0 AND x3 = 1 AND x4 = 0)            <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.368298530578613
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

