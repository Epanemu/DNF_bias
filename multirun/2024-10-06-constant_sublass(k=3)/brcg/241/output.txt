Command:
python test_script.py -s constant_subclass -d 7 -n 10 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 7.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:00:40 PM: Your problem has 20 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:00:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:00:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:00:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:00:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:00:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:00:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:00:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:00:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:00:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:00:40 PM: Finished problem compilation (took 3.971e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 20
  constraints   = 25
  nnz(P)        = 0
  nnz(A)        = 65
  cones (total) = 1
    : Nonnegative = 1,  numel = 25

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6788e-01  +6.2381e+00  5.77e+00  7.48e-01  2.55e+00  1.00e+00  1.31e+00   ------   
  1  +4.7757e-01  +1.3157e+00  8.38e-01  2.80e-01  1.17e+00  3.65e-03  6.27e-01  7.00e-01  
  2  +2.9694e-01  +5.3818e-01  2.41e-01  7.55e-02  3.49e-01  1.08e-02  2.46e-01  7.27e-01  
  3  +2.2468e-01  +3.0876e-01  8.41e-02  2.06e-02  1.07e-01  5.31e-03  8.64e-02  8.06e-01  
  4  +2.0118e-01  +2.0430e-01  3.11e-03  7.74e-04  4.04e-03  1.82e-04  3.59e-03  9.60e-01  
  5  +2.0021e-01  +2.0024e-01  3.11e-05  7.78e-06  4.05e-05  1.82e-06  3.63e-05  9.90e-01  
  6  +2.0020e-01  +2.0020e-01  3.11e-07  7.78e-08  4.05e-07  1.82e-08  3.63e-07  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  3.11e-09  7.78e-10  4.05e-09  1.82e-10  3.63e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 232.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:00:40 PM: Optimal value: 2.002e-01
(CVXPY) Oct 06 04:00:40 PM: Compilation took 3.971e-02 seconds
(CVXPY) Oct 06 04:00:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:00:40 PM: Your problem has 30 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:00:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:00:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:00:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:00:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:00:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:00:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:00:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:00:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:00:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:00:40 PM: Finished problem compilation (took 5.681e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 30
  constraints   = 35
  nnz(P)        = 0
  nnz(A)        = 95
  cones (total) = 1
    : Nonnegative = 1,  numel = 35

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.5602e-01  +6.1532e+00  5.80e+00  7.87e-01  2.65e+00  1.00e+00  1.29e+00   ------   
  1  +1.7804e-01  +1.0685e+00  8.90e-01  3.06e-01  1.08e+00  4.24e-03  5.62e-01  6.89e-01  
  2  +1.1805e-01  +1.9705e-01  7.90e-02  3.31e-02  1.28e-01  1.02e-02  8.66e-02  9.90e-01  
  3  +1.0071e-01  +1.0296e-01  2.24e-03  9.42e-04  3.68e-03  2.76e-04  2.61e-03  9.72e-01  
  4  +1.0024e-01  +1.0038e-01  1.41e-04  6.33e-05  2.41e-04  1.31e-05  1.77e-04  9.33e-01  
  5  +1.0020e-01  +1.0021e-01  1.11e-05  5.34e-06  1.97e-05  5.72e-07  1.65e-05  9.59e-01  
  6  +1.0020e-01  +1.0020e-01  1.15e-07  5.58e-08  2.05e-07  5.82e-09  1.74e-07  9.89e-01  
  7  +1.0020e-01  +1.0020e-01  1.15e-09  5.58e-10  2.05e-09  5.82e-11  1.75e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 224.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:00:40 PM: Optimal value: 1.002e-01
(CVXPY) Oct 06 04:00:40 PM: Compilation took 5.681e-03 seconds
(CVXPY) Oct 06 04:00:40 PM: Solver (including time spent in interface) took 1.810e-04 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:00:40 PM: Your problem has 34 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:00:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:00:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:00:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:00:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:00:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:00:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:00:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:00:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:00:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:00:40 PM: Finished problem compilation (took 5.101e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 39
  nnz(P)        = 0
  nnz(A)        = 106
  cones (total) = 1
    : Nonnegative = 1,  numel = 39

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.2518e-01  +6.1471e+00  5.82e+00  7.95e-01  2.66e+00  1.00e+00  1.26e+00   ------   
  1  +1.0179e-01  +1.0205e+00  9.19e-01  3.16e-01  1.10e+00  4.31e-03  5.54e-01  6.78e-01  
  2  +4.5148e-02  +1.7478e-01  1.30e-01  5.44e-02  2.14e-01  1.03e-02  1.33e-01  8.87e-01  
  3  +1.3880e-03  +1.0340e-02  8.95e-03  3.54e-03  1.45e-02  5.48e-04  9.72e-03  9.83e-01  
  4  +3.1581e-04  +4.9384e-04  1.78e-04  7.24e-05  2.94e-04  8.36e-06  2.00e-04  9.79e-01  
  5  +2.9948e-04  +3.1936e-04  1.99e-05  9.09e-06  3.45e-05  8.50e-07  2.51e-05  8.92e-01  
  6  +2.9999e-04  +3.0022e-04  2.27e-07  1.05e-07  3.96e-07  9.63e-09  2.89e-07  9.88e-01  
  7  +3.0000e-04  +3.0000e-04  2.27e-09  1.05e-09  3.96e-09  9.63e-11  2.89e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 192.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:00:40 PM: Optimal value: 3.000e-04
(CVXPY) Oct 06 04:00:40 PM: Compilation took 5.101e-03 seconds
(CVXPY) Oct 06 04:00:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x1 = 0 AND x5 = 1)                       <-- (term's our objective: 0.4)
 OR (x1 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.4)
 OR (x5 = 1 AND x6 = 0)                       <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.2870631217956543
Best over terms:
  Our final objective: 0.4
    Its accruacy: 0.7
    Its hamming distance: 5
  Shortest hamming distance: 3
    Its our objective: 0.4
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

