Command:
python test_script.py -s constant_subclass -d 10 -n 5000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16519999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 10.

Computed total variation: 0.4032
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:33 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:33 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 32521
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5009e+03  2.50e+03  9.80e-01  8.55e+01  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4952e+02  5.49e+02  4.39e-01  5.64e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2921e-01  +6.0295e+01  5.98e+01  1.72e-01  2.84e+01  1.78e-02  2.89e-01  9.57e-01  
  3  +5.0806e-01  +1.5579e+01  1.51e+01  1.06e-01  1.73e+01  4.98e-05  2.60e-01  3.64e-01  
  4  +5.0081e-01  +1.5345e+00  1.03e+00  1.01e-02  1.72e+00  6.84e-06  1.27e-01  7.93e-01  
  5  +5.0015e-01  +7.2741e-01  2.27e-01  2.16e-03  3.70e-01  1.49e-05  3.13e-02  9.27e-01  
  6  +4.9981e-01  +7.9371e-01  2.94e-01  7.74e-04  1.35e-01  2.11e-04  2.34e-03  9.44e-01  
  7  +4.9758e-01  +7.6909e-01  2.72e-01  1.68e-04  2.93e-02  8.84e-04  4.75e-04  8.32e-01  
  8  +4.8516e-01  +6.4100e-01  1.56e-01  1.14e-04  1.98e-02  6.85e-06  3.53e-04  5.97e-01  
  9  +4.7278e-01  +5.7180e-01  9.90e-02  5.58e-05  9.64e-03  5.58e-06  1.80e-04  6.76e-01  
 10  +4.6893e-01  +5.5189e-01  8.30e-02  4.75e-05  8.21e-03  5.51e-06  1.57e-04  5.95e-01  
 11  +4.5653e-01  +4.8948e-01  3.29e-02  1.70e-05  2.93e-03  2.01e-06  6.03e-05  6.56e-01  
 12  +4.4875e-01  +4.5215e-01  3.40e-03  1.62e-06  2.80e-04  2.41e-07  6.18e-06  9.65e-01  
 13  +4.4756e-01  +4.4774e-01  1.87e-04  7.91e-08  1.36e-05  1.49e-08  3.42e-07  9.72e-01  
 14  +4.4750e-01  +4.4750e-01  1.88e-06  7.92e-10  1.37e-07  1.49e-10  3.44e-09  9.90e-01  
 15  +4.4750e-01  +4.4750e-01  1.88e-08  7.92e-12  1.37e-09  1.49e-12  3.44e-11  9.90e-01  
 16  +4.4750e-01  +4.4750e-01  1.88e-10  7.92e-14  1.37e-11  1.53e-14  3.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.3254ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:33 PM: Optimal value: 4.475e-01
(CVXPY) Oct 06 04:27:33 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:33 PM: Solver (including time spent in interface) took 9.375e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4475
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:33 PM: Your problem has 2531 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:33 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2531
  constraints   = 5031
  nnz(P)        = 0
  nnz(A)        = 37271
  cones (total) = 1
    : Nonnegative = 1,  numel = 5031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5012e+03  2.50e+03  9.80e-01  8.86e+01  1.00e+00  1.00e+00   ------   
  1  +5.7809e-01  +5.4984e+02  5.49e+02  4.40e-01  5.83e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2894e-01  +6.0083e+01  5.96e+01  1.72e-01  2.93e+01  1.79e-02  2.90e-01  9.59e-01  
  3  +5.0795e-01  +1.5460e+01  1.50e+01  1.06e-01  1.78e+01  5.02e-05  2.60e-01  3.77e-01  
  4  +5.0077e-01  +1.4733e+00  9.73e-01  9.56e-03  1.68e+00  6.98e-06  1.19e-01  8.28e-01  
  5  +5.0030e-01  +9.0107e-01  4.01e-01  3.85e-03  6.81e-01  1.02e-05  5.06e-02  6.92e-01  
  6  +5.0011e-01  +7.3031e-01  2.30e-01  1.38e-03  2.48e-01  3.91e-05  4.85e-03  9.68e-01  
  7  +4.9970e-01  +7.2967e-01  2.30e-01  3.26e-04  5.91e-02  2.06e-04  8.89e-04  8.20e-01  
  8  +4.9812e-01  +7.2507e-01  2.27e-01  1.48e-04  2.69e-02  3.65e-04  3.96e-04  7.38e-01  
  9  +4.9566e-01  +7.1016e-01  2.15e-01  1.24e-04  2.24e-02  3.35e-04  3.32e-04  2.77e-01  
 10  +4.9475e-01  +7.0514e-01  2.10e-01  1.23e-04  2.22e-02  3.00e-04  3.29e-04  7.56e-02  
 11  +4.9053e-01  +6.8446e-01  1.94e-01  9.70e-05  1.75e-02  2.78e-04  2.62e-04  2.91e-01  
 12  +4.8842e-01  +6.7678e-01  1.88e-01  9.28e-05  1.67e-02  1.63e-04  2.55e-04  3.66e-01  
 13  +4.8694e-01  +6.7039e-01  1.83e-01  9.05e-05  1.63e-02  1.40e-04  2.49e-04  1.23e-01  
 14  +4.7875e-01  +6.3636e-01  1.58e-01  6.81e-05  1.23e-02  1.10e-04  1.90e-04  3.47e-01  
 15  +4.6992e-01  +6.0344e-01  1.34e-01  5.70e-05  1.02e-02  2.26e-05  1.62e-04  7.21e-01  
 16  +4.6208e-01  +5.7446e-01  1.12e-01  4.38e-05  7.86e-03  1.93e-05  1.26e-04  2.37e-01  
 17  +4.5387e-01  +5.4490e-01  9.10e-02  3.30e-05  5.91e-03  1.01e-05  9.67e-05  9.90e-01  
 18  +4.3643e-01  +4.8286e-01  4.64e-02  1.54e-05  2.75e-03  4.96e-06  4.70e-05  5.41e-01  
 19  +4.2071e-01  +4.2811e-01  7.40e-03  2.35e-06  4.19e-04  7.87e-07  7.49e-06  8.93e-01  
 20  +4.1755e-01  +4.1765e-01  1.01e-04  3.18e-08  5.66e-06  1.14e-08  1.02e-07  9.90e-01  
 21  +4.1750e-01  +4.1750e-01  1.01e-06  3.18e-10  5.66e-08  1.14e-10  1.02e-09  9.90e-01  
 22  +4.1750e-01  +4.1750e-01  1.01e-08  3.18e-12  5.66e-10  1.14e-12  1.03e-11  9.90e-01  
 23  +4.1750e-01  +4.1750e-01  1.01e-10  3.17e-14  5.66e-12  1.14e-14  1.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.8969ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:33 PM: Optimal value: 4.175e-01
(CVXPY) Oct 06 04:27:33 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:27:33 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 2, Objective: 0.4175
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:34 PM: Your problem has 2541 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:34 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2541
  constraints   = 5041
  nnz(P)        = 0
  nnz(A)        = 38018
  cones (total) = 1
    : Nonnegative = 1,  numel = 5041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5014e+03  2.50e+03  9.80e-01  8.85e+01  1.00e+00  1.00e+00   ------   
  1  +5.7795e-01  +5.4987e+02  5.49e+02  4.41e-01  5.83e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2881e-01  +5.9949e+01  5.94e+01  1.72e-01  2.91e+01  1.79e-02  2.89e-01  9.61e-01  
  3  +5.0791e-01  +1.5416e+01  1.49e+01  1.05e-01  1.77e+01  5.03e-05  2.59e-01  3.81e-01  
  4  +5.0083e-01  +1.6155e+00  1.11e+00  1.10e-02  1.92e+00  7.49e-06  1.26e-01  7.76e-01  
  5  +5.0022e-01  +8.8448e-01  3.84e-01  3.66e-03  6.48e-01  1.09e-05  4.84e-02  8.02e-01  
  6  +4.9984e-01  +8.4209e-01  3.42e-01  1.88e-03  3.38e-01  5.05e-05  6.40e-03  9.34e-01  
  7  +4.9565e-01  +8.0822e-01  3.13e-01  2.24e-04  4.07e-02  4.56e-04  6.03e-04  9.06e-01  
  8  +4.9248e-01  +7.8152e-01  2.89e-01  1.66e-04  3.01e-02  4.65e-04  4.46e-04  3.43e-01  
  9  +4.8556e-01  +7.2314e-01  2.38e-01  1.16e-04  2.09e-02  2.90e-04  3.14e-04  5.25e-01  
 10  +4.8309e-01  +7.0769e-01  2.25e-01  1.02e-04  1.85e-02  2.08e-04  2.79e-04  3.34e-01  
 11  +4.7879e-01  +6.8225e-01  2.03e-01  9.20e-05  1.66e-02  1.25e-04  2.53e-04  3.45e-01  
 12  +4.5454e-01  +5.7667e-01  1.22e-01  4.46e-05  7.99e-03  4.61e-05  1.29e-04  7.08e-01  
 13  +4.2184e-01  +4.5126e-01  2.94e-02  9.99e-06  1.78e-03  3.76e-06  3.18e-05  8.33e-01  
 14  +4.1647e-01  +4.3298e-01  1.65e-02  5.48e-06  9.79e-04  2.21e-06  1.78e-05  5.64e-01  
 15  +4.1514e-01  +4.2812e-01  1.30e-02  4.28e-06  7.64e-04  1.91e-06  1.39e-05  7.81e-01  
 16  +4.1181e-01  +4.1726e-01  5.46e-03  1.79e-06  3.19e-04  8.08e-07  5.91e-06  6.11e-01  
 17  +4.0988e-01  +4.1093e-01  1.05e-03  3.44e-07  6.14e-05  1.58e-07  1.15e-06  9.90e-01  
 18  +4.0944e-01  +4.0954e-01  9.49e-05  3.11e-08  5.55e-06  1.41e-08  1.04e-07  9.54e-01  
 19  +4.0940e-01  +4.0940e-01  9.55e-07  3.13e-10  5.59e-08  1.42e-10  1.05e-09  9.90e-01  
 20  +4.0940e-01  +4.0940e-01  9.56e-09  3.14e-12  5.60e-10  1.42e-12  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.7405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:34 PM: Optimal value: 4.094e-01
(CVXPY) Oct 06 04:27:34 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:27:34 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 3, Objective: 0.4094
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:34 PM: Your problem has 2551 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:34 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2551
  constraints   = 5051
  nnz(P)        = 0
  nnz(A)        = 38724
  cones (total) = 1
    : Nonnegative = 1,  numel = 5051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5014e+03  2.50e+03  9.80e-01  8.85e+01  1.00e+00  1.00e+00   ------   
  1  +5.7773e-01  +5.4991e+02  5.49e+02  4.41e-01  5.82e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2863e-01  +5.9780e+01  5.93e+01  1.72e-01  2.90e+01  1.80e-02  2.88e-01  9.64e-01  
  3  +5.0787e-01  +1.5361e+01  1.49e+01  1.05e-01  1.76e+01  5.05e-05  2.57e-01  3.88e-01  
  4  +5.0096e-01  +1.8719e+00  1.37e+00  1.35e-02  2.35e+00  8.42e-06  1.39e-01  6.95e-01  
  5  +5.0007e-01  +8.2755e-01  3.27e-01  3.10e-03  5.49e-01  1.08e-05  4.36e-02  9.17e-01  
  6  +4.9820e-01  +1.0187e+00  5.21e-01  1.60e-03  2.88e-01  1.23e-04  4.70e-03  9.61e-01  
  7  +4.8809e-01  +9.1223e-01  4.24e-01  2.86e-04  5.18e-02  5.43e-04  7.74e-04  8.37e-01  
  8  +4.8510e-01  +8.6017e-01  3.75e-01  2.10e-04  3.81e-02  4.48e-04  5.69e-04  4.20e-01  
  9  +4.8493e-01  +8.2084e-01  3.36e-01  2.04e-04  3.70e-02  2.80e-04  5.58e-04  1.93e-01  
 10  +4.7734e-01  +7.6657e-01  2.89e-01  1.45e-04  2.61e-02  2.32e-04  4.00e-04  4.06e-01  
 11  +4.7640e-01  +7.5157e-01  2.75e-01  1.43e-04  2.58e-02  1.99e-04  3.99e-04  4.41e-02  
 12  +4.5146e-01  +6.0772e-01  1.56e-01  6.18e-05  1.11e-02  5.61e-05  1.80e-04  8.19e-01  
 13  +4.3307e-01  +5.3256e-01  9.95e-02  3.74e-05  6.70e-03  2.74e-05  1.15e-04  4.96e-01  
 14  +4.1230e-01  +4.4916e-01  3.69e-02  1.33e-05  2.38e-03  7.72e-06  4.39e-05  7.01e-01  
 15  +4.0286e-01  +4.1348e-01  1.06e-02  3.77e-06  6.74e-04  2.08e-06  1.30e-05  7.30e-01  
 16  +3.9955e-01  +4.0122e-01  1.67e-03  5.90e-07  1.05e-04  3.19e-07  2.06e-06  8.50e-01  
 17  +3.9900e-01  +3.9922e-01  2.28e-04  7.93e-08  1.41e-05  3.21e-08  2.81e-07  9.79e-01  
 18  +3.9890e-01  +3.9890e-01  2.36e-06  8.22e-10  1.47e-07  3.33e-10  2.92e-09  9.90e-01  
 19  +3.9890e-01  +3.9890e-01  2.36e-08  8.22e-12  1.47e-09  3.33e-12  2.92e-11  9.90e-01  
 20  +3.9890e-01  +3.9890e-01  2.36e-10  8.22e-14  1.47e-11  3.34e-14  2.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.7773ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:34 PM: Optimal value: 3.989e-01
(CVXPY) Oct 06 04:27:34 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:27:34 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 4, Objective: 0.3989
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:34 PM: Your problem has 2561 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:34 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2561
  constraints   = 5061
  nnz(P)        = 0
  nnz(A)        = 39069
  cones (total) = 1
    : Nonnegative = 1,  numel = 5061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5015e+03  2.50e+03  9.80e-01  8.84e+01  1.00e+00  1.00e+00   ------   
  1  +5.7755e-01  +5.4994e+02  5.49e+02  4.41e-01  5.81e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2849e-01  +5.9644e+01  5.91e+01  1.71e-01  2.88e+01  1.80e-02  2.88e-01  9.66e-01  
  3  +5.0784e-01  +1.5323e+01  1.48e+01  1.04e-01  1.75e+01  5.07e-05  2.56e-01  3.93e-01  
  4  +5.0102e-01  +2.0061e+00  1.51e+00  1.48e-02  2.57e+00  8.92e-06  1.43e-01  6.60e-01  
  5  +5.0005e-01  +8.4252e-01  3.42e-01  3.25e-03  5.75e-01  1.03e-05  4.59e-02  8.89e-01  
  6  +4.9861e-01  +9.3751e-01  4.39e-01  1.92e-03  3.46e-01  7.88e-05  6.12e-03  9.14e-01  
  7  +4.8972e-01  +8.5744e-01  3.68e-01  3.30e-04  5.98e-02  4.05e-04  8.99e-04  8.58e-01  
  8  +4.8673e-01  +8.2878e-01  3.42e-01  2.31e-04  4.18e-02  3.92e-04  6.24e-04  4.82e-01  
  9  +4.7954e-01  +7.5221e-01  2.73e-01  1.41e-04  2.55e-02  1.33e-04  3.86e-04  8.41e-01  
 10  +4.7160e-01  +7.1285e-01  2.41e-01  1.14e-04  2.06e-02  9.05e-05  3.19e-04  3.91e-01  
 11  +4.5087e-01  +6.1442e-01  1.64e-01  6.94e-05  1.24e-02  6.47e-06  2.05e-04  9.39e-01  
 12  +4.1429e-01  +4.6595e-01  5.17e-02  1.91e-05  3.40e-03  3.00e-06  6.23e-05  8.07e-01  
 13  +4.0877e-01  +4.4644e-01  3.77e-02  1.37e-05  2.45e-03  2.49e-06  4.59e-05  3.43e-01  
 14  +3.9607e-01  +4.0138e-01  5.32e-03  1.89e-06  3.36e-04  5.45e-07  6.74e-06  9.45e-01  
 15  +3.9393e-01  +3.9399e-01  6.23e-05  2.21e-08  3.93e-06  6.26e-09  7.99e-08  9.89e-01  
 16  +3.9390e-01  +3.9390e-01  6.23e-07  2.21e-10  3.93e-08  6.26e-11  7.99e-10  9.90e-01  
 17  +3.9390e-01  +3.9390e-01  6.23e-09  2.21e-12  3.93e-10  6.27e-13  8.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.8004ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:34 PM: Optimal value: 3.939e-01
(CVXPY) Oct 06 04:27:34 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:34 PM: Solver (including time spent in interface) took 1.093e-01 seconds
Iteration: 5, Objective: 0.3939
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:35 PM: Your problem has 2571 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:35 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2571
  constraints   = 5071
  nnz(P)        = 0
  nnz(A)        = 39350
  cones (total) = 1
    : Nonnegative = 1,  numel = 5071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5016e+03  2.50e+03  9.80e-01  8.84e+01  1.00e+00  1.00e+00   ------   
  1  +5.7749e-01  +5.4985e+02  5.49e+02  4.41e-01  5.80e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2843e-01  +5.9574e+01  5.90e+01  1.71e-01  2.87e+01  1.80e-02  2.87e-01  9.66e-01  
  3  +5.0782e-01  +1.5294e+01  1.48e+01  1.04e-01  1.74e+01  5.08e-05  2.55e-01  3.96e-01  
  4  +5.0101e-01  +1.9772e+00  1.48e+00  1.45e-02  2.52e+00  8.89e-06  1.41e-01  6.70e-01  
  5  +5.0009e-01  +8.8967e-01  3.90e-01  3.71e-03  6.54e-01  1.05e-05  4.80e-02  8.49e-01  
  6  +4.9866e-01  +9.8228e-01  4.84e-01  1.97e-03  3.55e-01  8.05e-05  6.07e-03  9.21e-01  
  7  +4.8958e-01  +9.0310e-01  4.14e-01  3.34e-04  6.07e-02  4.22e-04  9.01e-04  8.54e-01  
  8  +4.8138e-01  +7.9332e-01  3.12e-01  1.73e-04  3.12e-02  2.76e-04  4.68e-04  7.65e-01  
  9  +4.8073e-01  +7.8162e-01  3.01e-01  1.71e-04  3.09e-02  2.44e-04  4.66e-04  4.87e-02  
 10  +4.6600e-01  +7.0559e-01  2.40e-01  1.06e-04  1.92e-02  1.41e-04  2.98e-04  6.31e-01  
 11  +4.5841e-01  +6.6847e-01  2.10e-01  9.43e-05  1.69e-02  8.14e-05  2.73e-04  3.29e-01  
 12  +4.2442e-01  +5.1718e-01  9.28e-02  3.58e-05  6.40e-03  2.11e-05  1.13e-04  7.16e-01  
 13  +4.1564e-01  +4.8468e-01  6.90e-02  2.60e-05  4.64e-03  1.31e-05  8.48e-05  4.96e-01  
 14  +3.9338e-01  +4.0194e-01  8.55e-03  3.10e-06  5.52e-04  9.51e-07  1.11e-05  8.98e-01  
 15  +3.8995e-01  +3.9008e-01  1.28e-04  4.62e-08  8.23e-06  1.30e-08  1.69e-07  9.86e-01  
 16  +3.8990e-01  +3.8990e-01  1.28e-06  4.62e-10  8.22e-08  1.30e-10  1.69e-09  9.90e-01  
 17  +3.8990e-01  +3.8990e-01  1.28e-08  4.62e-12  8.22e-10  1.31e-12  1.70e-11  9.90e-01  
 18  +3.8990e-01  +3.8990e-01  1.28e-10  4.62e-14  8.23e-12  1.31e-14  1.70e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 124.933ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:35 PM: Optimal value: 3.899e-01
(CVXPY) Oct 06 04:27:35 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:27:35 PM: Solver (including time spent in interface) took 1.256e-01 seconds
Iteration: 6, Objective: 0.3899
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:35 PM: Your problem has 2581 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:35 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2581
  constraints   = 5081
  nnz(P)        = 0
  nnz(A)        = 39876
  cones (total) = 1
    : Nonnegative = 1,  numel = 5081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5017e+03  2.50e+03  9.80e-01  8.83e+01  1.00e+00  1.00e+00   ------   
  1  +5.7731e-01  +5.4984e+02  5.49e+02  4.41e-01  5.79e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2828e-01  +5.9426e+01  5.89e+01  1.71e-01  2.85e+01  1.80e-02  2.86e-01  9.69e-01  
  3  +5.0779e-01  +1.5249e+01  1.47e+01  1.04e-01  1.74e+01  5.10e-05  2.54e-01  4.01e-01  
  4  +5.0106e-01  +2.0876e+00  1.59e+00  1.56e-02  2.70e+00  9.34e-06  1.44e-01  6.44e-01  
  5  +5.0013e-01  +9.7387e-01  4.74e-01  4.52e-03  7.96e-01  1.03e-05  5.62e-02  7.81e-01  
  6  +4.9856e-01  +9.7816e-01  4.80e-01  1.89e-03  3.42e-01  7.44e-05  5.71e-03  9.48e-01  
  7  +4.9003e-01  +9.0015e-01  4.10e-01  3.58e-04  6.50e-02  3.44e-04  9.55e-04  8.40e-01  
  8  +4.8661e-01  +8.4777e-01  3.61e-01  2.56e-04  4.65e-02  2.61e-04  6.85e-04  5.17e-01  
  9  +4.8676e-01  +8.3666e-01  3.50e-01  2.48e-04  4.50e-02  2.06e-04  6.62e-04  2.01e-01  
 10  +4.7620e-01  +7.7507e-01  2.99e-01  1.51e-04  2.73e-02  1.86e-04  4.09e-04  5.54e-01  
 11  +4.6747e-01  +7.3107e-01  2.64e-01  1.22e-04  2.21e-02  1.52e-04  3.37e-04  2.53e-01  
 12  +4.4418e-01  +6.1260e-01  1.68e-01  7.16e-05  1.29e-02  1.56e-06  2.11e-04  9.06e-01  
 13  +4.0959e-01  +4.7187e-01  6.23e-02  2.34e-05  4.18e-03  2.66e-06  7.55e-05  7.49e-01  
 14  +3.9957e-01  +4.3510e-01  3.55e-02  1.30e-05  2.33e-03  2.05e-06  4.38e-05  5.20e-01  
 15  +3.9024e-01  +4.0125e-01  1.10e-02  3.96e-06  7.10e-04  8.76e-07  1.39e-05  7.80e-01  
 16  +3.8625e-01  +3.8715e-01  8.93e-04  3.20e-07  5.72e-05  7.30e-08  1.14e-06  9.23e-01  
 17  +3.8590e-01  +3.8591e-01  9.13e-06  3.27e-09  5.85e-07  7.46e-10  1.17e-08  9.90e-01  
 18  +3.8590e-01  +3.8590e-01  9.13e-08  3.27e-11  5.85e-09  7.46e-12  1.17e-10  9.90e-01  
 19  +3.8590e-01  +3.8590e-01  9.13e-10  3.27e-13  5.85e-11  7.47e-14  1.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.2493ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:35 PM: Optimal value: 3.859e-01
(CVXPY) Oct 06 04:27:35 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:35 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 7, Objective: 0.3859
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:35 PM: Your problem has 2591 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:35 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2591
  constraints   = 5091
  nnz(P)        = 0
  nnz(A)        = 40345
  cones (total) = 1
    : Nonnegative = 1,  numel = 5091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5018e+03  2.50e+03  9.80e-01  8.83e+01  1.00e+00  1.00e+00   ------   
  1  +5.7715e-01  +5.4979e+02  5.49e+02  4.42e-01  5.78e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2816e-01  +5.9300e+01  5.88e+01  1.70e-01  2.84e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0776e-01  +1.5209e+01  1.47e+01  1.03e-01  1.73e+01  5.11e-05  2.52e-01  4.06e-01  
  4  +5.0107e-01  +2.1138e+00  1.61e+00  1.59e-02  2.75e+00  9.52e-06  1.43e-01  6.41e-01  
  5  +5.0017e-01  +1.0356e+00  5.35e-01  5.12e-03  9.01e-01  1.04e-05  5.90e-02  7.32e-01  
  6  +4.9867e-01  +1.0323e+00  5.34e-01  2.13e-03  3.86e-01  6.94e-05  6.40e-03  9.37e-01  
  7  +4.8940e-01  +9.4698e-01  4.58e-01  3.69e-04  6.72e-02  3.54e-04  9.79e-04  8.50e-01  
  8  +4.8269e-01  +8.7649e-01  3.94e-01  2.37e-04  4.30e-02  2.94e-04  6.29e-04  5.53e-01  
  9  +4.7682e-01  +8.2315e-01  3.46e-01  1.86e-04  3.38e-02  1.87e-04  5.01e-04  4.55e-01  
 10  +4.6555e-01  +7.4907e-01  2.84e-01  1.36e-04  2.46e-02  8.85e-05  3.75e-04  5.81e-01  
 11  +4.4606e-01  +6.4321e-01  1.97e-01  8.79e-05  1.58e-02  4.31e-06  2.56e-04  9.90e-01  
 12  +4.1343e-01  +5.0431e-01  9.09e-02  3.53e-05  6.33e-03  2.83e-06  1.12e-04  6.16e-01  
 13  +3.9304e-01  +4.2453e-01  3.15e-02  1.18e-05  2.11e-03  1.68e-06  4.03e-05  7.32e-01  
 14  +3.8678e-01  +4.0089e-01  1.41e-02  5.17e-06  9.25e-04  1.43e-06  1.83e-05  8.36e-01  
 15  +3.8176e-01  +3.8293e-01  1.17e-03  4.28e-07  7.67e-05  1.19e-07  1.56e-06  9.21e-01  
 16  +3.8130e-01  +3.8132e-01  1.22e-05  4.44e-09  7.95e-07  1.23e-09  1.62e-08  9.90e-01  
 17  +3.8130e-01  +3.8130e-01  1.22e-07  4.44e-11  7.95e-09  1.23e-11  1.62e-10  9.90e-01  
 18  +3.8130e-01  +3.8130e-01  1.22e-09  4.44e-13  7.95e-11  1.23e-13  1.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.9948ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:36 PM: Optimal value: 3.813e-01
(CVXPY) Oct 06 04:27:36 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:27:36 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 8, Objective: 0.3813
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:36 PM: Your problem has 2601 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:36 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2601
  constraints   = 5101
  nnz(P)        = 0
  nnz(A)        = 40650
  cones (total) = 1
    : Nonnegative = 1,  numel = 5101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5019e+03  2.50e+03  9.80e-01  8.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.7694e-01  +5.4984e+02  5.49e+02  4.42e-01  5.77e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2800e-01  +5.9147e+01  5.86e+01  1.70e-01  2.82e+01  1.81e-02  2.85e-01  9.73e-01  
  3  +5.0772e-01  +1.5165e+01  1.47e+01  1.03e-01  1.72e+01  5.14e-05  2.51e-01  4.12e-01  
  4  +5.0115e-01  +2.2920e+00  1.79e+00  1.76e-02  3.04e+00  1.02e-05  1.49e-01  6.02e-01  
  5  +5.0021e-01  +1.1246e+00  6.24e-01  5.99e-03  1.05e+00  1.03e-05  6.73e-02  6.81e-01  
  6  +4.9902e-01  +1.0891e+00  5.90e-01  2.95e-03  5.32e-01  4.94e-05  9.39e-03  9.18e-01  
  7  +4.9024e-01  +9.9131e-01  5.01e-01  4.57e-04  8.33e-02  2.92e-04  1.21e-03  8.74e-01  
  8  +4.8333e-01  +9.0260e-01  4.19e-01  2.81e-04  5.12e-02  2.44e-04  7.46e-04  5.70e-01  
  9  +4.8085e-01  +8.7455e-01  3.94e-01  2.25e-04  4.09e-02  1.67e-04  5.95e-04  5.14e-01  
 10  +4.7431e-01  +8.0547e-01  3.31e-01  1.88e-04  3.41e-02  4.32e-05  5.08e-04  7.04e-01  
 11  +4.5544e-01  +7.1138e-01  2.56e-01  1.15e-04  2.08e-02  2.89e-05  3.22e-04  7.64e-01  
 12  +4.2663e-01  +5.7592e-01  1.49e-01  6.04e-05  1.08e-02  1.49e-05  1.82e-04  4.99e-01  
 13  +4.0403e-01  +4.7969e-01  7.57e-02  2.93e-05  5.25e-03  7.35e-06  9.49e-05  6.23e-01  
 14  +3.9032e-01  +4.2454e-01  3.42e-02  1.29e-05  2.30e-03  3.46e-06  4.41e-05  6.37e-01  
 15  +3.8222e-01  +3.9303e-01  1.08e-02  4.01e-06  7.15e-04  1.19e-06  1.42e-05  7.88e-01  
 16  +3.7896e-01  +3.8095e-01  1.98e-03  7.28e-07  1.30e-04  2.20e-07  2.63e-06  8.24e-01  
 17  +3.7824e-01  +3.7834e-01  1.01e-04  3.67e-08  6.53e-06  1.15e-08  1.34e-07  9.73e-01  
 18  +3.7820e-01  +3.7820e-01  1.01e-06  3.69e-10  6.58e-08  1.16e-10  1.35e-09  9.90e-01  
 19  +3.7820e-01  +3.7820e-01  1.01e-08  3.69e-12  6.58e-10  1.16e-12  1.35e-11  9.90e-01  
 20  +3.7820e-01  +3.7820e-01  1.01e-10  3.70e-14  6.58e-12  1.16e-14  1.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.1159ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:36 PM: Optimal value: 3.782e-01
(CVXPY) Oct 06 04:27:36 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:36 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 9, Objective: 0.3782
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:36 PM: Your problem has 2611 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:36 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2611
  constraints   = 5111
  nnz(P)        = 0
  nnz(A)        = 40973
  cones (total) = 1
    : Nonnegative = 1,  numel = 5111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5019e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7678e-01  +5.4983e+02  5.49e+02  4.42e-01  5.76e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2790e-01  +5.9049e+01  5.85e+01  1.69e-01  2.81e+01  1.81e-02  2.84e-01  9.74e-01  
  3  +5.0770e-01  +1.5136e+01  1.46e+01  1.03e-01  1.71e+01  5.15e-05  2.50e-01  4.16e-01  
  4  +5.0118e-01  +2.3413e+00  1.84e+00  1.81e-02  3.12e+00  1.04e-05  1.49e-01  5.94e-01  
  5  +5.0017e-01  +1.1005e+00  6.00e-01  5.76e-03  1.01e+00  1.05e-05  6.33e-02  7.22e-01  
  6  +4.9903e-01  +1.1163e+00  6.17e-01  3.25e-03  5.85e-01  4.81e-05  1.05e-02  8.89e-01  
  7  +4.9016e-01  +1.0146e+00  5.24e-01  5.02e-04  9.16e-02  2.89e-04  1.32e-03  8.76e-01  
  8  +4.8341e-01  +9.2330e-01  4.40e-01  3.04e-04  5.54e-02  2.52e-04  8.01e-04  5.75e-01  
  9  +4.7905e-01  +8.9103e-01  4.12e-01  2.36e-04  4.29e-02  2.24e-04  6.23e-04  3.82e-01  
 10  +4.7540e-01  +8.4569e-01  3.70e-01  2.10e-04  3.81e-02  1.20e-04  5.60e-04  4.33e-01  
 11  +4.5197e-01  +7.1202e-01  2.60e-01  1.11e-04  2.01e-02  5.91e-05  3.09e-04  7.46e-01  
 12  +4.2169e-01  +5.6718e-01  1.45e-01  5.85e-05  1.05e-02  2.43e-05  1.77e-04  5.21e-01  
 13  +4.0532e-01  +4.9768e-01  9.24e-02  3.60e-05  6.44e-03  1.36e-05  1.15e-04  5.34e-01  
 14  +3.8713e-01  +4.2283e-01  3.57e-02  1.34e-05  2.40e-03  4.68e-06  4.60e-05  7.95e-01  
 15  +3.8073e-01  +3.9824e-01  1.75e-02  6.51e-06  1.16e-03  2.29e-06  2.30e-05  6.12e-01  
 16  +3.7512e-01  +3.7726e-01  2.14e-03  7.89e-07  1.41e-04  2.71e-07  2.89e-06  9.14e-01  
 17  +3.7431e-01  +3.7433e-01  2.43e-05  8.94e-09  1.60e-06  3.06e-09  3.30e-08  9.89e-01  
 18  +3.7430e-01  +3.7430e-01  2.43e-07  8.94e-11  1.60e-08  3.06e-11  3.30e-10  9.90e-01  
 19  +3.7430e-01  +3.7430e-01  2.43e-09  8.94e-13  1.60e-10  3.07e-13  3.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.7088ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:36 PM: Optimal value: 3.743e-01
(CVXPY) Oct 06 04:27:36 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:27:36 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 10, Objective: 0.3743
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:37 PM: Your problem has 2621 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:37 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2621
  constraints   = 5121
  nnz(P)        = 0
  nnz(A)        = 41477
  cones (total) = 1
    : Nonnegative = 1,  numel = 5121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5018e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7660e-01  +5.4988e+02  5.49e+02  4.42e-01  5.75e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2779e-01  +5.8948e+01  5.84e+01  1.69e-01  2.80e+01  1.81e-02  2.83e-01  9.76e-01  
  3  +5.0768e-01  +1.5111e+01  1.46e+01  1.03e-01  1.71e+01  5.17e-05  2.49e-01  4.20e-01  
  4  +5.0115e-01  +2.2968e+00  1.80e+00  1.77e-02  3.04e+00  1.03e-05  1.46e-01  6.06e-01  
  5  +5.0019e-01  +1.1356e+00  6.35e-01  6.10e-03  1.07e+00  1.09e-05  6.27e-02  7.14e-01  
  6  +4.9894e-01  +1.1373e+00  6.38e-01  3.07e-03  5.54e-01  5.31e-05  9.46e-03  9.03e-01  
  7  +4.8978e-01  +1.0285e+00  5.39e-01  4.83e-04  8.82e-02  3.01e-04  1.26e-03  8.70e-01  
  8  +4.8061e-01  +9.2152e-01  4.41e-01  2.43e-04  4.42e-02  2.86e-04  6.32e-04  7.30e-01  
  9  +4.7917e-01  +8.9870e-01  4.20e-01  2.34e-04  4.26e-02  2.20e-04  6.13e-04  1.87e-01  
 10  +4.5968e-01  +7.7472e-01  3.15e-01  1.42e-04  2.57e-02  1.28e-04  3.86e-04  5.80e-01  
 11  +4.2924e-01  +6.1301e-01  1.84e-01  7.80e-05  1.40e-02  3.40e-05  2.31e-04  6.41e-01  
 12  +4.0541e-01  +5.0788e-01  1.02e-01  4.12e-05  7.37e-03  1.56e-05  1.32e-04  5.37e-01  
 13  +3.8534e-01  +4.2340e-01  3.81e-02  1.46e-05  2.60e-03  4.52e-06  5.03e-05  9.90e-01  
 14  +3.7925e-01  +3.9996e-01  2.07e-02  7.84e-06  1.40e-03  2.51e-06  2.80e-05  6.00e-01  
 15  +3.7324e-01  +3.7734e-01  4.10e-03  1.54e-06  2.75e-04  4.95e-07  5.71e-06  8.60e-01  
 16  +3.7172e-01  +3.7178e-01  6.05e-05  2.27e-08  4.05e-06  7.20e-09  8.52e-08  9.86e-01  
 17  +3.7170e-01  +3.7170e-01  6.05e-07  2.27e-10  4.05e-08  7.20e-11  8.53e-10  9.90e-01  
 18  +3.7170e-01  +3.7170e-01  6.06e-09  2.27e-12  4.05e-10  7.21e-13  8.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 128.366ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:37 PM: Optimal value: 3.717e-01
(CVXPY) Oct 06 04:27:37 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:27:37 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 11, Objective: 0.3717
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:37 PM: Your problem has 2631 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:37 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2631
  constraints   = 5131
  nnz(P)        = 0
  nnz(A)        = 41711
  cones (total) = 1
    : Nonnegative = 1,  numel = 5131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5019e+03  2.50e+03  9.80e-01  8.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.7638e-01  +5.4994e+02  5.49e+02  4.43e-01  5.74e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2767e-01  +5.8838e+01  5.83e+01  1.69e-01  2.79e+01  1.82e-02  2.83e-01  9.77e-01  
  3  +5.0766e-01  +1.5088e+01  1.46e+01  1.02e-01  1.70e+01  5.19e-05  2.48e-01  4.24e-01  
  4  +5.0122e-01  +2.4302e+00  1.93e+00  1.90e-02  3.26e+00  1.09e-05  1.50e-01  5.80e-01  
  5  +5.0016e-01  +1.1184e+00  6.18e-01  5.94e-03  1.04e+00  1.08e-05  6.21e-02  7.31e-01  
  6  +4.9853e-01  +1.1664e+00  6.68e-01  2.89e-03  5.22e-01  6.23e-05  8.66e-03  9.09e-01  
  7  +4.8815e-01  +1.0445e+00  5.56e-01  4.87e-04  8.89e-02  3.15e-04  1.28e-03  8.57e-01  
  8  +4.8000e-01  +9.3497e-01  4.55e-01  2.72e-04  4.96e-02  2.55e-04  7.12e-04  6.87e-01  
  9  +4.7601e-01  +9.0374e-01  4.28e-01  2.34e-04  4.26e-02  2.12e-04  6.16e-04  2.78e-01  
 10  +4.6676e-01  +8.3004e-01  3.63e-01  1.87e-04  3.40e-02  1.10e-04  5.05e-04  4.88e-01  
 11  +4.2432e-01  +5.9253e-01  1.68e-01  6.81e-05  1.22e-02  2.63e-05  2.01e-04  8.12e-01  
 12  +4.0633e-01  +5.1853e-01  1.12e-01  4.47e-05  7.99e-03  1.60e-05  1.41e-04  3.91e-01  
 13  +3.8198e-01  +4.1864e-01  3.67e-02  1.42e-05  2.54e-03  4.31e-06  4.98e-05  9.14e-01  
 14  +3.7647e-01  +3.9697e-01  2.05e-02  7.88e-06  1.40e-03  2.43e-06  2.85e-05  5.62e-01  
 15  +3.7112e-01  +3.7633e-01  5.21e-03  1.99e-06  3.54e-04  6.18e-07  7.47e-06  8.39e-01  
 16  +3.6924e-01  +3.6936e-01  1.13e-04  4.30e-08  7.65e-06  1.28e-08  1.64e-07  9.90e-01  
 17  +3.6920e-01  +3.6920e-01  1.13e-06  4.30e-10  7.66e-08  1.29e-10  1.64e-09  9.90e-01  
 18  +3.6920e-01  +3.6920e-01  1.13e-08  4.30e-12  7.66e-10  1.29e-12  1.65e-11  9.90e-01  
 19  +3.6920e-01  +3.6920e-01  1.13e-10  4.30e-14  7.66e-12  1.29e-14  1.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.1857ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:37 PM: Optimal value: 3.692e-01
(CVXPY) Oct 06 04:27:37 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:27:37 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 12, Objective: 0.3692
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:37 PM: Your problem has 2641 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:37 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2641
  constraints   = 5141
  nnz(P)        = 0
  nnz(A)        = 42070
  cones (total) = 1
    : Nonnegative = 1,  numel = 5141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5017e+03  2.50e+03  9.80e-01  8.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.7610e-01  +5.5006e+02  5.49e+02  4.43e-01  5.74e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2747e-01  +5.8673e+01  5.81e+01  1.68e-01  2.77e+01  1.82e-02  2.82e-01  9.80e-01  
  3  +5.0763e-01  +1.5047e+01  1.45e+01  1.02e-01  1.69e+01  5.23e-05  2.46e-01  4.32e-01  
  4  +5.0113e-01  +2.2767e+00  1.78e+00  1.75e-02  3.01e+00  1.05e-05  1.42e-01  6.17e-01  
  5  +5.0015e-01  +1.1199e+00  6.20e-01  5.92e-03  1.04e+00  1.24e-05  5.26e-02  7.87e-01  
  6  +4.9629e-01  +1.3111e+00  8.15e-01  1.65e-03  3.01e-01  1.47e-04  4.40e-03  9.70e-01  
  7  +4.8453e-01  +1.1443e+00  6.60e-01  4.63e-04  8.45e-02  3.72e-04  1.20e-03  7.40e-01  
  8  +4.7839e-01  +1.0432e+00  5.65e-01  3.22e-04  5.87e-02  2.85e-04  8.37e-04  4.84e-01  
  9  +4.6417e-01  +8.6836e-01  4.04e-01  2.01e-04  3.65e-02  1.11e-04  5.39e-04  6.60e-01  
 10  +4.3082e-01  +6.4460e-01  2.14e-01  9.42e-05  1.69e-02  3.55e-06  2.76e-04  9.81e-01  
 11  +4.0932e-01  +5.4824e-01  1.39e-01  5.83e-05  1.04e-02  3.04e-06  1.82e-04  3.79e-01  
 12  +3.8323e-01  +4.3669e-01  5.35e-02  2.12e-05  3.78e-03  4.94e-06  7.29e-05  8.91e-01  
 13  +3.7513e-01  +4.0462e-01  2.95e-02  1.14e-05  2.03e-03  3.09e-06  4.10e-05  6.79e-01  
 14  +3.6933e-01  +3.8190e-01  1.26e-02  4.83e-06  8.56e-04  1.40e-06  1.79e-05  7.39e-01  
 15  +3.6503e-01  +3.6564e-01  6.11e-04  2.34e-07  4.15e-05  6.69e-08  8.95e-07  9.62e-01  
 16  +3.6480e-01  +3.6481e-01  6.15e-06  2.35e-09  4.17e-07  6.72e-10  9.02e-09  9.90e-01  
 17  +3.6480e-01  +3.6480e-01  6.15e-08  2.35e-11  4.17e-09  6.72e-12  9.02e-11  9.90e-01  
 18  +3.6480e-01  +3.6480e-01  6.15e-10  2.35e-13  4.17e-11  6.74e-14  9.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.7982ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:38 PM: Optimal value: 3.648e-01
(CVXPY) Oct 06 04:27:38 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:38 PM: Solver (including time spent in interface) took 1.254e-01 seconds
Iteration: 13, Objective: 0.3648
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:38 PM: Your problem has 2651 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:38 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2651
  constraints   = 5151
  nnz(P)        = 0
  nnz(A)        = 42313
  cones (total) = 1
    : Nonnegative = 1,  numel = 5151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.80e-01  8.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.7574e-01  +5.5018e+02  5.50e+02  4.44e-01  5.73e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2731e-01  +5.8541e+01  5.80e+01  1.68e-01  2.76e+01  1.83e-02  2.81e-01  9.83e-01  
  3  +5.0761e-01  +1.5021e+01  1.45e+01  1.01e-01  1.69e+01  5.27e-05  2.44e-01  4.38e-01  
  4  +5.0115e-01  +2.3153e+00  1.81e+00  1.79e-02  3.08e+00  1.07e-05  1.41e-01  6.13e-01  
  5  +5.0013e-01  +1.1339e+00  6.34e-01  6.03e-03  1.06e+00  1.31e-05  4.99e-02  8.05e-01  
  6  +4.9497e-01  +1.3567e+00  8.62e-01  1.42e-03  2.58e-01  1.87e-04  3.71e-03  9.69e-01  
  7  +4.8437e-01  +1.1917e+00  7.07e-01  5.20e-04  9.49e-02  3.47e-04  1.34e-03  6.65e-01  
  8  +4.7177e-01  +9.8774e-01  5.16e-01  2.76e-04  5.02e-02  2.23e-04  7.23e-04  6.80e-01  
  9  +4.6800e-01  +9.3845e-01  4.70e-01  2.55e-04  4.62e-02  1.65e-04  6.77e-04  2.04e-01  
 10  +4.5637e-01  +8.6095e-01  4.05e-01  1.99e-04  3.60e-02  1.38e-04  5.42e-04  2.41e-01  
 11  +4.1820e-01  +6.0613e-01  1.88e-01  7.98e-05  1.43e-02  1.45e-06  2.39e-04  9.62e-01  
 12  +4.0403e-01  +5.4318e-01  1.39e-01  5.79e-05  1.03e-02  1.84e-06  1.82e-04  2.75e-01  
 13  +3.7784e-01  +4.2919e-01  5.13e-02  2.06e-05  3.66e-03  2.85e-06  7.21e-05  7.63e-01  
 14  +3.6948e-01  +3.9482e-01  2.53e-02  1.00e-05  1.78e-03  2.03e-06  3.68e-05  6.98e-01  
 15  +3.6353e-01  +3.7127e-01  7.74e-03  3.03e-06  5.38e-04  7.18e-07  1.16e-05  8.04e-01  
 16  +3.6086e-01  +3.6104e-01  1.75e-04  6.84e-08  1.21e-05  1.62e-08  2.67e-07  9.80e-01  
 17  +3.6080e-01  +3.6080e-01  1.75e-06  6.84e-10  1.21e-07  1.62e-10  2.68e-09  9.90e-01  
 18  +3.6080e-01  +3.6080e-01  1.75e-08  6.84e-12  1.21e-09  1.62e-12  2.68e-11  9.90e-01  
 19  +3.6080e-01  +3.6080e-01  1.75e-10  6.86e-14  1.22e-11  1.62e-14  2.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 136.2652ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:38 PM: Optimal value: 3.608e-01
(CVXPY) Oct 06 04:27:38 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:38 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 14, Objective: 0.3608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:38 PM: Your problem has 2661 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:38 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2661
  constraints   = 5161
  nnz(P)        = 0
  nnz(A)        = 42523
  cones (total) = 1
    : Nonnegative = 1,  numel = 5161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.7545e-01  +5.5031e+02  5.50e+02  4.44e-01  5.72e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2716e-01  +5.8429e+01  5.79e+01  1.67e-01  2.75e+01  1.84e-02  2.81e-01  9.85e-01  
  3  +5.0759e-01  +1.4995e+01  1.45e+01  1.01e-01  1.68e+01  5.30e-05  2.43e-01  4.44e-01  
  4  +5.0106e-01  +2.1416e+00  1.64e+00  1.62e-02  2.79e+00  1.02e-05  1.33e-01  6.56e-01  
  5  +5.0016e-01  +1.1809e+00  6.81e-01  6.40e-03  1.12e+00  1.51e-05  4.38e-02  8.21e-01  
  6  +4.9455e-01  +1.2934e+00  7.99e-01  1.08e-03  1.97e-01  2.21e-04  2.77e-03  9.66e-01  
  7  +4.8490e-01  +1.1610e+00  6.76e-01  4.67e-04  8.54e-02  3.53e-04  1.19e-03  6.11e-01  
  8  +4.8377e-01  +1.0509e+00  5.67e-01  3.92e-04  7.16e-02  1.41e-04  1.01e-03  5.53e-01  
  9  +4.7022e-01  +9.4509e-01  4.75e-01  2.46e-04  4.46e-02  1.32e-04  6.42e-04  4.78e-01  
 10  +4.5618e-01  +8.5080e-01  3.95e-01  1.88e-04  3.40e-02  9.98e-05  5.08e-04  2.91e-01  
 11  +4.5271e-01  +8.2402e-01  3.71e-01  1.83e-04  3.31e-02  8.18e-05  5.05e-04  1.02e-01  
 12  +4.2000e-01  +6.3207e-01  2.12e-01  9.39e-05  1.68e-02  3.77e-05  2.81e-04  5.05e-01  
 13  +4.0786e-01  +5.7627e-01  1.68e-01  7.20e-05  1.29e-02  2.58e-05  2.24e-04  4.49e-01  
 14  +3.8848e-01  +4.8653e-01  9.81e-02  4.06e-05  7.22e-03  1.35e-05  1.36e-04  4.75e-01  
 15  +3.7799e-01  +4.3990e-01  6.19e-02  2.52e-05  4.47e-03  8.29e-06  8.82e-05  4.04e-01  
 16  +3.6518e-01  +3.8353e-01  1.84e-02  7.30e-06  1.29e-03  2.23e-06  2.74e-05  8.70e-01  
 17  +3.5977e-01  +3.6184e-01  2.06e-03  8.16e-07  1.45e-04  2.30e-07  3.19e-06  9.90e-01  
 18  +3.5901e-01  +3.5904e-01  2.94e-05  1.16e-08  2.06e-06  3.25e-09  4.58e-08  9.86e-01  
 19  +3.5900e-01  +3.5900e-01  2.94e-07  1.16e-10  2.06e-08  3.25e-11  4.58e-10  9.90e-01  
 20  +3.5900e-01  +3.5900e-01  2.94e-09  1.16e-12  2.06e-10  3.25e-13  4.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 154.9987ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:38 PM: Optimal value: 3.590e-01
(CVXPY) Oct 06 04:27:38 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:38 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 15, Objective: 0.3590
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:39 PM: Your problem has 2671 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:39 PM: Finished problem compilation (took 3.123e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2671
  constraints   = 5171
  nnz(P)        = 0
  nnz(A)        = 42643
  cones (total) = 1
    : Nonnegative = 1,  numel = 5171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.7523e-01  +5.5036e+02  5.50e+02  4.44e-01  5.71e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2704e-01  +5.8318e+01  5.78e+01  1.67e-01  2.73e+01  1.84e-02  2.80e-01  9.87e-01  
  3  +5.0758e-01  +1.4976e+01  1.45e+01  1.01e-01  1.67e+01  5.33e-05  2.42e-01  4.48e-01  
  4  +5.0106e-01  +2.1415e+00  1.64e+00  1.63e-02  2.79e+00  1.03e-05  1.32e-01  6.59e-01  
  5  +5.0014e-01  +1.1831e+00  6.83e-01  6.37e-03  1.12e+00  1.58e-05  4.11e-02  8.36e-01  
  6  +4.9439e-01  +1.3195e+00  8.25e-01  1.09e-03  1.99e-01  2.26e-04  2.79e-03  9.65e-01  
  7  +4.8552e-01  +1.1942e+00  7.09e-01  5.10e-04  9.32e-02  3.42e-04  1.30e-03  5.72e-01  
  8  +4.8542e-01  +1.0754e+00  5.90e-01  4.30e-04  7.85e-02  1.18e-04  1.10e-03  6.01e-01  
  9  +4.7604e-01  +1.0041e+00  5.28e-01  3.01e-04  5.49e-02  1.22e-04  7.79e-04  3.44e-01  
 10  +4.5633e-01  +8.3880e-01  3.82e-01  1.89e-04  3.42e-02  5.16e-05  5.11e-04  7.13e-01  
 11  +4.5246e-01  +8.1497e-01  3.63e-01  1.84e-04  3.31e-02  4.47e-05  5.07e-04  1.21e-01  
 12  +4.1680e-01  +6.1504e-01  1.98e-01  8.78e-05  1.57e-02  2.10e-05  2.65e-04  5.37e-01  
 13  +4.0868e-01  +5.8232e-01  1.74e-01  7.48e-05  1.34e-02  1.89e-05  2.31e-04  4.91e-01  
 14  +3.8089e-01  +4.5610e-01  7.52e-02  3.10e-05  5.51e-03  7.16e-06  1.06e-04  6.11e-01  
 15  +3.7466e-01  +4.2942e-01  5.48e-02  2.23e-05  3.95e-03  5.31e-06  7.86e-05  3.29e-01  
 16  +3.6389e-01  +3.8387e-01  2.00e-02  8.01e-06  1.42e-03  1.97e-06  3.00e-05  6.97e-01  
 17  +3.5929e-01  +3.6508e-01  5.79e-03  2.30e-06  4.07e-04  5.85e-07  8.89e-06  7.66e-01  
 18  +3.5771e-01  +3.5886e-01  1.15e-03  4.53e-07  8.02e-05  1.18e-07  1.78e-06  8.73e-01  
 19  +3.5731e-01  +3.5732e-01  1.44e-05  5.68e-09  1.01e-06  1.48e-09  2.23e-08  9.89e-01  
 20  +3.5730e-01  +3.5730e-01  1.44e-07  5.70e-11  1.01e-08  1.49e-11  2.24e-10  9.90e-01  
 21  +3.5730e-01  +3.5730e-01  1.45e-09  5.70e-13  1.01e-10  1.49e-13  2.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.9266ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:39 PM: Optimal value: 3.573e-01
(CVXPY) Oct 06 04:27:39 PM: Compilation took 3.123e-02 seconds
(CVXPY) Oct 06 04:27:39 PM: Solver (including time spent in interface) took 1.569e-01 seconds
Iteration: 16, Objective: 0.3573
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:39 PM: Your problem has 2681 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:39 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2681
  constraints   = 5181
  nnz(P)        = 0
  nnz(A)        = 42824
  cones (total) = 1
    : Nonnegative = 1,  numel = 5181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.7490e-01  +5.5055e+02  5.50e+02  4.45e-01  5.70e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2686e-01  +5.8183e+01  5.77e+01  1.66e-01  2.72e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0756e-01  +1.4953e+01  1.44e+01  1.01e-01  1.67e+01  5.37e-05  2.41e-01  4.54e-01  
  4  +5.0097e-01  +1.9715e+00  1.47e+00  1.46e-02  2.51e+00  9.83e-06  1.23e-01  7.06e-01  
  5  +5.0020e-01  +1.2641e+00  7.64e-01  6.89e-03  1.21e+00  1.87e-05  3.57e-02  8.35e-01  
  6  +4.9556e-01  +1.2645e+00  7.69e-01  1.05e-03  1.92e-01  2.06e-04  2.66e-03  9.42e-01  
  7  +4.9238e-01  +1.2238e+00  7.31e-01  7.10e-04  1.30e-01  2.59e-04  1.79e-03  3.77e-01  
  8  +4.8504e-01  +1.0345e+00  5.49e-01  3.36e-04  6.14e-02  1.58e-04  8.47e-04  9.45e-01  
  9  +4.6771e-01  +9.1162e-01  4.44e-01  2.17e-04  3.93e-02  1.14e-04  5.64e-04  5.56e-01  
 10  +4.4917e-01  +8.0264e-01  3.53e-01  1.64e-04  2.95e-02  7.64e-05  4.46e-04  3.15e-01  
 11  +4.2291e-01  +6.6464e-01  2.42e-01  1.17e-04  2.09e-02  8.80e-06  3.55e-04  9.90e-01  
 12  +3.9926e-01  +5.4973e-01  1.50e-01  6.71e-05  1.19e-02  5.90e-06  2.16e-04  4.32e-01  
 13  +3.7408e-01  +4.3424e-01  6.02e-02  2.52e-05  4.47e-03  2.89e-06  8.89e-05  6.63e-01  
 14  +3.6632e-01  +4.0056e-01  3.42e-02  1.40e-05  2.48e-03  2.37e-06  5.14e-05  6.19e-01  
 15  +3.5906e-01  +3.7038e-01  1.13e-02  4.58e-06  8.11e-04  8.48e-07  1.76e-05  7.12e-01  
 16  +3.5672e-01  +3.6088e-01  4.15e-03  1.67e-06  2.95e-04  3.45e-07  6.53e-06  7.25e-01  
 17  +3.5544e-01  +3.5582e-01  3.80e-04  1.52e-07  2.69e-05  3.85e-08  6.02e-07  9.90e-01  
 18  +3.5530e-01  +3.5531e-01  3.91e-06  1.56e-09  2.76e-07  3.96e-10  6.20e-09  9.90e-01  
 19  +3.5530e-01  +3.5530e-01  3.91e-08  1.56e-11  2.77e-09  3.96e-12  6.21e-11  9.90e-01  
 20  +3.5530e-01  +3.5530e-01  3.92e-10  1.57e-13  2.77e-11  3.97e-14  6.23e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 142.5329ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:39 PM: Optimal value: 3.553e-01
(CVXPY) Oct 06 04:27:39 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:27:39 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 17, Objective: 0.3553
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:39 PM: Your problem has 2691 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:39 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2691
  constraints   = 5191
  nnz(P)        = 0
  nnz(A)        = 42996
  cones (total) = 1
    : Nonnegative = 1,  numel = 5191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7467e-01  +5.5054e+02  5.50e+02  4.45e-01  5.69e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2675e-01  +5.8215e+01  5.77e+01  1.66e-01  2.71e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0764e-01  +1.4976e+01  1.45e+01  1.00e-01  1.66e+01  5.44e-05  2.38e-01  4.64e-01  
  4  +5.0101e-01  +2.0820e+00  1.58e+00  1.57e-02  2.70e+00  1.05e-05  1.27e-01  6.77e-01  
  5  +5.0013e-01  +1.2287e+00  7.29e-01  6.66e-03  1.17e+00  1.78e-05  3.64e-02  8.42e-01  
  6  +4.9452e-01  +1.2865e+00  7.92e-01  1.05e-03  1.91e-01  2.18e-04  2.65e-03  9.51e-01  
  7  +4.9099e-01  +1.2445e+00  7.54e-01  7.21e-04  1.32e-01  2.70e-04  1.82e-03  3.55e-01  
  8  +4.8548e-01  +1.0884e+00  6.03e-01  4.25e-04  7.77e-02  1.63e-04  1.08e-03  7.72e-01  
  9  +4.7679e-01  +1.0203e+00  5.43e-01  3.12e-04  5.68e-02  1.57e-04  8.00e-04  3.47e-01  
 10  +4.5388e-01  +8.3738e-01  3.84e-01  1.93e-04  3.49e-02  4.63e-05  5.23e-04  7.78e-01  
 11  +4.4336e-01  +7.8235e-01  3.39e-01  1.64e-04  2.94e-02  3.86e-05  4.55e-04  2.68e-01  
 12  +4.0201e-01  +5.6382e-01  1.62e-01  7.12e-05  1.27e-02  1.19e-05  2.23e-04  9.05e-01  
 13  +3.7570e-01  +4.4655e-01  7.08e-02  2.98e-05  5.29e-03  5.90e-06  1.03e-04  7.38e-01  
 14  +3.7067e-01  +4.2515e-01  5.45e-02  2.27e-05  4.02e-03  4.73e-06  8.04e-05  3.14e-01  
 15  +3.5769e-01  +3.7041e-01  1.27e-02  5.20e-06  9.20e-04  1.19e-06  1.98e-05  8.47e-01  
 16  +3.5445e-01  +3.5755e-01  3.10e-03  1.25e-06  2.22e-04  3.13e-07  4.91e-06  9.14e-01  
 17  +3.5337e-01  +3.5343e-01  6.01e-05  2.42e-08  4.29e-06  6.06e-09  9.61e-08  9.81e-01  
 18  +3.5335e-01  +3.5335e-01  6.02e-07  2.42e-10  4.30e-08  6.06e-11  9.61e-10  9.90e-01  
 19  +3.5335e-01  +3.5335e-01  6.02e-09  2.42e-12  4.30e-10  6.08e-13  9.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 140.2035ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:40 PM: Optimal value: 3.534e-01
(CVXPY) Oct 06 04:27:40 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:27:40 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 18, Objective: 0.3534
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:40 PM: Your problem has 2701 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:40 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2701
  constraints   = 5201
  nnz(P)        = 0
  nnz(A)        = 43184
  cones (total) = 1
    : Nonnegative = 1,  numel = 5201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.74e+01  1.00e+00  1.00e+00   ------   
  1  +5.7440e-01  +5.5067e+02  5.50e+02  4.45e-01  5.69e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2663e-01  +5.8346e+01  5.78e+01  1.66e-01  2.71e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0774e-01  +1.4921e+01  1.44e+01  9.95e-02  1.65e+01  5.53e-05  2.33e-01  4.83e-01  
  4  +5.0087e-01  +1.8801e+00  1.38e+00  1.38e-02  2.38e+00  1.02e-05  1.18e-01  7.30e-01  
  5  +5.0022e-01  +1.3654e+00  8.65e-01  7.70e-03  1.35e+00  1.96e-05  3.57e-02  7.86e-01  
  6  +4.9592e-01  +1.3238e+00  8.28e-01  1.24e-03  2.28e-01  1.73e-04  3.14e-03  9.25e-01  
  7  +4.9349e-01  +1.2718e+00  7.78e-01  8.73e-04  1.60e-01  1.96e-04  2.19e-03  3.93e-01  
  8  +4.9012e-01  +1.1967e+00  7.07e-01  5.88e-04  1.08e-01  1.91e-04  1.47e-03  5.21e-01  
  9  +4.7878e-01  +1.0465e+00  5.68e-01  3.18e-04  5.80e-02  1.60e-04  8.06e-04  7.19e-01  
 10  +4.5405e-01  +8.5505e-01  4.01e-01  1.97e-04  3.55e-02  6.60e-05  5.27e-04  6.61e-01  
 11  +4.4292e-01  +7.9381e-01  3.51e-01  1.64e-04  2.96e-02  5.55e-05  4.53e-04  1.84e-01  
 12  +4.2359e-01  +6.8980e-01  2.66e-01  1.30e-04  2.33e-02  2.16e-05  3.90e-04  8.46e-01  
 13  +3.9817e-01  +5.6167e-01  1.64e-01  7.35e-05  1.31e-02  1.28e-05  2.35e-04  4.50e-01  
 14  +3.7207e-01  +4.3974e-01  6.77e-02  2.87e-05  5.07e-03  5.38e-06  1.00e-04  6.96e-01  
 15  +3.6622e-01  +4.1401e-01  4.78e-02  1.99e-05  3.53e-03  4.07e-06  7.19e-05  4.06e-01  
 16  +3.5492e-01  +3.6566e-01  1.07e-02  4.40e-06  7.79e-04  9.41e-07  1.69e-05  8.17e-01  
 17  +3.5225e-01  +3.5475e-01  2.50e-03  1.01e-06  1.80e-04  2.49e-07  4.00e-06  9.46e-01  
 18  +3.5137e-01  +3.5144e-01  6.68e-05  2.70e-08  4.79e-06  6.70e-09  1.07e-07  9.76e-01  
 19  +3.5135e-01  +3.5135e-01  6.69e-07  2.70e-10  4.79e-08  6.71e-11  1.08e-09  9.90e-01  
 20  +3.5135e-01  +3.5135e-01  6.69e-09  2.71e-12  4.80e-10  6.73e-13  1.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 140.1023ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:40 PM: Optimal value: 3.514e-01
(CVXPY) Oct 06 04:27:40 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:27:40 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 19, Objective: 0.3514
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:40 PM: Your problem has 2711 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:40 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2711
  constraints   = 5211
  nnz(P)        = 0
  nnz(A)        = 43370
  cones (total) = 1
    : Nonnegative = 1,  numel = 5211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.74e+01  1.00e+00  1.00e+00   ------   
  1  +5.7429e-01  +5.5065e+02  5.50e+02  4.45e-01  5.68e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2656e-01  +5.8379e+01  5.79e+01  1.66e-01  2.70e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0778e-01  +1.4864e+01  1.44e+01  9.90e-02  1.64e+01  5.56e-05  2.31e-01  4.92e-01  
  4  +5.0088e-01  +1.9439e+00  1.44e+00  1.45e-02  2.49e+00  1.06e-05  1.21e-01  7.09e-01  
  5  +5.0019e-01  +1.3348e+00  8.35e-01  7.58e-03  1.33e+00  1.82e-05  3.72e-02  7.77e-01  
  6  +4.9543e-01  +1.3183e+00  8.23e-01  1.23e-03  2.25e-01  1.74e-04  3.12e-03  9.32e-01  
  7  +4.9308e-01  +1.2718e+00  7.79e-01  8.82e-04  1.61e-01  1.96e-04  2.21e-03  3.81e-01  
  8  +4.9024e-01  +1.1922e+00  7.02e-01  5.96e-04  1.09e-01  1.73e-04  1.49e-03  5.78e-01  
  9  +4.7784e-01  +1.0506e+00  5.73e-01  3.13e-04  5.70e-02  1.70e-04  7.92e-04  6.81e-01  
 10  +4.5122e-01  +8.4634e-01  3.95e-01  1.90e-04  3.43e-02  6.62e-05  5.12e-04  6.59e-01  
 11  +4.1487e-01  +6.5332e-01  2.38e-01  1.11e-04  1.97e-02  1.20e-05  3.33e-04  9.90e-01  
 12  +3.9655e-01  +5.6096e-01  1.64e-01  7.36e-05  1.30e-02  8.33e-06  2.35e-04  3.31e-01  
 13  +3.7002e-01  +4.3426e-01  6.42e-02  2.72e-05  4.80e-03  5.44e-06  9.60e-05  8.47e-01  
 14  +3.6208e-01  +3.9930e-01  3.72e-02  1.55e-05  2.74e-03  3.58e-06  5.70e-05  6.50e-01  
 15  +3.5350e-01  +3.6331e-01  9.80e-03  4.03e-06  7.13e-04  9.54e-07  1.57e-05  7.65e-01  
 16  +3.5097e-01  +3.5297e-01  2.01e-03  8.18e-07  1.45e-04  2.03e-07  3.25e-06  9.46e-01  
 17  +3.5027e-01  +3.5031e-01  4.78e-05  1.95e-08  3.45e-06  4.84e-09  7.80e-08  9.77e-01  
 18  +3.5025e-01  +3.5025e-01  4.79e-07  1.95e-10  3.46e-08  4.84e-11  7.81e-10  9.90e-01  
 19  +3.5025e-01  +3.5025e-01  4.79e-09  1.95e-12  3.46e-10  4.85e-13  7.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138.8492ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:40 PM: Optimal value: 3.503e-01
(CVXPY) Oct 06 04:27:40 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:40 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 20, Objective: 0.3503
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:41 PM: Your problem has 2721 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:41 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2721
  constraints   = 5221
  nnz(P)        = 0
  nnz(A)        = 43490
  cones (total) = 1
    : Nonnegative = 1,  numel = 5221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.73e+01  1.00e+00  1.00e+00   ------   
  1  +5.7403e-01  +5.5075e+02  5.50e+02  4.46e-01  5.67e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2647e-01  +5.8495e+01  5.80e+01  1.66e-01  2.69e+01  1.86e-02  2.79e-01  9.90e-01  
  3  +5.0784e-01  +1.4747e+01  1.42e+01  9.81e-02  1.63e+01  5.61e-05  2.27e-01  5.09e-01  
  4  +5.0084e-01  +1.9291e+00  1.43e+00  1.44e-02  2.47e+00  1.10e-05  1.21e-01  7.08e-01  
  5  +5.0011e-01  +1.3132e+00  8.13e-01  7.31e-03  1.28e+00  1.89e-05  3.45e-02  7.97e-01  
  6  +4.9549e-01  +1.2953e+00  8.00e-01  1.33e-03  2.43e-01  1.57e-04  3.39e-03  9.16e-01  
  7  +4.9346e-01  +1.2517e+00  7.58e-01  9.33e-04  1.70e-01  1.73e-04  2.35e-03  4.45e-01  
  8  +4.9209e-01  +1.1400e+00  6.48e-01  5.72e-04  1.04e-01  8.28e-05  1.42e-03  9.75e-01  
  9  +4.8185e-01  +1.0625e+00  5.81e-01  3.27e-04  5.95e-02  1.08e-04  8.20e-04  5.01e-01  
 10  +4.5679e-01  +8.8431e-01  4.28e-01  2.03e-04  3.67e-02  6.63e-05  5.38e-04  5.75e-01  
 11  +4.2436e-01  +7.0381e-01  2.79e-01  1.43e-04  2.54e-02  1.28e-05  4.29e-04  9.90e-01  
 12  +3.9086e-01  +5.3427e-01  1.43e-01  6.47e-05  1.14e-02  6.72e-06  2.13e-04  5.52e-01  
 13  +3.6903e-01  +4.3390e-01  6.49e-02  2.78e-05  4.89e-03  5.18e-06  9.98e-05  8.02e-01  
 14  +3.6139e-01  +4.0036e-01  3.90e-02  1.64e-05  2.89e-03  3.49e-06  6.15e-05  5.94e-01  
 15  +3.5245e-01  +3.6222e-01  9.77e-03  4.07e-06  7.13e-04  9.17e-07  1.62e-05  8.22e-01  
 16  +3.5008e-01  +3.5239e-01  2.31e-03  9.54e-07  1.67e-04  2.28e-07  3.90e-06  9.90e-01  
 17  +3.4929e-01  +3.4940e-01  1.11e-04  4.60e-08  8.06e-06  1.10e-08  1.89e-07  9.56e-01  
 18  +3.4925e-01  +3.4925e-01  1.12e-06  4.60e-10  8.07e-08  1.10e-10  1.90e-09  9.90e-01  
 19  +3.4925e-01  +3.4925e-01  1.12e-08  4.61e-12  8.08e-10  1.10e-12  1.90e-11  9.90e-01  
 20  +3.4925e-01  +3.4925e-01  1.12e-10  4.62e-14  8.09e-12  1.10e-14  1.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.9274ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:41 PM: Optimal value: 3.493e-01
(CVXPY) Oct 06 04:27:41 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:41 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 21, Objective: 0.3493
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:41 PM: Your problem has 2731 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:41 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2731
  constraints   = 5231
  nnz(P)        = 0
  nnz(A)        = 43606
  cones (total) = 1
    : Nonnegative = 1,  numel = 5231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.7372e-01  +5.5093e+02  5.50e+02  4.46e-01  5.66e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2633e-01  +5.8633e+01  5.81e+01  1.66e-01  2.69e+01  1.86e-02  2.79e-01  9.90e-01  
  3  +5.0790e-01  +1.4540e+01  1.40e+01  9.65e-02  1.61e+01  5.66e-05  2.22e-01  5.33e-01  
  4  +5.0068e-01  +1.7476e+00  1.25e+00  1.27e-02  2.17e+00  1.08e-05  1.14e-01  7.56e-01  
  5  +5.0013e-01  +1.5167e+00  1.02e+00  8.77e-03  1.54e+00  2.29e-05  3.61e-02  7.72e-01  
  6  +4.9669e-01  +1.4252e+00  9.29e-01  2.03e-03  3.71e-01  1.16e-04  5.25e-03  8.64e-01  
  7  +4.9786e-01  +1.3653e+00  8.67e-01  1.86e-03  3.40e-01  7.71e-05  4.74e-03  4.17e-01  
  8  +4.8805e-01  +1.1753e+00  6.87e-01  4.66e-04  8.52e-02  2.05e-04  1.15e-03  8.36e-01  
  9  +4.7998e-01  +1.1252e+00  6.45e-01  3.15e-04  5.75e-02  2.18e-04  7.82e-04  4.83e-01  
 10  +4.6092e-01  +9.6033e-01  4.99e-01  2.45e-04  4.42e-02  1.08e-04  6.40e-04  4.06e-01  
 11  +4.1232e-01  +6.4157e-01  2.29e-01  1.04e-04  1.85e-02  4.16e-06  3.13e-04  9.20e-01  
 12  +3.9371e-01  +5.5315e-01  1.59e-01  7.11e-05  1.25e-02  3.95e-06  2.28e-04  3.27e-01  
 13  +3.7169e-01  +4.5316e-01  8.15e-02  3.51e-05  6.18e-03  6.60e-06  1.24e-04  8.11e-01  
 14  +3.6586e-01  +4.2711e-01  6.13e-02  2.62e-05  4.60e-03  5.12e-06  9.52e-05  3.06e-01  
 15  +3.5336e-01  +3.7177e-01  1.84e-02  7.75e-06  1.36e-03  1.67e-06  3.04e-05  8.02e-01  
 16  +3.5095e-01  +3.6164e-01  1.07e-02  4.48e-06  7.85e-04  9.76e-07  1.80e-05  4.46e-01  
 17  +3.4781e-01  +3.4852e-01  7.15e-04  2.97e-07  5.21e-05  6.83e-08  1.23e-06  9.90e-01  
 18  +3.4755e-01  +3.4756e-01  8.32e-06  3.46e-09  6.06e-07  7.94e-10  1.44e-08  9.88e-01  
 19  +3.4755e-01  +3.4755e-01  8.33e-08  3.46e-11  6.07e-09  7.95e-12  1.44e-10  9.90e-01  
 20  +3.4755e-01  +3.4755e-01  8.35e-10  3.47e-13  6.09e-11  8.00e-14  1.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.1617ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:41 PM: Optimal value: 3.476e-01
(CVXPY) Oct 06 04:27:41 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:27:41 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 22, Objective: 0.3476
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:41 PM: Your problem has 2741 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:42 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:42 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2741
  constraints   = 5241
  nnz(P)        = 0
  nnz(A)        = 43764
  cones (total) = 1
    : Nonnegative = 1,  numel = 5241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.7356e-01  +5.5084e+02  5.50e+02  4.46e-01  5.65e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2625e-01  +5.8717e+01  5.82e+01  1.66e-01  2.68e+01  1.86e-02  2.79e-01  9.90e-01  
  3  +5.0793e-01  +1.4368e+01  1.39e+01  9.51e-02  1.59e+01  5.69e-05  2.17e-01  5.50e-01  
  4  +5.0067e-01  +1.8100e+00  1.31e+00  1.33e-02  2.28e+00  1.15e-05  1.18e-01  7.28e-01  
  5  +5.0004e-01  +1.4744e+00  9.74e-01  8.52e-03  1.50e+00  2.21e-05  3.62e-02  7.78e-01  
  6  +4.9687e-01  +1.4168e+00  9.20e-01  2.36e-03  4.29e-01  1.01e-04  6.18e-03  8.39e-01  
  7  +4.9705e-01  +1.3350e+00  8.38e-01  1.70e-03  3.11e-01  7.82e-05  4.34e-03  6.43e-01  
  8  +4.8322e-01  +1.1015e+00  6.18e-01  3.33e-04  6.09e-02  2.31e-04  8.20e-04  9.59e-01  
  9  +4.7002e-01  +9.8878e-01  5.19e-01  2.83e-04  5.12e-02  1.40e-04  7.23e-04  3.15e-01  
 10  +4.4610e-01  +8.4900e-01  4.03e-01  1.90e-04  3.41e-02  9.21e-05  5.14e-04  4.36e-01  
 11  +4.3706e-01  +7.9696e-01  3.60e-01  1.79e-04  3.19e-02  6.46e-05  5.00e-04  2.19e-01  
 12  +3.9426e-01  +5.6511e-01  1.71e-01  7.66e-05  1.35e-02  2.17e-05  2.43e-04  5.90e-01  
 13  +3.8307e-01  +5.1470e-01  1.32e-01  5.82e-05  1.03e-02  1.61e-05  1.94e-04  3.52e-01  
 14  +3.6347e-01  +4.2471e-01  6.12e-02  2.66e-05  4.67e-03  6.97e-06  9.72e-05  5.46e-01  
 15  +3.5483e-01  +3.8590e-01  3.11e-02  1.33e-05  2.33e-03  3.45e-06  5.10e-05  7.09e-01  
 16  +3.4930e-01  +3.6214e-01  1.28e-02  5.45e-06  9.56e-04  1.42e-06  2.17e-05  6.48e-01  
 17  +3.4678e-01  +3.5151e-01  4.72e-03  1.99e-06  3.49e-04  4.98e-07  8.08e-06  8.04e-01  
 18  +3.4553e-01  +3.4645e-01  9.17e-04  3.85e-07  6.77e-05  8.82e-08  1.59e-06  9.90e-01  
 19  +3.4521e-01  +3.4522e-01  1.40e-05  5.89e-09  1.04e-06  1.35e-09  2.44e-08  9.85e-01  
 20  +3.4520e-01  +3.4520e-01  1.41e-07  5.90e-11  1.04e-08  1.35e-11  2.44e-10  9.90e-01  
 21  +3.4520e-01  +3.4520e-01  1.41e-09  5.92e-13  1.04e-10  1.36e-13  2.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 158.5861ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:42 PM: Optimal value: 3.452e-01
(CVXPY) Oct 06 04:27:42 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:42 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 23, Objective: 0.3452
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:42 PM: Your problem has 2751 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:42 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2751
  constraints   = 5251
  nnz(P)        = 0
  nnz(A)        = 43938
  cones (total) = 1
    : Nonnegative = 1,  numel = 5251

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.7313e-01  +5.5097e+02  5.50e+02  4.47e-01  5.64e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2607e-01  +5.8913e+01  5.84e+01  1.66e-01  2.68e+01  1.87e-02  2.79e-01  9.90e-01  
  3  +5.0801e-01  +1.4039e+01  1.35e+01  9.25e-02  1.56e+01  5.76e-05  2.10e-01  5.81e-01  
  4  +5.0058e-01  +1.8048e+00  1.30e+00  1.33e-02  2.28e+00  1.24e-05  1.20e-01  7.10e-01  
  5  +4.9987e-01  +1.4873e+00  9.87e-01  8.55e-03  1.50e+00  2.38e-05  3.57e-02  7.87e-01  
  6  +4.9803e-01  +1.4563e+00  9.58e-01  3.95e-03  7.13e-01  6.41e-05  1.11e-02  6.98e-01  
  7  +4.9830e-01  +1.3633e+00  8.65e-01  2.42e-03  4.40e-01  4.83e-05  6.29e-03  9.03e-01  
  8  +4.8732e-01  +1.2287e+00  7.41e-01  4.93e-04  9.01e-02  1.97e-04  1.21e-03  8.10e-01  
  9  +4.7646e-01  +1.1359e+00  6.59e-01  3.33e-04  6.07e-02  1.85e-04  8.28e-04  4.94e-01  
 10  +4.4337e-01  +8.6457e-01  4.21e-01  2.00e-04  3.59e-02  7.13e-05  5.42e-04  5.32e-01  
 11  +4.1572e-01  +7.0601e-01  2.90e-01  1.48e-04  2.61e-02  1.98e-05  4.49e-04  8.59e-01  
 12  +3.8281e-01  +5.3083e-01  1.48e-01  6.82e-05  1.20e-02  9.44e-06  2.29e-04  5.45e-01  
 13  +3.6385e-01  +4.3795e-01  7.41e-02  3.29e-05  5.77e-03  5.94e-06  1.20e-04  7.14e-01  
 14  +3.5924e-01  +4.1647e-01  5.72e-02  2.52e-05  4.41e-03  4.76e-06  9.41e-05  3.12e-01  
 15  +3.4791e-01  +3.6464e-01  1.67e-02  7.25e-06  1.27e-03  1.46e-06  2.91e-05  7.85e-01  
 16  +3.4599e-01  +3.5628e-01  1.03e-02  4.43e-06  7.77e-04  9.12e-07  1.80e-05  4.65e-01  
 17  +3.4374e-01  +3.4671e-01  2.97e-03  1.27e-06  2.23e-04  2.66e-07  5.29e-06  7.55e-01  
 18  +3.4289e-01  +3.4313e-01  2.45e-04  1.05e-07  1.84e-05  2.24e-08  4.40e-07  9.90e-01  
 19  +3.4280e-01  +3.4280e-01  2.52e-06  1.07e-09  1.89e-07  2.30e-10  4.52e-09  9.90e-01  
 20  +3.4280e-01  +3.4280e-01  2.52e-08  1.07e-11  1.89e-09  2.30e-12  4.52e-11  9.90e-01  
 21  +3.4280e-01  +3.4280e-01  2.53e-10  1.08e-13  1.89e-11  2.31e-14  4.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.0518ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:42 PM: Optimal value: 3.428e-01
(CVXPY) Oct 06 04:27:42 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:42 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 24, Objective: 0.3428
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:42 PM: Your problem has 2761 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:42 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2761
  constraints   = 5261
  nnz(P)        = 0
  nnz(A)        = 44052
  cones (total) = 1
    : Nonnegative = 1,  numel = 5261

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.7290e-01  +5.5102e+02  5.50e+02  4.47e-01  5.63e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2595e-01  +5.8985e+01  5.85e+01  1.66e-01  2.67e+01  1.87e-02  2.79e-01  9.90e-01  
  3  +5.0805e-01  +1.3843e+01  1.33e+01  9.10e-02  1.53e+01  5.80e-05  2.05e-01  5.97e-01  
  4  +5.0063e-01  +1.9686e+00  1.47e+00  1.50e-02  2.55e+00  1.35e-05  1.28e-01  6.43e-01  
  5  +4.9992e-01  +1.4154e+00  9.15e-01  8.41e-03  1.47e+00  1.96e-05  4.08e-02  7.42e-01  
  6  +4.9537e-01  +1.3863e+00  8.91e-01  2.12e-03  3.85e-01  1.16e-04  5.54e-03  8.81e-01  
  7  +4.9400e-01  +1.3268e+00  8.33e-01  1.33e-03  2.43e-01  1.17e-04  3.37e-03  6.80e-01  
  8  +4.8714e-01  +1.2229e+00  7.36e-01  6.12e-04  1.11e-01  1.59e-04  1.52e-03  7.83e-01  
  9  +4.6687e-01  +1.0236e+00  5.57e-01  2.81e-04  5.10e-02  1.30e-04  7.17e-04  8.58e-01  
 10  +4.2824e-01  +7.6908e-01  3.41e-01  1.68e-04  2.99e-02  3.26e-05  4.77e-04  6.51e-01  
 11  +3.9004e-01  +5.6332e-01  1.73e-01  8.03e-05  1.41e-02  1.32e-05  2.59e-04  5.19e-01  
 12  +3.8066e-01  +5.1937e-01  1.39e-01  6.35e-05  1.11e-02  1.07e-05  2.14e-04  2.27e-01  
 13  +3.6247e-01  +4.3431e-01  7.18e-02  3.21e-05  5.61e-03  5.66e-06  1.18e-04  5.49e-01  
 14  +3.5780e-01  +4.1309e-01  5.53e-02  2.45e-05  4.28e-03  4.49e-06  9.25e-05  2.97e-01  
 15  +3.4554e-01  +3.5781e-01  1.23e-02  5.34e-06  9.32e-04  1.06e-06  2.19e-05  8.68e-01  
 16  +3.4287e-01  +3.4623e-01  3.36e-03  1.45e-06  2.53e-04  3.06e-07  6.13e-06  9.81e-01  
 17  +3.4179e-01  +3.4191e-01  1.19e-04  5.12e-08  8.94e-06  1.08e-08  2.19e-07  9.65e-01  
 18  +3.4175e-01  +3.4175e-01  1.19e-06  5.13e-10  8.96e-08  1.08e-10  2.20e-09  9.90e-01  
 19  +3.4175e-01  +3.4175e-01  1.19e-08  5.14e-12  8.97e-10  1.09e-12  2.21e-11  9.90e-01  
 20  +3.4175e-01  +3.4175e-01  1.20e-10  5.18e-14  9.04e-12  1.09e-14  2.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.6144ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:43 PM: Optimal value: 3.418e-01
(CVXPY) Oct 06 04:27:43 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:43 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 25, Objective: 0.3418
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:43 PM: Your problem has 2771 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:43 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2771
  constraints   = 5271
  nnz(P)        = 0
  nnz(A)        = 44230
  cones (total) = 1
    : Nonnegative = 1,  numel = 5271

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.7274e-01  +5.5106e+02  5.50e+02  4.47e-01  5.62e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2586e-01  +5.9065e+01  5.85e+01  1.66e-01  2.67e+01  1.87e-02  2.78e-01  9.90e-01  
  3  +5.0809e-01  +1.3673e+01  1.32e+01  8.96e-02  1.51e+01  5.83e-05  2.01e-01  6.11e-01  
  4  +5.0058e-01  +1.9591e+00  1.46e+00  1.49e-02  2.53e+00  1.40e-05  1.29e-01  6.31e-01  
  5  +4.9985e-01  +1.4089e+00  9.09e-01  8.30e-03  1.45e+00  2.05e-05  3.97e-02  7.55e-01  
  6  +4.9671e-01  +1.3840e+00  8.87e-01  2.93e-03  5.30e-01  8.41e-05  7.96e-03  8.12e-01  
  7  +4.9451e-01  +1.3208e+00  8.26e-01  1.51e-03  2.75e-01  1.05e-04  3.87e-03  8.04e-01  
  8  +4.8836e-01  +1.2325e+00  7.44e-01  6.92e-04  1.26e-01  1.49e-04  1.73e-03  7.97e-01  
  9  +4.6998e-01  +1.0504e+00  5.80e-01  3.01e-04  5.46e-02  1.38e-04  7.62e-04  9.06e-01  
 10  +4.3133e-01  +7.9128e-01  3.60e-01  1.72e-04  3.07e-02  4.58e-05  4.80e-04  6.22e-01  
 11  +3.9123e-01  +5.7193e-01  1.81e-01  8.35e-05  1.47e-02  1.67e-05  2.66e-04  5.18e-01  
 12  +3.8077e-01  +5.2286e-01  1.42e-01  6.49e-05  1.14e-02  1.30e-05  2.16e-04  2.33e-01  
 13  +3.6238e-01  +4.3710e-01  7.47e-02  3.34e-05  5.83e-03  6.80e-06  1.22e-04  5.56e-01  
 14  +3.5789e-01  +4.1664e-01  5.87e-02  2.60e-05  4.54e-03  5.42e-06  9.74e-05  2.78e-01  
 15  +3.4493e-01  +3.5796e-01  1.30e-02  5.66e-06  9.87e-04  1.25e-06  2.32e-05  9.13e-01  
 16  +3.4299e-01  +3.4969e-01  6.69e-03  2.90e-06  5.05e-04  6.36e-07  1.21e-05  6.30e-01  
 17  +3.4097e-01  +3.4134e-01  3.73e-04  1.61e-07  2.80e-05  3.48e-08  6.87e-07  9.50e-01  
 18  +3.4085e-01  +3.4086e-01  3.77e-06  1.63e-09  2.84e-07  3.52e-10  6.97e-09  9.90e-01  
 19  +3.4085e-01  +3.4085e-01  3.79e-08  1.63e-11  2.84e-09  3.53e-12  6.99e-11  9.90e-01  
 20  +3.4085e-01  +3.4085e-01  3.83e-10  1.65e-13  2.87e-11  3.58e-14  7.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.7893ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:43 PM: Optimal value: 3.409e-01
(CVXPY) Oct 06 04:27:43 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:27:43 PM: Solver (including time spent in interface) took 1.724e-01 seconds
Iteration: 26, Objective: 0.3409
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:43 PM: Your problem has 2781 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:43 PM: Finished problem compilation (took 3.127e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2781
  constraints   = 5281
  nnz(P)        = 0
  nnz(A)        = 44378
  cones (total) = 1
    : Nonnegative = 1,  numel = 5281

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.68e+01  1.00e+00  1.00e+00   ------   
  1  +5.7255e-01  +5.5091e+02  5.50e+02  4.47e-01  5.61e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2578e-01  +5.9106e+01  5.86e+01  1.66e-01  2.66e+01  1.87e-02  2.78e-01  9.90e-01  
  3  +5.0811e-01  +1.3520e+01  1.30e+01  8.83e-02  1.49e+01  5.85e-05  1.98e-01  6.23e-01  
  4  +5.0064e-01  +2.1053e+00  1.60e+00  1.63e-02  2.77e+00  1.51e-05  1.35e-01  5.77e-01  
  5  +4.9983e-01  +1.3452e+00  8.45e-01  7.80e-03  1.36e+00  1.92e-05  3.90e-02  7.61e-01  
  6  +4.9564e-01  +1.3435e+00  8.48e-01  2.33e-03  4.21e-01  1.04e-04  6.19e-03  8.55e-01  
  7  +4.9222e-01  +1.3062e+00  8.14e-01  1.34e-03  2.43e-01  1.48e-04  3.42e-03  5.78e-01  
  8  +4.8243e-01  +1.2194e+00  7.37e-01  6.50e-04  1.18e-01  2.38e-04  1.65e-03  5.68e-01  
  9  +4.6102e-01  +1.0397e+00  5.79e-01  3.22e-04  5.81e-02  2.55e-04  8.35e-04  5.78e-01  
 10  +4.2450e-01  +7.7443e-01  3.50e-01  1.76e-04  3.13e-02  1.84e-05  5.06e-04  8.32e-01  
 11  +3.8334e-01  +5.4561e-01  1.62e-01  7.58e-05  1.33e-02  8.06e-06  2.50e-04  5.91e-01  
 12  +3.7629e-01  +5.1242e-01  1.36e-01  6.29e-05  1.10e-02  7.35e-06  2.14e-04  2.15e-01  
 13  +3.5926e-01  +4.3134e-01  7.21e-02  3.26e-05  5.69e-03  4.32e-06  1.21e-04  5.27e-01  
 14  +3.5289e-01  +4.0165e-01  4.88e-02  2.18e-05  3.80e-03  3.28e-06  8.40e-05  4.31e-01  
 15  +3.4290e-01  +3.5617e-01  1.33e-02  5.86e-06  1.02e-03  9.39e-07  2.43e-05  7.64e-01  
 16  +3.4218e-01  +3.5289e-01  1.07e-02  4.71e-06  8.21e-04  7.80e-07  1.97e-05  2.69e-01  
 17  +3.3956e-01  +3.4139e-01  1.83e-03  7.99e-07  1.39e-04  1.63e-07  3.44e-06  9.90e-01  
 18  +3.3896e-01  +3.3901e-01  4.44e-05  1.94e-08  3.38e-06  3.93e-09  8.40e-08  9.77e-01  
 19  +3.3895e-01  +3.3895e-01  4.45e-07  1.94e-10  3.38e-08  3.93e-11  8.42e-10  9.90e-01  
 20  +3.3895e-01  +3.3895e-01  4.47e-09  1.95e-12  3.40e-10  3.96e-13  8.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.404ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:43 PM: Optimal value: 3.390e-01
(CVXPY) Oct 06 04:27:43 PM: Compilation took 3.127e-02 seconds
(CVXPY) Oct 06 04:27:43 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 27, Objective: 0.3390
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:44 PM: Your problem has 2791 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:44 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2791
  constraints   = 5291
  nnz(P)        = 0
  nnz(A)        = 44666
  cones (total) = 1
    : Nonnegative = 1,  numel = 5291

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.67e+01  1.00e+00  1.00e+00   ------   
  1  +5.7251e-01  +5.5092e+02  5.50e+02  4.47e-01  5.60e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2574e-01  +5.9125e+01  5.86e+01  1.66e-01  2.65e+01  1.88e-02  2.78e-01  9.90e-01  
  3  +5.0811e-01  +1.3446e+01  1.29e+01  8.77e-02  1.48e+01  5.87e-05  1.96e-01  6.28e-01  
  4  +5.0062e-01  +2.1133e+00  1.61e+00  1.64e-02  2.78e+00  1.54e-05  1.35e-01  5.69e-01  
  5  +4.9981e-01  +1.3358e+00  8.36e-01  7.70e-03  1.34e+00  1.94e-05  3.83e-02  7.65e-01  
  6  +4.9559e-01  +1.3333e+00  8.38e-01  2.32e-03  4.19e-01  1.04e-04  6.16e-03  8.52e-01  
  7  +4.9200e-01  +1.2984e+00  8.06e-01  1.33e-03  2.41e-01  1.51e-04  3.40e-03  5.65e-01  
  8  +4.8186e-01  +1.2116e+00  7.30e-01  6.43e-04  1.17e-01  2.45e-04  1.63e-03  5.66e-01  
  9  +4.6403e-01  +1.0663e+00  6.02e-01  3.59e-04  6.48e-02  2.61e-04  9.30e-04  4.99e-01  
 10  +4.2349e-01  +7.6713e-01  3.44e-01  1.66e-04  2.95e-02  3.44e-05  4.71e-04  8.70e-01  
 11  +3.8443e-01  +5.5322e-01  1.69e-01  7.87e-05  1.38e-02  1.32e-05  2.57e-04  5.42e-01  
 12  +3.7771e-01  +5.2140e-01  1.44e-01  6.64e-05  1.16e-02  1.15e-05  2.23e-04  1.94e-01  
 13  +3.6002e-01  +4.3667e-01  7.66e-02  3.47e-05  6.05e-03  6.36e-06  1.27e-04  5.59e-01  
 14  +3.5495e-01  +4.1284e-01  5.79e-02  2.60e-05  4.52e-03  4.95e-06  9.81e-05  3.29e-01  
 15  +3.4394e-01  +3.6195e-01  1.80e-02  7.98e-06  1.39e-03  1.57e-06  3.25e-05  7.54e-01  
 16  +3.4257e-01  +3.5578e-01  1.32e-02  5.83e-06  1.01e-03  1.16e-06  2.40e-05  3.32e-01  
 17  +3.4002e-01  +3.4412e-01  4.11e-03  1.80e-06  3.14e-04  3.78e-07  7.62e-06  9.90e-01  
 18  +3.3873e-01  +3.3897e-01  2.44e-04  1.07e-07  1.86e-05  2.22e-08  4.58e-07  9.48e-01  
 19  +3.3865e-01  +3.3865e-01  2.45e-06  1.07e-09  1.87e-07  2.23e-10  4.60e-09  9.90e-01  
 20  +3.3865e-01  +3.3865e-01  2.45e-08  1.07e-11  1.87e-09  2.23e-12  4.61e-11  9.90e-01  
 21  +3.3865e-01  +3.3865e-01  2.47e-10  1.08e-13  1.88e-11  2.25e-14  4.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 164.0456ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:44 PM: Optimal value: 3.387e-01
(CVXPY) Oct 06 04:27:44 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:44 PM: Solver (including time spent in interface) took 1.721e-01 seconds
Iteration: 28, Objective: 0.3387
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:44 PM: Your problem has 2801 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:44 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2801
  constraints   = 5301
  nnz(P)        = 0
  nnz(A)        = 45000
  cones (total) = 1
    : Nonnegative = 1,  numel = 5301

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.67e+01  1.00e+00  1.00e+00   ------   
  1  +5.7243e-01  +5.5089e+02  5.50e+02  4.47e-01  5.59e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2572e-01  +5.9161e+01  5.86e+01  1.66e-01  2.64e+01  1.88e-02  2.78e-01  9.90e-01  
  3  +5.0812e-01  +1.3384e+01  1.29e+01  8.72e-02  1.47e+01  5.88e-05  1.95e-01  6.33e-01  
  4  +5.0059e-01  +2.0906e+00  1.59e+00  1.62e-02  2.74e+00  1.55e-05  1.34e-01  5.70e-01  
  5  +4.9977e-01  +1.3327e+00  8.33e-01  7.62e-03  1.33e+00  2.01e-05  3.73e-02  7.72e-01  
  6  +4.9573e-01  +1.3320e+00  8.36e-01  2.41e-03  4.36e-01  1.00e-04  6.47e-03  8.43e-01  
  7  +4.9216e-01  +1.2993e+00  8.07e-01  1.37e-03  2.49e-01  1.48e-04  3.52e-03  5.74e-01  
  8  +4.8190e-01  +1.2113e+00  7.29e-01  6.48e-04  1.18e-01  2.45e-04  1.64e-03  5.84e-01  
  9  +4.6344e-01  +1.0619e+00  5.98e-01  3.55e-04  6.41e-02  2.65e-04  9.20e-04  5.03e-01  
 10  +4.2122e-01  +7.5396e-01  3.33e-01  1.60e-04  2.83e-02  2.22e-05  4.55e-04  9.06e-01  
 11  +3.8347e-01  +5.4996e-01  1.66e-01  7.75e-05  1.36e-02  9.90e-06  2.53e-04  5.27e-01  
 12  +3.7595e-01  +5.1431e-01  1.38e-01  6.37e-05  1.11e-02  8.76e-06  2.15e-04  2.28e-01  
 13  +3.5847e-01  +4.3027e-01  7.18e-02  3.25e-05  5.66e-03  4.83e-06  1.19e-04  5.30e-01  
 14  +3.5345e-01  +4.0662e-01  5.32e-02  2.39e-05  4.15e-03  3.81e-06  9.03e-05  3.41e-01  
 15  +3.4299e-01  +3.5816e-01  1.52e-02  6.73e-06  1.17e-03  1.16e-06  2.73e-05  7.70e-01  
 16  +3.4203e-01  +3.5390e-01  1.19e-02  5.24e-06  9.10e-04  9.30e-07  2.14e-05  2.83e-01  
 17  +3.3943e-01  +3.4243e-01  3.00e-03  1.31e-06  2.27e-04  2.65e-07  5.49e-06  9.36e-01  
 18  +3.3848e-01  +3.3858e-01  9.47e-05  4.12e-08  7.16e-06  8.36e-09  1.75e-07  9.74e-01  
 19  +3.3845e-01  +3.3845e-01  9.48e-07  4.12e-10  7.16e-08  8.37e-11  1.75e-09  9.90e-01  
 20  +3.3845e-01  +3.3845e-01  9.49e-09  4.13e-12  7.17e-10  8.37e-13  1.76e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.6087ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:44 PM: Optimal value: 3.385e-01
(CVXPY) Oct 06 04:27:44 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:44 PM: Solver (including time spent in interface) took 1.663e-01 seconds
Iteration: 29, Objective: 0.3385
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:45 PM: Your problem has 2802 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:45 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2802
  constraints   = 5302
  nnz(P)        = 0
  nnz(A)        = 45022
  cones (total) = 1
    : Nonnegative = 1,  numel = 5302

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.67e+01  1.00e+00  1.00e+00   ------   
  1  +5.7240e-01  +5.5087e+02  5.50e+02  4.47e-01  5.59e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2572e-01  +5.9161e+01  5.86e+01  1.66e-01  2.64e+01  1.88e-02  2.78e-01  9.90e-01  
  3  +5.0812e-01  +1.3379e+01  1.29e+01  8.72e-02  1.47e+01  5.88e-05  1.94e-01  6.33e-01  
  4  +5.0060e-01  +2.1033e+00  1.60e+00  1.63e-02  2.76e+00  1.56e-05  1.35e-01  5.67e-01  
  5  +4.9977e-01  +1.3319e+00  8.32e-01  7.62e-03  1.33e+00  1.99e-05  3.74e-02  7.71e-01  
  6  +4.9549e-01  +1.3323e+00  8.37e-01  2.31e-03  4.17e-01  1.05e-04  6.15e-03  8.52e-01  
  7  +4.9168e-01  +1.2969e+00  8.05e-01  1.31e-03  2.37e-01  1.55e-04  3.35e-03  5.68e-01  
  8  +4.8071e-01  +1.2044e+00  7.24e-01  6.20e-04  1.12e-01  2.57e-04  1.57e-03  5.65e-01  
  9  +4.6255e-01  +1.0585e+00  5.96e-01  3.54e-04  6.38e-02  2.69e-04  9.19e-04  4.72e-01  
 10  +4.2001e-01  +7.4550e-01  3.25e-01  1.57e-04  2.78e-02  3.01e-06  4.49e-04  9.60e-01  
 11  +3.8275e-01  +5.4614e-01  1.63e-01  7.61e-05  1.33e-02  3.85e-06  2.49e-04  5.29e-01  
 12  +3.7360e-01  +5.0292e-01  1.29e-01  5.94e-05  1.04e-02  4.40e-06  2.03e-04  2.91e-01  
 13  +3.5725e-01  +4.2456e-01  6.73e-02  3.04e-05  5.29e-03  2.83e-06  1.13e-04  5.18e-01  
 14  +3.4738e-01  +3.7798e-01  3.06e-02  1.36e-05  2.37e-03  2.09e-06  5.35e-05  7.45e-01  
 15  +3.4165e-01  +3.5217e-01  1.05e-02  4.64e-06  8.06e-04  7.70e-07  1.90e-05  7.04e-01  
 16  +3.4028e-01  +3.4599e-01  5.71e-03  2.50e-06  4.35e-04  4.69e-07  1.05e-05  7.45e-01  
 17  +3.3905e-01  +3.4088e-01  1.83e-03  7.98e-07  1.39e-04  1.56e-07  3.37e-06  7.89e-01  
 18  +3.3846e-01  +3.3850e-01  3.66e-05  1.59e-08  2.77e-06  3.11e-09  6.77e-08  9.81e-01  
 19  +3.3845e-01  +3.3845e-01  3.67e-07  1.59e-10  2.77e-08  3.12e-11  6.79e-10  9.90e-01  
 20  +3.3845e-01  +3.3845e-01  3.72e-09  1.62e-12  2.81e-10  3.17e-13  6.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 154.6395ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:45 PM: Optimal value: 3.385e-01
(CVXPY) Oct 06 04:27:45 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:45 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 30, Objective: 0.3385
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:45 PM: Your problem has 2812 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:45 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2812
  constraints   = 5312
  nnz(P)        = 0
  nnz(A)        = 45126
  cones (total) = 1
    : Nonnegative = 1,  numel = 5312

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.66e+01  1.00e+00  1.00e+00   ------   
  1  +5.7234e-01  +5.5083e+02  5.50e+02  4.47e-01  5.58e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2565e-01  +5.9183e+01  5.87e+01  1.66e-01  2.63e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0814e-01  +1.3271e+01  1.28e+01  8.63e-02  1.45e+01  5.90e-05  1.92e-01  6.41e-01  
  4  +5.0063e-01  +2.1871e+00  1.69e+00  1.71e-02  2.90e+00  1.62e-05  1.38e-01  5.33e-01  
  5  +4.9980e-01  +1.3177e+00  8.18e-01  7.58e-03  1.32e+00  1.89e-05  3.88e-02  7.63e-01  
  6  +4.9346e-01  +1.3401e+00  8.47e-01  1.71e-03  3.11e-01  1.45e-04  4.45e-03  9.06e-01  
  7  +4.8721e-01  +1.2820e+00  7.95e-01  8.88e-04  1.61e-01  2.16e-04  2.24e-03  6.29e-01  
  8  +4.6424e-01  +1.0622e+00  5.98e-01  3.20e-04  5.79e-02  2.82e-04  8.16e-04  8.10e-01  
  9  +4.5188e-01  +9.7677e-01  5.25e-01  2.69e-04  4.83e-02  2.26e-04  7.06e-04  1.93e-01  
 10  +4.1718e-01  +7.4732e-01  3.30e-01  1.68e-04  2.98e-02  2.02e-06  4.97e-04  8.51e-01  
 11  +3.8325e-01  +5.5700e-01  1.74e-01  8.23e-05  1.44e-02  2.21e-06  2.71e-04  4.96e-01  
 12  +3.5843e-01  +4.3315e-01  7.47e-02  3.41e-05  5.95e-03  2.68e-06  1.25e-04  6.62e-01  
 13  +3.5434e-01  +4.1385e-01  5.95e-02  2.70e-05  4.70e-03  2.41e-06  1.01e-04  2.50e-01  
 14  +3.4524e-01  +3.7080e-01  2.56e-02  1.14e-05  1.99e-03  1.71e-06  4.53e-05  7.60e-01  
 15  +3.4180e-01  +3.5518e-01  1.34e-02  5.91e-06  1.03e-03  1.06e-06  2.40e-05  6.96e-01  
 16  +3.3923e-01  +3.4395e-01  4.72e-03  2.07e-06  3.60e-04  4.35e-07  8.64e-06  9.90e-01  
 17  +3.3773e-01  +3.3797e-01  2.38e-04  1.04e-07  1.81e-05  2.13e-08  4.41e-07  9.82e-01  
 18  +3.3765e-01  +3.3765e-01  2.40e-06  1.05e-09  1.82e-07  2.14e-10  4.45e-09  9.90e-01  
 19  +3.3765e-01  +3.3765e-01  2.40e-08  1.05e-11  1.82e-09  2.14e-12  4.45e-11  9.90e-01  
 20  +3.3765e-01  +3.3765e-01  2.47e-10  1.08e-13  1.88e-11  2.22e-14  4.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.4872ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:45 PM: Optimal value: 3.377e-01
(CVXPY) Oct 06 04:27:45 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:45 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 31, Objective: 0.3377
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:45 PM: Your problem has 2814 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:45 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2814
  constraints   = 5314
  nnz(P)        = 0
  nnz(A)        = 45158
  cones (total) = 1
    : Nonnegative = 1,  numel = 5314

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.66e+01  1.00e+00  1.00e+00   ------   
  1  +5.7234e-01  +5.5083e+02  5.50e+02  4.48e-01  5.58e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2565e-01  +5.9183e+01  5.87e+01  1.66e-01  2.63e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0814e-01  +1.3261e+01  1.28e+01  8.62e-02  1.45e+01  5.90e-05  1.92e-01  6.42e-01  
  4  +5.0063e-01  +2.1851e+00  1.68e+00  1.71e-02  2.89e+00  1.63e-05  1.38e-01  5.33e-01  
  5  +4.9980e-01  +1.3177e+00  8.18e-01  7.57e-03  1.31e+00  1.89e-05  3.87e-02  7.63e-01  
  6  +4.9344e-01  +1.3403e+00  8.47e-01  1.72e-03  3.11e-01  1.45e-04  4.45e-03  9.06e-01  
  7  +4.8712e-01  +1.2817e+00  7.95e-01  8.83e-04  1.60e-01  2.16e-04  2.23e-03  6.33e-01  
  8  +4.6441e-01  +1.0646e+00  6.00e-01  3.24e-04  5.85e-02  2.81e-04  8.25e-04  8.02e-01  
  9  +4.5198e-01  +9.7830e-01  5.26e-01  2.71e-04  4.86e-02  2.25e-04  7.11e-04  1.96e-01  
 10  +4.1731e-01  +7.4818e-01  3.31e-01  1.69e-04  2.98e-02  2.02e-06  4.98e-04  8.54e-01  
 11  +3.8331e-01  +5.5742e-01  1.74e-01  8.25e-05  1.44e-02  2.23e-06  2.71e-04  4.96e-01  
 12  +3.5848e-01  +4.3344e-01  7.50e-02  3.43e-05  5.97e-03  2.69e-06  1.26e-04  6.60e-01  
 13  +3.5433e-01  +4.1387e-01  5.95e-02  2.70e-05  4.70e-03  2.41e-06  1.01e-04  2.52e-01  
 14  +3.4522e-01  +3.7074e-01  2.55e-02  1.14e-05  1.98e-03  1.71e-06  4.53e-05  7.62e-01  
 15  +3.4182e-01  +3.5525e-01  1.34e-02  5.93e-06  1.03e-03  1.06e-06  2.41e-05  6.89e-01  
 16  +3.3922e-01  +3.4393e-01  4.71e-03  2.06e-06  3.59e-04  4.34e-07  8.62e-06  9.90e-01  
 17  +3.3773e-01  +3.3797e-01  2.37e-04  1.03e-07  1.80e-05  2.11e-08  4.40e-07  9.84e-01  
 18  +3.3765e-01  +3.3765e-01  2.39e-06  1.04e-09  1.81e-07  2.13e-10  4.44e-09  9.90e-01  
 19  +3.3765e-01  +3.3765e-01  2.39e-08  1.04e-11  1.81e-09  2.13e-12  4.44e-11  9.90e-01  
 20  +3.3765e-01  +3.3765e-01  2.46e-10  1.07e-13  1.87e-11  2.20e-14  4.59e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 154.7963ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:46 PM: Optimal value: 3.377e-01
(CVXPY) Oct 06 04:27:46 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:46 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 32, Objective: 0.3377
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:46 PM: Your problem has 2815 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:46 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2815
  constraints   = 5315
  nnz(P)        = 0
  nnz(A)        = 45172
  cones (total) = 1
    : Nonnegative = 1,  numel = 5315

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.66e+01  1.00e+00  1.00e+00   ------   
  1  +5.7236e-01  +5.5082e+02  5.50e+02  4.48e-01  5.58e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2565e-01  +5.9178e+01  5.87e+01  1.66e-01  2.63e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0814e-01  +1.3263e+01  1.28e+01  8.62e-02  1.45e+01  5.90e-05  1.92e-01  6.42e-01  
  4  +5.0063e-01  +2.1901e+00  1.69e+00  1.72e-02  2.90e+00  1.63e-05  1.38e-01  5.32e-01  
  5  +4.9980e-01  +1.3177e+00  8.18e-01  7.58e-03  1.31e+00  1.89e-05  3.88e-02  7.63e-01  
  6  +4.9328e-01  +1.3420e+00  8.49e-01  1.68e-03  3.04e-01  1.49e-04  4.35e-03  9.09e-01  
  7  +4.8627e-01  +1.2762e+00  7.90e-01  8.29e-04  1.50e-01  2.26e-04  2.09e-03  6.58e-01  
  8  +4.6581e-01  +1.0746e+00  6.09e-01  3.42e-04  6.18e-02  2.51e-04  8.72e-04  7.91e-01  
  9  +4.5313e-01  +9.8570e-01  5.33e-01  2.81e-04  5.04e-02  2.03e-04  7.38e-04  2.14e-01  
 10  +4.1878e-01  +7.5631e-01  3.38e-01  1.72e-04  3.05e-02  1.87e-06  5.06e-04  8.88e-01  
 11  +3.8327e-01  +5.5648e-01  1.73e-01  8.19e-05  1.43e-02  2.29e-06  2.69e-04  5.13e-01  
 12  +3.5869e-01  +4.3451e-01  7.58e-02  3.47e-05  6.04e-03  2.63e-06  1.27e-04  6.46e-01  
 13  +3.5428e-01  +4.1375e-01  5.95e-02  2.70e-05  4.69e-03  2.35e-06  1.01e-04  2.64e-01  
 14  +3.4510e-01  +3.7036e-01  2.53e-02  1.13e-05  1.96e-03  1.65e-06  4.49e-05  7.57e-01  
 15  +3.4166e-01  +3.5479e-01  1.31e-02  5.80e-06  1.01e-03  1.02e-06  2.36e-05  6.80e-01  
 16  +3.3909e-01  +3.4362e-01  4.53e-03  1.98e-06  3.44e-04  4.16e-07  8.30e-06  9.90e-01  
 17  +3.3802e-01  +3.3940e-01  1.38e-03  5.97e-07  1.04e-04  1.26e-07  2.55e-06  7.42e-01  
 18  +3.3757e-01  +3.3761e-01  4.55e-05  1.96e-08  3.41e-06  4.04e-09  8.45e-08  9.90e-01  
 19  +3.3755e-01  +3.3755e-01  4.57e-07  1.97e-10  3.42e-08  4.06e-11  8.48e-10  9.90e-01  
 20  +3.3755e-01  +3.3755e-01  4.57e-09  1.97e-12  3.42e-10  4.06e-13  8.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.1583ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:46 PM: Optimal value: 3.376e-01
(CVXPY) Oct 06 04:27:46 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:46 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 33, Objective: 0.3376
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:46 PM: Your problem has 2816 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:46 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2816
  constraints   = 5316
  nnz(P)        = 0
  nnz(A)        = 45192
  cones (total) = 1
    : Nonnegative = 1,  numel = 5316

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.66e+01  1.00e+00  1.00e+00   ------   
  1  +5.7227e-01  +5.5084e+02  5.50e+02  4.47e-01  5.58e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2562e-01  +5.9191e+01  5.87e+01  1.66e-01  2.63e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0815e-01  +1.3223e+01  1.27e+01  8.59e-02  1.45e+01  5.90e-05  1.91e-01  6.45e-01  
  4  +5.0067e-01  +2.2565e+00  1.76e+00  1.78e-02  3.01e+00  1.67e-05  1.40e-01  5.11e-01  
  5  +4.9983e-01  +1.3226e+00  8.23e-01  7.66e-03  1.33e+00  1.85e-05  3.99e-02  7.58e-01  
  6  +4.9043e-01  +1.3666e+00  8.76e-01  1.26e-03  2.29e-01  2.06e-04  3.21e-03  9.40e-01  
  7  +4.8154e-01  +1.2807e+00  7.99e-01  6.62e-04  1.20e-01  2.81e-04  1.67e-03  6.07e-01  
  8  +4.6340e-01  +1.0728e+00  6.09e-01  3.45e-04  6.22e-02  1.71e-04  8.88e-04  7.97e-01  
  9  +4.3692e-01  +8.7996e-01  4.43e-01  2.25e-04  4.01e-02  8.94e-05  6.17e-04  4.97e-01  
 10  +3.8243e-01  +5.4233e-01  1.60e-01  7.40e-05  1.30e-02  1.20e-05  2.40e-04  7.39e-01  
 11  +3.6321e-01  +4.5580e-01  9.26e-02  4.23e-05  7.38e-03  7.66e-06  1.51e-04  5.65e-01  
 12  +3.5487e-01  +4.1751e-01  6.26e-02  2.84e-05  4.94e-03  5.27e-06  1.06e-04  3.62e-01  
 13  +3.4328e-01  +3.6398e-01  2.07e-02  9.23e-06  1.60e-03  2.10e-06  3.72e-05  9.90e-01  
 14  +3.4114e-01  +3.5466e-01  1.35e-02  6.00e-06  1.04e-03  1.37e-06  2.47e-05  4.16e-01  
 15  +3.3876e-01  +3.4415e-01  5.40e-03  2.38e-06  4.13e-04  5.01e-07  1.00e-05  9.90e-01  
 16  +3.3747e-01  +3.3903e-01  1.56e-03  6.80e-07  1.18e-04  1.44e-07  2.93e-06  7.48e-01  
 17  +3.3697e-01  +3.3704e-01  6.47e-05  2.82e-08  4.89e-06  5.70e-09  1.22e-07  9.87e-01  
 18  +3.3695e-01  +3.3695e-01  6.51e-07  2.83e-10  4.92e-08  5.73e-11  1.23e-09  9.90e-01  
 19  +3.3695e-01  +3.3695e-01  6.52e-09  2.83e-12  4.92e-10  5.73e-13  1.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 159.9186ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:46 PM: Optimal value: 3.370e-01
(CVXPY) Oct 06 04:27:46 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:46 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 34, Objective: 0.3370
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:47 PM: Your problem has 2821 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:47 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2821
  constraints   = 5321
  nnz(P)        = 0
  nnz(A)        = 45257
  cones (total) = 1
    : Nonnegative = 1,  numel = 5321

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.65e+01  1.00e+00  1.00e+00   ------   
  1  +5.7225e-01  +5.5085e+02  5.50e+02  4.48e-01  5.58e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2561e-01  +5.9197e+01  5.87e+01  1.66e-01  2.63e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0815e-01  +1.3204e+01  1.27e+01  8.57e-02  1.44e+01  5.91e-05  1.91e-01  6.46e-01  
  4  +5.0067e-01  +2.2584e+00  1.76e+00  1.78e-02  3.01e+00  1.68e-05  1.40e-01  5.09e-01  
  5  +4.9982e-01  +1.3210e+00  8.21e-01  7.64e-03  1.32e+00  1.86e-05  3.97e-02  7.60e-01  
  6  +4.9027e-01  +1.3629e+00  8.73e-01  1.24e-03  2.26e-01  2.09e-04  3.16e-03  9.41e-01  
  7  +4.8152e-01  +1.2799e+00  7.98e-01  6.63e-04  1.20e-01  2.81e-04  1.67e-03  6.01e-01  
  8  +4.6251e-01  +1.0691e+00  6.07e-01  3.40e-04  6.12e-02  1.83e-04  8.76e-04  7.79e-01  
  9  +4.3561e-01  +8.7370e-01  4.38e-01  2.21e-04  3.95e-02  9.11e-05  6.10e-04  5.04e-01  
 10  +3.8216e-01  +5.4273e-01  1.61e-01  7.44e-05  1.30e-02  1.36e-05  2.42e-04  7.18e-01  
 11  +3.6283e-01  +4.5500e-01  9.22e-02  4.22e-05  7.34e-03  8.19e-06  1.51e-04  5.69e-01  
 12  +3.5483e-01  +4.1809e-01  6.33e-02  2.87e-05  4.99e-03  5.68e-06  1.08e-04  3.58e-01  
 13  +3.4337e-01  +3.6479e-01  2.14e-02  9.56e-06  1.66e-03  2.19e-06  3.87e-05  9.90e-01  
 14  +3.4098e-01  +3.5434e-01  1.34e-02  5.94e-06  1.03e-03  1.36e-06  2.45e-05  4.43e-01  
 15  +3.3871e-01  +3.4430e-01  5.58e-03  2.47e-06  4.28e-04  5.15e-07  1.04e-05  9.90e-01  
 16  +3.3738e-01  +3.3897e-01  1.59e-03  6.97e-07  1.21e-04  1.46e-07  3.01e-06  7.50e-01  
 17  +3.3687e-01  +3.3694e-01  6.97e-05  3.04e-08  5.28e-06  6.10e-09  1.33e-07  9.86e-01  
 18  +3.3685e-01  +3.3685e-01  7.01e-07  3.06e-10  5.31e-08  6.14e-11  1.34e-09  9.90e-01  
 19  +3.3685e-01  +3.3685e-01  7.02e-09  3.06e-12  5.31e-10  6.14e-13  1.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.7384ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:47 PM: Optimal value: 3.369e-01
(CVXPY) Oct 06 04:27:47 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:27:47 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 35, Objective: 0.3369
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:47 PM: Your problem has 2825 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:47 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2825
  constraints   = 5325
  nnz(P)        = 0
  nnz(A)        = 45288
  cones (total) = 1
    : Nonnegative = 1,  numel = 5325

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.65e+01  1.00e+00  1.00e+00   ------   
  1  +5.7223e-01  +5.5086e+02  5.50e+02  4.48e-01  5.57e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2560e-01  +5.9208e+01  5.87e+01  1.66e-01  2.63e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0815e-01  +1.3192e+01  1.27e+01  8.56e-02  1.44e+01  5.91e-05  1.90e-01  6.47e-01  
  4  +5.0066e-01  +2.2543e+00  1.75e+00  1.78e-02  3.00e+00  1.68e-05  1.40e-01  5.08e-01  
  5  +4.9981e-01  +1.3212e+00  8.21e-01  7.63e-03  1.32e+00  1.87e-05  3.95e-02  7.62e-01  
  6  +4.9059e-01  +1.3591e+00  8.68e-01  1.28e-03  2.33e-01  2.03e-04  3.27e-03  9.38e-01  
  7  +4.8175e-01  +1.2768e+00  7.95e-01  6.73e-04  1.22e-01  2.79e-04  1.70e-03  6.03e-01  
  8  +4.6295e-01  +1.0743e+00  6.11e-01  3.46e-04  6.23e-02  1.96e-04  8.91e-04  7.59e-01  
  9  +4.4236e-01  +9.2397e-01  4.82e-01  2.50e-04  4.46e-02  1.23e-04  6.76e-04  3.85e-01  
 10  +3.8549e-01  +5.5585e-01  1.70e-01  7.89e-05  1.38e-02  6.12e-06  2.52e-04  8.33e-01  
 11  +3.6444e-01  +4.6214e-01  9.77e-02  4.48e-05  7.80e-03  5.79e-06  1.59e-04  5.84e-01  
 12  +3.5404e-01  +4.1431e-01  6.03e-02  2.73e-05  4.75e-03  3.86e-06  1.03e-04  4.34e-01  
 13  +3.4355e-01  +3.6553e-01  2.20e-02  9.82e-06  1.71e-03  2.18e-06  3.97e-05  9.90e-01  
 14  +3.4097e-01  +3.5432e-01  1.34e-02  5.94e-06  1.03e-03  1.32e-06  2.45e-05  4.50e-01  
 15  +3.3867e-01  +3.4413e-01  5.46e-03  2.42e-06  4.19e-04  5.03e-07  1.02e-05  9.90e-01  
 16  +3.3735e-01  +3.3883e-01  1.48e-03  6.52e-07  1.13e-04  1.36e-07  2.82e-06  7.53e-01  
 17  +3.3687e-01  +3.3691e-01  4.61e-05  2.02e-08  3.50e-06  4.03e-09  8.80e-08  9.90e-01  
 18  +3.3685e-01  +3.3685e-01  4.62e-07  2.03e-10  3.51e-08  4.04e-11  8.83e-10  9.90e-01  
 19  +3.3685e-01  +3.3685e-01  4.63e-09  2.03e-12  3.51e-10  4.04e-13  8.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 159.2584ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:47 PM: Optimal value: 3.369e-01
(CVXPY) Oct 06 04:27:47 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:27:47 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 36, Objective: 0.3369
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:48 PM: Your problem has 2829 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:48 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2829
  constraints   = 5329
  nnz(P)        = 0
  nnz(A)        = 45324
  cones (total) = 1
    : Nonnegative = 1,  numel = 5329

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.65e+01  1.00e+00  1.00e+00   ------   
  1  +5.7213e-01  +5.5094e+02  5.50e+02  4.48e-01  5.57e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2556e-01  +5.9260e+01  5.87e+01  1.66e-01  2.62e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0818e-01  +1.3116e+01  1.26e+01  8.50e-02  1.43e+01  5.93e-05  1.89e-01  6.53e-01  
  4  +5.0063e-01  +2.2425e+00  1.74e+00  1.76e-02  2.98e+00  1.71e-05  1.40e-01  5.02e-01  
  5  +4.9980e-01  +1.3396e+00  8.40e-01  7.79e-03  1.35e+00  1.92e-05  4.02e-02  7.56e-01  
  6  +4.9183e-01  +1.3610e+00  8.69e-01  1.49e-03  2.70e-01  1.77e-04  3.82e-03  9.24e-01  
  7  +4.8304e-01  +1.2810e+00  7.98e-01  7.30e-04  1.32e-01  2.67e-04  1.84e-03  6.39e-01  
  8  +4.6299e-01  +1.0815e+00  6.18e-01  3.51e-04  6.32e-02  2.41e-04  9.03e-04  7.15e-01  
  9  +4.4358e-01  +9.3856e-01  4.95e-01  2.58e-04  4.61e-02  1.56e-04  6.97e-04  3.60e-01  
 10  +3.8642e-01  +5.6281e-01  1.76e-01  8.19e-05  1.44e-02  2.79e-06  2.61e-04  8.52e-01  
 11  +3.6351e-01  +4.6059e-01  9.71e-02  4.45e-05  7.76e-03  4.78e-06  1.59e-04  6.15e-01  
 12  +3.5362e-01  +4.1490e-01  6.13e-02  2.78e-05  4.83e-03  3.47e-06  1.05e-04  4.37e-01  
 13  +3.4264e-01  +3.6366e-01  2.10e-02  9.40e-06  1.63e-03  2.06e-06  3.81e-05  9.90e-01  
 14  +3.4047e-01  +3.5421e-01  1.37e-02  6.12e-06  1.06e-03  1.35e-06  2.53e-05  4.08e-01  
 15  +3.3817e-01  +3.4396e-01  5.79e-03  2.57e-06  4.45e-04  5.32e-07  1.09e-05  9.90e-01  
 16  +3.3677e-01  +3.3835e-01  1.57e-03  6.93e-07  1.20e-04  1.44e-07  3.00e-06  7.54e-01  
 17  +3.3627e-01  +3.3632e-01  5.28e-05  2.32e-08  4.02e-06  4.59e-09  1.01e-07  9.90e-01  
 18  +3.3625e-01  +3.3625e-01  5.30e-07  2.33e-10  4.03e-08  4.61e-11  1.01e-09  9.90e-01  
 19  +3.3625e-01  +3.3625e-01  5.30e-09  2.33e-12  4.03e-10  4.61e-13  1.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 152.026ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:48 PM: Optimal value: 3.363e-01
(CVXPY) Oct 06 04:27:48 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:48 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 37, Objective: 0.3363
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:48 PM: Your problem has 2837 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:48 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2837
  constraints   = 5337
  nnz(P)        = 0
  nnz(A)        = 45414
  cones (total) = 1
    : Nonnegative = 1,  numel = 5337

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.64e+01  1.00e+00  1.00e+00   ------   
  1  +5.7194e-01  +5.5098e+02  5.50e+02  4.48e-01  5.56e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2551e-01  +5.9344e+01  5.88e+01  1.66e-01  2.62e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0821e-01  +1.3006e+01  1.25e+01  8.39e-02  1.42e+01  5.96e-05  1.86e-01  6.61e-01  
  4  +5.0060e-01  +2.2342e+00  1.73e+00  1.75e-02  2.95e+00  1.76e-05  1.41e-01  4.90e-01  
  5  +4.9977e-01  +1.3538e+00  8.54e-01  7.89e-03  1.37e+00  1.99e-05  4.06e-02  7.53e-01  
  6  +4.9049e-01  +1.3683e+00  8.78e-01  1.35e-03  2.45e-01  2.03e-04  3.46e-03  9.32e-01  
  7  +4.8145e-01  +1.2850e+00  8.04e-01  7.01e-04  1.27e-01  2.84e-04  1.77e-03  6.13e-01  
  8  +4.5851e-01  +1.0582e+00  6.00e-01  3.28e-04  5.89e-02  2.44e-04  8.48e-04  7.14e-01  
  9  +4.3001e-01  +8.5224e-01  4.22e-01  2.12e-04  3.77e-02  1.02e-04  5.93e-04  5.30e-01  
 10  +3.8081e-01  +5.4804e-01  1.67e-01  7.84e-05  1.37e-02  2.02e-05  2.56e-04  6.63e-01  
 11  +3.6101e-01  +4.5418e-01  9.32e-02  4.29e-05  7.46e-03  1.04e-05  1.55e-04  5.75e-01  
 12  +3.5269e-01  +4.1471e-01  6.20e-02  2.83e-05  4.91e-03  6.82e-06  1.07e-04  3.75e-01  
 13  +3.4172e-01  +3.6245e-01  2.07e-02  9.27e-06  1.61e-03  2.15e-06  3.78e-05  9.90e-01  
 14  +3.3958e-01  +3.5324e-01  1.37e-02  6.07e-06  1.05e-03  1.41e-06  2.53e-05  4.02e-01  
 15  +3.3727e-01  +3.4304e-01  5.78e-03  2.55e-06  4.42e-04  5.28e-07  1.09e-05  9.90e-01  
 16  +3.3546e-01  +3.3580e-01  3.38e-04  1.49e-07  2.58e-05  3.00e-08  6.50e-07  9.57e-01  
 17  +3.3535e-01  +3.3535e-01  3.50e-06  1.54e-09  2.66e-07  3.10e-10  6.74e-09  9.90e-01  
 18  +3.3535e-01  +3.3535e-01  3.50e-08  1.54e-11  2.67e-09  3.11e-12  6.74e-11  9.90e-01  
 19  +3.3535e-01  +3.3535e-01  3.51e-10  1.54e-13  2.67e-11  3.12e-14  6.77e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 152.7687ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:48 PM: Optimal value: 3.354e-01
(CVXPY) Oct 06 04:27:48 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:48 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 38, Objective: 0.3354
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:48 PM: Your problem has 2847 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:48 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2847
  constraints   = 5347
  nnz(P)        = 0
  nnz(A)        = 45546
  cones (total) = 1
    : Nonnegative = 1,  numel = 5347

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7177e-01  +5.5103e+02  5.50e+02  4.48e-01  5.56e+01  3.77e-03  5.87e-01  5.75e-01  
  2  +5.2541e-01  +5.9413e+01  5.89e+01  1.66e-01  2.61e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0824e-01  +1.2839e+01  1.23e+01  8.25e-02  1.39e+01  6.00e-05  1.82e-01  6.73e-01  
  4  +5.0054e-01  +2.2123e+00  1.71e+00  1.72e-02  2.90e+00  1.84e-05  1.41e-01  4.74e-01  
  5  +4.9972e-01  +1.3863e+00  8.87e-01  8.12e-03  1.40e+00  2.15e-05  4.13e-02  7.47e-01  
  6  +4.9077e-01  +1.3907e+00  9.00e-01  1.49e-03  2.69e-01  1.98e-04  3.82e-03  9.28e-01  
  7  +4.8195e-01  +1.3040e+00  8.22e-01  7.62e-04  1.38e-01  2.81e-04  1.93e-03  6.16e-01  
  8  +4.6183e-01  +1.1055e+00  6.44e-01  3.75e-04  6.75e-02  2.74e-04  9.69e-04  6.48e-01  
  9  +4.4761e-01  +9.9666e-01  5.49e-01  2.97e-04  5.31e-02  2.16e-04  7.92e-04  2.38e-01  
 10  +4.0517e-01  +6.9104e-01  2.86e-01  1.41e-04  2.48e-02  2.10e-06  4.26e-04  8.91e-01  
 11  +3.8031e-01  +5.5688e-01  1.77e-01  8.42e-05  1.47e-02  2.51e-06  2.79e-04  3.94e-01  
 12  +3.5507e-01  +4.2918e-01  7.41e-02  3.42e-05  5.94e-03  2.11e-06  1.27e-04  6.25e-01  
 13  +3.5066e-01  +4.0838e-01  5.77e-02  2.64e-05  4.58e-03  1.96e-06  1.01e-04  2.74e-01  
 14  +3.4263e-01  +3.7059e-01  2.80e-02  1.25e-05  2.17e-03  1.52e-06  5.04e-05  6.67e-01  
 15  +3.3761e-01  +3.4812e-01  1.05e-02  4.64e-06  8.04e-04  6.53e-07  1.95e-05  6.92e-01  
 16  +3.3596e-01  +3.4044e-01  4.48e-03  1.97e-06  3.42e-04  3.94e-07  8.41e-06  9.90e-01  
 17  +3.3462e-01  +3.3514e-01  5.15e-04  2.27e-07  3.92e-05  4.52e-08  9.78e-07  8.97e-01  
 18  +3.3445e-01  +3.3446e-01  5.30e-06  2.33e-09  4.03e-07  4.65e-10  1.01e-08  9.90e-01  
 19  +3.3445e-01  +3.3445e-01  5.31e-08  2.34e-11  4.04e-09  4.65e-12  1.01e-10  9.90e-01  
 20  +3.3445e-01  +3.3445e-01  5.33e-10  2.34e-13  4.06e-11  4.68e-14  1.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 163.2625ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:49 PM: Optimal value: 3.345e-01
(CVXPY) Oct 06 04:27:49 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:49 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 39, Objective: 0.3345
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:49 PM: Your problem has 2849 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:49 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2849
  constraints   = 5349
  nnz(P)        = 0
  nnz(A)        = 45569
  cones (total) = 1
    : Nonnegative = 1,  numel = 5349

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7175e-01  +5.5095e+02  5.50e+02  4.48e-01  5.55e+01  3.77e-03  5.87e-01  5.75e-01  
  2  +5.2540e-01  +5.9403e+01  5.89e+01  1.66e-01  2.61e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0824e-01  +1.2822e+01  1.23e+01  8.23e-02  1.39e+01  6.00e-05  1.82e-01  6.74e-01  
  4  +5.0056e-01  +2.2465e+00  1.75e+00  1.76e-02  2.96e+00  1.86e-05  1.42e-01  4.65e-01  
  5  +4.9974e-01  +1.3941e+00  8.94e-01  8.22e-03  1.42e+00  2.12e-05  4.22e-02  7.42e-01  
  6  +4.8987e-01  +1.4136e+00  9.24e-01  1.39e-03  2.51e-01  2.17e-04  3.55e-03  9.38e-01  
  7  +4.8009e-01  +1.3106e+00  8.30e-01  7.14e-04  1.29e-01  3.00e-04  1.81e-03  6.02e-01  
  8  +4.5930e-01  +1.1052e+00  6.46e-01  3.72e-04  6.69e-02  2.85e-04  9.65e-04  5.70e-01  
  9  +4.4526e-01  +9.9495e-01  5.50e-01  2.96e-04  5.29e-02  2.21e-04  7.94e-04  2.41e-01  
 10  +4.0104e-01  +6.6894e-01  2.68e-01  1.31e-04  2.30e-02  2.14e-06  4.00e-04  8.86e-01  
 11  +3.7636e-01  +5.3750e-01  1.61e-01  7.65e-05  1.33e-02  2.51e-06  2.57e-04  4.11e-01  
 12  +3.5453e-01  +4.2777e-01  7.32e-02  3.38e-05  5.86e-03  2.26e-06  1.26e-04  6.02e-01  
 13  +3.5012e-01  +4.0670e-01  5.66e-02  2.59e-05  4.48e-03  2.10e-06  9.91e-05  2.90e-01  
 14  +3.4184e-01  +3.6773e-01  2.59e-02  1.16e-05  2.01e-03  1.33e-06  4.71e-05  6.43e-01  
 15  +3.3754e-01  +3.4836e-01  1.08e-02  4.80e-06  8.29e-04  6.03e-07  2.02e-05  6.21e-01  
 16  +3.3587e-01  +3.4040e-01  4.53e-03  2.00e-06  3.46e-04  3.97e-07  8.55e-06  9.90e-01  
 17  +3.3439e-01  +3.3449e-01  1.05e-04  4.64e-08  8.01e-06  8.95e-09  2.01e-07  9.89e-01  
 18  +3.3435e-01  +3.3435e-01  1.06e-06  4.66e-10  8.05e-08  8.99e-11  2.03e-09  9.90e-01  
 19  +3.3435e-01  +3.3435e-01  1.06e-08  4.67e-12  8.06e-10  9.00e-13  2.03e-11  9.90e-01  
 20  +3.3435e-01  +3.3435e-01  1.07e-10  4.69e-14  8.10e-12  9.07e-15  2.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.6166ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:49 PM: Optimal value: 3.344e-01
(CVXPY) Oct 06 04:27:49 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:49 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 40, Objective: 0.3344
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:49 PM: Your problem has 2852 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:49 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2852
  constraints   = 5352
  nnz(P)        = 0
  nnz(A)        = 45610
  cones (total) = 1
    : Nonnegative = 1,  numel = 5352

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7161e-01  +5.5099e+02  5.50e+02  4.48e-01  5.55e+01  3.77e-03  5.87e-01  5.75e-01  
  2  +5.2534e-01  +5.9461e+01  5.89e+01  1.66e-01  2.61e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0827e-01  +1.2732e+01  1.22e+01  8.15e-02  1.38e+01  6.03e-05  1.80e-01  6.80e-01  
  4  +5.0052e-01  +2.2251e+00  1.72e+00  1.73e-02  2.91e+00  1.91e-05  1.42e-01  4.57e-01  
  5  +4.9969e-01  +1.4016e+00  9.02e-01  8.22e-03  1.42e+00  2.24e-05  4.15e-02  7.48e-01  
  6  +4.9024e-01  +1.4047e+00  9.14e-01  1.47e-03  2.66e-01  2.10e-04  3.77e-03  9.29e-01  
  7  +4.8098e-01  +1.3110e+00  8.30e-01  7.63e-04  1.38e-01  2.95e-04  1.93e-03  5.95e-01  
  8  +4.6168e-01  +1.1263e+00  6.65e-01  4.01e-04  7.20e-02  3.02e-04  1.04e-03  5.61e-01  
  9  +4.4810e-01  +1.0170e+00  5.69e-01  3.16e-04  5.65e-02  2.31e-04  8.44e-04  2.72e-01  
 10  +4.0925e-01  +7.2373e-01  3.14e-01  1.58e-04  2.77e-02  2.29e-06  4.70e-04  9.07e-01  
 11  +3.8299e-01  +5.7664e-01  1.94e-01  9.34e-05  1.63e-02  2.62e-06  3.06e-04  3.95e-01  
 12  +3.5694e-01  +4.4179e-01  8.49e-02  3.96e-05  6.86e-03  2.10e-06  1.46e-04  5.92e-01  
 13  +3.5002e-01  +4.0851e-01  5.85e-02  2.69e-05  4.65e-03  1.88e-06  1.03e-04  3.68e-01  
 14  +3.4235e-01  +3.7174e-01  2.94e-02  1.32e-05  2.29e-03  1.61e-06  5.33e-05  6.70e-01  
 15  +3.3645e-01  +3.4514e-01  8.69e-03  3.86e-06  6.66e-04  5.34e-07  1.63e-05  7.50e-01  
 16  +3.3521e-01  +3.3924e-01  4.03e-03  1.79e-06  3.08e-04  3.49e-07  7.67e-06  9.90e-01  
 17  +3.3411e-01  +3.3487e-01  7.67e-04  3.39e-07  5.84e-05  6.62e-08  1.47e-06  8.45e-01  
 18  +3.3385e-01  +3.3386e-01  8.14e-06  3.59e-09  6.20e-07  7.02e-10  1.56e-08  9.89e-01  
 19  +3.3385e-01  +3.3385e-01  8.16e-08  3.60e-11  6.22e-09  7.04e-12  1.57e-10  9.90e-01  
 20  +3.3385e-01  +3.3385e-01  8.19e-10  3.61e-13  6.24e-11  7.07e-14  1.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.3842ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:49 PM: Optimal value: 3.339e-01
(CVXPY) Oct 06 04:27:49 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:49 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 41, Objective: 0.3339
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:50 PM: Your problem has 2862 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:50 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2862
  constraints   = 5362
  nnz(P)        = 0
  nnz(A)        = 45800
  cones (total) = 1
    : Nonnegative = 1,  numel = 5362

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.62e+01  1.00e+00  1.00e+00   ------   
  1  +5.7155e-01  +5.5099e+02  5.50e+02  4.48e-01  5.54e+01  3.77e-03  5.87e-01  5.75e-01  
  2  +5.2529e-01  +5.9478e+01  5.90e+01  1.66e-01  2.60e+01  1.89e-02  2.77e-01  9.90e-01  
  3  +5.0829e-01  +1.2656e+01  1.21e+01  8.08e-02  1.37e+01  6.05e-05  1.78e-01  6.85e-01  
  4  +5.0054e-01  +2.2731e+00  1.77e+00  1.77e-02  2.98e+00  1.97e-05  1.43e-01  4.34e-01  
  5  +4.9971e-01  +1.4109e+00  9.11e-01  8.32e-03  1.44e+00  2.24e-05  4.25e-02  7.42e-01  
  6  +4.9039e-01  +1.4233e+00  9.33e-01  1.51e-03  2.73e-01  2.10e-04  3.88e-03  9.30e-01  
  7  +4.8173e-01  +1.3312e+00  8.49e-01  7.98e-04  1.44e-01  2.88e-04  2.02e-03  5.97e-01  
  8  +4.5688e-01  +1.0789e+00  6.22e-01  3.38e-04  6.07e-02  2.82e-04  8.75e-04  7.32e-01  
  9  +4.4294e-01  +9.7506e-01  5.32e-01  2.76e-04  4.93e-02  2.18e-04  7.41e-04  2.09e-01  
 10  +4.0192e-01  +6.8571e-01  2.84e-01  1.42e-04  2.48e-02  1.98e-06  4.34e-04  8.72e-01  
 11  +3.7492e-01  +5.3581e-01  1.61e-01  7.71e-05  1.34e-02  2.29e-06  2.61e-04  4.48e-01  
 12  +3.5444e-01  +4.3142e-01  7.70e-02  3.58e-05  6.19e-03  2.14e-06  1.33e-04  5.76e-01  
 13  +3.4943e-01  +4.0717e-01  5.77e-02  2.65e-05  4.59e-03  1.96e-06  1.02e-04  3.07e-01  
 14  +3.4101e-01  +3.6694e-01  2.59e-02  1.17e-05  2.02e-03  1.32e-06  4.74e-05  6.68e-01  
 15  +3.3668e-01  +3.4736e-01  1.07e-02  4.75e-06  8.19e-04  5.94e-07  2.00e-05  6.27e-01  
 16  +3.3503e-01  +3.3945e-01  4.42e-03  1.96e-06  3.38e-04  3.85e-07  8.35e-06  9.90e-01  
 17  +3.3358e-01  +3.3368e-01  1.01e-04  4.45e-08  7.68e-06  8.54e-09  1.93e-07  9.89e-01  
 18  +3.3355e-01  +3.3355e-01  1.01e-06  4.47e-10  7.71e-08  8.58e-11  1.94e-09  9.90e-01  
 19  +3.3355e-01  +3.3355e-01  1.01e-08  4.47e-12  7.72e-10  8.59e-13  1.94e-11  9.90e-01  
 20  +3.3355e-01  +3.3355e-01  1.02e-10  4.49e-14  7.75e-12  8.64e-15  1.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.9936ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:50 PM: Optimal value: 3.336e-01
(CVXPY) Oct 06 04:27:50 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:50 PM: Solver (including time spent in interface) took 1.725e-01 seconds
Iteration: 42, Objective: 0.3336
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:50 PM: Your problem has 2872 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:50 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2872
  constraints   = 5372
  nnz(P)        = 0
  nnz(A)        = 45922
  cones (total) = 1
    : Nonnegative = 1,  numel = 5372

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5018e+03  2.50e+03  9.81e-01  8.61e+01  1.00e+00  1.00e+00   ------   
  1  +5.7142e-01  +5.5105e+02  5.50e+02  4.49e-01  5.53e+01  3.77e-03  5.87e-01  5.75e-01  
  2  +5.2522e-01  +5.9559e+01  5.90e+01  1.66e-01  2.60e+01  1.89e-02  2.77e-01  9.90e-01  
  3  +5.0832e-01  +1.2540e+01  1.20e+01  7.97e-02  1.35e+01  6.09e-05  1.75e-01  6.93e-01  
  4  +5.0047e-01  +2.2177e+00  1.72e+00  1.71e-02  2.87e+00  2.03e-05  1.43e-01  4.29e-01  
  5  +4.9959e-01  +1.3898e+00  8.90e-01  7.98e-03  1.38e+00  2.47e-05  3.96e-02  7.61e-01  
  6  +4.9307e-01  +1.3775e+00  8.84e-01  2.02e-03  3.64e-01  1.56e-04  5.33e-03  8.81e-01  
  7  +4.8504e-01  +1.3117e+00  8.27e-01  9.86e-04  1.78e-01  2.62e-04  2.52e-03  6.03e-01  
  8  +4.6738e-01  +1.1535e+00  6.86e-01  4.72e-04  8.48e-02  3.36e-04  1.21e-03  6.01e-01  
  9  +4.4660e-01  +9.8890e-01  5.42e-01  3.07e-04  5.47e-02  2.59e-04  8.22e-04  3.99e-01  
 10  +4.2294e-01  +8.2238e-01  3.99e-01  2.16e-04  3.80e-02  2.51e-06  6.26e-04  9.04e-01  
 11  +3.8227e-01  +5.7451e-01  1.92e-01  9.26e-05  1.61e-02  2.49e-06  3.02e-04  5.56e-01  
 12  +3.6259e-01  +4.7440e-01  1.12e-01  5.24e-05  9.08e-03  2.86e-06  1.87e-04  4.74e-01  
 13  +3.5207e-01  +4.2297e-01  7.09e-02  3.27e-05  5.65e-03  2.18e-06  1.23e-04  3.91e-01  
 14  +3.4149e-01  +3.7210e-01  3.06e-02  1.38e-05  2.38e-03  1.59e-06  5.55e-05  6.99e-01  
 15  +3.3594e-01  +3.4685e-01  1.09e-02  4.84e-06  8.35e-04  6.72e-07  2.04e-05  7.23e-01  
 16  +3.3292e-01  +3.3364e-01  7.21e-04  3.18e-07  5.48e-05  4.65e-08  1.38e-06  9.44e-01  
 17  +3.3270e-01  +3.3271e-01  7.50e-06  3.30e-09  5.70e-07  4.88e-10  1.44e-08  9.90e-01  
 18  +3.3270e-01  +3.3270e-01  7.52e-08  3.31e-11  5.71e-09  4.89e-12  1.45e-10  9.90e-01  
 19  +3.3270e-01  +3.3270e-01  7.55e-10  3.33e-13  5.73e-11  4.92e-14  1.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.9035ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:50 PM: Optimal value: 3.327e-01
(CVXPY) Oct 06 04:27:50 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:50 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 43, Objective: 0.3327
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:51 PM: Your problem has 2882 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:51 PM: Finished problem compilation (took 3.123e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2882
  constraints   = 5382
  nnz(P)        = 0
  nnz(A)        = 46012
  cones (total) = 1
    : Nonnegative = 1,  numel = 5382

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5018e+03  2.50e+03  9.81e-01  8.61e+01  1.00e+00  1.00e+00   ------   
  1  +5.7128e-01  +5.5118e+02  5.51e+02  4.49e-01  5.53e+01  3.77e-03  5.88e-01  5.75e-01  
  2  +5.2514e-01  +5.9615e+01  5.91e+01  1.66e-01  2.60e+01  1.89e-02  2.77e-01  9.90e-01  
  3  +5.0835e-01  +1.2431e+01  1.19e+01  7.87e-02  1.33e+01  6.12e-05  1.73e-01  7.00e-01  
  4  +5.0042e-01  +2.2002e+00  1.70e+00  1.69e-02  2.83e+00  2.12e-05  1.44e-01  4.13e-01  
  5  +4.9953e-01  +1.3993e+00  9.00e-01  7.97e-03  1.38e+00  2.66e-05  3.92e-02  7.64e-01  
  6  +4.9424e-01  +1.3815e+00  8.87e-01  2.45e-03  4.40e-01  1.35e-04  6.61e-03  8.45e-01  
  7  +4.8700e-01  +1.3253e+00  8.38e-01  1.16e-03  2.09e-01  2.41e-04  3.00e-03  6.18e-01  
  8  +4.6440e-01  +1.1207e+00  6.56e-01  4.01e-04  7.21e-02  3.45e-04  1.03e-03  8.56e-01  
  9  +4.4368e-01  +9.6378e-01  5.20e-01  2.80e-04  4.99e-02  2.56e-04  7.52e-04  3.22e-01  
 10  +4.1736e-01  +7.9263e-01  3.75e-01  2.02e-04  3.54e-02  2.33e-06  5.97e-04  8.74e-01  
 11  +3.8150e-01  +5.7697e-01  1.95e-01  9.52e-05  1.66e-02  2.56e-06  3.14e-04  5.17e-01  
 12  +3.6038e-01  +4.6669e-01  1.06e-01  5.01e-05  8.67e-03  2.70e-06  1.81e-04  5.10e-01  
 13  +3.5060e-01  +4.1833e-01  6.77e-02  3.14e-05  5.42e-03  2.09e-06  1.20e-04  3.94e-01  
 14  +3.4095e-01  +3.7130e-01  3.03e-02  1.37e-05  2.37e-03  1.62e-06  5.56e-05  7.03e-01  
 15  +3.3519e-01  +3.4502e-01  9.82e-03  4.38e-06  7.54e-04  6.06e-07  1.86e-05  7.42e-01  
 16  +3.3249e-01  +3.3311e-01  6.20e-04  2.74e-07  4.72e-05  3.92e-08  1.20e-06  9.43e-01  
 17  +3.3230e-01  +3.3231e-01  6.36e-06  2.82e-09  4.85e-07  4.05e-10  1.24e-08  9.90e-01  
 18  +3.3230e-01  +3.3230e-01  6.38e-08  2.82e-11  4.86e-09  4.06e-12  1.24e-10  9.90e-01  
 19  +3.3230e-01  +3.3230e-01  6.40e-10  2.83e-13  4.88e-11  4.08e-14  1.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.1705ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:51 PM: Optimal value: 3.323e-01
(CVXPY) Oct 06 04:27:51 PM: Compilation took 3.123e-02 seconds
(CVXPY) Oct 06 04:27:51 PM: Solver (including time spent in interface) took 1.719e-01 seconds
FULL MODEL:
  Accruacy: 0.6204
  Our objective: 0.24079999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.1652)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x9 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.0056)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.0068)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 1)                       <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0016)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.0076)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0012)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 26.678651571273804
Best over terms:
  Our final objective: 0.16519999999999996
    Its accruacy: 0.5826
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16519999999999996
  Highest accruacy: 0.5826
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

