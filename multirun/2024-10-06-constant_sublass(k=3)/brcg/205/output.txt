Command:
python test_script.py -s constant_subclass -d 6 -n 50 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 6.

Computed total variation: 0.7200000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:23 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:23 PM: Finished problem compilation (took 3.021e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 238
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9308e-01  +2.6127e+01  2.56e+01  8.24e-01  6.13e+00  1.00e+00  1.08e+00   ------   
  1  +5.7796e-01  +5.5421e+00  4.96e+00  3.22e-01  3.36e+00  3.87e-03  5.61e-01  6.35e-01  
  2  +4.9672e-01  +1.1098e+00  6.13e-01  6.46e-02  8.11e-01  1.47e-02  1.78e-01  9.61e-01  
  3  +4.2685e-01  +8.5094e-01  4.24e-01  2.17e-02  2.84e-01  1.48e-02  7.18e-02  7.00e-01  
  4  +3.7525e-01  +5.1326e-01  1.38e-01  6.22e-03  8.01e-02  3.61e-03  2.59e-02  6.94e-01  
  5  +3.4404e-01  +3.5843e-01  1.44e-02  6.32e-04  8.05e-03  2.39e-04  3.22e-03  9.00e-01  
  6  +3.4014e-01  +3.4029e-01  1.46e-04  6.41e-06  8.15e-05  2.32e-06  3.35e-05  9.90e-01  
  7  +3.4010e-01  +3.4010e-01  1.46e-06  6.41e-08  8.14e-07  2.32e-08  3.35e-07  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  1.46e-08  6.41e-10  8.14e-09  2.32e-10  3.35e-09  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  1.46e-10  6.41e-12  8.14e-11  2.32e-12  3.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 476.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:23 PM: Optimal value: 3.401e-01
(CVXPY) Oct 06 03:56:23 PM: Compilation took 3.021e-02 seconds
(CVXPY) Oct 06 03:56:23 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:23 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:23 PM: Finished problem compilation (took 7.483e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 295
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8220e-01  +2.6555e+01  2.61e+01  8.38e-01  6.10e+00  1.00e+00  1.11e+00   ------   
  1  +5.3178e-01  +5.6366e+00  5.10e+00  3.41e-01  3.29e+00  3.86e-03  5.82e-01  6.28e-01  
  2  +4.3589e-01  +1.3012e+00  8.65e-01  7.51e-02  9.16e-01  1.69e-02  2.06e-01  8.92e-01  
  3  +3.5665e-01  +6.9834e-01  3.42e-01  2.12e-02  2.60e-01  6.75e-03  7.31e-02  7.67e-01  
  4  +3.1794e-01  +4.2120e-01  1.03e-01  5.99e-03  7.28e-02  1.62e-03  2.43e-02  7.06e-01  
  5  +3.0300e-01  +3.1845e-01  1.54e-02  9.14e-04  1.10e-02  2.19e-04  4.10e-03  8.46e-01  
  6  +3.0029e-01  +3.0068e-01  3.93e-04  2.34e-05  2.81e-04  4.05e-06  1.08e-04  9.76e-01  
  7  +3.0021e-01  +3.0026e-01  4.66e-05  2.82e-06  3.35e-05  3.41e-07  1.45e-05  9.02e-01  
  8  +3.0020e-01  +3.0020e-01  6.88e-07  4.17e-08  4.95e-07  4.47e-09  2.20e-07  9.90e-01  
  9  +3.0020e-01  +3.0020e-01  6.88e-09  4.17e-10  4.94e-09  4.46e-11  2.20e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 492.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:23 PM: Optimal value: 3.002e-01
(CVXPY) Oct 06 03:56:23 PM: Compilation took 7.483e-03 seconds
(CVXPY) Oct 06 03:56:23 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:23 PM: Your problem has 58 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:23 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 58
  constraints   = 83
  nnz(P)        = 0
  nnz(A)        = 355
  cones (total) = 1
    : Nonnegative = 1,  numel = 83

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8135e-01  +2.6606e+01  2.61e+01  8.48e-01  6.13e+00  1.00e+00  1.11e+00   ------   
  1  +5.2168e-01  +5.7306e+00  5.21e+00  3.65e-01  3.35e+00  3.80e-03  6.06e-01  6.14e-01  
  2  +4.2365e-01  +1.3995e+00  9.76e-01  8.27e-02  9.97e-01  1.95e-02  2.25e-01  8.90e-01  
  3  +3.1559e-01  +6.6916e-01  3.54e-01  1.88e-02  2.34e-01  8.08e-03  6.47e-02  8.44e-01  
  4  +2.7473e-01  +3.6738e-01  9.26e-02  5.10e-03  6.26e-02  1.64e-03  1.97e-02  7.69e-01  
  5  +2.6339e-01  +3.1167e-01  4.83e-02  2.48e-03  3.18e-02  8.62e-04  9.66e-03  6.40e-01  
  6  +2.5330e-01  +2.6179e-01  8.49e-03  4.43e-04  5.64e-03  8.73e-05  1.82e-03  9.28e-01  
  7  +2.5055e-01  +2.5099e-01  4.31e-04  2.25e-05  2.86e-04  3.64e-06  9.45e-05  9.49e-01  
  8  +2.5042e-01  +2.5046e-01  4.73e-05  2.51e-06  3.15e-05  3.73e-07  1.10e-05  9.40e-01  
  9  +2.5040e-01  +2.5040e-01  4.95e-07  2.64e-08  3.30e-07  3.77e-09  1.17e-07  9.89e-01  
 10  +2.5040e-01  +2.5040e-01  4.95e-09  2.64e-10  3.30e-09  3.77e-11  1.17e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 619.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:23 PM: Optimal value: 2.504e-01
(CVXPY) Oct 06 03:56:23 PM: Compilation took 5.006e-03 seconds
(CVXPY) Oct 06 03:56:23 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:23 PM: Your problem has 68 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:23 PM: Finished problem compilation (took 6.045e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 68
  constraints   = 93
  nnz(P)        = 0
  nnz(A)        = 395
  cones (total) = 1
    : Nonnegative = 1,  numel = 93

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8037e-01  +2.6670e+01  2.62e+01  8.56e-01  5.97e+00  1.00e+00  1.11e+00   ------   
  1  +5.0753e-01  +5.7961e+00  5.29e+00  3.74e-01  3.22e+00  3.86e-03  6.04e-01  6.09e-01  
  2  +4.0538e-01  +1.4193e+00  1.01e+00  8.56e-02  9.95e-01  2.01e-02  2.31e-01  8.81e-01  
  3  +2.9870e-01  +6.8080e-01  3.82e-01  2.08e-02  2.51e-01  7.83e-03  7.01e-02  8.84e-01  
  4  +2.5835e-01  +3.7906e-01  1.21e-01  6.49e-03  7.82e-02  2.21e-03  2.38e-02  7.18e-01  
  5  +2.4571e-01  +3.2877e-01  8.31e-02  4.16e-03  5.16e-02  1.50e-03  1.56e-02  4.41e-01  
  6  +2.2724e-01  +2.4779e-01  2.05e-02  9.86e-04  1.23e-02  3.14e-04  3.95e-03  8.01e-01  
  7  +2.2081e-01  +2.2136e-01  5.52e-04  2.64e-05  3.29e-04  5.32e-06  1.10e-04  9.77e-01  
  8  +2.2061e-01  +2.2064e-01  2.95e-05  1.47e-06  1.79e-05  2.04e-07  6.45e-06  9.47e-01  
  9  +2.2060e-01  +2.2060e-01  3.04e-07  1.52e-08  1.85e-07  2.10e-09  6.72e-08  9.90e-01  
 10  +2.2060e-01  +2.2060e-01  3.04e-09  1.52e-10  1.85e-09  2.10e-11  6.73e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 658µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:23 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:23 PM: Optimal value: 2.206e-01
(CVXPY) Oct 06 03:56:23 PM: Compilation took 6.045e-03 seconds
(CVXPY) Oct 06 03:56:23 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2206
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:24 PM: Your problem has 78 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:24 PM: Finished problem compilation (took 5.444e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 78
  constraints   = 103
  nnz(P)        = 0
  nnz(A)        = 420
  cones (total) = 1
    : Nonnegative = 1,  numel = 103

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7369e-01  +2.6825e+01  2.64e+01  8.62e-01  5.76e+00  1.00e+00  1.11e+00   ------   
  1  +4.5048e-01  +5.9328e+00  5.48e+00  3.75e-01  3.08e+00  3.99e-03  6.01e-01  5.98e-01  
  2  +3.2393e-01  +1.5311e+00  1.21e+00  8.90e-02  9.72e-01  2.13e-02  2.27e-01  8.51e-01  
  3  +2.5258e-01  +6.7024e-01  4.18e-01  2.63e-02  2.98e-01  8.40e-03  8.04e-02  7.07e-01  
  4  +2.0869e-01  +3.2043e-01  1.12e-01  6.70e-03  7.61e-02  2.10e-03  2.28e-02  8.16e-01  
  5  +1.8968e-01  +2.2923e-01  3.96e-02  2.25e-03  2.58e-02  6.86e-04  7.97e-03  7.01e-01  
  6  +1.8115e-01  +1.8238e-01  1.24e-03  7.03e-05  8.04e-04  1.57e-05  2.57e-04  9.71e-01  
  7  +1.8083e-01  +1.8093e-01  9.54e-05  5.83e-06  6.48e-05  5.94e-07  2.29e-05  9.29e-01  
  8  +1.8080e-01  +1.8080e-01  1.71e-06  1.06e-07  1.18e-06  1.17e-08  4.29e-07  9.86e-01  
  9  +1.8080e-01  +1.8080e-01  1.71e-08  1.06e-09  1.18e-08  1.17e-10  4.29e-09  9.90e-01  
 10  +1.8080e-01  +1.8080e-01  1.72e-10  1.07e-11  1.18e-10  1.17e-12  4.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 849.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:24 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:24 PM: Optimal value: 1.808e-01
(CVXPY) Oct 06 03:56:24 PM: Compilation took 5.444e-03 seconds
(CVXPY) Oct 06 03:56:24 PM: Solver (including time spent in interface) took 2.575e-03 seconds
Iteration: 5, Objective: 0.1808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:24 PM: Your problem has 79 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:24 PM: Finished problem compilation (took 7.135e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 104
  nnz(P)        = 0
  nnz(A)        = 424
  cones (total) = 1
    : Nonnegative = 1,  numel = 104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7336e-01  +2.6837e+01  2.64e+01  8.63e-01  5.75e+00  1.00e+00  1.11e+00   ------   
  1  +4.4743e-01  +5.9841e+00  5.54e+00  3.79e-01  3.10e+00  4.00e-03  6.07e-01  5.93e-01  
  2  +3.2405e-01  +1.6594e+00  1.34e+00  9.97e-02  1.07e+00  2.14e-02  2.50e-01  8.13e-01  
  3  +2.5197e-01  +6.8242e-01  4.30e-01  2.73e-02  3.07e-01  8.58e-03  8.35e-02  7.38e-01  
  4  +2.0887e-01  +3.2516e-01  1.16e-01  7.04e-03  7.95e-02  2.16e-03  2.38e-02  8.21e-01  
  5  +1.9215e-01  +2.4481e-01  5.27e-02  3.01e-03  3.45e-02  9.34e-04  1.06e-02  6.04e-01  
  6  +1.8143e-01  +1.8387e-01  2.45e-03  1.39e-04  1.59e-03  3.24e-05  5.03e-04  9.65e-01  
  7  +1.8091e-01  +1.8124e-01  3.32e-04  1.99e-05  2.22e-04  3.20e-06  7.57e-05  8.57e-01  
  8  +1.8081e-01  +1.8082e-01  1.62e-05  1.01e-06  1.11e-05  1.19e-07  4.09e-06  9.90e-01  
  9  +1.8080e-01  +1.8080e-01  1.63e-07  1.02e-08  1.12e-07  1.19e-09  4.13e-08  9.90e-01  
 10  +1.8080e-01  +1.8080e-01  1.63e-09  1.02e-10  1.12e-09  1.19e-11  4.13e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 738µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:24 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:24 PM: Optimal value: 1.808e-01
(CVXPY) Oct 06 03:56:24 PM: Compilation took 7.135e-03 seconds
(CVXPY) Oct 06 03:56:24 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.8
  Our objective: 0.6

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x5 = 0)                       <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x1 = 1 AND x4 = 1 AND x5 = 1)                       <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0)                                  <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0)                                  <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.04)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.606699466705322
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 4
  Shortest hamming distance: 0
    Its our objective: 0.15999999999999995
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

