Command:
python test_script.py -s constant_subclass -d 6 -n 1000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 6.

Computed total variation: 0.266
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:09 PM: Your problem has 513 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:09 PM: Finished problem compilation (took 5.730e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 513
  constraints   = 1013
  nnz(P)        = 0
  nnz(A)        = 4513
  cones (total) = 1
    : Nonnegative = 1,  numel = 1013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9986e-01  +5.0088e+02  5.00e+02  9.53e-01  3.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.9272e-01  +1.0327e+02  1.03e+02  3.71e-01  1.84e+01  3.92e-03  5.27e-01  6.27e-01  
  2  +5.4024e-01  +1.3729e+01  1.32e+01  1.30e-01  8.01e+00  1.17e-02  2.38e-01  8.42e-01  
  3  +5.0517e-01  +2.7993e+00  2.29e+00  4.67e-02  2.76e+00  2.19e-05  2.21e-01  3.16e-01  
  4  +5.0054e-01  +8.0403e-01  3.03e-01  6.56e-03  4.05e-01  8.10e-06  6.74e-02  7.91e-01  
  5  +4.9824e-01  +8.1628e-01  3.18e-01  3.65e-03  2.30e-01  3.59e-05  1.23e-02  8.76e-01  
  6  +4.8690e-01  +7.3223e-01  2.45e-01  7.94e-04  5.04e-02  1.20e-04  2.36e-03  8.09e-01  
  7  +4.6911e-01  +6.1035e-01  1.41e-01  3.80e-04  2.40e-02  6.09e-05  1.23e-03  5.75e-01  
  8  +4.4890e-01  +4.9748e-01  4.86e-02  1.19e-04  7.48e-03  1.35e-05  4.37e-04  9.75e-01  
  9  +4.3850e-01  +4.5258e-01  1.41e-02  3.02e-05  1.89e-03  6.17e-06  1.25e-04  9.90e-01  
 10  +4.3417e-01  +4.3440e-01  2.23e-04  4.60e-07  2.88e-05  8.67e-08  2.02e-06  9.85e-01  
 11  +4.3410e-01  +4.3410e-01  2.23e-06  4.60e-09  2.88e-07  8.67e-10  2.02e-08  9.90e-01  
 12  +4.3410e-01  +4.3410e-01  2.23e-08  4.60e-11  2.88e-09  8.68e-12  2.02e-10  9.90e-01  
 13  +4.3410e-01  +4.3410e-01  2.23e-10  4.60e-13  2.88e-11  8.69e-14  2.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.3809ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:09 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:09 PM: Optimal value: 4.341e-01
(CVXPY) Oct 06 03:58:09 PM: Compilation took 5.730e-02 seconds
(CVXPY) Oct 06 03:58:09 PM: Solver (including time spent in interface) took 7.549e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:09 PM: Your problem has 523 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:09 PM: Finished problem compilation (took 6.088e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 1023
  nnz(P)        = 0
  nnz(A)        = 5497
  cones (total) = 1
    : Nonnegative = 1,  numel = 1023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9991e-01  +5.0130e+02  5.01e+02  9.54e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.9180e-01  +1.0352e+02  1.03e+02  3.74e-01  1.93e+01  3.91e-03  5.32e-01  6.25e-01  
  2  +5.3894e-01  +1.3477e+01  1.29e+01  1.28e-01  8.22e+00  1.19e-02  2.37e-01  8.55e-01  
  3  +5.0463e-01  +2.6946e+00  2.19e+00  4.50e-02  2.79e+00  2.22e-05  2.16e-01  3.69e-01  
  4  +5.0078e-01  +9.2549e-01  4.25e-01  9.19e-03  5.93e-01  8.31e-06  7.87e-02  6.98e-01  
  5  +4.9859e-01  +8.8762e-01  3.89e-01  4.80e-03  3.17e-01  2.94e-05  1.61e-02  8.91e-01  
  6  +4.8539e-01  +7.8542e-01  3.00e-01  8.87e-04  5.92e-02  1.19e-04  2.57e-03  8.43e-01  
  7  +4.7002e-01  +6.7341e-01  2.03e-01  4.90e-04  3.26e-02  8.84e-05  1.45e-03  5.14e-01  
  8  +4.6136e-01  +6.3082e-01  1.69e-01  3.26e-04  2.16e-02  8.99e-05  9.51e-04  5.36e-01  
  9  +4.5109e-01  +5.8066e-01  1.30e-01  2.92e-04  1.93e-02  4.84e-05  9.48e-04  6.93e-02  
 10  +4.2255e-01  +4.5725e-01  3.47e-02  5.77e-05  3.80e-03  2.51e-05  1.86e-04  8.77e-01  
 11  +4.0711e-01  +4.0903e-01  1.91e-03  3.17e-06  2.08e-04  1.01e-06  1.10e-05  9.90e-01  
 12  +4.0621e-01  +4.0623e-01  1.94e-05  3.21e-08  2.11e-06  1.01e-08  1.12e-07  9.90e-01  
 13  +4.0620e-01  +4.0620e-01  1.94e-07  3.21e-10  2.11e-08  1.01e-10  1.12e-09  9.90e-01  
 14  +4.0620e-01  +4.0620e-01  1.94e-09  3.21e-12  2.11e-10  1.01e-12  1.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8679ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:10 PM: Optimal value: 4.062e-01
(CVXPY) Oct 06 03:58:10 PM: Compilation took 6.088e-03 seconds
(CVXPY) Oct 06 03:58:10 PM: Solver (including time spent in interface) took 1.584e-02 seconds
Iteration: 2, Objective: 0.4062
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:10 PM: Your problem has 533 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Finished problem compilation (took 9.520e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 1033
  nnz(P)        = 0
  nnz(A)        = 5740
  cones (total) = 1
    : Nonnegative = 1,  numel = 1033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9977e-01  +5.0118e+02  5.01e+02  9.54e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8969e-01  +1.0375e+02  1.03e+02  3.78e-01  1.92e+01  3.90e-03  5.35e-01  6.24e-01  
  2  +5.3766e-01  +1.3238e+01  1.27e+01  1.26e-01  7.99e+00  1.23e-02  2.33e-01  8.71e-01  
  3  +5.0419e-01  +2.6182e+00  2.11e+00  4.36e-02  2.70e+00  2.29e-05  2.07e-01  4.26e-01  
  4  +5.0080e-01  +1.0245e+00  5.24e-01  1.13e-02  7.23e-01  9.48e-06  7.93e-02  6.56e-01  
  5  +4.9153e-01  +1.2102e+00  7.19e-01  3.32e-03  2.21e-01  9.42e-05  9.17e-03  9.90e-01  
  6  +4.6654e-01  +8.5594e-01  3.89e-01  8.66e-04  5.77e-02  1.22e-04  2.43e-03  7.54e-01  
  7  +4.6120e-01  +8.1877e-01  3.58e-01  7.39e-04  4.92e-02  1.28e-04  2.09e-03  2.48e-01  
  8  +4.5256e-01  +7.2921e-01  2.77e-01  5.98e-04  3.96e-02  1.09e-04  1.75e-03  4.32e-01  
  9  +4.1256e-01  +5.0966e-01  9.71e-02  1.82e-04  1.20e-02  3.28e-05  5.92e-04  7.32e-01  
 10  +3.9196e-01  +4.1808e-01  2.61e-02  4.78e-05  3.12e-03  1.07e-05  1.70e-04  7.83e-01  
 11  +3.9066e-01  +4.1216e-01  2.15e-02  3.98e-05  2.60e-03  8.94e-06  1.47e-04  2.81e-01  
 12  +3.9050e-01  +4.1148e-01  2.10e-02  3.89e-05  2.54e-03  8.85e-06  1.44e-04  5.07e-02  
 13  +3.8985e-01  +4.0883e-01  1.90e-02  3.51e-05  2.29e-03  8.40e-06  1.30e-04  1.81e-01  
 14  +3.8805e-01  +4.0297e-01  1.49e-02  2.68e-05  1.75e-03  7.55e-06  9.77e-05  4.27e-01  
 15  +3.8262e-01  +3.8293e-01  3.08e-04  5.51e-07  3.59e-05  1.47e-07  2.08e-06  9.87e-01  
 16  +3.8250e-01  +3.8250e-01  3.08e-06  5.52e-09  3.60e-07  1.47e-09  2.09e-08  9.90e-01  
 17  +3.8250e-01  +3.8250e-01  3.08e-08  5.52e-11  3.60e-09  1.47e-11  2.09e-10  9.90e-01  
 18  +3.8250e-01  +3.8250e-01  3.08e-10  5.52e-13  3.60e-11  1.47e-13  2.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.3067ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:10 PM: Optimal value: 3.825e-01
(CVXPY) Oct 06 03:58:10 PM: Compilation took 9.520e-03 seconds
(CVXPY) Oct 06 03:58:10 PM: Solver (including time spent in interface) took 1.423e-02 seconds
Iteration: 3, Objective: 0.3825
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:10 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 5922
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +5.0134e+02  5.01e+02  9.54e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8851e-01  +1.0395e+02  1.03e+02  3.80e-01  1.92e+01  3.89e-03  5.38e-01  6.22e-01  
  2  +5.3697e-01  +1.3116e+01  1.26e+01  1.25e-01  7.90e+00  1.24e-02  2.31e-01  8.80e-01  
  3  +5.0401e-01  +2.5907e+00  2.09e+00  4.32e-02  2.67e+00  2.35e-05  2.03e-01  4.55e-01  
  4  +5.0073e-01  +1.0560e+00  5.55e-01  1.19e-02  7.63e-01  1.03e-05  7.69e-02  6.53e-01  
  5  +4.8910e-01  +1.3910e+00  9.02e-01  3.72e-03  2.48e-01  1.10e-04  1.02e-02  9.66e-01  
  6  +4.7412e-01  +1.1236e+00  6.49e-01  1.83e-03  1.22e-01  1.15e-04  5.12e-03  5.29e-01  
  7  +4.6353e-01  +9.8857e-01  5.25e-01  1.25e-03  8.33e-02  1.23e-04  3.56e-03  3.96e-01  
  8  +4.5328e-01  +8.7531e-01  4.22e-01  9.11e-04  6.05e-02  1.21e-04  2.65e-03  3.62e-01  
  9  +4.5242e-01  +7.4613e-01  2.94e-01  7.04e-04  4.66e-02  1.40e-04  2.09e-03  8.11e-01  
 10  +4.1794e-01  +5.5409e-01  1.36e-01  2.75e-04  1.80e-02  6.05e-05  8.92e-04  6.36e-01  
 11  +4.0016e-01  +4.6888e-01  6.87e-02  1.35e-04  8.82e-03  3.15e-05  4.67e-04  5.79e-01  
 12  +3.9057e-01  +4.2776e-01  3.72e-02  7.07e-05  4.61e-03  1.74e-05  2.54e-04  4.77e-01  
 13  +3.8241e-01  +3.9252e-01  1.01e-02  1.88e-05  1.23e-03  6.10e-06  7.09e-05  9.90e-01  
 14  +3.7870e-01  +3.7895e-01  2.51e-04  4.66e-07  3.04e-05  1.40e-07  1.81e-06  9.79e-01  
 15  +3.7860e-01  +3.7860e-01  2.51e-06  4.66e-09  3.04e-07  1.40e-09  1.81e-08  9.90e-01  
 16  +3.7860e-01  +3.7860e-01  2.51e-08  4.66e-11  3.04e-09  1.40e-11  1.81e-10  9.90e-01  
 17  +3.7860e-01  +3.7860e-01  2.51e-10  4.66e-13  3.04e-11  1.40e-13  1.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8324ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:10 PM: Optimal value: 3.786e-01
(CVXPY) Oct 06 03:58:10 PM: Compilation took 5.006e-03 seconds
(CVXPY) Oct 06 03:58:10 PM: Solver (including time spent in interface) took 1.014e-02 seconds
Iteration: 4, Objective: 0.3786
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:10 PM: Your problem has 547 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Finished problem compilation (took 9.835e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 547
  constraints   = 1047
  nnz(P)        = 0
  nnz(A)        = 6070
  cones (total) = 1
    : Nonnegative = 1,  numel = 1047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0138e+02  5.01e+02  9.55e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8733e-01  +1.0415e+02  1.04e+02  3.83e-01  1.92e+01  3.89e-03  5.40e-01  6.21e-01  
  2  +5.3639e-01  +1.3013e+01  1.25e+01  1.24e-01  7.81e+00  1.26e-02  2.30e-01  8.88e-01  
  3  +5.0392e-01  +2.5830e+00  2.08e+00  4.31e-02  2.66e+00  2.42e-05  2.00e-01  4.76e-01  
  4  +5.0073e-01  +1.1138e+00  6.13e-01  1.30e-02  8.35e-01  1.13e-05  7.86e-02  6.33e-01  
  5  +4.8749e-01  +1.5124e+00  1.02e+00  4.01e-03  2.67e-01  1.20e-04  1.10e-02  9.52e-01  
  6  +4.6678e-01  +1.0610e+00  5.94e-01  1.61e-03  1.07e-01  1.01e-04  4.60e-03  6.08e-01  
  7  +4.5776e-01  +1.0005e+00  5.43e-01  1.21e-03  8.05e-02  1.22e-04  3.45e-03  3.14e-01  
  8  +4.5793e-01  +8.9308e-01  4.35e-01  1.11e-03  7.33e-02  1.31e-04  3.22e-03  3.57e-01  
  9  +4.2634e-01  +6.6784e-01  2.41e-01  4.93e-04  3.24e-02  8.21e-05  1.53e-03  5.62e-01  
 10  +4.0296e-01  +5.1990e-01  1.17e-01  2.37e-04  1.55e-02  4.07e-05  8.04e-04  5.39e-01  
 11  +3.8677e-01  +4.3205e-01  4.53e-02  8.94e-05  5.81e-03  1.75e-05  3.27e-04  6.61e-01  
 12  +3.7931e-01  +3.9568e-01  1.64e-02  3.16e-05  2.05e-03  8.41e-06  1.22e-04  9.36e-01  
 13  +3.7447e-01  +3.7621e-01  1.74e-03  3.33e-06  2.16e-04  9.56e-07  1.33e-05  9.43e-01  
 14  +3.7381e-01  +3.7382e-01  1.80e-05  3.44e-08  2.23e-06  9.75e-09  1.38e-07  9.90e-01  
 15  +3.7380e-01  +3.7380e-01  1.80e-07  3.44e-10  2.23e-08  9.75e-11  1.38e-09  9.90e-01  
 16  +3.7380e-01  +3.7380e-01  1.80e-09  3.44e-12  2.23e-10  9.76e-13  1.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.5269ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:10 PM: Optimal value: 3.738e-01
(CVXPY) Oct 06 03:58:10 PM: Compilation took 9.835e-03 seconds
(CVXPY) Oct 06 03:58:10 PM: Solver (including time spent in interface) took 1.523e-02 seconds
Iteration: 5, Objective: 0.3738
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:10 PM: Your problem has 552 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Finished problem compilation (took 2.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 552
  constraints   = 1052
  nnz(P)        = 0
  nnz(A)        = 6174
  cones (total) = 1
    : Nonnegative = 1,  numel = 1052

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0136e+02  5.01e+02  9.55e-01  3.21e+01  1.00e+00  1.01e+00   ------   
  1  +5.8674e-01  +1.0419e+02  1.04e+02  3.84e-01  1.91e+01  3.88e-03  5.41e-01  6.20e-01  
  2  +5.3606e-01  +1.2950e+01  1.24e+01  1.23e-01  7.72e+00  1.27e-02  2.29e-01  8.92e-01  
  3  +5.0383e-01  +2.5670e+00  2.06e+00  4.29e-02  2.64e+00  2.44e-05  1.98e-01  4.91e-01  
  4  +5.0060e-01  +1.0866e+00  5.86e-01  1.24e-02  7.96e-01  1.14e-05  7.27e-02  6.55e-01  
  5  +4.8892e-01  +1.9261e+00  1.44e+00  5.59e-03  3.72e-01  1.36e-04  1.52e-02  9.62e-01  
  6  +4.6513e-01  +1.1289e+00  6.64e-01  1.71e-03  1.14e-01  9.79e-05  4.85e-03  6.92e-01  
  7  +4.5487e-01  +1.0414e+00  5.87e-01  1.24e-03  8.21e-02  1.35e-04  3.52e-03  3.84e-01  
  8  +4.5525e-01  +9.1312e-01  4.58e-01  1.08e-03  7.16e-02  1.70e-04  3.14e-03  4.70e-01  
  9  +4.2169e-01  +6.5731e-01  2.36e-01  4.78e-04  3.14e-02  8.89e-05  1.50e-03  5.70e-01  
 10  +3.9929e-01  +5.1729e-01  1.18e-01  2.39e-04  1.55e-02  4.56e-05  8.22e-04  5.23e-01  
 11  +3.8198e-01  +4.2274e-01  4.08e-02  8.12e-05  5.26e-03  1.66e-05  3.06e-04  6.85e-01  
 12  +3.7786e-01  +3.9824e-01  2.04e-02  4.10e-05  2.65e-03  9.41e-06  1.63e-04  8.27e-01  
 13  +3.7601e-01  +3.8972e-01  1.37e-02  2.76e-05  1.79e-03  6.52e-06  1.11e-04  4.32e-01  
 14  +3.7541e-01  +3.8929e-01  1.39e-02  2.73e-05  1.77e-03  6.94e-06  1.08e-04  2.02e-01  
 15  +3.7107e-01  +3.7153e-01  4.64e-04  9.13e-07  5.90e-05  2.30e-07  3.75e-06  9.79e-01  
 16  +3.7090e-01  +3.7091e-01  4.66e-06  9.17e-09  5.93e-07  2.31e-09  3.77e-08  9.90e-01  
 17  +3.7090e-01  +3.7090e-01  4.66e-08  9.17e-11  5.93e-09  2.31e-11  3.77e-10  9.90e-01  
 18  +3.7090e-01  +3.7090e-01  4.66e-10  9.17e-13  5.93e-11  2.31e-13  3.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.8468ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:10 PM: Optimal value: 3.709e-01
(CVXPY) Oct 06 03:58:10 PM: Compilation took 2.007e-03 seconds
(CVXPY) Oct 06 03:58:10 PM: Solver (including time spent in interface) took 1.824e-02 seconds
Iteration: 6, Objective: 0.3709
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:10 PM: Your problem has 558 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Finished problem compilation (took 1.002e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 558
  constraints   = 1058
  nnz(P)        = 0
  nnz(A)        = 6291
  cones (total) = 1
    : Nonnegative = 1,  numel = 1058

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0135e+02  5.01e+02  9.55e-01  3.21e+01  1.00e+00  1.01e+00   ------   
  1  +5.8649e-01  +1.0422e+02  1.04e+02  3.84e-01  1.90e+01  3.89e-03  5.41e-01  6.20e-01  
  2  +5.3575e-01  +1.2882e+01  1.23e+01  1.22e-01  7.64e+00  1.27e-02  2.28e-01  8.95e-01  
  3  +5.0378e-01  +2.5572e+00  2.05e+00  4.27e-02  2.63e+00  2.46e-05  1.96e-01  5.02e-01  
  4  +5.0052e-01  +1.0709e+00  5.70e-01  1.21e-02  7.73e-01  1.16e-05  6.90e-02  6.72e-01  
  5  +4.8862e-01  +1.9498e+00  1.46e+00  5.56e-03  3.70e-01  1.42e-04  1.50e-02  9.68e-01  
  6  +4.6510e-01  +1.2023e+00  7.37e-01  1.85e-03  1.23e-01  1.10e-04  5.21e-03  6.64e-01  
  7  +4.5447e-01  +1.0854e+00  6.31e-01  1.38e-03  9.17e-02  1.24e-04  3.94e-03  3.06e-01  
  8  +4.5097e-01  +9.0885e-01  4.58e-01  1.05e-03  6.92e-02  1.78e-04  3.05e-03  5.92e-01  
  9  +4.1435e-01  +5.9497e-01  1.81e-01  3.81e-04  2.49e-02  6.09e-05  1.23e-03  6.95e-01  
 10  +3.9210e-01  +4.7081e-01  7.87e-02  1.61e-04  1.05e-02  3.10e-05  5.75e-04  6.67e-01  
 11  +3.8422e-01  +4.3360e-01  4.94e-02  9.81e-05  6.35e-03  2.11e-05  3.63e-04  4.63e-01  
 12  +3.7601e-01  +3.9324e-01  1.72e-02  3.40e-05  2.20e-03  9.80e-06  1.32e-04  9.90e-01  
 13  +3.7062e-01  +3.7263e-01  2.01e-03  3.93e-06  2.54e-04  1.11e-06  1.60e-05  9.18e-01  
 14  +3.6991e-01  +3.6993e-01  2.07e-05  4.05e-08  2.61e-06  1.13e-08  1.66e-07  9.90e-01  
 15  +3.6990e-01  +3.6990e-01  2.07e-07  4.05e-10  2.61e-08  1.13e-10  1.66e-09  9.90e-01  
 16  +3.6990e-01  +3.6990e-01  2.07e-09  4.05e-12  2.61e-10  1.13e-12  1.66e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6195ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:10 PM: Optimal value: 3.699e-01
(CVXPY) Oct 06 03:58:10 PM: Compilation took 1.002e-02 seconds
(CVXPY) Oct 06 03:58:10 PM: Solver (including time spent in interface) took 1.011e-02 seconds
Iteration: 7, Objective: 0.3699
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:10 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:10 PM: Finished problem compilation (took 4.798e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 6305
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0135e+02  5.01e+02  9.55e-01  3.21e+01  1.00e+00  1.01e+00   ------   
  1  +5.8644e-01  +1.0424e+02  1.04e+02  3.85e-01  1.90e+01  3.89e-03  5.41e-01  6.20e-01  
  2  +5.3571e-01  +1.2875e+01  1.23e+01  1.22e-01  7.63e+00  1.27e-02  2.28e-01  8.95e-01  
  3  +5.0378e-01  +2.5580e+00  2.05e+00  4.28e-02  2.63e+00  2.47e-05  1.96e-01  5.02e-01  
  4  +5.0050e-01  +1.0656e+00  5.65e-01  1.20e-02  7.65e-01  1.17e-05  6.83e-02  6.76e-01  
  5  +4.8878e-01  +1.9682e+00  1.48e+00  5.65e-03  3.75e-01  1.43e-04  1.53e-02  9.70e-01  
  6  +4.6580e-01  +1.2290e+00  7.63e-01  1.93e-03  1.28e-01  1.12e-04  5.43e-03  6.55e-01  
  7  +4.5445e-01  +1.0951e+00  6.41e-01  1.42e-03  9.37e-02  1.22e-04  4.04e-03  3.15e-01  
  8  +4.5232e-01  +9.3787e-01  4.86e-01  1.11e-03  7.35e-02  1.77e-04  3.22e-03  5.39e-01  
  9  +4.2781e-01  +7.1487e-01  2.87e-01  6.21e-04  4.07e-02  1.01e-04  1.93e-03  4.75e-01  
 10  +4.0097e-01  +5.2937e-01  1.28e-01  2.69e-04  1.75e-02  4.25e-05  9.22e-04  5.71e-01  
 11  +3.8622e-01  +4.4685e-01  6.06e-02  1.23e-04  7.95e-03  2.25e-05  4.49e-04  5.95e-01  
 12  +3.8197e-01  +4.2637e-01  4.44e-02  8.83e-05  5.71e-03  1.71e-05  3.30e-04  3.08e-01  
 13  +3.7319e-01  +3.8280e-01  9.60e-03  1.89e-05  1.22e-03  4.88e-06  7.48e-05  9.42e-01  
 14  +3.7013e-01  +3.7075e-01  6.18e-04  1.21e-06  7.81e-05  3.22e-07  4.93e-06  9.85e-01  
 15  +3.6990e-01  +3.6991e-01  6.21e-06  1.21e-08  7.84e-07  3.23e-09  4.97e-08  9.90e-01  
 16  +3.6990e-01  +3.6990e-01  6.21e-08  1.21e-10  7.84e-09  3.23e-11  4.97e-10  9.90e-01  
 17  +3.6990e-01  +3.6990e-01  6.21e-10  1.21e-12  7.84e-11  3.23e-13  4.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.372ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:11 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:11 PM: Optimal value: 3.699e-01
(CVXPY) Oct 06 03:58:11 PM: Compilation took 4.798e-03 seconds
(CVXPY) Oct 06 03:58:11 PM: Solver (including time spent in interface) took 1.366e-02 seconds
FULL MODEL:
  Accruacy: 0.627
  Our objective: 0.25400000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)                       <-- (term's our objective: 0.092)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1)                       <-- (term's our objective: 0.088)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.242270469665527
Best over terms:
  Our final objective: 0.09199999999999998
    Its accruacy: 0.546
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.09199999999999998
  Highest accruacy: 0.546
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

