Command:
python test_script.py -s constant_subclass -d 3 -n 5000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15599999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 3.

Computed total variation: 0.156
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:47:32 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:47:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:47:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:47:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:47:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:47:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:47:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:47:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:47:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:47:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:47:32 PM: Finished problem compilation (took 4.464e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 15007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5007e+03  2.50e+03  9.77e-01  5.51e+01  1.00e+00  1.00e+00   ------   
  1  +6.2007e-01  +4.6378e+02  4.63e+02  3.04e-01  2.86e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5566e-01  +7.9507e+01  7.90e+01  1.33e-01  1.49e+01  6.69e-03  2.20e-01  6.64e-01  
  3  +5.0843e-01  +1.2979e+01  1.25e+01  8.55e-02  9.20e+00  1.07e-05  2.18e-01  6.44e-02  
  4  +5.0001e-01  +1.0543e+00  5.54e-01  5.24e-03  5.78e-01  5.13e-06  1.61e-01  6.44e-01  
  5  +4.9995e-01  +6.2148e-01  1.22e-01  1.15e-03  1.27e-01  1.73e-06  3.14e-02  8.24e-01  
  6  +4.9262e-01  +1.3989e+00  9.06e-01  1.19e-03  1.33e-01  9.62e-05  3.87e-03  9.66e-01  
  7  +4.7633e-01  +8.0073e-01  3.24e-01  1.65e-04  1.84e-02  1.41e-04  5.36e-04  8.66e-01  
  8  +4.6339e-01  +4.9895e-01  3.56e-02  1.72e-05  1.93e-03  1.35e-06  6.13e-05  9.33e-01  
  9  +4.5310e-01  +4.5599e-01  2.90e-03  1.20e-06  1.34e-04  1.70e-07  5.07e-06  9.55e-01  
 10  +4.5231e-01  +4.5235e-01  3.75e-05  1.55e-08  1.73e-06  2.17e-09  6.61e-08  9.87e-01  
 11  +4.5230e-01  +4.5230e-01  3.75e-07  1.55e-10  1.73e-08  2.17e-11  6.61e-10  9.90e-01  
 12  +4.5230e-01  +4.5230e-01  3.75e-09  1.55e-12  1.73e-10  2.18e-13  6.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.3711ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:32 PM: Problem status: optimal
(CVXPY) Oct 06 03:47:32 PM: Optimal value: 4.523e-01
(CVXPY) Oct 06 03:47:32 PM: Compilation took 4.464e-02 seconds
(CVXPY) Oct 06 03:47:32 PM: Solver (including time spent in interface) took 3.030e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4523
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:47:32 PM: Your problem has 2510 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:47:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:47:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:47:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:47:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:47:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:47:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:47:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:47:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:47:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:47:32 PM: Finished problem compilation (took 1.591e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2510
  constraints   = 5010
  nnz(P)        = 0
  nnz(A)        = 17105
  cones (total) = 1
    : Nonnegative = 1,  numel = 5010

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0001e-01  +2.5016e+03  2.50e+03  9.77e-01  5.77e+01  1.00e+00  1.00e+00   ------   
  1  +6.1979e-01  +4.6433e+02  4.64e+02  3.05e-01  3.00e+01  4.25e-03  4.37e-01  6.93e-01  
  2  +5.5535e-01  +7.9194e+01  7.86e+01  1.33e-01  1.56e+01  6.74e-03  2.20e-01  6.67e-01  
  3  +5.0809e-01  +1.2615e+01  1.21e+01  8.40e-02  9.45e+00  1.05e-05  2.18e-01  6.98e-02  
  4  +5.0123e-01  +2.8590e+00  2.36e+00  2.20e-02  2.49e+00  6.36e-06  2.00e-01  1.88e-01  
  5  +5.0001e-01  +6.9382e-01  1.94e-01  1.83e-03  2.13e-01  1.65e-06  4.77e-02  9.14e-01  
  6  +4.9994e-01  +8.0483e-01  3.05e-01  2.82e-03  3.27e-01  3.51e-06  3.07e-02  6.22e-01  
  7  +4.9982e-01  +8.0912e-01  3.09e-01  2.73e-03  3.17e-01  4.85e-06  2.07e-02  3.52e-01  
  8  +5.0023e-01  +8.0730e-01  3.07e-01  2.66e-03  3.09e-01  8.23e-07  1.73e-02  9.90e-01  
  9  +4.9987e-01  +8.1240e-01  3.13e-01  2.83e-04  3.35e-02  1.57e-05  7.84e-04  9.68e-01  
 10  +4.9875e-01  +7.8208e-01  2.83e-01  2.14e-04  2.54e-02  1.77e-05  5.92e-04  3.65e-01  
 11  +4.9679e-01  +7.5866e-01  2.62e-01  1.85e-04  2.19e-02  1.73e-05  5.13e-04  1.95e-01  
 12  +4.9194e-01  +7.0688e-01  2.15e-01  1.41e-04  1.67e-02  1.49e-05  3.94e-04  4.45e-01  
 13  +4.8949e-01  +6.7228e-01  1.83e-01  1.13e-04  1.33e-02  1.34e-05  3.18e-04  9.59e-01  
 14  +4.8646e-01  +6.5764e-01  1.71e-01  8.56e-05  1.01e-02  1.51e-05  2.39e-04  3.92e-01  
 15  +4.8051e-01  +6.3377e-01  1.53e-01  7.65e-05  9.00e-03  1.30e-05  2.27e-04  4.99e-01  
 16  +4.7729e-01  +6.2584e-01  1.49e-01  6.64e-05  7.80e-03  1.39e-05  1.94e-04  2.49e-01  
 17  +4.7455e-01  +5.9725e-01  1.23e-01  5.96e-05  7.00e-03  9.30e-06  1.92e-04  1.69e-01  
 18  +4.5677e-01  +5.3431e-01  7.75e-02  2.69e-05  3.16e-03  8.05e-06  8.57e-05  6.08e-01  
 19  +4.5242e-01  +5.1889e-01  6.65e-02  2.30e-05  2.69e-03  7.35e-06  7.19e-05  2.52e-01  
 20  +4.4238e-01  +4.9623e-01  5.39e-02  1.71e-05  2.01e-03  7.02e-06  5.18e-05  4.28e-01  
 21  +4.2335e-01  +4.2599e-01  2.64e-03  8.33e-07  9.74e-05  2.02e-07  2.67e-06  9.78e-01  
 22  +4.2211e-01  +4.2214e-01  2.68e-05  8.41e-09  9.83e-07  2.02e-09  2.70e-08  9.90e-01  
 23  +4.2210e-01  +4.2210e-01  2.68e-07  8.41e-11  9.83e-09  2.02e-11  2.70e-10  9.90e-01  
 24  +4.2210e-01  +4.2210e-01  2.68e-09  8.41e-13  9.83e-11  2.02e-13  2.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.3014ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:32 PM: Problem status: optimal
(CVXPY) Oct 06 03:47:32 PM: Optimal value: 4.221e-01
(CVXPY) Oct 06 03:47:32 PM: Compilation took 1.591e-02 seconds
(CVXPY) Oct 06 03:47:32 PM: Solver (including time spent in interface) took 5.757e-02 seconds
FULL MODEL:
  Accruacy: 0.578
  Our objective: 0.15599999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.156)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.939851760864258
Best over terms:
  Our final objective: 0.15599999999999997
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15599999999999997
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

