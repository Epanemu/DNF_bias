Command:
python test_script.py -s constant_subclass -d 5 -n 10000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1378
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.1382
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:55 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:55 PM: Finished problem compilation (took 8.014e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  9.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +1.0020e+03  1.00e+03  3.64e-01  5.42e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4628e-01  +1.4308e+02  1.43e+02  1.45e-01  2.69e+01  9.84e-03  2.35e-01  7.78e-01  
  3  +5.1088e-01  +3.4034e+01  3.35e+01  1.16e-01  2.11e+01  2.35e-05  2.32e-01  8.82e-02  
  4  +5.0017e-01  +1.2183e+00  7.18e-01  4.84e-03  8.95e-01  4.40e-06  1.36e-01  9.90e-01  
  5  +5.0001e-01  +6.3125e-01  1.31e-01  8.77e-04  1.63e-01  1.65e-06  3.09e-02  8.10e-01  
  6  +4.9948e-01  +7.3685e-01  2.37e-01  8.92e-04  1.67e-01  2.28e-05  3.48e-03  9.31e-01  
  7  +4.9099e-01  +6.7045e-01  1.79e-01  6.07e-05  1.14e-02  3.07e-04  1.82e-04  9.48e-01  
  8  +4.7921e-01  +5.7302e-01  9.38e-02  2.66e-05  4.97e-03  9.79e-05  8.45e-05  6.66e-01  
  9  +4.6690e-01  +5.0005e-01  3.32e-02  8.40e-06  1.57e-03  1.02e-06  2.86e-05  9.05e-01  
 10  +4.5867e-01  +4.6243e-01  3.76e-03  8.71e-07  1.63e-04  1.02e-07  3.22e-06  9.00e-01  
 11  +4.5726e-01  +4.5744e-01  1.84e-04  3.78e-08  7.07e-06  6.90e-09  1.58e-07  9.77e-01  
 12  +4.5720e-01  +4.5720e-01  1.85e-06  3.79e-10  7.07e-08  6.92e-11  1.59e-09  9.90e-01  
 13  +4.5720e-01  +4.5720e-01  1.85e-08  3.79e-12  7.07e-10  6.92e-13  1.59e-11  9.90e-01  
 14  +4.5720e-01  +4.5720e-01  1.85e-10  3.78e-14  7.08e-12  7.25e-15  1.66e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.864ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:55 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:55 PM: Optimal value: 4.572e-01
(CVXPY) Oct 06 03:54:55 PM: Compilation took 8.014e-02 seconds
(CVXPY) Oct 06 03:54:55 PM: Solver (including time spent in interface) took 1.016e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4572
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:55 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:55 PM: Finished problem compilation (took 2.991e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 48913
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0011e+03  5.00e+03  9.85e-01  9.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.9950e-01  +1.0023e+03  1.00e+03  3.65e-01  5.71e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4608e-01  +1.4267e+02  1.42e+02  1.45e-01  2.82e+01  9.88e-03  2.35e-01  7.80e-01  
  3  +5.1077e-01  +3.3812e+01  3.33e+01  1.15e-01  2.21e+01  2.35e-05  2.32e-01  9.06e-02  
  4  +5.0025e-01  +1.5094e+00  1.01e+00  6.81e-03  1.32e+00  4.84e-06  1.52e-01  8.14e-01  
  5  +5.0005e-01  +7.8324e-01  2.83e-01  1.90e-03  3.71e-01  2.00e-06  5.93e-02  6.45e-01  
  6  +5.0003e-01  +7.7989e-01  2.80e-01  1.86e-03  3.65e-01  2.62e-06  3.59e-02  4.78e-01  
  7  +4.9999e-01  +8.0082e-01  3.01e-01  1.93e-03  3.78e-01  3.93e-06  1.84e-02  6.59e-01  
  8  +4.9803e-01  +7.0227e-01  2.04e-01  2.15e-04  4.26e-02  6.26e-05  6.34e-04  9.70e-01  
  9  +4.9503e-01  +6.8031e-01  1.85e-01  9.83e-05  1.95e-02  1.14e-04  2.82e-04  5.73e-01  
 10  +4.8941e-01  +6.3768e-01  1.48e-01  4.79e-05  9.48e-03  1.08e-04  1.36e-04  7.26e-01  
 11  +4.8989e-01  +6.4129e-01  1.51e-01  4.76e-05  9.42e-03  1.06e-04  1.34e-04  7.45e-02  
 12  +4.8843e-01  +6.3997e-01  1.52e-01  3.81e-05  7.55e-03  1.12e-04  1.06e-04  3.17e-01  
 13  +4.8629e-01  +6.2923e-01  1.43e-01  3.48e-05  6.89e-03  7.65e-05  9.76e-05  3.17e-01  
 14  +4.7525e-01  +5.8580e-01  1.11e-01  2.18e-05  4.31e-03  3.58e-05  6.23e-05  6.65e-01  
 15  +4.6921e-01  +5.6385e-01  9.46e-02  1.77e-05  3.50e-03  2.75e-05  5.13e-05  2.60e-01  
 16  +4.6842e-01  +5.6059e-01  9.22e-02  1.72e-05  3.40e-03  2.37e-05  4.99e-05  1.40e-01  
 17  +4.4598e-01  +4.8038e-01  3.44e-02  5.64e-06  1.11e-03  2.57e-07  1.72e-05  9.69e-01  
 18  +4.3277e-01  +4.3627e-01  3.50e-03  5.49e-07  1.08e-04  4.59e-08  1.74e-06  9.09e-01  
 19  +4.3122e-01  +4.3126e-01  3.91e-05  6.10e-09  1.20e-06  5.04e-10  1.94e-08  9.89e-01  
 20  +4.3120e-01  +4.3120e-01  3.91e-07  6.10e-11  1.20e-08  5.04e-12  1.94e-10  9.90e-01  
 21  +4.3120e-01  +4.3120e-01  3.91e-09  6.10e-13  1.20e-10  5.08e-14  1.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 148.9359ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:55 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:55 PM: Optimal value: 4.312e-01
(CVXPY) Oct 06 03:54:55 PM: Compilation took 2.991e-02 seconds
(CVXPY) Oct 06 03:54:55 PM: Solver (including time spent in interface) took 1.603e-01 seconds
Iteration: 2, Objective: 0.4312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:55 PM: Your problem has 5022 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:55 PM: Finished problem compilation (took 3.142e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5022
  constraints   = 10022
  nnz(P)        = 0
  nnz(A)        = 49089
  cones (total) = 1
    : Nonnegative = 1,  numel = 10022

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0011e+03  5.00e+03  9.85e-01  9.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.9952e-01  +1.0022e+03  1.00e+03  3.65e-01  5.71e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4609e-01  +1.4268e+02  1.42e+02  1.45e-01  2.82e+01  9.87e-03  2.35e-01  7.79e-01  
  3  +5.1077e-01  +3.3802e+01  3.33e+01  1.15e-01  2.21e+01  2.35e-05  2.32e-01  9.06e-02  
  4  +5.0025e-01  +1.5028e+00  1.00e+00  6.76e-03  1.31e+00  4.83e-06  1.52e-01  8.17e-01  
  5  +5.0005e-01  +7.7050e-01  2.70e-01  1.81e-03  3.54e-01  1.96e-06  5.69e-02  6.60e-01  
  6  +5.0003e-01  +7.7631e-01  2.76e-01  1.84e-03  3.60e-01  2.63e-06  3.53e-02  4.70e-01  
  7  +5.0001e-01  +7.9748e-01  2.97e-01  1.93e-03  3.78e-01  3.55e-06  2.07e-02  5.86e-01  
  8  +4.9875e-01  +7.1417e-01  2.15e-01  3.40e-04  6.72e-02  4.10e-05  1.03e-03  9.56e-01  
  9  +4.9441e-01  +6.8148e-01  1.87e-01  8.60e-05  1.70e-02  1.36e-04  2.46e-04  7.76e-01  
 10  +4.8599e-01  +6.2830e-01  1.42e-01  3.73e-05  7.38e-03  1.60e-04  1.06e-04  6.55e-01  
 11  +4.8573e-01  +6.2608e-01  1.40e-01  3.68e-05  7.28e-03  1.42e-04  1.04e-04  1.09e-01  
 12  +4.8322e-01  +6.1912e-01  1.36e-01  3.20e-05  6.33e-03  1.09e-04  9.08e-05  3.49e-01  
 13  +4.7611e-01  +5.9473e-01  1.19e-01  2.41e-05  4.77e-03  4.26e-05  6.90e-05  6.58e-01  
 14  +4.7015e-01  +5.7196e-01  1.02e-01  1.96e-05  3.86e-03  3.03e-05  5.68e-05  3.13e-01  
 15  +4.6741e-01  +5.6046e-01  9.31e-02  1.76e-05  3.48e-03  1.88e-05  5.15e-05  3.83e-01  
 16  +4.5267e-01  +5.0703e-01  5.44e-02  9.41e-06  1.85e-03  9.93e-06  2.85e-05  4.76e-01  
 17  +4.3316e-01  +4.3768e-01  4.52e-03  7.22e-07  1.42e-04  1.02e-07  2.30e-06  9.66e-01  
 18  +4.3128e-01  +4.3165e-01  3.76e-04  6.00e-08  1.18e-05  9.52e-09  1.93e-07  9.21e-01  
 19  +4.3110e-01  +4.3111e-01  4.79e-06  7.65e-10  1.50e-07  1.61e-10  2.48e-09  9.89e-01  
 20  +4.3110e-01  +4.3110e-01  4.79e-08  7.65e-12  1.50e-09  1.61e-12  2.48e-11  9.90e-01  
 21  +4.3110e-01  +4.3110e-01  4.79e-10  7.64e-14  1.50e-11  1.61e-14  2.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 142.9615ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:55 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:55 PM: Optimal value: 4.311e-01
(CVXPY) Oct 06 03:54:55 PM: Compilation took 3.142e-02 seconds
(CVXPY) Oct 06 03:54:55 PM: Solver (including time spent in interface) took 1.522e-01 seconds
FULL MODEL:
  Accruacy: 0.5691
  Our objective: 0.13820000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.1378)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.0004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.339646577835083
Best over terms:
  Our final objective: 0.1378
    Its accruacy: 0.5689
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1378
  Highest accruacy: 0.5689
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

