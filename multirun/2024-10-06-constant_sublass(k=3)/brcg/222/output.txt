Command:
python test_script.py -s constant_subclass -d 6 -n 1000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.218
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 6.

Computed total variation: 0.302
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:17 PM: Your problem has 513 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Finished problem compilation (took 5.009e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 513
  constraints   = 1013
  nnz(P)        = 0
  nnz(A)        = 4513
  cones (total) = 1
    : Nonnegative = 1,  numel = 1013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9985e-01  +5.0094e+02  5.00e+02  9.53e-01  3.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.9267e-01  +1.0327e+02  1.03e+02  3.71e-01  1.84e+01  3.92e-03  5.27e-01  6.27e-01  
  2  +5.4009e-01  +1.3696e+01  1.32e+01  1.29e-01  8.00e+00  1.17e-02  2.38e-01  8.44e-01  
  3  +5.0462e-01  +2.6916e+00  2.19e+00  4.46e-02  2.64e+00  2.11e-05  2.18e-01  3.48e-01  
  4  +5.0052e-01  +8.3905e-01  3.39e-01  7.25e-03  4.48e-01  7.83e-06  6.53e-02  7.70e-01  
  5  +4.9332e-01  +9.7195e-01  4.79e-01  2.56e-03  1.63e-01  7.93e-05  7.43e-03  9.41e-01  
  6  +4.7583e-01  +7.6811e-01  2.92e-01  7.96e-04  5.06e-02  1.03e-04  2.34e-03  7.06e-01  
  7  +4.5962e-01  +6.3475e-01  1.75e-01  4.61e-04  2.91e-02  5.60e-05  1.46e-03  4.37e-01  
  8  +4.3744e-01  +4.7238e-01  3.49e-02  8.95e-05  5.61e-03  1.21e-05  3.20e-04  9.90e-01  
  9  +4.2993e-01  +4.3515e-01  5.22e-03  1.28e-05  8.02e-04  1.75e-06  4.94e-05  8.58e-01  
 10  +4.2825e-01  +4.2876e-01  5.05e-04  1.07e-06  6.69e-05  1.96e-07  4.77e-06  9.53e-01  
 11  +4.2810e-01  +4.2811e-01  5.10e-06  1.08e-08  6.74e-07  1.98e-09  4.83e-08  9.90e-01  
 12  +4.2810e-01  +4.2810e-01  5.10e-08  1.08e-10  6.74e-09  1.98e-11  4.83e-10  9.90e-01  
 13  +4.2810e-01  +4.2810e-01  5.10e-10  1.08e-12  6.74e-11  1.99e-13  4.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.7668ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:17 PM: Optimal value: 4.281e-01
(CVXPY) Oct 06 03:58:17 PM: Compilation took 5.009e-02 seconds
(CVXPY) Oct 06 03:58:17 PM: Solver (including time spent in interface) took 1.212e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:17 PM: Your problem has 523 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Finished problem compilation (took 3.621e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 1023
  nnz(P)        = 0
  nnz(A)        = 5722
  cones (total) = 1
    : Nonnegative = 1,  numel = 1023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0136e+02  5.01e+02  9.54e-01  3.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.9120e-01  +1.0372e+02  1.03e+02  3.76e-01  1.97e+01  3.90e-03  5.37e-01  6.24e-01  
  2  +5.3812e-01  +1.3330e+01  1.28e+01  1.28e-01  8.31e+00  1.22e-02  2.37e-01  8.64e-01  
  3  +5.0352e-01  +2.4741e+00  1.97e+00  4.08e-02  2.58e+00  2.13e-05  2.09e-01  4.62e-01  
  4  +5.0069e-01  +1.0628e+00  5.62e-01  1.20e-02  7.83e-01  9.17e-06  8.02e-02  6.40e-01  
  5  +4.9320e-01  +8.7258e-01  3.79e-01  2.63e-03  1.80e-01  5.09e-05  7.39e-03  9.60e-01  
  6  +4.8233e-01  +7.9475e-01  3.12e-01  1.21e-03  8.27e-02  7.62e-05  3.33e-03  5.72e-01  
  7  +4.7729e-01  +7.7930e-01  3.02e-01  9.32e-04  6.39e-02  9.31e-05  2.56e-03  3.62e-01  
  8  +4.6842e-01  +7.3935e-01  2.71e-01  6.64e-04  4.56e-02  1.04e-04  1.84e-03  4.05e-01  
  9  +4.5478e-01  +6.6905e-01  2.14e-01  5.30e-04  3.62e-02  8.90e-05  1.52e-03  6.47e-01  
 10  +4.2359e-01  +5.3057e-01  1.07e-01  2.05e-04  1.40e-02  5.23e-05  6.15e-04  6.57e-01  
 11  +4.0619e-01  +4.5965e-01  5.35e-02  9.86e-05  6.77e-03  2.74e-05  3.03e-04  6.06e-01  
 12  +3.9386e-01  +4.1240e-01  1.85e-02  3.27e-05  2.30e-03  1.02e-05  1.02e-04  6.91e-01  
 13  +3.9284e-01  +4.0957e-01  1.67e-02  2.74e-05  2.00e-03  1.04e-05  8.21e-05  2.71e-01  
 14  +3.9140e-01  +4.0381e-01  1.24e-02  2.22e-05  1.54e-03  7.28e-06  7.41e-05  6.36e-01  
 15  +3.9132e-01  +4.0356e-01  1.22e-02  2.19e-05  1.52e-03  7.29e-06  7.24e-05  6.69e-02  
 16  +3.8989e-01  +3.9821e-01  8.33e-03  1.47e-05  1.03e-03  5.41e-06  4.74e-05  4.94e-01  
 17  +3.8824e-01  +3.9472e-01  6.48e-03  1.03e-05  7.68e-04  4.97e-06  3.14e-05  5.08e-01  
 18  +3.8535e-01  +3.8546e-01  1.06e-04  1.68e-07  1.26e-05  8.20e-08  5.16e-07  9.85e-01  
 19  +3.8530e-01  +3.8530e-01  1.06e-06  1.68e-09  1.26e-07  8.20e-10  5.16e-09  9.90e-01  
 20  +3.8530e-01  +3.8530e-01  1.07e-08  1.68e-11  1.26e-09  8.20e-12  5.16e-11  9.90e-01  
 21  +3.8530e-01  +3.8530e-01  1.07e-10  1.68e-13  1.26e-11  8.20e-14  5.16e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.001ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:17 PM: Optimal value: 3.853e-01
(CVXPY) Oct 06 03:58:17 PM: Compilation took 3.621e-03 seconds
(CVXPY) Oct 06 03:58:17 PM: Solver (including time spent in interface) took 1.673e-02 seconds
Iteration: 2, Objective: 0.3853
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:17 PM: Your problem has 533 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Finished problem compilation (took 5.107e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 1033
  nnz(P)        = 0
  nnz(A)        = 6052
  cones (total) = 1
    : Nonnegative = 1,  numel = 1033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9952e-01  +5.0136e+02  5.01e+02  9.54e-01  3.30e+01  1.00e+00  1.01e+00   ------   
  1  +5.9047e-01  +1.0368e+02  1.03e+02  3.77e-01  1.96e+01  3.90e-03  5.36e-01  6.24e-01  
  2  +5.3749e-01  +1.3186e+01  1.26e+01  1.26e-01  8.13e+00  1.22e-02  2.34e-01  8.71e-01  
  3  +5.0318e-01  +2.4070e+00  1.90e+00  3.95e-02  2.50e+00  2.12e-05  2.03e-01  5.02e-01  
  4  +5.0058e-01  +1.1227e+00  6.22e-01  1.31e-02  8.58e-01  1.03e-05  7.94e-02  6.25e-01  
  5  +4.9178e-01  +1.0490e+00  5.57e-01  3.62e-03  2.49e-01  5.89e-05  1.00e-02  9.26e-01  
  6  +4.7802e-01  +9.3022e-01  4.52e-01  1.60e-03  1.10e-01  8.92e-05  4.34e-03  5.78e-01  
  7  +4.6618e-01  +8.3965e-01  3.73e-01  1.01e-03  6.98e-02  1.07e-04  2.76e-03  5.21e-01  
  8  +4.6045e-01  +8.0967e-01  3.49e-01  8.55e-04  5.89e-02  1.14e-04  2.35e-03  2.44e-01  
  9  +4.4422e-01  +6.8591e-01  2.42e-01  5.80e-04  3.97e-02  1.17e-04  1.67e-03  9.90e-01  
 10  +4.1296e-01  +5.4530e-01  1.32e-01  2.68e-04  1.83e-02  6.31e-05  8.26e-04  5.33e-01  
 11  +3.8656e-01  +4.3244e-01  4.59e-02  8.86e-05  6.03e-03  2.65e-05  2.95e-04  9.90e-01  
 12  +3.7331e-01  +3.8069e-01  7.37e-03  1.40e-05  9.55e-04  4.04e-06  4.98e-05  8.75e-01  
 13  +3.7064e-01  +3.7124e-01  6.00e-04  1.12e-06  7.64e-05  3.42e-07  4.13e-06  9.66e-01  
 14  +3.7040e-01  +3.7042e-01  1.10e-05  2.06e-08  1.40e-06  5.68e-09  7.69e-08  9.84e-01  
 15  +3.7040e-01  +3.7040e-01  1.10e-07  2.06e-10  1.40e-08  5.67e-11  7.69e-10  9.90e-01  
 16  +3.7040e-01  +3.7040e-01  1.10e-09  2.06e-12  1.40e-10  5.67e-13  7.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8008ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:17 PM: Optimal value: 3.704e-01
(CVXPY) Oct 06 03:58:17 PM: Compilation took 5.107e-03 seconds
(CVXPY) Oct 06 03:58:17 PM: Solver (including time spent in interface) took 1.462e-02 seconds
Iteration: 3, Objective: 0.3704
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:17 PM: Your problem has 542 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Finished problem compilation (took 9.909e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 542
  constraints   = 1042
  nnz(P)        = 0
  nnz(A)        = 6239
  cones (total) = 1
    : Nonnegative = 1,  numel = 1042

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0190e+02  5.01e+02  9.55e-01  3.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.8897e-01  +1.0393e+02  1.03e+02  3.79e-01  1.95e+01  3.90e-03  5.39e-01  6.23e-01  
  2  +5.3663e-01  +1.3027e+01  1.25e+01  1.24e-01  7.98e+00  1.24e-02  2.32e-01  8.81e-01  
  3  +5.0299e-01  +2.3810e+00  1.88e+00  3.91e-02  2.47e+00  2.19e-05  1.98e-01  5.39e-01  
  4  +5.0028e-01  +1.1149e+00  6.15e-01  1.28e-02  8.38e-01  1.36e-05  6.98e-02  6.91e-01  
  5  +4.8338e-01  +1.2708e+00  7.87e-01  3.07e-03  2.11e-01  1.26e-04  8.19e-03  9.56e-01  
  6  +4.7190e-01  +1.1573e+00  6.85e-01  1.95e-03  1.34e-01  1.47e-04  5.22e-03  3.93e-01  
  7  +4.6250e-01  +1.0358e+00  5.73e-01  1.33e-03  9.13e-02  1.81e-04  3.56e-03  4.89e-01  
  8  +4.3607e-01  +6.8126e-01  2.45e-01  5.85e-04  3.99e-02  1.10e-04  1.70e-03  9.90e-01  
  9  +4.0350e-01  +5.2402e-01  1.21e-01  2.54e-04  1.73e-02  5.13e-05  7.95e-04  6.08e-01  
 10  +3.9833e-01  +5.0219e-01  1.04e-01  2.20e-04  1.50e-02  4.56e-05  7.06e-04  2.78e-01  
 11  +3.9337e-01  +4.8519e-01  9.18e-02  1.86e-04  1.27e-02  4.91e-05  5.96e-04  5.64e-01  
 12  +3.8460e-01  +4.4771e-01  6.31e-02  1.26e-04  8.62e-03  3.54e-05  4.18e-04  4.70e-01  
 13  +3.7987e-01  +4.2658e-01  4.67e-02  9.12e-05  6.27e-03  3.00e-05  3.06e-04  8.30e-01  
 14  +3.6662e-01  +3.7450e-01  7.88e-03  1.53e-05  1.06e-03  4.84e-06  5.49e-05  8.44e-01  
 15  +3.6378e-01  +3.6398e-01  2.07e-04  4.01e-07  2.78e-05  1.21e-07  1.46e-06  9.76e-01  
 16  +3.6370e-01  +3.6370e-01  2.07e-06  4.01e-09  2.78e-07  1.21e-09  1.46e-08  9.90e-01  
 17  +3.6370e-01  +3.6370e-01  2.07e-08  4.01e-11  2.78e-09  1.21e-11  1.47e-10  9.90e-01  
 18  +3.6370e-01  +3.6370e-01  2.07e-10  4.01e-13  2.78e-11  1.21e-13  1.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0153ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:17 PM: Optimal value: 3.637e-01
(CVXPY) Oct 06 03:58:17 PM: Compilation took 9.909e-03 seconds
(CVXPY) Oct 06 03:58:17 PM: Solver (including time spent in interface) took 1.197e-02 seconds
Iteration: 4, Objective: 0.3637
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:17 PM: Your problem has 552 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Finished problem compilation (took 1.012e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 552
  constraints   = 1052
  nnz(P)        = 0
  nnz(A)        = 6435
  cones (total) = 1
    : Nonnegative = 1,  numel = 1052

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0175e+02  5.01e+02  9.55e-01  3.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.8747e-01  +1.0411e+02  1.04e+02  3.81e-01  1.94e+01  3.90e-03  5.39e-01  6.22e-01  
  2  +5.3561e-01  +1.2814e+01  1.23e+01  1.23e-01  7.79e+00  1.26e-02  2.28e-01  8.92e-01  
  3  +5.0265e-01  +2.3257e+00  1.82e+00  3.81e-02  2.40e+00  2.25e-05  1.90e-01  5.91e-01  
  4  +4.9977e-01  +1.1444e+00  6.45e-01  1.30e-02  8.51e-01  1.76e-05  6.14e-02  7.31e-01  
  5  +4.8144e-01  +1.0978e+00  6.16e-01  2.70e-03  1.84e-01  1.18e-04  7.26e-03  9.19e-01  
  6  +4.8690e-01  +1.2504e+00  7.63e-01  2.17e-03  1.50e-01  2.52e-04  5.55e-03  5.74e-01  
  7  +4.7236e-01  +1.0924e+00  6.20e-01  1.47e-03  1.01e-01  2.39e-04  3.84e-03  3.94e-01  
  8  +4.3504e-01  +7.4741e-01  3.12e-01  7.08e-04  4.79e-02  1.07e-04  2.05e-03  7.01e-01  
  9  +3.9652e-01  +5.2833e-01  1.32e-01  2.85e-04  1.90e-02  4.04e-05  9.32e-04  6.46e-01  
 10  +3.8575e-01  +4.7818e-01  9.24e-02  1.92e-04  1.27e-02  3.37e-05  6.48e-04  4.41e-01  
 11  +3.7473e-01  +4.2726e-01  5.25e-02  1.07e-04  7.09e-03  3.11e-05  3.85e-04  9.90e-01  
 12  +3.6261e-01  +3.7710e-01  1.45e-02  2.88e-05  1.90e-03  8.12e-06  1.12e-04  7.42e-01  
 13  +3.5916e-01  +3.6297e-01  3.81e-03  7.46e-06  4.91e-04  2.14e-06  2.99e-05  8.38e-01  
 14  +3.5812e-01  +3.5896e-01  8.40e-04  1.64e-06  1.08e-04  4.41e-07  6.68e-06  9.20e-01  
 15  +3.5781e-01  +3.5783e-01  2.32e-05  4.52e-08  2.98e-06  1.21e-08  1.84e-07  9.80e-01  
 16  +3.5780e-01  +3.5780e-01  2.32e-07  4.52e-10  2.98e-08  1.21e-10  1.84e-09  9.90e-01  
 17  +3.5780e-01  +3.5780e-01  2.32e-09  4.52e-12  2.98e-10  1.21e-12  1.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.1734ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:17 PM: Optimal value: 3.578e-01
(CVXPY) Oct 06 03:58:17 PM: Compilation took 1.012e-02 seconds
(CVXPY) Oct 06 03:58:17 PM: Solver (including time spent in interface) took 1.512e-02 seconds
Iteration: 5, Objective: 0.3578
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:17 PM: Your problem has 553 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:17 PM: Finished problem compilation (took 9.519e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 553
  constraints   = 1053
  nnz(P)        = 0
  nnz(A)        = 6465
  cones (total) = 1
    : Nonnegative = 1,  numel = 1053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +5.0179e+02  5.01e+02  9.55e-01  3.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.8713e-01  +1.0415e+02  1.04e+02  3.81e-01  1.94e+01  3.90e-03  5.39e-01  6.22e-01  
  2  +5.3532e-01  +1.2754e+01  1.22e+01  1.22e-01  7.75e+00  1.26e-02  2.27e-01  8.95e-01  
  3  +5.0253e-01  +2.3038e+00  1.80e+00  3.76e-02  2.37e+00  2.26e-05  1.87e-01  6.10e-01  
  4  +4.9961e-01  +1.1561e+00  6.56e-01  1.31e-02  8.58e-01  1.89e-05  5.92e-02  7.40e-01  
  5  +4.8512e-01  +1.0675e+00  5.82e-01  3.20e-03  2.19e-01  9.34e-05  8.69e-03  8.80e-01  
  6  +4.8153e-01  +1.1042e+00  6.23e-01  2.28e-03  1.57e-01  1.53e-04  6.05e-03  4.48e-01  
  7  +4.6774e-01  +9.8106e-01  5.13e-01  1.39e-03  9.48e-02  1.92e-04  3.72e-03  6.77e-01  
  8  +4.3875e-01  +7.7470e-01  3.36e-01  7.84e-04  5.31e-02  1.29e-04  2.25e-03  5.34e-01  
  9  +3.9327e-01  +5.1538e-01  1.22e-01  2.61e-04  1.74e-02  4.93e-05  8.66e-04  9.52e-01  
 10  +3.8989e-01  +5.0092e-01  1.11e-01  2.41e-04  1.60e-02  4.59e-05  8.19e-04  1.88e-01  
 11  +3.8794e-01  +4.9395e-01  1.06e-01  2.28e-04  1.51e-02  4.55e-05  7.79e-04  1.43e-01  
 12  +3.8304e-01  +4.7447e-01  9.14e-02  1.93e-04  1.28e-02  4.15e-05  6.75e-04  2.96e-01  
 13  +3.6294e-01  +3.9097e-01  2.80e-02  5.69e-05  3.75e-03  1.14e-05  2.21e-04  6.99e-01  
 14  +3.5568e-01  +3.6115e-01  5.47e-03  1.10e-05  7.23e-04  2.21e-06  4.54e-05  8.11e-01  
 15  +3.5478e-01  +3.5745e-01  2.67e-03  5.38e-06  3.54e-04  1.17e-06  2.26e-05  8.08e-01  
 16  +3.5408e-01  +3.5482e-01  7.35e-04  1.47e-06  9.66e-05  3.48e-07  6.16e-06  8.31e-01  
 17  +3.5380e-01  +3.5381e-01  9.75e-06  1.94e-08  1.28e-06  4.53e-09  8.16e-08  9.90e-01  
 18  +3.5380e-01  +3.5380e-01  9.75e-08  1.94e-10  1.28e-08  4.53e-11  8.16e-10  9.90e-01  
 19  +3.5380e-01  +3.5380e-01  9.75e-10  1.94e-12  1.28e-10  4.54e-13  8.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.4803ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:17 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:17 PM: Optimal value: 3.538e-01
(CVXPY) Oct 06 03:58:17 PM: Compilation took 9.519e-03 seconds
(CVXPY) Oct 06 03:58:17 PM: Solver (including time spent in interface) took 1.497e-02 seconds
Iteration: 6, Objective: 0.3538
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:18 PM: Your problem has 558 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:18 PM: Finished problem compilation (took 7.823e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 558
  constraints   = 1058
  nnz(P)        = 0
  nnz(A)        = 6534
  cones (total) = 1
    : Nonnegative = 1,  numel = 1058

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0188e+02  5.01e+02  9.55e-01  3.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.8622e-01  +1.0428e+02  1.04e+02  3.83e-01  1.93e+01  3.90e-03  5.41e-01  6.21e-01  
  2  +5.3490e-01  +1.2681e+01  1.21e+01  1.21e-01  7.66e+00  1.28e-02  2.26e-01  9.01e-01  
  3  +5.0237e-01  +2.2799e+00  1.78e+00  3.72e-02  2.34e+00  2.30e-05  1.84e-01  6.38e-01  
  4  +4.9912e-01  +1.1397e+00  6.41e-01  1.23e-02  8.10e-01  2.19e-05  5.16e-02  7.84e-01  
  5  +4.8834e-01  +1.0596e+00  5.71e-01  4.07e-03  2.77e-01  7.51e-05  1.13e-02  8.09e-01  
  6  +4.8459e-01  +1.0875e+00  6.03e-01  2.80e-03  1.91e-01  1.23e-04  7.57e-03  4.93e-01  
  7  +4.7052e-01  +9.8548e-01  5.15e-01  1.56e-03  1.06e-01  2.02e-04  4.18e-03  9.90e-01  
  8  +4.3590e-01  +7.6818e-01  3.32e-01  7.40e-04  5.00e-02  1.56e-04  2.12e-03  5.75e-01  
  9  +3.9151e-01  +5.1676e-01  1.25e-01  2.71e-04  1.80e-02  4.24e-05  8.98e-04  6.57e-01  
 10  +3.8893e-01  +5.0512e-01  1.16e-01  2.56e-04  1.69e-02  4.06e-05  8.63e-04  1.42e-01  
 11  +3.8737e-01  +5.0025e-01  1.13e-01  2.45e-04  1.62e-02  4.34e-05  8.31e-04  1.83e-01  
 12  +3.6699e-01  +4.1258e-01  4.56e-02  9.49e-05  6.24e-03  1.69e-05  3.58e-04  6.25e-01  
 13  +3.5620e-01  +3.6631e-01  1.01e-02  2.07e-05  1.36e-03  3.79e-06  8.52e-05  7.96e-01  
 14  +3.5486e-01  +3.6081e-01  5.95e-03  1.20e-05  7.90e-04  2.33e-06  5.02e-05  4.69e-01  
 15  +3.5318e-01  +3.5392e-01  7.46e-04  1.51e-06  9.88e-05  3.64e-07  6.41e-06  9.90e-01  
 16  +3.5290e-01  +3.5291e-01  7.73e-06  1.56e-08  1.02e-06  3.75e-09  6.67e-08  9.90e-01  
 17  +3.5290e-01  +3.5290e-01  7.74e-08  1.56e-10  1.02e-08  3.75e-11  6.67e-10  9.90e-01  
 18  +3.5290e-01  +3.5290e-01  7.74e-10  1.56e-12  1.02e-10  3.76e-13  6.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.5293ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:18 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:18 PM: Optimal value: 3.529e-01
(CVXPY) Oct 06 03:58:18 PM: Compilation took 7.823e-03 seconds
(CVXPY) Oct 06 03:58:18 PM: Solver (including time spent in interface) took 1.570e-02 seconds
Iteration: 7, Objective: 0.3529
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:18 PM: Your problem has 560 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:18 PM: Finished problem compilation (took 1.013e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 560
  constraints   = 1060
  nnz(P)        = 0
  nnz(A)        = 6568
  cones (total) = 1
    : Nonnegative = 1,  numel = 1060

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0177e+02  5.01e+02  9.55e-01  3.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.8623e-01  +1.0422e+02  1.04e+02  3.82e-01  1.93e+01  3.90e-03  5.40e-01  6.21e-01  
  2  +5.3484e-01  +1.2663e+01  1.21e+01  1.21e-01  7.62e+00  1.28e-02  2.25e-01  9.01e-01  
  3  +5.0232e-01  +2.2658e+00  1.76e+00  3.69e-02  2.32e+00  2.30e-05  1.82e-01  6.46e-01  
  4  +4.9899e-01  +1.1324e+00  6.33e-01  1.20e-02  7.91e-01  2.28e-05  4.94e-02  7.96e-01  
  5  +4.8654e-01  +1.0452e+00  5.59e-01  3.55e-03  2.42e-01  8.55e-05  9.79e-03  8.32e-01  
  6  +4.8485e-01  +1.0940e+00  6.09e-01  2.75e-03  1.88e-01  1.36e-04  7.33e-03  4.38e-01  
  7  +4.6984e-01  +9.9384e-01  5.24e-01  1.55e-03  1.06e-01  2.11e-04  4.14e-03  9.73e-01  
  8  +4.2709e-01  +7.1515e-01  2.88e-01  6.24e-04  4.20e-02  1.35e-04  1.81e-03  7.02e-01  
  9  +3.9493e-01  +5.4357e-01  1.49e-01  3.16e-04  2.10e-02  6.51e-05  1.02e-03  4.94e-01  
 10  +3.9306e-01  +5.3377e-01  1.41e-01  3.08e-04  2.04e-02  6.15e-05  1.01e-03  1.06e-01  
 11  +3.8360e-01  +4.9358e-01  1.10e-01  2.32e-04  1.53e-02  5.34e-05  7.93e-04  4.41e-01  
 12  +3.6953e-01  +4.2922e-01  5.97e-02  1.23e-04  8.12e-03  2.82e-05  4.55e-04  4.49e-01  
 13  +3.6719e-01  +4.1772e-01  5.05e-02  1.04e-04  6.82e-03  2.50e-05  3.88e-04  3.13e-01  
 14  +3.5411e-01  +3.6078e-01  6.67e-03  1.35e-05  8.83e-04  2.95e-06  5.55e-05  8.71e-01  
 15  +3.5344e-01  +3.5807e-01  4.63e-03  9.27e-06  6.07e-04  2.10e-06  3.84e-05  3.98e-01  
 16  +3.5197e-01  +3.5215e-01  1.80e-04  3.61e-07  2.36e-05  8.75e-08  1.52e-06  9.90e-01  
 17  +3.5190e-01  +3.5190e-01  1.80e-06  3.61e-09  2.36e-07  8.75e-10  1.52e-08  9.90e-01  
 18  +3.5190e-01  +3.5190e-01  1.80e-08  3.61e-11  2.36e-09  8.76e-12  1.52e-10  9.90e-01  
 19  +3.5190e-01  +3.5190e-01  1.80e-10  3.61e-13  2.36e-11  8.76e-14  1.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.3245ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:18 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:18 PM: Optimal value: 3.519e-01
(CVXPY) Oct 06 03:58:18 PM: Compilation took 1.013e-02 seconds
(CVXPY) Oct 06 03:58:18 PM: Solver (including time spent in interface) took 1.407e-02 seconds
FULL MODEL:
  Accruacy: 0.637
  Our objective: 0.274

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.218)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.01)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.183943271636963
Best over terms:
  Our final objective: 0.218
    Its accruacy: 0.609
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.218
  Highest accruacy: 0.609
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

