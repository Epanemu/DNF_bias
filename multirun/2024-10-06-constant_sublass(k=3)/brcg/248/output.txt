Command:
python test_script.py -s constant_subclass -d 7 -n 50 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 7.

Computed total variation: 0.88
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:12 PM: Your problem has 40 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Finished problem compilation (took 4.479e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 65
  nnz(P)        = 0
  nnz(A)        = 265
  cones (total) = 1
    : Nonnegative = 1,  numel = 65

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8949e-01  +2.6721e+01  2.62e+01  8.30e-01  6.52e+00  1.00e+00  1.11e+00   ------   
  1  +5.6234e-01  +5.6469e+00  5.08e+00  3.35e-01  3.65e+00  3.77e-03  5.93e-01  6.29e-01  
  2  +4.5520e-01  +1.2512e+00  7.96e-01  7.25e-02  9.53e-01  1.74e-02  1.99e-01  9.31e-01  
  3  +3.5152e-01  +7.3541e-01  3.84e-01  2.06e-02  2.73e-01  9.25e-03  7.42e-02  7.22e-01  
  4  +2.9931e-01  +3.9313e-01  9.38e-02  4.74e-03  6.15e-02  1.34e-03  2.35e-02  7.76e-01  
  5  +2.8066e-01  +2.8291e-01  2.26e-03  1.16e-04  1.50e-03  1.35e-05  6.73e-04  9.86e-01  
  6  +2.8011e-01  +2.8013e-01  2.25e-05  1.16e-06  1.49e-05  1.35e-07  6.75e-06  9.90e-01  
  7  +2.8010e-01  +2.8010e-01  2.25e-07  1.16e-08  1.49e-07  1.35e-09  6.75e-08  9.90e-01  
  8  +2.8010e-01  +2.8010e-01  2.25e-09  1.16e-10  1.49e-09  1.35e-11  6.75e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 597.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:13 PM: Optimal value: 2.801e-01
(CVXPY) Oct 06 04:01:13 PM: Compilation took 4.479e-02 seconds
(CVXPY) Oct 06 04:01:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:13 PM: Your problem has 50 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 50
  constraints   = 75
  nnz(P)        = 0
  nnz(A)        = 350
  cones (total) = 1
    : Nonnegative = 1,  numel = 75

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7617e-01  +2.7140e+01  2.67e+01  8.42e-01  6.83e+00  1.00e+00  1.13e+00   ------   
  1  +5.0692e-01  +5.7330e+00  5.23e+00  3.50e-01  3.74e+00  3.80e-03  6.04e-01  6.24e-01  
  2  +3.8014e-01  +1.3276e+00  9.47e-01  7.49e-02  1.03e+00  1.95e-02  1.95e-01  9.17e-01  
  3  +2.8294e-01  +6.9581e-01  4.13e-01  2.40e-02  3.35e-01  9.06e-03  7.40e-02  7.38e-01  
  4  +2.4750e-01  +3.8818e-01  1.41e-01  7.79e-03  1.11e-01  3.26e-03  2.60e-02  6.97e-01  
  5  +2.2419e-01  +3.0233e-01  7.81e-02  3.50e-03  5.14e-02  1.65e-03  1.28e-02  6.45e-01  
  6  +2.0461e-01  +2.1881e-01  1.42e-02  6.11e-04  9.17e-03  2.75e-04  2.37e-03  8.30e-01  
  7  +2.0041e-01  +2.0071e-01  3.05e-04  1.31e-05  1.97e-04  4.19e-06  5.22e-05  9.80e-01  
  8  +2.0031e-01  +2.0032e-01  1.31e-05  5.93e-07  8.60e-06  7.46e-08  2.57e-06  9.53e-01  
  9  +2.0030e-01  +2.0030e-01  1.35e-07  6.13e-09  8.86e-08  7.86e-10  2.70e-08  9.90e-01  
 10  +2.0030e-01  +2.0030e-01  1.35e-09  6.13e-11  8.86e-10  7.87e-12  2.70e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 604.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:13 PM: Optimal value: 2.003e-01
(CVXPY) Oct 06 04:01:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:01:13 PM: Solver (including time spent in interface) took 1.026e-02 seconds
Iteration: 2, Objective: 0.2003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:13 PM: Your problem has 60 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Finished problem compilation (took 5.554e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 85
  nnz(P)        = 0
  nnz(A)        = 406
  cones (total) = 1
    : Nonnegative = 1,  numel = 85

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5636e-01  +2.7519e+01  2.71e+01  8.52e-01  6.76e+00  1.00e+00  1.15e+00   ------   
  1  +4.0891e-01  +5.8479e+00  5.44e+00  3.57e-01  3.61e+00  3.95e-03  6.06e-01  6.17e-01  
  2  +2.0823e-01  +2.1668e+00  1.96e+00  1.19e-01  1.45e+00  1.84e-02  2.85e-01  6.82e-01  
  3  +1.7686e-01  +4.5135e-01  2.74e-01  1.97e-02  2.49e-01  5.98e-03  5.86e-02  8.34e-01  
  4  +1.5344e-01  +2.8420e-01  1.31e-01  8.92e-03  1.16e-01  2.91e-03  2.90e-02  6.05e-01  
  5  +1.3764e-01  +2.1234e-01  7.47e-02  4.16e-03  5.89e-02  1.60e-03  1.51e-02  5.63e-01  
  6  +1.2468e-01  +1.4007e-01  1.54e-02  8.62e-04  1.23e-02  1.22e-04  3.27e-03  9.90e-01  
  7  +1.2063e-01  +1.2106e-01  4.30e-04  2.37e-05  3.41e-04  2.56e-06  9.20e-05  9.74e-01  
  8  +1.2052e-01  +1.2058e-01  5.98e-05  3.46e-06  4.82e-05  3.11e-07  1.44e-05  8.64e-01  
  9  +1.2050e-01  +1.2050e-01  1.74e-06  1.02e-07  1.40e-06  1.20e-08  4.34e-07  9.90e-01  
 10  +1.2050e-01  +1.2050e-01  1.74e-08  1.02e-09  1.40e-08  1.20e-10  4.35e-09  9.90e-01  
 11  +1.2050e-01  +1.2050e-01  1.74e-10  1.02e-11  1.41e-10  1.20e-12  4.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 696µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:13 PM: Optimal value: 1.205e-01
(CVXPY) Oct 06 04:01:13 PM: Compilation took 5.554e-03 seconds
(CVXPY) Oct 06 04:01:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:13 PM: Your problem has 70 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Finished problem compilation (took 6.107e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 70
  constraints   = 95
  nnz(P)        = 0
  nnz(A)        = 453
  cones (total) = 1
    : Nonnegative = 1,  numel = 95

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5455e-01  +2.7551e+01  2.71e+01  8.60e-01  6.60e+00  1.00e+00  1.15e+00   ------   
  1  +3.8539e-01  +5.9448e+00  5.56e+00  3.66e-01  3.49e+00  4.01e-03  6.09e-01  6.07e-01  
  2  +1.6098e-01  +2.4166e+00  2.26e+00  1.33e-01  1.52e+00  2.04e-02  3.11e-01  6.52e-01  
  3  +1.5493e-01  +5.1769e-01  3.63e-01  2.65e-02  3.24e-01  8.77e-03  7.67e-02  8.09e-01  
  4  +1.3324e-01  +4.1519e-01  2.82e-01  1.80e-02  2.25e-01  6.75e-03  5.63e-02  4.01e-01  
  5  +1.0265e-01  +1.9481e-01  9.22e-02  5.20e-03  6.82e-02  2.19e-03  1.83e-02  7.50e-01  
  6  +8.7233e-02  +1.1142e-01  2.42e-02  1.29e-03  1.74e-02  1.39e-04  4.78e-03  9.71e-01  
  7  +8.0898e-02  +8.1612e-02  7.14e-04  3.71e-05  5.05e-04  3.23e-06  1.43e-04  9.70e-01  
  8  +8.0721e-02  +8.0793e-02  7.18e-05  4.00e-06  5.29e-05  2.65e-07  1.62e-05  8.93e-01  
  9  +8.0700e-02  +8.0702e-02  1.47e-06  8.30e-08  1.09e-06  9.03e-09  3.43e-07  9.90e-01  
 10  +8.0700e-02  +8.0700e-02  1.47e-08  8.31e-10  1.09e-08  9.03e-11  3.43e-09  9.90e-01  
 11  +8.0700e-02  +8.0700e-02  1.47e-10  8.32e-12  1.09e-10  9.03e-13  3.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 795.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:13 PM: Optimal value: 8.070e-02
(CVXPY) Oct 06 04:01:13 PM: Compilation took 6.107e-03 seconds
(CVXPY) Oct 06 04:01:13 PM: Solver (including time spent in interface) took 4.008e-03 seconds
Iteration: 4, Objective: 0.0807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:13 PM: Your problem has 71 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Finished problem compilation (took 4.745e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 96
  nnz(P)        = 0
  nnz(A)        = 458
  cones (total) = 1
    : Nonnegative = 1,  numel = 96

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5448e-01  +2.7555e+01  2.71e+01  8.61e-01  6.58e+00  1.00e+00  1.15e+00   ------   
  1  +3.8603e-01  +5.9418e+00  5.56e+00  3.68e-01  3.48e+00  4.00e-03  6.10e-01  6.08e-01  
  2  +1.6071e-01  +2.4350e+00  2.27e+00  1.35e-01  1.53e+00  2.04e-02  3.13e-01  6.48e-01  
  3  +1.5472e-01  +5.3533e-01  3.81e-01  2.77e-02  3.39e-01  9.01e-03  8.00e-02  8.00e-01  
  4  +1.3155e-01  +4.0725e-01  2.76e-01  1.76e-02  2.21e-01  6.52e-03  5.54e-02  4.38e-01  
  5  +1.0222e-01  +1.9462e-01  9.24e-02  5.20e-03  6.85e-02  2.16e-03  1.82e-02  7.55e-01  
  6  +8.6805e-02  +1.0957e-01  2.28e-02  1.20e-03  1.64e-02  1.21e-04  4.44e-03  9.87e-01  
  7  +8.0877e-02  +8.1488e-02  6.10e-04  3.16e-05  4.32e-04  2.38e-06  1.20e-04  9.73e-01  
  8  +8.0722e-02  +8.0795e-02  7.28e-05  4.07e-06  5.38e-05  2.84e-07  1.66e-05  8.81e-01  
  9  +8.0701e-02  +8.0702e-02  1.69e-06  9.57e-08  1.26e-06  1.09e-08  3.97e-07  9.90e-01  
 10  +8.0700e-02  +8.0700e-02  1.69e-08  9.57e-10  1.26e-08  1.09e-10  3.97e-09  9.90e-01  
 11  +8.0700e-02  +8.0700e-02  1.69e-10  9.58e-12  1.26e-10  1.09e-12  3.97e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 900.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:13 PM: Optimal value: 8.070e-02
(CVXPY) Oct 06 04:01:13 PM: Compilation took 4.745e-03 seconds
(CVXPY) Oct 06 04:01:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:13 PM: Your problem has 75 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:13 PM: Finished problem compilation (took 9.806e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 100
  nnz(P)        = 0
  nnz(A)        = 482
  cones (total) = 1
    : Nonnegative = 1,  numel = 100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5032e-01  +2.7644e+01  2.72e+01  8.63e-01  6.56e+00  1.00e+00  1.15e+00   ------   
  1  +3.6064e-01  +6.0334e+00  5.67e+00  3.73e-01  3.46e+00  4.06e-03  6.13e-01  6.00e-01  
  2  +1.3428e-01  +2.6087e+00  2.47e+00  1.46e-01  1.61e+00  2.12e-02  3.35e-01  6.18e-01  
  3  +1.4671e-01  +5.0155e-01  3.55e-01  2.73e-02  3.25e-01  1.02e-02  7.99e-02  8.37e-01  
  4  +1.1703e-01  +2.7794e-01  1.61e-01  1.18e-02  1.43e-01  4.44e-03  3.72e-02  6.27e-01  
  5  +1.0164e-01  +2.0573e-01  1.04e-01  6.25e-03  8.39e-02  2.68e-03  2.11e-02  5.89e-01  
  6  +8.5427e-02  +1.0361e-01  1.82e-02  1.08e-03  1.46e-02  1.07e-04  3.84e-03  9.90e-01  
  7  +8.0890e-02  +8.1732e-02  8.42e-04  4.92e-05  6.68e-04  3.94e-06  1.80e-04  9.53e-01  
  8  +8.0676e-02  +8.0896e-02  2.20e-04  1.30e-05  1.71e-04  1.27e-06  5.58e-05  8.34e-01  
  9  +8.0609e-02  +8.0634e-02  2.47e-05  1.44e-06  1.86e-05  1.30e-07  6.85e-06  8.93e-01  
 10  +8.0600e-02  +8.0600e-02  3.05e-07  1.77e-08  2.29e-07  1.62e-09  8.63e-08  9.90e-01  
 11  +8.0600e-02  +8.0600e-02  3.05e-09  1.77e-10  2.29e-09  1.62e-11  8.63e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 825.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:13 PM: Optimal value: 8.060e-02
(CVXPY) Oct 06 04:01:13 PM: Compilation took 9.806e-03 seconds
(CVXPY) Oct 06 04:01:13 PM: Solver (including time spent in interface) took 5.094e-03 seconds
FULL MODEL:
  Accruacy: 0.92
  Our objective: 0.8400000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x1 = 1 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.16)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1)                       <-- (term's our objective: 0.2)
 OR (x1 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.08)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.16)
 OR (x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.28)
 OR (x4 = 1 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.513991594314575
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 5
  Shortest hamming distance: 2
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

