Command:
python test_script.py -s constant_subclass -d 4 -n 100 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.13999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.36
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:24 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:24 PM: Finished problem compilation (took 3.212e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9668e-01  +5.0705e+01  5.02e+01  8.58e-01  7.85e+00  1.00e+00  1.03e+00   ------   
  1  +6.0370e-01  +1.0114e+01  9.51e+00  2.96e-01  4.13e+00  4.08e-03  4.88e-01  6.68e-01  
  2  +5.3532e-01  +1.6656e+00  1.13e+00  7.17e-02  1.17e+00  9.42e-03  1.77e-01  8.70e-01  
  3  +4.9875e-01  +7.1953e-01  2.21e-01  1.65e-02  2.68e-01  5.03e-03  7.24e-02  9.90e-01  
  4  +4.8524e-01  +6.1901e-01  1.34e-01  4.37e-03  7.36e-02  8.22e-03  1.57e-02  8.21e-01  
  5  +4.6568e-01  +5.2804e-01  6.24e-02  1.29e-03  2.19e-02  4.78e-03  5.00e-03  7.25e-01  
  6  +4.5255e-01  +4.5981e-01  7.26e-03  1.43e-04  2.43e-03  1.73e-04  6.47e-04  9.15e-01  
  7  +4.5013e-01  +4.5023e-01  9.29e-05  1.81e-06  3.06e-05  1.71e-06  8.40e-06  9.89e-01  
  8  +4.5010e-01  +4.5010e-01  9.29e-07  1.81e-08  3.06e-07  1.71e-08  8.40e-08  9.90e-01  
  9  +4.5010e-01  +4.5010e-01  9.29e-09  1.81e-10  3.06e-09  1.71e-10  8.40e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 649.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:24 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:24 PM: Optimal value: 4.501e-01
(CVXPY) Oct 06 03:49:24 PM: Compilation took 3.212e-02 seconds
(CVXPY) Oct 06 03:49:24 PM: Solver (including time spent in interface) took 1.004e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:24 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:24 PM: Finished problem compilation (took 3.776e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 475
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9006e-01  +5.1376e+01  5.09e+01  8.66e-01  8.23e+00  1.00e+00  1.06e+00   ------   
  1  +5.7437e-01  +1.0349e+01  9.77e+00  3.14e-01  4.29e+00  4.04e-03  5.16e-01  6.58e-01  
  2  +5.1428e-01  +1.8546e+00  1.34e+00  7.39e-02  1.27e+00  1.13e-02  1.80e-01  8.70e-01  
  3  +4.7357e-01  +1.1532e+00  6.80e-01  2.48e-02  4.39e-01  8.98e-03  6.78e-02  7.05e-01  
  4  +4.3246e-01  +7.7220e-01  3.40e-01  9.16e-03  1.62e-01  5.39e-03  2.79e-02  6.33e-01  
  5  +3.9600e-01  +5.9718e-01  2.01e-01  4.44e-03  7.78e-02  2.89e-03  1.48e-02  5.26e-01  
  6  +3.5200e-01  +3.8333e-01  3.13e-02  6.78e-04  1.17e-02  2.50e-05  2.71e-03  8.92e-01  
  7  +3.4078e-01  +3.4216e-01  1.38e-03  2.91e-05  5.00e-04  1.96e-06  1.25e-04  9.62e-01  
  8  +3.4023e-01  +3.4029e-01  6.08e-05  1.22e-06  2.08e-05  2.40e-07  5.67e-06  9.90e-01  
  9  +3.4020e-01  +3.4020e-01  6.65e-07  1.33e-08  2.26e-07  2.51e-09  6.26e-08  9.90e-01  
 10  +3.4020e-01  +3.4020e-01  6.65e-09  1.33e-10  2.26e-09  2.51e-11  6.26e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 649.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:24 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:24 PM: Optimal value: 3.402e-01
(CVXPY) Oct 06 03:49:24 PM: Compilation took 3.776e-03 seconds
(CVXPY) Oct 06 03:49:24 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3402
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:24 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:24 PM: Finished problem compilation (took 6.361e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 506
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8900e-01  +5.1507e+01  5.10e+01  8.69e-01  8.23e+00  1.00e+00  1.07e+00   ------   
  1  +5.6689e-01  +1.0359e+01  9.79e+00  3.16e-01  4.25e+00  4.04e-03  5.18e-01  6.58e-01  
  2  +5.0627e-01  +1.5875e+00  1.08e+00  5.71e-02  9.99e-01  1.18e-02  1.43e-01  9.51e-01  
  3  +4.5712e-01  +1.3755e+00  9.18e-01  2.56e-02  4.59e-01  1.44e-02  6.82e-02  6.67e-01  
  4  +3.9206e-01  +7.6562e-01  3.74e-01  8.55e-03  1.52e-01  5.59e-03  2.59e-02  6.53e-01  
  5  +3.4429e-01  +4.4801e-01  1.04e-01  2.48e-03  4.26e-02  1.18e-03  9.18e-03  7.04e-01  
  6  +3.2359e-01  +3.3468e-01  1.11e-02  2.67e-04  4.56e-03  5.58e-05  1.12e-03  9.84e-01  
  7  +3.2061e-01  +3.2151e-01  8.96e-04  2.14e-05  3.62e-04  3.98e-06  9.30e-05  9.20e-01  
  8  +3.2033e-01  +3.2041e-01  8.04e-05  1.81e-06  3.05e-05  2.92e-07  8.96e-06  9.49e-01  
  9  +3.2030e-01  +3.2030e-01  1.59e-06  3.58e-08  6.01e-07  5.95e-09  1.81e-07  9.90e-01  
 10  +3.2030e-01  +3.2030e-01  1.59e-08  3.58e-10  6.01e-09  5.96e-11  1.81e-09  9.90e-01  
 11  +3.2030e-01  +3.2030e-01  1.59e-10  3.58e-12  6.01e-11  5.97e-13  1.81e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 821.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:24 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:24 PM: Optimal value: 3.203e-01
(CVXPY) Oct 06 03:49:24 PM: Compilation took 6.361e-03 seconds
(CVXPY) Oct 06 03:49:24 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.68
  Our objective: 0.36000000000000004

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.2)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1)            <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.299837112426758
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

