Command:
python test_script.py -s constant_subclass -d 10 -n 5000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1452
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 10.

Computed total variation: 0.38680000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:02 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:02 PM: Finished problem compilation (took 7.459e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 32521
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5008e+03  2.50e+03  9.80e-01  8.55e+01  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4952e+02  5.49e+02  4.39e-01  5.63e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2923e-01  +6.0315e+01  5.98e+01  1.72e-01  2.83e+01  1.78e-02  2.89e-01  9.56e-01  
  3  +5.0809e-01  +1.5613e+01  1.51e+01  1.06e-01  1.73e+01  4.99e-05  2.61e-01  3.61e-01  
  4  +5.0085e-01  +1.5807e+00  1.08e+00  1.06e-02  1.79e+00  6.76e-06  1.32e-01  7.68e-01  
  5  +5.0012e-01  +6.8404e-01  1.84e-01  1.74e-03  2.99e-01  1.52e-05  3.34e-02  9.90e-01  
  6  +4.9986e-01  +1.1038e+00  6.04e-01  1.44e-03  2.50e-01  3.12e-04  4.55e-03  9.43e-01  
  7  +4.9753e-01  +1.0210e+00  5.24e-01  3.39e-04  5.89e-02  1.07e-03  1.02e-03  7.88e-01  
  8  +4.9316e-01  +7.3462e-01  2.41e-01  1.77e-04  3.06e-02  9.17e-06  5.46e-04  7.18e-01  
  9  +4.7874e-01  +6.1605e-01  1.37e-01  6.84e-05  1.18e-02  7.67e-06  2.26e-04  6.67e-01  
 10  +4.7007e-01  +5.6374e-01  9.37e-02  4.78e-05  8.25e-03  5.66e-06  1.71e-04  6.08e-01  
 11  +4.5319e-01  +4.8377e-01  3.06e-02  1.34e-05  2.31e-03  1.65e-06  5.40e-05  7.52e-01  
 12  +4.4947e-01  +4.6605e-01  1.66e-02  7.05e-06  1.22e-03  1.51e-06  2.90e-05  9.90e-01  
 13  +4.4452e-01  +4.4580e-01  1.28e-03  5.39e-07  9.28e-05  1.11e-07  2.32e-06  9.38e-01  
 14  +4.4411e-01  +4.4413e-01  1.89e-05  7.93e-09  1.37e-06  1.65e-09  3.43e-08  9.90e-01  
 15  +4.4410e-01  +4.4410e-01  1.89e-07  7.93e-11  1.37e-08  1.65e-11  3.43e-10  9.90e-01  
 16  +4.4410e-01  +4.4410e-01  1.89e-09  7.93e-13  1.37e-10  1.65e-13  3.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 86.9367ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:02 PM: Optimal value: 4.441e-01
(CVXPY) Oct 06 04:28:02 PM: Compilation took 7.459e-02 seconds
(CVXPY) Oct 06 04:28:02 PM: Solver (including time spent in interface) took 9.512e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:02 PM: Your problem has 2531 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:02 PM: Finished problem compilation (took 3.000e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2531
  constraints   = 5031
  nnz(P)        = 0
  nnz(A)        = 36909
  cones (total) = 1
    : Nonnegative = 1,  numel = 5031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5015e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7811e-01  +5.4986e+02  5.49e+02  4.40e-01  5.81e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2898e-01  +6.0122e+01  5.96e+01  1.73e-01  2.91e+01  1.79e-02  2.90e-01  9.59e-01  
  3  +5.0798e-01  +1.5494e+01  1.50e+01  1.06e-01  1.77e+01  5.02e-05  2.60e-01  3.74e-01  
  4  +5.0094e-01  +1.7893e+00  1.29e+00  1.26e-02  2.20e+00  7.77e-06  1.40e-01  7.08e-01  
  5  +5.0027e-01  +1.0171e+00  5.17e-01  4.92e-03  8.64e-01  1.14e-05  7.75e-02  6.93e-01  
  6  +5.0009e-01  +8.4712e-01  3.47e-01  3.18e-03  5.62e-01  1.45e-05  2.79e-02  7.05e-01  
  7  +4.9704e-01  +8.3968e-01  3.43e-01  4.38e-04  7.86e-02  2.38e-04  1.29e-03  9.90e-01  
  8  +4.8929e-01  +7.3074e-01  2.41e-01  1.54e-04  2.76e-02  3.41e-04  4.50e-04  7.07e-01  
  9  +4.8613e-01  +7.0381e-01  2.18e-01  1.27e-04  2.28e-02  2.97e-04  3.68e-04  2.47e-01  
 10  +4.8251e-01  +6.7672e-01  1.94e-01  9.37e-05  1.68e-02  2.42e-04  2.68e-04  4.23e-01  
 11  +4.8211e-01  +6.7297e-01  1.91e-01  9.34e-05  1.67e-02  2.27e-04  2.68e-04  2.53e-02  
 12  +4.7888e-01  +6.5426e-01  1.75e-01  7.67e-05  1.37e-02  2.01e-04  2.20e-04  2.56e-01  
 13  +4.7784e-01  +6.4426e-01  1.66e-01  7.54e-05  1.35e-02  1.59e-04  2.17e-04  1.27e-01  
 14  +4.6373e-01  +5.7223e-01  1.09e-01  3.89e-05  6.94e-03  9.31e-05  1.14e-04  5.94e-01  
 15  +4.6108e-01  +5.5887e-01  9.78e-02  3.58e-05  6.37e-03  6.76e-05  1.06e-04  2.08e-01  
 16  +4.6015e-01  +5.5276e-01  9.26e-02  3.29e-05  5.86e-03  3.52e-05  1.00e-04  4.87e-01  
 17  +4.4235e-01  +4.7342e-01  3.11e-02  1.11e-05  1.98e-03  3.94e-06  3.54e-05  8.45e-01  
 18  +4.3785e-01  +4.6277e-01  2.49e-02  8.12e-06  1.44e-03  3.38e-06  2.54e-05  4.22e-01  
 19  +4.2786e-01  +4.2866e-01  8.03e-04  2.52e-07  4.48e-05  7.93e-08  8.08e-07  9.85e-01  
 20  +4.2750e-01  +4.2751e-01  8.04e-06  2.52e-09  4.48e-07  7.93e-10  8.10e-09  9.90e-01  
 21  +4.2750e-01  +4.2750e-01  8.04e-08  2.52e-11  4.48e-09  7.95e-12  8.11e-11  9.90e-01  
 22  +4.2750e-01  +4.2750e-01  8.04e-10  2.52e-13  4.48e-11  7.97e-14  8.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.671ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:02 PM: Optimal value: 4.275e-01
(CVXPY) Oct 06 04:28:02 PM: Compilation took 3.000e-02 seconds
(CVXPY) Oct 06 04:28:02 PM: Solver (including time spent in interface) took 1.527e-01 seconds
Iteration: 2, Objective: 0.4275
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:03 PM: Your problem has 2541 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:03 PM: Finished problem compilation (took 3.268e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2541
  constraints   = 5041
  nnz(P)        = 0
  nnz(A)        = 37799
  cones (total) = 1
    : Nonnegative = 1,  numel = 5041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5014e+03  2.50e+03  9.80e-01  8.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.7793e-01  +5.4991e+02  5.49e+02  4.41e-01  5.80e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2881e-01  +5.9969e+01  5.94e+01  1.72e-01  2.90e+01  1.79e-02  2.89e-01  9.61e-01  
  3  +5.0793e-01  +1.5438e+01  1.49e+01  1.05e-01  1.76e+01  5.04e-05  2.59e-01  3.81e-01  
  4  +5.0087e-01  +1.6575e+00  1.16e+00  1.14e-02  1.98e+00  7.49e-06  1.30e-01  7.58e-01  
  5  +5.0029e-01  +9.9910e-01  4.99e-01  4.76e-03  8.36e-01  1.25e-05  6.18e-02  7.58e-01  
  6  +4.9997e-01  +8.1289e-01  3.13e-01  2.32e-03  4.13e-01  3.14e-05  1.02e-02  8.83e-01  
  7  +4.9631e-01  +7.9021e-01  2.94e-01  2.55e-04  4.60e-02  3.91e-04  7.10e-04  9.33e-01  
  8  +4.9089e-01  +7.3887e-01  2.48e-01  1.62e-04  2.91e-02  3.71e-04  4.51e-04  4.68e-01  
  9  +4.8673e-01  +7.1372e-01  2.27e-01  1.23e-04  2.20e-02  3.29e-04  3.43e-04  3.64e-01  
 10  +4.8593e-01  +7.0763e-01  2.22e-01  1.21e-04  2.17e-02  2.82e-04  3.39e-04  1.02e-01  
 11  +4.7992e-01  +6.7875e-01  1.99e-01  8.93e-05  1.60e-02  2.68e-04  2.52e-04  3.17e-01  
 12  +4.7948e-01  +6.7636e-01  1.97e-01  8.90e-05  1.59e-02  2.57e-04  2.51e-04  2.24e-02  
 13  +4.7584e-01  +6.5963e-01  1.84e-01  8.06e-05  1.44e-02  2.11e-04  2.29e-04  1.80e-01  
 14  +4.6604e-01  +6.1215e-01  1.46e-01  6.15e-05  1.10e-02  3.60e-05  1.80e-04  7.25e-01  
 15  +4.5497e-01  +5.6490e-01  1.10e-01  4.26e-05  7.60e-03  8.72e-06  1.28e-04  9.90e-01  
 16  +4.3419e-01  +4.8314e-01  4.89e-02  1.74e-05  3.09e-03  3.70e-06  5.53e-05  6.16e-01  
 17  +4.2981e-01  +4.6501e-01  3.52e-02  1.22e-05  2.17e-03  3.80e-06  3.95e-05  6.34e-01  
 18  +4.1903e-01  +4.2607e-01  7.04e-03  2.40e-06  4.27e-04  7.55e-07  8.13e-06  8.34e-01  
 19  +4.1630e-01  +4.1653e-01  2.26e-04  7.70e-08  1.37e-05  2.33e-08  2.67e-07  9.73e-01  
 20  +4.1620e-01  +4.1620e-01  2.27e-06  7.70e-10  1.37e-07  2.33e-10  2.67e-09  9.90e-01  
 21  +4.1620e-01  +4.1620e-01  2.27e-08  7.70e-12  1.37e-09  2.33e-12  2.67e-11  9.90e-01  
 22  +4.1620e-01  +4.1620e-01  2.27e-10  7.71e-14  1.37e-11  2.34e-14  2.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.7197ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:03 PM: Optimal value: 4.162e-01
(CVXPY) Oct 06 04:28:03 PM: Compilation took 3.268e-02 seconds
(CVXPY) Oct 06 04:28:03 PM: Solver (including time spent in interface) took 1.693e-01 seconds
Iteration: 3, Objective: 0.4162
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:03 PM: Your problem has 2551 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:03 PM: Finished problem compilation (took 2.457e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2551
  constraints   = 5051
  nnz(P)        = 0
  nnz(A)        = 38624
  cones (total) = 1
    : Nonnegative = 1,  numel = 5051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5015e+03  2.50e+03  9.80e-01  8.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.7781e-01  +5.4995e+02  5.49e+02  4.41e-01  5.80e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2872e-01  +5.9872e+01  5.93e+01  1.72e-01  2.89e+01  1.80e-02  2.89e-01  9.63e-01  
  3  +5.0791e-01  +1.5406e+01  1.49e+01  1.05e-01  1.76e+01  5.05e-05  2.58e-01  3.84e-01  
  4  +5.0096e-01  +1.8522e+00  1.35e+00  1.33e-02  2.30e+00  8.14e-06  1.40e-01  6.96e-01  
  5  +5.0017e-01  +9.4191e-01  4.42e-01  4.19e-03  7.38e-01  1.17e-05  6.15e-02  8.26e-01  
  6  +4.9967e-01  +8.2665e-01  3.27e-01  2.28e-03  4.04e-01  3.72e-05  9.56e-03  9.01e-01  
  7  +4.9054e-01  +7.5848e-01  2.68e-01  1.75e-04  3.14e-02  5.51e-04  4.84e-04  9.50e-01  
  8  +4.8723e-01  +7.4588e-01  2.59e-01  1.32e-04  2.38e-02  5.34e-04  3.63e-04  3.99e-01  
  9  +4.8437e-01  +7.2357e-01  2.39e-01  1.27e-04  2.28e-02  3.61e-04  3.56e-04  1.94e-01  
 10  +4.7365e-01  +6.7366e-01  2.00e-01  8.69e-05  1.56e-02  2.38e-04  2.47e-04  5.15e-01  
 11  +4.7147e-01  +6.6202e-01  1.91e-01  8.48e-05  1.52e-02  1.87e-04  2.44e-04  1.31e-01  
 12  +4.4437e-01  +5.4037e-01  9.60e-02  3.67e-05  6.54e-03  4.21e-05  1.13e-04  7.27e-01  
 13  +4.2608e-01  +4.6978e-01  4.37e-02  1.58e-05  2.80e-03  1.11e-05  5.12e-05  7.45e-01  
 14  +4.2219e-01  +4.5548e-01  3.33e-02  1.18e-05  2.09e-03  8.05e-06  3.88e-05  3.20e-01  
 15  +4.1849e-01  +4.4059e-01  2.21e-02  7.65e-06  1.36e-03  3.27e-06  2.54e-05  9.90e-01  
 16  +4.1173e-01  +4.1718e-01  5.45e-03  1.88e-06  3.35e-04  7.93e-07  6.48e-06  7.77e-01  
 17  +4.0965e-01  +4.1001e-01  3.55e-04  1.23e-07  2.18e-05  4.94e-08  4.30e-07  9.36e-01  
 18  +4.0950e-01  +4.0951e-01  7.41e-06  2.56e-09  4.55e-07  1.00e-09  9.00e-09  9.88e-01  
 19  +4.0950e-01  +4.0950e-01  7.44e-08  2.57e-11  4.57e-09  1.01e-11  9.05e-11  9.90e-01  
 20  +4.0950e-01  +4.0950e-01  7.44e-10  2.57e-13  4.57e-11  1.01e-13  9.08e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 131.045ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:03 PM: Optimal value: 4.095e-01
(CVXPY) Oct 06 04:28:03 PM: Compilation took 2.457e-02 seconds
(CVXPY) Oct 06 04:28:03 PM: Solver (including time spent in interface) took 1.379e-01 seconds
Iteration: 4, Objective: 0.4095
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:03 PM: Your problem has 2561 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:03 PM: Finished problem compilation (took 2.826e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2561
  constraints   = 5061
  nnz(P)        = 0
  nnz(A)        = 39110
  cones (total) = 1
    : Nonnegative = 1,  numel = 5061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5014e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7763e-01  +5.5000e+02  5.49e+02  4.41e-01  5.79e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2858e-01  +5.9745e+01  5.92e+01  1.72e-01  2.88e+01  1.80e-02  2.88e-01  9.65e-01  
  3  +5.0788e-01  +1.5369e+01  1.49e+01  1.05e-01  1.75e+01  5.07e-05  2.57e-01  3.90e-01  
  4  +5.0090e-01  +1.7349e+00  1.23e+00  1.21e-02  2.11e+00  7.85e-06  1.32e-01  7.37e-01  
  5  +5.0024e-01  +9.9632e-01  4.96e-01  4.72e-03  8.29e-01  1.33e-05  5.64e-02  8.40e-01  
  6  +4.9972e-01  +8.8677e-01  3.87e-01  2.33e-03  4.16e-01  4.81e-05  8.46e-03  8.95e-01  
  7  +4.9223e-01  +8.2791e-01  3.36e-01  2.09e-04  3.77e-02  5.71e-04  5.68e-04  9.33e-01  
  8  +4.8641e-01  +7.8135e-01  2.95e-01  1.52e-04  2.73e-02  4.61e-04  4.15e-04  4.27e-01  
  9  +4.8480e-01  +7.6980e-01  2.85e-01  1.42e-04  2.56e-02  3.94e-04  3.91e-04  1.67e-01  
 10  +4.8024e-01  +7.3455e-01  2.54e-01  1.25e-04  2.24e-02  1.69e-04  3.47e-04  4.96e-01  
 11  +4.5544e-01  +6.0721e-01  1.52e-01  6.12e-05  1.09e-02  8.02e-06  1.81e-04  9.35e-01  
 12  +4.2308e-01  +4.7468e-01  5.16e-02  1.93e-05  3.42e-03  3.05e-06  6.31e-05  7.59e-01  
 13  +4.1683e-01  +4.5194e-01  3.51e-02  1.28e-05  2.27e-03  2.59e-06  4.31e-05  4.61e-01  
 14  +4.0743e-01  +4.1730e-01  9.87e-03  3.53e-06  6.25e-04  1.28e-06  1.24e-05  9.90e-01  
 15  +4.0377e-01  +4.0442e-01  6.53e-04  2.34e-07  4.14e-05  7.99e-08  8.45e-07  9.40e-01  
 16  +4.0351e-01  +4.0352e-01  1.31e-05  4.69e-09  8.30e-07  1.57e-09  1.71e-08  9.90e-01  
 17  +4.0350e-01  +4.0350e-01  1.32e-07  4.71e-11  8.35e-09  1.58e-11  1.72e-10  9.90e-01  
 18  +4.0350e-01  +4.0350e-01  1.32e-09  4.71e-13  8.35e-11  1.59e-13  1.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.0957ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:04 PM: Optimal value: 4.035e-01
(CVXPY) Oct 06 04:28:04 PM: Compilation took 2.826e-02 seconds
(CVXPY) Oct 06 04:28:04 PM: Solver (including time spent in interface) took 1.290e-01 seconds
Iteration: 5, Objective: 0.4035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:04 PM: Your problem has 2571 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:04 PM: Finished problem compilation (took 3.000e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2571
  constraints   = 5071
  nnz(P)        = 0
  nnz(A)        = 39505
  cones (total) = 1
    : Nonnegative = 1,  numel = 5071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5014e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7736e-01  +5.5002e+02  5.49e+02  4.42e-01  5.78e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2838e-01  +5.9558e+01  5.90e+01  1.71e-01  2.86e+01  1.81e-02  2.87e-01  9.67e-01  
  3  +5.0784e-01  +1.5316e+01  1.48e+01  1.04e-01  1.74e+01  5.10e-05  2.55e-01  3.97e-01  
  4  +5.0087e-01  +1.6853e+00  1.18e+00  1.17e-02  2.03e+00  7.82e-06  1.26e-01  7.58e-01  
  5  +5.0028e-01  +1.0534e+00  5.53e-01  5.25e-03  9.22e-01  1.47e-05  5.07e-02  8.39e-01  
  6  +4.9931e-01  +8.8967e-01  3.90e-01  1.39e-03  2.51e-01  8.92e-05  4.14e-03  9.46e-01  
  7  +4.9362e-01  +8.4988e-01  3.56e-01  2.54e-04  4.60e-02  4.67e-04  6.81e-04  8.37e-01  
  8  +4.8779e-01  +8.0996e-01  3.22e-01  1.81e-04  3.27e-02  4.60e-04  4.90e-04  3.76e-01  
  9  +4.8347e-01  +7.7547e-01  2.92e-01  1.58e-04  2.85e-02  1.71e-04  4.35e-04  5.72e-01  
 10  +4.8287e-01  +7.7195e-01  2.89e-01  1.56e-04  2.81e-02  1.64e-04  4.30e-04  3.89e-02  
 11  +4.7206e-01  +7.0874e-01  2.37e-01  1.21e-04  2.17e-02  2.79e-05  3.44e-04  7.89e-01  
 12  +4.5114e-01  +6.1942e-01  1.68e-01  7.16e-05  1.28e-02  1.65e-05  2.15e-04  8.08e-01  
 13  +4.2051e-01  +4.8730e-01  6.68e-02  2.57e-05  4.56e-03  5.45e-06  8.43e-05  7.05e-01  
 14  +4.0381e-01  +4.2381e-01  2.00e-02  7.37e-06  1.31e-03  1.87e-06  2.59e-05  8.19e-01  
 15  +3.9675e-01  +3.9787e-01  1.12e-03  4.06e-07  7.20e-05  1.21e-07  1.49e-06  9.82e-01  
 16  +3.9630e-01  +3.9632e-01  1.15e-05  4.19e-09  7.44e-07  1.24e-09  1.54e-08  9.90e-01  
 17  +3.9630e-01  +3.9630e-01  1.15e-07  4.19e-11  7.44e-09  1.24e-11  1.54e-10  9.90e-01  
 18  +3.9630e-01  +3.9630e-01  1.15e-09  4.19e-13  7.44e-11  1.24e-13  1.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.0747ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:04 PM: Optimal value: 3.963e-01
(CVXPY) Oct 06 04:28:04 PM: Compilation took 3.000e-02 seconds
(CVXPY) Oct 06 04:28:04 PM: Solver (including time spent in interface) took 1.588e-01 seconds
Iteration: 6, Objective: 0.3963
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:04 PM: Your problem has 2581 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:04 PM: Finished problem compilation (took 3.001e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2581
  constraints   = 5081
  nnz(P)        = 0
  nnz(A)        = 39894
  cones (total) = 1
    : Nonnegative = 1,  numel = 5081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5013e+03  2.50e+03  9.80e-01  8.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.7723e-01  +5.5006e+02  5.49e+02  4.42e-01  5.77e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2829e-01  +5.9481e+01  5.90e+01  1.71e-01  2.85e+01  1.81e-02  2.87e-01  9.69e-01  
  3  +5.0782e-01  +1.5290e+01  1.48e+01  1.04e-01  1.73e+01  5.12e-05  2.54e-01  4.01e-01  
  4  +5.0082e-01  +1.5989e+00  1.10e+00  1.08e-02  1.88e+00  7.59e-06  1.20e-01  7.91e-01  
  5  +5.0034e-01  +1.0934e+00  5.93e-01  5.58e-03  9.81e-01  1.71e-05  4.40e-02  8.76e-01  
  6  +4.9900e-01  +9.4645e-01  4.47e-01  9.16e-04  1.65e-01  1.62e-04  2.52e-03  9.67e-01  
  7  +4.9355e-01  +8.9963e-01  4.06e-01  2.43e-04  4.39e-02  5.35e-04  6.42e-04  7.59e-01  
  8  +4.8745e-01  +8.4763e-01  3.60e-01  1.85e-04  3.35e-02  4.47e-04  4.96e-04  3.51e-01  
  9  +4.8009e-01  +7.9199e-01  3.12e-01  1.54e-04  2.77e-02  2.52e-04  4.21e-04  4.07e-01  
 10  +4.5944e-01  +6.7323e-01  2.14e-01  9.41e-05  1.68e-02  9.10e-05  2.73e-04  6.01e-01  
 11  +4.5250e-01  +6.4024e-01  1.88e-01  8.39e-05  1.50e-02  4.53e-05  2.50e-04  4.57e-01  
 12  +4.2405e-01  +5.1402e-01  9.00e-02  3.58e-05  6.35e-03  1.72e-05  1.16e-04  5.93e-01  
 13  +4.0758e-01  +4.4795e-01  4.04e-02  1.54e-05  2.72e-03  6.51e-06  5.30e-05  6.64e-01  
 14  +3.9865e-01  +4.1316e-01  1.45e-02  5.36e-06  9.48e-04  1.83e-06  1.93e-05  9.90e-01  
 15  +3.9355e-01  +3.9445e-01  8.98e-04  3.31e-07  5.85e-05  1.11e-07  1.23e-06  9.54e-01  
 16  +3.9320e-01  +3.9321e-01  9.06e-06  3.33e-09  5.90e-07  1.12e-09  1.24e-08  9.90e-01  
 17  +3.9320e-01  +3.9320e-01  9.06e-08  3.33e-11  5.90e-09  1.12e-11  1.24e-10  9.90e-01  
 18  +3.9320e-01  +3.9320e-01  9.06e-10  3.33e-13  5.90e-11  1.12e-13  1.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.0909ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:04 PM: Optimal value: 3.932e-01
(CVXPY) Oct 06 04:28:04 PM: Compilation took 3.001e-02 seconds
(CVXPY) Oct 06 04:28:04 PM: Solver (including time spent in interface) took 1.413e-01 seconds
Iteration: 7, Objective: 0.3932
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:05 PM: Your problem has 2591 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:05 PM: Finished problem compilation (took 2.000e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2591
  constraints   = 5091
  nnz(P)        = 0
  nnz(A)        = 40366
  cones (total) = 1
    : Nonnegative = 1,  numel = 5091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5014e+03  2.50e+03  9.80e-01  8.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.7691e-01  +5.5012e+02  5.50e+02  4.42e-01  5.77e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2808e-01  +5.9286e+01  5.88e+01  1.70e-01  2.83e+01  1.81e-02  2.85e-01  9.72e-01  
  3  +5.0778e-01  +1.5239e+01  1.47e+01  1.04e-01  1.73e+01  5.15e-05  2.52e-01  4.08e-01  
  4  +5.0086e-01  +1.6849e+00  1.18e+00  1.17e-02  2.03e+00  7.99e-06  1.23e-01  7.65e-01  
  5  +5.0030e-01  +1.1109e+00  6.11e-01  5.74e-03  1.01e+00  1.64e-05  4.41e-02  8.55e-01  
  6  +4.9863e-01  +1.0106e+00  5.12e-01  1.13e-03  2.05e-01  1.46e-04  3.11e-03  9.45e-01  
  7  +4.9138e-01  +9.5055e-01  4.59e-01  2.76e-04  5.01e-02  5.21e-04  7.26e-04  7.73e-01  
  8  +4.7908e-01  +8.4221e-01  3.63e-01  1.76e-04  3.18e-02  3.73e-04  4.77e-04  4.95e-01  
  9  +4.7124e-01  +7.8691e-01  3.16e-01  1.53e-04  2.75e-02  2.40e-04  4.25e-04  2.69e-01  
 10  +4.5138e-01  +6.6692e-01  2.16e-01  1.00e-04  1.79e-02  2.34e-06  2.98e-04  8.43e-01  
 11  +4.1408e-01  +4.9557e-01  8.15e-02  3.26e-05  5.79e-03  1.83e-06  1.08e-04  6.85e-01  
 12  +3.9944e-01  +4.3780e-01  3.84e-02  1.49e-05  2.64e-03  1.52e-06  5.31e-05  6.00e-01  
 13  +3.8833e-01  +3.9476e-01  6.43e-03  2.45e-06  4.33e-04  3.65e-07  9.31e-06  8.69e-01  
 14  +3.8609e-01  +3.8633e-01  2.35e-04  8.94e-08  1.58e-05  2.26e-08  3.45e-07  9.90e-01  
 15  +3.8600e-01  +3.8600e-01  2.35e-06  8.94e-10  1.58e-07  2.26e-10  3.46e-09  9.90e-01  
 16  +3.8600e-01  +3.8600e-01  2.35e-08  8.94e-12  1.58e-09  2.26e-12  3.46e-11  9.90e-01  
 17  +3.8600e-01  +3.8600e-01  2.35e-10  8.94e-14  1.58e-11  2.26e-14  3.46e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 137.6024ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:05 PM: Optimal value: 3.860e-01
(CVXPY) Oct 06 04:28:05 PM: Compilation took 2.000e-02 seconds
(CVXPY) Oct 06 04:28:05 PM: Solver (including time spent in interface) took 1.501e-01 seconds
Iteration: 8, Objective: 0.3860
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:05 PM: Your problem has 2601 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:05 PM: Finished problem compilation (took 4.000e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2601
  constraints   = 5101
  nnz(P)        = 0
  nnz(A)        = 40667
  cones (total) = 1
    : Nonnegative = 1,  numel = 5101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5014e+03  2.50e+03  9.80e-01  8.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.7676e-01  +5.5016e+02  5.50e+02  4.43e-01  5.76e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2796e-01  +5.9174e+01  5.86e+01  1.70e-01  2.82e+01  1.82e-02  2.85e-01  9.73e-01  
  3  +5.0776e-01  +1.5209e+01  1.47e+01  1.03e-01  1.72e+01  5.17e-05  2.51e-01  4.13e-01  
  4  +5.0091e-01  +1.7803e+00  1.28e+00  1.26e-02  2.19e+00  8.35e-06  1.27e-01  7.36e-01  
  5  +5.0022e-01  +1.0770e+00  5.77e-01  5.42e-03  9.51e-01  1.62e-05  4.32e-02  8.87e-01  
  6  +4.9703e-01  +1.0262e+00  5.29e-01  8.33e-04  1.51e-01  2.18e-04  2.24e-03  9.65e-01  
  7  +4.8923e-01  +9.5955e-01  4.70e-01  3.08e-04  5.57e-02  4.78e-04  8.14e-04  6.50e-01  
  8  +4.7761e-01  +8.5909e-01  3.81e-01  1.91e-04  3.45e-02  3.86e-04  5.19e-04  4.99e-01  
  9  +4.7156e-01  +8.1590e-01  3.44e-01  1.69e-04  3.04e-02  3.00e-04  4.67e-04  1.92e-01  
 10  +4.4217e-01  +6.2840e-01  1.86e-01  8.29e-05  1.48e-02  3.04e-06  2.50e-04  8.43e-01  
 11  +4.0582e-01  +4.6652e-01  6.07e-02  2.44e-05  4.32e-03  3.16e-06  8.35e-05  8.00e-01  
 12  +3.9504e-01  +4.2540e-01  3.04e-02  1.18e-05  2.08e-03  2.84e-06  4.24e-05  8.09e-01  
 13  +3.8859e-01  +4.0017e-01  1.16e-02  4.42e-06  7.80e-04  1.34e-06  1.65e-05  9.48e-01  
 14  +3.8497e-01  +3.8677e-01  1.80e-03  6.83e-07  1.21e-04  2.09e-07  2.62e-06  8.55e-01  
 15  +3.8431e-01  +3.8433e-01  2.18e-05  8.26e-09  1.46e-06  2.52e-09  3.19e-08  9.88e-01  
 16  +3.8430e-01  +3.8430e-01  2.18e-07  8.26e-11  1.46e-08  2.52e-11  3.19e-10  9.90e-01  
 17  +3.8430e-01  +3.8430e-01  2.18e-09  8.26e-13  1.46e-10  2.53e-13  3.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.1987ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:05 PM: Optimal value: 3.843e-01
(CVXPY) Oct 06 04:28:05 PM: Compilation took 4.000e-02 seconds
(CVXPY) Oct 06 04:28:05 PM: Solver (including time spent in interface) took 1.515e-01 seconds
Iteration: 9, Objective: 0.3843
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:05 PM: Your problem has 2611 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:05 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2611
  constraints   = 5111
  nnz(P)        = 0
  nnz(A)        = 41057
  cones (total) = 1
    : Nonnegative = 1,  numel = 5111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5015e+03  2.50e+03  9.80e-01  8.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.7654e-01  +5.5018e+02  5.50e+02  4.43e-01  5.75e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2780e-01  +5.9011e+01  5.85e+01  1.69e-01  2.80e+01  1.82e-02  2.84e-01  9.76e-01  
  3  +5.0773e-01  +1.5168e+01  1.47e+01  1.03e-01  1.71e+01  5.19e-05  2.49e-01  4.18e-01  
  4  +5.0095e-01  +1.8723e+00  1.37e+00  1.36e-02  2.34e+00  8.74e-06  1.30e-01  7.11e-01  
  5  +5.0021e-01  +1.1262e+00  6.26e-01  5.87e-03  1.03e+00  1.66e-05  4.58e-02  8.93e-01  
  6  +4.9733e-01  +1.0791e+00  5.82e-01  1.16e-03  2.10e-01  1.69e-04  3.16e-03  9.52e-01  
  7  +4.8549e-01  +9.8040e-01  4.95e-01  2.74e-04  4.97e-02  5.70e-04  7.20e-04  7.78e-01  
  8  +4.7081e-01  +8.5286e-01  3.82e-01  1.83e-04  3.30e-02  3.62e-04  4.99e-04  4.46e-01  
  9  +4.4135e-01  +6.4927e-01  2.08e-01  9.60e-05  1.71e-02  3.40e-06  2.89e-04  7.86e-01  
 10  +4.1096e-01  +5.0491e-01  9.40e-02  3.99e-05  7.07e-03  2.70e-06  1.33e-04  6.12e-01  
 11  +3.9458e-01  +4.3486e-01  4.03e-02  1.65e-05  2.91e-03  1.92e-06  5.92e-05  6.64e-01  
 12  +3.9108e-01  +4.2048e-01  2.94e-02  1.19e-05  2.10e-03  1.56e-06  4.36e-05  3.27e-01  
 13  +3.8549e-01  +3.9752e-01  1.20e-02  4.76e-06  8.41e-04  1.03e-06  1.81e-05  8.16e-01  
 14  +3.8163e-01  +3.8249e-01  8.68e-04  3.41e-07  6.02e-05  8.95e-08  1.34e-06  9.90e-01  
 15  +3.8130e-01  +3.8131e-01  9.43e-06  3.70e-09  6.54e-07  9.66e-10  1.47e-08  9.89e-01  
 16  +3.8130e-01  +3.8130e-01  9.44e-08  3.71e-11  6.55e-09  9.68e-12  1.47e-10  9.90e-01  
 17  +3.8130e-01  +3.8130e-01  9.44e-10  3.71e-13  6.55e-11  9.70e-14  1.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.2406ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:06 PM: Optimal value: 3.813e-01
(CVXPY) Oct 06 04:28:06 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:28:06 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 10, Objective: 0.3813
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:06 PM: Your problem has 2621 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:06 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2621
  constraints   = 5121
  nnz(P)        = 0
  nnz(A)        = 41341
  cones (total) = 1
    : Nonnegative = 1,  numel = 5121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.7630e-01  +5.5031e+02  5.50e+02  4.43e-01  5.74e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2762e-01  +5.8859e+01  5.83e+01  1.69e-01  2.79e+01  1.82e-02  2.83e-01  9.78e-01  
  3  +5.0770e-01  +1.5131e+01  1.46e+01  1.03e-01  1.70e+01  5.23e-05  2.48e-01  4.25e-01  
  4  +5.0087e-01  +1.7144e+00  1.21e+00  1.20e-02  2.08e+00  8.29e-06  1.19e-01  7.63e-01  
  5  +5.0036e-01  +1.2827e+00  7.82e-01  7.12e-03  1.25e+00  2.06e-05  4.09e-02  8.84e-01  
  6  +4.9755e-01  +1.0837e+00  5.86e-01  8.70e-04  1.58e-01  2.05e-04  2.28e-03  9.57e-01  
  7  +4.8786e-01  +9.9077e-01  5.03e-01  2.67e-04  4.85e-02  5.13e-04  6.90e-04  7.18e-01  
  8  +4.7768e-01  +8.9331e-01  4.16e-01  2.09e-04  3.78e-02  2.47e-04  5.58e-04  4.80e-01  
  9  +4.5239e-01  +7.2838e-01  2.76e-01  1.26e-04  2.25e-02  1.01e-04  3.59e-04  5.38e-01  
 10  +4.2011e-01  +5.6164e-01  1.42e-01  6.07e-05  1.08e-02  3.43e-05  1.93e-04  5.38e-01  
 11  +3.9830e-01  +4.6208e-01  6.38e-02  2.63e-05  4.65e-03  8.64e-06  9.15e-05  8.46e-01  
 12  +3.8776e-01  +4.1575e-01  2.80e-02  1.12e-05  1.98e-03  3.45e-06  4.10e-05  9.51e-01  
 13  +3.8499e-01  +4.0452e-01  1.95e-02  7.82e-06  1.38e-03  2.29e-06  2.93e-05  6.25e-01  
 14  +3.8107e-01  +3.8905e-01  7.99e-03  3.17e-06  5.59e-04  9.36e-07  1.22e-05  6.89e-01  
 15  +3.7861e-01  +3.7973e-01  1.12e-03  4.38e-07  7.74e-05  1.18e-07  1.72e-06  9.90e-01  
 16  +3.7821e-01  +3.7823e-01  1.90e-05  7.44e-09  1.31e-06  2.01e-09  2.94e-08  9.83e-01  
 17  +3.7820e-01  +3.7820e-01  1.90e-07  7.44e-11  1.32e-08  2.01e-11  2.94e-10  9.90e-01  
 18  +3.7820e-01  +3.7820e-01  1.90e-09  7.44e-13  1.32e-10  2.01e-13  2.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.8143ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:06 PM: Optimal value: 3.782e-01
(CVXPY) Oct 06 04:28:06 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:28:06 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 11, Objective: 0.3782
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:06 PM: Your problem has 2631 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:06 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2631
  constraints   = 5131
  nnz(P)        = 0
  nnz(A)        = 41607
  cones (total) = 1
    : Nonnegative = 1,  numel = 5131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.7622e-01  +5.5020e+02  5.50e+02  4.43e-01  5.73e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2755e-01  +5.8771e+01  5.82e+01  1.69e-01  2.78e+01  1.82e-02  2.83e-01  9.79e-01  
  3  +5.0768e-01  +1.5105e+01  1.46e+01  1.02e-01  1.70e+01  5.23e-05  2.47e-01  4.28e-01  
  4  +5.0088e-01  +1.7328e+00  1.23e+00  1.22e-02  2.11e+00  8.40e-06  1.20e-01  7.59e-01  
  5  +5.0036e-01  +1.2976e+00  7.97e-01  7.26e-03  1.27e+00  2.02e-05  4.14e-02  8.73e-01  
  6  +4.9741e-01  +1.0813e+00  5.84e-01  8.58e-04  1.56e-01  2.03e-04  2.25e-03  9.58e-01  
  7  +4.8741e-01  +9.9008e-01  5.03e-01  2.65e-04  4.81e-02  5.08e-04  6.83e-04  7.15e-01  
  8  +4.7687e-01  +9.0087e-01  4.24e-01  2.09e-04  3.78e-02  2.95e-04  5.57e-04  4.08e-01  
  9  +4.4652e-01  +7.0117e-01  2.55e-01  1.13e-04  2.02e-02  9.04e-05  3.26e-04  6.10e-01  
 10  +4.1760e-01  +5.5784e-01  1.40e-01  5.97e-05  1.06e-02  3.65e-05  1.90e-04  4.80e-01  
 11  +3.9353e-01  +4.4875e-01  5.52e-02  2.27e-05  4.01e-03  9.82e-06  7.98e-05  7.25e-01  
 12  +3.8338e-01  +4.0608e-01  2.27e-02  9.10e-06  1.61e-03  3.69e-06  3.37e-05  6.78e-01  
 13  +3.8318e-01  +4.0504e-01  2.19e-02  8.80e-06  1.55e-03  3.44e-06  3.28e-05  8.80e-02  
 14  +3.8317e-01  +4.0497e-01  2.18e-02  8.76e-06  1.55e-03  3.39e-06  3.26e-05  4.89e-02  
 15  +3.8128e-01  +3.9733e-01  1.60e-02  6.35e-06  1.12e-03  2.37e-06  2.38e-05  4.51e-01  
 16  +3.7659e-01  +3.7896e-01  2.37e-03  9.23e-07  1.63e-04  2.72e-07  3.60e-06  9.90e-01  
 17  +3.7571e-01  +3.7575e-01  3.30e-05  1.28e-08  2.27e-06  3.76e-09  5.05e-08  9.86e-01  
 18  +3.7570e-01  +3.7570e-01  3.30e-07  1.28e-10  2.27e-08  3.76e-11  5.05e-10  9.90e-01  
 19  +3.7570e-01  +3.7570e-01  3.30e-09  1.28e-12  2.27e-10  3.77e-13  5.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 140.645ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:06 PM: Optimal value: 3.757e-01
(CVXPY) Oct 06 04:28:06 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:28:06 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 12, Objective: 0.3757
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:07 PM: Your problem has 2641 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:07 PM: Finished problem compilation (took 3.122e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2641
  constraints   = 5141
  nnz(P)        = 0
  nnz(A)        = 41830
  cones (total) = 1
    : Nonnegative = 1,  numel = 5141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5016e+03  2.50e+03  9.80e-01  8.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.7603e-01  +5.5010e+02  5.50e+02  4.43e-01  5.72e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2743e-01  +5.8642e+01  5.81e+01  1.68e-01  2.76e+01  1.83e-02  2.82e-01  9.81e-01  
  3  +5.0766e-01  +1.5069e+01  1.46e+01  1.02e-01  1.69e+01  5.25e-05  2.46e-01  4.32e-01  
  4  +5.0096e-01  +1.9025e+00  1.40e+00  1.39e-02  2.39e+00  9.06e-06  1.27e-01  7.09e-01  
  5  +5.0025e-01  +1.2319e+00  7.32e-01  6.79e-03  1.19e+00  1.77e-05  4.44e-02  8.62e-01  
  6  +4.9635e-01  +1.1214e+00  6.25e-01  9.47e-04  1.72e-01  2.05e-04  2.49e-03  9.58e-01  
  7  +4.8532e-01  +1.0155e+00  5.30e-01  3.13e-04  5.67e-02  4.65e-04  8.12e-04  6.91e-01  
  8  +4.7524e-01  +9.3106e-01  4.56e-01  2.32e-04  4.19e-02  3.48e-04  6.15e-04  3.92e-01  
  9  +4.4800e-01  +7.3777e-01  2.90e-01  1.31e-04  2.34e-02  1.41e-04  3.74e-04  5.46e-01  
 10  +4.1826e-01  +5.7852e-01  1.60e-01  6.92e-05  1.23e-02  5.67e-05  2.18e-04  4.75e-01  
 11  +4.0240e-01  +5.0309e-01  1.01e-01  4.23e-05  7.47e-03  2.62e-05  1.42e-04  5.61e-01  
 12  +3.8845e-01  +4.4010e-01  5.17e-02  2.11e-05  3.73e-03  1.15e-05  7.54e-05  5.77e-01  
 13  +3.8194e-01  +4.1183e-01  2.99e-02  1.21e-05  2.13e-03  6.12e-06  4.46e-05  5.12e-01  
 14  +3.7441e-01  +3.7998e-01  5.57e-03  2.22e-06  3.91e-04  8.48e-07  8.62e-06  9.13e-01  
 15  +3.7256e-01  +3.7272e-01  1.61e-04  6.38e-08  1.13e-05  1.92e-08  2.52e-07  9.90e-01  
 16  +3.7250e-01  +3.7250e-01  1.61e-06  6.38e-10  1.13e-07  1.92e-10  2.52e-09  9.90e-01  
 17  +3.7250e-01  +3.7250e-01  1.61e-08  6.38e-12  1.13e-09  1.92e-12  2.52e-11  9.90e-01  
 18  +3.7250e-01  +3.7250e-01  1.61e-10  6.38e-14  1.13e-11  1.93e-14  2.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 130.83ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:07 PM: Optimal value: 3.725e-01
(CVXPY) Oct 06 04:28:07 PM: Compilation took 3.122e-02 seconds
(CVXPY) Oct 06 04:28:07 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 13, Objective: 0.3725
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:07 PM: Your problem has 2651 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:07 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2651
  constraints   = 5151
  nnz(P)        = 0
  nnz(A)        = 42023
  cones (total) = 1
    : Nonnegative = 1,  numel = 5151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5016e+03  2.50e+03  9.80e-01  8.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7599e-01  +5.5003e+02  5.49e+02  4.43e-01  5.70e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2739e-01  +5.8587e+01  5.81e+01  1.68e-01  2.75e+01  1.83e-02  2.81e-01  9.81e-01  
  3  +5.0765e-01  +1.5055e+01  1.45e+01  1.02e-01  1.68e+01  5.25e-05  2.45e-01  4.33e-01  
  4  +5.0099e-01  +1.9623e+00  1.46e+00  1.45e-02  2.49e+00  9.27e-06  1.29e-01  6.93e-01  
  5  +5.0020e-01  +1.1894e+00  6.89e-01  6.42e-03  1.12e+00  1.72e-05  4.37e-02  8.79e-01  
  6  +4.9515e-01  +1.1428e+00  6.48e-01  8.48e-04  1.54e-01  2.45e-04  2.23e-03  9.67e-01  
  7  +4.8252e-01  +1.0102e+00  5.28e-01  3.01e-04  5.44e-02  4.70e-04  7.85e-04  6.74e-01  
  8  +4.7302e-01  +9.2778e-01  4.55e-01  2.29e-04  4.12e-02  3.27e-04  6.10e-04  4.01e-01  
  9  +4.4349e-01  +7.1890e-01  2.75e-01  1.22e-04  2.18e-02  1.22e-04  3.52e-04  5.73e-01  
 10  +4.1775e-01  +5.8359e-01  1.66e-01  7.11e-05  1.26e-02  5.67e-05  2.23e-04  4.32e-01  
 11  +3.9462e-01  +4.7369e-01  7.91e-02  3.27e-05  5.77e-03  2.09e-05  1.13e-04  5.88e-01  
 12  +3.8184e-01  +4.1782e-01  3.60e-02  1.45e-05  2.55e-03  8.32e-06  5.30e-05  6.17e-01  
 13  +3.7516e-01  +3.8882e-01  1.37e-02  5.39e-06  9.50e-04  2.07e-06  2.05e-05  8.91e-01  
 14  +3.7091e-01  +3.7226e-01  1.35e-03  5.30e-07  9.35e-05  1.59e-07  2.09e-06  9.83e-01  
 15  +3.7041e-01  +3.7042e-01  1.43e-05  5.62e-09  9.91e-07  1.67e-09  2.22e-08  9.90e-01  
 16  +3.7040e-01  +3.7040e-01  1.43e-07  5.62e-11  9.91e-09  1.67e-11  2.22e-10  9.90e-01  
 17  +3.7040e-01  +3.7040e-01  1.43e-09  5.62e-13  9.91e-11  1.68e-13  2.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.3882ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:07 PM: Optimal value: 3.704e-01
(CVXPY) Oct 06 04:28:07 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:28:07 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 14, Objective: 0.3704
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:07 PM: Your problem has 2661 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:07 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2661
  constraints   = 5161
  nnz(P)        = 0
  nnz(A)        = 42304
  cones (total) = 1
    : Nonnegative = 1,  numel = 5161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5017e+03  2.50e+03  9.80e-01  8.74e+01  1.00e+00  1.00e+00   ------   
  1  +5.7595e-01  +5.5000e+02  5.49e+02  4.43e-01  5.69e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2734e-01  +5.8523e+01  5.80e+01  1.68e-01  2.74e+01  1.83e-02  2.81e-01  9.82e-01  
  3  +5.0764e-01  +1.5036e+01  1.45e+01  1.02e-01  1.68e+01  5.26e-05  2.45e-01  4.35e-01  
  4  +5.0101e-01  +2.0052e+00  1.50e+00  1.49e-02  2.56e+00  9.44e-06  1.31e-01  6.82e-01  
  5  +5.0020e-01  +1.2022e+00  7.02e-01  6.56e-03  1.15e+00  1.68e-05  4.55e-02  8.64e-01  
  6  +4.9503e-01  +1.1445e+00  6.49e-01  8.65e-04  1.57e-01  2.39e-04  2.27e-03  9.68e-01  
  7  +4.8310e-01  +1.0196e+00  5.37e-01  3.23e-04  5.84e-02  4.42e-04  8.45e-04  6.55e-01  
  8  +4.7459e-01  +9.4238e-01  4.68e-01  2.46e-04  4.43e-02  3.16e-04  6.55e-04  4.07e-01  
  9  +4.4681e-01  +7.4562e-01  2.99e-01  1.33e-04  2.37e-02  1.46e-04  3.79e-04  5.61e-01  
 10  +4.1716e-01  +5.8504e-01  1.68e-01  7.20e-05  1.27e-02  5.86e-05  2.27e-04  4.71e-01  
 11  +3.9358e-01  +4.7239e-01  7.88e-02  3.27e-05  5.76e-03  1.87e-05  1.13e-04  6.58e-01  
 12  +3.8022e-01  +4.1379e-01  3.36e-02  1.36e-05  2.39e-03  7.20e-06  5.02e-05  6.17e-01  
 13  +3.7412e-01  +3.8723e-01  1.31e-02  5.18e-06  9.10e-04  1.76e-06  1.99e-05  9.42e-01  
 14  +3.6975e-01  +3.7045e-01  7.03e-04  2.76e-07  4.86e-05  9.03e-08  1.10e-06  9.52e-01  
 15  +3.6950e-01  +3.6951e-01  7.15e-06  2.81e-09  4.94e-07  9.18e-10  1.12e-08  9.90e-01  
 16  +3.6950e-01  +3.6950e-01  7.15e-08  2.81e-11  4.94e-09  9.18e-12  1.12e-10  9.90e-01  
 17  +3.6950e-01  +3.6950e-01  7.15e-10  2.81e-13  4.94e-11  9.19e-14  1.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 130.0694ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:08 PM: Optimal value: 3.695e-01
(CVXPY) Oct 06 04:28:08 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:28:08 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 15, Objective: 0.3695
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:08 PM: Your problem has 2671 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:08 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2671
  constraints   = 5171
  nnz(P)        = 0
  nnz(A)        = 42562
  cones (total) = 1
    : Nonnegative = 1,  numel = 5171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5016e+03  2.50e+03  9.80e-01  8.74e+01  1.00e+00  1.00e+00   ------   
  1  +5.7577e-01  +5.5007e+02  5.49e+02  4.44e-01  5.69e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2721e-01  +5.8410e+01  5.79e+01  1.67e-01  2.73e+01  1.83e-02  2.81e-01  9.84e-01  
  3  +5.0762e-01  +1.5017e+01  1.45e+01  1.01e-01  1.67e+01  5.28e-05  2.44e-01  4.39e-01  
  4  +5.0100e-01  +1.9858e+00  1.48e+00  1.47e-02  2.53e+00  9.43e-06  1.29e-01  6.89e-01  
  5  +5.0017e-01  +1.2108e+00  7.11e-01  6.55e-03  1.14e+00  1.86e-05  4.13e-02  9.07e-01  
  6  +4.9443e-01  +1.1477e+00  6.53e-01  7.88e-04  1.43e-01  2.68e-04  2.06e-03  9.62e-01  
  7  +4.8138e-01  +1.0076e+00  5.26e-01  3.03e-04  5.47e-02  4.51e-04  7.92e-04  6.55e-01  
  8  +4.6929e-01  +9.2093e-01  4.52e-01  2.19e-04  3.93e-02  3.70e-04  5.86e-04  3.60e-01  
  9  +4.4693e-01  +7.5532e-01  3.08e-01  1.45e-04  2.58e-02  1.35e-04  4.16e-04  4.93e-01  
 10  +4.1683e-01  +5.9025e-01  1.73e-01  7.55e-05  1.33e-02  5.77e-05  2.38e-04  4.85e-01  
 11  +3.9386e-01  +4.7946e-01  8.56e-02  3.59e-05  6.32e-03  2.04e-05  1.24e-04  6.20e-01  
 12  +3.7872e-01  +4.1185e-01  3.31e-02  1.35e-05  2.38e-03  6.98e-06  5.01e-05  6.52e-01  
 13  +3.7491e-01  +3.9462e-01  1.97e-02  7.93e-06  1.39e-03  3.32e-06  3.00e-05  6.78e-01  
 14  +3.7108e-01  +3.7929e-01  8.20e-03  3.26e-06  5.73e-04  1.35e-06  1.27e-05  5.97e-01  
 15  +3.6938e-01  +3.7237e-01  2.99e-03  1.18e-06  2.07e-04  3.95e-07  4.68e-06  8.43e-01  
 16  +3.6832e-01  +3.6836e-01  4.53e-05  1.78e-08  3.13e-06  5.59e-09  7.15e-08  9.89e-01  
 17  +3.6830e-01  +3.6830e-01  4.53e-07  1.78e-10  3.13e-08  5.59e-11  7.15e-10  9.90e-01  
 18  +3.6830e-01  +3.6830e-01  4.53e-09  1.78e-12  3.13e-10  5.61e-13  7.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143.5747ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:08 PM: Optimal value: 3.683e-01
(CVXPY) Oct 06 04:28:08 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:28:08 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 16, Objective: 0.3683
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:08 PM: Your problem has 2681 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:08 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2681
  constraints   = 5181
  nnz(P)        = 0
  nnz(A)        = 42715
  cones (total) = 1
    : Nonnegative = 1,  numel = 5181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5016e+03  2.50e+03  9.81e-01  8.73e+01  1.00e+00  1.00e+00   ------   
  1  +5.7559e-01  +5.5012e+02  5.50e+02  4.44e-01  5.68e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2712e-01  +5.8326e+01  5.78e+01  1.67e-01  2.72e+01  1.83e-02  2.80e-01  9.85e-01  
  3  +5.0761e-01  +1.4999e+01  1.45e+01  1.01e-01  1.67e+01  5.30e-05  2.43e-01  4.42e-01  
  4  +5.0099e-01  +1.9744e+00  1.47e+00  1.46e-02  2.51e+00  9.44e-06  1.27e-01  6.94e-01  
  5  +5.0024e-01  +1.2820e+00  7.82e-01  7.21e-03  1.26e+00  1.85e-05  4.38e-02  8.57e-01  
  6  +4.9529e-01  +1.1639e+00  6.69e-01  8.74e-04  1.58e-01  2.32e-04  2.28e-03  9.61e-01  
  7  +4.8848e-01  +1.0867e+00  5.98e-01  4.68e-04  8.46e-02  3.36e-04  1.22e-03  4.95e-01  
  8  +4.7946e-01  +1.0100e+00  5.31e-01  3.18e-04  5.72e-02  3.51e-04  8.38e-04  3.54e-01  
  9  +4.6763e-01  +9.0633e-01  4.39e-01  2.23e-04  4.00e-02  2.26e-04  6.04e-04  4.91e-01  
 10  +4.2937e-01  +6.4606e-01  2.17e-01  9.61e-05  1.70e-02  3.67e-05  2.89e-04  7.43e-01  
 11  +4.0213e-01  +5.1832e-01  1.16e-01  4.96e-05  8.73e-03  1.54e-05  1.65e-04  5.45e-01  
 12  +3.8058e-01  +4.2321e-01  4.26e-02  1.75e-05  3.07e-03  4.93e-06  6.40e-05  7.55e-01  
 13  +3.7463e-01  +3.9815e-01  2.35e-02  9.51e-06  1.67e-03  2.70e-06  3.58e-05  6.38e-01  
 14  +3.6939e-01  +3.7695e-01  7.56e-03  2.99e-06  5.25e-04  8.71e-07  1.17e-05  8.11e-01  
 15  +3.6752e-01  +3.6968e-01  2.15e-03  8.49e-07  1.49e-04  2.29e-07  3.36e-06  9.90e-01  
 16  +3.6671e-01  +3.6675e-01  3.61e-05  1.42e-08  2.49e-06  3.78e-09  5.64e-08  9.84e-01  
 17  +3.6670e-01  +3.6670e-01  3.61e-07  1.42e-10  2.49e-08  3.79e-11  5.65e-10  9.90e-01  
 18  +3.6670e-01  +3.6670e-01  3.61e-09  1.42e-12  2.49e-10  3.80e-13  5.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 140.4278ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:08 PM: Optimal value: 3.667e-01
(CVXPY) Oct 06 04:28:08 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:28:08 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 17, Objective: 0.3667
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:09 PM: Your problem has 2691 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:09 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2691
  constraints   = 5191
  nnz(P)        = 0
  nnz(A)        = 42888
  cones (total) = 1
    : Nonnegative = 1,  numel = 5191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5017e+03  2.50e+03  9.81e-01  8.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.7532e-01  +5.5019e+02  5.50e+02  4.44e-01  5.67e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2699e-01  +5.8223e+01  5.77e+01  1.67e-01  2.71e+01  1.84e-02  2.79e-01  9.87e-01  
  3  +5.0759e-01  +1.4979e+01  1.45e+01  1.01e-01  1.66e+01  5.33e-05  2.42e-01  4.47e-01  
  4  +5.0101e-01  +2.0300e+00  1.53e+00  1.52e-02  2.60e+00  9.71e-06  1.28e-01  6.82e-01  
  5  +5.0016e-01  +1.2468e+00  7.47e-01  6.81e-03  1.19e+00  1.97e-05  3.96e-02  9.13e-01  
  6  +4.9398e-01  +1.2173e+00  7.23e-01  8.47e-04  1.53e-01  2.74e-04  2.20e-03  9.58e-01  
  7  +4.8060e-01  +1.0636e+00  5.83e-01  3.33e-04  6.02e-02  4.47e-04  8.66e-04  6.45e-01  
  8  +4.6861e-01  +9.6538e-01  4.97e-01  2.49e-04  4.47e-02  3.63e-04  6.65e-04  3.06e-01  
  9  +4.5274e-01  +8.0154e-01  3.49e-01  1.86e-04  3.31e-02  1.55e-05  5.30e-04  7.25e-01  
 10  +4.1345e-01  +5.8380e-01  1.70e-01  7.51e-05  1.32e-02  8.72e-06  2.38e-04  6.44e-01  
 11  +3.9722e-01  +5.0830e-01  1.11e-01  4.79e-05  8.42e-03  7.17e-06  1.63e-04  4.86e-01  
 12  +3.7624e-01  +4.1305e-01  3.68e-02  1.54e-05  2.69e-03  2.48e-06  5.77e-05  7.11e-01  
 13  +3.7066e-01  +3.8889e-01  1.82e-02  7.50e-06  1.31e-03  1.53e-06  2.90e-05  7.13e-01  
 14  +3.6775e-01  +3.7708e-01  9.33e-03  3.77e-06  6.61e-04  8.23e-07  1.49e-05  5.70e-01  
 15  +3.6516e-01  +3.6666e-01  1.51e-03  6.05e-07  1.06e-04  1.53e-07  2.44e-06  9.90e-01  
 16  +3.6461e-01  +3.6463e-01  1.92e-05  7.71e-09  1.35e-06  1.94e-09  3.13e-08  9.88e-01  
 17  +3.6460e-01  +3.6460e-01  1.93e-07  7.73e-11  1.35e-08  1.94e-11  3.14e-10  9.90e-01  
 18  +3.6460e-01  +3.6460e-01  1.93e-09  7.73e-13  1.35e-10  1.95e-13  3.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.3057ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:09 PM: Optimal value: 3.646e-01
(CVXPY) Oct 06 04:28:09 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:28:09 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 18, Objective: 0.3646
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:09 PM: Your problem has 2701 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:09 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2701
  constraints   = 5201
  nnz(P)        = 0
  nnz(A)        = 43060
  cones (total) = 1
    : Nonnegative = 1,  numel = 5201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.81e-01  8.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.7499e-01  +5.5034e+02  5.50e+02  4.45e-01  5.66e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2683e-01  +5.8107e+01  5.76e+01  1.66e-01  2.70e+01  1.84e-02  2.79e-01  9.90e-01  
  3  +5.0758e-01  +1.4961e+01  1.45e+01  1.01e-01  1.66e+01  5.37e-05  2.40e-01  4.53e-01  
  4  +5.0092e-01  +1.8501e+00  1.35e+00  1.35e-02  2.31e+00  9.19e-06  1.18e-01  7.35e-01  
  5  +5.0028e-01  +1.4404e+00  9.40e-01  7.84e-03  1.38e+00  2.64e-05  3.34e-02  9.20e-01  
  6  +4.9584e-01  +1.3034e+00  8.08e-01  9.94e-04  1.80e-01  2.36e-04  2.55e-03  9.29e-01  
  7  +4.8166e-01  +1.1006e+00  6.19e-01  3.14e-04  5.68e-02  4.55e-04  8.03e-04  7.28e-01  
  8  +4.6919e-01  +1.0027e+00  5.34e-01  2.44e-04  4.39e-02  3.49e-04  6.42e-04  3.05e-01  
  9  +4.5537e-01  +8.5295e-01  3.98e-01  2.09e-04  3.72e-02  6.45e-05  5.85e-04  5.27e-01  
 10  +4.1998e-01  +6.3827e-01  2.18e-01  9.82e-05  1.73e-02  2.85e-05  3.04e-04  5.89e-01  
 11  +3.9241e-01  +4.9669e-01  1.04e-01  4.53e-05  7.95e-03  1.11e-05  1.56e-04  6.12e-01  
 12  +3.7511e-01  +4.1554e-01  4.04e-02  1.71e-05  2.99e-03  4.16e-06  6.41e-05  7.05e-01  
 13  +3.6828e-01  +3.8539e-01  1.71e-02  7.10e-06  1.24e-03  1.77e-06  2.78e-05  6.99e-01  
 14  +3.6547e-01  +3.7320e-01  7.73e-03  3.15e-06  5.53e-04  7.97e-07  1.26e-05  8.88e-01  
 15  +3.6297e-01  +3.6345e-01  4.82e-04  1.96e-07  3.43e-05  4.92e-08  8.02e-07  9.39e-01  
 16  +3.6280e-01  +3.6281e-01  4.94e-06  2.01e-09  3.51e-07  5.04e-10  8.23e-09  9.90e-01  
 17  +3.6280e-01  +3.6280e-01  4.94e-08  2.01e-11  3.52e-09  5.04e-12  8.24e-11  9.90e-01  
 18  +3.6280e-01  +3.6280e-01  4.96e-10  2.01e-13  3.53e-11  5.07e-14  8.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.0064ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:09 PM: Optimal value: 3.628e-01
(CVXPY) Oct 06 04:28:09 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:28:09 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 19, Objective: 0.3628
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:10 PM: Your problem has 2711 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:10 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2711
  constraints   = 5211
  nnz(P)        = 0
  nnz(A)        = 43429
  cones (total) = 1
    : Nonnegative = 1,  numel = 5211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5016e+03  2.50e+03  9.81e-01  8.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.7484e-01  +5.5026e+02  5.50e+02  4.45e-01  5.65e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2675e-01  +5.8111e+01  5.76e+01  1.66e-01  2.69e+01  1.84e-02  2.78e-01  9.90e-01  
  3  +5.0764e-01  +1.4976e+01  1.45e+01  1.00e-01  1.65e+01  5.42e-05  2.38e-01  4.60e-01  
  4  +5.0090e-01  +1.8252e+00  1.32e+00  1.32e-02  2.27e+00  9.30e-06  1.16e-01  7.44e-01  
  5  +5.0026e-01  +1.5742e+00  1.07e+00  8.18e-03  1.44e+00  3.28e-05  3.03e-02  9.72e-01  
  6  +4.9545e-01  +1.3738e+00  8.78e-01  1.01e-03  1.84e-01  2.48e-04  2.58e-03  9.21e-01  
  7  +4.8031e-01  +1.1256e+00  6.45e-01  3.19e-04  5.78e-02  4.39e-04  8.14e-04  7.35e-01  
  8  +4.6488e-01  +9.9174e-01  5.27e-01  2.37e-04  4.27e-02  2.94e-04  6.28e-04  3.57e-01  
  9  +4.5749e-01  +9.0400e-01  4.47e-01  2.22e-04  3.97e-02  1.55e-04  6.09e-04  2.60e-01  
 10  +4.2933e-01  +7.1379e-01  2.84e-01  1.32e-04  2.34e-02  7.39e-05  3.93e-04  4.54e-01  
 11  +3.9365e-01  +5.1393e-01  1.20e-01  5.27e-05  9.27e-03  2.03e-05  1.79e-04  6.30e-01  
 12  +3.7987e-01  +4.4718e-01  6.73e-02  2.89e-05  5.07e-03  1.04e-05  1.05e-04  5.25e-01  
 13  +3.7271e-01  +4.1405e-01  4.13e-02  1.75e-05  3.06e-03  6.18e-06  6.58e-05  4.39e-01  
 14  +3.6540e-01  +3.7949e-01  1.41e-02  5.84e-06  1.02e-03  1.61e-06  2.30e-05  9.82e-01  
 15  +3.6224e-01  +3.6690e-01  4.66e-03  1.91e-06  3.36e-04  4.92e-07  7.74e-06  9.09e-01  
 16  +3.6065e-01  +3.6080e-01  1.51e-04  6.17e-08  1.08e-05  1.57e-08  2.54e-07  9.69e-01  
 17  +3.6060e-01  +3.6060e-01  1.51e-06  6.19e-10  1.09e-07  1.58e-10  2.55e-09  9.90e-01  
 18  +3.6060e-01  +3.6060e-01  1.51e-08  6.20e-12  1.09e-09  1.58e-12  2.55e-11  9.90e-01  
 19  +3.6060e-01  +3.6060e-01  1.52e-10  6.22e-14  1.09e-11  1.58e-14  2.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143.3343ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:10 PM: Optimal value: 3.606e-01
(CVXPY) Oct 06 04:28:10 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:28:10 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 20, Objective: 0.3606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:10 PM: Your problem has 2721 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:10 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2721
  constraints   = 5221
  nnz(P)        = 0
  nnz(A)        = 43754
  cones (total) = 1
    : Nonnegative = 1,  numel = 5221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.81e-01  8.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.7469e-01  +5.5028e+02  5.50e+02  4.45e-01  5.64e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2666e-01  +5.8183e+01  5.77e+01  1.66e-01  2.68e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0771e-01  +1.4960e+01  1.45e+01  9.99e-02  1.65e+01  5.48e-05  2.35e-01  4.72e-01  
  4  +5.0090e-01  +1.8752e+00  1.37e+00  1.38e-02  2.36e+00  9.74e-06  1.19e-01  7.28e-01  
  5  +5.0015e-01  +1.4292e+00  9.29e-01  7.49e-03  1.32e+00  2.80e-05  3.00e-02  9.57e-01  
  6  +4.9444e-01  +1.3114e+00  8.17e-01  9.20e-04  1.67e-01  2.56e-04  2.34e-03  9.29e-01  
  7  +4.7828e-01  +1.0786e+00  6.00e-01  3.13e-04  5.65e-02  4.08e-04  8.02e-04  7.16e-01  
  8  +4.6906e-01  +1.0117e+00  5.43e-01  2.59e-04  4.67e-02  3.50e-04  6.77e-04  2.21e-01  
  9  +4.5061e-01  +8.4197e-01  3.91e-01  1.99e-04  3.55e-02  6.92e-05  5.57e-04  5.78e-01  
 10  +4.0758e-01  +5.8504e-01  1.77e-01  7.82e-05  1.38e-02  2.20e-05  2.48e-04  6.40e-01  
 11  +3.8690e-01  +4.8420e-01  9.73e-02  4.23e-05  7.44e-03  1.11e-05  1.47e-04  5.26e-01  
 12  +3.7208e-01  +4.1454e-01  4.25e-02  1.81e-05  3.17e-03  4.76e-06  6.77e-05  7.12e-01  
 13  +3.6572e-01  +3.8574e-01  2.00e-02  8.38e-06  1.47e-03  2.23e-06  3.26e-05  7.45e-01  
 14  +3.6238e-01  +3.7120e-01  8.82e-03  3.65e-06  6.41e-04  9.15e-07  1.46e-05  9.90e-01  
 15  +3.5968e-01  +3.6077e-01  1.09e-03  4.48e-07  7.87e-05  1.12e-07  1.84e-06  8.82e-01  
 16  +3.5930e-01  +3.5932e-01  1.19e-05  4.89e-09  8.59e-07  1.22e-09  2.01e-08  9.89e-01  
 17  +3.5930e-01  +3.5930e-01  1.19e-07  4.89e-11  8.59e-09  1.22e-11  2.01e-10  9.90e-01  
 18  +3.5930e-01  +3.5930e-01  1.19e-09  4.91e-13  8.62e-11  1.23e-13  2.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143.9977ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:10 PM: Optimal value: 3.593e-01
(CVXPY) Oct 06 04:28:10 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:28:10 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 21, Objective: 0.3593
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:10 PM: Your problem has 2729 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:10 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2729
  constraints   = 5229
  nnz(P)        = 0
  nnz(A)        = 44350
  cones (total) = 1
    : Nonnegative = 1,  numel = 5229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.81e-01  8.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.7458e-01  +5.5029e+02  5.50e+02  4.45e-01  5.64e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2660e-01  +5.8239e+01  5.77e+01  1.66e-01  2.68e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0775e-01  +1.4913e+01  1.44e+01  9.95e-02  1.64e+01  5.52e-05  2.33e-01  4.82e-01  
  4  +5.0082e-01  +1.7573e+00  1.26e+00  1.27e-02  2.17e+00  9.54e-06  1.13e-01  7.63e-01  
  5  +5.0024e-01  +1.6245e+00  1.12e+00  8.24e-03  1.46e+00  3.29e-05  2.87e-02  9.45e-01  
  6  +4.9543e-01  +1.4308e+00  9.35e-01  1.11e-03  2.02e-01  2.21e-04  2.81e-03  9.09e-01  
  7  +4.8163e-01  +1.1916e+00  7.10e-01  3.81e-04  6.92e-02  3.79e-04  9.65e-04  7.01e-01  
  8  +4.7241e-01  +1.1049e+00  6.32e-01  3.09e-04  5.60e-02  3.18e-04  7.99e-04  2.46e-01  
  9  +4.5049e-01  +8.4009e-01  3.90e-01  2.03e-04  3.64e-02  2.75e-06  5.69e-04  7.69e-01  
 10  +4.1243e-01  +6.1362e-01  2.01e-01  9.19e-05  1.63e-02  4.22e-06  2.87e-04  5.70e-01  
 11  +3.8814e-01  +4.9321e-01  1.05e-01  4.66e-05  8.20e-03  3.92e-06  1.61e-04  5.52e-01  
 12  +3.7294e-01  +4.2192e-01  4.90e-02  2.11e-05  3.70e-03  3.23e-06  7.83e-05  7.17e-01  
 13  +3.6448e-01  +3.8400e-01  1.95e-02  8.24e-06  1.45e-03  1.65e-06  3.21e-05  7.84e-01  
 14  +3.6184e-01  +3.7281e-01  1.10e-02  4.58e-06  8.06e-04  1.00e-06  1.83e-05  6.68e-01  
 15  +3.5864e-01  +3.5997e-01  1.32e-03  5.49e-07  9.65e-05  1.21e-07  2.25e-06  8.94e-01  
 16  +3.5820e-01  +3.5822e-01  1.47e-05  6.10e-09  1.07e-06  1.35e-09  2.51e-08  9.89e-01  
 17  +3.5820e-01  +3.5820e-01  1.48e-07  6.11e-11  1.07e-08  1.35e-11  2.52e-10  9.90e-01  
 18  +3.5820e-01  +3.5820e-01  1.48e-09  6.13e-13  1.08e-10  1.36e-13  2.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.3273ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:11 PM: Optimal value: 3.582e-01
(CVXPY) Oct 06 04:28:11 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:28:11 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 22, Objective: 0.3582
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:11 PM: Your problem has 2739 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:11 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:11 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2739
  constraints   = 5239
  nnz(P)        = 0
  nnz(A)        = 44722
  cones (total) = 1
    : Nonnegative = 1,  numel = 5239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.81e-01  8.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.7447e-01  +5.5031e+02  5.50e+02  4.46e-01  5.63e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2657e-01  +5.8297e+01  5.78e+01  1.66e-01  2.67e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0777e-01  +1.4876e+01  1.44e+01  9.91e-02  1.63e+01  5.54e-05  2.31e-01  4.88e-01  
  4  +5.0081e-01  +1.7550e+00  1.25e+00  1.27e-02  2.17e+00  9.65e-06  1.13e-01  7.63e-01  
  5  +5.0015e-01  +1.3706e+00  8.70e-01  7.04e-03  1.24e+00  2.55e-05  2.74e-02  8.87e-01  
  6  +4.9523e-01  +1.3079e+00  8.13e-01  9.91e-04  1.80e-01  2.16e-04  2.51e-03  9.22e-01  
  7  +4.8000e-01  +1.1048e+00  6.25e-01  3.26e-04  5.91e-02  3.98e-04  8.26e-04  7.17e-01  
  8  +4.7072e-01  +1.0338e+00  5.63e-01  2.72e-04  4.91e-02  3.33e-04  7.03e-04  2.23e-01  
  9  +4.3839e-01  +7.5974e-01  3.21e-01  1.57e-04  2.80e-02  2.80e-05  4.52e-04  6.87e-01  
 10  +4.0675e-01  +5.8702e-01  1.80e-01  8.24e-05  1.46e-02  1.37e-05  2.63e-04  4.97e-01  
 11  +3.8196e-01  +4.6583e-01  8.39e-02  3.69e-05  6.48e-03  6.33e-06  1.31e-04  6.11e-01  
 12  +3.7298e-01  +4.2497e-01  5.20e-02  2.23e-05  3.92e-03  4.28e-06  8.29e-05  5.08e-01  
 13  +3.6714e-01  +3.9863e-01  3.15e-02  1.33e-05  2.34e-03  2.84e-06  5.12e-05  5.76e-01  
 14  +3.6064e-01  +3.7008e-01  9.44e-03  3.94e-06  6.93e-04  9.81e-07  1.58e-05  9.90e-01  
 15  +3.5768e-01  +3.5848e-01  8.03e-04  3.34e-07  5.88e-05  8.26e-08  1.38e-06  9.18e-01  
 16  +3.5740e-01  +3.5741e-01  8.15e-06  3.39e-09  5.96e-07  8.37e-10  1.40e-08  9.90e-01  
 17  +3.5740e-01  +3.5740e-01  8.16e-08  3.39e-11  5.97e-09  8.38e-12  1.40e-10  9.90e-01  
 18  +3.5740e-01  +3.5740e-01  8.21e-10  3.42e-13  6.01e-11  8.44e-14  1.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 147.037ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:11 PM: Optimal value: 3.574e-01
(CVXPY) Oct 06 04:28:11 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:28:11 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 23, Objective: 0.3574
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:11 PM: Your problem has 2749 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:11 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2749
  constraints   = 5249
  nnz(P)        = 0
  nnz(A)        = 44873
  cones (total) = 1
    : Nonnegative = 1,  numel = 5249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.81e-01  8.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.7432e-01  +5.5032e+02  5.50e+02  4.46e-01  5.62e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2648e-01  +5.8336e+01  5.78e+01  1.66e-01  2.66e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0781e-01  +1.4783e+01  1.43e+01  9.84e-02  1.62e+01  5.57e-05  2.28e-01  5.01e-01  
  4  +5.0078e-01  +1.7597e+00  1.26e+00  1.27e-02  2.18e+00  9.92e-06  1.14e-01  7.58e-01  
  5  +5.0007e-01  +1.3414e+00  8.41e-01  6.75e-03  1.19e+00  2.56e-05  2.61e-02  9.00e-01  
  6  +4.9426e-01  +1.2780e+00  7.84e-01  9.05e-04  1.65e-01  2.28e-04  2.30e-03  9.21e-01  
  7  +4.7954e-01  +1.0904e+00  6.11e-01  3.47e-04  6.29e-02  3.54e-04  8.87e-04  6.67e-01  
  8  +4.7112e-01  +1.0289e+00  5.58e-01  2.86e-04  5.16e-02  3.14e-04  7.43e-04  2.26e-01  
  9  +4.4239e-01  +7.8562e-01  3.43e-01  1.70e-04  3.03e-02  4.79e-05  4.82e-04  6.88e-01  
 10  +4.0902e-01  +6.0021e-01  1.91e-01  8.76e-05  1.55e-02  2.13e-05  2.77e-04  4.95e-01  
 11  +3.8508e-01  +4.8346e-01  9.84e-02  4.35e-05  7.65e-03  9.88e-06  1.52e-04  5.51e-01  
 12  +3.7508e-01  +4.3791e-01  6.28e-02  2.70e-05  4.75e-03  6.45e-06  9.90e-05  5.29e-01  
 13  +3.6663e-01  +3.9976e-01  3.31e-02  1.40e-05  2.46e-03  3.48e-06  5.38e-05  6.67e-01  
 14  +3.6018e-01  +3.7125e-01  1.11e-02  4.63e-06  8.14e-04  1.17e-06  1.86e-05  9.90e-01  
 15  +3.5665e-01  +3.5739e-01  7.34e-04  3.07e-07  5.38e-05  7.64e-08  1.27e-06  9.36e-01  
 16  +3.5640e-01  +3.5641e-01  7.43e-06  3.10e-09  5.45e-07  7.73e-10  1.28e-08  9.90e-01  
 17  +3.5640e-01  +3.5640e-01  7.43e-08  3.10e-11  5.45e-09  7.73e-12  1.29e-10  9.90e-01  
 18  +3.5640e-01  +3.5640e-01  7.43e-10  3.10e-13  5.45e-11  7.74e-14  1.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.9229ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:11 PM: Optimal value: 3.564e-01
(CVXPY) Oct 06 04:28:11 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:28:11 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 24, Objective: 0.3564
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:12 PM: Your problem has 2759 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:12 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2759
  constraints   = 5259
  nnz(P)        = 0
  nnz(A)        = 44963
  cones (total) = 1
    : Nonnegative = 1,  numel = 5259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.68e+01  1.00e+00  1.00e+00   ------   
  1  +5.7410e-01  +5.5043e+02  5.50e+02  4.46e-01  5.62e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2638e-01  +5.8430e+01  5.79e+01  1.66e-01  2.66e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0786e-01  +1.4653e+01  1.41e+01  9.73e-02  1.61e+01  5.62e-05  2.24e-01  5.18e-01  
  4  +5.0074e-01  +1.7548e+00  1.25e+00  1.27e-02  2.18e+00  1.02e-05  1.14e-01  7.53e-01  
  5  +5.0000e-01  +1.3134e+00  8.13e-01  6.65e-03  1.17e+00  2.42e-05  2.63e-02  8.91e-01  
  6  +4.9345e-01  +1.2563e+00  7.63e-01  8.68e-04  1.58e-01  2.30e-04  2.20e-03  9.26e-01  
  7  +4.7637e-01  +1.0556e+00  5.79e-01  3.17e-04  5.74e-02  3.56e-04  8.12e-04  6.87e-01  
  8  +4.6824e-01  +9.9895e-01  5.31e-01  2.69e-04  4.85e-02  3.11e-04  7.02e-04  1.95e-01  
  9  +4.3968e-01  +7.7249e-01  3.33e-01  1.67e-04  2.97e-02  4.09e-05  4.77e-04  6.82e-01  
 10  +4.0677e-01  +5.9207e-01  1.85e-01  8.54e-05  1.51e-02  1.87e-05  2.72e-04  5.04e-01  
 11  +3.8237e-01  +4.7356e-01  9.12e-02  4.03e-05  7.08e-03  8.47e-06  1.42e-04  5.77e-01  
 12  +3.7258e-01  +4.2950e-01  5.69e-02  2.44e-05  4.28e-03  5.59e-06  8.97e-05  5.70e-01  
 13  +3.6507e-01  +3.9639e-01  3.13e-02  1.32e-05  2.32e-03  3.13e-06  5.08e-05  5.68e-01  
 14  +3.5840e-01  +3.6712e-01  8.71e-03  3.63e-06  6.38e-04  9.10e-07  1.46e-05  9.90e-01  
 15  +3.5552e-01  +3.5588e-01  3.60e-04  1.50e-07  2.63e-05  3.69e-08  6.16e-07  9.62e-01  
 16  +3.5540e-01  +3.5540e-01  3.61e-06  1.50e-09  2.64e-07  3.70e-10  6.19e-09  9.90e-01  
 17  +3.5540e-01  +3.5540e-01  3.62e-08  1.50e-11  2.64e-09  3.71e-12  6.19e-11  9.90e-01  
 18  +3.5540e-01  +3.5540e-01  3.62e-10  1.51e-13  2.65e-11  3.72e-14  6.21e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.8642ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:12 PM: Optimal value: 3.554e-01
(CVXPY) Oct 06 04:28:12 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:28:12 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 25, Objective: 0.3554
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:12 PM: Your problem has 2769 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:12 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2769
  constraints   = 5269
  nnz(P)        = 0
  nnz(A)        = 45297
  cones (total) = 1
    : Nonnegative = 1,  numel = 5269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.81e-01  8.67e+01  1.00e+00  1.00e+00   ------   
  1  +5.7406e-01  +5.5042e+02  5.50e+02  4.46e-01  5.61e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2634e-01  +5.8447e+01  5.79e+01  1.66e-01  2.65e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0787e-01  +1.4588e+01  1.41e+01  9.69e-02  1.60e+01  5.63e-05  2.23e-01  5.24e-01  
  4  +5.0073e-01  +1.7625e+00  1.26e+00  1.28e-02  2.19e+00  1.04e-05  1.15e-01  7.48e-01  
  5  +4.9996e-01  +1.3489e+00  8.49e-01  6.77e-03  1.19e+00  2.57e-05  2.59e-02  9.19e-01  
  6  +4.9280e-01  +1.2678e+00  7.75e-01  8.43e-04  1.53e-01  2.40e-04  2.14e-03  9.26e-01  
  7  +4.7451e-01  +1.0483e+00  5.74e-01  3.08e-04  5.57e-02  3.48e-04  7.91e-04  6.92e-01  
  8  +4.6666e-01  +9.9144e-01  5.25e-01  2.66e-04  4.79e-02  2.97e-04  6.95e-04  1.87e-01  
  9  +4.3836e-01  +7.6990e-01  3.32e-01  1.65e-04  2.93e-02  4.94e-05  4.71e-04  6.61e-01  
 10  +4.0491e-01  +5.8550e-01  1.81e-01  8.29e-05  1.46e-02  2.09e-05  2.64e-04  5.31e-01  
 11  +3.8119e-01  +4.7101e-01  8.98e-02  3.95e-05  6.94e-03  9.44e-06  1.39e-04  6.30e-01  
 12  +3.6910e-01  +4.1662e-01  4.75e-02  2.03e-05  3.56e-03  4.99e-06  7.56e-05  5.88e-01  
 13  +3.6359e-01  +3.9232e-01  2.87e-02  1.21e-05  2.13e-03  3.01e-06  4.67e-05  5.03e-01  
 14  +3.5660e-01  +3.6208e-01  5.48e-03  2.29e-06  4.01e-04  5.65e-07  9.23e-06  9.90e-01  
 15  +3.5473e-01  +3.5482e-01  8.68e-05  3.62e-08  6.35e-06  8.71e-09  1.48e-07  9.87e-01  
 16  +3.5470e-01  +3.5470e-01  8.69e-07  3.62e-10  6.35e-08  8.71e-11  1.49e-09  9.90e-01  
 17  +3.5470e-01  +3.5470e-01  8.71e-09  3.63e-12  6.37e-10  8.74e-13  1.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143.6964ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:12 PM: Optimal value: 3.547e-01
(CVXPY) Oct 06 04:28:12 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:28:12 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 26, Objective: 0.3547
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:13 PM: Your problem has 2779 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:13 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2779
  constraints   = 5279
  nnz(P)        = 0
  nnz(A)        = 45472
  cones (total) = 1
    : Nonnegative = 1,  numel = 5279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.81e-01  8.67e+01  1.00e+00  1.00e+00   ------   
  1  +5.7397e-01  +5.5037e+02  5.50e+02  4.46e-01  5.60e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2627e-01  +5.8471e+01  5.79e+01  1.66e-01  2.65e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0789e-01  +1.4482e+01  1.40e+01  9.61e-02  1.59e+01  5.65e-05  2.20e-01  5.35e-01  
  4  +5.0072e-01  +1.7888e+00  1.29e+00  1.31e-02  2.24e+00  1.07e-05  1.17e-01  7.35e-01  
  5  +4.9985e-01  +1.4301e+00  9.30e-01  6.87e-03  1.21e+00  3.02e-05  2.44e-02  9.85e-01  
  6  +4.9117e-01  +1.2945e+00  8.03e-01  7.81e-04  1.42e-01  2.70e-04  1.98e-03  9.25e-01  
  7  +4.7537e-01  +1.0944e+00  6.19e-01  3.63e-04  6.55e-02  3.12e-04  9.36e-04  5.93e-01  
  8  +4.6763e-01  +1.0308e+00  5.63e-01  3.03e-04  5.46e-02  2.66e-04  7.96e-04  2.30e-01  
  9  +4.4351e-01  +8.0141e-01  3.58e-01  1.87e-04  3.33e-02  5.45e-06  5.30e-04  8.45e-01  
 10  +3.9941e-01  +5.5475e-01  1.55e-01  7.01e-05  1.24e-02  3.88e-06  2.26e-04  6.34e-01  
 11  +3.8285e-01  +4.8073e-01  9.79e-02  4.31e-05  7.56e-03  4.72e-06  1.49e-04  5.23e-01  
 12  +3.6971e-01  +4.2195e-01  5.22e-02  2.25e-05  3.95e-03  2.85e-06  8.32e-05  5.12e-01  
 13  +3.6253e-01  +3.9044e-01  2.79e-02  1.19e-05  2.08e-03  1.80e-06  4.57e-05  5.65e-01  
 14  +3.5591e-01  +3.6197e-01  6.06e-03  2.54e-06  4.45e-04  5.19e-07  1.03e-05  9.05e-01  
 15  +3.5395e-01  +3.5408e-01  1.30e-04  5.44e-08  9.53e-06  1.17e-08  2.23e-07  9.89e-01  
 16  +3.5390e-01  +3.5390e-01  1.30e-06  5.45e-10  9.53e-08  1.17e-10  2.24e-09  9.90e-01  
 17  +3.5390e-01  +3.5390e-01  1.31e-08  5.46e-12  9.55e-10  1.17e-12  2.24e-11  9.90e-01  
 18  +3.5390e-01  +3.5390e-01  1.31e-10  5.48e-14  9.59e-12  1.18e-14  2.25e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 152.0094ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:13 PM: Optimal value: 3.539e-01
(CVXPY) Oct 06 04:28:13 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:28:13 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 27, Objective: 0.3539
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:13 PM: Your problem has 2789 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:13 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2789
  constraints   = 5289
  nnz(P)        = 0
  nnz(A)        = 45578
  cones (total) = 1
    : Nonnegative = 1,  numel = 5289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.81e-01  8.66e+01  1.00e+00  1.00e+00   ------   
  1  +5.7376e-01  +5.5048e+02  5.50e+02  4.47e-01  5.59e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2617e-01  +5.8574e+01  5.80e+01  1.66e-01  2.64e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0794e-01  +1.4311e+01  1.38e+01  9.48e-02  1.57e+01  5.69e-05  2.16e-01  5.53e-01  
  4  +5.0068e-01  +1.7893e+00  1.29e+00  1.32e-02  2.24e+00  1.11e-05  1.18e-01  7.26e-01  
  5  +4.9996e-01  +1.4517e+00  9.52e-01  7.85e-03  1.38e+00  2.44e-05  3.11e-02  8.98e-01  
  6  +4.9215e-01  +1.3091e+00  8.17e-01  9.34e-04  1.70e-01  2.25e-04  2.38e-03  9.29e-01  
  7  +4.7631e-01  +1.1034e+00  6.27e-01  3.87e-04  6.99e-02  3.05e-04  9.96e-04  6.33e-01  
  8  +4.6837e-01  +1.0409e+00  5.73e-01  3.15e-04  5.66e-02  2.57e-04  8.23e-04  2.89e-01  
  9  +4.4059e-01  +7.8757e-01  3.47e-01  1.77e-04  3.15e-02  2.55e-06  5.02e-04  8.86e-01  
 10  +3.9772e-01  +5.5058e-01  1.53e-01  6.95e-05  1.22e-02  3.09e-06  2.25e-04  6.15e-01  
 11  +3.8501e-01  +4.9371e-01  1.09e-01  4.84e-05  8.49e-03  4.45e-06  1.65e-04  4.38e-01  
 12  +3.7079e-01  +4.2938e-01  5.86e-02  2.55e-05  4.46e-03  2.79e-06  9.34e-05  5.01e-01  
 13  +3.6316e-01  +3.9553e-01  3.24e-02  1.38e-05  2.42e-03  2.19e-06  5.28e-05  6.36e-01  
 14  +3.5509e-01  +3.6116e-01  6.06e-03  2.55e-06  4.46e-04  5.01e-07  1.03e-05  8.95e-01  
 15  +3.5316e-01  +3.5333e-01  1.70e-04  7.12e-08  1.24e-05  1.49e-08  2.93e-07  9.85e-01  
 16  +3.5310e-01  +3.5310e-01  1.70e-06  7.13e-10  1.25e-07  1.50e-10  2.94e-09  9.90e-01  
 17  +3.5310e-01  +3.5310e-01  1.71e-08  7.15e-12  1.25e-09  1.50e-12  2.95e-11  9.90e-01  
 18  +3.5310e-01  +3.5310e-01  1.72e-10  7.19e-14  1.26e-11  1.51e-14  2.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 150.588ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:13 PM: Optimal value: 3.531e-01
(CVXPY) Oct 06 04:28:13 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:28:13 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 28, Objective: 0.3531
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:13 PM: Your problem has 2799 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:13 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2799
  constraints   = 5299
  nnz(P)        = 0
  nnz(A)        = 45763
  cones (total) = 1
    : Nonnegative = 1,  numel = 5299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.65e+01  1.00e+00  1.00e+00   ------   
  1  +5.7353e-01  +5.5054e+02  5.50e+02  4.47e-01  5.58e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2605e-01  +5.8689e+01  5.82e+01  1.66e-01  2.64e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0798e-01  +1.4083e+01  1.36e+01  9.30e-02  1.54e+01  5.73e-05  2.11e-01  5.74e-01  
  4  +5.0062e-01  +1.7845e+00  1.28e+00  1.31e-02  2.24e+00  1.16e-05  1.19e-01  7.14e-01  
  5  +4.9993e-01  +1.3938e+00  8.94e-01  7.77e-03  1.36e+00  2.17e-05  3.35e-02  8.37e-01  
  6  +4.9153e-01  +1.2828e+00  7.91e-01  9.43e-04  1.71e-01  2.19e-04  2.41e-03  9.35e-01  
  7  +4.7530e-01  +1.0850e+00  6.10e-01  3.91e-04  7.05e-02  3.00e-04  1.01e-03  6.29e-01  
  8  +4.6807e-01  +1.0319e+00  5.64e-01  3.22e-04  5.80e-02  2.55e-04  8.44e-04  2.85e-01  
  9  +4.3039e-01  +7.2588e-01  2.95e-01  1.40e-04  2.48e-02  2.81e-06  4.02e-04  9.46e-01  
 10  +4.0141e-01  +5.7598e-01  1.75e-01  8.04e-05  1.42e-02  3.57e-06  2.56e-04  4.35e-01  
 11  +3.7848e-01  +4.6741e-01  8.89e-02  3.96e-05  6.94e-03  3.81e-06  1.39e-04  6.02e-01  
 12  +3.6681e-01  +4.1456e-01  4.77e-02  2.08e-05  3.63e-03  2.51e-06  7.73e-05  5.36e-01  
 13  +3.6028e-01  +3.8576e-01  2.55e-02  1.09e-05  1.91e-03  1.63e-06  4.23e-05  5.78e-01  
 14  +3.5455e-01  +3.6091e-01  6.36e-03  2.68e-06  4.68e-04  5.89e-07  1.08e-05  9.48e-01  
 15  +3.5247e-01  +3.5269e-01  2.14e-04  9.01e-08  1.57e-05  1.97e-08  3.72e-07  9.72e-01  
 16  +3.5240e-01  +3.5240e-01  2.15e-06  9.03e-10  1.58e-07  1.97e-10  3.73e-09  9.90e-01  
 17  +3.5240e-01  +3.5240e-01  2.15e-08  9.03e-12  1.58e-09  1.97e-12  3.73e-11  9.90e-01  
 18  +3.5240e-01  +3.5240e-01  2.16e-10  9.08e-14  1.59e-11  1.99e-14  3.75e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 152.7659ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:14 PM: Optimal value: 3.524e-01
(CVXPY) Oct 06 04:28:14 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:28:14 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 29, Objective: 0.3524
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:14 PM: Your problem has 2809 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:14 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2809
  constraints   = 5309
  nnz(P)        = 0
  nnz(A)        = 46132
  cones (total) = 1
    : Nonnegative = 1,  numel = 5309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.64e+01  1.00e+00  1.00e+00   ------   
  1  +5.7337e-01  +5.5053e+02  5.50e+02  4.47e-01  5.57e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2593e-01  +5.8775e+01  5.82e+01  1.66e-01  2.63e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0801e-01  +1.3845e+01  1.33e+01  9.11e-02  1.52e+01  5.77e-05  2.05e-01  5.94e-01  
  4  +5.0060e-01  +1.8594e+00  1.36e+00  1.39e-02  2.36e+00  1.25e-05  1.24e-01  6.75e-01  
  5  +4.9984e-01  +1.3828e+00  8.83e-01  7.69e-03  1.34e+00  2.18e-05  3.35e-02  8.55e-01  
  6  +4.8981e-01  +1.2854e+00  7.96e-01  8.86e-04  1.61e-01  2.41e-04  2.26e-03  9.42e-01  
  7  +4.6914e-01  +1.0665e+00  5.97e-01  3.36e-04  6.07e-02  3.47e-04  8.68e-04  6.62e-01  
  8  +4.6093e-01  +1.0009e+00  5.40e-01  2.91e-04  5.24e-02  2.93e-04  7.66e-04  1.66e-01  
  9  +4.3344e-01  +7.7780e-01  3.44e-01  1.78e-04  3.16e-02  4.19e-05  5.11e-04  7.16e-01  
 10  +3.9320e-01  +5.4750e-01  1.54e-01  7.18e-05  1.26e-02  1.43e-05  2.33e-04  6.00e-01  
 11  +3.8495e-01  +5.0922e-01  1.24e-01  5.68e-05  9.98e-03  1.17e-05  1.91e-04  2.73e-01  
 12  +3.6830e-01  +4.3160e-01  6.33e-02  2.80e-05  4.90e-03  5.94e-06  1.02e-04  5.76e-01  
 13  +3.5914e-01  +3.8983e-01  3.07e-02  1.33e-05  2.32e-03  3.05e-06  5.08e-05  7.29e-01  
 14  +3.5200e-01  +3.5911e-01  7.12e-03  3.03e-06  5.30e-04  7.05e-07  1.23e-05  8.54e-01  
 15  +3.4981e-01  +3.5014e-01  3.28e-04  1.39e-07  2.43e-05  3.16e-08  5.74e-07  9.69e-01  
 16  +3.4970e-01  +3.4970e-01  3.31e-06  1.40e-09  2.45e-07  3.18e-10  5.79e-09  9.90e-01  
 17  +3.4970e-01  +3.4970e-01  3.31e-08  1.40e-11  2.45e-09  3.19e-12  5.80e-11  9.90e-01  
 18  +3.4970e-01  +3.4970e-01  3.31e-10  1.40e-13  2.45e-11  3.19e-14  5.81e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 154.9008ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:14 PM: Optimal value: 3.497e-01
(CVXPY) Oct 06 04:28:14 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:28:14 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 30, Objective: 0.3497
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:14 PM: Your problem has 2814 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:14 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2814
  constraints   = 5314
  nnz(P)        = 0
  nnz(A)        = 46243
  cones (total) = 1
    : Nonnegative = 1,  numel = 5314

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.81e-01  8.64e+01  1.00e+00  1.00e+00   ------   
  1  +5.7329e-01  +5.5052e+02  5.50e+02  4.47e-01  5.57e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2588e-01  +5.8814e+01  5.83e+01  1.66e-01  2.63e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0803e-01  +1.3755e+01  1.32e+01  9.04e-02  1.50e+01  5.79e-05  2.03e-01  6.02e-01  
  4  +5.0059e-01  +1.8825e+00  1.38e+00  1.41e-02  2.40e+00  1.28e-05  1.25e-01  6.61e-01  
  5  +4.9983e-01  +1.3790e+00  8.79e-01  7.72e-03  1.34e+00  2.14e-05  3.41e-02  8.52e-01  
  6  +4.8944e-01  +1.2811e+00  7.92e-01  8.79e-04  1.59e-01  2.44e-04  2.24e-03  9.43e-01  
  7  +4.6981e-01  +1.0772e+00  6.07e-01  3.53e-04  6.38e-02  3.42e-04  9.11e-04  6.40e-01  
  8  +4.6093e-01  +1.0056e+00  5.45e-01  2.99e-04  5.38e-02  2.88e-04  7.88e-04  1.84e-01  
  9  +4.3211e-01  +7.7110e-01  3.39e-01  1.75e-04  3.11e-02  3.54e-05  5.02e-04  7.53e-01  
 10  +3.9326e-01  +5.4987e-01  1.57e-01  7.32e-05  1.29e-02  1.30e-05  2.37e-04  5.87e-01  
 11  +3.8451e-01  +5.0923e-01  1.25e-01  5.72e-05  1.01e-02  1.06e-05  1.92e-04  2.78e-01  
 12  +3.6744e-01  +4.3001e-01  6.26e-02  2.76e-05  4.84e-03  5.44e-06  1.00e-04  5.92e-01  
 13  +3.5831e-01  +3.8867e-01  3.04e-02  1.31e-05  2.29e-03  2.91e-06  5.00e-05  7.36e-01  
 14  +3.5111e-01  +3.5791e-01  6.81e-03  2.88e-06  5.04e-04  6.61e-07  1.16e-05  8.55e-01  
 15  +3.4900e-01  +3.4931e-01  3.06e-04  1.29e-07  2.25e-05  2.93e-08  5.29e-07  9.72e-01  
 16  +3.4890e-01  +3.4890e-01  3.08e-06  1.30e-09  2.27e-07  2.95e-10  5.33e-09  9.90e-01  
 17  +3.4890e-01  +3.4890e-01  3.08e-08  1.30e-11  2.27e-09  2.95e-12  5.33e-11  9.90e-01  
 18  +3.4890e-01  +3.4890e-01  3.08e-10  1.30e-13  2.27e-11  2.96e-14  5.34e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.4689ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:14 PM: Optimal value: 3.489e-01
(CVXPY) Oct 06 04:28:14 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:28:14 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 31, Objective: 0.3489
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:15 PM: Your problem has 2822 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:15 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2822
  constraints   = 5322
  nnz(P)        = 0
  nnz(A)        = 46489
  cones (total) = 1
    : Nonnegative = 1,  numel = 5322

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7314e-01  +5.5064e+02  5.50e+02  4.48e-01  5.56e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2584e-01  +5.8879e+01  5.84e+01  1.66e-01  2.62e+01  1.87e-02  2.78e-01  9.90e-01  
  3  +5.0804e-01  +1.3672e+01  1.32e+01  8.98e-02  1.49e+01  5.81e-05  2.02e-01  6.09e-01  
  4  +5.0058e-01  +1.8991e+00  1.40e+00  1.43e-02  2.42e+00  1.31e-05  1.27e-01  6.49e-01  
  5  +4.9982e-01  +1.3713e+00  8.71e-01  7.71e-03  1.34e+00  2.11e-05  3.47e-02  8.43e-01  
  6  +4.8911e-01  +1.2821e+00  7.93e-01  8.83e-04  1.60e-01  2.46e-04  2.25e-03  9.44e-01  
  7  +4.6794e-01  +1.0625e+00  5.95e-01  3.40e-04  6.12e-02  3.45e-04  8.78e-04  6.58e-01  
  8  +4.5939e-01  +9.9424e-01  5.35e-01  2.92e-04  5.24e-02  2.90e-04  7.71e-04  1.70e-01  
  9  +4.3391e-01  +7.9053e-01  3.57e-01  1.86e-04  3.31e-02  6.31e-05  5.32e-04  6.57e-01  
 10  +3.9207e-01  +5.4515e-01  1.53e-01  7.15e-05  1.26e-02  1.90e-05  2.33e-04  6.21e-01  
 11  +3.8461e-01  +5.1073e-01  1.26e-01  5.79e-05  1.02e-02  1.53e-05  1.94e-04  2.53e-01  
 12  +3.6752e-01  +4.3169e-01  6.42e-02  2.84e-05  4.97e-03  7.39e-06  1.03e-04  6.03e-01  
 13  +3.6035e-01  +3.9915e-01  3.88e-02  1.69e-05  2.95e-03  4.38e-06  6.39e-05  5.61e-01  
 14  +3.5179e-01  +3.6188e-01  1.01e-02  4.30e-06  7.52e-04  1.09e-06  1.73e-05  8.16e-01  
 15  +3.4888e-01  +3.4973e-01  8.49e-04  3.60e-07  6.29e-05  8.81e-08  1.49e-06  9.38e-01  
 16  +3.4860e-01  +3.4861e-01  8.98e-06  3.80e-09  6.65e-07  9.31e-10  1.57e-08  9.89e-01  
 17  +3.4860e-01  +3.4860e-01  8.99e-08  3.80e-11  6.66e-09  9.32e-12  1.58e-10  9.90e-01  
 18  +3.4860e-01  +3.4860e-01  8.99e-10  3.80e-13  6.66e-11  9.33e-14  1.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.3869ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:15 PM: Optimal value: 3.486e-01
(CVXPY) Oct 06 04:28:15 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:28:15 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 32, Objective: 0.3486
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:15 PM: Your problem has 2830 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:15 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2830
  constraints   = 5330
  nnz(P)        = 0
  nnz(A)        = 46570
  cones (total) = 1
    : Nonnegative = 1,  numel = 5330

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7309e-01  +5.5068e+02  5.50e+02  4.48e-01  5.56e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2579e-01  +5.8910e+01  5.84e+01  1.66e-01  2.62e+01  1.87e-02  2.78e-01  9.90e-01  
  3  +5.0806e-01  +1.3591e+01  1.31e+01  8.91e-02  1.48e+01  5.83e-05  2.00e-01  6.16e-01  
  4  +5.0056e-01  +1.9039e+00  1.40e+00  1.44e-02  2.43e+00  1.33e-05  1.28e-01  6.39e-01  
  5  +4.9981e-01  +1.3563e+00  8.57e-01  7.65e-03  1.33e+00  2.06e-05  3.53e-02  8.33e-01  
  6  +4.8883e-01  +1.2766e+00  7.88e-01  8.82e-04  1.60e-01  2.47e-04  2.25e-03  9.46e-01  
  7  +4.6681e-01  +1.0526e+00  5.86e-01  3.32e-04  5.98e-02  3.50e-04  8.60e-04  6.65e-01  
  8  +4.5842e-01  +9.8591e-01  5.27e-01  2.87e-04  5.15e-02  2.92e-04  7.60e-04  1.68e-01  
  9  +4.3207e-01  +7.7928e-01  3.47e-01  1.80e-04  3.20e-02  6.75e-05  5.18e-04  6.42e-01  
 10  +3.9137e-01  +5.4279e-01  1.51e-01  7.09e-05  1.25e-02  2.04e-05  2.31e-04  6.18e-01  
 11  +3.8422e-01  +5.0963e-01  1.25e-01  5.78e-05  1.01e-02  1.65e-05  1.94e-04  2.45e-01  
 12  +3.6712e-01  +4.3019e-01  6.31e-02  2.80e-05  4.89e-03  7.70e-06  1.02e-04  6.05e-01  
 13  +3.5984e-01  +3.9717e-01  3.73e-02  1.62e-05  2.84e-03  4.37e-06  6.17e-05  5.94e-01  
 14  +3.5130e-01  +3.5995e-01  8.65e-03  3.69e-06  6.44e-04  9.42e-07  1.49e-05  8.73e-01  
 15  +3.4870e-01  +3.4931e-01  6.12e-04  2.59e-07  4.53e-05  6.40e-08  1.07e-06  9.46e-01  
 16  +3.4850e-01  +3.4851e-01  6.31e-06  2.67e-09  4.67e-07  6.60e-10  1.11e-08  9.90e-01  
 17  +3.4850e-01  +3.4850e-01  6.32e-08  2.68e-11  4.68e-09  6.60e-12  1.11e-10  9.90e-01  
 18  +3.4850e-01  +3.4850e-01  6.32e-10  2.68e-13  4.68e-11  6.62e-14  1.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.0465ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:15 PM: Optimal value: 3.485e-01
(CVXPY) Oct 06 04:28:15 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:28:15 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 33, Objective: 0.3485
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:16 PM: Your problem has 2831 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:16 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2831
  constraints   = 5331
  nnz(P)        = 0
  nnz(A)        = 46595
  cones (total) = 1
    : Nonnegative = 1,  numel = 5331

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7307e-01  +5.5069e+02  5.50e+02  4.48e-01  5.56e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2578e-01  +5.8917e+01  5.84e+01  1.66e-01  2.62e+01  1.87e-02  2.78e-01  9.90e-01  
  3  +5.0806e-01  +1.3580e+01  1.31e+01  8.90e-02  1.48e+01  5.83e-05  2.00e-01  6.17e-01  
  4  +5.0057e-01  +1.9103e+00  1.41e+00  1.44e-02  2.44e+00  1.34e-05  1.28e-01  6.36e-01  
  5  +4.9981e-01  +1.3544e+00  8.55e-01  7.64e-03  1.33e+00  2.05e-05  3.54e-02  8.33e-01  
  6  +4.8880e-01  +1.2779e+00  7.89e-01  8.83e-04  1.60e-01  2.47e-04  2.26e-03  9.47e-01  
  7  +4.6746e-01  +1.0594e+00  5.92e-01  3.41e-04  6.14e-02  3.45e-04  8.83e-04  6.58e-01  
  8  +4.5901e-01  +9.9203e-01  5.33e-01  2.93e-04  5.26e-02  2.90e-04  7.75e-04  1.71e-01  
  9  +4.3243e-01  +7.8047e-01  3.48e-01  1.81e-04  3.22e-02  5.62e-05  5.21e-04  6.82e-01  
 10  +3.9140e-01  +5.4259e-01  1.51e-01  7.08e-05  1.24e-02  1.74e-05  2.31e-04  6.19e-01  
 11  +3.8401e-01  +5.0843e-01  1.24e-01  5.73e-05  1.01e-02  1.41e-05  1.93e-04  2.46e-01  
 12  +3.6704e-01  +4.2975e-01  6.27e-02  2.78e-05  4.87e-03  6.84e-06  1.01e-04  6.01e-01  
 13  +3.5980e-01  +3.9686e-01  3.71e-02  1.61e-05  2.81e-03  4.01e-06  6.12e-05  6.14e-01  
 14  +3.5135e-01  +3.6002e-01  8.67e-03  3.70e-06  6.46e-04  9.00e-07  1.49e-05  9.11e-01  
 15  +3.4871e-01  +3.4934e-01  6.28e-04  2.66e-07  4.65e-05  6.35e-08  1.10e-06  9.43e-01  
 16  +3.4850e-01  +3.4851e-01  6.49e-06  2.75e-09  4.81e-07  6.56e-10  1.14e-08  9.90e-01  
 17  +3.4850e-01  +3.4850e-01  6.50e-08  2.75e-11  4.81e-09  6.56e-12  1.14e-10  9.90e-01  
 18  +3.4850e-01  +3.4850e-01  6.50e-10  2.75e-13  4.81e-11  6.57e-14  1.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.8424ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:16 PM: Optimal value: 3.485e-01
(CVXPY) Oct 06 04:28:16 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:28:16 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 34, Objective: 0.3485
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:16 PM: Your problem has 2841 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:16 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2841
  constraints   = 5341
  nnz(P)        = 0
  nnz(A)        = 46716
  cones (total) = 1
    : Nonnegative = 1,  numel = 5341

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.81e-01  8.62e+01  1.00e+00  1.00e+00   ------   
  1  +5.7292e-01  +5.5068e+02  5.50e+02  4.48e-01  5.55e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2569e-01  +5.8958e+01  5.84e+01  1.66e-01  2.61e+01  1.87e-02  2.78e-01  9.90e-01  
  3  +5.0809e-01  +1.3426e+01  1.29e+01  8.78e-02  1.46e+01  5.86e-05  1.96e-01  6.28e-01  
  4  +5.0058e-01  +1.9880e+00  1.49e+00  1.52e-02  2.57e+00  1.41e-05  1.32e-01  5.97e-01  
  5  +4.9978e-01  +1.3285e+00  8.29e-01  7.45e-03  1.29e+00  2.01e-05  3.52e-02  8.50e-01  
  6  +4.8811e-01  +1.2682e+00  7.80e-01  8.54e-04  1.54e-01  2.56e-04  2.19e-03  9.48e-01  
  7  +4.6592e-01  +1.0475e+00  5.82e-01  3.32e-04  5.98e-02  3.46e-04  8.64e-04  6.55e-01  
  8  +4.5888e-01  +9.9170e-01  5.33e-01  2.95e-04  5.28e-02  2.94e-04  7.80e-04  1.49e-01  
  9  +4.3217e-01  +7.8054e-01  3.48e-01  1.83e-04  3.24e-02  5.58e-05  5.26e-04  6.83e-01  
 10  +3.9084e-01  +5.4218e-01  1.51e-01  7.10e-05  1.25e-02  1.71e-05  2.32e-04  6.31e-01  
 11  +3.8349e-01  +5.0834e-01  1.25e-01  5.77e-05  1.01e-02  1.40e-05  1.95e-04  2.39e-01  
 12  +3.6811e-01  +4.3703e-01  6.89e-02  3.09e-05  5.40e-03  7.44e-06  1.12e-04  5.46e-01  
 13  +3.5906e-01  +3.9607e-01  3.70e-02  1.62e-05  2.83e-03  3.96e-06  6.19e-05  6.00e-01  
 14  +3.5191e-01  +3.6434e-01  1.24e-02  5.34e-06  9.33e-04  1.29e-06  2.15e-05  8.54e-01  
 15  +3.4826e-01  +3.4935e-01  1.09e-03  4.64e-07  8.11e-05  1.10e-07  1.93e-06  9.26e-01  
 16  +3.4790e-01  +3.4792e-01  1.25e-05  5.31e-09  9.28e-07  1.26e-09  2.21e-08  9.89e-01  
 17  +3.4790e-01  +3.4790e-01  1.25e-07  5.32e-11  9.28e-09  1.26e-11  2.21e-10  9.90e-01  
 18  +3.4790e-01  +3.4790e-01  1.25e-09  5.32e-13  9.29e-11  1.26e-13  2.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.9113ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:16 PM: Optimal value: 3.479e-01
(CVXPY) Oct 06 04:28:16 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:28:16 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 35, Objective: 0.3479
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:16 PM: Your problem has 2851 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:16 PM: Finished problem compilation (took 4.686e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2851
  constraints   = 5351
  nnz(P)        = 0
  nnz(A)        = 46835
  cones (total) = 1
    : Nonnegative = 1,  numel = 5351

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.81e-01  8.61e+01  1.00e+00  1.00e+00   ------   
  1  +5.7273e-01  +5.5069e+02  5.50e+02  4.48e-01  5.54e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2561e-01  +5.9014e+01  5.85e+01  1.66e-01  2.61e+01  1.87e-02  2.78e-01  9.90e-01  
  3  +5.0812e-01  +1.3293e+01  1.28e+01  8.66e-02  1.45e+01  5.88e-05  1.93e-01  6.38e-01  
  4  +5.0057e-01  +2.0351e+00  1.53e+00  1.57e-02  2.64e+00  1.47e-05  1.35e-01  5.68e-01  
  5  +4.9978e-01  +1.3266e+00  8.27e-01  7.49e-03  1.30e+00  1.98e-05  3.63e-02  8.43e-01  
  6  +4.8777e-01  +1.2753e+00  7.88e-01  8.66e-04  1.56e-01  2.59e-04  2.22e-03  9.50e-01  
  7  +4.6601e-01  +1.0564e+00  5.90e-01  3.44e-04  6.19e-02  3.38e-04  8.96e-04  6.55e-01  
  8  +4.5239e-01  +9.4145e-01  4.89e-01  2.70e-04  4.81e-02  2.23e-04  7.27e-04  3.18e-01  
  9  +4.1966e-01  +7.1403e-01  2.94e-01  1.46e-04  2.58e-02  9.65e-05  4.31e-04  5.01e-01  
 10  +3.9299e-01  +5.6579e-01  1.73e-01  8.19e-05  1.44e-02  4.36e-05  2.66e-04  4.87e-01  
 11  +3.8328e-01  +5.1707e-01  1.34e-01  6.21e-05  1.09e-02  3.11e-05  2.10e-04  2.99e-01  
 12  +3.6554e-01  +4.2961e-01  6.41e-02  2.87e-05  5.02e-03  1.25e-05  1.06e-04  6.13e-01  
 13  +3.5873e-01  +3.9781e-01  3.91e-02  1.72e-05  3.00e-03  6.88e-06  6.57e-05  5.14e-01  
 14  +3.5073e-01  +3.6179e-01  1.11e-02  4.77e-06  8.33e-04  1.64e-06  1.93e-05  8.12e-01  
 15  +3.4762e-01  +3.4862e-01  9.96e-04  4.26e-07  7.44e-05  1.31e-07  1.77e-06  9.35e-01  
 16  +3.4730e-01  +3.4731e-01  1.13e-05  4.85e-09  8.46e-07  1.48e-09  2.02e-08  9.89e-01  
 17  +3.4730e-01  +3.4730e-01  1.13e-07  4.85e-11  8.47e-09  1.48e-11  2.03e-10  9.90e-01  
 18  +3.4730e-01  +3.4730e-01  1.14e-09  4.88e-13  8.52e-11  1.49e-13  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.8071ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:17 PM: Optimal value: 3.473e-01
(CVXPY) Oct 06 04:28:17 PM: Compilation took 4.686e-02 seconds
(CVXPY) Oct 06 04:28:17 PM: Solver (including time spent in interface) took 1.563e-01 seconds
FULL MODEL:
  Accruacy: 0.6138
  Our objective: 0.22760000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.1452)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x9 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.0072)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.0044)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.0048)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.0044)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.0048)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0012)
 OR (x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.004)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0)                                                        <-- (term's our objective: 0.0152)
 OR (x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.0044)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 24.188878297805786
Best over terms:
  Our final objective: 0.1452
    Its accruacy: 0.5726
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1452
  Highest accruacy: 0.5726
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

