Command:
python test_script.py -s constant_subclass -d 5 -n 50 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.68
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:47 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:47 PM: Finished problem compilation (took 3.062e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9346e-01  +2.6073e+01  2.56e+01  8.19e-01  5.77e+00  1.00e+00  1.08e+00   ------   
  1  +5.8732e-01  +5.4358e+00  4.85e+00  3.03e-01  3.07e+00  3.95e-03  5.38e-01  6.51e-01  
  2  +5.1072e-01  +1.0836e+00  5.73e-01  6.09e-02  7.29e-01  1.24e-02  1.69e-01  9.38e-01  
  3  +4.7280e-01  +8.8180e-01  4.09e-01  2.45e-02  3.06e-01  1.24e-02  7.80e-02  6.42e-01  
  4  +4.3731e-01  +5.5540e-01  1.18e-01  6.61e-03  8.20e-02  2.79e-03  2.47e-02  7.06e-01  
  5  +4.2256e-01  +5.0286e-01  8.03e-02  3.33e-03  4.16e-02  1.82e-03  1.40e-02  6.44e-01  
  6  +4.0364e-01  +4.1476e-01  1.11e-02  4.35e-04  5.42e-03  1.63e-04  2.05e-03  9.09e-01  
  7  +4.0014e-01  +4.0028e-01  1.37e-04  5.34e-06  6.65e-05  1.84e-06  2.57e-05  9.88e-01  
  8  +4.0010e-01  +4.0010e-01  1.37e-06  5.33e-08  6.65e-07  1.84e-08  2.57e-07  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  1.37e-08  5.33e-10  6.65e-09  1.84e-10  2.57e-09  9.90e-01  
 10  +4.0010e-01  +4.0010e-01  1.37e-10  5.33e-12  6.65e-11  1.84e-12  2.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 556.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:47 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:47 PM: Optimal value: 4.001e-01
(CVXPY) Oct 06 03:52:47 PM: Compilation took 3.062e-02 seconds
(CVXPY) Oct 06 03:52:47 PM: Solver (including time spent in interface) took 9.101e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:47 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:47 PM: Finished problem compilation (took 3.671e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 273
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8150e-01  +2.6495e+01  2.60e+01  8.34e-01  5.84e+00  1.00e+00  1.10e+00   ------   
  1  +5.3329e-01  +5.4896e+00  4.96e+00  3.17e-01  3.01e+00  3.97e-03  5.49e-01  6.49e-01  
  2  +4.4742e-01  +1.3165e+00  8.69e-01  7.19e-02  8.63e-01  1.38e-02  1.90e-01  8.51e-01  
  3  +3.6696e-01  +8.2797e-01  4.61e-01  2.61e-02  3.21e-01  9.07e-03  8.01e-02  6.66e-01  
  4  +3.0777e-01  +4.4038e-01  1.33e-01  6.96e-03  8.46e-02  2.12e-03  2.46e-02  7.33e-01  
  5  +2.8377e-01  +2.9913e-01  1.54e-02  8.30e-04  9.94e-03  2.00e-04  3.23e-03  8.96e-01  
  6  +2.8045e-01  +2.8121e-01  7.63e-04  4.15e-05  4.94e-04  9.18e-06  1.66e-04  9.49e-01  
  7  +2.8029e-01  +2.8053e-01  2.49e-04  1.18e-05  1.38e-04  2.70e-06  5.51e-05  7.87e-01  
  8  +2.8021e-01  +2.8023e-01  2.55e-05  1.16e-06  1.37e-05  2.39e-07  5.87e-06  9.16e-01  
  9  +2.8020e-01  +2.8020e-01  2.74e-07  1.25e-08  1.47e-07  2.49e-09  6.35e-08  9.89e-01  
 10  +2.8020e-01  +2.8020e-01  2.74e-09  1.25e-10  1.47e-09  2.49e-11  6.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 653.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:47 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:47 PM: Optimal value: 2.802e-01
(CVXPY) Oct 06 03:52:47 PM: Compilation took 3.671e-03 seconds
(CVXPY) Oct 06 03:52:47 PM: Solver (including time spent in interface) took 5.508e-03 seconds
Iteration: 2, Objective: 0.2802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:47 PM: Your problem has 56 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:47 PM: Finished problem compilation (took 9.938e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 81
  nnz(P)        = 0
  nnz(A)        = 322
  cones (total) = 1
    : Nonnegative = 1,  numel = 81

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7858e-01  +2.6569e+01  2.61e+01  8.44e-01  5.77e+00  1.00e+00  1.11e+00   ------   
  1  +5.1089e-01  +5.5912e+00  5.08e+00  3.35e-01  2.95e+00  3.98e-03  5.63e-01  6.37e-01  
  2  +4.1184e-01  +1.4649e+00  1.05e+00  8.25e-02  9.31e-01  1.48e-02  2.25e-01  7.97e-01  
  3  +3.4622e-01  +8.8193e-01  5.36e-01  3.38e-02  3.90e-01  9.05e-03  1.06e-01  5.99e-01  
  4  +2.7383e-01  +5.1309e-01  2.39e-01  1.15e-02  1.34e-01  3.80e-03  4.25e-02  7.15e-01  
  5  +2.3903e-01  +3.1894e-01  7.99e-02  3.75e-03  4.32e-02  1.10e-03  1.56e-02  7.19e-01  
  6  +2.2141e-01  +2.2555e-01  4.14e-03  1.95e-04  2.23e-03  4.51e-05  8.79e-04  9.48e-01  
  7  +2.2037e-01  +2.2056e-01  1.88e-04  8.98e-06  1.02e-04  9.52e-07  4.26e-05  9.52e-01  
  8  +2.2030e-01  +2.2031e-01  6.34e-06  3.06e-07  3.45e-06  3.67e-08  1.67e-06  9.68e-01  
  9  +2.2030e-01  +2.2030e-01  6.33e-08  3.06e-09  3.45e-08  3.67e-10  1.68e-08  9.90e-01  
 10  +2.2030e-01  +2.2030e-01  6.33e-10  3.06e-11  3.45e-10  3.67e-12  1.68e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 540.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:47 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:47 PM: Optimal value: 2.203e-01
(CVXPY) Oct 06 03:52:47 PM: Compilation took 9.938e-03 seconds
(CVXPY) Oct 06 03:52:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:48 PM: Your problem has 66 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:48 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 66
  constraints   = 91
  nnz(P)        = 0
  nnz(A)        = 356
  cones (total) = 1
    : Nonnegative = 1,  numel = 91

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6613e-01  +2.6807e+01  2.63e+01  8.53e-01  5.60e+00  1.00e+00  1.12e+00   ------   
  1  +4.3719e-01  +5.7694e+00  5.33e+00  3.46e-01  2.89e+00  4.07e-03  5.79e-01  6.18e-01  
  2  +3.0840e-01  +1.3339e+00  1.03e+00  7.27e-02  7.78e-01  1.68e-02  1.97e-01  8.55e-01  
  3  +2.3091e-01  +5.4803e-01  3.17e-01  1.91e-02  2.08e-01  6.41e-03  6.11e-02  8.21e-01  
  4  +2.0294e-01  +3.9922e-01  1.96e-01  1.07e-02  1.18e-01  3.90e-03  3.68e-02  4.74e-01  
  5  +1.6963e-01  +2.0747e-01  3.78e-02  1.97e-03  2.17e-02  6.10e-04  7.53e-03  8.30e-01  
  6  +1.6112e-01  +1.6281e-01  1.69e-03  8.85e-05  9.67e-04  2.23e-05  3.51e-04  9.54e-01  
  7  +1.6079e-01  +1.6134e-01  5.55e-04  2.86e-05  3.10e-04  5.92e-06  1.28e-04  7.45e-01  
  8  +1.6061e-01  +1.6063e-01  2.40e-05  1.26e-06  1.36e-05  1.07e-07  6.23e-06  9.53e-01  
  9  +1.6060e-01  +1.6060e-01  2.47e-07  1.30e-08  1.40e-07  1.13e-09  6.57e-08  9.90e-01  
 10  +1.6060e-01  +1.6060e-01  2.47e-09  1.31e-10  1.40e-09  1.13e-11  6.58e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 653.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:48 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:48 PM: Optimal value: 1.606e-01
(CVXPY) Oct 06 03:52:48 PM: Compilation took 5.006e-03 seconds
(CVXPY) Oct 06 03:52:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:48 PM: Your problem has 67 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:48 PM: Finished problem compilation (took 5.851e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 92
  nnz(P)        = 0
  nnz(A)        = 361
  cones (total) = 1
    : Nonnegative = 1,  numel = 92

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6592e-01  +2.6794e+01  2.63e+01  8.53e-01  5.60e+00  1.00e+00  1.12e+00   ------   
  1  +4.3472e-01  +5.7605e+00  5.33e+00  3.47e-01  2.89e+00  4.07e-03  5.78e-01  6.18e-01  
  2  +3.0503e-01  +1.3894e+00  1.08e+00  7.60e-02  8.11e-01  1.66e-02  2.04e-01  8.36e-01  
  3  +2.3128e-01  +5.9727e-01  3.66e-01  2.22e-02  2.42e-01  6.77e-03  7.00e-02  7.84e-01  
  4  +1.9481e-01  +3.6655e-01  1.72e-01  9.53e-03  1.04e-01  3.17e-03  3.32e-02  5.98e-01  
  5  +1.6588e-01  +1.8977e-01  2.39e-02  1.29e-03  1.41e-02  3.84e-04  4.92e-03  8.64e-01  
  6  +1.6102e-01  +1.6249e-01  1.46e-03  7.96e-05  8.63e-04  2.02e-05  3.13e-04  9.37e-01  
  7  +1.6075e-01  +1.6122e-01  4.70e-04  2.51e-05  2.70e-04  5.11e-06  1.12e-04  7.58e-01  
  8  +1.6061e-01  +1.6062e-01  1.74e-05  9.44e-07  1.01e-05  9.25e-08  4.56e-06  9.61e-01  
  9  +1.6060e-01  +1.6060e-01  1.76e-07  9.58e-09  1.02e-07  9.42e-10  4.69e-08  9.90e-01  
 10  +1.6060e-01  +1.6060e-01  1.77e-09  9.61e-11  1.03e-09  9.45e-12  4.71e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 675.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:48 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:48 PM: Optimal value: 1.606e-01
(CVXPY) Oct 06 03:52:48 PM: Compilation took 5.851e-03 seconds
(CVXPY) Oct 06 03:52:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.68

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 1) <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 0 AND x4 = 1)            <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.166302442550659
Best over terms:
  Our final objective: 0.16000000000000003
    Its accruacy: 0.58
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

