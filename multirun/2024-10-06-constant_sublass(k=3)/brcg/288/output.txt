Command:
python test_script.py -s constant_subclass -d 8 -n 50 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 8.

Computed total variation: 0.88
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:08 PM: Your problem has 42 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:08 PM: Finished problem compilation (took 5.026e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 67
  nnz(P)        = 0
  nnz(A)        = 292
  cones (total) = 1
    : Nonnegative = 1,  numel = 67

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8904e-01  +2.6658e+01  2.62e+01  8.34e-01  6.80e+00  1.00e+00  1.10e+00   ------   
  1  +5.5623e-01  +5.7024e+00  5.15e+00  3.49e-01  3.87e+00  3.73e-03  6.05e-01  6.18e-01  
  2  +4.4179e-01  +1.1830e+00  7.41e-01  6.91e-02  9.37e-01  1.98e-02  1.90e-01  9.90e-01  
  3  +3.5098e-01  +7.5577e-01  4.05e-01  2.27e-02  3.10e-01  1.12e-02  8.30e-02  6.69e-01  
  4  +2.9964e-01  +3.9371e-01  9.41e-02  4.83e-03  6.46e-02  1.47e-03  2.37e-02  7.82e-01  
  5  +2.8084e-01  +2.8401e-01  3.18e-03  1.66e-04  2.20e-03  2.74e-05  9.45e-04  9.73e-01  
  6  +2.8011e-01  +2.8014e-01  3.17e-05  1.66e-06  2.19e-05  2.73e-07  9.50e-06  9.90e-01  
  7  +2.8010e-01  +2.8010e-01  3.17e-07  1.66e-08  2.19e-07  2.73e-09  9.50e-08  9.90e-01  
  8  +2.8010e-01  +2.8010e-01  3.17e-09  1.66e-10  2.19e-09  2.73e-11  9.50e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 530.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:08 PM: Optimal value: 2.801e-01
(CVXPY) Oct 06 04:07:08 PM: Compilation took 5.026e-02 seconds
(CVXPY) Oct 06 04:07:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:08 PM: Your problem has 52 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:08 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 52
  constraints   = 77
  nnz(P)        = 0
  nnz(A)        = 373
  cones (total) = 1
    : Nonnegative = 1,  numel = 77

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7893e-01  +2.6957e+01  2.65e+01  8.46e-01  7.00e+00  1.00e+00  1.12e+00   ------   
  1  +5.0565e-01  +5.7461e+00  5.24e+00  3.59e-01  3.85e+00  3.79e-03  6.06e-01  6.18e-01  
  2  +3.5461e-01  +1.2367e+00  8.82e-01  6.66e-02  9.47e-01  2.24e-02  1.74e-01  9.76e-01  
  3  +2.6904e-01  +6.1678e-01  3.48e-01  2.03e-02  3.11e-01  1.00e-02  5.87e-02  7.19e-01  
  4  +2.2009e-01  +3.7909e-01  1.59e-01  7.47e-03  1.25e-01  4.31e-03  2.35e-02  7.29e-01  
  5  +1.9549e-01  +3.1608e-01  1.21e-01  4.35e-03  8.68e-02  3.17e-03  1.40e-02  6.05e-01  
  6  +1.5188e-01  +1.7584e-01  2.40e-02  7.51e-04  1.56e-02  5.08e-04  2.59e-03  8.67e-01  
  7  +1.4083e-01  +1.4149e-01  6.60e-04  2.05e-05  4.25e-04  1.14e-05  7.21e-05  9.74e-01  
  8  +1.4051e-01  +1.4054e-01  2.31e-05  7.73e-07  1.54e-05  1.08e-07  2.79e-06  9.62e-01  
  9  +1.4050e-01  +1.4050e-01  2.40e-07  8.21e-09  1.60e-07  1.20e-09  3.00e-08  9.89e-01  
 10  +1.4050e-01  +1.4050e-01  2.40e-09  8.21e-11  1.60e-09  1.20e-11  3.00e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 641.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:08 PM: Optimal value: 1.405e-01
(CVXPY) Oct 06 04:07:08 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:07:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:08 PM: Your problem has 62 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:08 PM: Finished problem compilation (took 1.141e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 87
  nnz(P)        = 0
  nnz(A)        = 416
  cones (total) = 1
    : Nonnegative = 1,  numel = 87

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7171e-01  +2.7062e+01  2.66e+01  8.54e-01  6.79e+00  1.00e+00  1.12e+00   ------   
  1  +4.5624e-01  +5.7296e+00  5.27e+00  3.59e-01  3.61e+00  3.88e-03  5.93e-01  6.22e-01  
  2  +2.5018e-01  +1.3057e+00  1.06e+00  6.56e-02  8.77e-01  2.22e-02  1.68e-01  9.28e-01  
  3  +1.6819e-01  +4.6525e-01  2.97e-01  1.63e-02  2.23e-01  6.75e-03  4.78e-02  7.71e-01  
  4  +1.2873e-01  +2.4991e-01  1.21e-01  5.99e-03  8.85e-02  2.97e-03  1.85e-02  6.77e-01  
  5  +1.1285e-01  +2.0473e-01  9.19e-02  3.91e-03  6.34e-02  2.17e-03  1.25e-02  4.45e-01  
  6  +8.4011e-02  +9.3387e-02  9.38e-03  3.79e-04  6.33e-03  9.68e-05  1.27e-03  9.61e-01  
  7  +8.0783e-02  +8.1206e-02  4.23e-04  1.74e-05  2.87e-04  2.79e-06  5.98e-05  9.53e-01  
  8  +8.0614e-02  +8.0642e-02  2.85e-05  1.26e-06  1.93e-05  2.30e-07  4.88e-06  9.62e-01  
  9  +8.0600e-02  +8.0601e-02  3.42e-07  1.52e-08  2.32e-07  2.68e-09  5.96e-08  9.88e-01  
 10  +8.0600e-02  +8.0600e-02  3.42e-09  1.53e-10  2.32e-09  2.68e-11  5.97e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 902.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:08 PM: Optimal value: 8.060e-02
(CVXPY) Oct 06 04:07:08 PM: Compilation took 1.141e-02 seconds
(CVXPY) Oct 06 04:07:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.0806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:08 PM: Your problem has 72 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:08 PM: Finished problem compilation (took 6.013e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 97
  nnz(P)        = 0
  nnz(A)        = 448
  cones (total) = 1
    : Nonnegative = 1,  numel = 97

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6771e-01  +2.7142e+01  2.67e+01  8.62e-01  6.54e+00  1.00e+00  1.13e+00   ------   
  1  +4.2320e-01  +5.7436e+00  5.32e+00  3.66e-01  3.42e+00  3.94e-03  5.92e-01  6.21e-01  
  2  +1.9897e-01  +1.8433e+00  1.64e+00  9.74e-02  1.19e+00  1.96e-02  2.37e-01  7.62e-01  
  3  +1.5294e-01  +4.7054e-01  3.18e-01  2.03e-02  2.58e-01  6.33e-03  5.86e-02  7.78e-01  
  4  +1.2717e-01  +2.6357e-01  1.36e-01  8.29e-03  1.11e-01  2.84e-03  2.50e-02  6.67e-01  
  5  +1.1236e-01  +2.2635e-01  1.14e-01  5.49e-03  8.52e-02  2.46e-03  1.73e-02  4.35e-01  
  6  +9.0546e-02  +1.2293e-01  3.24e-02  1.46e-03  2.35e-02  4.31e-04  4.81e-03  8.94e-01  
  7  +8.1175e-02  +8.2721e-02  1.55e-03  6.83e-05  1.10e-03  1.65e-05  2.31e-04  9.55e-01  
  8  +8.0798e-02  +8.1267e-02  4.68e-04  2.17e-05  3.33e-04  4.81e-06  8.07e-05  8.93e-01  
  9  +8.0657e-02  +8.0766e-02  1.10e-04  5.22e-06  7.74e-05  1.05e-06  2.03e-05  7.96e-01  
 10  +8.0603e-02  +8.0610e-02  6.49e-06  3.07e-07  4.45e-06  6.24e-08  1.27e-06  9.90e-01  
 11  +8.0600e-02  +8.0600e-02  6.57e-08  3.10e-09  4.49e-08  6.30e-10  1.29e-08  9.90e-01  
 12  +8.0600e-02  +8.0600e-02  6.58e-10  3.11e-11  4.50e-10  6.31e-12  1.29e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 917µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:08 PM: Optimal value: 8.060e-02
(CVXPY) Oct 06 04:07:08 PM: Compilation took 6.013e-03 seconds
(CVXPY) Oct 06 04:07:08 PM: Solver (including time spent in interface) took 4.148e-03 seconds
Iteration: 4, Objective: 0.0806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:09 PM: Your problem has 76 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:09 PM: Finished problem compilation (took 5.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 76
  constraints   = 101
  nnz(P)        = 0
  nnz(A)        = 474
  cones (total) = 1
    : Nonnegative = 1,  numel = 101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6432e-01  +2.7390e+01  2.69e+01  8.65e-01  6.54e+00  1.00e+00  1.14e+00   ------   
  1  +4.0911e-01  +5.8587e+00  5.45e+00  3.74e-01  3.43e+00  3.96e-03  6.02e-01  6.13e-01  
  2  +1.7616e-01  +1.9116e+00  1.74e+00  1.04e-01  1.24e+00  1.98e-02  2.55e-01  7.41e-01  
  3  +1.4023e-01  +4.9151e-01  3.51e-01  2.34e-02  2.92e-01  7.07e-03  6.84e-02  7.63e-01  
  4  +1.1663e-01  +2.6075e-01  1.44e-01  9.32e-03  1.21e-01  3.07e-03  2.90e-02  6.26e-01  
  5  +1.0678e-01  +2.3283e-01  1.26e-01  6.61e-03  9.71e-02  2.54e-03  2.15e-02  4.72e-01  
  6  +8.7187e-02  +1.1427e-01  2.71e-02  1.34e-03  2.03e-02  3.17e-04  4.57e-03  9.35e-01  
  7  +8.0974e-02  +8.2214e-02  1.24e-03  6.08e-05  9.21e-04  1.16e-05  2.13e-04  9.55e-01  
  8  +8.0683e-02  +8.0949e-02  2.65e-04  1.41e-05  2.00e-04  2.19e-06  5.41e-05  9.13e-01  
  9  +8.0605e-02  +8.0619e-02  1.39e-05  7.55e-07  1.05e-05  1.03e-07  2.99e-06  9.57e-01  
 10  +8.0600e-02  +8.0600e-02  1.49e-07  8.08e-09  1.12e-07  1.10e-09  3.21e-08  9.89e-01  
 11  +8.0600e-02  +8.0600e-02  1.49e-09  8.08e-11  1.12e-09  1.10e-11  3.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 813.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:09 PM: Optimal value: 8.060e-02
(CVXPY) Oct 06 04:07:09 PM: Compilation took 5.008e-03 seconds
(CVXPY) Oct 06 04:07:09 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.92
  Our objective: 0.84

IF 
    (x0 = 0 AND x1 = 0 AND x7 = 0)                       <-- (term's our objective: 0.32)
 OR (x0 = 1 AND x1 = 1 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.16)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1)                       <-- (term's our objective: 0.2)
 OR (x1 = 0 AND x3 = 1 AND x7 = 0)                       <-- (term's our objective: 0.2)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.16)
 OR (x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.04)
 OR (x4 = 0 AND x5 = 0 AND x6 = 1)                       <-- (term's our objective: 0.28)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.420086622238159
Best over terms:
  Our final objective: 0.31999999999999995
    Its accruacy: 0.66
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.31999999999999995
  Highest accruacy: 0.66
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

