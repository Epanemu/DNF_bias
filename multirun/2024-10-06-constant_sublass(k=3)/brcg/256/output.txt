Command:
python test_script.py -s constant_subclass -d 7 -n 500 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 7.

Computed total variation: 0.4
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:04 PM: Your problem has 265 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Finished problem compilation (took 4.692e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 265
  constraints   = 515
  nnz(P)        = 0
  nnz(A)        = 2515
  cones (total) = 1
    : Nonnegative = 1,  numel = 515

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +2.5104e+02  2.51e+02  9.36e-01  2.27e+01  1.00e+00  1.01e+00   ------   
  1  +5.8723e-01  +5.2967e+01  5.24e+01  3.81e-01  1.38e+01  3.86e-03  5.49e-01  6.11e-01  
  2  +5.3437e-01  +6.6330e+00  6.10e+00  1.20e-01  5.46e+00  1.36e-02  2.40e-01  9.07e-01  
  3  +5.0057e-01  +1.2651e+00  7.64e-01  2.30e-02  1.03e+00  1.73e-04  1.77e-01  8.49e-01  
  4  +4.9845e-01  +7.0954e-01  2.11e-01  6.09e-03  2.81e-01  9.94e-05  3.60e-02  8.43e-01  
  5  +4.7607e-01  +6.3020e-01  1.54e-01  1.08e-03  5.09e-02  6.31e-04  3.39e-03  9.24e-01  
  6  +4.6471e-01  +5.6425e-01  9.95e-02  6.00e-04  2.81e-02  3.63e-04  2.00e-03  4.98e-01  
  7  +4.5342e-01  +5.0997e-01  5.65e-02  2.85e-04  1.33e-02  1.71e-04  1.05e-03  6.00e-01  
  8  +4.4566e-01  +4.7191e-01  2.63e-02  1.23e-04  5.75e-03  1.81e-05  4.97e-04  9.90e-01  
  9  +4.3876e-01  +4.4093e-01  2.16e-03  9.15e-06  4.27e-04  1.36e-06  4.11e-05  9.23e-01  
 10  +4.3811e-01  +4.3813e-01  2.30e-05  9.60e-08  4.48e-06  1.47e-08  4.38e-07  9.90e-01  
 11  +4.3810e-01  +4.3810e-01  2.30e-07  9.60e-10  4.48e-08  1.47e-10  4.38e-09  9.90e-01  
 12  +4.3810e-01  +4.3810e-01  2.30e-09  9.60e-12  4.48e-10  1.47e-12  4.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9198ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:05 PM: Optimal value: 4.381e-01
(CVXPY) Oct 06 04:02:05 PM: Compilation took 4.692e-02 seconds
(CVXPY) Oct 06 04:02:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4381
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:05 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Finished problem compilation (took 5.128e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 2966
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9920e-01  +2.5125e+02  2.51e+02  9.37e-01  2.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.8490e-01  +5.3046e+01  5.25e+01  3.84e-01  1.42e+01  3.85e-03  5.51e-01  6.11e-01  
  2  +5.3138e-01  +6.3147e+00  5.78e+00  1.14e-01  5.29e+00  1.40e-02  2.29e-01  9.40e-01  
  3  +5.0255e-01  +1.7289e+00  1.23e+00  3.76e-02  1.72e+00  2.04e-03  1.72e-01  6.86e-01  
  4  +4.9722e-01  +1.0569e+00  5.60e-01  1.38e-02  6.61e-01  1.90e-03  4.93e-02  7.69e-01  
  5  +4.6985e-01  +9.3054e-01  4.61e-01  3.10e-03  1.52e-01  6.47e-03  9.15e-03  8.47e-01  
  6  +4.5294e-01  +7.8170e-01  3.29e-01  1.91e-03  9.31e-02  3.94e-03  6.17e-03  4.11e-01  
  7  +4.3584e-01  +6.4562e-01  2.10e-01  1.11e-03  5.34e-02  1.93e-03  3.94e-03  4.76e-01  
  8  +4.2617e-01  +5.6163e-01  1.35e-01  7.52e-04  3.61e-02  5.95e-04  2.87e-03  5.77e-01  
  9  +4.2245e-01  +5.2699e-01  1.05e-01  5.69e-04  2.73e-02  1.44e-04  2.26e-03  8.77e-01  
 10  +4.1159e-01  +4.5947e-01  4.79e-02  2.55e-04  1.22e-02  5.80e-05  1.11e-03  5.44e-01  
 11  +4.1069e-01  +4.5295e-01  4.23e-02  2.24e-04  1.07e-02  4.66e-05  9.84e-04  3.76e-01  
 12  +4.0322e-01  +4.0776e-01  4.54e-03  2.40e-05  1.14e-03  2.90e-06  1.21e-04  8.93e-01  
 13  +4.0224e-01  +4.0241e-01  1.68e-04  8.91e-07  4.24e-05  7.46e-08  5.01e-06  9.63e-01  
 14  +4.0220e-01  +4.0220e-01  2.24e-06  1.19e-08  5.63e-07  8.44e-10  6.92e-08  9.87e-01  
 15  +4.0220e-01  +4.0220e-01  2.24e-08  1.18e-10  5.63e-09  8.43e-12  6.92e-10  9.90e-01  
 16  +4.0220e-01  +4.0220e-01  2.24e-10  1.18e-12  5.63e-11  8.46e-14  6.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.9215ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:05 PM: Optimal value: 4.022e-01
(CVXPY) Oct 06 04:02:05 PM: Compilation took 5.128e-03 seconds
(CVXPY) Oct 06 04:02:05 PM: Solver (including time spent in interface) took 5.005e-03 seconds
Iteration: 2, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:05 PM: Your problem has 285 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Finished problem compilation (took 6.090e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 285
  constraints   = 535
  nnz(P)        = 0
  nnz(A)        = 3446
  cones (total) = 1
    : Nonnegative = 1,  numel = 535

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9899e-01  +2.5133e+02  2.51e+02  9.38e-01  2.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.8300e-01  +5.3247e+01  5.27e+01  3.89e-01  1.45e+01  3.85e-03  5.55e-01  6.08e-01  
  2  +5.2951e-01  +6.1383e+00  5.61e+00  1.12e-01  5.27e+00  1.45e-02  2.26e-01  9.62e-01  
  3  +5.0239e-01  +1.7422e+00  1.24e+00  3.82e-02  1.81e+00  2.32e-03  1.59e-01  7.42e-01  
  4  +4.9571e-01  +1.1609e+00  6.65e-01  1.42e-02  7.02e-01  2.69e-03  4.52e-02  7.82e-01  
  5  +4.7410e-01  +9.8131e-01  5.07e-01  4.04e-03  2.05e-01  5.77e-03  1.18e-02  7.63e-01  
  6  +4.6528e-01  +9.4275e-01  4.77e-01  2.88e-03  1.45e-01  5.37e-03  8.40e-03  4.42e-01  
  7  +4.4414e-01  +7.4673e-01  3.03e-01  1.57e-03  7.89e-02  7.64e-04  4.77e-03  8.16e-01  
  8  +4.0421e-01  +5.0445e-01  1.00e-01  4.53e-04  2.25e-02  1.47e-04  1.53e-03  7.56e-01  
  9  +3.8900e-01  +4.2597e-01  3.70e-02  1.59e-04  7.90e-03  5.60e-05  5.47e-04  7.10e-01  
 10  +3.8434e-01  +4.0813e-01  2.38e-02  9.43e-05  4.77e-03  3.66e-05  3.21e-04  5.10e-01  
 11  +3.8012e-01  +3.9019e-01  1.01e-02  3.92e-05  1.98e-03  1.21e-05  1.37e-04  9.90e-01  
 12  +3.7652e-01  +3.7698e-01  4.57e-04  1.74e-06  8.85e-05  5.18e-07  6.18e-06  9.66e-01  
 13  +3.7635e-01  +3.7636e-01  4.75e-06  1.81e-08  9.20e-07  5.39e-09  6.43e-08  9.90e-01  
 14  +3.7635e-01  +3.7635e-01  4.75e-08  1.81e-10  9.20e-09  5.39e-11  6.43e-10  9.90e-01  
 15  +3.7635e-01  +3.7635e-01  4.75e-10  1.81e-12  9.20e-11  5.39e-13  6.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6075ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:05 PM: Optimal value: 3.764e-01
(CVXPY) Oct 06 04:02:05 PM: Compilation took 6.090e-03 seconds
(CVXPY) Oct 06 04:02:05 PM: Solver (including time spent in interface) took 5.109e-03 seconds
Iteration: 3, Objective: 0.3764
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:05 PM: Your problem has 295 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Finished problem compilation (took 9.828e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 295
  constraints   = 545
  nnz(P)        = 0
  nnz(A)        = 3693
  cones (total) = 1
    : Nonnegative = 1,  numel = 545

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9876e-01  +2.5132e+02  2.51e+02  9.38e-01  2.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.7940e-01  +5.3514e+01  5.29e+01  3.94e-01  1.46e+01  3.84e-03  5.59e-01  6.05e-01  
  2  +5.2707e-01  +5.8994e+00  5.37e+00  1.07e-01  5.09e+00  1.50e-02  2.20e-01  9.90e-01  
  3  +5.0113e-01  +1.5913e+00  1.09e+00  3.35e-02  1.60e+00  2.20e-03  1.31e-01  9.00e-01  
  4  +4.8849e-01  +1.1969e+00  7.08e-01  9.95e-03  5.03e-01  4.23e-03  2.84e-02  8.48e-01  
  5  +4.7048e-01  +1.0849e+00  6.14e-01  4.69e-03  2.39e-01  5.49e-03  1.33e-02  6.33e-01  
  6  +4.5277e-01  +9.5834e-01  5.06e-01  2.94e-03  1.49e-01  5.13e-03  8.50e-03  3.97e-01  
  7  +4.2383e-01  +6.9633e-01  2.72e-01  1.44e-03  7.21e-02  5.26e-05  4.52e-03  8.57e-01  
  8  +3.8574e-01  +4.7551e-01  8.98e-02  4.27e-04  2.12e-02  2.81e-05  1.51e-03  7.36e-01  
  9  +3.7776e-01  +4.3825e-01  6.05e-02  2.75e-04  1.37e-02  3.06e-05  9.85e-04  5.24e-01  
 10  +3.6515e-01  +3.8464e-01  1.95e-02  8.15e-05  4.15e-03  1.36e-05  3.06e-04  7.83e-01  
 11  +3.6110e-01  +3.6800e-01  6.90e-03  2.87e-05  1.46e-03  7.14e-06  1.10e-04  9.90e-01  
 12  +3.5905e-01  +3.6041e-01  1.37e-03  5.61e-06  2.87e-04  1.42e-06  2.18e-05  8.15e-01  
 13  +3.5879e-01  +3.5953e-01  7.43e-04  2.95e-06  1.51e-04  7.78e-07  1.16e-05  6.62e-01  
 14  +3.5850e-01  +3.5851e-01  1.01e-05  4.01e-08  2.05e-06  1.06e-08  1.58e-07  9.86e-01  
 15  +3.5850e-01  +3.5850e-01  1.01e-07  4.01e-10  2.05e-08  1.06e-10  1.58e-09  9.90e-01  
 16  +3.5850e-01  +3.5850e-01  1.01e-09  4.01e-12  2.05e-10  1.06e-12  1.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.5398ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:05 PM: Optimal value: 3.585e-01
(CVXPY) Oct 06 04:02:05 PM: Compilation took 9.828e-03 seconds
(CVXPY) Oct 06 04:02:05 PM: Solver (including time spent in interface) took 9.935e-03 seconds
Iteration: 4, Objective: 0.3585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:05 PM: Your problem has 305 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Finished problem compilation (took 3.559e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 305
  constraints   = 555
  nnz(P)        = 0
  nnz(A)        = 3829
  cones (total) = 1
    : Nonnegative = 1,  numel = 555

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9862e-01  +2.5146e+02  2.51e+02  9.39e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.7684e-01  +5.3644e+01  5.31e+01  3.97e-01  1.44e+01  3.85e-03  5.60e-01  6.04e-01  
  2  +5.2550e-01  +5.9733e+00  5.45e+00  1.08e-01  5.05e+00  1.53e-02  2.20e-01  9.90e-01  
  3  +5.0296e-01  +1.6066e+00  1.10e+00  3.28e-02  1.60e+00  2.34e-03  1.00e-01  8.48e-01  
  4  +4.9279e-01  +1.5721e+00  1.08e+00  1.35e-02  6.87e-01  4.78e-03  3.57e-02  7.18e-01  
  5  +4.6705e-01  +1.1488e+00  6.82e-01  4.83e-03  2.46e-01  4.70e-03  1.33e-02  6.69e-01  
  6  +4.4399e-01  +9.0986e-01  4.66e-01  2.50e-03  1.26e-01  2.49e-03  7.14e-03  6.57e-01  
  7  +4.3199e-01  +7.9801e-01  3.66e-01  2.07e-03  1.04e-01  1.27e-03  6.26e-03  2.91e-01  
  8  +3.9186e-01  +5.4947e-01  1.58e-01  7.53e-04  3.73e-02  4.30e-04  2.52e-03  6.52e-01  
  9  +3.7762e-01  +4.7359e-01  9.60e-02  4.39e-04  2.17e-02  2.28e-04  1.55e-03  5.36e-01  
 10  +3.6514e-01  +4.0897e-01  4.38e-02  1.96e-04  9.68e-03  7.41e-05  7.28e-04  7.70e-01  
 11  +3.5817e-01  +3.7626e-01  1.81e-02  7.74e-05  3.83e-03  2.08e-05  3.02e-04  9.44e-01  
 12  +3.5299e-01  +3.5412e-01  1.13e-03  4.78e-06  2.37e-04  1.24e-06  1.94e-05  9.42e-01  
 13  +3.5261e-01  +3.5263e-01  1.98e-05  8.38e-08  4.15e-06  2.09e-08  3.42e-07  9.85e-01  
 14  +3.5260e-01  +3.5260e-01  1.98e-07  8.39e-10  4.16e-08  2.09e-10  3.42e-09  9.90e-01  
 15  +3.5260e-01  +3.5260e-01  1.98e-09  8.40e-12  4.16e-10  2.09e-12  3.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.2766ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:05 PM: Optimal value: 3.526e-01
(CVXPY) Oct 06 04:02:05 PM: Compilation took 3.559e-03 seconds
(CVXPY) Oct 06 04:02:05 PM: Solver (including time spent in interface) took 1.181e-02 seconds
Iteration: 5, Objective: 0.3526
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:05 PM: Your problem has 315 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:05 PM: Finished problem compilation (took 9.563e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 315
  constraints   = 565
  nnz(P)        = 0
  nnz(A)        = 3941
  cones (total) = 1
    : Nonnegative = 1,  numel = 565

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9854e-01  +2.5184e+02  2.51e+02  9.39e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.7355e-01  +5.3715e+01  5.31e+01  3.97e-01  1.42e+01  3.86e-03  5.60e-01  6.04e-01  
  2  +5.2331e-01  +6.0814e+00  5.56e+00  1.07e-01  4.95e+00  1.55e-02  2.17e-01  9.90e-01  
  3  +5.0416e-01  +1.7265e+00  1.22e+00  3.05e-02  1.52e+00  3.57e-03  8.10e-02  7.51e-01  
  4  +4.9616e-01  +1.7776e+00  1.28e+00  1.58e-02  8.07e-01  6.24e-03  3.96e-02  5.79e-01  
  5  +4.7338e-01  +1.4733e+00  1.00e+00  7.14e-03  3.66e-01  6.83e-03  1.84e-02  6.08e-01  
  6  +4.4867e-01  +1.1599e+00  7.11e-01  4.13e-03  2.09e-01  3.74e-03  1.13e-02  5.67e-01  
  7  +4.1220e-01  +7.6921e-01  3.57e-01  1.99e-03  9.88e-02  3.36e-04  6.06e-03  7.30e-01  
  8  +3.8034e-01  +5.5707e-01  1.77e-01  9.01e-04  4.43e-02  1.55e-04  3.04e-03  5.45e-01  
  9  +3.6503e-01  +4.7763e-01  1.13e-01  5.40e-04  2.66e-02  1.03e-04  1.90e-03  5.83e-01  
 10  +3.4834e-01  +3.9386e-01  4.55e-02  2.08e-04  1.03e-02  4.19e-05  7.86e-04  7.52e-01  
 11  +3.3890e-01  +3.5073e-01  1.18e-02  5.18e-05  2.58e-03  1.15e-05  2.10e-04  9.90e-01  
 12  +3.3520e-01  +3.3579e-01  5.90e-04  2.55e-06  1.27e-04  5.45e-07  1.07e-05  9.51e-01  
 13  +3.3500e-01  +3.3501e-01  9.40e-06  4.07e-08  2.03e-06  8.56e-09  1.72e-07  9.85e-01  
 14  +3.3500e-01  +3.3500e-01  9.40e-08  4.07e-10  2.03e-08  8.56e-11  1.72e-09  9.90e-01  
 15  +3.3500e-01  +3.3500e-01  9.40e-10  4.07e-12  2.03e-10  8.57e-13  1.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.6725ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:05 PM: Optimal value: 3.350e-01
(CVXPY) Oct 06 04:02:05 PM: Compilation took 9.563e-03 seconds
(CVXPY) Oct 06 04:02:05 PM: Solver (including time spent in interface) took 1.011e-02 seconds
Iteration: 6, Objective: 0.3350
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:06 PM: Your problem has 325 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Finished problem compilation (took 1.012e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 325
  constraints   = 575
  nnz(P)        = 0
  nnz(A)        = 4070
  cones (total) = 1
    : Nonnegative = 1,  numel = 575

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9840e-01  +2.5181e+02  2.51e+02  9.40e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.7102e-01  +5.3887e+01  5.33e+01  4.01e-01  1.41e+01  3.86e-03  5.62e-01  6.02e-01  
  2  +5.2177e-01  +6.1468e+00  5.63e+00  1.08e-01  4.91e+00  1.58e-02  2.19e-01  9.90e-01  
  3  +5.0404e-01  +1.7688e+00  1.26e+00  2.93e-02  1.45e+00  4.06e-03  7.59e-02  7.23e-01  
  4  +4.9195e-01  +1.8164e+00  1.32e+00  1.35e-02  6.90e-01  7.64e-03  3.36e-02  6.35e-01  
  5  +4.6659e-01  +1.3821e+00  9.16e-01  6.96e-03  3.51e-01  4.58e-03  1.85e-02  5.95e-01  
  6  +4.5166e-01  +1.2807e+00  8.29e-01  5.04e-03  2.53e-01  4.00e-03  1.36e-02  3.97e-01  
  7  +4.1186e-01  +8.2226e-01  4.10e-01  2.33e-03  1.15e-01  5.83e-04  7.05e-03  6.99e-01  
  8  +3.6996e-01  +5.1717e-01  1.47e-01  7.80e-04  3.78e-02  1.46e-04  2.74e-03  6.83e-01  
  9  +3.6008e-01  +4.7425e-01  1.14e-01  5.66e-04  2.77e-02  1.12e-04  2.02e-03  5.03e-01  
 10  +3.4611e-01  +4.0564e-01  5.95e-02  2.79e-04  1.37e-02  5.74e-05  1.05e-03  6.71e-01  
 11  +3.3577e-01  +3.5701e-01  2.12e-02  9.60e-05  4.73e-03  1.97e-05  3.92e-04  9.10e-01  
 12  +3.2972e-01  +3.3158e-01  1.86e-03  8.20e-06  4.05e-04  1.56e-06  3.57e-05  9.19e-01  
 13  +3.2911e-01  +3.2913e-01  2.03e-05  8.87e-08  4.38e-06  1.67e-08  3.91e-07  9.90e-01  
 14  +3.2910e-01  +3.2910e-01  2.03e-07  8.87e-10  4.38e-08  1.67e-10  3.91e-09  9.90e-01  
 15  +3.2910e-01  +3.2910e-01  2.03e-09  8.87e-12  4.38e-10  1.67e-12  3.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.0533ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:06 PM: Optimal value: 3.291e-01
(CVXPY) Oct 06 04:02:06 PM: Compilation took 1.012e-02 seconds
(CVXPY) Oct 06 04:02:06 PM: Solver (including time spent in interface) took 9.613e-03 seconds
Iteration: 7, Objective: 0.3291
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:06 PM: Your problem has 335 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Finished problem compilation (took 9.232e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 335
  constraints   = 585
  nnz(P)        = 0
  nnz(A)        = 4176
  cones (total) = 1
    : Nonnegative = 1,  numel = 585

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9838e-01  +2.5185e+02  2.51e+02  9.40e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.6903e-01  +5.3938e+01  5.34e+01  4.02e-01  1.40e+01  3.87e-03  5.61e-01  6.02e-01  
  2  +5.2020e-01  +6.1838e+00  5.66e+00  1.07e-01  4.82e+00  1.59e-02  2.18e-01  9.90e-01  
  3  +5.0398e-01  +1.9803e+00  1.48e+00  3.15e-02  1.55e+00  5.02e-03  7.92e-02  6.70e-01  
  4  +4.9182e-01  +1.9850e+00  1.49e+00  1.59e-02  8.03e-01  8.11e-03  3.93e-02  5.77e-01  
  5  +4.6383e-01  +1.4084e+00  9.45e-01  7.54e-03  3.77e-01  4.12e-03  2.02e-02  6.36e-01  
  6  +4.5010e-01  +1.2957e+00  8.46e-01  5.49e-03  2.74e-01  3.29e-03  1.50e-02  4.35e-01  
  7  +4.1854e-01  +9.3513e-01  5.17e-01  3.27e-03  1.60e-01  3.05e-05  9.93e-03  8.35e-01  
  8  +3.7372e-01  +5.7800e-01  2.04e-01  1.12e-03  5.38e-02  3.04e-05  3.86e-03  6.59e-01  
  9  +3.5472e-01  +4.7044e-01  1.16e-01  5.91e-04  2.84e-02  4.52e-05  2.17e-03  6.16e-01  
 10  +3.4244e-01  +4.0875e-01  6.63e-02  3.19e-04  1.55e-02  3.18e-05  1.22e-03  5.26e-01  
 11  +3.3306e-01  +3.6004e-01  2.70e-02  1.27e-04  6.20e-03  1.44e-05  5.07e-04  6.31e-01  
 12  +3.2863e-01  +3.3977e-01  1.11e-02  5.15e-05  2.53e-03  7.46e-06  2.15e-04  8.07e-01  
 13  +3.2560e-01  +3.2690e-01  1.30e-03  5.88e-06  2.92e-04  8.88e-07  2.52e-05  8.96e-01  
 14  +3.2522e-01  +3.2528e-01  5.77e-05  2.60e-07  1.29e-05  3.56e-08  1.14e-06  9.58e-01  
 15  +3.2520e-01  +3.2520e-01  5.86e-07  2.64e-09  1.31e-07  3.59e-10  1.16e-08  9.90e-01  
 16  +3.2520e-01  +3.2520e-01  5.86e-09  2.64e-11  1.31e-09  3.59e-12  1.16e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.8152ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:06 PM: Optimal value: 3.252e-01
(CVXPY) Oct 06 04:02:06 PM: Compilation took 9.232e-03 seconds
(CVXPY) Oct 06 04:02:06 PM: Solver (including time spent in interface) took 6.511e-03 seconds
Iteration: 8, Objective: 0.3252
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:06 PM: Your problem has 345 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Finished problem compilation (took 7.844e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 345
  constraints   = 595
  nnz(P)        = 0
  nnz(A)        = 4297
  cones (total) = 1
    : Nonnegative = 1,  numel = 595

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9838e-01  +2.5187e+02  2.51e+02  9.41e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.6867e-01  +5.3941e+01  5.34e+01  4.03e-01  1.38e+01  3.87e-03  5.60e-01  6.02e-01  
  2  +5.1985e-01  +6.1812e+00  5.66e+00  1.07e-01  4.75e+00  1.59e-02  2.18e-01  9.90e-01  
  3  +5.0353e-01  +1.9473e+00  1.44e+00  3.01e-02  1.47e+00  5.05e-03  7.62e-02  6.77e-01  
  4  +4.9109e-01  +1.9490e+00  1.46e+00  1.54e-02  7.72e-01  8.07e-03  3.83e-02  5.70e-01  
  5  +4.6431e-01  +1.4584e+00  9.94e-01  7.69e-03  3.82e-01  4.95e-03  2.05e-02  6.02e-01  
  6  +4.4508e-01  +1.2748e+00  8.30e-01  5.09e-03  2.52e-01  3.88e-03  1.40e-02  4.47e-01  
  7  +4.1017e-01  +8.6552e-01  4.55e-01  2.82e-03  1.37e-01  1.67e-04  8.73e-03  7.47e-01  
  8  +3.6812e-01  +5.5526e-01  1.87e-01  1.02e-03  4.87e-02  7.22e-05  3.57e-03  6.50e-01  
  9  +3.5272e-01  +4.7697e-01  1.24e-01  6.31e-04  3.03e-02  6.08e-05  2.30e-03  4.73e-01  
 10  +3.4036e-01  +4.1778e-01  7.74e-02  3.76e-04  1.80e-02  4.18e-05  1.45e-03  4.56e-01  
 11  +3.2545e-01  +3.4651e-01  2.11e-02  9.80e-05  4.69e-03  1.13e-05  4.19e-04  7.50e-01  
 12  +3.2012e-01  +3.2249e-01  2.38e-03  1.08e-05  5.16e-04  1.24e-06  4.97e-05  8.91e-01  
 13  +3.1941e-01  +3.1944e-01  3.35e-05  1.52e-07  7.25e-06  1.78e-08  7.09e-07  9.87e-01  
 14  +3.1940e-01  +3.1940e-01  3.35e-07  1.52e-09  7.26e-08  1.78e-10  7.09e-09  9.90e-01  
 15  +3.1940e-01  +3.1940e-01  3.35e-09  1.52e-11  7.26e-10  1.78e-12  7.09e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.5834ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:06 PM: Optimal value: 3.194e-01
(CVXPY) Oct 06 04:02:06 PM: Compilation took 7.844e-03 seconds
(CVXPY) Oct 06 04:02:06 PM: Solver (including time spent in interface) took 7.128e-03 seconds
Iteration: 9, Objective: 0.3194
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:06 PM: Your problem has 355 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Finished problem compilation (took 1.005e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 355
  constraints   = 605
  nnz(P)        = 0
  nnz(A)        = 4382
  cones (total) = 1
    : Nonnegative = 1,  numel = 605

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9837e-01  +2.5180e+02  2.51e+02  9.41e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.6703e-01  +5.3901e+01  5.33e+01  4.04e-01  1.36e+01  3.88e-03  5.60e-01  6.03e-01  
  2  +5.1861e-01  +6.2254e+00  5.71e+00  1.06e-01  4.67e+00  1.60e-02  2.16e-01  9.90e-01  
  3  +5.0241e-01  +2.0311e+00  1.53e+00  2.96e-02  1.44e+00  5.61e-03  7.42e-02  6.81e-01  
  4  +4.8596e-01  +1.9990e+00  1.51e+00  1.43e-02  7.11e-01  8.92e-03  3.56e-02  6.01e-01  
  5  +4.4959e-01  +1.4502e+00  1.00e+00  6.44e-03  3.18e-01  5.65e-03  1.73e-02  6.58e-01  
  6  +4.2730e-01  +1.1613e+00  7.34e-01  4.42e-03  2.16e-01  2.84e-03  1.26e-02  4.49e-01  
  7  +3.7968e-01  +6.4820e-01  2.69e-01  1.56e-03  7.42e-02  2.52e-05  5.20e-03  8.48e-01  
  8  +3.5809e-01  +5.2473e-01  1.67e-01  9.05e-04  4.29e-02  3.92e-05  3.21e-03  4.98e-01  
  9  +3.4035e-01  +4.3268e-01  9.23e-02  4.66e-04  2.22e-02  3.23e-05  1.76e-03  5.46e-01  
 10  +3.3267e-01  +3.9583e-01  6.32e-02  3.09e-04  1.47e-02  2.58e-05  1.22e-03  3.87e-01  
 11  +3.1838e-01  +3.2756e-01  9.18e-03  4.31e-05  2.05e-03  5.12e-06  1.87e-04  9.15e-01  
 12  +3.1669e-01  +3.2019e-01  3.51e-03  1.63e-05  7.74e-04  2.06e-06  7.30e-05  6.62e-01  
 13  +3.1569e-01  +3.1598e-01  2.85e-04  1.31e-06  6.22e-05  1.72e-07  6.04e-06  9.32e-01  
 14  +3.1560e-01  +3.1560e-01  3.36e-06  1.54e-08  7.30e-07  2.09e-09  7.14e-08  9.90e-01  
 15  +3.1560e-01  +3.1560e-01  3.36e-08  1.54e-10  7.30e-09  2.09e-11  7.15e-10  9.90e-01  
 16  +3.1560e-01  +3.1560e-01  3.36e-10  1.54e-12  7.31e-11  2.10e-13  7.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.9021ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:06 PM: Optimal value: 3.156e-01
(CVXPY) Oct 06 04:02:06 PM: Compilation took 1.005e-02 seconds
(CVXPY) Oct 06 04:02:06 PM: Solver (including time spent in interface) took 1.165e-02 seconds
Iteration: 10, Objective: 0.3156
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:06 PM: Your problem has 360 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Finished problem compilation (took 1.011e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 360
  constraints   = 610
  nnz(P)        = 0
  nnz(A)        = 4447
  cones (total) = 1
    : Nonnegative = 1,  numel = 610

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9837e-01  +2.5179e+02  2.51e+02  9.42e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.6667e-01  +5.3889e+01  5.33e+01  4.05e-01  1.36e+01  3.88e-03  5.59e-01  6.03e-01  
  2  +5.1841e-01  +6.2330e+00  5.71e+00  1.06e-01  4.63e+00  1.60e-02  2.15e-01  9.90e-01  
  3  +5.0210e-01  +2.0339e+00  1.53e+00  2.92e-02  1.42e+00  5.69e-03  7.32e-02  6.84e-01  
  4  +4.8436e-01  +2.0094e+00  1.53e+00  1.38e-02  6.86e-01  9.20e-03  3.45e-02  6.15e-01  
  5  +4.4879e-01  +1.4879e+00  1.04e+00  6.58e-03  3.24e-01  5.75e-03  1.76e-02  6.44e-01  
  6  +4.2547e-01  +1.1741e+00  7.49e-01  4.46e-03  2.17e-01  2.75e-03  1.27e-02  4.65e-01  
  7  +3.7321e-01  +6.0383e-01  2.31e-01  1.31e-03  6.20e-02  2.44e-05  4.43e-03  8.47e-01  
  8  +3.5577e-01  +5.1940e-01  1.64e-01  8.82e-04  4.17e-02  3.99e-05  3.16e-03  4.17e-01  
  9  +3.4402e-01  +4.6002e-01  1.16e-01  6.01e-04  2.85e-02  3.41e-05  2.25e-03  3.43e-01  
 10  +3.3210e-01  +4.0147e-01  6.94e-02  3.46e-04  1.64e-02  2.68e-05  1.38e-03  4.90e-01  
 11  +3.1693e-01  +3.2807e-01  1.11e-02  5.35e-05  2.53e-03  5.62e-06  2.39e-04  8.95e-01  
 12  +3.1498e-01  +3.1930e-01  4.32e-03  2.06e-05  9.72e-04  2.34e-06  9.51e-05  6.59e-01  
 13  +3.1374e-01  +3.1386e-01  1.21e-04  5.74e-07  2.71e-05  6.75e-08  2.71e-06  9.77e-01  
 14  +3.1370e-01  +3.1370e-01  1.22e-06  5.77e-09  2.73e-07  6.78e-10  2.73e-08  9.90e-01  
 15  +3.1370e-01  +3.1370e-01  1.22e-08  5.77e-11  2.73e-09  6.79e-12  2.73e-10  9.90e-01  
 16  +3.1370e-01  +3.1370e-01  1.22e-10  5.77e-13  2.73e-11  6.79e-14  2.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.2612ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:06 PM: Optimal value: 3.137e-01
(CVXPY) Oct 06 04:02:06 PM: Compilation took 1.011e-02 seconds
(CVXPY) Oct 06 04:02:06 PM: Solver (including time spent in interface) took 9.722e-03 seconds
Iteration: 11, Objective: 0.3137
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:06 PM: Your problem has 363 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:06 PM: Finished problem compilation (took 8.761e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 363
  constraints   = 613
  nnz(P)        = 0
  nnz(A)        = 4467
  cones (total) = 1
    : Nonnegative = 1,  numel = 613

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9836e-01  +2.5179e+02  2.51e+02  9.42e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.6691e-01  +5.3845e+01  5.33e+01  4.04e-01  1.35e+01  3.88e-03  5.59e-01  6.04e-01  
  2  +5.1836e-01  +6.2164e+00  5.70e+00  1.05e-01  4.60e+00  1.60e-02  2.15e-01  9.90e-01  
  3  +5.0203e-01  +2.0307e+00  1.53e+00  2.90e-02  1.41e+00  5.69e-03  7.30e-02  6.85e-01  
  4  +4.8417e-01  +2.0024e+00  1.52e+00  1.37e-02  6.80e-01  9.19e-03  3.44e-02  6.15e-01  
  5  +4.4823e-01  +1.4835e+00  1.04e+00  6.51e-03  3.20e-01  5.84e-03  1.75e-02  6.41e-01  
  6  +4.2564e-01  +1.1776e+00  7.52e-01  4.48e-03  2.18e-01  2.77e-03  1.28e-02  4.63e-01  
  7  +3.7375e-01  +6.0860e-01  2.35e-01  1.33e-03  6.29e-02  2.47e-05  4.50e-03  8.48e-01  
  8  +3.5629e-01  +5.2238e-01  1.66e-01  8.96e-04  4.23e-02  3.79e-05  3.20e-03  4.04e-01  
  9  +3.4381e-01  +4.5913e-01  1.15e-01  5.97e-04  2.82e-02  3.24e-05  2.23e-03  3.58e-01  
 10  +3.3232e-01  +4.0266e-01  7.03e-02  3.52e-04  1.66e-02  2.64e-05  1.40e-03  4.81e-01  
 11  +3.1684e-01  +3.2764e-01  1.08e-02  5.21e-05  2.46e-03  5.56e-06  2.31e-04  9.06e-01  
 12  +3.1483e-01  +3.1872e-01  3.89e-03  1.86e-05  8.75e-04  2.14e-06  8.53e-05  6.82e-01  
 13  +3.1403e-01  +3.1533e-01  1.30e-03  6.03e-06  2.84e-04  8.34e-07  2.85e-05  7.97e-01  
 14  +3.1364e-01  +3.1375e-01  1.12e-04  5.17e-07  2.44e-05  8.26e-08  2.48e-06  9.90e-01  
 15  +3.1360e-01  +3.1360e-01  1.14e-06  5.25e-09  2.47e-07  8.37e-10  2.51e-08  9.90e-01  
 16  +3.1360e-01  +3.1360e-01  1.14e-08  5.25e-11  2.47e-09  8.37e-12  2.51e-10  9.90e-01  
 17  +3.1360e-01  +3.1360e-01  1.14e-10  5.25e-13  2.47e-11  8.39e-14  2.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.4417ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:06 PM: Optimal value: 3.136e-01
(CVXPY) Oct 06 04:02:06 PM: Compilation took 8.761e-03 seconds
(CVXPY) Oct 06 04:02:06 PM: Solver (including time spent in interface) took 1.004e-02 seconds
Iteration: 12, Objective: 0.3136
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:07 PM: Your problem has 364 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:07 PM: Finished problem compilation (took 1.167e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 364
  constraints   = 614
  nnz(P)        = 0
  nnz(A)        = 4472
  cones (total) = 1
    : Nonnegative = 1,  numel = 614

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9836e-01  +2.5179e+02  2.51e+02  9.42e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.6690e-01  +5.3844e+01  5.33e+01  4.05e-01  1.35e+01  3.88e-03  5.59e-01  6.04e-01  
  2  +5.1834e-01  +6.2141e+00  5.70e+00  1.05e-01  4.59e+00  1.60e-02  2.15e-01  9.90e-01  
  3  +5.0200e-01  +2.0253e+00  1.52e+00  2.89e-02  1.40e+00  5.68e-03  7.28e-02  6.86e-01  
  4  +4.8425e-01  +1.9954e+00  1.51e+00  1.37e-02  6.79e-01  9.15e-03  3.44e-02  6.12e-01  
  5  +4.4804e-01  +1.4758e+00  1.03e+00  6.48e-03  3.18e-01  5.75e-03  1.74e-02  6.46e-01  
  6  +4.2553e-01  +1.1757e+00  7.50e-01  4.48e-03  2.17e-01  2.75e-03  1.28e-02  4.63e-01  
  7  +3.7354e-01  +6.0662e-01  2.33e-01  1.32e-03  6.24e-02  2.45e-05  4.47e-03  8.47e-01  
  8  +3.5669e-01  +5.2452e-01  1.68e-01  9.06e-04  4.27e-02  3.85e-05  3.23e-03  3.96e-01  
  9  +3.4368e-01  +4.5831e-01  1.15e-01  5.94e-04  2.81e-02  3.19e-05  2.22e-03  3.64e-01  
 10  +3.3255e-01  +4.0371e-01  7.12e-02  3.56e-04  1.68e-02  2.65e-05  1.41e-03  4.70e-01  
 11  +3.1693e-01  +3.2803e-01  1.11e-02  5.36e-05  2.53e-03  5.73e-06  2.38e-04  9.05e-01  
 12  +3.1485e-01  +3.1881e-01  3.96e-03  1.89e-05  8.91e-04  2.18e-06  8.69e-05  6.86e-01  
 13  +3.1403e-01  +3.1534e-01  1.31e-03  6.07e-06  2.86e-04  8.45e-07  2.87e-05  8.04e-01  
 14  +3.1364e-01  +3.1375e-01  1.07e-04  4.94e-07  2.33e-05  7.86e-08  2.37e-06  9.90e-01  
 15  +3.1360e-01  +3.1360e-01  1.09e-06  5.02e-09  2.36e-07  7.98e-10  2.41e-08  9.90e-01  
 16  +3.1360e-01  +3.1360e-01  1.09e-08  5.02e-11  2.36e-09  7.98e-12  2.41e-10  9.90e-01  
 17  +3.1360e-01  +3.1360e-01  1.09e-10  5.02e-13  2.36e-11  8.00e-14  2.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.4882ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:07 PM: Optimal value: 3.136e-01
(CVXPY) Oct 06 04:02:07 PM: Compilation took 1.167e-02 seconds
(CVXPY) Oct 06 04:02:07 PM: Solver (including time spent in interface) took 1.236e-02 seconds
Iteration: 13, Objective: 0.3136
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:07 PM: Your problem has 366 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:07 PM: Finished problem compilation (took 1.020e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 366
  constraints   = 616
  nnz(P)        = 0
  nnz(A)        = 4487
  cones (total) = 1
    : Nonnegative = 1,  numel = 616

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9832e-01  +2.5179e+02  2.51e+02  9.42e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.6631e-01  +5.3894e+01  5.33e+01  4.05e-01  1.35e+01  3.88e-03  5.60e-01  6.03e-01  
  2  +5.1813e-01  +6.2320e+00  5.71e+00  1.06e-01  4.59e+00  1.61e-02  2.16e-01  9.90e-01  
  3  +5.0188e-01  +1.9975e+00  1.50e+00  2.84e-02  1.38e+00  5.58e-03  7.16e-02  6.93e-01  
  4  +4.8400e-01  +1.9761e+00  1.49e+00  1.35e-02  6.68e-01  9.06e-03  3.38e-02  6.14e-01  
  5  +4.4669e-01  +1.4572e+00  1.01e+00  6.25e-03  3.07e-01  5.81e-03  1.68e-02  6.55e-01  
  6  +4.2442e-01  +1.1483e+00  7.24e-01  4.37e-03  2.12e-01  2.61e-03  1.25e-02  4.45e-01  
  7  +3.7063e-01  +5.8548e-01  2.15e-01  1.21e-03  5.71e-02  8.58e-05  4.12e-03  8.25e-01  
  8  +3.5633e-01  +5.2123e-01  1.65e-01  8.95e-04  4.22e-02  8.18e-05  3.18e-03  3.87e-01  
  9  +3.4617e-01  +4.7037e-01  1.24e-01  6.50e-04  3.07e-02  6.52e-05  2.40e-03  2.98e-01  
 10  +3.2944e-01  +3.8861e-01  5.92e-02  2.94e-04  1.39e-02  3.63e-05  1.18e-03  6.56e-01  
 11  +3.1591e-01  +3.2347e-01  7.56e-03  3.65e-05  1.72e-03  4.38e-06  1.63e-04  9.05e-01  
 12  +3.1442e-01  +3.1695e-01  2.52e-03  1.20e-05  5.66e-04  1.59e-06  5.54e-05  7.44e-01  
 13  +3.1392e-01  +3.1488e-01  9.66e-04  4.49e-06  2.11e-04  6.40e-07  2.12e-05  7.15e-01  
 14  +3.1361e-01  +3.1364e-01  3.03e-05  1.40e-07  6.60e-06  2.16e-08  6.69e-07  9.90e-01  
 15  +3.1360e-01  +3.1360e-01  3.04e-07  1.41e-09  6.62e-08  2.17e-10  6.71e-09  9.90e-01  
 16  +3.1360e-01  +3.1360e-01  3.04e-09  1.41e-11  6.62e-10  2.17e-12  6.71e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6484ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:07 PM: Optimal value: 3.136e-01
(CVXPY) Oct 06 04:02:07 PM: Compilation took 1.020e-02 seconds
(CVXPY) Oct 06 04:02:07 PM: Solver (including time spent in interface) took 1.516e-02 seconds
Iteration: 14, Objective: 0.3136
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:02:07 PM: Your problem has 367 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:02:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:02:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:02:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:02:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:02:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:02:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:02:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:02:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:02:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:02:07 PM: Finished problem compilation (took 6.661e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 367
  constraints   = 617
  nnz(P)        = 0
  nnz(A)        = 4494
  cones (total) = 1
    : Nonnegative = 1,  numel = 617

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9832e-01  +2.5179e+02  2.51e+02  9.42e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.6633e-01  +5.3895e+01  5.33e+01  4.06e-01  1.35e+01  3.88e-03  5.59e-01  6.03e-01  
  2  +5.1811e-01  +6.2285e+00  5.71e+00  1.06e-01  4.59e+00  1.60e-02  2.16e-01  9.90e-01  
  3  +5.0185e-01  +1.9896e+00  1.49e+00  2.83e-02  1.37e+00  5.57e-03  7.13e-02  6.94e-01  
  4  +4.8391e-01  +1.9730e+00  1.49e+00  1.34e-02  6.65e-01  9.05e-03  3.37e-02  6.15e-01  
  5  +4.4669e-01  +1.4628e+00  1.02e+00  6.27e-03  3.08e-01  5.83e-03  1.69e-02  6.53e-01  
  6  +4.2417e-01  +1.1419e+00  7.18e-01  4.35e-03  2.11e-01  2.50e-03  1.25e-02  4.54e-01  
  7  +3.7047e-01  +5.8578e-01  2.15e-01  1.21e-03  5.70e-02  1.22e-04  4.12e-03  8.14e-01  
  8  +3.5593e-01  +5.1989e-01  1.64e-01  8.88e-04  4.18e-02  1.03e-04  3.16e-03  3.92e-01  
  9  +3.4561e-01  +4.6796e-01  1.22e-01  6.39e-04  3.01e-02  7.97e-05  2.36e-03  3.01e-01  
 10  +3.2984e-01  +3.9068e-01  6.08e-02  3.03e-04  1.43e-02  4.23e-05  1.21e-03  6.27e-01  
 11  +3.1597e-01  +3.2372e-01  7.75e-03  3.74e-05  1.76e-03  4.82e-06  1.67e-04  9.09e-01  
 12  +3.1446e-01  +3.1711e-01  2.65e-03  1.26e-05  5.94e-04  1.75e-06  5.82e-05  7.39e-01  
 13  +3.1394e-01  +3.1498e-01  1.04e-03  4.84e-06  2.27e-04  7.16e-07  2.28e-05  7.11e-01  
 14  +3.1361e-01  +3.1365e-01  3.63e-05  1.68e-07  7.90e-06  2.63e-08  8.02e-07  9.90e-01  
 15  +3.1360e-01  +3.1360e-01  3.65e-07  1.69e-09  7.94e-08  2.64e-10  8.07e-09  9.90e-01  
 16  +3.1360e-01  +3.1360e-01  3.65e-09  1.69e-11  7.94e-10  2.64e-12  8.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.6464ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:02:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:02:07 PM: Optimal value: 3.136e-01
(CVXPY) Oct 06 04:02:07 PM: Compilation took 6.661e-03 seconds
(CVXPY) Oct 06 04:02:07 PM: Solver (including time spent in interface) took 1.587e-02 seconds
FULL MODEL:
  Accruacy: 0.66
  Our objective: 0.32000000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.97001314163208
Best over terms:
  Our final objective: 0.18
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.18
  Highest accruacy: 0.59
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

