Command:
python test_script.py -s constant_subclass -d 8 -n 1000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.17600000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 8.

Computed total variation: 0.43000000000000005
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:15 PM: Your problem has 517 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:15 PM: Finished problem compilation (took 3.081e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 517
  constraints   = 1017
  nnz(P)        = 0
  nnz(A)        = 5517
  cones (total) = 1
    : Nonnegative = 1,  numel = 1017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9994e-01  +5.0079e+02  5.00e+02  9.55e-01  3.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.8383e-01  +1.0732e+02  1.07e+02  4.03e-01  2.16e+01  3.82e-03  5.62e-01  5.98e-01  
  2  +5.3331e-01  +1.2798e+01  1.23e+01  1.39e-01  9.40e+00  1.49e-02  2.59e-01  9.18e-01  
  3  +5.0599e-01  +3.0877e+00  2.58e+00  5.33e-02  3.50e+00  3.52e-05  2.32e-01  3.99e-01  
  4  +5.0057e-01  +7.6005e-01  2.59e-01  5.74e-03  3.95e-01  9.97e-06  6.73e-02  8.41e-01  
  5  +4.9994e-01  +7.6742e-01  2.67e-01  4.95e-03  3.44e-01  2.37e-05  2.32e-02  7.25e-01  
  6  +4.9115e-01  +7.1891e-01  2.28e-01  7.14e-04  5.04e-02  1.71e-04  2.24e-03  9.13e-01  
  7  +4.6934e-01  +5.5338e-01  8.40e-02  2.10e-04  1.48e-02  2.01e-05  7.67e-04  8.57e-01  
  8  +4.5272e-01  +4.8554e-01  3.28e-02  7.24e-05  5.06e-03  8.92e-06  2.98e-04  7.92e-01  
  9  +4.4563e-01  +4.5653e-01  1.09e-02  2.31e-05  1.62e-03  4.71e-06  1.01e-04  9.90e-01  
 10  +4.4217e-01  +4.4237e-01  2.03e-04  4.28e-07  2.99e-05  7.66e-08  1.92e-06  9.83e-01  
 11  +4.4210e-01  +4.4210e-01  2.03e-06  4.28e-09  2.99e-07  7.66e-10  1.92e-08  9.90e-01  
 12  +4.4210e-01  +4.4210e-01  2.03e-08  4.28e-11  2.99e-09  7.66e-12  1.92e-10  9.90e-01  
 13  +4.4210e-01  +4.4210e-01  2.03e-10  4.28e-13  2.99e-11  7.66e-14  1.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0185ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:15 PM: Optimal value: 4.421e-01
(CVXPY) Oct 06 04:09:15 PM: Compilation took 3.081e-02 seconds
(CVXPY) Oct 06 04:09:15 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:15 PM: Your problem has 527 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:15 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 527
  constraints   = 1027
  nnz(P)        = 0
  nnz(A)        = 6460
  cones (total) = 1
    : Nonnegative = 1,  numel = 1027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +5.0123e+02  5.01e+02  9.55e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.8269e-01  +1.0749e+02  1.07e+02  4.06e-01  2.23e+01  3.81e-03  5.65e-01  5.97e-01  
  2  +5.3166e-01  +1.2475e+01  1.19e+01  1.36e-01  9.43e+00  1.53e-02  2.55e-01  9.37e-01  
  3  +5.0505e-01  +2.8934e+00  2.39e+00  4.97e-02  3.38e+00  3.58e-05  2.18e-01  5.04e-01  
  4  +5.0132e-01  +1.1934e+00  6.92e-01  1.52e-02  1.07e+00  1.54e-05  1.06e-01  5.61e-01  
  5  +4.9891e-01  +8.8245e-01  3.84e-01  6.04e-03  4.38e-01  2.99e-05  2.23e-02  8.75e-01  
  6  +4.8766e-01  +7.9337e-01  3.06e-01  1.32e-03  9.67e-02  1.15e-04  3.89e-03  8.31e-01  
  7  +4.8135e-01  +7.4574e-01  2.64e-01  9.53e-04  7.00e-02  1.10e-04  2.82e-03  3.30e-01  
  8  +4.7828e-01  +7.2694e-01  2.49e-01  8.73e-04  6.38e-02  9.00e-05  2.70e-03  3.26e-01  
  9  +4.5811e-01  +5.8013e-01  1.22e-01  3.24e-04  2.36e-02  4.66e-05  1.02e-03  9.20e-01  
 10  +4.5533e-01  +5.7191e-01  1.17e-01  2.64e-04  1.92e-02  5.21e-05  7.97e-04  4.10e-01  
 11  +4.4938e-01  +5.4814e-01  9.88e-02  1.78e-04  1.29e-02  5.34e-05  5.32e-04  3.95e-01  
 12  +4.3890e-01  +5.1043e-01  7.15e-02  1.57e-04  1.14e-02  2.65e-05  5.20e-04  2.35e-01  
 13  +4.2049e-01  +4.3597e-01  1.55e-02  2.48e-05  1.79e-03  1.25e-05  7.96e-05  8.87e-01  
 14  +4.1242e-01  +4.1305e-01  6.23e-04  9.97e-07  7.20e-05  3.90e-07  3.34e-06  9.85e-01  
 15  +4.1210e-01  +4.1211e-01  6.25e-06  9.99e-09  7.21e-07  3.89e-09  3.36e-08  9.90e-01  
 16  +4.1210e-01  +4.1210e-01  6.25e-08  9.99e-11  7.21e-09  3.89e-11  3.36e-10  9.90e-01  
 17  +4.1210e-01  +4.1210e-01  6.25e-10  9.99e-13  7.21e-11  3.89e-13  3.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.4269ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:15 PM: Optimal value: 4.121e-01
(CVXPY) Oct 06 04:09:15 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:15 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 2, Objective: 0.4121
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:15 PM: Your problem has 537 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:15 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 537
  constraints   = 1037
  nnz(P)        = 0
  nnz(A)        = 6966
  cones (total) = 1
    : Nonnegative = 1,  numel = 1037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0112e+02  5.01e+02  9.56e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.8200e-01  +1.0752e+02  1.07e+02  4.08e-01  2.23e+01  3.81e-03  5.67e-01  5.96e-01  
  2  +5.3082e-01  +1.2313e+01  1.18e+01  1.34e-01  9.26e+00  1.55e-02  2.52e-01  9.48e-01  
  3  +5.0459e-01  +2.7946e+00  2.29e+00  4.80e-02  3.28e+00  3.65e-05  2.08e-01  5.68e-01  
  4  +5.0097e-01  +1.1237e+00  6.23e-01  1.36e-02  9.67e-01  1.54e-05  8.59e-02  6.26e-01  
  5  +4.9210e-01  +1.3879e+00  8.96e-01  4.52e-03  3.35e-01  1.26e-04  1.25e-02  9.87e-01  
  6  +4.7477e-01  +9.7181e-01  4.97e-01  1.60e-03  1.18e-01  1.10e-04  4.56e-03  6.64e-01  
  7  +4.6337e-01  +8.6143e-01  3.98e-01  1.04e-03  7.68e-02  1.09e-04  3.00e-03  3.95e-01  
  8  +4.5738e-01  +8.2244e-01  3.65e-01  7.48e-04  5.51e-02  1.42e-04  2.13e-03  4.80e-01  
  9  +4.5671e-01  +7.9639e-01  3.40e-01  7.34e-04  5.40e-02  1.32e-04  2.10e-03  1.04e-01  
 10  +4.4123e-01  +6.8885e-01  2.48e-01  4.87e-04  3.57e-02  9.95e-05  1.44e-03  3.81e-01  
 11  +4.1712e-01  +5.3491e-01  1.18e-01  2.22e-04  1.62e-02  4.84e-05  7.06e-04  6.47e-01  
 12  +3.9621e-01  +4.3045e-01  3.42e-02  6.31e-05  4.57e-03  1.41e-05  2.16e-04  7.67e-01  
 13  +3.8678e-01  +3.8948e-01  2.70e-03  4.95e-06  3.57e-04  1.24e-06  1.80e-05  9.57e-01  
 14  +3.8577e-01  +3.8581e-01  4.45e-05  8.16e-08  5.89e-06  2.20e-08  3.01e-07  9.89e-01  
 15  +3.8575e-01  +3.8575e-01  4.45e-07  8.16e-10  5.89e-08  2.20e-10  3.02e-09  9.90e-01  
 16  +3.8575e-01  +3.8575e-01  4.45e-09  8.16e-12  5.89e-10  2.20e-12  3.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.9378ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:16 PM: Optimal value: 3.858e-01
(CVXPY) Oct 06 04:09:16 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:09:16 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 3, Objective: 0.3858
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:16 PM: Your problem has 547 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:16 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 547
  constraints   = 1047
  nnz(P)        = 0
  nnz(A)        = 7380
  cones (total) = 1
    : Nonnegative = 1,  numel = 1047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +5.0147e+02  5.01e+02  9.56e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.8108e-01  +1.0763e+02  1.07e+02  4.09e-01  2.23e+01  3.81e-03  5.68e-01  5.96e-01  
  2  +5.3007e-01  +1.2165e+01  1.16e+01  1.33e-01  9.11e+00  1.56e-02  2.50e-01  9.57e-01  
  3  +5.0436e-01  +2.7465e+00  2.24e+00  4.71e-02  3.23e+00  3.73e-05  2.01e-01  6.08e-01  
  4  +5.0098e-01  +1.2106e+00  7.10e-01  1.54e-02  1.10e+00  1.76e-05  8.64e-02  5.98e-01  
  5  +4.9136e-01  +1.1890e+00  6.98e-01  3.81e-03  2.84e-01  1.14e-04  1.04e-02  9.82e-01  
  6  +4.7061e-01  +8.8300e-01  4.12e-01  1.26e-03  9.36e-02  1.25e-04  3.51e-03  6.95e-01  
  7  +4.6068e-01  +8.4162e-01  3.81e-01  8.89e-04  6.60e-02  1.47e-04  2.49e-03  3.93e-01  
  8  +4.4592e-01  +7.4119e-01  2.95e-01  6.21e-04  4.59e-02  1.26e-04  1.79e-03  4.78e-01  
  9  +4.1072e-01  +5.2312e-01  1.12e-01  2.31e-04  1.69e-02  5.04e-05  7.48e-04  9.87e-01  
 10  +3.8276e-01  +4.0486e-01  2.21e-02  4.29e-05  3.10e-03  7.63e-06  1.55e-04  8.44e-01  
 11  +3.7520e-01  +3.7720e-01  2.01e-03  3.80e-06  2.74e-04  9.63e-07  1.50e-05  9.76e-01  
 12  +3.7441e-01  +3.7443e-01  2.12e-05  4.00e-08  2.89e-06  9.90e-09  1.60e-07  9.89e-01  
 13  +3.7440e-01  +3.7440e-01  2.12e-07  4.00e-10  2.89e-08  9.90e-11  1.60e-09  9.90e-01  
 14  +3.7440e-01  +3.7440e-01  2.12e-09  4.00e-12  2.89e-10  9.90e-13  1.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.66ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:16 PM: Optimal value: 3.744e-01
(CVXPY) Oct 06 04:09:16 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:16 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 4, Objective: 0.3744
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:16 PM: Your problem has 557 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:16 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 557
  constraints   = 1057
  nnz(P)        = 0
  nnz(A)        = 7600
  cones (total) = 1
    : Nonnegative = 1,  numel = 1057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0197e+02  5.01e+02  9.56e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.7936e-01  +1.0780e+02  1.07e+02  4.11e-01  2.21e+01  3.81e-03  5.69e-01  5.96e-01  
  2  +5.2911e-01  +1.1987e+01  1.15e+01  1.30e-01  8.88e+00  1.58e-02  2.45e-01  9.70e-01  
  3  +5.0405e-01  +2.6865e+00  2.18e+00  4.59e-02  3.15e+00  3.89e-05  1.90e-01  6.67e-01  
  4  +5.0077e-01  +1.2729e+00  7.72e-01  1.64e-02  1.17e+00  2.11e-05  7.91e-02  6.03e-01  
  5  +4.8776e-01  +1.2262e+00  7.38e-01  3.47e-03  2.61e-01  1.37e-04  9.21e-03  9.62e-01  
  6  +4.6788e-01  +9.5211e-01  4.84e-01  1.51e-03  1.13e-01  1.31e-04  4.14e-03  6.06e-01  
  7  +4.5382e-01  +8.8131e-01  4.27e-01  9.88e-04  7.33e-02  1.52e-04  2.74e-03  4.19e-01  
  8  +4.4558e-01  +7.8525e-01  3.40e-01  8.52e-04  6.29e-02  1.26e-04  2.44e-03  4.24e-01  
  9  +4.0377e-01  +5.4907e-01  1.45e-01  2.96e-04  2.17e-02  5.41e-05  9.30e-04  7.05e-01  
 10  +3.7779e-01  +4.2569e-01  4.79e-02  9.58e-05  6.95e-03  1.86e-05  3.30e-04  7.19e-01  
 11  +3.7140e-01  +4.0010e-01  2.87e-02  5.55e-05  4.03e-03  1.23e-05  1.99e-04  5.02e-01  
 12  +3.6538e-01  +3.7497e-01  9.58e-03  1.83e-05  1.33e-03  5.70e-06  6.87e-05  9.90e-01  
 13  +3.6179e-01  +3.6203e-01  2.33e-04  4.41e-07  3.22e-05  1.24e-07  1.71e-06  9.77e-01  
 14  +3.6170e-01  +3.6170e-01  2.33e-06  4.41e-09  3.22e-07  1.24e-09  1.72e-08  9.90e-01  
 15  +3.6170e-01  +3.6170e-01  2.33e-08  4.41e-11  3.22e-09  1.24e-11  1.72e-10  9.90e-01  
 16  +3.6170e-01  +3.6170e-01  2.33e-10  4.42e-13  3.22e-11  1.24e-13  1.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.8878ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:16 PM: Optimal value: 3.617e-01
(CVXPY) Oct 06 04:09:16 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:16 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 5, Objective: 0.3617
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:16 PM: Your problem has 567 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:16 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 567
  constraints   = 1067
  nnz(P)        = 0
  nnz(A)        = 7737
  cones (total) = 1
    : Nonnegative = 1,  numel = 1067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0178e+02  5.01e+02  9.56e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7784e-01  +1.0777e+02  1.07e+02  4.11e-01  2.20e+01  3.82e-03  5.68e-01  5.96e-01  
  2  +5.2806e-01  +1.1768e+01  1.12e+01  1.27e-01  8.61e+00  1.60e-02  2.39e-01  9.83e-01  
  3  +5.0371e-01  +2.6078e+00  2.10e+00  4.42e-02  3.04e+00  4.06e-05  1.77e-01  7.33e-01  
  4  +5.0044e-01  +1.3651e+00  8.65e-01  1.75e-02  1.25e+00  2.84e-05  7.13e-02  6.23e-01  
  5  +4.8334e-01  +1.2550e+00  7.72e-01  3.19e-03  2.40e-01  1.72e-04  8.27e-03  9.38e-01  
  6  +4.5940e-01  +1.0294e+00  5.70e-01  1.53e-03  1.14e-01  1.85e-04  4.08e-03  5.43e-01  
  7  +4.4537e-01  +9.2482e-01  4.79e-01  1.14e-03  8.48e-02  1.75e-04  3.15e-03  3.70e-01  
  8  +4.1548e-01  +7.0937e-01  2.94e-01  6.64e-04  4.86e-02  1.10e-04  1.97e-03  5.80e-01  
  9  +3.7832e-01  +4.9946e-01  1.21e-01  2.59e-04  1.88e-02  4.01e-05  8.59e-04  6.32e-01  
 10  +3.5764e-01  +4.0190e-01  4.43e-02  9.19e-05  6.64e-03  1.63e-05  3.35e-04  7.02e-01  
 11  +3.4679e-01  +3.5457e-01  7.79e-03  1.59e-05  1.15e-03  4.09e-06  6.32e-05  9.90e-01  
 12  +3.4405e-01  +3.4417e-01  1.24e-04  2.52e-07  1.83e-05  5.79e-08  1.04e-06  9.85e-01  
 13  +3.4400e-01  +3.4400e-01  1.24e-06  2.52e-09  1.83e-07  5.78e-10  1.04e-08  9.90e-01  
 14  +3.4400e-01  +3.4400e-01  1.24e-08  2.52e-11  1.83e-09  5.78e-12  1.04e-10  9.90e-01  
 15  +3.4400e-01  +3.4400e-01  1.24e-10  2.52e-13  1.83e-11  5.79e-14  1.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.6819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:16 PM: Optimal value: 3.440e-01
(CVXPY) Oct 06 04:09:16 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:09:16 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 6, Objective: 0.3440
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:16 PM: Your problem has 577 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:16 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 577
  constraints   = 1077
  nnz(P)        = 0
  nnz(A)        = 7885
  cones (total) = 1
    : Nonnegative = 1,  numel = 1077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0174e+02  5.01e+02  9.56e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7570e-01  +1.0790e+02  1.07e+02  4.13e-01  2.18e+01  3.82e-03  5.69e-01  5.95e-01  
  2  +5.2690e-01  +1.1764e+01  1.12e+01  1.25e-01  8.48e+00  1.63e-02  2.36e-01  9.90e-01  
  3  +5.0422e-01  +2.5513e+00  2.05e+00  4.34e-02  3.02e+00  4.75e-05  1.48e-01  8.12e-01  
  4  +4.9971e-01  +1.3782e+00  8.78e-01  1.54e-02  1.12e+00  4.66e-05  4.85e-02  7.05e-01  
  5  +4.8250e-01  +1.2570e+00  7.75e-01  3.29e-03  2.48e-01  1.94e-04  8.40e-03  8.60e-01  
  6  +4.5426e-01  +1.0040e+00  5.50e-01  1.44e-03  1.07e-01  2.11e-04  3.83e-03  6.19e-01  
  7  +4.4392e-01  +9.1726e-01  4.73e-01  1.27e-03  9.40e-02  1.74e-04  3.49e-03  2.34e-01  
  8  +4.0078e-01  +6.4874e-01  2.48e-01  5.73e-04  4.17e-02  9.21e-05  1.74e-03  7.68e-01  
  9  +3.7871e-01  +5.3666e-01  1.58e-01  3.53e-04  2.56e-02  5.79e-05  1.16e-03  3.98e-01  
 10  +3.6010e-01  +4.4660e-01  8.65e-02  1.89e-04  1.36e-02  3.49e-05  6.67e-04  5.74e-01  
 11  +3.4834e-01  +3.9286e-01  4.45e-02  9.55e-05  6.87e-03  1.82e-05  3.61e-04  5.27e-01  
 12  +3.3625e-01  +3.3921e-01  2.96e-03  6.24e-06  4.50e-04  1.00e-06  2.60e-05  9.47e-01  
 13  +3.3522e-01  +3.3526e-01  4.44e-05  9.30e-08  6.72e-06  1.48e-08  3.96e-07  9.85e-01  
 14  +3.3520e-01  +3.3520e-01  4.43e-07  9.30e-10  6.71e-08  1.48e-10  3.96e-09  9.90e-01  
 15  +3.3520e-01  +3.3520e-01  4.43e-09  9.30e-12  6.71e-10  1.48e-12  3.97e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.7817ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:16 PM: Optimal value: 3.352e-01
(CVXPY) Oct 06 04:09:16 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:09:16 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 7, Objective: 0.3352
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:16 PM: Your problem has 587 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:16 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 587
  constraints   = 1087
  nnz(P)        = 0
  nnz(A)        = 7994
  cones (total) = 1
    : Nonnegative = 1,  numel = 1087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0173e+02  5.01e+02  9.57e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.7520e-01  +1.0784e+02  1.07e+02  4.13e-01  2.16e+01  3.82e-03  5.68e-01  5.96e-01  
  2  +5.2644e-01  +1.1798e+01  1.13e+01  1.25e-01  8.38e+00  1.63e-02  2.35e-01  9.90e-01  
  3  +5.0439e-01  +2.4222e+00  1.92e+00  4.07e-02  2.86e+00  5.01e-05  1.30e-01  8.61e-01  
  4  +4.9945e-01  +1.4340e+00  9.35e-01  1.40e-02  1.03e+00  6.36e-05  3.98e-02  7.33e-01  
  5  +4.8189e-01  +1.2714e+00  7.89e-01  3.11e-03  2.34e-01  2.23e-04  7.83e-03  8.26e-01  
  6  +4.5701e-01  +1.0645e+00  6.08e-01  1.59e-03  1.19e-01  2.41e-04  4.15e-03  5.46e-01  
  7  +4.2319e-01  +7.9874e-01  3.76e-01  9.84e-04  7.19e-02  1.36e-04  2.83e-03  7.46e-01  
  8  +3.7844e-01  +5.4773e-01  1.69e-01  3.87e-04  2.79e-02  5.39e-05  1.25e-03  6.05e-01  
  9  +3.5674e-01  +4.4623e-01  8.95e-02  2.00e-04  1.43e-02  3.02e-05  7.00e-04  5.29e-01  
 10  +3.3744e-01  +3.5769e-01  2.02e-02  4.45e-05  3.18e-03  6.72e-06  1.73e-04  7.98e-01  
 11  +3.3182e-01  +3.3323e-01  1.42e-03  3.09e-06  2.21e-04  4.26e-07  1.28e-05  9.30e-01  
 12  +3.3140e-01  +3.3156e-01  1.57e-04  3.42e-07  2.44e-05  4.90e-08  1.44e-06  8.97e-01  
 13  +3.3135e-01  +3.3135e-01  1.58e-06  3.44e-09  2.45e-07  4.92e-10  1.44e-08  9.90e-01  
 14  +3.3135e-01  +3.3135e-01  1.58e-08  3.44e-11  2.45e-09  4.92e-12  1.44e-10  9.90e-01  
 15  +3.3135e-01  +3.3135e-01  1.59e-10  3.45e-13  2.46e-11  4.95e-14  1.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.2114ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:16 PM: Optimal value: 3.314e-01
(CVXPY) Oct 06 04:09:16 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:09:16 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 8, Objective: 0.3314
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:17 PM: Your problem has 597 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:17 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 597
  constraints   = 1097
  nnz(P)        = 0
  nnz(A)        = 8136
  cones (total) = 1
    : Nonnegative = 1,  numel = 1097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9947e-01  +5.0178e+02  5.01e+02  9.57e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.7396e-01  +1.0789e+02  1.07e+02  4.14e-01  2.15e+01  3.82e-03  5.68e-01  5.96e-01  
  2  +5.2589e-01  +1.1879e+01  1.14e+01  1.24e-01  8.29e+00  1.64e-02  2.34e-01  9.90e-01  
  3  +5.0453e-01  +2.2324e+00  1.73e+00  3.62e-02  2.57e+00  5.37e-05  1.09e-01  9.14e-01  
  4  +4.9798e-01  +1.6144e+00  1.12e+00  1.01e-02  7.49e-01  1.31e-04  2.56e-02  8.34e-01  
  5  +4.7896e-01  +1.3423e+00  8.63e-01  3.04e-03  2.28e-01  2.64e-04  7.62e-03  7.14e-01  
  6  +4.6677e-01  +1.2495e+00  7.83e-01  2.29e-03  1.70e-01  2.76e-04  5.81e-03  3.08e-01  
  7  +4.4970e-01  +1.1121e+00  6.62e-01  1.73e-03  1.28e-01  2.73e-04  4.60e-03  6.04e-01  
  8  +4.0676e-01  +7.5420e-01  3.47e-01  8.49e-04  6.15e-02  1.20e-04  2.52e-03  6.90e-01  
  9  +3.7249e-01  +5.6159e-01  1.89e-01  4.38e-04  3.14e-02  6.25e-05  1.45e-03  5.09e-01  
 10  +3.4557e-01  +4.2578e-01  8.02e-02  1.80e-04  1.28e-02  2.80e-05  6.71e-04  6.47e-01  
 11  +3.2906e-01  +3.4762e-01  1.86e-02  4.09e-05  2.90e-03  6.66e-06  1.71e-04  8.18e-01  
 12  +3.2398e-01  +3.2520e-01  1.22e-03  2.66e-06  1.88e-04  3.90e-07  1.19e-05  9.34e-01  
 13  +3.2361e-01  +3.2362e-01  1.64e-05  3.57e-08  2.52e-06  5.41e-09  1.62e-07  9.90e-01  
 14  +3.2360e-01  +3.2360e-01  1.64e-07  3.57e-10  2.52e-08  5.41e-11  1.62e-09  9.90e-01  
 15  +3.2360e-01  +3.2360e-01  1.64e-09  3.57e-12  2.52e-10  5.41e-13  1.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.3904ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:17 PM: Optimal value: 3.236e-01
(CVXPY) Oct 06 04:09:17 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:17 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 9, Objective: 0.3236
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:17 PM: Your problem has 607 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:17 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 607
  constraints   = 1107
  nnz(P)        = 0
  nnz(A)        = 8223
  cones (total) = 1
    : Nonnegative = 1,  numel = 1107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0183e+02  5.01e+02  9.57e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.7195e-01  +1.0789e+02  1.07e+02  4.14e-01  2.13e+01  3.83e-03  5.67e-01  5.96e-01  
  2  +5.2475e-01  +1.2009e+01  1.15e+01  1.23e-01  8.19e+00  1.66e-02  2.32e-01  9.90e-01  
  3  +5.0465e-01  +1.8845e+00  1.38e+00  2.72e-02  1.97e+00  6.10e-05  7.59e-02  9.71e-01  
  4  +5.0363e-01  +2.1015e+00  1.60e+00  1.61e-02  1.20e+00  1.35e-04  3.89e-02  5.57e-01  
  5  +4.9167e-01  +1.9294e+00  1.44e+00  5.58e-03  4.22e-01  3.04e-04  1.33e-02  7.25e-01  
  6  +4.5642e-01  +1.1253e+00  6.69e-01  2.08e-03  1.54e-01  1.87e-04  5.39e-03  7.71e-01  
  7  +4.4288e-01  +1.0781e+00  6.35e-01  1.63e-03  1.20e-01  2.19e-04  4.30e-03  3.36e-01  
  8  +4.2061e-01  +8.9867e-01  4.78e-01  1.30e-03  9.46e-02  1.57e-04  3.70e-03  3.73e-01  
  9  +3.6450e-01  +5.5131e-01  1.87e-01  4.36e-04  3.10e-02  5.42e-05  1.43e-03  7.19e-01  
 10  +3.4702e-01  +4.7201e-01  1.25e-01  2.87e-04  2.03e-02  4.21e-05  1.03e-03  4.42e-01  
 11  +3.3019e-01  +3.9390e-01  6.37e-02  1.43e-04  1.01e-02  2.41e-05  5.66e-04  5.95e-01  
 12  +3.1494e-01  +3.2226e-01  7.32e-03  1.63e-05  1.14e-03  2.37e-06  7.28e-05  8.82e-01  
 13  +3.1288e-01  +3.1316e-01  2.76e-04  6.13e-07  4.29e-05  8.38e-08  2.85e-06  9.62e-01  
 14  +3.1280e-01  +3.1280e-01  2.77e-06  6.15e-09  4.30e-07  8.40e-10  2.86e-08  9.90e-01  
 15  +3.1280e-01  +3.1280e-01  2.77e-08  6.16e-11  4.30e-09  8.41e-12  2.86e-10  9.90e-01  
 16  +3.1280e-01  +3.1280e-01  2.77e-10  6.15e-13  4.30e-11  8.41e-14  2.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.2471ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:17 PM: Optimal value: 3.128e-01
(CVXPY) Oct 06 04:09:17 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:17 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 10, Objective: 0.3128
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:17 PM: Your problem has 617 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:17 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 617
  constraints   = 1117
  nnz(P)        = 0
  nnz(A)        = 8340
  cones (total) = 1
    : Nonnegative = 1,  numel = 1117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0174e+02  5.01e+02  9.57e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.7075e-01  +1.0791e+02  1.07e+02  4.15e-01  2.12e+01  3.83e-03  5.66e-01  5.96e-01  
  2  +5.2412e-01  +1.2074e+01  1.16e+01  1.23e-01  8.12e+00  1.67e-02  2.31e-01  9.90e-01  
  3  +5.0468e-01  +1.7278e+00  1.22e+00  2.30e-02  1.68e+00  6.51e-05  6.27e-02  9.82e-01  
  4  +5.0466e-01  +1.8399e+00  1.34e+00  1.61e-02  1.20e+00  1.11e-04  3.96e-02  4.20e-01  
  5  +5.0047e-01  +2.2328e+00  1.73e+00  1.04e-02  7.78e-01  2.84e-04  2.46e-02  7.62e-01  
  6  +4.8440e-01  +1.7867e+00  1.30e+00  4.25e-03  3.20e-01  3.84e-04  1.02e-02  6.10e-01  
  7  +4.6360e-01  +1.4529e+00  9.89e-01  2.92e-03  2.17e-01  3.25e-04  7.34e-03  4.24e-01  
  8  +4.4831e-01  +1.3228e+00  8.74e-01  2.23e-03  1.64e-01  3.41e-04  5.75e-03  4.05e-01  
  9  +4.2890e-01  +1.0756e+00  6.47e-01  1.76e-03  1.28e-01  2.28e-04  4.83e-03  3.94e-01  
 10  +3.7913e-01  +6.7736e-01  2.98e-01  7.04e-04  5.02e-02  1.01e-04  2.18e-03  6.55e-01  
 11  +3.6216e-01  +5.7982e-01  2.18e-01  5.08e-04  3.60e-02  7.71e-05  1.67e-03  3.09e-01  
 12  +3.3702e-01  +4.3966e-01  1.03e-01  2.35e-04  1.65e-02  3.69e-05  8.65e-04  5.46e-01  
 13  +3.2469e-01  +3.7607e-01  5.14e-02  1.16e-04  8.11e-03  1.93e-05  4.57e-04  5.46e-01  
 14  +3.1829e-01  +3.4339e-01  2.51e-02  5.55e-05  3.88e-03  1.08e-05  2.32e-04  7.61e-01  
 15  +3.1145e-01  +3.1290e-01  1.45e-03  3.17e-06  2.22e-04  5.61e-07  1.41e-05  9.53e-01  
 16  +3.1101e-01  +3.1103e-01  2.23e-05  4.88e-08  3.41e-06  8.51e-09  2.20e-07  9.85e-01  
 17  +3.1100e-01  +3.1100e-01  2.23e-07  4.88e-10  3.41e-08  8.51e-11  2.20e-09  9.90e-01  
 18  +3.1100e-01  +3.1100e-01  2.23e-09  4.88e-12  3.41e-10  8.51e-13  2.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.4188ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:17 PM: Optimal value: 3.110e-01
(CVXPY) Oct 06 04:09:17 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:09:17 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 11, Objective: 0.3110
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:17 PM: Your problem has 627 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:17 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 627
  constraints   = 1127
  nnz(P)        = 0
  nnz(A)        = 8452
  cones (total) = 1
    : Nonnegative = 1,  numel = 1127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0175e+02  5.01e+02  9.57e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.7030e-01  +1.0786e+02  1.07e+02  4.16e-01  2.11e+01  3.83e-03  5.66e-01  5.96e-01  
  2  +5.2391e-01  +1.2087e+01  1.16e+01  1.23e-01  8.01e+00  1.67e-02  2.31e-01  9.90e-01  
  3  +5.0549e-01  +2.1218e+00  1.62e+00  2.91e-02  2.10e+00  7.85e-04  7.60e-02  8.85e-01  
  4  +5.0513e-01  +2.2129e+00  1.71e+00  2.06e-02  1.52e+00  1.15e-03  5.01e-02  3.74e-01  
  5  +5.0077e-01  +2.5851e+00  2.08e+00  1.33e-02  9.88e-01  1.43e-03  3.15e-02  7.37e-01  
  6  +4.8534e-01  +2.0466e+00  1.56e+00  5.25e-03  3.93e-01  1.92e-03  1.25e-02  6.12e-01  
  7  +4.6380e-01  +1.6242e+00  1.16e+00  3.36e-03  2.48e-01  1.33e-03  8.41e-03  4.55e-01  
  8  +4.4382e-01  +1.3419e+00  8.98e-01  2.27e-03  1.66e-01  8.99e-04  5.91e-03  4.61e-01  
  9  +4.1473e-01  +9.5916e-01  5.44e-01  1.42e-03  1.03e-01  2.32e-04  4.02e-03  6.71e-01  
 10  +3.6479e-01  +5.8447e-01  2.20e-01  5.18e-04  3.66e-02  7.86e-05  1.68e-03  6.60e-01  
 11  +3.4558e-01  +4.8334e-01  1.38e-01  3.19e-04  2.24e-02  5.58e-05  1.12e-03  5.23e-01  
 12  +3.2806e-01  +3.9260e-01  6.45e-02  1.46e-04  1.02e-02  2.68e-05  5.59e-04  5.80e-01  
 13  +3.1935e-01  +3.4897e-01  2.96e-02  6.59e-05  4.60e-03  1.31e-05  2.69e-04  6.86e-01  
 14  +3.1181e-01  +3.1439e-01  2.58e-03  5.68e-06  3.95e-04  1.02e-06  2.50e-05  9.30e-01  
 15  +3.1102e-01  +3.1107e-01  5.33e-05  1.17e-07  8.17e-06  1.93e-08  5.30e-07  9.80e-01  
 16  +3.1100e-01  +3.1100e-01  5.33e-07  1.17e-09  8.16e-08  1.92e-10  5.30e-09  9.90e-01  
 17  +3.1100e-01  +3.1100e-01  5.33e-09  1.17e-11  8.17e-10  1.93e-12  5.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.959ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:17 PM: Optimal value: 3.110e-01
(CVXPY) Oct 06 04:09:17 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:09:17 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 12, Objective: 0.3110
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:17 PM: Your problem has 637 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:17 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 637
  constraints   = 1137
  nnz(P)        = 0
  nnz(A)        = 8592
  cones (total) = 1
    : Nonnegative = 1,  numel = 1137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0176e+02  5.01e+02  9.58e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.6985e-01  +1.0787e+02  1.07e+02  4.17e-01  2.09e+01  3.83e-03  5.66e-01  5.96e-01  
  2  +5.2332e-01  +1.2103e+01  1.16e+01  1.23e-01  7.94e+00  1.67e-02  2.31e-01  9.90e-01  
  3  +5.0608e-01  +2.3788e+00  1.87e+00  3.19e-02  2.29e+00  1.38e-03  8.08e-02  8.22e-01  
  4  +5.0586e-01  +2.4545e+00  1.95e+00  2.44e-02  1.78e+00  1.84e-03  5.89e-02  2.98e-01  
  5  +5.0279e-01  +2.3530e+00  1.85e+00  2.22e-02  1.60e+00  1.31e-03  5.69e-02  2.30e-01  
  6  +4.9045e-01  +2.0421e+00  1.55e+00  5.99e-03  4.48e-01  3.30e-03  1.43e-02  7.61e-01  
  7  +4.6952e-01  +1.5418e+00  1.07e+00  3.82e-03  2.81e-01  1.63e-03  9.64e-03  4.71e-01  
  8  +4.5322e-01  +1.3961e+00  9.43e-01  2.58e-03  1.89e-01  1.48e-03  6.64e-03  4.36e-01  
  9  +4.3672e-01  +1.2142e+00  7.77e-01  2.00e-03  1.45e-01  1.00e-03  5.34e-03  3.37e-01  
 10  +3.9530e-01  +7.7638e-01  3.81e-01  9.91e-04  7.03e-02  8.80e-06  2.99e-03  9.37e-01  
 11  +3.4923e-01  +4.8676e-01  1.38e-01  3.29e-04  2.30e-02  1.26e-05  1.14e-03  6.76e-01  
 12  +3.3651e-01  +4.2849e-01  9.20e-02  2.14e-04  1.49e-02  1.57e-05  7.81e-04  4.49e-01  
 13  +3.2214e-01  +3.6135e-01  3.92e-02  8.87e-05  6.18e-03  7.83e-06  3.50e-04  6.00e-01  
 14  +3.1398e-01  +3.2423e-01  1.03e-02  2.27e-05  1.58e-03  3.63e-06  9.49e-05  8.89e-01  
 15  +3.1125e-01  +3.1275e-01  1.50e-03  3.31e-06  2.30e-04  6.52e-07  1.42e-05  9.90e-01  
 16  +3.1075e-01  +3.1078e-01  3.63e-05  8.00e-08  5.57e-06  1.56e-08  3.47e-07  9.77e-01  
 17  +3.1073e-01  +3.1073e-01  3.64e-07  8.02e-10  5.58e-08  1.56e-10  3.47e-09  9.90e-01  
 18  +3.1073e-01  +3.1073e-01  3.64e-09  8.02e-12  5.58e-10  1.56e-12  3.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.8153ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:17 PM: Optimal value: 3.107e-01
(CVXPY) Oct 06 04:09:17 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:09:17 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 13, Objective: 0.3107
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:18 PM: Your problem has 647 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:18 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 647
  constraints   = 1147
  nnz(P)        = 0
  nnz(A)        = 8699
  cones (total) = 1
    : Nonnegative = 1,  numel = 1147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0180e+02  5.01e+02  9.58e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.6878e-01  +1.0795e+02  1.07e+02  4.17e-01  2.08e+01  3.84e-03  5.65e-01  5.96e-01  
  2  +5.2260e-01  +1.2141e+01  1.16e+01  1.22e-01  7.86e+00  1.68e-02  2.30e-01  9.90e-01  
  3  +5.0665e-01  +2.7044e+00  2.20e+00  3.51e-02  2.50e+00  2.10e-03  8.60e-02  7.57e-01  
  4  +5.0614e-01  +2.7322e+00  2.23e+00  2.71e-02  1.97e+00  2.66e-03  6.46e-02  2.68e-01  
  5  +5.0274e-01  +2.5887e+00  2.09e+00  2.45e-02  1.76e+00  1.80e-03  6.20e-02  2.49e-01  
  6  +4.8945e-01  +2.1315e+00  1.64e+00  6.64e-03  4.94e-01  4.06e-03  1.59e-02  7.55e-01  
  7  +4.6545e-01  +1.5153e+00  1.05e+00  3.89e-03  2.84e-01  1.72e-03  9.93e-03  5.45e-01  
  8  +4.5088e-01  +1.4493e+00  9.98e-01  2.64e-03  1.92e-01  1.53e-03  6.81e-03  5.61e-01  
  9  +4.2936e-01  +1.1340e+00  7.05e-01  1.96e-03  1.41e-01  5.87e-04  5.36e-03  4.56e-01  
 10  +3.7708e-01  +6.6802e-01  2.91e-01  7.02e-04  4.95e-02  1.64e-04  2.17e-03  6.83e-01  
 11  +3.6130e-01  +5.8071e-01  2.19e-01  5.23e-04  3.67e-02  1.22e-04  1.71e-03  2.99e-01  
 12  +3.3467e-01  +4.3353e-01  9.89e-02  2.31e-04  1.61e-02  5.19e-05  8.43e-04  5.81e-01  
 13  +3.2042e-01  +3.6040e-01  4.00e-02  9.16e-05  6.37e-03  2.06e-05  3.60e-04  6.67e-01  
 14  +3.1386e-01  +3.2688e-01  1.30e-02  2.94e-05  2.04e-03  6.24e-06  1.21e-04  9.90e-01  
 15  +3.1058e-01  +3.1300e-01  2.42e-03  5.47e-06  3.79e-04  1.13e-06  2.33e-05  8.38e-01  
 16  +3.0986e-01  +3.1002e-01  1.64e-04  3.69e-07  2.55e-05  6.99e-08  1.59e-06  9.90e-01  
 17  +3.0980e-01  +3.0980e-01  1.69e-06  3.80e-09  2.63e-07  7.21e-10  1.64e-08  9.90e-01  
 18  +3.0980e-01  +3.0980e-01  1.69e-08  3.81e-11  2.64e-09  7.21e-12  1.64e-10  9.90e-01  
 19  +3.0980e-01  +3.0980e-01  1.69e-10  3.81e-13  2.64e-11  7.22e-14  1.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.8039ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:18 PM: Optimal value: 3.098e-01
(CVXPY) Oct 06 04:09:18 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:09:18 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 14, Objective: 0.3098
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:18 PM: Your problem has 657 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:18 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 657
  constraints   = 1157
  nnz(P)        = 0
  nnz(A)        = 8805
  cones (total) = 1
    : Nonnegative = 1,  numel = 1157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0173e+02  5.01e+02  9.58e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.6837e-01  +1.0790e+02  1.07e+02  4.18e-01  2.07e+01  3.84e-03  5.65e-01  5.96e-01  
  2  +5.2239e-01  +1.2180e+01  1.17e+01  1.22e-01  7.77e+00  1.68e-02  2.29e-01  9.90e-01  
  3  +5.0680e-01  +2.7917e+00  2.28e+00  3.56e-02  2.53e+00  2.30e-03  8.66e-02  7.41e-01  
  4  +5.0621e-01  +2.8040e+00  2.30e+00  2.76e-02  1.99e+00  2.87e-03  6.56e-02  2.59e-01  
  5  +5.0265e-01  +2.6501e+00  2.15e+00  2.48e-02  1.77e+00  1.91e-03  6.27e-02  2.61e-01  
  6  +4.8770e-01  +2.1447e+00  1.66e+00  6.16e-03  4.58e-01  4.57e-03  1.47e-02  7.75e-01  
  7  +4.6545e-01  +1.6500e+00  1.18e+00  3.88e-03  2.84e-01  2.61e-03  9.73e-03  4.74e-01  
  8  +4.5001e-01  +1.4932e+00  1.04e+00  2.78e-03  2.02e-01  1.98e-03  7.10e-03  4.71e-01  
  9  +4.2738e-01  +1.1550e+00  7.28e-01  2.04e-03  1.46e-01  7.17e-04  5.57e-03  4.54e-01  
 10  +3.7533e-01  +6.8254e-01  3.07e-01  7.55e-04  5.31e-02  2.05e-04  2.33e-03  6.66e-01  
 11  +3.5764e-01  +5.7984e-01  2.22e-01  5.39e-04  3.76e-02  1.43e-04  1.77e-03  3.30e-01  
 12  +3.3126e-01  +4.2958e-01  9.83e-02  2.33e-04  1.62e-02  5.87e-05  8.59e-04  5.97e-01  
 13  +3.1732e-01  +3.5717e-01  3.98e-02  9.28e-05  6.41e-03  2.25e-05  3.70e-04  6.59e-01  
 14  +3.1068e-01  +3.2353e-01  1.28e-02  2.94e-05  2.03e-03  6.00e-06  1.25e-04  9.90e-01  
 15  +3.0706e-01  +3.0817e-01  1.12e-03  2.55e-06  1.76e-04  4.90e-07  1.13e-05  9.19e-01  
 16  +3.0671e-01  +3.0673e-01  1.97e-05  4.49e-08  3.09e-06  8.04e-09  2.01e-07  9.88e-01  
 17  +3.0670e-01  +3.0670e-01  1.97e-07  4.49e-10  3.09e-08  8.04e-11  2.01e-09  9.90e-01  
 18  +3.0670e-01  +3.0670e-01  1.97e-09  4.49e-12  3.09e-10  8.04e-13  2.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.4649ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:18 PM: Optimal value: 3.067e-01
(CVXPY) Oct 06 04:09:18 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:09:18 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 15, Objective: 0.3067
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:18 PM: Your problem has 662 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:18 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 662
  constraints   = 1162
  nnz(P)        = 0
  nnz(A)        = 8851
  cones (total) = 1
    : Nonnegative = 1,  numel = 1162

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0173e+02  5.01e+02  9.58e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.6829e-01  +1.0788e+02  1.07e+02  4.18e-01  2.06e+01  3.84e-03  5.65e-01  5.97e-01  
  2  +5.2231e-01  +1.2176e+01  1.17e+01  1.22e-01  7.72e+00  1.68e-02  2.29e-01  9.90e-01  
  3  +5.0677e-01  +2.7939e+00  2.29e+00  3.55e-02  2.50e+00  2.34e-03  8.61e-02  7.40e-01  
  4  +5.0619e-01  +2.8089e+00  2.30e+00  2.76e-02  1.98e+00  2.91e-03  6.55e-02  2.55e-01  
  5  +5.0266e-01  +2.6631e+00  2.16e+00  2.49e-02  1.77e+00  1.95e-03  6.27e-02  2.62e-01  
  6  +4.8786e-01  +2.1644e+00  1.68e+00  6.29e-03  4.66e-01  4.60e-03  1.50e-02  7.70e-01  
  7  +4.6462e-01  +1.6264e+00  1.16e+00  3.86e-03  2.82e-01  2.42e-03  9.74e-03  4.98e-01  
  8  +4.4963e-01  +1.4868e+00  1.04e+00  2.78e-03  2.02e-01  1.84e-03  7.13e-03  4.86e-01  
  9  +4.2115e-01  +1.0652e+00  6.44e-01  1.83e-03  1.31e-01  3.37e-04  5.14e-03  6.24e-01  
 10  +3.6586e-01  +6.0989e-01  2.44e-01  5.98e-04  4.18e-02  9.75e-05  1.91e-03  6.87e-01  
 11  +3.5412e-01  +5.5076e-01  1.97e-01  4.75e-04  3.30e-02  8.26e-05  1.58e-03  2.83e-01  
 12  +3.2818e-01  +4.1161e-01  8.34e-02  1.97e-04  1.36e-02  3.57e-05  7.35e-04  6.30e-01  
 13  +3.1579e-01  +3.4931e-01  3.35e-02  7.80e-05  5.37e-03  1.43e-05  3.14e-04  6.29e-01  
 14  +3.0928e-01  +3.1761e-01  8.33e-03  1.91e-05  1.31e-03  3.68e-06  8.18e-05  9.55e-01  
 15  +3.0688e-01  +3.0741e-01  5.33e-04  1.22e-06  8.37e-05  2.13e-07  5.42e-06  9.69e-01  
 16  +3.0670e-01  +3.0671e-01  7.28e-06  1.66e-08  1.14e-06  2.85e-09  7.45e-08  9.88e-01  
 17  +3.0670e-01  +3.0670e-01  7.30e-08  1.67e-10  1.15e-08  2.86e-11  7.47e-10  9.90e-01  
 18  +3.0670e-01  +3.0670e-01  7.31e-10  1.67e-12  1.15e-10  2.87e-13  7.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.7536ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:18 PM: Optimal value: 3.067e-01
(CVXPY) Oct 06 04:09:18 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:18 PM: Solver (including time spent in interface) took 3.126e-02 seconds
Iteration: 16, Objective: 0.3067
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:18 PM: Your problem has 671 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:18 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 671
  constraints   = 1171
  nnz(P)        = 0
  nnz(A)        = 8964
  cones (total) = 1
    : Nonnegative = 1,  numel = 1171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0174e+02  5.01e+02  9.58e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.6810e-01  +1.0787e+02  1.07e+02  4.19e-01  2.05e+01  3.84e-03  5.64e-01  5.97e-01  
  2  +5.2215e-01  +1.2188e+01  1.17e+01  1.22e-01  7.63e+00  1.68e-02  2.29e-01  9.90e-01  
  3  +5.0678e-01  +2.8170e+00  2.31e+00  3.53e-02  2.48e+00  2.42e-03  8.53e-02  7.35e-01  
  4  +5.0620e-01  +2.8355e+00  2.33e+00  2.77e-02  1.98e+00  2.99e-03  6.56e-02  2.48e-01  
  5  +5.0261e-01  +2.6992e+00  2.20e+00  2.49e-02  1.76e+00  2.01e-03  6.25e-02  2.74e-01  
  6  +4.8745e-01  +2.1871e+00  1.70e+00  6.31e-03  4.66e-01  4.69e-03  1.51e-02  7.69e-01  
  7  +4.6474e-01  +1.6688e+00  1.20e+00  3.93e-03  2.86e-01  2.65e-03  9.89e-03  4.80e-01  
  8  +4.4960e-01  +1.5203e+00  1.07e+00  2.83e-03  2.05e-01  2.08e-03  7.26e-03  4.58e-01  
  9  +4.2539e-01  +1.1492e+00  7.24e-01  2.02e-03  1.44e-01  6.93e-04  5.54e-03  4.74e-01  
 10  +3.7385e-01  +6.8144e-01  3.08e-01  7.58e-04  5.30e-02  2.04e-04  2.35e-03  6.55e-01  
 11  +3.5716e-01  +5.8462e-01  2.27e-01  5.53e-04  3.84e-02  1.46e-04  1.82e-03  3.15e-01  
 12  +3.3074e-01  +4.3438e-01  1.04e-01  2.47e-04  1.70e-02  6.11e-05  9.09e-04  5.91e-01  
 13  +3.1482e-01  +3.5223e-01  3.74e-02  8.74e-05  6.00e-03  2.07e-05  3.55e-04  6.62e-01  
 14  +3.0739e-01  +3.1589e-01  8.50e-03  1.96e-05  1.34e-03  4.19e-06  8.55e-05  8.53e-01  
 15  +3.0544e-01  +3.0710e-01  1.65e-03  3.79e-06  2.60e-04  7.00e-07  1.72e-05  9.55e-01  
 16  +3.0491e-01  +3.0495e-01  3.63e-05  8.30e-08  5.69e-06  1.47e-08  3.81e-07  9.79e-01  
 17  +3.0490e-01  +3.0490e-01  3.63e-07  8.31e-10  5.69e-08  1.47e-10  3.82e-09  9.90e-01  
 18  +3.0490e-01  +3.0490e-01  3.64e-09  8.32e-12  5.70e-10  1.47e-12  3.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.0702ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:18 PM: Optimal value: 3.049e-01
(CVXPY) Oct 06 04:09:18 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:09:18 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 17, Objective: 0.3049
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:18 PM: Your problem has 672 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:18 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 672
  constraints   = 1172
  nnz(P)        = 0
  nnz(A)        = 8978
  cones (total) = 1
    : Nonnegative = 1,  numel = 1172

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0174e+02  5.01e+02  9.58e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.6809e-01  +1.0788e+02  1.07e+02  4.19e-01  2.05e+01  3.84e-03  5.64e-01  5.97e-01  
  2  +5.2213e-01  +1.2187e+01  1.17e+01  1.22e-01  7.62e+00  1.68e-02  2.29e-01  9.90e-01  
  3  +5.0677e-01  +2.8187e+00  2.31e+00  3.53e-02  2.47e+00  2.43e-03  8.53e-02  7.35e-01  
  4  +5.0620e-01  +2.8365e+00  2.33e+00  2.77e-02  1.98e+00  3.00e-03  6.55e-02  2.47e-01  
  5  +5.0260e-01  +2.7006e+00  2.20e+00  2.49e-02  1.76e+00  2.01e-03  6.25e-02  2.74e-01  
  6  +4.8742e-01  +2.1876e+00  1.70e+00  6.30e-03  4.66e-01  4.70e-03  1.51e-02  7.69e-01  
  7  +4.6437e-01  +1.6633e+00  1.20e+00  3.91e-03  2.84e-01  2.64e-03  9.83e-03  4.85e-01  
  8  +4.4965e-01  +1.5172e+00  1.07e+00  2.84e-03  2.06e-01  2.03e-03  7.28e-03  4.58e-01  
  9  +4.2525e-01  +1.1454e+00  7.20e-01  2.02e-03  1.44e-01  6.65e-04  5.54e-03  4.83e-01  
 10  +3.7250e-01  +6.7049e-01  2.98e-01  7.33e-04  5.12e-02  1.88e-04  2.28e-03  6.68e-01  
 11  +3.5708e-01  +5.8328e-01  2.26e-01  5.50e-04  3.82e-02  1.40e-04  1.81e-03  2.98e-01  
 12  +3.3173e-01  +4.4029e-01  1.09e-01  2.59e-04  1.78e-02  6.26e-05  9.51e-04  5.56e-01  
 13  +3.1499e-01  +3.5330e-01  3.83e-02  8.98e-05  6.16e-03  2.08e-05  3.65e-04  6.59e-01  
 14  +3.0712e-01  +3.1438e-01  7.27e-03  1.68e-05  1.15e-03  3.35e-06  7.37e-05  9.23e-01  
 15  +3.0541e-01  +3.0703e-01  1.62e-03  3.73e-06  2.55e-04  7.11e-07  1.69e-05  8.45e-01  
 16  +3.0491e-01  +3.0494e-01  3.30e-05  7.58e-08  5.19e-06  1.38e-08  3.49e-07  9.80e-01  
 17  +3.0490e-01  +3.0490e-01  3.31e-07  7.59e-10  5.20e-08  1.38e-10  3.49e-09  9.90e-01  
 18  +3.0490e-01  +3.0490e-01  3.31e-09  7.60e-12  5.20e-10  1.38e-12  3.50e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.4599ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:18 PM: Optimal value: 3.049e-01
(CVXPY) Oct 06 04:09:18 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:18 PM: Solver (including time spent in interface) took 3.126e-02 seconds
FULL MODEL:
  Accruacy: 0.646
  Our objective: 0.292

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.176)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x4 = 1 AND x7 = 0)                                                        <-- (term's our objective: 0.044)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.01)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 8.507787466049194
Best over terms:
  Our final objective: 0.176
    Its accruacy: 0.588
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.176
  Highest accruacy: 0.588
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

