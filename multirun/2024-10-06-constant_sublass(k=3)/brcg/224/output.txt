Command:
python test_script.py -s constant_subclass -d 6 -n 1000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.122
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 6.

Computed total variation: 0.21999999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:33 PM: Your problem has 513 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:33 PM: Finished problem compilation (took 4.912e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 513
  constraints   = 1013
  nnz(P)        = 0
  nnz(A)        = 4513
  cones (total) = 1
    : Nonnegative = 1,  numel = 1013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9989e-01  +5.0071e+02  5.00e+02  9.53e-01  3.06e+01  1.00e+00  1.00e+00   ------   
  1  +5.9281e-01  +1.0326e+02  1.03e+02  3.71e-01  1.83e+01  3.92e-03  5.27e-01  6.27e-01  
  2  +5.4052e-01  +1.3790e+01  1.32e+01  1.30e-01  8.03e+00  1.16e-02  2.39e-01  8.39e-01  
  3  +5.0615e-01  +2.9938e+00  2.49e+00  5.06e-02  2.98e+00  2.32e-05  2.25e-01  2.66e-01  
  4  +5.0033e-01  +6.9254e-01  1.92e-01  4.19e-03  2.59e-01  8.50e-06  5.89e-02  9.04e-01  
  5  +4.9987e-01  +6.2521e-01  1.25e-01  2.54e-03  1.58e-01  1.24e-05  1.68e-02  7.86e-01  
  6  +4.9266e-01  +6.1666e-01  1.24e-01  3.90e-04  2.46e-02  1.37e-04  1.24e-03  9.50e-01  
  7  +4.8021e-01  +5.3125e-01  5.10e-02  1.28e-04  8.05e-03  3.25e-05  4.49e-04  7.71e-01  
  8  +4.6821e-01  +4.8006e-01  1.18e-02  2.44e-05  1.53e-03  4.21e-06  9.83e-05  9.08e-01  
  9  +4.6470e-01  +4.6638e-01  1.68e-03  3.33e-06  2.09e-04  7.79e-07  1.39e-05  9.90e-01  
 10  +4.6411e-01  +4.6413e-01  1.87e-05  3.71e-08  2.33e-06  8.59e-09  1.56e-07  9.89e-01  
 11  +4.6410e-01  +4.6410e-01  1.87e-07  3.71e-10  2.33e-08  8.59e-11  1.56e-09  9.90e-01  
 12  +4.6410e-01  +4.6410e-01  1.87e-09  3.71e-12  2.33e-10  8.60e-13  1.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1855ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:33 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:33 PM: Optimal value: 4.641e-01
(CVXPY) Oct 06 03:58:33 PM: Compilation took 4.912e-02 seconds
(CVXPY) Oct 06 03:58:33 PM: Solver (including time spent in interface) took 7.581e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:34 PM: Your problem has 523 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 1023
  nnz(P)        = 0
  nnz(A)        = 5365
  cones (total) = 1
    : Nonnegative = 1,  numel = 1023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9966e-01  +5.0136e+02  5.01e+02  9.54e-01  3.17e+01  1.00e+00  1.01e+00   ------   
  1  +5.9146e-01  +1.0352e+02  1.03e+02  3.74e-01  1.89e+01  3.91e-03  5.31e-01  6.26e-01  
  2  +5.3880e-01  +1.3437e+01  1.29e+01  1.28e-01  8.06e+00  1.19e-02  2.36e-01  8.57e-01  
  3  +5.0517e-01  +2.7994e+00  2.29e+00  4.70e-02  2.87e+00  2.31e-05  2.16e-01  3.39e-01  
  4  +5.0125e-01  +1.1181e+00  6.17e-01  1.34e-02  8.44e-01  1.07e-05  1.09e-01  5.61e-01  
  5  +4.9970e-01  +7.3032e-01  2.31e-01  4.54e-03  2.90e-01  1.20e-05  2.35e-02  8.55e-01  
  6  +4.8979e-01  +6.9772e-01  2.08e-01  8.27e-04  5.42e-02  9.03e-05  2.45e-03  9.14e-01  
  7  +4.8277e-01  +6.5487e-01  1.72e-01  5.20e-04  3.40e-02  8.63e-05  1.55e-03  4.72e-01  
  8  +4.7682e-01  +6.2535e-01  1.49e-01  3.56e-04  2.33e-02  7.63e-05  1.06e-03  6.32e-01  
  9  +4.7065e-01  +6.0385e-01  1.33e-01  2.65e-04  1.73e-02  7.47e-05  7.98e-04  4.65e-01  
 10  +4.5861e-01  +5.4617e-01  8.76e-02  1.76e-04  1.14e-02  4.22e-05  5.52e-04  7.85e-01  
 11  +4.3538e-01  +4.5638e-01  2.10e-02  3.63e-05  2.35e-03  8.51e-06  1.23e-04  8.80e-01  
 12  +4.2753e-01  +4.2828e-01  7.45e-04  1.26e-06  8.14e-05  3.80e-07  4.45e-06  9.90e-01  
 13  +4.2720e-01  +4.2721e-01  7.48e-06  1.26e-08  8.16e-07  3.81e-09  4.48e-08  9.90e-01  
 14  +4.2720e-01  +4.2720e-01  7.48e-08  1.26e-10  8.16e-09  3.81e-11  4.48e-10  9.90e-01  
 15  +4.2720e-01  +4.2720e-01  7.48e-10  1.26e-12  8.16e-11  3.81e-13  4.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.2791ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:34 PM: Optimal value: 4.272e-01
(CVXPY) Oct 06 03:58:34 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:58:34 PM: Solver (including time spent in interface) took 1.530e-02 seconds
Iteration: 2, Objective: 0.4272
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:34 PM: Your problem has 533 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Finished problem compilation (took 4.921e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 1033
  nnz(P)        = 0
  nnz(A)        = 5847
  cones (total) = 1
    : Nonnegative = 1,  numel = 1033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0153e+02  5.01e+02  9.54e-01  3.19e+01  1.00e+00  1.01e+00   ------   
  1  +5.9041e-01  +1.0357e+02  1.03e+02  3.76e-01  1.90e+01  3.91e-03  5.32e-01  6.26e-01  
  2  +5.3779e-01  +1.3223e+01  1.27e+01  1.25e-01  7.89e+00  1.21e-02  2.32e-01  8.68e-01  
  3  +5.0456e-01  +2.6783e+00  2.17e+00  4.48e-02  2.75e+00  2.30e-05  2.08e-01  3.94e-01  
  4  +5.0129e-01  +1.2328e+00  7.32e-01  1.57e-02  9.95e-01  1.18e-05  1.06e-01  5.29e-01  
  5  +4.9849e-01  +1.0346e+00  5.36e-01  6.90e-03  4.48e-01  3.62e-05  2.27e-02  9.60e-01  
  6  +4.8868e-01  +9.1409e-01  4.25e-01  1.94e-03  1.28e-01  9.24e-05  5.69e-03  7.61e-01  
  7  +4.8265e-01  +8.4911e-01  3.66e-01  1.31e-03  8.68e-02  9.91e-05  3.86e-03  5.12e-01  
  8  +4.7389e-01  +7.8230e-01  3.08e-01  8.91e-04  5.87e-02  9.79e-05  2.65e-03  3.74e-01  
  9  +4.6541e-01  +7.3500e-01  2.70e-01  6.55e-04  4.31e-02  9.64e-05  1.98e-03  3.05e-01  
 10  +4.5544e-01  +6.4724e-01  1.92e-01  4.86e-04  3.19e-02  7.34e-05  1.54e-03  7.84e-01  
 11  +4.3455e-01  +5.4665e-01  1.12e-01  2.44e-04  1.60e-02  4.33e-05  8.22e-04  5.92e-01  
 12  +4.2987e-01  +5.2206e-01  9.22e-02  1.95e-04  1.27e-02  4.26e-05  6.69e-04  5.91e-01  
 13  +4.1235e-01  +4.4553e-01  3.32e-02  6.65e-05  4.32e-03  1.38e-05  2.48e-04  6.56e-01  
 14  +4.0200e-01  +4.0350e-01  1.50e-03  2.88e-06  1.87e-04  5.95e-07  1.16e-05  9.90e-01  
 15  +4.0141e-01  +4.0142e-01  1.53e-05  2.93e-08  1.90e-06  6.05e-09  1.19e-07  9.90e-01  
 16  +4.0140e-01  +4.0140e-01  1.53e-07  2.93e-10  1.90e-08  6.05e-11  1.19e-09  9.90e-01  
 17  +4.0140e-01  +4.0140e-01  1.53e-09  2.93e-12  1.90e-10  6.06e-13  1.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.5481ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:34 PM: Optimal value: 4.014e-01
(CVXPY) Oct 06 03:58:34 PM: Compilation took 4.921e-03 seconds
(CVXPY) Oct 06 03:58:34 PM: Solver (including time spent in interface) took 1.554e-02 seconds
Iteration: 3, Objective: 0.4014
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:34 PM: Your problem has 543 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Finished problem compilation (took 1.085e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 543
  constraints   = 1043
  nnz(P)        = 0
  nnz(A)        = 6074
  cones (total) = 1
    : Nonnegative = 1,  numel = 1043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0146e+02  5.01e+02  9.54e-01  3.19e+01  1.00e+00  1.01e+00   ------   
  1  +5.8991e-01  +1.0355e+02  1.03e+02  3.76e-01  1.88e+01  3.91e-03  5.31e-01  6.26e-01  
  2  +5.3738e-01  +1.3130e+01  1.26e+01  1.24e-01  7.74e+00  1.21e-02  2.29e-01  8.72e-01  
  3  +5.0442e-01  +2.6499e+00  2.15e+00  4.43e-02  2.71e+00  2.31e-05  2.05e-01  4.11e-01  
  4  +5.0138e-01  +1.2995e+00  7.98e-01  1.71e-02  1.08e+00  1.24e-05  1.09e-01  5.01e-01  
  5  +4.9815e-01  +1.0282e+00  5.30e-01  6.53e-03  4.24e-01  3.92e-05  2.10e-02  9.83e-01  
  6  +4.8721e-01  +9.0846e-01  4.21e-01  1.81e-03  1.19e-01  1.02e-04  5.21e-03  7.56e-01  
  7  +4.7814e-01  +8.2687e-01  3.49e-01  1.05e-03  6.91e-02  1.19e-04  3.02e-03  6.87e-01  
  8  +4.6074e-01  +7.1728e-01  2.57e-01  6.44e-04  4.23e-02  9.92e-05  1.94e-03  6.89e-01  
  9  +4.2860e-01  +5.4253e-01  1.14e-01  2.43e-04  1.58e-02  4.22e-05  8.11e-04  6.75e-01  
 10  +4.0494e-01  +4.3494e-01  3.00e-02  6.09e-05  3.94e-03  1.15e-05  2.28e-04  7.98e-01  
 11  +4.0237e-01  +4.2453e-01  2.22e-02  4.40e-05  2.85e-03  9.18e-06  1.66e-04  3.89e-01  
 12  +4.0142e-01  +4.2075e-01  1.93e-02  3.87e-05  2.51e-03  8.16e-06  1.48e-04  2.52e-01  
 13  +4.0105e-01  +4.1857e-01  1.75e-02  3.39e-05  2.20e-03  8.92e-06  1.29e-04  6.49e-01  
 14  +3.9586e-01  +3.9893e-01  3.07e-03  5.92e-06  3.83e-04  1.71e-06  2.32e-05  9.90e-01  
 15  +3.9471e-01  +3.9475e-01  3.92e-05  7.53e-08  4.88e-06  2.14e-08  2.98e-07  9.90e-01  
 16  +3.9470e-01  +3.9470e-01  3.92e-07  7.53e-10  4.88e-08  2.14e-10  2.98e-09  9.90e-01  
 17  +3.9470e-01  +3.9470e-01  3.92e-09  7.54e-12  4.88e-10  2.15e-12  2.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.8195ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:34 PM: Optimal value: 3.947e-01
(CVXPY) Oct 06 03:58:34 PM: Compilation took 1.085e-02 seconds
(CVXPY) Oct 06 03:58:34 PM: Solver (including time spent in interface) took 9.207e-03 seconds
Iteration: 4, Objective: 0.3947
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:34 PM: Your problem has 553 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Finished problem compilation (took 1.005e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 553
  constraints   = 1053
  nnz(P)        = 0
  nnz(A)        = 6273
  cones (total) = 1
    : Nonnegative = 1,  numel = 1053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0146e+02  5.01e+02  9.54e-01  3.18e+01  1.00e+00  1.01e+00   ------   
  1  +5.8941e-01  +1.0362e+02  1.03e+02  3.78e-01  1.87e+01  3.91e-03  5.31e-01  6.25e-01  
  2  +5.3673e-01  +1.2986e+01  1.24e+01  1.23e-01  7.62e+00  1.22e-02  2.28e-01  8.79e-01  
  3  +5.0431e-01  +2.6287e+00  2.12e+00  4.40e-02  2.69e+00  2.35e-05  2.02e-01  4.31e-01  
  4  +5.0116e-01  +1.2435e+00  7.42e-01  1.59e-02  1.00e+00  1.25e-05  9.83e-02  5.46e-01  
  5  +4.9568e-01  +1.2331e+00  7.37e-01  5.87e-03  3.85e-01  6.35e-05  1.73e-02  9.66e-01  
  6  +4.7920e-01  +9.4518e-01  4.66e-01  1.62e-03  1.07e-01  1.02e-04  4.72e-03  7.33e-01  
  7  +4.7100e-01  +8.8619e-01  4.15e-01  1.10e-03  7.22e-02  1.24e-04  3.18e-03  4.68e-01  
  8  +4.6777e-01  +8.5506e-01  3.87e-01  9.35e-04  6.15e-02  1.35e-04  2.73e-03  3.21e-01  
  9  +4.4995e-01  +6.6438e-01  2.14e-01  5.74e-04  3.74e-02  7.37e-05  1.84e-03  8.89e-01  
 10  +4.1809e-01  +5.0376e-01  8.57e-02  1.85e-04  1.20e-02  2.94e-05  6.51e-04  6.89e-01  
 11  +4.0215e-01  +4.3196e-01  2.98e-02  6.16e-05  3.98e-03  1.26e-05  2.37e-04  8.05e-01  
 12  +3.9431e-01  +3.9892e-01  4.61e-03  9.39e-06  6.06e-04  1.99e-06  3.83e-05  8.80e-01  
 13  +3.9364e-01  +3.9623e-01  2.60e-03  5.12e-06  3.31e-04  1.21e-06  2.07e-05  5.69e-01  
 14  +3.9354e-01  +3.9579e-01  2.25e-03  4.58e-06  2.95e-04  9.77e-07  1.92e-05  2.44e-01  
 15  +3.9350e-01  +3.9562e-01  2.12e-03  4.32e-06  2.79e-04  9.41e-07  1.80e-05  1.82e-01  
 16  +3.9336e-01  +3.9514e-01  1.79e-03  3.50e-06  2.26e-04  8.61e-07  1.42e-05  4.09e-01  
 17  +3.9276e-01  +3.9291e-01  1.55e-04  3.03e-07  1.96e-05  7.83e-08  1.23e-06  9.90e-01  
 18  +3.9270e-01  +3.9270e-01  1.56e-06  3.05e-09  1.97e-07  7.88e-10  1.24e-08  9.90e-01  
 19  +3.9270e-01  +3.9270e-01  1.56e-08  3.05e-11  1.97e-09  7.88e-12  1.24e-10  9.90e-01  
 20  +3.9270e-01  +3.9270e-01  1.60e-10  3.13e-13  2.02e-11  8.08e-14  1.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.5283ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:34 PM: Optimal value: 3.927e-01
(CVXPY) Oct 06 03:58:34 PM: Compilation took 1.005e-02 seconds
(CVXPY) Oct 06 03:58:34 PM: Solver (including time spent in interface) took 1.511e-02 seconds
Iteration: 5, Objective: 0.3927
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:34 PM: Your problem has 554 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Finished problem compilation (took 5.775e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 554
  constraints   = 1054
  nnz(P)        = 0
  nnz(A)        = 6301
  cones (total) = 1
    : Nonnegative = 1,  numel = 1054

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0146e+02  5.01e+02  9.54e-01  3.18e+01  1.00e+00  1.01e+00   ------   
  1  +5.8941e-01  +1.0362e+02  1.03e+02  3.78e-01  1.87e+01  3.91e-03  5.31e-01  6.25e-01  
  2  +5.3668e-01  +1.2976e+01  1.24e+01  1.23e-01  7.61e+00  1.22e-02  2.28e-01  8.79e-01  
  3  +5.0430e-01  +2.6259e+00  2.12e+00  4.40e-02  2.68e+00  2.35e-05  2.02e-01  4.33e-01  
  4  +5.0111e-01  +1.2262e+00  7.25e-01  1.55e-02  9.81e-01  1.26e-05  9.60e-02  5.60e-01  
  5  +4.9421e-01  +1.2516e+00  7.57e-01  5.03e-03  3.30e-01  7.65e-05  1.46e-02  9.85e-01  
  6  +4.7593e-01  +9.1741e-01  4.41e-01  1.45e-03  9.52e-02  9.80e-05  4.26e-03  7.19e-01  
  7  +4.6906e-01  +8.7958e-01  4.11e-01  1.05e-03  6.91e-02  1.21e-04  3.05e-03  3.97e-01  
  8  +4.6606e-01  +8.5362e-01  3.88e-01  9.06e-04  5.96e-02  1.34e-04  2.65e-03  2.91e-01  
  9  +4.5324e-01  +7.0772e-01  2.54e-01  6.61e-04  4.32e-02  9.01e-05  2.07e-03  6.50e-01  
 10  +4.2184e-01  +5.3005e-01  1.08e-01  2.33e-04  1.51e-02  3.74e-05  8.01e-04  6.80e-01  
 11  +4.0192e-01  +4.3221e-01  3.03e-02  6.32e-05  4.08e-03  1.11e-05  2.42e-04  7.83e-01  
 12  +3.9447e-01  +3.9946e-01  4.99e-03  1.02e-05  6.61e-04  2.07e-06  4.15e-05  9.14e-01  
 13  +3.9382e-01  +3.9688e-01  3.06e-03  6.10e-06  3.94e-04  1.38e-06  2.45e-05  5.51e-01  
 14  +3.9360e-01  +3.9607e-01  2.46e-03  5.03e-06  3.24e-04  1.04e-06  2.11e-05  4.21e-01  
 15  +3.9348e-01  +3.9554e-01  2.06e-03  4.20e-06  2.71e-04  8.87e-07  1.75e-05  2.91e-01  
 16  +3.9337e-01  +3.9509e-01  1.72e-03  3.51e-06  2.26e-04  7.67e-07  1.45e-05  3.05e-01  
 17  +3.9312e-01  +3.9426e-01  1.14e-03  2.24e-06  1.44e-04  5.49e-07  9.07e-06  5.33e-01  
 18  +3.9271e-01  +3.9273e-01  1.88e-05  3.67e-08  2.37e-06  9.16e-09  1.50e-07  9.90e-01  
 19  +3.9270e-01  +3.9270e-01  1.88e-07  3.67e-10  2.37e-08  9.16e-11  1.50e-09  9.90e-01  
 20  +3.9270e-01  +3.9270e-01  1.89e-09  3.70e-12  2.39e-10  9.23e-13  1.51e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.0331ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:34 PM: Optimal value: 3.927e-01
(CVXPY) Oct 06 03:58:34 PM: Compilation took 5.775e-03 seconds
(CVXPY) Oct 06 03:58:34 PM: Solver (including time spent in interface) took 1.420e-02 seconds
Iteration: 6, Objective: 0.3927
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:34 PM: Your problem has 557 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:34 PM: Finished problem compilation (took 1.062e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 557
  constraints   = 1057
  nnz(P)        = 0
  nnz(A)        = 6354
  cones (total) = 1
    : Nonnegative = 1,  numel = 1057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0144e+02  5.01e+02  9.55e-01  3.18e+01  1.00e+00  1.01e+00   ------   
  1  +5.8942e-01  +1.0358e+02  1.03e+02  3.78e-01  1.87e+01  3.91e-03  5.31e-01  6.26e-01  
  2  +5.3663e-01  +1.2959e+01  1.24e+01  1.23e-01  7.57e+00  1.22e-02  2.27e-01  8.79e-01  
  3  +5.0429e-01  +2.6216e+00  2.12e+00  4.40e-02  2.68e+00  2.35e-05  2.01e-01  4.35e-01  
  4  +5.0114e-01  +1.2378e+00  7.37e-01  1.58e-02  9.96e-01  1.26e-05  9.69e-02  5.51e-01  
  5  +4.9515e-01  +1.1761e+00  6.81e-01  5.22e-03  3.42e-01  6.34e-05  1.54e-02  9.63e-01  
  6  +4.7748e-01  +9.0048e-01  4.23e-01  1.41e-03  9.30e-02  1.01e-04  4.14e-03  7.39e-01  
  7  +4.7130e-01  +8.7365e-01  4.02e-01  1.04e-03  6.84e-02  1.26e-04  3.01e-03  3.96e-01  
  8  +4.6702e-01  +8.4170e-01  3.75e-01  8.94e-04  5.88e-02  1.32e-04  2.62e-03  2.75e-01  
  9  +4.4858e-01  +6.7565e-01  2.27e-01  5.74e-04  3.74e-02  7.80e-05  1.83e-03  6.90e-01  
 10  +4.1471e-01  +4.9098e-01  7.63e-02  1.64e-04  1.06e-02  2.33e-05  5.87e-04  7.67e-01  
 11  +4.0295e-01  +4.3708e-01  3.41e-02  7.17e-05  4.62e-03  1.22e-05  2.73e-04  6.50e-01  
 12  +3.9516e-01  +4.0285e-01  7.69e-03  1.60e-05  1.03e-03  2.82e-06  6.41e-05  7.89e-01  
 13  +3.9480e-01  +4.0120e-01  6.39e-03  1.30e-05  8.41e-04  2.60e-06  5.21e-05  4.02e-01  
 14  +3.9381e-01  +3.9717e-01  3.36e-03  6.80e-06  4.39e-04  1.40e-06  2.74e-05  5.27e-01  
 15  +3.9294e-01  +3.9358e-01  6.44e-04  1.30e-06  8.38e-05  3.20e-07  5.27e-06  9.90e-01  
 16  +3.9270e-01  +3.9271e-01  8.26e-06  1.67e-08  1.08e-06  4.08e-09  6.77e-08  9.88e-01  
 17  +3.9270e-01  +3.9270e-01  8.27e-08  1.67e-10  1.08e-08  4.08e-11  6.77e-10  9.90e-01  
 18  +3.9270e-01  +3.9270e-01  8.30e-10  1.68e-12  1.08e-10  4.10e-13  6.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.027ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:34 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:34 PM: Optimal value: 3.927e-01
(CVXPY) Oct 06 03:58:34 PM: Compilation took 1.062e-02 seconds
(CVXPY) Oct 06 03:58:34 PM: Solver (including time spent in interface) took 1.524e-02 seconds
FULL MODEL:
  Accruacy: 0.598
  Our objective: 0.19599999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.122)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1)                       <-- (term's our objective: 0.022)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.006)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.324990510940552
Best over terms:
  Our final objective: 0.12200000000000005
    Its accruacy: 0.561
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.12200000000000005
  Highest accruacy: 0.561
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

