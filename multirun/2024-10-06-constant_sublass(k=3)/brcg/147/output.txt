Command:
python test_script.py -s constant_subclass -d 4 -n 5000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.152
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.1528
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:52 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:52 PM: Finished problem compilation (took 4.773e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5008e+03  2.50e+03  9.78e-01  6.04e+01  1.00e+00  1.00e+00   ------   
  1  +6.0813e-01  +4.8463e+02  4.84e+02  3.36e-01  3.36e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5085e-01  +7.5494e+01  7.49e+01  1.37e-01  1.67e+01  8.23e-03  2.27e-01  7.26e-01  
  3  +5.0994e-01  +1.5618e+01  1.51e+01  9.58e-02  1.13e+01  1.68e-05  2.24e-01  7.62e-02  
  4  +5.0004e-01  +1.0565e+00  5.57e-01  5.29e-03  6.39e-01  6.49e-06  1.48e-01  7.82e-01  
  5  +4.9992e-01  +6.4508e-01  1.45e-01  1.37e-03  1.67e-01  3.17e-06  3.00e-02  8.31e-01  
  6  +4.9104e-01  +1.0704e+00  5.79e-01  7.29e-04  8.95e-02  1.50e-04  2.29e-03  9.74e-01  
  7  +4.7471e-01  +7.3316e-01  2.58e-01  1.45e-04  1.78e-02  1.92e-04  4.60e-04  8.11e-01  
  8  +4.6127e-01  +5.3869e-01  7.74e-02  3.93e-05  4.81e-03  3.48e-05  1.34e-04  7.75e-01  
  9  +4.4963e-01  +4.6181e-01  1.22e-02  5.46e-06  6.67e-04  2.91e-06  2.11e-05  9.20e-01  
 10  +4.4540e-01  +4.4571e-01  3.13e-04  1.29e-07  1.58e-05  5.71e-08  5.49e-07  9.81e-01  
 11  +4.4530e-01  +4.4530e-01  3.13e-06  1.29e-09  1.58e-07  5.71e-10  5.50e-09  9.90e-01  
 12  +4.4530e-01  +4.4530e-01  3.13e-08  1.29e-11  1.58e-09  5.76e-12  5.54e-11  9.90e-01  
 13  +4.4530e-01  +4.4530e-01  3.13e-10  1.29e-13  1.58e-11  5.80e-14  5.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.0994ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:52 PM: Optimal value: 4.453e-01
(CVXPY) Oct 06 03:50:52 PM: Compilation took 4.773e-02 seconds
(CVXPY) Oct 06 03:50:52 PM: Solver (including time spent in interface) took 3.208e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4453
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:52 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:52 PM: Finished problem compilation (took 1.020e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22444
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5011e+03  2.50e+03  9.78e-01  6.48e+01  1.00e+00  1.00e+00   ------   
  1  +6.0786e-01  +4.8548e+02  4.85e+02  3.37e-01  3.60e+01  4.09e-03  4.76e-01  6.66e-01  
  2  +5.5041e-01  +7.5079e+01  7.45e+01  1.37e-01  1.78e+01  8.34e-03  2.27e-01  7.30e-01  
  3  +5.0974e-01  +1.5414e+01  1.49e+01  9.53e-02  1.20e+01  1.69e-05  2.25e-01  8.10e-02  
  4  +5.0058e-01  +1.8866e+00  1.39e+00  1.32e-02  1.68e+00  7.44e-06  1.84e-01  4.02e-01  
  5  +5.0008e-01  +7.6472e-01  2.65e-01  2.51e-03  3.26e-01  1.88e-06  5.66e-02  7.35e-01  
  6  +5.0004e-01  +7.8410e-01  2.84e-01  2.67e-03  3.46e-01  2.75e-06  3.51e-02  4.70e-01  
  7  +4.9991e-01  +8.2198e-01  3.22e-01  2.66e-03  3.46e-01  5.22e-06  1.51e-02  7.51e-01  
  8  +4.9268e-01  +7.1286e-01  2.20e-01  1.53e-04  2.02e-02  1.05e-04  4.34e-04  9.73e-01  
  9  +4.9119e-01  +7.0271e-01  2.12e-01  1.29e-04  1.70e-02  9.61e-05  3.60e-04  3.10e-01  
 10  +4.8758e-01  +6.8462e-01  1.97e-01  9.85e-05  1.30e-02  9.58e-05  2.74e-04  3.22e-01  
 11  +4.8055e-01  +6.3924e-01  1.59e-01  7.16e-05  9.42e-03  4.64e-05  2.02e-04  5.83e-01  
 12  +4.7260e-01  +6.0068e-01  1.28e-01  5.32e-05  6.99e-03  2.55e-05  1.53e-04  5.43e-01  
 13  +4.6549e-01  +5.6844e-01  1.03e-01  4.09e-05  5.37e-03  8.40e-06  1.21e-04  9.90e-01  
 14  +4.5864e-01  +5.4338e-01  8.47e-02  3.17e-05  4.16e-03  7.18e-06  9.45e-05  2.65e-01  
 15  +4.4037e-01  +4.7914e-01  3.88e-02  1.27e-05  1.67e-03  4.12e-06  3.92e-05  7.75e-01  
 16  +4.2496e-01  +4.2677e-01  1.81e-03  5.69e-07  7.45e-05  1.61e-07  1.82e-06  9.85e-01  
 17  +4.2411e-01  +4.2413e-01  1.82e-05  5.73e-09  7.50e-07  1.61e-09  1.84e-08  9.90e-01  
 18  +4.2410e-01  +4.2410e-01  1.82e-07  5.73e-11  7.50e-09  1.61e-11  1.84e-10  9.90e-01  
 19  +4.2410e-01  +4.2410e-01  1.82e-09  5.73e-13  7.50e-11  1.62e-13  1.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.3382ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:52 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 03:50:52 PM: Compilation took 1.020e-02 seconds
(CVXPY) Oct 06 03:50:52 PM: Solver (including time spent in interface) took 7.285e-02 seconds
Iteration: 2, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:53 PM: Your problem has 2520 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:53 PM: Finished problem compilation (took 1.412e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2520
  constraints   = 5020
  nnz(P)        = 0
  nnz(A)        = 22607
  cones (total) = 1
    : Nonnegative = 1,  numel = 5020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5011e+03  2.50e+03  9.78e-01  6.48e+01  1.00e+00  1.00e+00   ------   
  1  +6.0768e-01  +4.8588e+02  4.85e+02  3.38e-01  3.60e+01  4.09e-03  4.76e-01  6.66e-01  
  2  +5.5029e-01  +7.4962e+01  7.44e+01  1.37e-01  1.78e+01  8.37e-03  2.27e-01  7.32e-01  
  3  +5.0975e-01  +1.5441e+01  1.49e+01  9.54e-02  1.20e+01  1.70e-05  2.24e-01  8.15e-02  
  4  +5.0058e-01  +1.8763e+00  1.38e+00  1.31e-02  1.67e+00  7.46e-06  1.83e-01  4.06e-01  
  5  +5.0010e-01  +8.0109e-01  3.01e-01  2.86e-03  3.71e-01  2.09e-06  6.26e-02  6.97e-01  
  6  +4.9994e-01  +8.2909e-01  3.29e-01  2.92e-03  3.80e-01  4.75e-06  2.14e-02  8.04e-01  
  7  +4.9676e-01  +7.5732e-01  2.61e-01  4.30e-04  5.67e-02  4.87e-05  1.27e-03  9.90e-01  
  8  +4.9172e-01  +7.1323e-01  2.22e-01  1.83e-04  2.42e-02  8.23e-05  5.24e-04  6.35e-01  
  9  +4.9160e-01  +7.0740e-01  2.16e-01  1.51e-04  2.00e-02  6.87e-05  4.25e-04  4.41e-01  
 10  +4.9132e-01  +6.8843e-01  1.97e-01  1.27e-04  1.68e-02  3.41e-05  3.54e-04  6.43e-01  
 11  +4.8608e-01  +6.6392e-01  1.78e-01  8.83e-05  1.16e-02  3.37e-05  2.47e-04  4.66e-01  
 12  +4.6832e-01  +5.8358e-01  1.15e-01  4.36e-05  5.73e-03  1.90e-05  1.26e-04  7.55e-01  
 13  +4.6638e-01  +5.7737e-01  1.11e-01  4.16e-05  5.47e-03  1.73e-05  1.21e-04  1.78e-01  
 14  +4.3417e-01  +4.5831e-01  2.41e-02  8.07e-06  1.06e-03  9.64e-07  2.55e-05  9.90e-01  
 15  +4.2456e-01  +4.2623e-01  1.67e-03  5.47e-07  7.16e-05  6.40e-08  1.80e-06  9.34e-01  
 16  +4.2382e-01  +4.2385e-01  3.66e-05  1.20e-08  1.57e-06  2.82e-09  4.01e-08  9.87e-01  
 17  +4.2380e-01  +4.2380e-01  3.66e-07  1.20e-10  1.57e-08  2.81e-11  4.02e-10  9.90e-01  
 18  +4.2380e-01  +4.2380e-01  3.66e-09  1.20e-12  1.57e-10  2.81e-13  4.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.1062ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:53 PM: Optimal value: 4.238e-01
(CVXPY) Oct 06 03:50:53 PM: Compilation took 1.412e-02 seconds
(CVXPY) Oct 06 03:50:53 PM: Solver (including time spent in interface) took 5.570e-02 seconds
FULL MODEL:
  Accruacy: 0.5764
  Our objective: 0.15279999999999994

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.152)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.0008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.755109786987305
Best over terms:
  Our final objective: 0.15199999999999997
    Its accruacy: 0.576
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15199999999999997
  Highest accruacy: 0.576
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

