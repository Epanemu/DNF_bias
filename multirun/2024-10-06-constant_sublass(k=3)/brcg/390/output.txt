Command:
python test_script.py -s constant_subclass -d 10 -n 10000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1378
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 10.

Computed total variation: 0.2926
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:27 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:27 PM: Finished problem compilation (took 9.398e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 65021
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +1.0987e+03  1.10e+03  4.43e-01  8.02e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2940e-01  +1.2046e+02  1.20e+02  1.78e-01  4.15e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0839e-01  +3.1290e+01  3.08e+01  1.24e-01  2.90e+01  5.02e-05  2.63e-01  3.41e-01  
  4  +5.0115e-01  +3.4173e+00  2.92e+00  1.99e-02  4.71e+00  6.12e-06  1.70e-01  5.88e-01  
  5  +5.0012e-01  +1.0366e+00  5.36e-01  3.60e-03  8.72e-01  4.55e-05  9.92e-02  9.90e-01  
  6  +4.9999e-01  +6.1668e-01  1.17e-01  7.76e-04  1.89e-01  2.75e-05  1.65e-02  8.47e-01  
  7  +4.9720e-01  +7.2551e-01  2.28e-01  1.97e-04  4.85e-02  1.35e-03  6.08e-04  9.78e-01  
  8  +4.9071e-01  +6.8247e-01  1.92e-01  6.30e-05  1.55e-02  3.14e-03  1.91e-04  6.99e-01  
  9  +4.8458e-01  +6.1466e-01  1.30e-01  4.15e-05  1.02e-02  1.36e-03  1.30e-04  4.55e-01  
 10  +4.7864e-01  +5.7119e-01  9.26e-02  2.65e-05  6.48e-03  6.27e-04  8.53e-05  5.34e-01  
 11  +4.7221e-01  +5.2768e-01  5.55e-02  1.45e-05  3.54e-03  6.70e-06  4.82e-05  9.00e-01  
 12  +4.6525e-01  +4.9266e-01  2.74e-02  6.65e-06  1.63e-03  9.96e-07  2.32e-05  9.90e-01  
 13  +4.5834e-01  +4.6131e-01  2.97e-03  6.72e-07  1.64e-04  9.82e-08  2.55e-06  9.04e-01  
 14  +4.5723e-01  +4.5731e-01  8.28e-05  1.70e-08  4.16e-06  3.14e-09  7.12e-08  9.83e-01  
 15  +4.5720e-01  +4.5720e-01  8.28e-07  1.70e-10  4.15e-08  3.14e-11  7.12e-10  9.90e-01  
 16  +4.5720e-01  +4.5720e-01  8.30e-09  1.70e-12  4.16e-10  3.37e-13  7.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 131.8893ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:27 PM: Optimal value: 4.572e-01
(CVXPY) Oct 06 04:28:27 PM: Compilation took 9.398e-02 seconds
(CVXPY) Oct 06 04:28:27 PM: Solver (including time spent in interface) took 1.407e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4572
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:27 PM: Your problem has 5031 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:27 PM: Finished problem compilation (took 4.686e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5031
  constraints   = 10031
  nnz(P)        = 0
  nnz(A)        = 73397
  cones (total) = 1
    : Nonnegative = 1,  numel = 10031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7819e-01  +1.0990e+03  1.10e+03  4.43e-01  8.26e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2927e-01  +1.2023e+02  1.20e+02  1.78e-01  4.26e+01  1.78e-02  2.90e-01  9.55e-01  
  3  +5.0833e-01  +3.1164e+01  3.07e+01  1.24e-01  2.97e+01  5.03e-05  2.63e-01  3.47e-01  
  4  +5.0112e-01  +3.3418e+00  2.84e+00  1.94e-02  4.73e+00  6.20e-06  1.66e-01  6.06e-01  
  5  +5.0014e-01  +1.0812e+00  5.81e-01  3.90e-03  9.72e-01  4.25e-05  9.00e-02  9.90e-01  
  6  +5.0004e-01  +7.8089e-01  2.81e-01  1.86e-03  4.63e-01  3.29e-05  2.62e-02  9.90e-01  
  7  +4.9910e-01  +7.3095e-01  2.32e-01  3.90e-04  9.87e-02  4.63e-04  1.18e-03  9.76e-01  
  8  +4.9363e-01  +7.0336e-01  2.10e-01  6.59e-05  1.67e-02  2.52e-03  1.86e-04  8.46e-01  
  9  +4.9056e-01  +6.7251e-01  1.82e-01  5.78e-05  1.46e-02  1.57e-03  1.65e-04  2.77e-01  
 10  +4.9105e-01  +6.7342e-01  1.82e-01  5.42e-05  1.37e-02  1.21e-03  1.53e-04  3.02e-01  
 11  +4.9032e-01  +6.6165e-01  1.71e-01  5.11e-05  1.29e-02  6.63e-04  1.44e-04  3.78e-01  
 12  +4.8942e-01  +6.5417e-01  1.65e-01  4.64e-05  1.17e-02  4.18e-04  1.30e-04  3.89e-01  
 13  +4.8895e-01  +6.5154e-01  1.63e-01  4.52e-05  1.14e-02  3.82e-04  1.27e-04  9.43e-02  
 14  +4.8222e-01  +6.1952e-01  1.37e-01  3.07e-05  7.76e-03  3.23e-04  8.66e-05  4.13e-01  
 15  +4.7830e-01  +6.0386e-01  1.26e-01  2.50e-05  6.30e-03  2.86e-04  7.07e-05  2.55e-01  
 16  +4.7818e-01  +6.0341e-01  1.25e-01  2.50e-05  6.30e-03  2.83e-04  7.07e-05  2.72e-03  
 17  +4.6621e-01  +5.5900e-01  9.28e-02  1.94e-05  4.89e-03  2.10e-05  6.27e-05  5.87e-01  
 18  +4.5017e-01  +4.8546e-01  3.53e-02  6.32e-06  1.59e-03  7.00e-06  1.94e-05  9.02e-01  
 19  +4.3323e-01  +4.3796e-01  4.73e-03  7.38e-07  1.86e-04  6.88e-07  2.33e-06  8.97e-01  
 20  +4.3122e-01  +4.3127e-01  4.81e-05  7.51e-09  1.89e-06  6.83e-09  2.38e-08  9.90e-01  
 21  +4.3120e-01  +4.3120e-01  4.81e-07  7.51e-11  1.89e-08  6.83e-11  2.38e-10  9.90e-01  
 22  +4.3120e-01  +4.3120e-01  4.81e-09  7.51e-13  1.89e-10  6.83e-13  2.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 189.6289ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:28 PM: Optimal value: 4.312e-01
(CVXPY) Oct 06 04:28:28 PM: Compilation took 4.686e-02 seconds
(CVXPY) Oct 06 04:28:28 PM: Solver (including time spent in interface) took 2.188e-01 seconds
Iteration: 2, Objective: 0.4312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:28 PM: Your problem has 5041 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:28 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5041
  constraints   = 10041
  nnz(P)        = 0
  nnz(A)        = 75326
  cones (total) = 1
    : Nonnegative = 1,  numel = 10041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7818e-01  +1.0989e+03  1.10e+03  4.43e-01  8.26e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2924e-01  +1.2018e+02  1.20e+02  1.78e-01  4.26e+01  1.78e-02  2.90e-01  9.56e-01  
  3  +5.0832e-01  +3.1135e+01  3.06e+01  1.24e-01  2.97e+01  5.03e-05  2.63e-01  3.49e-01  
  4  +5.0112e-01  +3.3290e+00  2.83e+00  1.93e-02  4.72e+00  6.21e-06  1.65e-01  6.09e-01  
  5  +5.0018e-01  +1.1793e+00  6.79e-01  4.57e-03  1.14e+00  4.16e-05  9.46e-02  9.07e-01  
  6  +5.0008e-01  +8.8394e-01  3.84e-01  2.54e-03  6.34e-01  3.42e-05  3.46e-02  9.90e-01  
  7  +4.9976e-01  +7.5836e-01  2.59e-01  9.74e-04  2.46e-01  1.60e-04  3.52e-03  9.19e-01  
  8  +4.9525e-01  +7.3806e-01  2.43e-01  8.56e-05  2.18e-02  2.11e-03  2.38e-04  9.32e-01  
  9  +4.8933e-01  +6.8286e-01  1.94e-01  5.78e-05  1.46e-02  1.56e-03  1.63e-04  4.41e-01  
 10  +4.8976e-01  +6.8206e-01  1.92e-01  5.19e-05  1.32e-02  9.57e-04  1.44e-04  4.63e-01  
 11  +4.8920e-01  +6.7541e-01  1.86e-01  4.69e-05  1.19e-02  5.93e-04  1.30e-04  4.16e-01  
 12  +4.8341e-01  +6.4308e-01  1.60e-01  3.68e-05  9.31e-03  1.31e-04  1.04e-04  7.19e-01  
 13  +4.7767e-01  +6.1797e-01  1.40e-01  3.04e-05  7.68e-03  6.69e-05  8.64e-05  4.72e-01  
 14  +4.5567e-01  +5.3129e-01  7.56e-02  1.32e-05  3.34e-03  3.10e-05  3.95e-05  6.18e-01  
 15  +4.3639e-01  +4.5945e-01  2.31e-02  3.84e-06  9.66e-04  3.09e-07  1.21e-05  9.72e-01  
 16  +4.3505e-01  +4.5492e-01  1.99e-02  3.28e-06  8.24e-04  3.41e-07  1.03e-05  1.95e-01  
 17  +4.3244e-01  +4.4548e-01  1.30e-02  2.11e-06  5.30e-04  1.00e-06  6.68e-06  9.90e-01  
 18  +4.2770e-01  +4.3009e-01  2.40e-03  3.88e-07  9.77e-05  1.83e-07  1.25e-06  8.38e-01  
 19  +4.2673e-01  +4.2694e-01  2.10e-04  3.40e-08  8.56e-06  1.60e-08  1.10e-07  9.20e-01  
 20  +4.2663e-01  +4.2664e-01  2.11e-06  3.41e-10  8.58e-08  1.61e-10  1.10e-09  9.90e-01  
 21  +4.2663e-01  +4.2663e-01  2.11e-08  3.42e-12  8.60e-10  1.61e-12  1.10e-11  9.90e-01  
 22  +4.2663e-01  +4.2663e-01  2.11e-10  3.42e-14  8.62e-12  1.61e-14  1.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 189.2452ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:28 PM: Optimal value: 4.266e-01
(CVXPY) Oct 06 04:28:28 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:28:28 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 3, Objective: 0.4266
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:28 PM: Your problem has 5051 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:28 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5051
  constraints   = 10051
  nnz(P)        = 0
  nnz(A)        = 77454
  cones (total) = 1
    : Nonnegative = 1,  numel = 10051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7811e-01  +1.0990e+03  1.10e+03  4.44e-01  8.27e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2917e-01  +1.2007e+02  1.20e+02  1.78e-01  4.26e+01  1.79e-02  2.90e-01  9.56e-01  
  3  +5.0830e-01  +3.1102e+01  3.06e+01  1.24e-01  2.97e+01  5.04e-05  2.63e-01  3.51e-01  
  4  +5.0112e-01  +3.3267e+00  2.83e+00  1.93e-02  4.72e+00  6.22e-06  1.64e-01  6.11e-01  
  5  +5.0016e-01  +1.1147e+00  6.15e-01  4.13e-03  1.03e+00  4.32e-05  8.71e-02  9.90e-01  
  6  +5.0006e-01  +8.6135e-01  3.61e-01  2.40e-03  6.01e-01  4.20e-05  3.50e-02  6.51e-01  
  7  +4.9960e-01  +7.8343e-01  2.84e-01  9.89e-04  2.50e-01  2.42e-04  3.47e-03  9.29e-01  
  8  +4.9307e-01  +7.5534e-01  2.62e-01  8.58e-05  2.18e-02  3.07e-03  2.40e-04  9.31e-01  
  9  +4.9293e-01  +7.4556e-01  2.53e-01  8.19e-05  2.08e-02  2.50e-03  2.28e-04  1.85e-01  
 10  +4.8690e-01  +6.9955e-01  2.13e-01  5.40e-05  1.37e-02  2.11e-03  1.52e-04  4.69e-01  
 11  +4.8541e-01  +6.9183e-01  2.06e-01  4.94e-05  1.25e-02  1.97e-03  1.39e-04  1.46e-01  
 12  +4.8456e-01  +6.8520e-01  2.01e-01  4.91e-05  1.25e-02  1.73e-03  1.39e-04  6.20e-02  
 13  +4.7616e-01  +6.4442e-01  1.68e-01  3.55e-05  8.98e-03  1.33e-03  1.02e-04  3.65e-01  
 14  +4.7042e-01  +6.0864e-01  1.38e-01  3.03e-05  7.66e-03  1.60e-04  8.89e-05  6.60e-01  
 15  +4.5300e-01  +5.3822e-01  8.52e-02  1.64e-05  4.13e-03  8.35e-05  5.01e-05  5.00e-01  
 16  +4.4313e-01  +5.0060e-01  5.75e-02  1.05e-05  2.66e-03  4.88e-05  3.31e-05  4.05e-01  
 17  +4.3445e-01  +4.6635e-01  3.19e-02  5.50e-06  1.39e-03  2.04e-06  1.77e-05  9.90e-01  
 18  +4.2356e-01  +4.2804e-01  4.48e-03  7.66e-07  1.93e-04  2.96e-07  2.56e-06  9.52e-01  
 19  +4.2173e-01  +4.2182e-01  8.23e-05  1.41e-08  3.54e-06  5.34e-09  4.75e-08  9.82e-01  
 20  +4.2170e-01  +4.2170e-01  8.23e-07  1.41e-10  3.54e-08  5.34e-11  4.75e-10  9.90e-01  
 21  +4.2170e-01  +4.2170e-01  8.24e-09  1.41e-12  3.54e-10  5.34e-13  4.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 182.5791ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:28 PM: Optimal value: 4.217e-01
(CVXPY) Oct 06 04:28:28 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:28:28 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 4, Objective: 0.4217
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:29 PM: Your problem has 5061 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:29 PM: Finished problem compilation (took 4.689e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5061
  constraints   = 10061
  nnz(P)        = 0
  nnz(A)        = 78569
  cones (total) = 1
    : Nonnegative = 1,  numel = 10061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7805e-01  +1.0990e+03  1.10e+03  4.44e-01  8.26e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2912e-01  +1.1996e+02  1.19e+02  1.78e-01  4.25e+01  1.79e-02  2.90e-01  9.57e-01  
  3  +5.0829e-01  +3.1064e+01  3.06e+01  1.24e-01  2.96e+01  5.05e-05  2.62e-01  3.53e-01  
  4  +5.0111e-01  +3.3156e+00  2.81e+00  1.92e-02  4.70e+00  6.24e-06  1.63e-01  6.14e-01  
  5  +5.0016e-01  +1.1414e+00  6.41e-01  4.31e-03  1.07e+00  4.40e-05  8.51e-02  9.90e-01  
  6  +5.0002e-01  +8.1023e-01  3.10e-01  2.03e-03  5.09e-01  4.89e-05  2.25e-02  8.12e-01  
  7  +4.9774e-01  +8.5183e-01  3.54e-01  3.25e-04  8.27e-02  1.12e-03  9.35e-04  9.81e-01  
  8  +4.9120e-01  +8.0556e-01  3.14e-01  9.61e-05  2.44e-02  3.13e-03  2.70e-04  7.23e-01  
  9  +4.8685e-01  +7.5423e-01  2.67e-01  7.70e-05  1.95e-02  2.28e-03  2.18e-04  2.96e-01  
 10  +4.8549e-01  +7.0552e-01  2.20e-01  6.26e-05  1.59e-02  4.17e-04  1.77e-04  6.82e-01  
 11  +4.8448e-01  +6.9950e-01  2.15e-01  5.77e-05  1.46e-02  3.58e-04  1.63e-04  2.08e-01  
 12  +4.8167e-01  +6.7204e-01  1.90e-01  4.97e-05  1.26e-02  5.78e-05  1.41e-04  7.15e-01  
 13  +4.7201e-01  +6.3079e-01  1.59e-01  3.51e-05  8.88e-03  1.03e-05  1.02e-04  8.70e-01  
 14  +4.6355e-01  +5.9381e-01  1.30e-01  2.75e-05  6.95e-03  7.66e-06  8.17e-05  4.13e-01  
 15  +4.4344e-01  +5.1259e-01  6.91e-02  1.29e-05  3.25e-03  3.73e-06  4.03e-05  6.51e-01  
 16  +4.3767e-01  +4.9044e-01  5.28e-02  9.55e-06  2.41e-03  2.93e-06  3.03e-05  3.56e-01  
 17  +4.3481e-01  +4.7718e-01  4.24e-02  7.33e-06  1.85e-03  2.98e-06  2.33e-05  9.90e-01  
 18  +4.2277e-01  +4.3465e-01  1.19e-02  2.02e-06  5.09e-04  8.28e-07  6.74e-06  7.75e-01  
 19  +4.1817e-01  +4.1901e-01  8.39e-04  1.41e-07  3.55e-05  5.82e-08  4.82e-07  9.81e-01  
 20  +4.1780e-01  +4.1781e-01  8.59e-06  1.45e-09  3.63e-07  5.95e-10  4.95e-09  9.90e-01  
 21  +4.1780e-01  +4.1780e-01  8.59e-08  1.45e-11  3.63e-09  5.95e-12  4.95e-11  9.90e-01  
 22  +4.1780e-01  +4.1780e-01  8.59e-10  1.45e-13  3.63e-11  5.98e-14  4.97e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.8829ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:29 PM: Optimal value: 4.178e-01
(CVXPY) Oct 06 04:28:29 PM: Compilation took 4.689e-02 seconds
(CVXPY) Oct 06 04:28:29 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 5, Objective: 0.4178
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:29 PM: Your problem has 5071 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:29 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5071
  constraints   = 10071
  nnz(P)        = 0
  nnz(A)        = 79139
  cones (total) = 1
    : Nonnegative = 1,  numel = 10071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7799e-01  +1.0989e+03  1.10e+03  4.44e-01  8.25e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2907e-01  +1.1985e+02  1.19e+02  1.78e-01  4.24e+01  1.79e-02  2.89e-01  9.58e-01  
  3  +5.0828e-01  +3.1031e+01  3.05e+01  1.24e-01  2.95e+01  5.06e-05  2.62e-01  3.55e-01  
  4  +5.0111e-01  +3.3079e+00  2.81e+00  1.92e-02  4.69e+00  6.25e-06  1.62e-01  6.17e-01  
  5  +5.0017e-01  +1.1595e+00  6.59e-01  4.44e-03  1.10e+00  4.44e-05  8.36e-02  9.90e-01  
  6  +5.0004e-01  +8.6556e-01  3.66e-01  2.40e-03  6.00e-01  5.12e-05  2.58e-02  7.55e-01  
  7  +4.9851e-01  +8.5095e-01  3.52e-01  4.60e-04  1.17e-01  7.61e-04  1.34e-03  9.73e-01  
  8  +4.9265e-01  +8.1411e-01  3.21e-01  1.10e-04  2.80e-02  2.84e-03  3.06e-04  7.76e-01  
  9  +4.9141e-01  +7.9181e-01  3.00e-01  9.91e-05  2.52e-02  2.33e-03  2.75e-04  2.13e-01  
 10  +4.8932e-01  +7.7057e-01  2.81e-01  8.54e-05  2.17e-02  2.07e-03  2.38e-04  2.23e-01  
 11  +4.8455e-01  +7.0701e-01  2.22e-01  6.02e-05  1.53e-02  5.75e-04  1.69e-04  7.08e-01  
 12  +4.8349e-01  +7.0083e-01  2.17e-01  5.95e-05  1.51e-02  5.09e-04  1.68e-04  7.26e-02  
 13  +4.7597e-01  +6.6389e-01  1.88e-01  4.41e-05  1.12e-02  4.03e-04  1.26e-04  3.62e-01  
 14  +4.7087e-01  +6.3916e-01  1.68e-01  3.78e-05  9.56e-03  2.12e-04  1.09e-04  4.24e-01  
 15  +4.4881e-01  +5.4265e-01  9.38e-02  1.80e-05  4.54e-03  2.35e-06  5.50e-05  8.96e-01  
 16  +4.3885e-01  +5.0453e-01  6.57e-02  1.21e-05  3.06e-03  1.78e-06  3.81e-05  3.55e-01  
 17  +4.3541e-01  +4.9138e-01  5.60e-02  1.01e-05  2.55e-03  1.83e-06  3.21e-05  2.70e-01  
 18  +4.3176e-01  +4.7616e-01  4.44e-02  7.74e-06  1.95e-03  2.64e-06  2.47e-05  7.78e-01  
 19  +4.2302e-01  +4.4509e-01  2.21e-02  3.79e-06  9.54e-04  1.33e-06  1.25e-05  5.66e-01  
 20  +4.1507e-01  +4.1717e-01  2.10e-03  3.56e-07  8.96e-05  1.26e-07  1.22e-06  9.25e-01  
 21  +4.1421e-01  +4.1423e-01  2.46e-05  4.16e-09  1.05e-06  1.47e-09  1.43e-08  9.88e-01  
 22  +4.1420e-01  +4.1420e-01  2.46e-07  4.16e-11  1.05e-08  1.47e-11  1.43e-10  9.90e-01  
 23  +4.1420e-01  +4.1420e-01  2.46e-09  4.16e-13  1.05e-10  1.48e-13  1.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.1087ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:29 PM: Optimal value: 4.142e-01
(CVXPY) Oct 06 04:28:29 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:28:29 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 6, Objective: 0.4142
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:30 PM: Your problem has 5081 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:30 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5081
  constraints   = 10081
  nnz(P)        = 0
  nnz(A)        = 79619
  cones (total) = 1
    : Nonnegative = 1,  numel = 10081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7796e-01  +1.0988e+03  1.10e+03  4.44e-01  8.25e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2903e-01  +1.1977e+02  1.19e+02  1.78e-01  4.23e+01  1.79e-02  2.89e-01  9.58e-01  
  3  +5.0827e-01  +3.0999e+01  3.05e+01  1.23e-01  2.94e+01  5.06e-05  2.61e-01  3.56e-01  
  4  +5.0111e-01  +3.3017e+00  2.80e+00  1.92e-02  4.68e+00  6.26e-06  1.62e-01  6.18e-01  
  5  +5.0025e-01  +1.3320e+00  8.32e-01  5.61e-03  1.39e+00  4.17e-05  9.43e-02  8.42e-01  
  6  +5.0004e-01  +8.1830e-01  3.18e-01  2.10e-03  5.26e-01  4.00e-05  2.52e-02  7.96e-01  
  7  +4.9884e-01  +8.8192e-01  3.83e-01  5.60e-04  1.42e-01  6.13e-04  1.63e-03  9.68e-01  
  8  +4.9340e-01  +8.4534e-01  3.52e-01  1.21e-04  3.08e-02  2.60e-03  3.33e-04  8.00e-01  
  9  +4.9207e-01  +8.0986e-01  3.18e-01  1.05e-04  2.68e-02  1.87e-03  2.90e-04  2.96e-01  
 10  +4.9143e-01  +7.7638e-01  2.85e-01  9.59e-05  2.44e-02  1.00e-03  2.65e-04  3.73e-01  
 11  +4.8686e-01  +7.4422e-01  2.57e-01  7.19e-05  1.83e-02  9.45e-04  2.00e-04  3.20e-01  
 12  +4.8563e-01  +7.2589e-01  2.40e-01  6.93e-05  1.76e-02  5.69e-04  1.94e-04  2.79e-01  
 13  +4.8229e-01  +7.0577e-01  2.23e-01  6.00e-05  1.52e-02  4.42e-04  1.69e-04  2.79e-01  
 14  +4.7682e-01  +6.7593e-01  1.99e-01  4.81e-05  1.22e-02  2.79e-04  1.37e-04  4.22e-01  
 15  +4.7180e-01  +6.4658e-01  1.75e-01  4.08e-05  1.03e-02  5.03e-05  1.18e-04  6.93e-01  
 16  +4.4520e-01  +5.3346e-01  8.83e-02  1.64e-05  4.14e-03  1.77e-05  5.03e-05  7.12e-01  
 17  +4.3666e-01  +5.0082e-01  6.42e-02  1.16e-05  2.92e-03  1.08e-05  3.64e-05  4.28e-01  
 18  +4.3480e-01  +4.9356e-01  5.88e-02  1.05e-05  2.63e-03  8.81e-06  3.30e-05  2.66e-01  
 19  +4.2972e-01  +4.7419e-01  4.45e-02  7.73e-06  1.95e-03  5.05e-06  2.48e-05  6.02e-01  
 20  +4.1998e-01  +4.3907e-01  1.91e-02  3.25e-06  8.17e-04  1.76e-06  1.08e-05  7.87e-01  
 21  +4.1310e-01  +4.1496e-01  1.86e-03  3.14e-07  7.90e-05  1.41e-07  1.07e-06  9.76e-01  
 22  +4.1231e-01  +4.1233e-01  1.97e-05  3.33e-09  8.37e-07  1.48e-09  1.14e-08  9.89e-01  
 23  +4.1230e-01  +4.1230e-01  1.97e-07  3.33e-11  8.37e-09  1.48e-11  1.14e-10  9.90e-01  
 24  +4.1230e-01  +4.1230e-01  1.97e-09  3.33e-13  8.37e-11  1.48e-13  1.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 213.6153ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:30 PM: Optimal value: 4.123e-01
(CVXPY) Oct 06 04:28:30 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:28:30 PM: Solver (including time spent in interface) took 2.355e-01 seconds
Iteration: 7, Objective: 0.4123
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:30 PM: Your problem has 5091 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:30 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5091
  constraints   = 10091
  nnz(P)        = 0
  nnz(A)        = 80187
  cones (total) = 1
    : Nonnegative = 1,  numel = 10091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7787e-01  +1.0990e+03  1.10e+03  4.44e-01  8.24e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2897e-01  +1.1966e+02  1.19e+02  1.78e-01  4.22e+01  1.79e-02  2.89e-01  9.59e-01  
  3  +5.0825e-01  +3.0972e+01  3.05e+01  1.23e-01  2.94e+01  5.07e-05  2.61e-01  3.58e-01  
  4  +5.0111e-01  +3.3015e+00  2.80e+00  1.92e-02  4.68e+00  6.27e-06  1.61e-01  6.20e-01  
  5  +5.0018e-01  +1.1859e+00  6.86e-01  4.62e-03  1.15e+00  4.51e-05  8.15e-02  9.90e-01  
  6  +5.0002e-01  +8.5166e-01  3.52e-01  2.27e-03  5.69e-01  5.80e-05  2.05e-02  8.12e-01  
  7  +4.9686e-01  +8.7471e-01  3.78e-01  2.55e-04  6.49e-02  1.53e-03  7.12e-04  9.79e-01  
  8  +4.8903e-01  +8.1462e-01  3.26e-01  8.57e-05  2.18e-02  3.46e-03  2.36e-04  6.93e-01  
  9  +4.8527e-01  +7.8123e-01  2.96e-01  6.95e-05  1.77e-02  2.73e-03  1.92e-04  3.35e-01  
 10  +4.7939e-01  +7.2140e-01  2.42e-01  5.87e-05  1.49e-02  1.14e-03  1.66e-04  4.16e-01  
 11  +4.6914e-01  +6.6104e-01  1.92e-01  4.24e-05  1.07e-02  7.02e-04  1.23e-04  3.94e-01  
 12  +4.6800e-01  +6.5312e-01  1.85e-01  4.13e-05  1.04e-02  5.13e-04  1.20e-04  2.00e-01  
 13  +4.6150e-01  +6.2198e-01  1.60e-01  3.43e-05  8.67e-03  2.56e-04  1.01e-04  4.48e-01  
 14  +4.3928e-01  +5.2370e-01  8.44e-02  1.59e-05  4.01e-03  9.36e-05  4.98e-05  6.13e-01  
 15  +4.3320e-01  +4.9855e-01  6.54e-02  1.20e-05  3.01e-03  5.72e-05  3.81e-05  3.98e-01  
 16  +4.3060e-01  +4.8776e-01  5.72e-02  1.03e-05  2.59e-03  4.13e-05  3.30e-05  3.03e-01  
 17  +4.2512e-01  +4.6600e-01  4.09e-02  7.20e-06  1.81e-03  2.05e-05  2.35e-05  5.34e-01  
 18  +4.1563e-01  +4.3029e-01  1.47e-02  2.52e-06  6.33e-04  2.12e-06  8.52e-06  9.43e-01  
 19  +4.1028e-01  +4.1164e-01  1.35e-03  2.32e-07  5.83e-05  1.06e-07  8.04e-07  9.90e-01  
 20  +4.0971e-01  +4.0972e-01  1.48e-05  2.53e-09  6.35e-07  1.14e-09  8.79e-09  9.90e-01  
 21  +4.0970e-01  +4.0970e-01  1.48e-07  2.53e-11  6.35e-09  1.14e-11  8.79e-11  9.90e-01  
 22  +4.0970e-01  +4.0970e-01  1.48e-09  2.53e-13  6.35e-11  1.14e-13  8.79e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 200.8153ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:31 PM: Optimal value: 4.097e-01
(CVXPY) Oct 06 04:28:31 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:28:31 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 8, Objective: 0.4097
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:31 PM: Your problem has 5101 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:31 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5101
  constraints   = 10101
  nnz(P)        = 0
  nnz(A)        = 80570
  cones (total) = 1
    : Nonnegative = 1,  numel = 10101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7780e-01  +1.0989e+03  1.10e+03  4.44e-01  8.23e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2892e-01  +1.1956e+02  1.19e+02  1.78e-01  4.21e+01  1.79e-02  2.88e-01  9.60e-01  
  3  +5.0824e-01  +3.0944e+01  3.04e+01  1.23e-01  2.93e+01  5.07e-05  2.60e-01  3.60e-01  
  4  +5.0111e-01  +3.2977e+00  2.80e+00  1.91e-02  4.67e+00  6.28e-06  1.60e-01  6.21e-01  
  5  +5.0019e-01  +1.2101e+00  7.10e-01  4.78e-03  1.19e+00  4.54e-05  8.12e-02  9.82e-01  
  6  +5.0002e-01  +8.6633e-01  3.66e-01  2.37e-03  5.93e-01  5.86e-05  2.13e-02  7.71e-01  
  7  +4.9694e-01  +8.8856e-01  3.92e-01  2.70e-04  6.88e-02  1.49e-03  7.51e-04  9.85e-01  
  8  +4.8932e-01  +8.2822e-01  3.39e-01  9.16e-05  2.33e-02  3.37e-03  2.52e-04  6.91e-01  
  9  +4.8570e-01  +7.9552e-01  3.10e-01  7.36e-05  1.87e-02  2.71e-03  2.03e-04  3.43e-01  
 10  +4.7830e-01  +7.3166e-01  2.53e-01  5.96e-05  1.51e-02  1.51e-03  1.68e-04  3.48e-01  
 11  +4.6729e-01  +6.6340e-01  1.96e-01  4.27e-05  1.08e-02  8.45e-04  1.23e-04  4.19e-01  
 12  +4.6616e-01  +6.5394e-01  1.88e-01  4.13e-05  1.04e-02  5.88e-04  1.20e-04  2.28e-01  
 13  +4.5827e-01  +6.1647e-01  1.58e-01  3.25e-05  8.22e-03  2.85e-04  9.64e-05  4.85e-01  
 14  +4.4023e-01  +5.3755e-01  9.73e-02  1.86e-05  4.68e-03  1.47e-04  5.79e-05  4.46e-01  
 15  +4.2681e-01  +4.8236e-01  5.55e-02  1.01e-05  2.55e-03  6.90e-05  3.29e-05  5.07e-01  
 16  +4.2196e-01  +4.6089e-01  3.89e-02  6.86e-06  1.72e-03  2.31e-05  2.26e-05  7.06e-01  
 17  +4.1501e-01  +4.3413e-01  1.91e-02  3.30e-06  8.31e-04  1.96e-06  1.12e-05  9.90e-01  
 18  +4.0844e-01  +4.1143e-01  3.00e-03  5.17e-07  1.30e-04  2.79e-07  1.80e-06  8.83e-01  
 19  +4.0722e-01  +4.0725e-01  3.71e-05  6.41e-09  1.61e-06  3.25e-09  2.24e-08  9.90e-01  
 20  +4.0720e-01  +4.0720e-01  3.71e-07  6.41e-11  1.61e-08  3.25e-11  2.24e-10  9.90e-01  
 21  +4.0720e-01  +4.0720e-01  3.71e-09  6.41e-13  1.61e-10  3.25e-13  2.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.1216ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:31 PM: Optimal value: 4.072e-01
(CVXPY) Oct 06 04:28:31 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:28:31 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 9, Objective: 0.4072
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:31 PM: Your problem has 5111 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:31 PM: Finished problem compilation (took 6.253e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5111
  constraints   = 10111
  nnz(P)        = 0
  nnz(A)        = 81525
  cones (total) = 1
    : Nonnegative = 1,  numel = 10111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7775e-01  +1.0989e+03  1.10e+03  4.44e-01  8.23e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2889e-01  +1.1949e+02  1.19e+02  1.78e-01  4.20e+01  1.79e-02  2.88e-01  9.61e-01  
  3  +5.0824e-01  +3.0927e+01  3.04e+01  1.23e-01  2.93e+01  5.08e-05  2.60e-01  3.61e-01  
  4  +5.0111e-01  +3.2956e+00  2.79e+00  1.91e-02  4.67e+00  6.29e-06  1.60e-01  6.22e-01  
  5  +5.0019e-01  +1.2101e+00  7.10e-01  4.78e-03  1.19e+00  4.55e-05  8.01e-02  9.87e-01  
  6  +5.0002e-01  +8.6822e-01  3.68e-01  2.38e-03  5.93e-01  6.07e-05  2.05e-02  7.78e-01  
  7  +4.9687e-01  +8.8711e-01  3.90e-01  2.64e-04  6.72e-02  1.52e-03  7.30e-04  9.83e-01  
  8  +4.8879e-01  +8.2631e-01  3.38e-01  8.72e-05  2.22e-02  3.54e-03  2.38e-04  6.99e-01  
  9  +4.8471e-01  +7.7914e-01  2.94e-01  6.90e-05  1.76e-02  2.11e-03  1.90e-04  4.56e-01  
 10  +4.7659e-01  +7.1751e-01  2.41e-01  5.66e-05  1.43e-02  1.17e-03  1.59e-04  3.35e-01  
 11  +4.7235e-01  +6.9597e-01  2.24e-01  5.00e-05  1.27e-02  1.06e-03  1.42e-04  1.33e-01  
 12  +4.6765e-01  +6.5817e-01  1.91e-01  4.43e-05  1.12e-02  4.86e-05  1.29e-04  7.22e-01  
 13  +4.4572e-01  +5.5810e-01  1.12e-01  2.26e-05  5.70e-03  2.48e-05  6.94e-05  5.22e-01  
 14  +4.2971e-01  +4.9487e-01  6.52e-02  1.19e-05  3.00e-03  4.07e-06  3.82e-05  9.35e-01  
 15  +4.2143e-01  +4.6124e-01  3.98e-02  7.05e-06  1.77e-03  2.74e-06  2.33e-05  9.90e-01  
 16  +4.1543e-01  +4.3879e-01  2.34e-02  4.11e-06  1.03e-03  1.65e-06  1.39e-05  7.46e-01  
 17  +4.1310e-01  +4.3064e-01  1.75e-02  3.06e-06  7.70e-04  1.25e-06  1.04e-05  4.68e-01  
 18  +4.0729e-01  +4.1025e-01  2.96e-03  5.17e-07  1.30e-04  2.09e-07  1.81e-06  8.39e-01  
 19  +4.0611e-01  +4.0615e-01  3.35e-05  5.84e-09  1.47e-06  2.35e-09  2.05e-08  9.89e-01  
 20  +4.0610e-01  +4.0610e-01  3.35e-07  5.84e-11  1.47e-08  2.35e-11  2.06e-10  9.90e-01  
 21  +4.0610e-01  +4.0610e-01  3.35e-09  5.85e-13  1.47e-10  2.35e-13  2.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 198.272ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:32 PM: Optimal value: 4.061e-01
(CVXPY) Oct 06 04:28:32 PM: Compilation took 6.253e-02 seconds
(CVXPY) Oct 06 04:28:32 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 10, Objective: 0.4061
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:32 PM: Your problem has 5121 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:32 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5121
  constraints   = 10121
  nnz(P)        = 0
  nnz(A)        = 81977
  cones (total) = 1
    : Nonnegative = 1,  numel = 10121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7771e-01  +1.0989e+03  1.10e+03  4.44e-01  8.22e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2885e-01  +1.1940e+02  1.19e+02  1.77e-01  4.19e+01  1.79e-02  2.88e-01  9.61e-01  
  3  +5.0823e-01  +3.0899e+01  3.04e+01  1.23e-01  2.92e+01  5.08e-05  2.60e-01  3.62e-01  
  4  +5.0110e-01  +3.2916e+00  2.79e+00  1.91e-02  4.66e+00  6.29e-06  1.59e-01  6.23e-01  
  5  +5.0020e-01  +1.2376e+00  7.37e-01  4.97e-03  1.23e+00  4.55e-05  8.06e-02  9.72e-01  
  6  +5.0002e-01  +8.6117e-01  3.61e-01  2.32e-03  5.80e-01  6.10e-05  1.93e-02  7.92e-01  
  7  +4.9685e-01  +8.8212e-01  3.85e-01  2.58e-04  6.58e-02  1.53e-03  7.12e-04  9.73e-01  
  8  +4.9059e-01  +8.3677e-01  3.46e-01  1.03e-04  2.63e-02  3.08e-03  2.82e-04  6.29e-01  
  9  +4.8637e-01  +7.9330e-01  3.07e-01  7.84e-05  1.99e-02  2.32e-03  2.15e-04  4.23e-01  
 10  +4.8243e-01  +7.6153e-01  2.79e-01  6.84e-05  1.74e-02  1.76e-03  1.89e-04  2.49e-01  
 11  +4.7593e-01  +6.9779e-01  2.22e-01  5.70e-05  1.44e-02  1.65e-05  1.62e-04  7.48e-01  
 12  +4.7262e-01  +6.8291e-01  2.10e-01  5.17e-05  1.31e-02  1.52e-05  1.48e-04  1.59e-01  
 13  +4.5757e-01  +6.1164e-01  1.54e-01  3.38e-05  8.53e-03  6.53e-06  1.01e-04  9.17e-01  
 14  +4.3351e-01  +5.1325e-01  7.97e-02  1.55e-05  3.89e-03  3.20e-06  4.92e-05  5.78e-01  
 15  +4.2787e-01  +4.9151e-01  6.36e-02  1.21e-05  3.03e-03  2.67e-06  3.91e-05  2.77e-01  
 16  +4.2010e-01  +4.6038e-01  4.03e-02  7.26e-06  1.82e-03  2.61e-06  2.39e-05  9.66e-01  
 17  +4.1221e-01  +4.3110e-01  1.89e-02  3.36e-06  8.44e-04  1.33e-06  1.14e-05  9.90e-01  
 18  +4.0672e-01  +4.1154e-01  4.82e-03  8.57e-07  2.15e-04  3.38e-07  2.98e-06  7.95e-01  
 19  +4.0499e-01  +4.0547e-01  4.73e-04  8.40e-08  2.11e-05  3.23e-08  2.95e-07  9.44e-01  
 20  +4.0480e-01  +4.0481e-01  4.94e-06  8.77e-10  2.20e-07  3.37e-10  3.08e-09  9.90e-01  
 21  +4.0480e-01  +4.0480e-01  4.94e-08  8.77e-12  2.20e-09  3.37e-12  3.08e-11  9.90e-01  
 22  +4.0480e-01  +4.0480e-01  4.95e-10  8.79e-14  2.21e-11  3.37e-14  3.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.1438ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:32 PM: Optimal value: 4.048e-01
(CVXPY) Oct 06 04:28:32 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:28:32 PM: Solver (including time spent in interface) took 2.187e-01 seconds
Iteration: 11, Objective: 0.4048
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:32 PM: Your problem has 5131 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:32 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5131
  constraints   = 10131
  nnz(P)        = 0
  nnz(A)        = 82468
  cones (total) = 1
    : Nonnegative = 1,  numel = 10131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7768e-01  +1.0989e+03  1.10e+03  4.45e-01  8.21e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2883e-01  +1.1938e+02  1.19e+02  1.77e-01  4.18e+01  1.79e-02  2.88e-01  9.61e-01  
  3  +5.0822e-01  +3.0886e+01  3.04e+01  1.23e-01  2.91e+01  5.08e-05  2.59e-01  3.63e-01  
  4  +5.0110e-01  +3.2879e+00  2.79e+00  1.91e-02  4.65e+00  6.30e-06  1.59e-01  6.25e-01  
  5  +5.0020e-01  +1.2352e+00  7.35e-01  4.96e-03  1.23e+00  4.64e-05  7.85e-02  9.88e-01  
  6  +5.0002e-01  +9.0574e-01  4.06e-01  2.59e-03  6.46e-01  6.63e-05  2.01e-02  7.83e-01  
  7  +4.9690e-01  +9.0113e-01  4.04e-01  2.73e-04  6.96e-02  1.51e-03  7.54e-04  9.72e-01  
  8  +4.9277e-01  +8.5751e-01  3.65e-01  1.37e-04  3.49e-02  2.34e-03  3.74e-04  5.58e-01  
  9  +4.9076e-01  +8.2424e-01  3.33e-01  1.06e-04  2.69e-02  1.82e-03  2.89e-04  4.36e-01  
 10  +4.8987e-01  +7.9204e-01  3.02e-01  9.65e-05  2.45e-02  8.52e-04  2.64e-04  4.54e-01  
 11  +4.8303e-01  +7.5255e-01  2.70e-01  6.94e-05  1.76e-02  8.23e-04  1.92e-04  3.36e-01  
 12  +4.6755e-01  +6.6050e-01  1.93e-01  4.38e-05  1.11e-02  1.36e-04  1.26e-04  7.58e-01  
 13  +4.6099e-01  +6.3142e-01  1.70e-01  3.88e-05  9.80e-03  6.84e-05  1.15e-04  3.83e-01  
 14  +4.4003e-01  +5.4075e-01  1.01e-01  2.04e-05  5.13e-03  3.23e-05  6.37e-05  5.31e-01  
 15  +4.2648e-01  +4.8848e-01  6.20e-02  1.17e-05  2.95e-03  1.20e-05  3.81e-05  6.56e-01  
 16  +4.2049e-01  +4.6384e-01  4.33e-02  7.83e-06  1.97e-03  3.15e-06  2.58e-05  9.90e-01  
 17  +4.1448e-01  +4.4156e-01  2.71e-02  4.84e-06  1.21e-03  1.95e-06  1.63e-05  7.01e-01  
 18  +4.0677e-01  +4.1367e-01  6.90e-03  1.22e-06  3.07e-04  4.93e-07  4.26e-06  8.21e-01  
 19  +4.0480e-01  +4.0677e-01  1.97e-03  3.46e-07  8.69e-05  1.35e-07  1.22e-06  8.36e-01  
 20  +4.0402e-01  +4.0406e-01  3.95e-05  6.94e-09  1.74e-06  2.69e-09  2.46e-08  9.80e-01  
 21  +4.0400e-01  +4.0400e-01  3.95e-07  6.94e-11  1.74e-08  2.70e-11  2.46e-10  9.90e-01  
 22  +4.0400e-01  +4.0400e-01  4.02e-09  7.07e-13  1.77e-10  2.75e-13  2.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 213.2029ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:33 PM: Optimal value: 4.040e-01
(CVXPY) Oct 06 04:28:33 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:28:33 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 12, Objective: 0.4040
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:33 PM: Your problem has 5141 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:33 PM: Finished problem compilation (took 6.252e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5141
  constraints   = 10141
  nnz(P)        = 0
  nnz(A)        = 82945
  cones (total) = 1
    : Nonnegative = 1,  numel = 10141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7762e-01  +1.0989e+03  1.10e+03  4.45e-01  8.21e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2879e-01  +1.1930e+02  1.19e+02  1.77e-01  4.17e+01  1.79e-02  2.88e-01  9.62e-01  
  3  +5.0822e-01  +3.0866e+01  3.04e+01  1.23e-01  2.91e+01  5.09e-05  2.59e-01  3.64e-01  
  4  +5.0110e-01  +3.2862e+00  2.79e+00  1.91e-02  4.65e+00  6.31e-06  1.59e-01  6.26e-01  
  5  +5.0025e-01  +1.3512e+00  8.51e-01  5.75e-03  1.42e+00  4.46e-05  8.51e-02  8.99e-01  
  6  +5.0005e-01  +9.1717e-01  4.17e-01  2.70e-03  6.74e-01  5.54e-05  2.32e-02  7.65e-01  
  7  +4.9741e-01  +9.3488e-01  4.37e-01  3.18e-04  8.09e-02  1.28e-03  8.74e-04  9.82e-01  
  8  +4.9269e-01  +8.8486e-01  3.92e-01  1.35e-04  3.43e-02  2.39e-03  3.66e-04  6.24e-01  
  9  +4.8946e-01  +8.3688e-01  3.47e-01  1.01e-04  2.56e-02  1.84e-03  2.74e-04  4.39e-01  
 10  +4.8777e-01  +8.0822e-01  3.20e-01  9.47e-05  2.41e-02  1.27e-03  2.60e-04  2.27e-01  
 11  +4.8229e-01  +7.6229e-01  2.80e-01  7.44e-05  1.89e-02  7.76e-04  2.06e-04  4.46e-01  
 12  +4.7091e-01  +6.9866e-01  2.28e-01  5.25e-05  1.33e-02  5.52e-04  1.50e-04  3.86e-01  
 13  +4.6473e-01  +6.6890e-01  2.04e-01  4.50e-05  1.14e-02  4.68e-04  1.30e-04  1.67e-01  
 14  +4.4776e-01  +5.8159e-01  1.34e-01  2.83e-05  7.13e-03  4.62e-06  8.66e-05  8.16e-01  
 15  +4.2616e-01  +4.9269e-01  6.65e-02  1.28e-05  3.22e-03  2.46e-06  4.18e-05  6.36e-01  
 16  +4.2325e-01  +4.8147e-01  5.82e-02  1.11e-05  2.78e-03  2.24e-06  3.64e-05  1.78e-01  
 17  +4.1698e-01  +4.5621e-01  3.92e-02  7.15e-06  1.79e-03  2.21e-06  2.39e-05  7.80e-01  
 18  +4.1017e-01  +4.3034e-01  2.02e-02  3.61e-06  9.05e-04  1.37e-06  1.24e-05  9.90e-01  
 19  +4.0447e-01  +4.1019e-01  5.73e-03  1.02e-06  2.56e-04  3.87e-07  3.62e-06  7.24e-01  
 20  +4.0231e-01  +4.0258e-01  2.64e-04  4.71e-08  1.18e-05  1.71e-08  1.69e-07  9.90e-01  
 21  +4.0220e-01  +4.0220e-01  2.65e-06  4.72e-10  1.18e-07  1.72e-10  1.69e-09  9.90e-01  
 22  +4.0220e-01  +4.0220e-01  2.65e-08  4.72e-12  1.18e-09  1.72e-12  1.69e-11  9.90e-01  
 23  +4.0220e-01  +4.0220e-01  2.65e-10  4.73e-14  1.19e-11  1.72e-14  1.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.5656ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:33 PM: Optimal value: 4.022e-01
(CVXPY) Oct 06 04:28:33 PM: Compilation took 6.252e-02 seconds
(CVXPY) Oct 06 04:28:33 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 13, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:33 PM: Your problem has 5151 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:33 PM: Finished problem compilation (took 6.248e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5151
  constraints   = 10151
  nnz(P)        = 0
  nnz(A)        = 83498
  cones (total) = 1
    : Nonnegative = 1,  numel = 10151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7751e-01  +1.0991e+03  1.10e+03  4.45e-01  8.20e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2871e-01  +1.1917e+02  1.19e+02  1.77e-01  4.16e+01  1.80e-02  2.88e-01  9.63e-01  
  3  +5.0820e-01  +3.0831e+01  3.03e+01  1.23e-01  2.90e+01  5.10e-05  2.59e-01  3.67e-01  
  4  +5.0110e-01  +3.2845e+00  2.78e+00  1.91e-02  4.65e+00  6.32e-06  1.58e-01  6.28e-01  
  5  +5.0029e-01  +1.4561e+00  9.56e-01  6.46e-03  1.60e+00  4.42e-05  8.81e-02  8.45e-01  
  6  +5.0004e-01  +8.9967e-01  4.00e-01  2.57e-03  6.41e-01  5.62e-05  2.05e-02  8.13e-01  
  7  +4.9741e-01  +9.5191e-01  4.54e-01  3.24e-04  8.27e-02  1.27e-03  8.90e-04  9.77e-01  
  8  +4.9037e-01  +8.9244e-01  4.02e-01  1.08e-04  2.76e-02  3.04e-03  2.93e-04  6.97e-01  
  9  +4.8324e-01  +8.1910e-01  3.36e-01  8.52e-05  2.17e-02  2.01e-03  2.36e-04  3.28e-01  
 10  +4.8139e-01  +7.9959e-01  3.18e-01  8.14e-05  2.07e-02  1.63e-03  2.26e-04  1.35e-01  
 11  +4.7233e-01  +7.3513e-01  2.63e-01  6.26e-05  1.59e-02  1.04e-03  1.78e-04  3.55e-01  
 12  +4.6720e-01  +6.9196e-01  2.25e-01  5.40e-05  1.37e-02  3.12e-04  1.56e-04  5.43e-01  
 13  +4.5513e-01  +6.3207e-01  1.77e-01  4.00e-05  1.01e-02  3.33e-05  1.21e-04  7.59e-01  
 14  +4.3428e-01  +5.3299e-01  9.87e-02  2.04e-05  5.14e-03  1.54e-05  6.54e-05  5.15e-01  
 15  +4.2522e-01  +4.9640e-01  7.12e-02  1.36e-05  3.42e-03  6.72e-06  4.45e-05  7.60e-01  
 16  +4.2023e-01  +4.7391e-01  5.37e-02  9.96e-06  2.50e-03  3.65e-06  3.30e-05  9.90e-01  
 17  +4.1487e-01  +4.5353e-01  3.87e-02  7.13e-06  1.79e-03  2.62e-06  2.42e-05  2.97e-01  
 18  +4.0726e-01  +4.2466e-01  1.74e-02  3.18e-06  7.97e-04  1.17e-06  1.12e-05  6.80e-01  
 19  +4.0232e-01  +4.0636e-01  4.04e-03  7.36e-07  1.85e-04  2.68e-07  2.67e-06  7.85e-01  
 20  +4.0086e-01  +4.0102e-01  1.53e-04  2.79e-08  7.00e-06  9.53e-09  1.02e-07  9.90e-01  
 21  +4.0080e-01  +4.0080e-01  1.54e-06  2.79e-10  7.01e-08  9.54e-11  1.02e-09  9.90e-01  
 22  +4.0080e-01  +4.0080e-01  1.54e-08  2.80e-12  7.02e-10  9.56e-13  1.03e-11  9.90e-01  
 23  +4.0080e-01  +4.0080e-01  1.56e-10  2.83e-14  7.10e-12  9.67e-15  1.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 225.526ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:34 PM: Optimal value: 4.008e-01
(CVXPY) Oct 06 04:28:34 PM: Compilation took 6.248e-02 seconds
(CVXPY) Oct 06 04:28:34 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 14, Objective: 0.4008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:34 PM: Your problem has 5161 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:34 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5161
  constraints   = 10161
  nnz(P)        = 0
  nnz(A)        = 83979
  cones (total) = 1
    : Nonnegative = 1,  numel = 10161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7747e-01  +1.0991e+03  1.10e+03  4.45e-01  8.19e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2868e-01  +1.1912e+02  1.19e+02  1.77e-01  4.15e+01  1.80e-02  2.87e-01  9.63e-01  
  3  +5.0820e-01  +3.0823e+01  3.03e+01  1.23e-01  2.90e+01  5.11e-05  2.58e-01  3.68e-01  
  4  +5.0110e-01  +3.2857e+00  2.78e+00  1.91e-02  4.65e+00  6.33e-06  1.57e-01  6.28e-01  
  5  +5.0030e-01  +1.4872e+00  9.87e-01  6.68e-03  1.65e+00  4.39e-05  8.92e-02  8.28e-01  
  6  +5.0006e-01  +9.3003e-01  4.30e-01  2.78e-03  6.93e-01  5.44e-05  2.29e-02  7.82e-01  
  7  +4.9753e-01  +9.6488e-01  4.67e-01  3.44e-04  8.78e-02  1.22e-03  9.46e-04  9.71e-01  
  8  +4.9072e-01  +9.0408e-01  4.13e-01  1.14e-04  2.91e-02  2.94e-03  3.10e-04  6.99e-01  
  9  +4.8384e-01  +8.2128e-01  3.37e-01  9.01e-05  2.29e-02  1.65e-03  2.50e-04  3.78e-01  
 10  +4.8255e-01  +8.0983e-01  3.27e-01  8.65e-05  2.20e-02  1.49e-03  2.41e-04  9.06e-02  
 11  +4.7097e-01  +7.1584e-01  2.45e-01  6.09e-05  1.54e-02  5.18e-04  1.75e-04  5.63e-01  
 12  +4.6781e-01  +6.9513e-01  2.27e-01  5.56e-05  1.40e-02  2.77e-04  1.61e-04  3.94e-01  
 13  +4.5611e-01  +6.3667e-01  1.81e-01  4.05e-05  1.02e-02  1.70e-05  1.21e-04  8.28e-01  
 14  +4.3200e-01  +5.2770e-01  9.57e-02  1.92e-05  4.81e-03  7.87e-06  6.13e-05  5.26e-01  
 15  +4.1925e-01  +4.7372e-01  5.45e-02  1.04e-05  2.62e-03  4.03e-06  3.49e-05  5.86e-01  
 16  +4.1710e-01  +4.6252e-01  4.54e-02  8.48e-06  2.13e-03  3.13e-06  2.84e-05  7.61e-01  
 17  +4.1197e-01  +4.4290e-01  3.09e-02  5.71e-06  1.43e-03  2.13e-06  1.96e-05  5.46e-01  
 18  +4.0603e-01  +4.2060e-01  1.46e-02  2.68e-06  6.71e-04  9.91e-07  9.48e-06  5.70e-01  
 19  +4.0116e-01  +4.0252e-01  1.36e-03  2.49e-07  6.25e-05  8.57e-08  9.11e-07  9.90e-01  
 20  +4.0061e-01  +4.0062e-01  1.50e-05  2.74e-09  6.88e-07  9.35e-10  1.01e-08  9.89e-01  
 21  +4.0060e-01  +4.0060e-01  1.50e-07  2.75e-11  6.89e-09  9.35e-12  1.01e-10  9.90e-01  
 22  +4.0060e-01  +4.0060e-01  1.57e-09  2.87e-13  7.20e-11  9.81e-14  1.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.1304ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:34 PM: Optimal value: 4.006e-01
(CVXPY) Oct 06 04:28:34 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:28:34 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 15, Objective: 0.4006
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:34 PM: Your problem has 5171 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:35 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5171
  constraints   = 10171
  nnz(P)        = 0
  nnz(A)        = 84425
  cones (total) = 1
    : Nonnegative = 1,  numel = 10171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7740e-01  +1.0991e+03  1.10e+03  4.45e-01  8.19e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2863e-01  +1.1902e+02  1.18e+02  1.77e-01  4.14e+01  1.80e-02  2.87e-01  9.64e-01  
  3  +5.0819e-01  +3.0792e+01  3.03e+01  1.22e-01  2.89e+01  5.12e-05  2.58e-01  3.69e-01  
  4  +5.0110e-01  +3.2819e+00  2.78e+00  1.91e-02  4.64e+00  6.34e-06  1.57e-01  6.30e-01  
  5  +5.0030e-01  +1.4943e+00  9.94e-01  6.72e-03  1.66e+00  4.47e-05  8.72e-02  8.40e-01  
  6  +5.0006e-01  +9.6207e-01  4.62e-01  2.97e-03  7.40e-01  5.77e-05  2.30e-02  7.70e-01  
  7  +4.9754e-01  +9.7621e-01  4.79e-01  3.51e-04  8.94e-02  1.22e-03  9.59e-04  9.68e-01  
  8  +4.9073e-01  +9.1525e-01  4.25e-01  1.17e-04  2.98e-02  2.93e-03  3.15e-04  6.98e-01  
  9  +4.8424e-01  +8.4556e-01  3.61e-01  9.34e-05  2.37e-02  2.08e-03  2.56e-04  3.03e-01  
 10  +4.8084e-01  +8.1649e-01  3.36e-01  8.35e-05  2.12e-02  1.69e-03  2.31e-04  1.97e-01  
 11  +4.6807e-01  +7.0062e-01  2.33e-01  5.89e-05  1.49e-02  1.60e-05  1.70e-04  7.53e-01  
 12  +4.5794e-01  +6.5162e-01  1.94e-01  4.44e-05  1.12e-02  1.34e-05  1.31e-04  2.60e-01  
 13  +4.5446e-01  +6.3261e-01  1.78e-01  4.21e-05  1.06e-02  1.04e-05  1.28e-04  2.60e-01  
 14  +4.4083e-01  +5.6903e-01  1.28e-01  2.81e-05  7.05e-03  7.20e-06  8.80e-05  4.16e-01  
 15  +4.3729e-01  +5.5643e-01  1.19e-01  2.45e-05  6.15e-03  6.80e-06  7.66e-05  5.44e-01  
 16  +4.1655e-01  +4.6852e-01  5.20e-02  1.00e-05  2.51e-03  2.68e-06  3.36e-05  6.04e-01  
 17  +4.1402e-01  +4.5614e-01  4.21e-02  7.91e-06  1.98e-03  2.49e-06  2.68e-05  6.87e-01  
 18  +4.1212e-01  +4.4860e-01  3.65e-02  6.83e-06  1.71e-03  2.20e-06  2.33e-05  2.65e-01  
 19  +4.0790e-01  +4.3212e-01  2.42e-02  4.47e-06  1.12e-03  1.55e-06  1.55e-05  6.97e-01  
 20  +4.0015e-01  +4.0360e-01  3.45e-03  6.32e-07  1.58e-04  2.17e-07  2.28e-06  9.52e-01  
 21  +3.9882e-01  +3.9889e-01  6.27e-05  1.14e-08  2.87e-06  3.89e-09  4.18e-08  9.85e-01  
 22  +3.9880e-01  +3.9880e-01  6.27e-07  1.14e-10  2.87e-08  3.89e-11  4.18e-10  9.90e-01  
 23  +3.9880e-01  +3.9880e-01  6.49e-09  1.18e-12  2.97e-10  4.04e-13  4.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 232.6781ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:35 PM: Optimal value: 3.988e-01
(CVXPY) Oct 06 04:28:35 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:28:35 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 16, Objective: 0.3988
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:35 PM: Your problem has 5181 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:35 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5181
  constraints   = 10181
  nnz(P)        = 0
  nnz(A)        = 84767
  cones (total) = 1
    : Nonnegative = 1,  numel = 10181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7736e-01  +1.0990e+03  1.10e+03  4.45e-01  8.18e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2861e-01  +1.1897e+02  1.18e+02  1.77e-01  4.13e+01  1.80e-02  2.87e-01  9.64e-01  
  3  +5.0818e-01  +3.0779e+01  3.03e+01  1.22e-01  2.89e+01  5.12e-05  2.58e-01  3.70e-01  
  4  +5.0110e-01  +3.2804e+00  2.78e+00  1.91e-02  4.64e+00  6.35e-06  1.56e-01  6.30e-01  
  5  +5.0033e-01  +1.5537e+00  1.05e+00  7.13e-03  1.76e+00  4.39e-05  8.96e-02  8.06e-01  
  6  +5.0007e-01  +9.6151e-01  4.61e-01  2.98e-03  7.41e-01  5.54e-05  2.36e-02  7.69e-01  
  7  +4.9763e-01  +9.8889e-01  4.91e-01  3.66e-04  9.34e-02  1.17e-03  1.00e-03  9.71e-01  
  8  +4.9107e-01  +9.2706e-01  4.36e-01  1.22e-04  3.12e-02  2.82e-03  3.30e-04  6.98e-01  
  9  +4.8239e-01  +8.2619e-01  3.44e-01  9.06e-05  2.30e-02  1.61e-03  2.51e-04  4.02e-01  
 10  +4.8175e-01  +8.2025e-01  3.38e-01  8.86e-05  2.25e-02  1.52e-03  2.45e-04  5.92e-02  
 11  +4.7648e-01  +7.7881e-01  3.02e-01  7.58e-05  1.92e-02  1.05e-03  2.13e-04  2.95e-01  
 12  +4.5855e-01  +6.6800e-01  2.09e-01  4.69e-05  1.18e-02  5.29e-04  1.38e-04  4.77e-01  
 13  +4.5449e-01  +6.4914e-01  1.95e-01  4.20e-05  1.06e-02  4.68e-04  1.24e-04  1.39e-01  
 14  +4.4731e-01  +6.0252e-01  1.55e-01  3.44e-05  8.64e-03  4.43e-06  1.05e-04  8.20e-01  
 15  +4.2584e-01  +5.0975e-01  8.39e-02  1.66e-05  4.17e-03  2.59e-06  5.40e-05  5.53e-01  
 16  +4.1927e-01  +4.8251e-01  6.32e-02  1.23e-05  3.07e-03  2.10e-06  4.07e-05  3.07e-01  
 17  +4.1372e-01  +4.5722e-01  4.35e-02  8.11e-06  2.03e-03  2.55e-06  2.73e-05  8.87e-01  
 18  +4.0375e-01  +4.1898e-01  1.52e-02  2.80e-06  7.02e-04  1.00e-06  9.86e-06  9.90e-01  
 19  +3.9905e-01  +4.0170e-01  2.64e-03  4.85e-07  1.21e-04  1.71e-07  1.75e-06  9.37e-01  
 20  +3.9803e-01  +3.9809e-01  6.47e-05  1.18e-08  2.96e-06  4.13e-09  4.32e-08  9.81e-01  
 21  +3.9800e-01  +3.9800e-01  6.48e-07  1.18e-10  2.96e-08  4.13e-11  4.32e-10  9.90e-01  
 22  +3.9800e-01  +3.9800e-01  6.79e-09  1.24e-12  3.11e-10  4.35e-13  4.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 233.5786ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:35 PM: Optimal value: 3.980e-01
(CVXPY) Oct 06 04:28:35 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:28:35 PM: Solver (including time spent in interface) took 2.504e-01 seconds
Iteration: 17, Objective: 0.3980
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:36 PM: Your problem has 5191 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:36 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5191
  constraints   = 10191
  nnz(P)        = 0
  nnz(A)        = 85857
  cones (total) = 1
    : Nonnegative = 1,  numel = 10191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7729e-01  +1.0991e+03  1.10e+03  4.46e-01  8.18e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2857e-01  +1.1893e+02  1.18e+02  1.77e-01  4.13e+01  1.80e-02  2.87e-01  9.65e-01  
  3  +5.0818e-01  +3.0766e+01  3.03e+01  1.22e-01  2.88e+01  5.13e-05  2.57e-01  3.72e-01  
  4  +5.0110e-01  +3.2796e+00  2.78e+00  1.91e-02  4.64e+00  6.36e-06  1.56e-01  6.31e-01  
  5  +5.0031e-01  +1.5161e+00  1.02e+00  6.87e-03  1.70e+00  4.58e-05  8.54e-02  8.49e-01  
  6  +5.0005e-01  +9.5792e-01  4.58e-01  2.89e-03  7.21e-01  6.38e-05  2.01e-02  7.94e-01  
  7  +4.9743e-01  +9.7549e-01  4.78e-01  3.40e-04  8.67e-02  1.26e-03  9.27e-04  9.63e-01  
  8  +4.9075e-01  +9.1323e-01  4.22e-01  1.21e-04  3.08e-02  2.79e-03  3.26e-04  6.81e-01  
  9  +4.8511e-01  +8.4999e-01  3.65e-01  9.94e-05  2.53e-02  1.88e-03  2.73e-04  3.11e-01  
 10  +4.8233e-01  +8.2885e-01  3.47e-01  8.93e-05  2.27e-02  1.64e-03  2.46e-04  1.79e-01  
 11  +4.7890e-01  +7.9985e-01  3.21e-01  8.29e-05  2.10e-02  1.28e-03  2.31e-04  1.62e-01  
 12  +4.5154e-01  +6.2355e-01  1.72e-01  3.68e-05  9.27e-03  2.33e-04  1.10e-04  7.67e-01  
 13  +4.4967e-01  +6.1787e-01  1.68e-01  3.48e-05  8.76e-03  2.18e-04  1.04e-04  1.06e-01  
 14  +4.4018e-01  +5.7169e-01  1.32e-01  2.82e-05  7.10e-03  1.41e-05  8.83e-05  8.09e-01  
 15  +4.2259e-01  +4.9927e-01  7.67e-02  1.50e-05  3.77e-03  7.03e-06  4.94e-05  5.81e-01  
 16  +4.1872e-01  +4.8300e-01  6.43e-02  1.25e-05  3.13e-03  5.79e-06  4.16e-05  2.00e-01  
 17  +4.1117e-01  +4.4968e-01  3.85e-02  7.23e-06  1.81e-03  2.84e-06  2.47e-05  8.17e-01  
 18  +4.0462e-01  +4.2380e-01  1.92e-02  3.56e-06  8.92e-04  1.31e-06  1.25e-05  8.26e-01  
 19  +3.9974e-01  +4.0539e-01  5.65e-03  1.04e-06  2.61e-04  3.63e-07  3.78e-06  9.90e-01  
 20  +3.9761e-01  +3.9788e-01  2.69e-04  4.95e-08  1.24e-05  1.70e-08  1.82e-07  9.56e-01  
 21  +3.9750e-01  +3.9750e-01  2.70e-06  4.97e-10  1.24e-07  1.71e-10  1.83e-09  9.90e-01  
 22  +3.9750e-01  +3.9750e-01  2.70e-08  4.97e-12  1.24e-09  1.71e-12  1.83e-11  9.90e-01  
 23  +3.9750e-01  +3.9750e-01  2.86e-10  5.26e-14  1.32e-11  1.82e-14  1.94e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 231.2982ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:36 PM: Optimal value: 3.975e-01
(CVXPY) Oct 06 04:28:36 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:28:36 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 18, Objective: 0.3975
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:36 PM: Your problem has 5201 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:36 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5201
  constraints   = 10201
  nnz(P)        = 0
  nnz(A)        = 86181
  cones (total) = 1
    : Nonnegative = 1,  numel = 10201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7724e-01  +1.0990e+03  1.10e+03  4.46e-01  8.17e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2854e-01  +1.1885e+02  1.18e+02  1.77e-01  4.12e+01  1.80e-02  2.87e-01  9.66e-01  
  3  +5.0817e-01  +3.0744e+01  3.02e+01  1.22e-01  2.87e+01  5.13e-05  2.57e-01  3.73e-01  
  4  +5.0110e-01  +3.2767e+00  2.78e+00  1.91e-02  4.63e+00  6.36e-06  1.55e-01  6.32e-01  
  5  +5.0033e-01  +1.5677e+00  1.07e+00  7.22e-03  1.78e+00  4.54e-05  8.66e-02  8.25e-01  
  6  +5.0004e-01  +9.5018e-01  4.50e-01  2.84e-03  7.07e-01  6.36e-05  1.94e-02  8.03e-01  
  7  +4.9745e-01  +9.7432e-01  4.77e-01  3.40e-04  8.67e-02  1.24e-03  9.27e-04  9.61e-01  
  8  +4.9083e-01  +9.1219e-01  4.21e-01  1.22e-04  3.11e-02  2.72e-03  3.29e-04  6.80e-01  
  9  +4.8583e-01  +8.5463e-01  3.69e-01  1.03e-04  2.62e-02  1.80e-03  2.82e-04  3.12e-01  
 10  +4.8162e-01  +8.2484e-01  3.43e-01  8.72e-05  2.22e-02  1.53e-03  2.41e-04  2.47e-01  
 11  +4.7890e-01  +8.0097e-01  3.22e-01  8.39e-05  2.13e-02  1.21e-03  2.33e-04  1.22e-01  
 12  +4.6392e-01  +7.0260e-01  2.39e-01  5.67e-05  1.43e-02  4.31e-04  1.64e-04  5.76e-01  
 13  +4.5391e-01  +6.5328e-01  1.99e-01  4.39e-05  1.11e-02  3.45e-04  1.31e-04  2.32e-01  
 14  +4.5089e-01  +6.3522e-01  1.84e-01  4.15e-05  1.05e-02  2.10e-04  1.25e-04  2.95e-01  
 15  +4.3232e-01  +5.5035e-01  1.18e-01  2.42e-05  6.08e-03  1.20e-04  7.72e-05  4.20e-01  
 16  +4.1570e-01  +4.7702e-01  6.13e-02  1.20e-05  3.01e-03  4.52e-05  4.06e-05  5.88e-01  
 17  +4.1296e-01  +4.6521e-01  5.23e-02  1.01e-05  2.53e-03  3.40e-05  3.44e-05  2.67e-01  
 18  +4.0769e-01  +4.4352e-01  3.58e-02  6.81e-06  1.71e-03  2.10e-05  2.37e-05  3.85e-01  
 19  +4.0115e-01  +4.1600e-01  1.48e-02  2.77e-06  6.93e-04  2.22e-06  9.89e-06  9.44e-01  
 20  +3.9673e-01  +3.9986e-01  3.13e-03  5.76e-07  1.44e-04  4.24e-07  2.12e-06  8.27e-01  
 21  +3.9559e-01  +3.9580e-01  2.15e-04  3.95e-08  9.89e-06  2.19e-08  1.46e-07  9.61e-01  
 22  +3.9550e-01  +3.9550e-01  2.20e-06  4.04e-10  1.01e-07  2.23e-10  1.50e-09  9.90e-01  
 23  +3.9550e-01  +3.9550e-01  2.20e-08  4.04e-12  1.01e-09  2.23e-12  1.50e-11  9.90e-01  
 24  +3.9550e-01  +3.9550e-01  2.20e-10  4.03e-14  1.01e-11  2.26e-14  1.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 247.5629ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:36 PM: Optimal value: 3.955e-01
(CVXPY) Oct 06 04:28:36 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:28:36 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 19, Objective: 0.3955
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:37 PM: Your problem has 5211 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:37 PM: Finished problem compilation (took 6.248e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5211
  constraints   = 10211
  nnz(P)        = 0
  nnz(A)        = 86519
  cones (total) = 1
    : Nonnegative = 1,  numel = 10211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7720e-01  +1.0990e+03  1.10e+03  4.46e-01  8.16e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2851e-01  +1.1878e+02  1.18e+02  1.77e-01  4.11e+01  1.80e-02  2.86e-01  9.66e-01  
  3  +5.0816e-01  +3.0722e+01  3.02e+01  1.22e-01  2.87e+01  5.13e-05  2.57e-01  3.74e-01  
  4  +5.0110e-01  +3.2739e+00  2.77e+00  1.91e-02  4.63e+00  6.37e-06  1.55e-01  6.34e-01  
  5  +5.0034e-01  +1.5851e+00  1.08e+00  7.34e-03  1.81e+00  4.56e-05  8.60e-02  8.24e-01  
  6  +5.0004e-01  +9.5616e-01  4.56e-01  2.86e-03  7.12e-01  6.53e-05  1.89e-02  8.07e-01  
  7  +4.9745e-01  +9.7800e-01  4.81e-01  3.40e-04  8.67e-02  1.24e-03  9.24e-04  9.59e-01  
  8  +4.9085e-01  +9.1724e-01  4.26e-01  1.23e-04  3.14e-02  2.72e-03  3.31e-04  6.77e-01  
  9  +4.8538e-01  +8.5666e-01  3.71e-01  1.03e-04  2.61e-02  1.82e-03  2.80e-04  3.13e-01  
 10  +4.8238e-01  +8.3513e-01  3.53e-01  9.12e-05  2.32e-02  1.57e-03  2.50e-04  2.02e-01  
 11  +4.7906e-01  +8.0962e-01  3.31e-01  8.48e-05  2.15e-02  1.28e-03  2.35e-04  1.48e-01  
 12  +4.4922e-01  +6.2450e-01  1.75e-01  3.67e-05  9.24e-03  3.46e-04  1.09e-04  7.12e-01  
 13  +4.4687e-01  +6.1666e-01  1.70e-01  3.46e-05  8.71e-03  3.08e-04  1.04e-04  1.28e-01  
 14  +4.3640e-01  +5.6893e-01  1.33e-01  2.72e-05  6.83e-03  1.09e-04  8.51e-05  5.65e-01  
 15  +4.2481e-01  +5.1856e-01  9.37e-02  1.88e-05  4.72e-03  6.41e-05  6.14e-05  3.69e-01  
 16  +4.1542e-01  +4.7892e-01  6.35e-02  1.25e-05  3.12e-03  3.83e-05  4.20e-05  3.87e-01  
 17  +4.1078e-01  +4.5775e-01  4.70e-02  8.96e-06  2.24e-03  1.46e-05  3.07e-05  6.87e-01  
 18  +4.0537e-01  +4.3641e-01  3.10e-02  5.87e-06  1.47e-03  8.55e-06  2.06e-05  4.27e-01  
 19  +3.9673e-01  +4.0290e-01  6.16e-03  1.15e-06  2.88e-04  1.23e-06  4.21e-06  8.65e-01  
 20  +3.9524e-01  +3.9742e-01  2.18e-03  4.03e-07  1.01e-04  3.48e-07  1.49e-06  7.49e-01  
 21  +3.9442e-01  +3.9448e-01  5.64e-05  1.04e-08  2.60e-06  8.33e-09  3.87e-08  9.77e-01  
 22  +3.9440e-01  +3.9440e-01  5.65e-07  1.04e-10  2.61e-08  8.34e-11  3.87e-10  9.90e-01  
 23  +3.9440e-01  +3.9440e-01  5.65e-09  1.04e-12  2.61e-10  8.39e-13  3.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 230.8503ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:37 PM: Optimal value: 3.944e-01
(CVXPY) Oct 06 04:28:37 PM: Compilation took 6.248e-02 seconds
(CVXPY) Oct 06 04:28:37 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 20, Objective: 0.3944
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:37 PM: Your problem has 5221 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:37 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5221
  constraints   = 10221
  nnz(P)        = 0
  nnz(A)        = 87031
  cones (total) = 1
    : Nonnegative = 1,  numel = 10221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7713e-01  +1.0989e+03  1.10e+03  4.46e-01  8.15e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2846e-01  +1.1868e+02  1.18e+02  1.76e-01  4.10e+01  1.80e-02  2.86e-01  9.67e-01  
  3  +5.0816e-01  +3.0704e+01  3.02e+01  1.22e-01  2.86e+01  5.14e-05  2.56e-01  3.75e-01  
  4  +5.0110e-01  +3.2697e+00  2.77e+00  1.91e-02  4.62e+00  6.38e-06  1.54e-01  6.35e-01  
  5  +5.0032e-01  +1.5461e+00  1.05e+00  7.07e-03  1.74e+00  4.76e-05  8.16e-02  8.67e-01  
  6  +5.0003e-01  +9.6900e-01  4.69e-01  2.85e-03  7.10e-01  7.52e-05  1.67e-02  8.21e-01  
  7  +4.9729e-01  +9.7693e-01  4.80e-01  3.24e-04  8.27e-02  1.31e-03  8.79e-04  9.52e-01  
  8  +4.9045e-01  +9.1393e-01  4.23e-01  1.21e-04  3.09e-02  2.72e-03  3.26e-04  6.69e-01  
  9  +4.8467e-01  +8.5267e-01  3.68e-01  1.01e-04  2.56e-02  1.72e-03  2.75e-04  3.43e-01  
 10  +4.8037e-01  +8.2131e-01  3.41e-01  8.72e-05  2.21e-02  1.27e-03  2.41e-04  2.95e-01  
 11  +4.7099e-01  +7.4144e-01  2.70e-01  7.38e-05  1.87e-02  1.47e-04  2.11e-04  6.21e-01  
 12  +4.5688e-01  +6.6919e-01  2.12e-01  5.01e-05  1.26e-02  1.06e-04  1.49e-04  3.75e-01  
 13  +4.5420e-01  +6.5552e-01  2.01e-01  4.80e-05  1.21e-02  7.18e-05  1.44e-04  2.58e-01  
 14  +4.3400e-01  +5.6183e-01  1.28e-01  2.72e-05  6.81e-03  4.07e-05  8.65e-05  4.42e-01  
 15  +4.2285e-01  +5.1287e-01  9.00e-02  1.85e-05  4.62e-03  2.36e-05  6.10e-05  4.09e-01  
 16  +4.1502e-01  +4.7929e-01  6.43e-02  1.28e-05  3.21e-03  1.45e-05  4.36e-05  4.02e-01  
 17  +4.0938e-01  +4.5271e-01  4.33e-02  8.30e-06  2.08e-03  3.18e-06  2.86e-05  9.90e-01  
 18  +4.0240e-01  +4.2557e-01  2.32e-02  4.41e-06  1.10e-03  1.57e-06  1.57e-05  8.17e-01  
 19  +3.9682e-01  +4.0427e-01  7.45e-03  1.42e-06  3.55e-04  4.98e-07  5.21e-06  7.11e-01  
 20  +3.9446e-01  +3.9540e-01  9.37e-04  1.78e-07  4.45e-05  5.62e-08  6.64e-07  9.79e-01  
 21  +3.9411e-01  +3.9412e-01  1.63e-05  3.09e-09  7.73e-07  9.72e-10  1.15e-08  9.84e-01  
 22  +3.9410e-01  +3.9410e-01  1.63e-07  3.10e-11  7.76e-09  9.76e-12  1.16e-10  9.90e-01  
 23  +3.9410e-01  +3.9410e-01  1.64e-09  3.11e-13  7.77e-11  9.77e-14  1.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 239.662ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:38 PM: Optimal value: 3.941e-01
(CVXPY) Oct 06 04:28:38 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:28:38 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 21, Objective: 0.3941
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:38 PM: Your problem has 5231 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:38 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5231
  constraints   = 10231
  nnz(P)        = 0
  nnz(A)        = 87301
  cones (total) = 1
    : Nonnegative = 1,  numel = 10231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7706e-01  +1.0990e+03  1.10e+03  4.46e-01  8.15e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2840e-01  +1.1857e+02  1.18e+02  1.76e-01  4.09e+01  1.80e-02  2.86e-01  9.67e-01  
  3  +5.0815e-01  +3.0678e+01  3.02e+01  1.22e-01  2.86e+01  5.15e-05  2.56e-01  3.77e-01  
  4  +5.0110e-01  +3.2703e+00  2.77e+00  1.91e-02  4.62e+00  6.38e-06  1.54e-01  6.35e-01  
  5  +5.0032e-01  +1.5522e+00  1.05e+00  7.11e-03  1.75e+00  4.81e-05  8.04e-02  8.74e-01  
  6  +5.0001e-01  +9.5192e-01  4.52e-01  2.69e-03  6.72e-01  7.95e-05  1.49e-02  8.42e-01  
  7  +4.9719e-01  +9.5721e-01  4.60e-01  3.02e-04  7.70e-02  1.34e-03  8.16e-04  9.49e-01  
  8  +4.9005e-01  +8.9653e-01  4.06e-01  1.14e-04  2.90e-02  2.76e-03  3.05e-04  6.68e-01  
  9  +4.8623e-01  +8.5960e-01  3.73e-01  1.02e-04  2.60e-02  2.05e-03  2.77e-04  2.32e-01  
 10  +4.8514e-01  +8.5300e-01  3.68e-01  9.81e-05  2.50e-02  1.99e-03  2.66e-04  6.08e-02  
 11  +4.7898e-01  +8.1431e-01  3.35e-01  8.15e-05  2.07e-02  1.59e-03  2.24e-04  2.77e-01  
 12  +4.6457e-01  +7.1739e-01  2.53e-01  6.12e-05  1.54e-02  5.07e-04  1.76e-04  5.08e-01  
 13  +4.5826e-01  +6.8602e-01  2.28e-01  5.24e-05  1.32e-02  4.31e-04  1.54e-04  1.67e-01  
 14  +4.5424e-01  +6.6202e-01  2.08e-01  4.92e-05  1.24e-02  2.21e-04  1.47e-04  3.61e-01  
 15  +4.3381e-01  +5.6529e-01  1.31e-01  2.80e-05  7.02e-03  1.22e-04  8.88e-05  4.39e-01  
 16  +4.2186e-01  +5.1193e-01  9.01e-02  1.85e-05  4.63e-03  6.65e-05  6.11e-05  4.26e-01  
 17  +4.1408e-01  +4.7810e-01  6.40e-02  1.28e-05  3.19e-03  3.90e-05  4.34e-05  4.18e-01  
 18  +4.0861e-01  +4.5197e-01  4.34e-02  8.31e-06  2.08e-03  4.44e-06  2.86e-05  9.90e-01  
 19  +4.0194e-01  +4.2610e-01  2.42e-02  4.58e-06  1.14e-03  1.88e-06  1.63e-05  8.21e-01  
 20  +3.9643e-01  +4.0543e-01  8.99e-03  1.69e-06  4.22e-04  6.95e-07  6.20e-06  6.44e-01  
 21  +3.9349e-01  +3.9452e-01  1.03e-03  1.92e-07  4.81e-05  7.47e-08  7.21e-07  9.14e-01  
 22  +3.9310e-01  +3.9312e-01  1.18e-05  2.20e-09  5.51e-07  8.55e-10  8.28e-09  9.89e-01  
 23  +3.9310e-01  +3.9310e-01  1.18e-07  2.20e-11  5.51e-09  8.56e-12  8.29e-11  9.90e-01  
 24  +3.9310e-01  +3.9310e-01  1.18e-09  2.20e-13  5.51e-11  8.57e-14  8.30e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 245.4195ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:38 PM: Optimal value: 3.931e-01
(CVXPY) Oct 06 04:28:38 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:28:38 PM: Solver (including time spent in interface) took 2.662e-01 seconds
Iteration: 22, Objective: 0.3931
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:38 PM: Your problem has 5241 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:39 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:39 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5241
  constraints   = 10241
  nnz(P)        = 0
  nnz(A)        = 87673
  cones (total) = 1
    : Nonnegative = 1,  numel = 10241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7698e-01  +1.0991e+03  1.10e+03  4.46e-01  8.14e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2833e-01  +1.1844e+02  1.18e+02  1.76e-01  4.08e+01  1.80e-02  2.86e-01  9.68e-01  
  3  +5.0814e-01  +3.0648e+01  3.01e+01  1.22e-01  2.85e+01  5.16e-05  2.55e-01  3.79e-01  
  4  +5.0110e-01  +3.2706e+00  2.77e+00  1.91e-02  4.62e+00  6.39e-06  1.53e-01  6.36e-01  
  5  +5.0033e-01  +1.5733e+00  1.07e+00  7.26e-03  1.79e+00  4.85e-05  7.97e-02  8.73e-01  
  6  +5.0004e-01  +1.0142e+00  5.14e-01  3.09e-03  7.69e-01  7.83e-05  1.71e-02  8.10e-01  
  7  +4.9736e-01  +1.0126e+00  5.15e-01  3.47e-04  8.85e-02  1.28e-03  9.34e-04  9.51e-01  
  8  +4.9047e-01  +9.4370e-01  4.53e-01  1.27e-04  3.23e-02  2.71e-03  3.38e-04  6.77e-01  
  9  +4.8315e-01  +8.6555e-01  3.82e-01  9.98e-05  2.53e-02  1.63e-03  2.72e-04  3.91e-01  
 10  +4.8180e-01  +8.5069e-01  3.69e-01  9.70e-05  2.46e-02  1.36e-03  2.65e-04  1.21e-01  
 11  +4.6971e-01  +7.5953e-01  2.90e-01  7.32e-05  1.85e-02  6.40e-04  2.08e-04  4.34e-01  
 12  +4.5392e-01  +6.7243e-01  2.19e-01  4.95e-05  1.25e-02  4.19e-04  1.47e-04  3.65e-01  
 13  +4.5170e-01  +6.5903e-01  2.07e-01  4.80e-05  1.21e-02  3.11e-04  1.44e-04  1.75e-01  
 14  +4.3159e-01  +5.6285e-01  1.31e-01  2.76e-05  6.92e-03  1.65e-04  8.78e-05  4.50e-01  
 15  +4.2047e-01  +5.1181e-01  9.13e-02  1.86e-05  4.66e-03  8.91e-05  6.16e-05  4.36e-01  
 16  +4.1127e-01  +4.7099e-01  5.97e-02  1.19e-05  2.97e-03  4.40e-05  4.06e-05  5.04e-01  
 17  +4.0002e-01  +4.2309e-01  2.31e-02  4.45e-06  1.11e-03  1.10e-05  1.60e-05  7.56e-01  
 18  +3.9759e-01  +4.1189e-01  1.43e-02  2.72e-06  6.81e-04  1.24e-06  9.85e-06  9.90e-01  
 19  +3.9332e-01  +3.9641e-01  3.09e-03  5.83e-07  1.46e-04  2.55e-07  2.17e-06  8.19e-01  
 20  +3.9220e-01  +3.9244e-01  2.44e-04  4.57e-08  1.14e-05  1.83e-08  1.72e-07  9.44e-01  
 21  +3.9210e-01  +3.9210e-01  2.55e-06  4.76e-10  1.19e-07  1.91e-10  1.80e-09  9.90e-01  
 22  +3.9210e-01  +3.9210e-01  2.55e-08  4.76e-12  1.19e-09  1.91e-12  1.80e-11  9.90e-01  
 23  +3.9210e-01  +3.9210e-01  2.55e-10  4.77e-14  1.19e-11  1.93e-14  1.81e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 302.3911ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:39 PM: Optimal value: 3.921e-01
(CVXPY) Oct 06 04:28:39 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:28:39 PM: Solver (including time spent in interface) took 3.281e-01 seconds
Iteration: 23, Objective: 0.3921
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:39 PM: Your problem has 5246 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:39 PM: Finished problem compilation (took 7.813e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5246
  constraints   = 10246
  nnz(P)        = 0
  nnz(A)        = 87913
  cones (total) = 1
    : Nonnegative = 1,  numel = 10246

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7695e-01  +1.0990e+03  1.10e+03  4.46e-01  8.14e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2831e-01  +1.1840e+02  1.18e+02  1.76e-01  4.08e+01  1.80e-02  2.85e-01  9.69e-01  
  3  +5.0813e-01  +3.0635e+01  3.01e+01  1.21e-01  2.85e+01  5.16e-05  2.55e-01  3.80e-01  
  4  +5.0109e-01  +3.2683e+00  2.77e+00  1.91e-02  4.62e+00  6.40e-06  1.53e-01  6.37e-01  
  5  +5.0033e-01  +1.5784e+00  1.08e+00  7.29e-03  1.79e+00  4.87e-05  7.90e-02  8.76e-01  
  6  +5.0003e-01  +1.0083e+00  5.08e-01  3.02e-03  7.53e-01  8.01e-05  1.63e-02  8.20e-01  
  7  +4.9734e-01  +1.0075e+00  5.10e-01  3.40e-04  8.68e-02  1.28e-03  9.15e-04  9.49e-01  
  8  +4.9033e-01  +9.3798e-01  4.48e-01  1.24e-04  3.17e-02  2.70e-03  3.31e-04  6.79e-01  
  9  +4.8379e-01  +8.6921e-01  3.85e-01  1.02e-04  2.58e-02  1.67e-03  2.77e-04  3.56e-01  
 10  +4.8120e-01  +8.4515e-01  3.64e-01  9.70e-05  2.46e-02  1.35e-03  2.66e-04  1.33e-01  
 11  +4.6993e-01  +7.6296e-01  2.93e-01  7.44e-05  1.88e-02  6.36e-04  2.10e-04  4.50e-01  
 12  +4.5292e-01  +6.6914e-01  2.16e-01  4.88e-05  1.23e-02  4.02e-04  1.45e-04  3.87e-01  
 13  +4.5038e-01  +6.5400e-01  2.04e-01  4.69e-05  1.18e-02  2.83e-04  1.41e-04  2.12e-01  
 14  +4.3110e-01  +5.6269e-01  1.32e-01  2.76e-05  6.93e-03  1.42e-04  8.80e-05  4.75e-01  
 15  +4.1908e-01  +5.0796e-01  8.89e-02  1.81e-05  4.53e-03  8.00e-05  6.02e-05  4.07e-01  
 16  +4.1216e-01  +4.7666e-01  6.45e-02  1.28e-05  3.21e-03  4.39e-05  4.38e-05  4.61e-01  
 17  +3.9903e-01  +4.2086e-01  2.18e-02  4.20e-06  1.05e-03  8.14e-06  1.52e-05  8.22e-01  
 18  +3.9775e-01  +4.1500e-01  1.73e-02  3.32e-06  8.29e-04  3.99e-06  1.21e-05  5.63e-01  
 19  +3.9750e-01  +4.1398e-01  1.65e-02  3.16e-06  7.90e-04  3.48e-06  1.16e-05  1.69e-01  
 20  +3.9647e-01  +4.1012e-01  1.36e-02  2.60e-06  6.50e-04  2.46e-06  9.55e-06  3.58e-01  
 21  +3.9243e-01  +3.9519e-01  2.76e-03  5.23e-07  1.31e-04  4.51e-07  1.98e-06  8.20e-01  
 22  +3.9143e-01  +3.9150e-01  7.10e-05  1.34e-08  3.35e-06  6.90e-09  5.12e-08  9.90e-01  
 23  +3.9140e-01  +3.9140e-01  7.10e-07  1.34e-10  3.36e-08  6.91e-11  5.13e-10  9.90e-01  
 24  +3.9140e-01  +3.9140e-01  7.10e-09  1.34e-12  3.36e-10  6.93e-13  5.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 261.4808ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:39 PM: Optimal value: 3.914e-01
(CVXPY) Oct 06 04:28:39 PM: Compilation took 7.813e-02 seconds
(CVXPY) Oct 06 04:28:39 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 24, Objective: 0.3914
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:40 PM: Your problem has 5256 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:40 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5256
  constraints   = 10256
  nnz(P)        = 0
  nnz(A)        = 88190
  cones (total) = 1
    : Nonnegative = 1,  numel = 10256

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7690e-01  +1.0990e+03  1.10e+03  4.46e-01  8.13e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2826e-01  +1.1829e+02  1.18e+02  1.76e-01  4.07e+01  1.80e-02  2.85e-01  9.69e-01  
  3  +5.0812e-01  +3.0609e+01  3.01e+01  1.21e-01  2.84e+01  5.17e-05  2.55e-01  3.81e-01  
  4  +5.0109e-01  +3.2657e+00  2.76e+00  1.91e-02  4.61e+00  6.40e-06  1.53e-01  6.38e-01  
  5  +5.0036e-01  +1.6545e+00  1.15e+00  7.81e-03  1.92e+00  4.79e-05  8.13e-02  8.40e-01  
  6  +5.0004e-01  +1.0012e+00  5.01e-01  2.99e-03  7.44e-01  7.71e-05  1.62e-02  8.36e-01  
  7  +4.9745e-01  +1.0056e+00  5.08e-01  3.45e-04  8.79e-02  1.23e-03  9.25e-04  9.48e-01  
  8  +4.9068e-01  +9.3952e-01  4.49e-01  1.27e-04  3.24e-02  2.59e-03  3.38e-04  6.77e-01  
  9  +4.8438e-01  +8.7475e-01  3.90e-01  1.06e-04  2.68e-02  1.69e-03  2.87e-04  3.20e-01  
 10  +4.8248e-01  +8.5867e-01  3.76e-01  1.01e-04  2.57e-02  1.49e-03  2.76e-04  1.01e-01  
 11  +4.6177e-01  +7.1503e-01  2.53e-01  5.79e-05  1.46e-02  3.73e-04  1.66e-04  7.19e-01  
 12  +4.5485e-01  +6.8150e-01  2.27e-01  4.96e-05  1.25e-02  3.10e-04  1.45e-04  1.75e-01  
 13  +4.4846e-01  +6.4651e-01  1.98e-01  4.54e-05  1.14e-02  1.37e-04  1.37e-04  4.09e-01  
 14  +4.2953e-01  +5.5736e-01  1.28e-01  2.70e-05  6.77e-03  7.39e-05  8.64e-05  4.43e-01  
 15  +4.1999e-01  +5.1438e-01  9.44e-02  1.95e-05  4.87e-03  4.87e-05  6.44e-05  3.20e-01  
 16  +4.1112e-01  +4.7467e-01  6.35e-02  1.28e-05  3.19e-03  2.57e-05  4.36e-05  4.79e-01  
 17  +4.0087e-01  +4.3065e-01  2.98e-02  5.81e-06  1.45e-03  8.64e-06  2.07e-05  6.81e-01  
 18  +3.9656e-01  +4.1215e-01  1.56e-02  2.99e-06  7.47e-04  1.44e-06  1.10e-05  9.34e-01  
 19  +3.9486e-01  +4.0561e-01  1.08e-02  2.06e-06  5.14e-04  8.90e-07  7.64e-06  5.13e-01  
 20  +3.9322e-01  +3.9953e-01  6.31e-03  1.20e-06  3.00e-04  4.59e-07  4.50e-06  6.77e-01  
 21  +3.9117e-01  +3.9214e-01  9.68e-04  1.84e-07  4.59e-05  6.98e-08  7.00e-07  8.47e-01  
 22  +3.9080e-01  +3.9082e-01  1.10e-05  2.08e-09  5.19e-07  7.71e-10  7.96e-09  9.90e-01  
 23  +3.9080e-01  +3.9080e-01  1.10e-07  2.08e-11  5.19e-09  7.72e-12  7.96e-11  9.90e-01  
 24  +3.9080e-01  +3.9080e-01  1.10e-09  2.08e-13  5.20e-11  7.75e-14  7.99e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 251.2602ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:40 PM: Optimal value: 3.908e-01
(CVXPY) Oct 06 04:28:40 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:28:40 PM: Solver (including time spent in interface) took 2.660e-01 seconds
Iteration: 25, Objective: 0.3908
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:40 PM: Your problem has 5266 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:40 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5266
  constraints   = 10266
  nnz(P)        = 0
  nnz(A)        = 88394
  cones (total) = 1
    : Nonnegative = 1,  numel = 10266

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7685e-01  +1.0990e+03  1.10e+03  4.46e-01  8.12e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2824e-01  +1.1824e+02  1.18e+02  1.76e-01  4.06e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0812e-01  +3.0602e+01  3.01e+01  1.21e-01  2.84e+01  5.17e-05  2.54e-01  3.82e-01  
  4  +5.0109e-01  +3.2664e+00  2.77e+00  1.91e-02  4.61e+00  6.41e-06  1.52e-01  6.38e-01  
  5  +5.0037e-01  +1.6699e+00  1.17e+00  7.91e-03  1.94e+00  4.81e-05  8.13e-02  8.37e-01  
  6  +5.0004e-01  +1.0116e+00  5.12e-01  3.05e-03  7.59e-01  7.75e-05  1.64e-02  8.29e-01  
  7  +4.9748e-01  +1.0150e+00  5.18e-01  3.53e-04  9.01e-02  1.22e-03  9.48e-04  9.48e-01  
  8  +4.9086e-01  +9.4772e-01  4.57e-01  1.32e-04  3.36e-02  2.53e-03  3.50e-04  6.73e-01  
  9  +4.8407e-01  +8.7661e-01  3.93e-01  1.07e-04  2.71e-02  1.59e-03  2.90e-04  3.58e-01  
 10  +4.8220e-01  +8.5992e-01  3.78e-01  1.02e-04  2.60e-02  1.39e-03  2.80e-04  9.91e-02  
 11  +4.7297e-01  +7.9348e-01  3.21e-01  8.08e-05  2.04e-02  8.15e-04  2.26e-04  3.99e-01  
 12  +4.5175e-01  +6.6986e-01  2.18e-01  4.84e-05  1.22e-02  4.50e-04  1.43e-04  4.46e-01  
 13  +4.4922e-01  +6.5464e-01  2.05e-01  4.70e-05  1.18e-02  3.36e-04  1.41e-04  1.56e-01  
 14  +4.3205e-01  +5.7335e-01  1.41e-01  2.99e-05  7.48e-03  1.66e-04  9.46e-05  4.84e-01  
 15  +4.2082e-01  +5.2126e-01  1.00e-01  2.07e-05  5.16e-03  9.82e-05  6.81e-05  3.79e-01  
 16  +4.1038e-01  +4.7367e-01  6.33e-02  1.27e-05  3.16e-03  4.22e-05  4.35e-05  5.67e-01  
 17  +4.0097e-01  +4.3296e-01  3.20e-02  6.25e-06  1.56e-03  1.44e-05  2.23e-05  6.76e-01  
 18  +3.9615e-01  +4.1204e-01  1.59e-02  3.06e-06  7.64e-04  1.29e-06  1.12e-05  9.90e-01  
 19  +3.9291e-01  +3.9981e-01  6.90e-03  1.33e-06  3.31e-04  5.32e-07  4.97e-06  6.46e-01  
 20  +3.9197e-01  +3.9641e-01  4.43e-03  8.50e-07  2.12e-04  3.13e-07  3.20e-06  5.74e-01  
 21  +3.9036e-01  +3.9053e-01  1.66e-04  3.18e-08  7.94e-06  1.15e-08  1.21e-07  9.66e-01  
 22  +3.9030e-01  +3.9030e-01  1.66e-06  3.19e-10  7.95e-08  1.15e-10  1.21e-09  9.90e-01  
 23  +3.9030e-01  +3.9030e-01  1.66e-08  3.19e-12  7.95e-10  1.15e-12  1.22e-11  9.90e-01  
 24  +3.9030e-01  +3.9030e-01  1.66e-10  3.19e-14  7.95e-12  1.15e-14  1.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 255.393ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:41 PM: Optimal value: 3.903e-01
(CVXPY) Oct 06 04:28:41 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:28:41 PM: Solver (including time spent in interface) took 2.812e-01 seconds
Iteration: 26, Objective: 0.3903
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:41 PM: Your problem has 5276 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:41 PM: Finished problem compilation (took 7.814e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5276
  constraints   = 10276
  nnz(P)        = 0
  nnz(A)        = 88694
  cones (total) = 1
    : Nonnegative = 1,  numel = 10276

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7676e-01  +1.0992e+03  1.10e+03  4.47e-01  8.12e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2818e-01  +1.1814e+02  1.18e+02  1.76e-01  4.05e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0811e-01  +3.0579e+01  3.01e+01  1.21e-01  2.83e+01  5.18e-05  2.54e-01  3.84e-01  
  4  +5.0109e-01  +3.2676e+00  2.77e+00  1.91e-02  4.61e+00  6.42e-06  1.52e-01  6.39e-01  
  5  +5.0034e-01  +1.6102e+00  1.11e+00  7.49e-03  1.84e+00  5.11e-05  7.56e-02  8.95e-01  
  6  +5.0000e-01  +1.0151e+00  5.15e-01  2.82e-03  7.05e-01  9.81e-05  1.28e-02  8.67e-01  
  7  +4.9710e-01  +1.0092e+00  5.12e-01  3.16e-04  8.05e-02  1.37e-03  8.45e-04  9.37e-01  
  8  +4.8960e-01  +9.3702e-01  4.47e-01  1.21e-04  3.08e-02  2.68e-03  3.21e-04  6.69e-01  
  9  +4.8632e-01  +9.0480e-01  4.18e-01  1.12e-04  2.84e-02  2.16e-03  3.00e-04  1.65e-01  
 10  +4.8123e-01  +8.6172e-01  3.80e-01  9.71e-05  2.46e-02  1.15e-03  2.64e-04  4.23e-01  
 11  +4.6492e-01  +7.3878e-01  2.74e-01  7.11e-05  1.79e-02  1.87e-04  2.05e-04  6.07e-01  
 12  +4.5529e-01  +6.8897e-01  2.34e-01  5.60e-05  1.41e-02  1.51e-04  1.66e-04  2.30e-01  
 13  +4.5234e-01  +6.7275e-01  2.20e-01  5.41e-05  1.36e-02  1.07e-04  1.62e-04  2.08e-01  
 14  +4.2804e-01  +5.5442e-01  1.26e-01  2.72e-05  6.81e-03  4.73e-05  8.79e-05  5.49e-01  
 15  +4.1844e-01  +5.1170e-01  9.33e-02  1.95e-05  4.86e-03  2.88e-05  6.50e-05  3.92e-01  
 16  +4.1051e-01  +4.7678e-01  6.63e-02  1.35e-05  3.36e-03  1.55e-05  4.63e-05  4.95e-01  
 17  +4.0097e-01  +4.3639e-01  3.54e-02  7.03e-06  1.75e-03  6.69e-06  2.52e-05  5.94e-01  
 18  +3.9819e-01  +4.2479e-01  2.66e-02  5.23e-06  1.30e-03  4.45e-06  1.90e-05  3.80e-01  
 19  +3.9254e-01  +4.0215e-01  9.61e-03  1.87e-06  4.66e-04  1.42e-06  7.00e-06  6.95e-01  
 20  +3.8959e-01  +3.9063e-01  1.04e-03  2.01e-07  5.00e-05  1.04e-07  7.68e-07  9.47e-01  
 21  +3.8921e-01  +3.8922e-01  1.49e-05  2.87e-09  7.16e-07  1.32e-09  1.11e-08  9.89e-01  
 22  +3.8920e-01  +3.8920e-01  1.50e-07  2.89e-11  7.20e-09  1.33e-11  1.11e-10  9.90e-01  
 23  +3.8920e-01  +3.8920e-01  1.50e-09  2.89e-13  7.20e-11  1.34e-13  1.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 246.8955ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:41 PM: Optimal value: 3.892e-01
(CVXPY) Oct 06 04:28:41 PM: Compilation took 7.814e-02 seconds
(CVXPY) Oct 06 04:28:41 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 27, Objective: 0.3892
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:42 PM: Your problem has 5286 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:42 PM: Finished problem compilation (took 7.811e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5286
  constraints   = 10286
  nnz(P)        = 0
  nnz(A)        = 89105
  cones (total) = 1
    : Nonnegative = 1,  numel = 10286

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7672e-01  +1.0992e+03  1.10e+03  4.47e-01  8.11e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2815e-01  +1.1808e+02  1.18e+02  1.76e-01  4.05e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0811e-01  +3.0567e+01  3.01e+01  1.21e-01  2.83e+01  5.19e-05  2.54e-01  3.85e-01  
  4  +5.0109e-01  +3.2675e+00  2.77e+00  1.91e-02  4.61e+00  6.42e-06  1.52e-01  6.40e-01  
  5  +5.0034e-01  +1.6312e+00  1.13e+00  7.64e-03  1.87e+00  5.11e-05  7.58e-02  8.88e-01  
  6  +5.0000e-01  +1.0260e+00  5.26e-01  2.89e-03  7.22e-01  9.70e-05  1.32e-02  8.61e-01  
  7  +4.9716e-01  +1.0202e+00  5.23e-01  3.25e-04  8.29e-02  1.34e-03  8.69e-04  9.36e-01  
  8  +4.8970e-01  +9.4728e-01  4.58e-01  1.23e-04  3.13e-02  2.69e-03  3.26e-04  6.73e-01  
  9  +4.8575e-01  +9.0929e-01  4.24e-01  1.11e-04  2.82e-02  2.12e-03  2.98e-04  1.95e-01  
 10  +4.8043e-01  +8.6198e-01  3.82e-01  9.87e-05  2.50e-02  1.18e-03  2.69e-04  3.62e-01  
 11  +4.6503e-01  +7.5017e-01  2.85e-01  7.20e-05  1.82e-02  3.66e-04  2.06e-04  5.31e-01  
 12  +4.5488e-01  +6.9554e-01  2.41e-01  5.67e-05  1.43e-02  2.90e-04  1.67e-04  2.27e-01  
 13  +4.5014e-01  +6.6818e-01  2.18e-01  5.26e-05  1.32e-02  1.42e-04  1.59e-04  3.87e-01  
 14  +4.2828e-01  +5.6065e-01  1.32e-01  2.87e-05  7.18e-03  6.99e-05  9.25e-05  4.94e-01  
 15  +4.1682e-01  +5.0869e-01  9.19e-02  1.92e-05  4.80e-03  4.01e-05  6.46e-05  4.09e-01  
 16  +4.0921e-01  +4.7435e-01  6.51e-02  1.33e-05  3.31e-03  2.08e-05  4.59e-05  5.05e-01  
 17  +3.9986e-01  +4.3428e-01  3.44e-02  6.85e-06  1.71e-03  8.66e-06  2.47e-05  5.98e-01  
 18  +3.9412e-01  +4.1039e-01  1.63e-02  3.19e-06  7.95e-04  3.23e-06  1.19e-05  6.55e-01  
 19  +3.8931e-01  +3.9116e-01  1.86e-03  3.61e-07  9.00e-05  1.28e-07  1.39e-06  9.90e-01  
 20  +3.8861e-01  +3.8864e-01  2.78e-05  5.40e-09  1.35e-06  1.76e-09  2.09e-08  9.90e-01  
 21  +3.8860e-01  +3.8860e-01  2.79e-07  5.42e-11  1.35e-08  1.77e-11  2.10e-10  9.90e-01  
 22  +3.8860e-01  +3.8860e-01  2.89e-09  5.60e-13  1.40e-10  1.84e-13  2.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 238.4492ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:42 PM: Optimal value: 3.886e-01
(CVXPY) Oct 06 04:28:42 PM: Compilation took 7.811e-02 seconds
(CVXPY) Oct 06 04:28:42 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 28, Objective: 0.3886
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:42 PM: Your problem has 5293 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:42 PM: Finished problem compilation (took 9.375e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5293
  constraints   = 10293
  nnz(P)        = 0
  nnz(A)        = 89474
  cones (total) = 1
    : Nonnegative = 1,  numel = 10293

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7672e-01  +1.0992e+03  1.10e+03  4.47e-01  8.11e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2813e-01  +1.1804e+02  1.18e+02  1.76e-01  4.04e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0810e-01  +3.0555e+01  3.00e+01  1.21e-01  2.82e+01  5.19e-05  2.54e-01  3.85e-01  
  4  +5.0109e-01  +3.2661e+00  2.76e+00  1.91e-02  4.61e+00  6.42e-06  1.51e-01  6.40e-01  
  5  +5.0036e-01  +1.6727e+00  1.17e+00  7.92e-03  1.94e+00  5.03e-05  7.75e-02  8.65e-01  
  6  +5.0002e-01  +1.0255e+00  5.25e-01  2.95e-03  7.35e-01  9.12e-05  1.39e-02  8.53e-01  
  7  +4.9729e-01  +1.0225e+00  5.25e-01  3.36e-04  8.56e-02  1.29e-03  8.97e-04  9.38e-01  
  8  +4.9008e-01  +9.5252e-01  4.62e-01  1.26e-04  3.20e-02  2.64e-03  3.33e-04  6.75e-01  
  9  +4.8543e-01  +9.0861e-01  4.23e-01  1.11e-04  2.82e-02  2.04e-03  2.98e-04  2.22e-01  
 10  +4.8152e-01  +8.7293e-01  3.91e-01  1.03e-04  2.61e-02  1.41e-03  2.80e-04  2.33e-01  
 11  +4.6915e-01  +7.8252e-01  3.13e-01  7.92e-05  2.00e-02  7.00e-04  2.23e-04  4.13e-01  
 12  +4.5097e-01  +6.7744e-01  2.26e-01  5.17e-05  1.30e-02  4.15e-04  1.54e-04  3.93e-01  
 13  +4.4832e-01  +6.6194e-01  2.14e-01  5.02e-05  1.26e-02  3.12e-04  1.52e-04  1.50e-01  
 14  +4.2898e-01  +5.6785e-01  1.39e-01  2.97e-05  7.44e-03  1.44e-04  9.52e-05  5.20e-01  
 15  +4.1705e-01  +5.1206e-01  9.50e-02  1.97e-05  4.91e-03  7.31e-05  6.58e-05  4.72e-01  
 16  +4.0877e-01  +4.7425e-01  6.55e-02  1.32e-05  3.30e-03  3.58e-05  4.57e-05  5.19e-01  
 17  +3.9951e-01  +4.3424e-01  3.47e-02  6.89e-06  1.72e-03  1.47e-05  2.48e-05  5.94e-01  
 18  +3.9240e-01  +4.0488e-01  1.25e-02  2.44e-06  6.07e-04  4.41e-06  9.12e-06  7.02e-01  
 19  +3.8866e-01  +3.8988e-01  1.21e-03  2.35e-07  5.86e-05  1.10e-07  9.03e-07  9.90e-01  
 20  +3.8821e-01  +3.8822e-01  1.48e-05  2.86e-09  7.13e-07  1.32e-09  1.10e-08  9.88e-01  
 21  +3.8820e-01  +3.8820e-01  1.49e-07  2.88e-11  7.16e-09  1.32e-11  1.11e-10  9.90e-01  
 22  +3.8820e-01  +3.8820e-01  1.49e-09  2.88e-13  7.17e-11  1.32e-13  1.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 253.7718ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:42 PM: Optimal value: 3.882e-01
(CVXPY) Oct 06 04:28:42 PM: Compilation took 9.375e-02 seconds
(CVXPY) Oct 06 04:28:42 PM: Solver (including time spent in interface) took 2.660e-01 seconds
Iteration: 29, Objective: 0.3882
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:43 PM: Your problem has 5303 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:43 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5303
  constraints   = 10303
  nnz(P)        = 0
  nnz(A)        = 89730
  cones (total) = 1
    : Nonnegative = 1,  numel = 10303

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7666e-01  +1.0992e+03  1.10e+03  4.47e-01  8.10e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2809e-01  +1.1796e+02  1.17e+02  1.76e-01  4.03e+01  1.81e-02  2.84e-01  9.72e-01  
  3  +5.0810e-01  +3.0539e+01  3.00e+01  1.21e-01  2.82e+01  5.20e-05  2.53e-01  3.86e-01  
  4  +5.0109e-01  +3.2650e+00  2.76e+00  1.91e-02  4.61e+00  6.43e-06  1.51e-01  6.41e-01  
  5  +5.0036e-01  +1.6604e+00  1.16e+00  7.84e-03  1.92e+00  5.10e-05  7.58e-02  8.80e-01  
  6  +5.0000e-01  +1.0295e+00  5.30e-01  2.90e-03  7.23e-01  9.69e-05  1.30e-02  8.59e-01  
  7  +4.9721e-01  +1.0240e+00  5.27e-01  3.29e-04  8.37e-02  1.32e-03  8.77e-04  9.36e-01  
  8  +4.8975e-01  +9.5179e-01  4.62e-01  1.23e-04  3.14e-02  2.66e-03  3.27e-04  6.75e-01  
  9  +4.8525e-01  +9.1127e-01  4.26e-01  1.10e-04  2.80e-02  2.09e-03  2.96e-04  2.08e-01  
 10  +4.7997e-01  +8.6516e-01  3.85e-01  1.00e-04  2.53e-02  1.35e-03  2.73e-04  2.64e-01  
 11  +4.6788e-01  +7.7805e-01  3.10e-01  7.87e-05  1.99e-02  6.45e-04  2.23e-04  4.04e-01  
 12  +4.5208e-01  +6.8751e-01  2.35e-01  5.44e-05  1.37e-02  4.15e-04  1.61e-04  3.53e-01  
 13  +4.4874e-01  +6.6793e-01  2.19e-01  5.21e-05  1.31e-02  2.76e-04  1.58e-04  2.25e-01  
 14  +4.2788e-01  +5.6400e-01  1.36e-01  2.94e-05  7.35e-03  1.30e-04  9.47e-05  5.09e-01  
 15  +4.1620e-01  +5.0954e-01  9.33e-02  1.95e-05  4.86e-03  6.75e-05  6.55e-05  4.60e-01  
 16  +4.0860e-01  +4.7447e-01  6.59e-02  1.34e-05  3.35e-03  3.27e-05  4.64e-05  5.30e-01  
 17  +3.9938e-01  +4.3446e-01  3.51e-02  7.01e-06  1.75e-03  1.35e-05  2.53e-05  5.91e-01  
 18  +3.9209e-01  +4.0409e-01  1.20e-02  2.36e-06  5.88e-04  3.71e-06  8.86e-06  7.32e-01  
 19  +3.8954e-01  +3.9396e-01  4.42e-03  8.61e-07  2.14e-04  1.16e-06  3.29e-06  6.99e-01  
 20  +3.8824e-01  +3.8893e-01  6.86e-04  1.33e-07  3.31e-05  1.57e-07  5.15e-07  8.69e-01  
 21  +3.8800e-01  +3.8802e-01  1.17e-05  2.26e-09  5.63e-07  2.01e-09  8.77e-09  9.88e-01  
 22  +3.8800e-01  +3.8800e-01  1.17e-07  2.27e-11  5.64e-09  2.02e-11  8.79e-11  9.90e-01  
 23  +3.8800e-01  +3.8800e-01  1.17e-09  2.27e-13  5.64e-11  2.03e-13  8.83e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 258.7409ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:43 PM: Optimal value: 3.880e-01
(CVXPY) Oct 06 04:28:43 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:28:43 PM: Solver (including time spent in interface) took 2.668e-01 seconds
Iteration: 30, Objective: 0.3880
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:43 PM: Your problem has 5313 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:43 PM: Finished problem compilation (took 9.429e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5313
  constraints   = 10313
  nnz(P)        = 0
  nnz(A)        = 89960
  cones (total) = 1
    : Nonnegative = 1,  numel = 10313

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7657e-01  +1.0992e+03  1.10e+03  4.47e-01  8.09e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2802e-01  +1.1782e+02  1.17e+02  1.75e-01  4.02e+01  1.81e-02  2.84e-01  9.73e-01  
  3  +5.0809e-01  +3.0510e+01  3.00e+01  1.21e-01  2.81e+01  5.21e-05  2.53e-01  3.89e-01  
  4  +5.0109e-01  +3.2641e+00  2.76e+00  1.91e-02  4.60e+00  6.44e-06  1.50e-01  6.42e-01  
  5  +5.0037e-01  +1.6890e+00  1.19e+00  8.02e-03  1.97e+00  5.14e-05  7.52e-02  8.77e-01  
  6  +5.0002e-01  +1.0784e+00  5.78e-01  3.16e-03  7.89e-01  9.68e-05  1.41e-02  8.41e-01  
  7  +4.9734e-01  +1.0694e+00  5.72e-01  3.64e-04  9.28e-02  1.27e-03  9.69e-04  9.35e-01  
  8  +4.9030e-01  +9.8949e-01  4.99e-01  1.37e-04  3.49e-02  2.54e-03  3.62e-04  6.74e-01  
  9  +4.8315e-01  +9.2123e-01  4.38e-01  1.10e-04  2.79e-02  1.79e-03  2.96e-04  3.43e-01  
 10  +4.8009e-01  +8.9149e-01  4.11e-01  1.04e-04  2.64e-02  1.40e-03  2.83e-04  1.52e-01  
 11  +4.5649e-01  +7.0877e-01  2.52e-01  6.15e-05  1.55e-02  1.92e-04  1.80e-04  6.62e-01  
 12  +4.5400e-01  +6.9811e-01  2.44e-01  5.81e-05  1.46e-02  1.70e-04  1.71e-04  1.27e-01  
 13  +4.4332e-01  +6.4240e-01  1.99e-01  4.65e-05  1.16e-02  6.24e-05  1.43e-04  5.43e-01  
 14  +4.1889e-01  +5.2467e-01  1.06e-01  2.28e-05  5.68e-03  2.03e-05  7.58e-05  6.15e-01  
 15  +4.1265e-01  +4.9740e-01  8.48e-02  1.78e-05  4.44e-03  1.50e-05  6.08e-05  2.81e-01  
 16  +4.0628e-01  +4.6931e-01  6.30e-02  1.30e-05  3.23e-03  9.27e-06  4.54e-05  4.34e-01  
 17  +3.9334e-01  +4.1427e-01  2.09e-02  4.18e-06  1.04e-03  2.24e-06  1.56e-05  7.92e-01  
 18  +3.8897e-01  +3.9661e-01  7.64e-03  1.51e-06  3.75e-04  7.24e-07  5.78e-06  7.21e-01  
 19  +3.8706e-01  +3.8921e-01  2.15e-03  4.20e-07  1.05e-04  1.93e-07  1.64e-06  7.51e-01  
 20  +3.8635e-01  +3.8649e-01  1.38e-04  2.69e-08  6.70e-06  1.10e-08  1.06e-07  9.52e-01  
 21  +3.8630e-01  +3.8630e-01  1.42e-06  2.76e-10  6.88e-08  1.13e-10  1.09e-09  9.90e-01  
 22  +3.8630e-01  +3.8630e-01  1.42e-08  2.76e-12  6.88e-10  1.13e-12  1.09e-11  9.90e-01  
 23  +3.8630e-01  +3.8630e-01  1.42e-10  2.76e-14  6.88e-12  1.14e-14  1.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 268.0957ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:44 PM: Optimal value: 3.863e-01
(CVXPY) Oct 06 04:28:44 PM: Compilation took 9.429e-02 seconds
(CVXPY) Oct 06 04:28:44 PM: Solver (including time spent in interface) took 2.817e-01 seconds
Iteration: 31, Objective: 0.3863
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:44 PM: Your problem has 5322 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:44 PM: Finished problem compilation (took 7.846e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5322
  constraints   = 10322
  nnz(P)        = 0
  nnz(A)        = 90146
  cones (total) = 1
    : Nonnegative = 1,  numel = 10322

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7653e-01  +1.0993e+03  1.10e+03  4.47e-01  8.09e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2800e-01  +1.1780e+02  1.17e+02  1.75e-01  4.02e+01  1.81e-02  2.84e-01  9.73e-01  
  3  +5.0809e-01  +3.0506e+01  3.00e+01  1.21e-01  2.81e+01  5.21e-05  2.53e-01  3.89e-01  
  4  +5.0109e-01  +3.2652e+00  2.76e+00  1.91e-02  4.60e+00  6.44e-06  1.50e-01  6.42e-01  
  5  +5.0037e-01  +1.6989e+00  1.20e+00  8.09e-03  1.98e+00  5.20e-05  7.47e-02  8.79e-01  
  6  +5.0002e-01  +1.0822e+00  5.82e-01  3.14e-03  7.82e-01  1.00e-04  1.37e-02  8.46e-01  
  7  +4.9732e-01  +1.0721e+00  5.75e-01  3.63e-04  9.26e-02  1.27e-03  9.67e-04  9.32e-01  
  8  +4.9021e-01  +9.8915e-01  4.99e-01  1.38e-04  3.51e-02  2.49e-03  3.65e-04  6.74e-01  
  9  +4.8393e-01  +9.3153e-01  4.48e-01  1.13e-04  2.86e-02  1.87e-03  3.03e-04  3.17e-01  
 10  +4.8052e-01  +8.9942e-01  4.19e-01  1.06e-04  2.68e-02  1.49e-03  2.87e-04  1.46e-01  
 11  +4.6467e-01  +7.6104e-01  2.96e-01  7.83e-05  1.97e-02  1.65e-04  2.25e-04  6.24e-01  
 12  +4.5952e-01  +7.3381e-01  2.74e-01  6.93e-05  1.74e-02  1.47e-04  2.02e-04  1.38e-01  
 13  +4.5393e-01  +7.0066e-01  2.47e-01  6.25e-05  1.57e-02  5.90e-05  1.86e-04  5.00e-01  
 14  +4.3053e-01  +5.8246e-01  1.52e-01  3.38e-05  8.44e-03  3.10e-05  1.08e-04  4.83e-01  
 15  +4.1384e-01  +5.0468e-01  9.08e-02  1.92e-05  4.78e-03  1.44e-05  6.52e-05  5.26e-01  
 16  +4.0613e-01  +4.7032e-01  6.42e-02  1.32e-05  3.29e-03  8.41e-06  4.63e-05  4.73e-01  
 17  +3.9579e-01  +4.2524e-01  2.95e-02  5.90e-06  1.47e-03  2.76e-06  2.17e-05  7.70e-01  
 18  +3.9169e-01  +4.0839e-01  1.67e-02  3.31e-06  8.23e-04  1.41e-06  1.25e-05  5.76e-01  
 19  +3.8748e-01  +3.9175e-01  4.27e-03  8.40e-07  2.09e-04  3.42e-07  3.28e-06  7.72e-01  
 20  +3.8611e-01  +3.8641e-01  3.06e-04  6.00e-08  1.49e-05  2.36e-08  2.37e-07  9.35e-01  
 21  +3.8600e-01  +3.8600e-01  3.08e-06  6.04e-10  1.50e-07  2.38e-10  2.39e-09  9.90e-01  
 22  +3.8600e-01  +3.8600e-01  3.08e-08  6.05e-12  1.50e-09  2.38e-12  2.39e-11  9.90e-01  
 23  +3.8600e-01  +3.8600e-01  3.08e-10  6.05e-14  1.50e-11  2.39e-14  2.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 270.462ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:44 PM: Optimal value: 3.860e-01
(CVXPY) Oct 06 04:28:44 PM: Compilation took 7.846e-02 seconds
(CVXPY) Oct 06 04:28:44 PM: Solver (including time spent in interface) took 2.847e-01 seconds
Iteration: 32, Objective: 0.3860
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:45 PM: Your problem has 5326 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:45 PM: Finished problem compilation (took 9.374e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5326
  constraints   = 10326
  nnz(P)        = 0
  nnz(A)        = 90233
  cones (total) = 1
    : Nonnegative = 1,  numel = 10326

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7651e-01  +1.0993e+03  1.10e+03  4.47e-01  8.08e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2799e-01  +1.1779e+02  1.17e+02  1.75e-01  4.01e+01  1.81e-02  2.84e-01  9.73e-01  
  3  +5.0809e-01  +3.0507e+01  3.00e+01  1.21e-01  2.81e+01  5.21e-05  2.53e-01  3.89e-01  
  4  +5.0109e-01  +3.2655e+00  2.76e+00  1.91e-02  4.60e+00  6.44e-06  1.50e-01  6.42e-01  
  5  +5.0037e-01  +1.6994e+00  1.20e+00  8.09e-03  1.98e+00  5.21e-05  7.46e-02  8.81e-01  
  6  +5.0002e-01  +1.0822e+00  5.82e-01  3.12e-03  7.78e-01  1.01e-04  1.35e-02  8.48e-01  
  7  +4.9730e-01  +1.0719e+00  5.75e-01  3.62e-04  9.21e-02  1.28e-03  9.63e-04  9.32e-01  
  8  +4.9017e-01  +9.8855e-01  4.98e-01  1.38e-04  3.51e-02  2.49e-03  3.65e-04  6.72e-01  
  9  +4.8403e-01  +9.3304e-01  4.49e-01  1.13e-04  2.87e-02  1.88e-03  3.03e-04  3.15e-01  
 10  +4.8050e-01  +8.9976e-01  4.19e-01  1.06e-04  2.68e-02  1.49e-03  2.87e-04  1.51e-01  
 11  +4.6486e-01  +7.6235e-01  2.97e-01  7.90e-05  1.99e-02  1.45e-04  2.27e-04  6.31e-01  
 12  +4.5975e-01  +7.3529e-01  2.76e-01  7.00e-05  1.76e-02  1.29e-04  2.04e-04  1.36e-01  
 13  +4.5392e-01  +7.0111e-01  2.47e-01  6.27e-05  1.57e-02  4.97e-05  1.87e-04  5.22e-01  
 14  +4.3035e-01  +5.8201e-01  1.52e-01  3.37e-05  8.43e-03  2.60e-05  1.08e-04  4.87e-01  
 15  +4.1391e-01  +5.0538e-01  9.15e-02  1.94e-05  4.83e-03  1.26e-05  6.59e-05  5.12e-01  
 16  +4.0733e-01  +4.7592e-01  6.86e-02  1.42e-05  3.54e-03  8.25e-06  4.96e-05  3.99e-01  
 17  +3.9622e-01  +4.2743e-01  3.12e-02  6.28e-06  1.56e-03  2.90e-06  2.31e-05  7.25e-01  
 18  +3.9221e-01  +4.1046e-01  1.83e-02  3.63e-06  9.02e-04  1.49e-06  1.37e-05  6.13e-01  
 19  +3.8738e-01  +3.9131e-01  3.93e-03  7.74e-07  1.93e-04  3.00e-07  3.02e-06  8.18e-01  
 20  +3.8639e-01  +3.8749e-01  1.10e-03  2.17e-07  5.39e-05  8.20e-08  8.54e-07  7.41e-01  
 21  +3.8602e-01  +3.8608e-01  5.82e-05  1.14e-08  2.84e-06  3.28e-09  4.52e-08  9.90e-01  
 22  +3.8600e-01  +3.8600e-01  5.83e-07  1.14e-10  2.84e-08  3.28e-11  4.53e-10  9.90e-01  
 23  +3.8600e-01  +3.8600e-01  5.83e-09  1.14e-12  2.84e-10  3.30e-13  4.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 261.0942ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:45 PM: Optimal value: 3.860e-01
(CVXPY) Oct 06 04:28:45 PM: Compilation took 9.374e-02 seconds
(CVXPY) Oct 06 04:28:45 PM: Solver (including time spent in interface) took 2.663e-01 seconds
Iteration: 33, Objective: 0.3860
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:45 PM: Your problem has 5336 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:45 PM: Finished problem compilation (took 7.859e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5336
  constraints   = 10336
  nnz(P)        = 0
  nnz(A)        = 90386
  cones (total) = 1
    : Nonnegative = 1,  numel = 10336

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7649e-01  +1.0993e+03  1.10e+03  4.47e-01  8.08e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2798e-01  +1.1777e+02  1.17e+02  1.75e-01  4.01e+01  1.81e-02  2.84e-01  9.73e-01  
  3  +5.0808e-01  +3.0499e+01  3.00e+01  1.21e-01  2.80e+01  5.22e-05  2.52e-01  3.90e-01  
  4  +5.0109e-01  +3.2662e+00  2.77e+00  1.91e-02  4.61e+00  6.44e-06  1.50e-01  6.42e-01  
  5  +5.0037e-01  +1.7019e+00  1.20e+00  8.11e-03  1.98e+00  5.27e-05  7.40e-02  8.85e-01  
  6  +5.0000e-01  +1.0598e+00  5.60e-01  2.92e-03  7.30e-01  1.06e-04  1.23e-02  8.63e-01  
  7  +4.9718e-01  +1.0501e+00  5.53e-01  3.39e-04  8.63e-02  1.32e-03  9.03e-04  9.28e-01  
  8  +4.8985e-01  +9.6980e-01  4.80e-01  1.33e-04  3.37e-02  2.49e-03  3.51e-04  6.66e-01  
  9  +4.8392e-01  +9.1978e-01  4.36e-01  1.10e-04  2.78e-02  1.86e-03  2.95e-04  3.23e-01  
 10  +4.8139e-01  +8.9810e-01  4.17e-01  1.05e-04  2.66e-02  1.60e-03  2.84e-04  1.04e-01  
 11  +4.6485e-01  +7.6079e-01  2.96e-01  7.82e-05  1.97e-02  1.15e-04  2.24e-04  6.54e-01  
 12  +4.5954e-01  +7.3290e-01  2.73e-01  6.90e-05  1.73e-02  1.02e-04  2.01e-04  1.37e-01  
 13  +4.5531e-01  +7.0886e-01  2.54e-01  6.48e-05  1.63e-02  5.69e-05  1.93e-04  3.62e-01  
 14  +4.2896e-01  +5.7431e-01  1.45e-01  3.21e-05  8.00e-03  2.64e-05  1.03e-04  5.46e-01  
 15  +4.1602e-01  +5.1542e-01  9.94e-02  2.11e-05  5.26e-03  1.51e-05  7.12e-05  4.26e-01  
 16  +4.0915e-01  +4.8498e-01  7.58e-02  1.58e-05  3.93e-03  1.05e-05  5.48e-05  3.32e-01  
 17  +3.9546e-01  +4.2440e-01  2.89e-02  5.81e-06  1.44e-03  1.98e-06  2.14e-05  9.45e-01  
 18  +3.8944e-01  +4.0027e-01  1.08e-02  2.15e-06  5.35e-04  7.10e-07  8.25e-06  7.01e-01  
 19  +3.8676e-01  +3.8971e-01  2.95e-03  5.83e-07  1.45e-04  1.81e-07  2.29e-06  8.26e-01  
 20  +3.8586e-01  +3.8628e-01  4.18e-04  8.25e-08  2.05e-05  2.22e-08  3.27e-07  9.90e-01  
 21  +3.8570e-01  +3.8571e-01  4.90e-06  9.67e-10  2.40e-07  2.60e-10  3.84e-09  9.88e-01  
 22  +3.8570e-01  +3.8570e-01  4.91e-08  9.68e-12  2.41e-09  2.60e-12  3.84e-11  9.90e-01  
 23  +3.8570e-01  +3.8570e-01  4.93e-10  9.73e-14  2.42e-11  2.62e-14  3.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 276.084ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:46 PM: Optimal value: 3.857e-01
(CVXPY) Oct 06 04:28:46 PM: Compilation took 7.859e-02 seconds
(CVXPY) Oct 06 04:28:46 PM: Solver (including time spent in interface) took 2.835e-01 seconds
Iteration: 34, Objective: 0.3857
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:46 PM: Your problem has 5346 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:46 PM: Finished problem compilation (took 9.376e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5346
  constraints   = 10346
  nnz(P)        = 0
  nnz(A)        = 90621
  cones (total) = 1
    : Nonnegative = 1,  numel = 10346

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7645e-01  +1.0994e+03  1.10e+03  4.48e-01  8.07e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2796e-01  +1.1773e+02  1.17e+02  1.75e-01  4.00e+01  1.81e-02  2.84e-01  9.73e-01  
  3  +5.0808e-01  +3.0491e+01  3.00e+01  1.21e-01  2.80e+01  5.22e-05  2.52e-01  3.91e-01  
  4  +5.0109e-01  +3.2672e+00  2.77e+00  1.92e-02  4.61e+00  6.45e-06  1.50e-01  6.43e-01  
  5  +5.0038e-01  +1.7358e+00  1.24e+00  8.34e-03  2.04e+00  5.22e-05  7.52e-02  8.70e-01  
  6  +5.0002e-01  +1.0798e+00  5.80e-01  3.11e-03  7.74e-01  1.01e-04  1.34e-02  8.48e-01  
  7  +4.9733e-01  +1.0710e+00  5.74e-01  3.64e-04  9.26e-02  1.26e-03  9.69e-04  9.30e-01  
  8  +4.9037e-01  +9.8902e-01  4.99e-01  1.41e-04  3.58e-02  2.42e-03  3.73e-04  6.68e-01  
  9  +4.8472e-01  +9.4047e-01  4.56e-01  1.15e-04  2.93e-02  1.96e-03  3.10e-04  2.97e-01  
 10  +4.7951e-01  +8.9233e-01  4.13e-01  1.04e-04  2.64e-02  1.42e-03  2.84e-04  2.03e-01  
 11  +4.7390e-01  +8.3921e-01  3.65e-01  9.68e-05  2.44e-02  7.99e-04  2.69e-04  2.68e-01  
 12  +4.5484e-01  +7.1742e-01  2.63e-01  6.13e-05  1.54e-02  4.39e-04  1.80e-04  4.51e-01  
 13  +4.5234e-01  +7.0185e-01  2.50e-01  6.01e-05  1.51e-02  3.54e-04  1.79e-04  9.95e-02  
 14  +4.3015e-01  +5.8632e-01  1.56e-01  3.42e-05  8.53e-03  1.55e-04  1.09e-04  5.22e-01  
 15  +4.1526e-01  +5.1565e-01  1.00e-01  2.12e-05  5.28e-03  8.05e-05  7.15e-05  4.39e-01  
 16  +4.0530e-01  +4.6723e-01  6.19e-02  1.26e-05  3.13e-03  1.08e-05  4.41e-05  9.17e-01  
 17  +3.9892e-01  +4.4049e-01  4.16e-02  8.39e-06  2.09e-03  7.03e-06  3.04e-05  3.39e-01  
 18  +3.8976e-01  +4.0179e-01  1.20e-02  2.39e-06  5.93e-04  9.92e-07  9.11e-06  9.46e-01  
 19  +3.8684e-01  +3.9060e-01  3.76e-03  7.42e-07  1.84e-04  2.98e-07  2.91e-06  7.17e-01  
 20  +3.8561e-01  +3.8589e-01  2.85e-04  5.61e-08  1.39e-05  1.59e-08  2.23e-07  9.90e-01  
 21  +3.8550e-01  +3.8550e-01  2.92e-06  5.76e-10  1.43e-07  1.63e-10  2.29e-09  9.90e-01  
 22  +3.8550e-01  +3.8550e-01  2.92e-08  5.76e-12  1.43e-09  1.63e-12  2.29e-11  9.90e-01  
 23  +3.8550e-01  +3.8550e-01  2.94e-10  5.79e-14  1.44e-11  1.65e-14  2.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 265.3241ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:46 PM: Optimal value: 3.855e-01
(CVXPY) Oct 06 04:28:46 PM: Compilation took 9.376e-02 seconds
(CVXPY) Oct 06 04:28:46 PM: Solver (including time spent in interface) took 2.818e-01 seconds
Iteration: 35, Objective: 0.3855
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:47 PM: Your problem has 5356 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:47 PM: Finished problem compilation (took 9.510e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5356
  constraints   = 10356
  nnz(P)        = 0
  nnz(A)        = 90881
  cones (total) = 1
    : Nonnegative = 1,  numel = 10356

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7644e-01  +1.0994e+03  1.10e+03  4.48e-01  8.06e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2794e-01  +1.1768e+02  1.17e+02  1.75e-01  4.00e+01  1.81e-02  2.84e-01  9.74e-01  
  3  +5.0808e-01  +3.0479e+01  3.00e+01  1.21e-01  2.80e+01  5.22e-05  2.52e-01  3.91e-01  
  4  +5.0109e-01  +3.2665e+00  2.77e+00  1.92e-02  4.60e+00  6.45e-06  1.50e-01  6.43e-01  
  5  +5.0039e-01  +1.7558e+00  1.26e+00  8.48e-03  2.07e+00  5.21e-05  7.56e-02  8.63e-01  
  6  +5.0002e-01  +1.0834e+00  5.83e-01  3.13e-03  7.80e-01  9.98e-05  1.36e-02  8.47e-01  
  7  +4.9736e-01  +1.0752e+00  5.78e-01  3.68e-04  9.37e-02  1.25e-03  9.83e-04  9.30e-01  
  8  +4.9045e-01  +9.9321e-01  5.03e-01  1.42e-04  3.62e-02  2.41e-03  3.77e-04  6.69e-01  
  9  +4.8493e-01  +9.4688e-01  4.62e-01  1.18e-04  2.98e-02  2.02e-03  3.15e-04  2.74e-01  
 10  +4.7903e-01  +8.9112e-01  4.12e-01  1.05e-04  2.65e-02  1.38e-03  2.86e-04  2.31e-01  
 11  +4.7391e-01  +8.4301e-01  3.69e-01  9.76e-05  2.46e-02  8.39e-04  2.72e-04  2.42e-01  
 12  +4.5411e-01  +7.1546e-01  2.61e-01  6.08e-05  1.53e-02  4.60e-04  1.79e-04  4.51e-01  
 13  +4.5164e-01  +7.0052e-01  2.49e-01  5.96e-05  1.49e-02  3.87e-04  1.78e-04  6.90e-02  
 14  +4.2935e-01  +5.8387e-01  1.55e-01  3.38e-05  8.42e-03  1.59e-04  1.08e-04  5.45e-01  
 15  +4.1547e-01  +5.1775e-01  1.02e-01  2.16e-05  5.38e-03  8.63e-05  7.29e-05  4.20e-01  
 16  +4.0539e-01  +4.6834e-01  6.29e-02  1.28e-05  3.18e-03  1.05e-05  4.48e-05  9.29e-01  
 17  +3.9868e-01  +4.4011e-01  4.14e-02  8.37e-06  2.08e-03  6.66e-06  3.03e-05  3.53e-01  
 18  +3.9020e-01  +4.0410e-01  1.39e-02  2.77e-06  6.88e-04  1.31e-06  1.05e-05  8.92e-01  
 19  +3.8662e-01  +3.9018e-01  3.56e-03  7.04e-07  1.75e-04  3.01e-07  2.75e-06  8.01e-01  
 20  +3.8552e-01  +3.8597e-01  4.47e-04  8.82e-08  2.19e-05  2.47e-08  3.49e-07  9.90e-01  
 21  +3.8535e-01  +3.8536e-01  5.32e-06  1.05e-09  2.61e-07  2.94e-10  4.16e-09  9.88e-01  
 22  +3.8535e-01  +3.8535e-01  5.33e-08  1.05e-11  2.61e-09  2.94e-12  4.16e-11  9.90e-01  
 23  +3.8535e-01  +3.8535e-01  5.33e-10  1.05e-13  2.61e-11  2.95e-14  4.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 264.097ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:47 PM: Optimal value: 3.854e-01
(CVXPY) Oct 06 04:28:47 PM: Compilation took 9.510e-02 seconds
(CVXPY) Oct 06 04:28:47 PM: Solver (including time spent in interface) took 2.817e-01 seconds
Iteration: 36, Objective: 0.3854
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:47 PM: Your problem has 5358 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:47 PM: Finished problem compilation (took 9.516e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5358
  constraints   = 10358
  nnz(P)        = 0
  nnz(A)        = 90939
  cones (total) = 1
    : Nonnegative = 1,  numel = 10358

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7643e-01  +1.0993e+03  1.10e+03  4.48e-01  8.06e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2794e-01  +1.1768e+02  1.17e+02  1.75e-01  3.99e+01  1.81e-02  2.84e-01  9.74e-01  
  3  +5.0808e-01  +3.0477e+01  3.00e+01  1.21e-01  2.80e+01  5.22e-05  2.52e-01  3.91e-01  
  4  +5.0109e-01  +3.2663e+00  2.77e+00  1.92e-02  4.60e+00  6.45e-06  1.50e-01  6.43e-01  
  5  +5.0039e-01  +1.7541e+00  1.25e+00  8.46e-03  2.07e+00  5.22e-05  7.54e-02  8.64e-01  
  6  +5.0002e-01  +1.0856e+00  5.86e-01  3.13e-03  7.81e-01  1.00e-04  1.35e-02  8.47e-01  
  7  +4.9736e-01  +1.0768e+00  5.79e-01  3.69e-04  9.39e-02  1.25e-03  9.84e-04  9.29e-01  
  8  +4.9045e-01  +9.9394e-01  5.03e-01  1.43e-04  3.63e-02  2.40e-03  3.78e-04  6.68e-01  
  9  +4.8508e-01  +9.4918e-01  4.64e-01  1.18e-04  2.99e-02  2.03e-03  3.16e-04  2.73e-01  
 10  +4.7916e-01  +8.9164e-01  4.12e-01  1.05e-04  2.67e-02  1.34e-03  2.88e-04  2.41e-01  
 11  +4.7419e-01  +8.4488e-01  3.71e-01  9.83e-05  2.48e-02  8.28e-04  2.73e-04  2.39e-01  
 12  +4.5482e-01  +7.1888e-01  2.64e-01  6.18e-05  1.55e-02  4.35e-04  1.82e-04  4.66e-01  
 13  +4.5225e-01  +7.0362e-01  2.51e-01  6.04e-05  1.51e-02  3.63e-04  1.80e-04  7.68e-02  
 14  +4.2866e-01  +5.7952e-01  1.51e-01  3.29e-05  8.21e-03  1.40e-04  1.06e-04  5.68e-01  
 15  +4.1862e-01  +5.3201e-01  1.13e-01  2.41e-05  6.01e-03  8.94e-05  8.03e-05  3.36e-01  
 16  +4.1223e-01  +5.0169e-01  8.95e-02  1.87e-05  4.64e-03  5.33e-05  6.37e-05  4.13e-01  
 17  +3.9546e-01  +4.2671e-01  3.13e-02  6.32e-06  1.57e-03  1.12e-05  2.32e-05  7.74e-01  
 18  +3.9203e-01  +4.1134e-01  1.93e-02  3.86e-06  9.58e-04  3.52e-06  1.45e-05  7.55e-01  
 19  +3.9138e-01  +4.0853e-01  1.72e-02  3.42e-06  8.50e-04  2.75e-06  1.29e-05  2.75e-01  
 20  +3.8987e-01  +4.0254e-01  1.27e-02  2.52e-06  6.27e-04  1.78e-06  9.61e-06  4.01e-01  
 21  +3.8785e-01  +3.9481e-01  6.96e-03  1.38e-06  3.42e-04  8.41e-07  5.33e-06  5.80e-01  
 22  +3.8585e-01  +3.8722e-01  1.38e-03  2.72e-07  6.75e-05  1.59e-07  1.07e-06  8.15e-01  
 23  +3.8536e-01  +3.8539e-01  3.30e-05  6.51e-09  1.62e-06  3.73e-09  2.58e-08  9.77e-01  
 24  +3.8535e-01  +3.8535e-01  3.32e-07  6.54e-11  1.62e-08  3.74e-11  2.59e-10  9.90e-01  
 25  +3.8535e-01  +3.8535e-01  3.32e-09  6.54e-13  1.62e-10  3.76e-13  2.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 308.3947ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:48 PM: Optimal value: 3.854e-01
(CVXPY) Oct 06 04:28:48 PM: Compilation took 9.516e-02 seconds
(CVXPY) Oct 06 04:28:48 PM: Solver (including time spent in interface) took 3.272e-01 seconds
Iteration: 37, Objective: 0.3854
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:28:48 PM: Your problem has 5359 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:28:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:28:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:28:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:28:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:28:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:28:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:28:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:28:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:28:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:28:48 PM: Finished problem compilation (took 9.585e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5359
  constraints   = 10359
  nnz(P)        = 0
  nnz(A)        = 90963
  cones (total) = 1
    : Nonnegative = 1,  numel = 10359

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7643e-01  +1.0993e+03  1.10e+03  4.48e-01  8.06e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2794e-01  +1.1768e+02  1.17e+02  1.75e-01  3.99e+01  1.81e-02  2.84e-01  9.74e-01  
  3  +5.0808e-01  +3.0476e+01  3.00e+01  1.21e-01  2.80e+01  5.22e-05  2.52e-01  3.91e-01  
  4  +5.0109e-01  +3.2658e+00  2.76e+00  1.92e-02  4.60e+00  6.45e-06  1.50e-01  6.43e-01  
  5  +5.0039e-01  +1.7555e+00  1.26e+00  8.47e-03  2.07e+00  5.22e-05  7.54e-02  8.64e-01  
  6  +5.0002e-01  +1.0863e+00  5.86e-01  3.14e-03  7.82e-01  1.00e-04  1.36e-02  8.46e-01  
  7  +4.9736e-01  +1.0776e+00  5.80e-01  3.70e-04  9.42e-02  1.25e-03  9.87e-04  9.29e-01  
  8  +4.9048e-01  +9.9461e-01  5.04e-01  1.43e-04  3.64e-02  2.39e-03  3.80e-04  6.68e-01  
  9  +4.8513e-01  +9.5018e-01  4.65e-01  1.18e-04  3.00e-02  2.03e-03  3.17e-04  2.72e-01  
 10  +4.7916e-01  +8.9161e-01  4.12e-01  1.06e-04  2.67e-02  1.33e-03  2.89e-04  2.47e-01  
 11  +4.7439e-01  +8.4653e-01  3.72e-01  9.88e-05  2.49e-02  8.35e-04  2.74e-04  2.31e-01  
 12  +4.5529e-01  +7.2155e-01  2.66e-01  6.25e-05  1.57e-02  4.33e-04  1.84e-04  4.68e-01  
 13  +4.5249e-01  +7.0534e-01  2.53e-01  6.09e-05  1.53e-02  3.52e-04  1.81e-04  9.87e-02  
 14  +4.2756e-01  +5.7348e-01  1.46e-01  3.18e-05  7.92e-03  1.30e-04  1.02e-04  5.80e-01  
 15  +4.1888e-01  +5.3278e-01  1.14e-01  2.42e-05  6.04e-03  8.70e-05  8.06e-05  3.12e-01  
 16  +4.1222e-01  +5.0151e-01  8.93e-02  1.86e-05  4.64e-03  5.23e-05  6.35e-05  4.06e-01  
 17  +3.9555e-01  +4.2709e-01  3.15e-02  6.38e-06  1.59e-03  1.13e-05  2.35e-05  7.68e-01  
 18  +3.9208e-01  +4.1154e-01  1.95e-02  3.89e-06  9.66e-04  3.54e-06  1.46e-05  7.56e-01  
 19  +3.9137e-01  +4.0853e-01  1.72e-02  3.42e-06  8.50e-04  2.72e-06  1.29e-05  2.88e-01  
 20  +3.8983e-01  +4.0241e-01  1.26e-02  2.51e-06  6.22e-04  1.76e-06  9.54e-06  4.06e-01  
 21  +3.8784e-01  +3.9478e-01  6.94e-03  1.38e-06  3.42e-04  8.32e-07  5.32e-06  5.79e-01  
 22  +3.8563e-01  +3.8641e-01  7.79e-04  1.54e-07  3.82e-05  8.67e-08  6.07e-07  8.99e-01  
 23  +3.8536e-01  +3.8537e-01  1.64e-05  3.24e-09  8.05e-07  1.81e-09  1.28e-08  9.79e-01  
 24  +3.8535e-01  +3.8535e-01  1.65e-07  3.25e-11  8.08e-09  1.81e-11  1.29e-10  9.90e-01  
 25  +3.8535e-01  +3.8535e-01  1.65e-09  3.25e-13  8.08e-11  1.83e-13  1.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 294.5734ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:28:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:28:48 PM: Optimal value: 3.854e-01
(CVXPY) Oct 06 04:28:48 PM: Compilation took 9.585e-02 seconds
(CVXPY) Oct 06 04:28:48 PM: Solver (including time spent in interface) took 2.971e-01 seconds
FULL MODEL:
  Accruacy: 0.5801
  Our objective: 0.16020000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.1378)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x9 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x9 = 1)            <-- (term's our objective: 0.0026)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x2 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)                                                        <-- (term's our objective: 0.0084)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 34.589542388916016
Best over terms:
  Our final objective: 0.1378
    Its accruacy: 0.5689
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1378
  Highest accruacy: 0.5689
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

