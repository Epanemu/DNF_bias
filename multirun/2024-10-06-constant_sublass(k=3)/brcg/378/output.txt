Command:
python test_script.py -s constant_subclass -d 10 -n 500 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.184
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 10.

Computed total variation: 0.8560000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:00 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:00 PM: Finished problem compilation (took 4.646e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 3271
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +2.5094e+02  2.50e+02  9.39e-01  2.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7749e-01  +5.5326e+01  5.47e+01  4.18e-01  1.68e+01  3.75e-03  5.89e-01  5.76e-01  
  2  +5.2602e-01  +6.2934e+00  5.77e+00  1.34e-01  6.83e+00  1.84e-02  2.78e-01  9.90e-01  
  3  +5.0402e-01  +1.4910e+00  9.87e-01  3.41e-02  1.74e+00  5.36e-05  1.64e-01  8.83e-01  
  4  +5.0005e-01  +7.1994e-01  2.20e-01  7.39e-03  3.89e-01  2.64e-05  4.10e-02  7.95e-01  
  5  +4.8719e-01  +7.9087e-01  3.04e-01  2.23e-03  1.21e-01  1.94e-04  7.01e-03  8.90e-01  
  6  +4.6361e-01  +5.9636e-01  1.33e-01  7.04e-04  3.78e-02  8.75e-05  2.49e-03  7.59e-01  
  7  +4.4131e-01  +4.9906e-01  5.78e-02  2.55e-04  1.36e-02  3.57e-05  1.04e-03  6.96e-01  
  8  +4.2845e-01  +4.4224e-01  1.38e-02  5.92e-05  3.15e-03  1.13e-05  2.64e-04  9.90e-01  
  9  +4.2419e-01  +4.2447e-01  2.81e-04  1.19e-06  6.34e-05  2.02e-07  5.49e-06  9.88e-01  
 10  +4.2410e-01  +4.2410e-01  2.81e-06  1.19e-08  6.33e-07  2.02e-09  5.49e-08  9.90e-01  
 11  +4.2410e-01  +4.2410e-01  2.81e-08  1.19e-10  6.33e-09  2.02e-11  5.49e-10  9.90e-01  
 12  +4.2410e-01  +4.2410e-01  2.81e-10  1.19e-12  6.33e-11  2.02e-13  5.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0743ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:00 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 04:24:00 PM: Compilation took 4.646e-02 seconds
(CVXPY) Oct 06 04:24:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:00 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:00 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 3800
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +2.5168e+02  2.51e+02  9.40e-01  2.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.7487e-01  +5.5485e+01  5.49e+01  4.21e-01  1.72e+01  3.75e-03  5.93e-01  5.76e-01  
  2  +5.2321e-01  +6.4554e+00  5.93e+00  1.36e-01  7.02e+00  1.89e-02  2.79e-01  9.90e-01  
  3  +5.0682e-01  +1.6892e+00  1.18e+00  4.06e-02  2.21e+00  2.32e-03  1.22e-01  7.54e-01  
  4  +5.0516e-01  +1.6371e+00  1.13e+00  2.88e-02  1.60e+00  3.12e-03  7.96e-02  4.24e-01  
  5  +4.9675e-01  +1.4508e+00  9.54e-01  1.19e-02  6.73e-01  3.87e-03  3.27e-02  7.77e-01  
  6  +4.8204e-01  +1.1157e+00  6.34e-01  5.27e-03  2.98e-01  3.20e-03  1.52e-02  5.81e-01  
  7  +4.6571e-01  +8.0353e-01  3.38e-01  2.70e-03  1.51e-01  9.97e-04  8.63e-03  5.74e-01  
  8  +4.4894e-01  +5.9012e-01  1.41e-01  9.51e-04  5.24e-02  2.97e-04  3.20e-03  8.00e-01  
  9  +4.4430e-01  +5.8418e-01  1.40e-01  6.17e-04  3.42e-02  3.92e-04  1.96e-03  4.79e-01  
 10  +4.4023e-01  +5.5649e-01  1.16e-01  5.58e-04  3.08e-02  2.03e-04  1.82e-03  3.37e-01  
 11  +4.2877e-01  +5.1128e-01  8.25e-02  3.21e-04  1.77e-02  9.29e-05  1.07e-03  8.55e-01  
 12  +4.1203e-01  +4.3794e-01  2.59e-02  9.52e-05  5.23e-03  2.23e-05  3.42e-04  9.90e-01  
 13  +4.0260e-01  +4.0381e-01  1.21e-03  4.25e-06  2.33e-04  6.98e-07  1.61e-05  9.62e-01  
 14  +4.0211e-01  +4.0212e-01  1.22e-05  4.29e-08  2.35e-06  6.99e-09  1.63e-07  9.90e-01  
 15  +4.0210e-01  +4.0210e-01  1.22e-07  4.28e-10  2.35e-08  6.99e-11  1.63e-09  9.90e-01  
 16  +4.0210e-01  +4.0210e-01  1.22e-09  4.29e-12  2.35e-10  6.99e-13  1.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.3959ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:00 PM: Optimal value: 4.021e-01
(CVXPY) Oct 06 04:24:00 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4021
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:00 PM: Your problem has 291 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:00 PM: Finished problem compilation (took 1.673e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 291
  constraints   = 541
  nnz(P)        = 0
  nnz(A)        = 4158
  cones (total) = 1
    : Nonnegative = 1,  numel = 541

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9911e-01  +2.5141e+02  2.51e+02  9.40e-01  2.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.7280e-01  +5.5443e+01  5.49e+01  4.24e-01  1.72e+01  3.76e-03  5.92e-01  5.76e-01  
  2  +5.2126e-01  +6.5780e+00  6.06e+00  1.36e-01  7.01e+00  1.93e-02  2.78e-01  9.90e-01  
  3  +5.0740e-01  +1.9061e+00  1.40e+00  4.28e-02  2.36e+00  3.74e-03  1.16e-01  6.72e-01  
  4  +5.0647e-01  +1.8805e+00  1.37e+00  3.50e-02  1.96e+00  4.38e-03  9.14e-02  2.29e-01  
  5  +5.0269e-01  +1.8150e+00  1.31e+00  2.94e-02  1.62e+00  2.97e-03  8.58e-02  3.14e-01  
  6  +4.8535e-01  +1.3738e+00  8.88e-01  7.01e-03  4.05e-01  6.40e-03  1.82e-02  8.12e-01  
  7  +4.6856e-01  +1.0962e+00  6.28e-01  4.40e-03  2.51e-01  3.49e-03  1.21e-02  4.60e-01  
  8  +4.5059e-01  +9.3894e-01  4.88e-01  2.62e-03  1.49e-01  2.48e-03  7.39e-03  5.47e-01  
  9  +4.3318e-01  +8.0660e-01  3.73e-01  1.82e-03  1.03e-01  1.41e-03  5.38e-03  4.51e-01  
 10  +4.0620e-01  +6.1336e-01  2.07e-01  1.01e-03  5.65e-02  1.72e-04  3.33e-03  7.81e-01  
 11  +3.7421e-01  +4.4677e-01  7.26e-02  3.23e-04  1.79e-02  4.90e-05  1.22e-03  6.76e-01  
 12  +3.5738e-01  +3.6733e-01  9.95e-03  4.32e-05  2.39e-03  6.70e-06  1.84e-04  9.15e-01  
 13  +3.5439e-01  +3.5467e-01  2.82e-04  1.22e-06  6.75e-05  1.84e-07  5.38e-06  9.72e-01  
 14  +3.5430e-01  +3.5430e-01  2.82e-06  1.22e-08  6.75e-07  1.84e-09  5.39e-08  9.90e-01  
 15  +3.5430e-01  +3.5430e-01  2.82e-08  1.22e-10  6.75e-09  1.84e-11  5.39e-10  9.90e-01  
 16  +3.5430e-01  +3.5430e-01  2.82e-10  1.22e-12  6.75e-11  1.84e-13  5.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.523ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:01 PM: Optimal value: 3.543e-01
(CVXPY) Oct 06 04:24:01 PM: Compilation took 1.673e-02 seconds
(CVXPY) Oct 06 04:24:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3543
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:01 PM: Your problem has 301 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:01 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 301
  constraints   = 551
  nnz(P)        = 0
  nnz(A)        = 4396
  cones (total) = 1
    : Nonnegative = 1,  numel = 551

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9900e-01  +2.5134e+02  2.51e+02  9.41e-01  2.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.7045e-01  +5.5446e+01  5.49e+01  4.26e-01  1.71e+01  3.76e-03  5.91e-01  5.76e-01  
  2  +5.1928e-01  +6.6879e+00  6.17e+00  1.36e-01  6.96e+00  1.97e-02  2.76e-01  9.90e-01  
  3  +5.0622e-01  +1.7746e+00  1.27e+00  3.57e-02  2.00e+00  3.85e-03  9.42e-02  7.01e-01  
  4  +5.0590e-01  +1.8333e+00  1.33e+00  3.19e-02  1.80e+00  4.38e-03  8.17e-02  1.87e-01  
  5  +5.0136e-01  +2.0601e+00  1.56e+00  2.62e-02  1.48e+00  3.97e-03  6.78e-02  5.56e-01  
  6  +4.8021e-01  +1.5638e+00  1.08e+00  7.23e-03  4.22e-01  7.04e-03  1.82e-02  7.42e-01  
  7  +4.5709e-01  +1.2533e+00  7.96e-01  4.37e-03  2.53e-01  4.99e-03  1.14e-02  4.57e-01  
  8  +4.4022e-01  +1.0574e+00  6.17e-01  3.16e-03  1.82e-01  2.97e-03  8.54e-03  3.94e-01  
  9  +4.1832e-01  +8.6651e-01  4.48e-01  2.17e-03  1.24e-01  1.65e-03  6.16e-03  4.18e-01  
 10  +3.7247e-01  +5.1825e-01  1.46e-01  6.89e-04  3.86e-02  2.49e-05  2.24e-03  9.02e-01  
 11  +3.6000e-01  +4.6161e-01  1.02e-01  4.59e-04  2.56e-02  4.08e-05  1.58e-03  4.78e-01  
 12  +3.3811e-01  +3.6100e-01  2.29e-02  9.83e-05  5.43e-03  1.37e-05  3.81e-04  8.47e-01  
 13  +3.3248e-01  +3.3835e-01  5.87e-03  2.45e-05  1.35e-03  3.68e-06  1.02e-04  7.65e-01  
 14  +3.3056e-01  +3.3071e-01  1.54e-04  6.36e-07  3.50e-05  1.22e-07  2.74e-06  9.90e-01  
 15  +3.3050e-01  +3.3050e-01  1.54e-06  6.35e-09  3.49e-07  1.22e-09  2.74e-08  9.90e-01  
 16  +3.3050e-01  +3.3050e-01  1.54e-08  6.35e-11  3.49e-09  1.22e-11  2.74e-10  9.90e-01  
 17  +3.3050e-01  +3.3050e-01  1.54e-10  6.35e-13  3.49e-11  1.22e-13  2.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6267ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:01 PM: Optimal value: 3.305e-01
(CVXPY) Oct 06 04:24:01 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:01 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 4, Objective: 0.3305
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:01 PM: Your problem has 311 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:01 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 311
  constraints   = 561
  nnz(P)        = 0
  nnz(A)        = 4549
  cones (total) = 1
    : Nonnegative = 1,  numel = 561

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9891e-01  +2.5157e+02  2.51e+02  9.41e-01  2.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.6769e-01  +5.5450e+01  5.49e+01  4.27e-01  1.68e+01  3.77e-03  5.90e-01  5.77e-01  
  2  +5.1734e-01  +6.8189e+00  6.30e+00  1.35e-01  6.83e+00  2.00e-02  2.73e-01  9.90e-01  
  3  +5.0421e-01  +1.6457e+00  1.14e+00  2.92e-02  1.65e+00  4.06e-03  7.54e-02  7.53e-01  
  4  +4.9121e-01  +1.9338e+00  1.44e+00  1.40e-02  8.14e-01  8.32e-03  3.37e-02  7.54e-01  
  5  +4.6643e-01  +1.4840e+00  1.02e+00  6.61e-03  3.86e-01  7.33e-03  1.64e-02  5.69e-01  
  6  +4.4220e-01  +1.2143e+00  7.72e-01  4.18e-03  2.42e-01  5.05e-03  1.07e-02  4.55e-01  
  7  +4.1956e-01  +1.0014e+00  5.82e-01  2.84e-03  1.64e-01  3.32e-03  7.59e-03  3.84e-01  
  8  +3.7178e-01  +6.0651e-01  2.35e-01  1.13e-03  6.43e-02  7.21e-05  3.37e-03  8.52e-01  
  9  +3.4498e-01  +4.7578e-01  1.31e-01  5.96e-04  3.42e-02  4.73e-05  1.91e-03  4.79e-01  
 10  +3.2181e-01  +3.6939e-01  4.76e-02  2.08e-04  1.21e-02  2.38e-05  7.33e-04  6.95e-01  
 11  +3.0837e-01  +3.1255e-01  4.18e-03  1.79e-05  1.03e-03  3.62e-06  6.92e-05  9.80e-01  
 12  +3.0686e-01  +3.0700e-01  1.48e-04  6.32e-07  3.64e-05  1.21e-07  2.50e-06  9.65e-01  
 13  +3.0680e-01  +3.0680e-01  1.58e-06  6.73e-09  3.88e-07  1.28e-09  2.67e-08  9.89e-01  
 14  +3.0680e-01  +3.0680e-01  1.58e-08  6.74e-11  3.88e-09  1.28e-11  2.67e-10  9.90e-01  
 15  +3.0680e-01  +3.0680e-01  1.58e-10  6.74e-13  3.88e-11  1.28e-13  2.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.7317ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:01 PM: Optimal value: 3.068e-01
(CVXPY) Oct 06 04:24:01 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:01 PM: Solver (including time spent in interface) took 1.458e-02 seconds
Iteration: 5, Objective: 0.3068
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:01 PM: Your problem has 321 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:01 PM: Finished problem compilation (took 1.555e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 321
  constraints   = 571
  nnz(P)        = 0
  nnz(A)        = 4633
  cones (total) = 1
    : Nonnegative = 1,  numel = 571

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9870e-01  +2.5204e+02  2.52e+02  9.42e-01  2.67e+01  1.00e+00  1.02e+00   ------   
  1  +5.6264e-01  +5.5532e+01  5.50e+01  4.27e-01  1.66e+01  3.78e-03  5.90e-01  5.78e-01  
  2  +5.1433e-01  +7.0579e+00  6.54e+00  1.34e-01  6.72e+00  2.06e-02  2.68e-01  9.90e-01  
  3  +5.0146e-01  +1.9597e+00  1.46e+00  3.18e-02  1.80e+00  5.96e-03  7.81e-02  7.26e-01  
  4  +4.6871e-01  +1.8330e+00  1.36e+00  9.20e-03  5.42e-01  1.48e-02  2.18e-02  7.71e-01  
  5  +4.2248e-01  +1.1736e+00  7.51e-01  3.96e-03  2.29e-01  5.66e-03  1.00e-02  6.91e-01  
  6  +3.8692e-01  +8.8037e-01  4.93e-01  2.63e-03  1.50e-01  1.80e-03  7.17e-03  5.15e-01  
  7  +3.2463e-01  +4.7572e-01  1.51e-01  7.23e-04  4.08e-02  3.15e-04  2.23e-03  7.56e-01  
  8  +3.0248e-01  +3.8404e-01  8.16e-02  3.73e-04  2.13e-02  1.48e-04  1.24e-03  5.71e-01  
  9  +2.8549e-01  +3.1196e-01  2.65e-02  1.17e-04  6.75e-03  4.14e-05  4.27e-04  7.39e-01  
 10  +2.7852e-01  +2.8254e-01  4.02e-03  1.77e-05  1.01e-03  4.11e-06  6.77e-05  9.90e-01  
 11  +2.7725e-01  +2.7768e-01  4.26e-04  1.89e-06  1.07e-04  4.05e-07  7.41e-06  8.94e-01  
 12  +2.7710e-01  +2.7711e-01  8.87e-06  3.94e-08  2.23e-06  7.92e-09  1.57e-07  9.90e-01  
 13  +2.7710e-01  +2.7710e-01  8.87e-08  3.94e-10  2.23e-08  7.92e-11  1.57e-09  9.90e-01  
 14  +2.7710e-01  +2.7710e-01  8.89e-10  3.95e-12  2.24e-10  7.95e-13  1.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.8299ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:01 PM: Optimal value: 2.771e-01
(CVXPY) Oct 06 04:24:01 PM: Compilation took 1.555e-02 seconds
(CVXPY) Oct 06 04:24:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.2771
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:01 PM: Your problem has 331 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:01 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 331
  constraints   = 581
  nnz(P)        = 0
  nnz(A)        = 4774
  cones (total) = 1
    : Nonnegative = 1,  numel = 581

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9865e-01  +2.5203e+02  2.52e+02  9.42e-01  2.66e+01  1.00e+00  1.02e+00   ------   
  1  +5.5970e-01  +5.5577e+01  5.50e+01  4.28e-01  1.64e+01  3.79e-03  5.89e-01  5.78e-01  
  2  +5.1257e-01  +7.1539e+00  6.64e+00  1.33e-01  6.59e+00  2.09e-02  2.66e-01  9.90e-01  
  3  +4.9914e-01  +2.0512e+00  1.55e+00  3.12e-02  1.75e+00  6.79e-03  7.58e-02  7.30e-01  
  4  +4.6233e-01  +1.8588e+00  1.40e+00  9.43e-03  5.51e-01  1.52e-02  2.25e-02  7.48e-01  
  5  +4.2583e-01  +1.4613e+00  1.04e+00  5.56e-03  3.21e-01  1.11e-02  1.38e-02  4.62e-01  
  6  +3.7376e-01  +8.9077e-01  5.17e-01  2.66e-03  1.49e-01  2.26e-03  7.24e-03  6.43e-01  
  7  +3.1828e-01  +5.0233e-01  1.84e-01  9.19e-04  5.10e-02  4.74e-04  2.86e-03  7.13e-01  
  8  +2.9646e-01  +4.0056e-01  1.04e-01  4.89e-04  2.75e-02  2.47e-04  1.61e-03  5.08e-01  
  9  +2.7563e-01  +3.0581e-01  3.02e-02  1.35e-04  7.67e-03  5.34e-05  4.89e-04  8.20e-01  
 10  +2.6764e-01  +2.7140e-01  3.77e-03  1.67e-05  9.49e-04  3.79e-06  6.41e-05  9.86e-01  
 11  +2.6643e-01  +2.6679e-01  3.59e-04  1.59e-06  9.01e-05  3.24e-07  6.33e-06  9.19e-01  
 12  +2.6630e-01  +2.6631e-01  4.72e-06  2.10e-08  1.19e-06  4.05e-09  8.45e-08  9.90e-01  
 13  +2.6630e-01  +2.6630e-01  4.73e-08  2.11e-10  1.19e-08  4.05e-11  8.46e-10  9.90e-01  
 14  +2.6630e-01  +2.6630e-01  4.73e-10  2.11e-12  1.19e-10  4.07e-13  8.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4383ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:01 PM: Optimal value: 2.663e-01
(CVXPY) Oct 06 04:24:01 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:01 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 7, Objective: 0.2663
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:01 PM: Your problem has 341 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:01 PM: Finished problem compilation (took 1.869e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 341
  constraints   = 591
  nnz(P)        = 0
  nnz(A)        = 4873
  cones (total) = 1
    : Nonnegative = 1,  numel = 591

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9850e-01  +2.5212e+02  2.52e+02  9.43e-01  2.64e+01  1.00e+00  1.02e+00   ------   
  1  +5.5499e-01  +5.5585e+01  5.50e+01  4.28e-01  1.62e+01  3.80e-03  5.87e-01  5.79e-01  
  2  +5.0883e-01  +7.3449e+00  6.84e+00  1.31e-01  6.47e+00  2.14e-02  2.61e-01  9.90e-01  
  3  +4.9375e-01  +2.1522e+00  1.66e+00  2.90e-02  1.64e+00  8.07e-03  6.91e-02  7.51e-01  
  4  +4.5193e-01  +1.8258e+00  1.37e+00  9.62e-03  5.59e-01  1.48e-02  2.28e-02  7.03e-01  
  5  +4.0279e-01  +1.2801e+00  8.77e-01  4.72e-03  2.68e-01  8.09e-03  1.20e-02  6.00e-01  
  6  +3.5814e-01  +8.4603e-01  4.88e-01  2.71e-03  1.50e-01  1.08e-03  7.64e-03  6.49e-01  
  7  +2.9686e-01  +4.5549e-01  1.59e-01  7.88e-04  4.31e-02  2.55e-04  2.52e-03  7.26e-01  
  8  +2.7750e-01  +3.6891e-01  9.14e-02  4.32e-04  2.39e-02  1.37e-04  1.44e-03  5.45e-01  
  9  +2.6101e-01  +2.9944e-01  3.84e-02  1.74e-04  9.78e-03  5.48e-05  6.14e-04  6.21e-01  
 10  +2.5356e-01  +2.6787e-01  1.43e-02  6.37e-05  3.62e-03  1.77e-05  2.33e-04  8.12e-01  
 11  +2.4918e-01  +2.5052e-01  1.34e-03  5.95e-06  3.38e-04  1.50e-06  2.26e-05  9.20e-01  
 12  +2.4871e-01  +2.4873e-01  2.39e-05  1.07e-07  6.05e-06  2.27e-08  4.10e-07  9.85e-01  
 13  +2.4870e-01  +2.4870e-01  2.40e-07  1.07e-09  6.05e-08  2.27e-10  4.11e-09  9.90e-01  
 14  +2.4870e-01  +2.4870e-01  2.40e-09  1.07e-11  6.05e-10  2.27e-12  4.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.2909ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:01 PM: Optimal value: 2.487e-01
(CVXPY) Oct 06 04:24:01 PM: Compilation took 1.869e-02 seconds
(CVXPY) Oct 06 04:24:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.2487
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:02 PM: Your problem has 351 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 351
  constraints   = 601
  nnz(P)        = 0
  nnz(A)        = 4989
  cones (total) = 1
    : Nonnegative = 1,  numel = 601

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9845e-01  +2.5218e+02  2.52e+02  9.43e-01  2.62e+01  1.00e+00  1.02e+00   ------   
  1  +5.5214e-01  +5.5535e+01  5.50e+01  4.28e-01  1.60e+01  3.81e-03  5.85e-01  5.80e-01  
  2  +5.0624e-01  +7.4653e+00  6.96e+00  1.30e-01  6.33e+00  2.16e-02  2.57e-01  9.90e-01  
  3  +4.8880e-01  +2.2571e+00  1.77e+00  2.79e-02  1.57e+00  9.19e-03  6.58e-02  7.61e-01  
  4  +4.4289e-01  +1.8367e+00  1.39e+00  9.73e-03  5.61e-01  1.47e-02  2.31e-02  6.79e-01  
  5  +3.9341e-01  +1.3404e+00  9.47e-01  4.97e-03  2.82e-01  1.03e-02  1.25e-02  5.31e-01  
  6  +3.4180e-01  +8.3005e-01  4.88e-01  2.62e-03  1.44e-01  1.33e-03  7.35e-03  6.80e-01  
  7  +2.7953e-01  +4.2400e-01  1.44e-01  7.18e-04  3.91e-02  2.40e-04  2.32e-03  7.56e-01  
  8  +2.6451e-01  +3.5610e-01  9.16e-02  4.43e-04  2.44e-02  1.40e-04  1.48e-03  4.80e-01  
  9  +2.5749e-01  +3.2613e-01  6.86e-02  3.24e-04  1.81e-02  1.02e-04  1.10e-03  3.40e-01  
 10  +2.4248e-01  +2.5957e-01  1.71e-02  7.89e-05  4.43e-03  2.03e-05  2.86e-04  8.85e-01  
 11  +2.3794e-01  +2.4106e-01  3.12e-03  1.43e-05  8.01e-04  3.45e-06  5.37e-05  8.41e-01  
 12  +2.3701e-01  +2.3732e-01  3.14e-04  1.45e-06  8.06e-05  3.10e-07  5.61e-06  9.07e-01  
 13  +2.3690e-01  +2.3691e-01  6.13e-06  2.82e-08  1.57e-06  5.68e-09  1.11e-07  9.86e-01  
 14  +2.3690e-01  +2.3690e-01  6.14e-08  2.83e-10  1.57e-08  5.69e-11  1.11e-09  9.90e-01  
 15  +2.3690e-01  +2.3690e-01  6.14e-10  2.83e-12  1.57e-10  5.69e-13  1.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.75ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:02 PM: Optimal value: 2.369e-01
(CVXPY) Oct 06 04:24:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:02 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 9, Objective: 0.2369
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:02 PM: Your problem has 361 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Finished problem compilation (took 1.570e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 361
  constraints   = 611
  nnz(P)        = 0
  nnz(A)        = 5077
  cones (total) = 1
    : Nonnegative = 1,  numel = 611

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9838e-01  +2.5220e+02  2.52e+02  9.44e-01  2.60e+01  1.00e+00  1.02e+00   ------   
  1  +5.5010e-01  +5.5557e+01  5.50e+01  4.30e-01  1.58e+01  3.81e-03  5.85e-01  5.80e-01  
  2  +5.0459e-01  +7.5427e+00  7.04e+00  1.29e-01  6.25e+00  2.19e-02  2.56e-01  9.90e-01  
  3  +4.8597e-01  +2.2496e+00  1.76e+00  2.66e-02  1.49e+00  9.51e-03  6.26e-02  7.73e-01  
  4  +4.3442e-01  +1.8083e+00  1.37e+00  9.18e-03  5.27e-01  1.49e-02  2.18e-02  6.90e-01  
  5  +3.8846e-01  +1.3681e+00  9.80e-01  5.17e-03  2.92e-01  1.04e-02  1.29e-02  4.83e-01  
  6  +3.3896e-01  +8.5407e-01  5.15e-01  2.82e-03  1.54e-01  1.37e-03  7.85e-03  6.68e-01  
  7  +2.7780e-01  +4.4796e-01  1.70e-01  8.56e-04  4.63e-02  3.18e-04  2.71e-03  7.17e-01  
  8  +2.5693e-01  +3.5355e-01  9.66e-02  4.68e-04  2.56e-02  1.61e-04  1.56e-03  5.53e-01  
  9  +2.4941e-01  +3.2066e-01  7.12e-02  3.36e-04  1.87e-02  1.16e-04  1.14e-03  3.53e-01  
 10  +2.3957e-01  +2.7708e-01  3.75e-02  1.74e-04  9.71e-03  5.63e-05  6.12e-04  5.72e-01  
 11  +2.2935e-01  +2.3309e-01  3.75e-03  1.72e-05  9.58e-04  4.40e-06  6.40e-05  9.24e-01  
 12  +2.2818e-01  +2.2841e-01  2.33e-04  1.08e-06  5.96e-05  2.23e-07  4.16e-06  9.40e-01  
 13  +2.2810e-01  +2.2810e-01  3.26e-06  1.51e-08  8.35e-07  3.06e-09  5.90e-08  9.86e-01  
 14  +2.2810e-01  +2.2810e-01  3.26e-08  1.51e-10  8.35e-09  3.06e-11  5.90e-10  9.90e-01  
 15  +2.2810e-01  +2.2810e-01  3.26e-10  1.52e-12  8.36e-11  3.06e-13  5.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.8417ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:02 PM: Optimal value: 2.281e-01
(CVXPY) Oct 06 04:24:02 PM: Compilation took 1.570e-02 seconds
(CVXPY) Oct 06 04:24:02 PM: Solver (including time spent in interface) took 1.555e-02 seconds
Iteration: 10, Objective: 0.2281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:02 PM: Your problem has 371 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Finished problem compilation (took 1.509e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 371
  constraints   = 621
  nnz(P)        = 0
  nnz(A)        = 5151
  cones (total) = 1
    : Nonnegative = 1,  numel = 621

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9827e-01  +2.5227e+02  2.52e+02  9.44e-01  2.58e+01  1.00e+00  1.02e+00   ------   
  1  +5.4626e-01  +5.5576e+01  5.50e+01  4.30e-01  1.56e+01  3.82e-03  5.83e-01  5.81e-01  
  2  +5.0113e-01  +7.6758e+00  7.17e+00  1.27e-01  6.13e+00  2.22e-02  2.53e-01  9.90e-01  
  3  +4.7865e-01  +2.2340e+00  1.76e+00  2.39e-02  1.34e+00  1.03e-02  5.62e-02  7.98e-01  
  4  +4.2627e-01  +1.7716e+00  1.35e+00  9.40e-03  5.34e-01  1.32e-02  2.25e-02  6.53e-01  
  5  +3.8053e-01  +1.3813e+00  1.00e+00  5.40e-03  3.03e-01  1.04e-02  1.35e-02  4.57e-01  
  6  +3.2078e-01  +7.6826e-01  4.47e-01  2.49e-03  1.35e-01  8.98e-05  7.06e-03  7.85e-01  
  7  +2.6141e-01  +4.1541e-01  1.54e-01  7.84e-04  4.24e-02  5.93e-05  2.49e-03  7.34e-01  
  8  +2.4949e-01  +3.6572e-01  1.16e-01  5.69e-04  3.13e-02  5.84e-05  1.86e-03  3.90e-01  
  9  +2.3012e-01  +2.7934e-01  4.92e-02  2.29e-04  1.28e-02  2.97e-05  7.88e-04  6.53e-01  
 10  +2.2102e-01  +2.4222e-01  2.12e-02  9.52e-05  5.36e-03  1.42e-05  3.39e-04  6.53e-01  
 11  +2.1507e-01  +2.1704e-01  1.97e-03  8.86e-06  4.96e-04  1.35e-06  3.28e-05  9.30e-01  
 12  +2.1442e-01  +2.1449e-01  6.68e-05  3.05e-07  1.69e-05  3.88e-08  1.16e-06  9.71e-01  
 13  +2.1440e-01  +2.1440e-01  7.05e-07  3.22e-09  1.78e-07  4.09e-10  1.23e-08  9.89e-01  
 14  +2.1440e-01  +2.1440e-01  7.06e-09  3.22e-11  1.78e-09  4.09e-12  1.23e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.7427ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:02 PM: Optimal value: 2.144e-01
(CVXPY) Oct 06 04:24:02 PM: Compilation took 1.509e-02 seconds
(CVXPY) Oct 06 04:24:02 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 11, Objective: 0.2144
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:02 PM: Your problem has 381 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 381
  constraints   = 631
  nnz(P)        = 0
  nnz(A)        = 5206
  cones (total) = 1
    : Nonnegative = 1,  numel = 631

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9811e-01  +2.5230e+02  2.52e+02  9.45e-01  2.57e+01  1.00e+00  1.02e+00   ------   
  1  +5.4297e-01  +5.5620e+01  5.51e+01  4.31e-01  1.54e+01  3.83e-03  5.83e-01  5.81e-01  
  2  +4.9817e-01  +7.8346e+00  7.34e+00  1.26e-01  6.05e+00  2.27e-02  2.51e-01  9.90e-01  
  3  +4.7259e-01  +2.3354e+00  1.86e+00  2.34e-02  1.31e+00  1.13e-02  5.51e-02  8.00e-01  
  4  +4.0162e-01  +1.7578e+00  1.36e+00  8.13e-03  4.58e-01  1.49e-02  1.96e-02  7.02e-01  
  5  +3.5969e-01  +1.3159e+00  9.56e-01  5.21e-03  2.89e-01  8.29e-03  1.32e-02  4.39e-01  
  6  +2.8930e-01  +6.3676e-01  3.47e-01  1.86e-03  9.94e-02  1.18e-03  5.38e-03  7.24e-01  
  7  +2.4766e-01  +4.1650e-01  1.69e-01  8.55e-04  4.64e-02  4.70e-04  2.72e-03  6.39e-01  
  8  +2.3359e-01  +3.4726e-01  1.14e-01  5.58e-04  3.06e-02  2.85e-04  1.86e-03  4.35e-01  
  9  +2.1387e-01  +2.5005e-01  3.62e-02  1.72e-04  9.48e-03  7.81e-05  6.17e-04  7.33e-01  
 10  +2.0871e-01  +2.2754e-01  1.88e-02  8.58e-05  4.78e-03  2.73e-05  3.23e-04  7.93e-01  
 11  +2.0312e-01  +2.0485e-01  1.73e-03  7.80e-06  4.34e-04  1.91e-06  3.11e-05  9.25e-01  
 12  +2.0252e-01  +2.0258e-01  5.85e-05  2.67e-07  1.47e-05  4.05e-08  1.12e-06  9.79e-01  
 13  +2.0250e-01  +2.0250e-01  5.90e-07  2.69e-09  1.48e-07  4.08e-10  1.14e-08  9.90e-01  
 14  +2.0250e-01  +2.0250e-01  5.90e-09  2.70e-11  1.48e-09  4.08e-12  1.14e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.1054ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:02 PM: Optimal value: 2.025e-01
(CVXPY) Oct 06 04:24:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:02 PM: Solver (including time spent in interface) took 1.508e-02 seconds
Iteration: 12, Objective: 0.2025
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:02 PM: Your problem has 391 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Finished problem compilation (took 1.676e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 391
  constraints   = 641
  nnz(P)        = 0
  nnz(A)        = 5313
  cones (total) = 1
    : Nonnegative = 1,  numel = 641

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9802e-01  +2.5223e+02  2.52e+02  9.45e-01  2.55e+01  1.00e+00  1.02e+00   ------   
  1  +5.3963e-01  +5.5650e+01  5.51e+01  4.32e-01  1.52e+01  3.84e-03  5.82e-01  5.81e-01  
  2  +4.9512e-01  +7.9391e+00  7.44e+00  1.25e-01  5.94e+00  2.30e-02  2.48e-01  9.90e-01  
  3  +4.6691e-01  +2.3847e+00  1.92e+00  2.30e-02  1.28e+00  1.17e-02  5.39e-02  8.02e-01  
  4  +4.0181e-01  +1.7796e+00  1.38e+00  8.88e-03  4.96e-01  1.31e-02  2.14e-02  6.69e-01  
  5  +3.5596e-01  +1.3202e+00  9.64e-01  5.29e-03  2.92e-01  7.95e-03  1.33e-02  4.75e-01  
  6  +2.8831e-01  +6.5489e-01  3.67e-01  1.97e-03  1.06e-01  1.39e-03  5.59e-03  7.04e-01  
  7  +2.3954e-01  +3.9324e-01  1.54e-01  7.75e-04  4.25e-02  4.56e-04  2.42e-03  7.11e-01  
  8  +2.2700e-01  +3.3728e-01  1.10e-01  5.35e-04  2.99e-02  3.02e-04  1.71e-03  3.91e-01  
  9  +2.1384e-01  +2.7736e-01  6.35e-02  2.99e-04  1.69e-02  1.64e-04  9.98e-04  4.63e-01  
 10  +2.0083e-01  +2.1898e-01  1.82e-02  8.33e-05  4.75e-03  3.78e-05  2.94e-04  7.90e-01  
 11  +1.9597e-01  +1.9938e-01  3.41e-03  1.53e-05  8.75e-04  5.04e-06  5.76e-05  8.96e-01  
 12  +1.9479e-01  +1.9501e-01  2.23e-04  1.01e-06  5.71e-05  2.30e-07  4.01e-06  9.41e-01  
 13  +1.9470e-01  +1.9470e-01  2.53e-06  1.15e-08  6.47e-07  2.48e-09  4.64e-08  9.89e-01  
 14  +1.9470e-01  +1.9470e-01  2.53e-08  1.15e-10  6.47e-09  2.48e-11  4.64e-10  9.90e-01  
 15  +1.9470e-01  +1.9470e-01  2.53e-10  1.15e-12  6.47e-11  2.48e-13  4.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.6225ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:02 PM: Optimal value: 1.947e-01
(CVXPY) Oct 06 04:24:02 PM: Compilation took 1.676e-02 seconds
(CVXPY) Oct 06 04:24:02 PM: Solver (including time spent in interface) took 1.459e-02 seconds
Iteration: 13, Objective: 0.1947
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:02 PM: Your problem has 401 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:02 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 401
  constraints   = 651
  nnz(P)        = 0
  nnz(A)        = 5393
  cones (total) = 1
    : Nonnegative = 1,  numel = 651

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9795e-01  +2.5221e+02  2.52e+02  9.45e-01  2.53e+01  1.00e+00  1.02e+00   ------   
  1  +5.3698e-01  +5.5726e+01  5.52e+01  4.33e-01  1.51e+01  3.85e-03  5.82e-01  5.80e-01  
  2  +4.9262e-01  +8.0299e+00  7.54e+00  1.25e-01  5.87e+00  2.33e-02  2.47e-01  9.90e-01  
  3  +4.6156e-01  +2.4324e+00  1.97e+00  2.26e-02  1.25e+00  1.22e-02  5.32e-02  8.04e-01  
  4  +3.9290e-01  +1.8351e+00  1.44e+00  9.16e-03  5.06e-01  1.27e-02  2.22e-02  6.75e-01  
  5  +3.5230e-01  +1.3897e+00  1.04e+00  5.83e-03  3.19e-01  7.15e-03  1.47e-02  4.74e-01  
  6  +2.8396e-01  +6.4670e-01  3.63e-01  1.98e-03  1.05e-01  1.01e-03  5.63e-03  7.52e-01  
  7  +2.3919e-01  +4.0736e-01  1.68e-01  8.66e-04  4.68e-02  4.03e-04  2.67e-03  6.61e-01  
  8  +2.2668e-01  +3.4920e-01  1.23e-01  6.07e-04  3.35e-02  2.81e-04  1.92e-03  3.54e-01  
  9  +2.0466e-01  +2.4517e-01  4.05e-02  1.90e-04  1.07e-02  7.53e-05  6.39e-04  7.89e-01  
 10  +2.0112e-01  +2.3079e-01  2.97e-02  1.33e-04  7.69e-03  5.02e-05  4.51e-04  4.66e-01  
 11  +1.9534e-01  +2.0751e-01  1.22e-02  5.35e-05  3.11e-03  1.77e-05  1.87e-04  7.27e-01  
 12  +1.9158e-01  +1.9316e-01  1.59e-03  7.01e-06  4.05e-04  1.55e-06  2.56e-05  9.55e-01  
 13  +1.9096e-01  +1.9109e-01  1.34e-04  5.94e-07  3.39e-05  1.20e-07  2.28e-06  9.39e-01  
 14  +1.9090e-01  +1.9090e-01  1.44e-06  6.42e-09  3.66e-07  1.28e-09  2.48e-08  9.89e-01  
 15  +1.9090e-01  +1.9090e-01  1.44e-08  6.42e-11  3.66e-09  1.28e-11  2.48e-10  9.90e-01  
 16  +1.9090e-01  +1.9090e-01  1.45e-10  6.43e-13  3.66e-11  1.29e-13  2.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.0393ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:03 PM: Optimal value: 1.909e-01
(CVXPY) Oct 06 04:24:03 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:24:03 PM: Solver (including time spent in interface) took 2.410e-02 seconds
Iteration: 14, Objective: 0.1909
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:03 PM: Your problem has 411 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:03 PM: Finished problem compilation (took 3.225e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 411
  constraints   = 661
  nnz(P)        = 0
  nnz(A)        = 5443
  cones (total) = 1
    : Nonnegative = 1,  numel = 661

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9793e-01  +2.5223e+02  2.52e+02  9.46e-01  2.52e+01  1.00e+00  1.02e+00   ------   
  1  +5.3449e-01  +5.5774e+01  5.52e+01  4.34e-01  1.49e+01  3.86e-03  5.81e-01  5.80e-01  
  2  +4.9037e-01  +8.1005e+00  7.61e+00  1.24e-01  5.77e+00  2.35e-02  2.46e-01  9.90e-01  
  3  +4.5708e-01  +2.5008e+00  2.04e+00  2.27e-02  1.24e+00  1.26e-02  5.35e-02  8.02e-01  
  4  +3.8720e-01  +1.8615e+00  1.47e+00  9.41e-03  5.15e-01  1.23e-02  2.30e-02  6.63e-01  
  5  +3.4730e-01  +1.4114e+00  1.06e+00  6.08e-03  3.29e-01  6.53e-03  1.55e-02  4.92e-01  
  6  +2.7699e-01  +6.1993e-01  3.43e-01  1.89e-03  9.93e-02  7.59e-04  5.44e-03  7.77e-01  
  7  +2.3490e-01  +4.0691e-01  1.72e-01  8.77e-04  4.69e-02  3.46e-04  2.72e-03  6.50e-01  
  8  +2.1925e-01  +3.3759e-01  1.18e-01  5.70e-04  3.08e-02  2.26e-04  1.83e-03  4.17e-01  
  9  +1.9726e-01  +2.3963e-01  4.24e-02  1.91e-04  1.05e-02  7.10e-05  6.60e-04  7.37e-01  
 10  +1.8818e-01  +2.0242e-01  1.42e-02  6.26e-05  3.45e-03  1.82e-05  2.27e-04  8.33e-01  
 11  +1.8370e-01  +1.8528e-01  1.58e-03  6.99e-06  3.82e-04  1.63e-06  2.66e-05  8.87e-01  
 12  +1.8319e-01  +1.8341e-01  2.23e-04  1.00e-06  5.41e-05  2.18e-07  3.97e-06  8.84e-01  
 13  +1.8310e-01  +1.8310e-01  2.51e-06  1.13e-08  6.10e-07  2.38e-09  4.51e-08  9.89e-01  
 14  +1.8310e-01  +1.8310e-01  2.52e-08  1.13e-10  6.11e-09  2.38e-11  4.52e-10  9.90e-01  
 15  +1.8310e-01  +1.8310e-01  2.52e-10  1.14e-12  6.12e-11  2.39e-13  4.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.4048ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:03 PM: Optimal value: 1.831e-01
(CVXPY) Oct 06 04:24:03 PM: Compilation took 3.225e-03 seconds
(CVXPY) Oct 06 04:24:03 PM: Solver (including time spent in interface) took 1.258e-02 seconds
Iteration: 15, Objective: 0.1831
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:03 PM: Your problem has 421 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:03 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 421
  constraints   = 671
  nnz(P)        = 0
  nnz(A)        = 5528
  cones (total) = 1
    : Nonnegative = 1,  numel = 671

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9782e-01  +2.5219e+02  2.52e+02  9.46e-01  2.50e+01  1.00e+00  1.02e+00   ------   
  1  +5.2926e-01  +5.5970e+01  5.54e+01  4.33e-01  1.48e+01  3.88e-03  5.81e-01  5.79e-01  
  2  +4.8546e-01  +8.2708e+00  7.79e+00  1.23e-01  5.65e+00  2.41e-02  2.44e-01  9.90e-01  
  3  +4.4686e-01  +2.5689e+00  2.12e+00  2.23e-02  1.20e+00  1.31e-02  5.25e-02  8.07e-01  
  4  +3.6783e-01  +1.8798e+00  1.51e+00  9.26e-03  4.99e-01  1.18e-02  2.28e-02  6.81e-01  
  5  +3.2242e-01  +1.2103e+00  8.88e-01  5.35e-03  2.82e-01  2.24e-03  1.42e-02  7.00e-01  
  6  +2.5715e-01  +5.5441e-01  2.97e-01  1.70e-03  8.76e-02  5.12e-04  5.05e-03  6.97e-01  
  7  +2.2658e-01  +4.0621e-01  1.80e-01  9.48e-04  5.03e-02  3.04e-04  2.97e-03  5.36e-01  
  8  +2.1598e-01  +3.5879e-01  1.43e-01  7.20e-04  3.85e-02  2.36e-04  2.31e-03  3.02e-01  
  9  +1.9282e-01  +2.5111e-01  5.83e-02  2.77e-04  1.50e-02  7.82e-05  9.53e-04  7.98e-01  
 10  +1.8611e-01  +2.2420e-01  3.81e-02  1.74e-04  9.62e-03  5.08e-05  6.08e-04  4.35e-01  
 11  +1.7797e-01  +1.8945e-01  1.15e-02  5.18e-05  2.86e-03  1.12e-05  1.90e-04  9.90e-01  
 12  +1.7367e-01  +1.7433e-01  6.55e-04  2.96e-06  1.63e-04  4.20e-07  1.14e-05  9.48e-01  
 13  +1.7341e-01  +1.7342e-01  1.59e-05  7.29e-08  3.96e-06  9.59e-09  2.90e-07  9.76e-01  
 14  +1.7340e-01  +1.7340e-01  1.59e-07  7.29e-10  3.96e-08  9.59e-11  2.90e-09  9.90e-01  
 15  +1.7340e-01  +1.7340e-01  1.59e-09  7.30e-12  3.97e-10  9.59e-13  2.90e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.4679ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:03 PM: Optimal value: 1.734e-01
(CVXPY) Oct 06 04:24:03 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:03 PM: Solver (including time spent in interface) took 3.163e-02 seconds
Iteration: 16, Objective: 0.1734
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:03 PM: Your problem has 431 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:03 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 431
  constraints   = 681
  nnz(P)        = 0
  nnz(A)        = 5607
  cones (total) = 1
    : Nonnegative = 1,  numel = 681

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9774e-01  +2.5226e+02  2.52e+02  9.47e-01  2.48e+01  1.00e+00  1.02e+00   ------   
  1  +5.2472e-01  +5.6049e+01  5.55e+01  4.33e-01  1.46e+01  3.89e-03  5.79e-01  5.79e-01  
  2  +4.8021e-01  +8.4098e+00  7.93e+00  1.21e-01  5.54e+00  2.45e-02  2.41e-01  9.90e-01  
  3  +4.3594e-01  +2.4912e+00  2.06e+00  2.06e-02  1.11e+00  1.30e-02  4.86e-02  8.20e-01  
  4  +3.6545e-01  +2.0503e+00  1.68e+00  1.07e-02  5.71e-01  1.20e-02  2.62e-02  6.04e-01  
  5  +3.1107e-01  +1.1260e+00  8.15e-01  5.06e-03  2.65e-01  1.13e-04  1.35e-02  8.61e-01  
  6  +2.3968e-01  +4.7087e-01  2.31e-01  1.35e-03  6.92e-02  6.75e-05  4.05e-03  7.65e-01  
  7  +2.2165e-01  +4.0568e-01  1.84e-01  9.87e-04  5.26e-02  8.01e-05  3.01e-03  3.98e-01  
  8  +2.0719e-01  +3.4436e-01  1.37e-01  6.96e-04  3.75e-02  6.79e-05  2.20e-03  3.36e-01  
  9  +1.8071e-01  +2.3012e-01  4.94e-02  2.32e-04  1.28e-02  3.62e-05  7.93e-04  7.98e-01  
 10  +1.7220e-01  +1.9690e-01  2.47e-02  1.13e-04  6.27e-03  1.93e-05  4.01e-04  6.28e-01  
 11  +1.6451e-01  +1.6701e-01  2.50e-03  1.13e-05  6.25e-04  1.62e-06  4.25e-05  9.05e-01  
 12  +1.6373e-01  +1.6404e-01  3.10e-04  1.43e-06  7.81e-05  2.30e-07  5.67e-06  9.31e-01  
 13  +1.6360e-01  +1.6361e-01  3.78e-06  1.76e-08  9.55e-07  2.67e-09  7.01e-08  9.88e-01  
 14  +1.6360e-01  +1.6360e-01  3.78e-08  1.76e-10  9.55e-09  2.67e-11  7.02e-10  9.90e-01  
 15  +1.6360e-01  +1.6360e-01  3.79e-10  1.76e-12  9.57e-11  2.68e-13  7.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.6168ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:03 PM: Optimal value: 1.636e-01
(CVXPY) Oct 06 04:24:03 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:03 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 17, Objective: 0.1636
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:03 PM: Your problem has 441 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:03 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 441
  constraints   = 691
  nnz(P)        = 0
  nnz(A)        = 5640
  cones (total) = 1
    : Nonnegative = 1,  numel = 691

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9766e-01  +2.5237e+02  2.52e+02  9.47e-01  2.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.2098e-01  +5.6048e+01  5.55e+01  4.34e-01  1.45e+01  3.90e-03  5.79e-01  5.80e-01  
  2  +4.7553e-01  +8.5558e+00  8.08e+00  1.19e-01  5.44e+00  2.49e-02  2.39e-01  9.90e-01  
  3  +4.2633e-01  +2.4969e+00  2.07e+00  1.97e-02  1.06e+00  1.33e-02  4.66e-02  8.25e-01  
  4  +3.6452e-01  +2.1731e+00  1.81e+00  1.16e-02  6.21e-01  1.28e-02  2.82e-02  5.20e-01  
  5  +3.0322e-01  +1.0993e+00  7.96e-01  4.93e-03  2.57e-01  1.23e-04  1.31e-02  8.74e-01  
  6  +2.3302e-01  +4.5915e-01  2.26e-01  1.34e-03  6.85e-02  8.18e-05  4.05e-03  7.80e-01  
  7  +2.1571e-01  +3.9746e-01  1.82e-01  9.88e-04  5.24e-02  9.11e-05  3.02e-03  4.05e-01  
  8  +2.0171e-01  +3.3668e-01  1.35e-01  6.95e-04  3.72e-02  7.40e-05  2.20e-03  3.29e-01  
  9  +1.7602e-01  +2.2387e-01  4.78e-02  2.28e-04  1.25e-02  3.59e-05  7.82e-04  7.96e-01  
 10  +1.6775e-01  +1.9109e-01  2.33e-02  1.08e-04  5.98e-03  1.85e-05  3.87e-04  6.54e-01  
 11  +1.6046e-01  +1.6255e-01  2.09e-03  9.63e-06  5.29e-04  1.32e-06  3.64e-05  9.18e-01  
 12  +1.5980e-01  +1.6004e-01  2.40e-04  1.13e-06  6.12e-05  1.88e-07  4.50e-06  9.55e-01  
 13  +1.5970e-01  +1.5970e-01  2.56e-06  1.21e-08  6.51e-07  1.93e-09  4.83e-08  9.89e-01  
 14  +1.5970e-01  +1.5970e-01  2.56e-08  1.21e-10  6.51e-09  1.93e-11  4.84e-10  9.90e-01  
 15  +1.5970e-01  +1.5970e-01  2.56e-10  1.21e-12  6.52e-11  1.93e-13  4.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.8033ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:03 PM: Optimal value: 1.597e-01
(CVXPY) Oct 06 04:24:03 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:03 PM: Solver (including time spent in interface) took 1.681e-02 seconds
Iteration: 18, Objective: 0.1597
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:04 PM: Your problem has 451 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:04 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 451
  constraints   = 701
  nnz(P)        = 0
  nnz(A)        = 5697
  cones (total) = 1
    : Nonnegative = 1,  numel = 701

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9763e-01  +2.5240e+02  2.52e+02  9.47e-01  2.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.1764e-01  +5.6106e+01  5.56e+01  4.33e-01  1.43e+01  3.91e-03  5.77e-01  5.80e-01  
  2  +4.7206e-01  +8.6470e+00  8.17e+00  1.18e-01  5.32e+00  2.51e-02  2.36e-01  9.90e-01  
  3  +4.1876e-01  +2.5300e+00  2.11e+00  1.94e-02  1.03e+00  1.35e-02  4.60e-02  8.25e-01  
  4  +3.6012e-01  +2.2656e+00  1.91e+00  1.23e-02  6.51e-01  1.28e-02  2.98e-02  4.93e-01  
  5  +2.9513e-01  +1.0642e+00  7.69e-01  4.76e-03  2.46e-01  1.23e-04  1.27e-02  8.83e-01  
  6  +2.2566e-01  +4.4984e-01  2.24e-01  1.34e-03  6.80e-02  9.21e-05  4.08e-03  7.87e-01  
  7  +2.0867e-01  +3.8874e-01  1.80e-01  9.87e-04  5.20e-02  9.86e-05  3.04e-03  4.16e-01  
  8  +1.9521e-01  +3.2871e-01  1.33e-01  6.95e-04  3.70e-02  7.83e-05  2.22e-03  3.24e-01  
  9  +1.7007e-01  +2.1509e-01  4.50e-02  2.19e-04  1.18e-02  3.42e-05  7.59e-04  8.09e-01  
 10  +1.6551e-01  +1.9596e-01  3.05e-02  1.45e-04  7.92e-03  2.43e-05  5.13e-04  4.35e-01  
 11  +1.5703e-01  +1.6052e-01  3.49e-03  1.66e-05  8.99e-04  2.60e-06  6.22e-05  9.39e-01  
 12  +1.5613e-01  +1.5709e-01  9.56e-04  4.65e-06  2.47e-04  8.14e-07  1.83e-05  9.25e-01  
 13  +1.5576e-01  +1.5578e-01  2.20e-05  1.07e-07  5.69e-06  1.62e-08  4.32e-07  9.77e-01  
 14  +1.5575e-01  +1.5575e-01  2.20e-07  1.07e-09  5.69e-08  1.62e-10  4.32e-09  9.90e-01  
 15  +1.5575e-01  +1.5575e-01  2.20e-09  1.08e-11  5.70e-10  1.62e-12  4.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.0065ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:04 PM: Optimal value: 1.558e-01
(CVXPY) Oct 06 04:24:04 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:04 PM: Solver (including time spent in interface) took 3.166e-02 seconds
Iteration: 19, Objective: 0.1558
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:04 PM: Your problem has 461 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:04 PM: Finished problem compilation (took 1.556e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 461
  constraints   = 711
  nnz(P)        = 0
  nnz(A)        = 5748
  cones (total) = 1
    : Nonnegative = 1,  numel = 711

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9756e-01  +2.5247e+02  2.52e+02  9.48e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.1402e-01  +5.6272e+01  5.58e+01  4.34e-01  1.42e+01  3.92e-03  5.77e-01  5.79e-01  
  2  +4.6761e-01  +8.6921e+00  8.22e+00  1.17e-01  5.27e+00  2.54e-02  2.37e-01  9.90e-01  
  3  +4.1906e-01  +2.7831e+00  2.36e+00  2.31e-02  1.21e+00  1.30e-02  5.46e-02  7.87e-01  
  4  +3.4389e-01  +2.3584e+00  2.01e+00  1.24e-02  6.47e-01  1.31e-02  3.04e-02  5.65e-01  
  5  +2.9591e-01  +1.1359e+00  8.40e-01  5.42e-03  2.77e-01  1.15e-04  1.45e-02  8.61e-01  
  6  +2.3025e-01  +5.0125e-01  2.71e-01  1.65e-03  8.31e-02  7.45e-05  4.98e-03  7.26e-01  
  7  +2.0466e-01  +3.8898e-01  1.84e-01  1.02e-03  5.35e-02  8.42e-05  3.18e-03  5.24e-01  
  8  +1.9244e-01  +3.3204e-01  1.40e-01  7.40e-04  3.89e-02  7.16e-05  2.37e-03  3.30e-01  
  9  +1.6935e-01  +2.2112e-01  5.18e-02  2.60e-04  1.38e-02  3.80e-05  8.96e-04  8.12e-01  
 10  +1.6486e-01  +2.0137e-01  3.65e-02  1.79e-04  9.65e-03  2.82e-05  6.28e-04  4.01e-01  
 11  +1.5577e-01  +1.6140e-01  5.64e-03  2.76e-05  1.47e-03  4.47e-06  1.02e-04  9.39e-01  
 12  +1.5440e-01  +1.5602e-01  1.62e-03  8.08e-06  4.26e-04  1.34e-06  3.15e-05  8.68e-01  
 13  +1.5382e-01  +1.5388e-01  5.82e-05  2.92e-07  1.53e-05  4.11e-08  1.17e-06  9.74e-01  
 14  +1.5380e-01  +1.5380e-01  5.86e-07  2.95e-09  1.54e-07  4.13e-10  1.18e-08  9.90e-01  
 15  +1.5380e-01  +1.5380e-01  5.87e-09  2.95e-11  1.54e-09  4.13e-12  1.18e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.8275ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:04 PM: Optimal value: 1.538e-01
(CVXPY) Oct 06 04:24:04 PM: Compilation took 1.556e-02 seconds
(CVXPY) Oct 06 04:24:04 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 20, Objective: 0.1538
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:04 PM: Your problem has 471 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:04 PM: Finished problem compilation (took 2.024e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 471
  constraints   = 721
  nnz(P)        = 0
  nnz(A)        = 5814
  cones (total) = 1
    : Nonnegative = 1,  numel = 721

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9741e-01  +2.5291e+02  2.52e+02  9.48e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.0517e-01  +5.6551e+01  5.60e+01  4.33e-01  1.40e+01  3.95e-03  5.76e-01  5.79e-01  
  2  +4.5467e-01  +9.6087e+00  9.15e+00  1.20e-01  5.33e+00  2.62e-02  2.41e-01  9.60e-01  
  3  +3.9734e-01  +2.8503e+00  2.45e+00  2.23e-02  1.15e+00  1.26e-02  5.30e-02  8.02e-01  
  4  +3.3837e-01  +2.4023e+00  2.06e+00  1.37e-02  7.10e-01  1.17e-02  3.36e-02  4.53e-01  
  5  +2.6997e-01  +9.0294e-01  6.33e-01  4.02e-03  2.04e-01  1.11e-04  1.09e-02  8.99e-01  
  6  +2.1518e-01  +5.2088e-01  3.06e-01  1.87e-03  9.44e-02  1.31e-04  5.61e-03  6.53e-01  
  7  +1.8920e-01  +3.7144e-01  1.82e-01  1.05e-03  5.43e-02  9.56e-05  3.29e-03  5.09e-01  
  8  +1.7158e-01  +2.7841e-01  1.07e-01  5.82e-04  3.07e-02  6.41e-05  1.92e-03  5.23e-01  
  9  +1.5490e-01  +1.9350e-01  3.86e-02  2.01e-04  1.07e-02  2.56e-05  7.06e-04  7.10e-01  
 10  +1.5207e-01  +1.7882e-01  2.68e-02  1.38e-04  7.39e-03  2.00e-05  4.94e-04  5.98e-01  
 11  +1.4551e-01  +1.5041e-01  4.90e-03  2.51e-05  1.34e-03  3.35e-06  9.43e-05  8.18e-01  
 12  +1.4445e-01  +1.4578e-01  1.33e-03  6.93e-06  3.66e-04  9.77e-07  2.72e-05  8.38e-01  
 13  +1.4401e-01  +1.4405e-01  3.85e-05  2.02e-07  1.06e-05  2.54e-08  8.11e-07  9.81e-01  
 14  +1.4400e-01  +1.4400e-01  3.86e-07  2.03e-09  1.06e-07  2.55e-10  8.15e-09  9.90e-01  
 15  +1.4400e-01  +1.4400e-01  3.87e-09  2.03e-11  1.06e-09  2.55e-12  8.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.4585ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:04 PM: Optimal value: 1.440e-01
(CVXPY) Oct 06 04:24:04 PM: Compilation took 2.024e-02 seconds
(CVXPY) Oct 06 04:24:04 PM: Solver (including time spent in interface) took 1.992e-02 seconds
Iteration: 21, Objective: 0.1440
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:04 PM: Your problem has 481 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:04 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 481
  constraints   = 731
  nnz(P)        = 0
  nnz(A)        = 5869
  cones (total) = 1
    : Nonnegative = 1,  numel = 731

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9737e-01  +2.5292e+02  2.52e+02  9.48e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.0060e-01  +5.6666e+01  5.62e+01  4.32e-01  1.39e+01  3.97e-03  5.74e-01  5.78e-01  
  2  +4.4876e-01  +9.3036e+00  8.85e+00  1.14e-01  5.06e+00  2.67e-02  2.31e-01  9.82e-01  
  3  +3.8675e-01  +2.8769e+00  2.49e+00  2.20e-02  1.13e+00  1.30e-02  5.24e-02  7.95e-01  
  4  +3.2935e-01  +2.4391e+00  2.11e+00  1.41e-02  7.24e-01  1.14e-02  3.46e-02  4.47e-01  
  5  +2.6760e-01  +9.8408e-01  7.16e-01  4.73e-03  2.37e-01  1.05e-04  1.28e-02  9.05e-01  
  6  +2.0903e-01  +4.8002e-01  2.71e-01  1.72e-03  8.56e-02  9.65e-05  5.21e-03  7.07e-01  
  7  +1.9454e-01  +4.1177e-01  2.17e-01  1.31e-03  6.70e-02  9.48e-05  4.03e-03  3.30e-01  
  8  +1.7176e-01  +2.9426e-01  1.22e-01  6.88e-04  3.60e-02  6.14e-05  2.23e-03  5.15e-01  
  9  +1.5615e-01  +2.1728e-01  6.11e-02  3.25e-04  1.73e-02  3.50e-05  1.11e-03  5.86e-01  
 10  +1.5043e-01  +1.9031e-01  3.99e-02  2.04e-04  1.11e-02  2.66e-05  7.04e-04  5.08e-01  
 11  +1.4335e-01  +1.5911e-01  1.58e-02  7.90e-05  4.28e-03  1.14e-05  2.83e-04  7.11e-01  
 12  +1.3894e-01  +1.4072e-01  1.78e-03  8.98e-06  4.83e-04  1.18e-06  3.38e-05  9.22e-01  
 13  +1.3837e-01  +1.3854e-01  1.72e-04  8.79e-07  4.66e-05  1.29e-07  3.43e-06  9.64e-01  
 14  +1.3830e-01  +1.3830e-01  1.80e-06  9.21e-09  4.88e-07  1.33e-09  3.61e-08  9.89e-01  
 15  +1.3830e-01  +1.3830e-01  1.80e-08  9.22e-11  4.88e-09  1.33e-11  3.61e-10  9.90e-01  
 16  +1.3830e-01  +1.3830e-01  1.80e-10  9.23e-13  4.89e-11  1.33e-13  3.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.998ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:04 PM: Optimal value: 1.383e-01
(CVXPY) Oct 06 04:24:04 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:04 PM: Solver (including time spent in interface) took 3.148e-02 seconds
Iteration: 22, Objective: 0.1383
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:05 PM: Your problem has 491 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:05 PM: Finished problem compilation (took 1.459e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 491
  constraints   = 741
  nnz(P)        = 0
  nnz(A)        = 5912
  cones (total) = 1
    : Nonnegative = 1,  numel = 741

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9719e-01  +2.5295e+02  2.52e+02  9.49e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +4.9302e-01  +5.7027e+01  5.65e+01  4.32e-01  1.38e+01  3.99e-03  5.75e-01  5.76e-01  
  2  +4.4174e-01  +9.5717e+00  9.13e+00  1.15e-01  5.12e+00  2.72e-02  2.34e-01  9.75e-01  
  3  +3.8170e-01  +3.0163e+00  2.63e+00  2.39e-02  1.22e+00  1.26e-02  5.68e-02  7.79e-01  
  4  +3.2173e-01  +2.5649e+00  2.24e+00  1.53e-02  7.78e-01  1.07e-02  3.75e-02  4.81e-01  
  5  +2.6680e-01  +1.0664e+00  8.00e-01  5.48e-03  2.73e-01  9.71e-05  1.47e-02  9.11e-01  
  6  +2.0412e-01  +4.4030e-01  2.36e-01  1.56e-03  7.64e-02  7.95e-05  4.74e-03  7.74e-01  
  7  +1.9594e-01  +4.1137e-01  2.15e-01  1.37e-03  6.84e-02  8.73e-05  4.17e-03  2.30e-01  
  8  +1.7273e-01  +3.0008e-01  1.27e-01  7.42e-04  3.84e-02  6.03e-05  2.37e-03  4.99e-01  
  9  +1.5966e-01  +2.3885e-01  7.92e-02  4.37e-04  2.30e-02  4.23e-05  1.45e-03  4.72e-01  
 10  +1.4890e-01  +1.8900e-01  4.01e-02  2.11e-04  1.13e-02  2.43e-05  7.20e-04  5.81e-01  
 11  +1.4234e-01  +1.6067e-01  1.83e-02  9.40e-05  5.07e-03  1.25e-05  3.32e-04  7.00e-01  
 12  +1.3739e-01  +1.4008e-01  2.69e-03  1.37e-05  7.37e-04  1.99e-06  5.09e-05  9.48e-01  
 13  +1.3655e-01  +1.3695e-01  3.96e-04  2.05e-06  1.08e-04  2.82e-07  7.92e-06  8.74e-01  
 14  +1.3640e-01  +1.3641e-01  1.04e-05  5.41e-08  2.86e-06  7.81e-09  2.12e-07  9.86e-01  
 15  +1.3640e-01  +1.3640e-01  1.04e-07  5.41e-10  2.86e-08  7.81e-11  2.12e-09  9.90e-01  
 16  +1.3640e-01  +1.3640e-01  1.04e-09  5.41e-12  2.86e-10  7.81e-13  2.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.7887ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:05 PM: Optimal value: 1.364e-01
(CVXPY) Oct 06 04:24:05 PM: Compilation took 1.459e-02 seconds
(CVXPY) Oct 06 04:24:05 PM: Solver (including time spent in interface) took 1.572e-02 seconds
Iteration: 23, Objective: 0.1364
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:05 PM: Your problem has 501 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 501
  constraints   = 751
  nnz(P)        = 0
  nnz(A)        = 5951
  cones (total) = 1
    : Nonnegative = 1,  numel = 751

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9709e-01  +2.5303e+02  2.53e+02  9.49e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +4.8849e-01  +5.7085e+01  5.66e+01  4.32e-01  1.36e+01  4.00e-03  5.74e-01  5.76e-01  
  2  +4.3539e-01  +9.5180e+00  9.08e+00  1.11e-01  4.92e+00  2.76e-02  2.28e-01  9.85e-01  
  3  +3.7405e-01  +3.3511e+00  2.98e+00  2.65e-02  1.33e+00  1.36e-02  6.27e-02  7.47e-01  
  4  +3.1625e-01  +2.6962e+00  2.38e+00  1.63e-02  8.22e-01  1.09e-02  4.01e-02  4.71e-01  
  5  +2.5703e-01  +9.1010e-01  6.53e-01  4.42e-03  2.18e-01  2.74e-04  1.20e-02  8.96e-01  
  6  +2.0353e-01  +5.0869e-01  3.05e-01  2.00e-03  9.78e-02  1.76e-04  5.96e-03  6.64e-01  
  7  +1.8341e-01  +3.9117e-01  2.08e-01  1.28e-03  6.44e-02  1.33e-04  3.96e-03  4.33e-01  
  8  +1.6461e-01  +2.8689e-01  1.22e-01  7.05e-04  3.63e-02  8.41e-05  2.27e-03  5.02e-01  
  9  +1.5265e-01  +2.2543e-01  7.28e-02  3.98e-04  2.09e-02  5.26e-05  1.33e-03  4.87e-01  
 10  +1.4356e-01  +1.8011e-01  3.66e-02  1.90e-04  1.02e-02  2.91e-05  6.49e-04  6.32e-01  
 11  +1.3760e-01  +1.5287e-01  1.53e-02  7.77e-05  4.17e-03  1.25e-05  2.75e-04  7.54e-01  
 12  +1.3321e-01  +1.3489e-01  1.67e-03  8.54e-06  4.54e-04  1.12e-06  3.19e-05  9.13e-01  
 13  +1.3266e-01  +1.3281e-01  1.50e-04  7.74e-07  4.06e-05  1.13e-07  3.02e-06  9.69e-01  
 14  +1.3260e-01  +1.3260e-01  1.64e-06  8.49e-09  4.45e-07  1.22e-09  3.34e-08  9.89e-01  
 15  +1.3260e-01  +1.3260e-01  1.64e-08  8.50e-11  4.45e-09  1.22e-11  3.34e-10  9.90e-01  
 16  +1.3260e-01  +1.3260e-01  1.64e-10  8.51e-13  4.46e-11  1.22e-13  3.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.8758ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:05 PM: Optimal value: 1.326e-01
(CVXPY) Oct 06 04:24:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:05 PM: Solver (including time spent in interface) took 3.191e-02 seconds
Iteration: 24, Objective: 0.1326
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:05 PM: Your problem has 511 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:05 PM: Finished problem compilation (took 1.358e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 761
  nnz(P)        = 0
  nnz(A)        = 6008
  cones (total) = 1
    : Nonnegative = 1,  numel = 761

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9705e-01  +2.5298e+02  2.52e+02  9.49e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +4.8215e-01  +5.7350e+01  5.69e+01  4.30e-01  1.35e+01  4.03e-03  5.73e-01  5.74e-01  
  2  +4.2820e-01  +1.0292e+01  9.86e+00  1.18e-01  5.15e+00  2.75e-02  2.40e-01  9.48e-01  
  3  +3.7361e-01  +3.6026e+00  3.23e+00  3.02e-02  1.49e+00  1.27e-02  7.14e-02  7.26e-01  
  4  +3.0322e-01  +2.9210e+00  2.62e+00  1.77e-02  8.78e-01  1.08e-02  4.35e-02  5.26e-01  
  5  +2.6035e-01  +1.1121e+00  8.52e-01  6.05e-03  2.95e-01  9.41e-05  1.63e-02  9.32e-01  
  6  +1.9847e-01  +4.4443e-01  2.46e-01  1.69e-03  8.08e-02  8.12e-05  5.12e-03  7.83e-01  
  7  +1.9095e-01  +4.1849e-01  2.28e-01  1.51e-03  7.35e-02  8.86e-05  4.58e-03  2.05e-01  
  8  +1.6591e-01  +2.9732e-01  1.31e-01  7.95e-04  3.99e-02  6.13e-05  2.53e-03  5.25e-01  
  9  +1.5366e-01  +2.3989e-01  8.62e-02  4.90e-04  2.52e-02  4.86e-05  1.61e-03  5.04e-01  
 10  +1.4245e-01  +1.8670e-01  4.42e-02  2.40e-04  1.25e-02  2.88e-05  8.16e-04  6.19e-01  
 11  +1.3599e-01  +1.5887e-01  2.29e-02  1.20e-04  6.33e-03  1.58e-05  4.21e-04  6.20e-01  
 12  +1.2986e-01  +1.3281e-01  2.96e-03  1.54e-05  8.06e-04  2.03e-06  5.68e-05  9.48e-01  
 13  +1.2894e-01  +1.2931e-01  3.70e-04  1.96e-06  1.01e-04  2.49e-07  7.63e-06  9.06e-01  
 14  +1.2880e-01  +1.2881e-01  7.64e-06  4.05e-08  2.08e-06  5.25e-09  1.60e-07  9.85e-01  
 15  +1.2880e-01  +1.2880e-01  7.64e-08  4.05e-10  2.09e-08  5.25e-11  1.60e-09  9.90e-01  
 16  +1.2880e-01  +1.2880e-01  7.64e-10  4.05e-12  2.09e-10  5.25e-13  1.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.6944ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:05 PM: Optimal value: 1.288e-01
(CVXPY) Oct 06 04:24:05 PM: Compilation took 1.358e-02 seconds
(CVXPY) Oct 06 04:24:05 PM: Solver (including time spent in interface) took 1.572e-02 seconds
Iteration: 25, Objective: 0.1288
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:05 PM: Your problem has 521 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:05 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 771
  nnz(P)        = 0
  nnz(A)        = 6051
  cones (total) = 1
    : Nonnegative = 1,  numel = 771

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9690e-01  +2.5302e+02  2.53e+02  9.50e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +4.7357e-01  +5.7422e+01  5.69e+01  4.28e-01  1.34e+01  4.06e-03  5.70e-01  5.75e-01  
  2  +4.1289e-01  +1.1207e+01  1.08e+01  1.19e-01  5.16e+00  2.81e-02  2.41e-01  9.24e-01  
  3  +3.5159e-01  +3.7430e+00  3.39e+00  2.96e-02  1.45e+00  1.29e-02  6.98e-02  7.31e-01  
  4  +2.9455e-01  +2.7855e+00  2.49e+00  1.77e-02  8.73e-01  9.54e-03  4.34e-02  4.53e-01  
  5  +2.4081e-01  +9.0802e-01  6.67e-01  4.82e-03  2.33e-01  2.98e-04  1.30e-02  9.25e-01  
  6  +1.8812e-01  +4.8662e-01  2.98e-01  2.08e-03  9.98e-02  1.72e-04  6.18e-03  6.75e-01  
  7  +1.7026e-01  +3.8604e-01  2.16e-01  1.41e-03  6.92e-02  1.38e-04  4.32e-03  4.19e-01  
  8  +1.5063e-01  +2.7407e-01  1.23e-01  7.46e-04  3.76e-02  8.48e-05  2.40e-03  5.14e-01  
  9  +1.3932e-01  +2.1490e-01  7.56e-02  4.32e-04  2.22e-02  5.39e-05  1.44e-03  4.51e-01  
 10  +1.2945e-01  +1.6439e-01  3.49e-02  1.89e-04  9.92e-03  2.73e-05  6.48e-04  6.70e-01  
 11  +1.2408e-01  +1.3932e-01  1.52e-02  8.08e-05  4.25e-03  1.21e-05  2.88e-04  7.71e-01  
 12  +1.1977e-01  +1.2167e-01  1.90e-03  1.00e-05  5.24e-04  1.25e-06  3.77e-05  9.02e-01  
 13  +1.1916e-01  +1.1933e-01  1.63e-04  8.77e-07  4.52e-05  1.11e-07  3.45e-06  9.51e-01  
 14  +1.1910e-01  +1.1910e-01  1.87e-06  1.00e-08  5.17e-07  1.25e-09  3.97e-08  9.89e-01  
 15  +1.1910e-01  +1.1910e-01  1.87e-08  1.00e-10  5.17e-09  1.25e-11  3.97e-10  9.90e-01  
 16  +1.1910e-01  +1.1910e-01  1.87e-10  1.00e-12  5.17e-11  1.25e-13  3.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.9001ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:05 PM: Optimal value: 1.191e-01
(CVXPY) Oct 06 04:24:05 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:24:05 PM: Solver (including time spent in interface) took 1.571e-02 seconds
Iteration: 26, Objective: 0.1191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:05 PM: Your problem has 531 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:05 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 781
  nnz(P)        = 0
  nnz(A)        = 6087
  cones (total) = 1
    : Nonnegative = 1,  numel = 781

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9688e-01  +2.5309e+02  2.53e+02  9.50e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +4.7066e-01  +5.7398e+01  5.69e+01  4.28e-01  1.32e+01  4.07e-03  5.68e-01  5.76e-01  
  2  +4.0679e-01  +1.1731e+01  1.13e+01  1.21e-01  5.19e+00  2.81e-02  2.44e-01  9.07e-01  
  3  +3.4363e-01  +3.7665e+00  3.42e+00  2.91e-02  1.41e+00  1.26e-02  6.89e-02  7.38e-01  
  4  +2.8822e-01  +2.6734e+00  2.39e+00  1.69e-02  8.26e-01  8.75e-03  4.16e-02  4.61e-01  
  5  +2.3605e-01  +8.6942e-01  6.33e-01  4.57e-03  2.19e-01  8.55e-04  1.24e-02  8.45e-01  
  6  +1.8899e-01  +5.1465e-01  3.26e-01  2.28e-03  1.09e-01  4.05e-04  6.68e-03  6.02e-01  
  7  +1.6220e-01  +3.4523e-01  1.83e-01  1.18e-03  5.81e-02  2.26e-04  3.65e-03  5.70e-01  
  8  +1.4924e-01  +2.7441e-01  1.25e-01  7.53e-04  3.83e-02  1.53e-04  2.40e-03  4.36e-01  
  9  +1.3527e-01  +2.0010e-01  6.48e-02  3.63e-04  1.90e-02  7.65e-05  1.21e-03  5.90e-01  
 10  +1.2711e-01  +1.6081e-01  3.37e-02  1.77e-04  9.52e-03  3.75e-05  6.09e-04  6.43e-01  
 11  +1.1886e-01  +1.2385e-01  4.99e-03  2.59e-05  1.38e-03  4.22e-06  9.40e-05  8.97e-01  
 12  +1.1782e-01  +1.1963e-01  1.81e-03  9.52e-06  5.03e-04  1.48e-06  3.63e-05  6.43e-01  
 13  +1.1728e-01  +1.1751e-01  2.28e-04  1.21e-06  6.34e-05  1.76e-07  4.81e-06  8.95e-01  
 14  +1.1720e-01  +1.1720e-01  3.54e-06  1.87e-08  9.82e-07  2.67e-09  7.54e-08  9.90e-01  
 15  +1.1720e-01  +1.1720e-01  3.55e-08  1.88e-10  9.83e-09  2.67e-11  7.55e-10  9.90e-01  
 16  +1.1720e-01  +1.1720e-01  3.55e-10  1.88e-12  9.84e-11  2.68e-13  7.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.2958ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:05 PM: Optimal value: 1.172e-01
(CVXPY) Oct 06 04:24:05 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:05 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 27, Objective: 0.1172
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:06 PM: Your problem has 541 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:06 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 791
  nnz(P)        = 0
  nnz(A)        = 6158
  cones (total) = 1
    : Nonnegative = 1,  numel = 791

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9684e-01  +2.5312e+02  2.53e+02  9.50e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +4.6770e-01  +5.7446e+01  5.70e+01  4.27e-01  1.31e+01  4.08e-03  5.67e-01  5.76e-01  
  2  +4.0165e-01  +1.1551e+01  1.11e+01  1.18e-01  5.03e+00  2.83e-02  2.39e-01  9.17e-01  
  3  +3.3657e-01  +3.6682e+00  3.33e+00  2.81e-02  1.36e+00  1.23e-02  6.69e-02  7.42e-01  
  4  +2.8295e-01  +2.6652e+00  2.38e+00  1.69e-02  8.23e-01  8.82e-03  4.19e-02  4.35e-01  
  5  +2.3172e-01  +8.5048e-01  6.19e-01  4.52e-03  2.15e-01  5.52e-04  1.23e-02  8.97e-01  
  6  +1.8306e-01  +4.7519e-01  2.92e-01  2.05e-03  9.75e-02  2.63e-04  6.01e-03  6.17e-01  
  7  +1.6429e-01  +3.7178e-01  2.07e-01  1.36e-03  6.66e-02  1.92e-04  4.10e-03  4.33e-01  
  8  +1.4346e-01  +2.5758e-01  1.14e-01  6.78e-04  3.47e-02  1.10e-04  2.16e-03  5.58e-01  
  9  +1.3173e-01  +1.9651e-01  6.48e-02  3.64e-04  1.90e-02  6.06e-05  1.20e-03  6.13e-01  
 10  +1.2551e-01  +1.6706e-01  4.16e-02  2.23e-04  1.18e-02  3.91e-05  7.54e-04  4.88e-01  
 11  +1.1685e-01  +1.2770e-01  1.09e-02  5.69e-05  3.02e-03  9.19e-06  2.03e-04  8.45e-01  
 12  +1.1432e-01  +1.1731e-01  2.98e-03  1.58e-05  8.26e-04  2.37e-06  5.94e-05  7.86e-01  
 13  +1.1348e-01  +1.1418e-01  7.05e-04  3.70e-06  1.92e-04  5.47e-07  1.48e-05  8.46e-01  
 14  +1.1321e-01  +1.1324e-01  3.15e-05  1.65e-07  8.50e-06  2.33e-08  6.78e-07  9.65e-01  
 15  +1.1320e-01  +1.1320e-01  3.18e-07  1.66e-09  8.56e-08  2.35e-10  6.84e-09  9.90e-01  
 16  +1.1320e-01  +1.1320e-01  3.18e-09  1.66e-11  8.56e-10  2.35e-12  6.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.7942ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:06 PM: Optimal value: 1.132e-01
(CVXPY) Oct 06 04:24:06 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:06 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 28, Objective: 0.1132
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:06 PM: Your problem has 551 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:06 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 551
  constraints   = 801
  nnz(P)        = 0
  nnz(A)        = 6190
  cones (total) = 1
    : Nonnegative = 1,  numel = 801

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9679e-01  +2.5315e+02  2.53e+02  9.51e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +4.6238e-01  +5.7763e+01  5.73e+01  4.27e-01  1.30e+01  4.10e-03  5.67e-01  5.74e-01  
  2  +3.9458e-01  +9.9876e+00  9.59e+00  1.03e-01  4.44e+00  2.94e-02  2.15e-01  9.88e-01  
  3  +3.3150e-01  +3.7550e+00  3.42e+00  2.94e-02  1.41e+00  1.35e-02  7.02e-02  7.01e-01  
  4  +2.7747e-01  +2.6631e+00  2.39e+00  1.72e-02  8.29e-01  9.38e-03  4.28e-02  4.52e-01  
  5  +2.2769e-01  +8.2887e-01  6.01e-01  4.45e-03  2.10e-01  6.43e-04  1.21e-02  8.91e-01  
  6  +1.8158e-01  +4.7601e-01  2.94e-01  2.09e-03  9.89e-02  3.08e-04  6.13e-03  5.96e-01  
  7  +1.6089e-01  +3.5883e-01  1.98e-01  1.30e-03  6.35e-02  2.09e-04  3.96e-03  4.67e-01  
  8  +1.4340e-01  +2.6324e-01  1.20e-01  7.26e-04  3.67e-02  1.29e-04  2.30e-03  4.93e-01  
  9  +1.3042e-01  +1.9469e-01  6.43e-02  3.65e-04  1.89e-02  6.55e-05  1.21e-03  6.37e-01  
 10  +1.2559e-01  +1.7207e-01  4.65e-02  2.51e-04  1.33e-02  4.73e-05  8.41e-04  4.49e-01  
 11  +1.1569e-01  +1.2712e-01  1.14e-02  5.95e-05  3.15e-03  9.06e-06  2.12e-04  9.90e-01  
 12  +1.1257e-01  +1.1545e-01  2.88e-03  1.50e-05  7.85e-04  2.21e-06  5.67e-05  8.48e-01  
 13  +1.1165e-01  +1.1225e-01  6.04e-04  3.14e-06  1.63e-04  4.54e-07  1.25e-05  8.39e-01  
 14  +1.1141e-01  +1.1144e-01  2.97e-05  1.54e-07  7.94e-06  2.19e-08  6.27e-07  9.63e-01  
 15  +1.1140e-01  +1.1140e-01  3.01e-07  1.56e-09  8.05e-08  2.22e-10  6.36e-09  9.90e-01  
 16  +1.1140e-01  +1.1140e-01  3.01e-09  1.56e-11  8.05e-10  2.22e-12  6.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.0249ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:06 PM: Optimal value: 1.114e-01
(CVXPY) Oct 06 04:24:06 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:06 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 29, Objective: 0.1114
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:06 PM: Your problem has 561 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:06 PM: Finished problem compilation (took 1.649e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 561
  constraints   = 811
  nnz(P)        = 0
  nnz(A)        = 6232
  cones (total) = 1
    : Nonnegative = 1,  numel = 811

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9677e-01  +2.5317e+02  2.53e+02  9.51e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +4.5982e-01  +5.7799e+01  5.73e+01  4.27e-01  1.29e+01  4.11e-03  5.66e-01  5.74e-01  
  2  +3.9096e-01  +1.0032e+01  9.64e+00  1.03e-01  4.41e+00  2.94e-02  2.15e-01  9.86e-01  
  3  +3.2707e-01  +3.7861e+00  3.46e+00  2.97e-02  1.41e+00  1.36e-02  7.08e-02  6.96e-01  
  4  +2.7373e-01  +2.6761e+00  2.40e+00  1.75e-02  8.34e-01  9.38e-03  4.35e-02  4.43e-01  
  5  +2.2528e-01  +8.3428e-01  6.09e-01  4.55e-03  2.13e-01  5.93e-04  1.24e-02  9.03e-01  
  6  +1.7962e-01  +4.8150e-01  3.02e-01  2.17e-03  1.02e-01  2.90e-04  6.37e-03  6.05e-01  
  7  +1.5783e-01  +3.5540e-01  1.98e-01  1.31e-03  6.34e-02  1.93e-04  4.00e-03  4.89e-01  
  8  +1.4066e-01  +2.6099e-01  1.20e-01  7.34e-04  3.68e-02  1.21e-04  2.33e-03  4.91e-01  
  9  +1.3031e-01  +2.0541e-01  7.51e-02  4.36e-04  2.23e-02  7.32e-05  1.43e-03  5.23e-01  
 10  +1.2271e-01  +1.6730e-01  4.46e-02  2.45e-04  1.28e-02  4.36e-05  8.27e-04  5.53e-01  
 11  +1.1705e-01  +1.4095e-01  2.39e-02  1.29e-04  6.73e-03  2.11e-05  4.52e-04  6.60e-01  
 12  +1.1131e-01  +1.1668e-01  5.37e-03  2.85e-05  1.49e-03  4.32e-06  1.05e-04  7.82e-01  
 13  +1.1001e-01  +1.1132e-01  1.31e-03  6.96e-06  3.59e-04  1.04e-06  2.73e-05  9.14e-01  
 14  +1.0957e-01  +1.0974e-01  1.70e-04  9.00e-07  4.62e-05  1.32e-07  3.65e-06  9.27e-01  
 15  +1.0950e-01  +1.0950e-01  2.34e-06  1.24e-08  6.35e-07  1.79e-09  5.05e-08  9.86e-01  
 16  +1.0950e-01  +1.0950e-01  2.35e-08  1.24e-10  6.36e-09  1.79e-11  5.06e-10  9.90e-01  
 17  +1.0950e-01  +1.0950e-01  2.35e-10  1.24e-12  6.37e-11  1.80e-13  5.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.9176ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:06 PM: Optimal value: 1.095e-01
(CVXPY) Oct 06 04:24:06 PM: Compilation took 1.649e-02 seconds
(CVXPY) Oct 06 04:24:06 PM: Solver (including time spent in interface) took 3.080e-02 seconds
Iteration: 30, Objective: 0.1095
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:06 PM: Your problem has 565 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:06 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 565
  constraints   = 815
  nnz(P)        = 0
  nnz(A)        = 6260
  cones (total) = 1
    : Nonnegative = 1,  numel = 815

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9675e-01  +2.5317e+02  2.53e+02  9.51e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +4.5879e-01  +5.7855e+01  5.74e+01  4.28e-01  1.28e+01  4.11e-03  5.66e-01  5.74e-01  
  2  +3.8946e-01  +9.9606e+00  9.57e+00  1.02e-01  4.38e+00  2.95e-02  2.14e-01  9.90e-01  
  3  +3.2372e-01  +3.5930e+00  3.27e+00  2.80e-02  1.33e+00  1.31e-02  6.72e-02  7.12e-01  
  4  +2.7056e-01  +2.5474e+00  2.28e+00  1.66e-02  7.92e-01  9.13e-03  4.15e-02  4.34e-01  
  5  +2.2173e-01  +8.0668e-01  5.85e-01  4.39e-03  2.05e-01  5.89e-04  1.20e-02  9.02e-01  
  6  +1.7567e-01  +4.6152e-01  2.86e-01  2.05e-03  9.58e-02  2.82e-04  6.04e-03  6.24e-01  
  7  +1.5639e-01  +3.5274e-01  1.96e-01  1.30e-03  6.29e-02  1.96e-04  4.00e-03  4.54e-01  
  8  +1.4026e-01  +2.6302e-01  1.23e-01  7.57e-04  3.76e-02  1.23e-04  2.42e-03  4.65e-01  
  9  +1.2747e-01  +1.9177e-01  6.43e-02  3.76e-04  1.90e-02  6.11e-05  1.26e-03  6.54e-01  
 10  +1.2354e-01  +1.7226e-01  4.87e-02  2.71e-04  1.40e-02  4.66e-05  9.21e-04  4.33e-01  
 11  +1.1550e-01  +1.3287e-01  1.74e-02  9.47e-05  4.90e-03  1.35e-05  3.39e-04  9.90e-01  
 12  +1.1140e-01  +1.1671e-01  5.31e-03  2.87e-05  1.48e-03  3.91e-06  1.08e-04  7.11e-01  
 13  +1.1006e-01  +1.1155e-01  1.49e-03  7.98e-06  4.08e-04  1.15e-06  3.17e-05  9.19e-01  
 14  +1.0961e-01  +1.0989e-01  2.84e-04  1.52e-06  7.77e-05  2.15e-07  6.20e-06  8.14e-01  
 15  +1.0950e-01  +1.0951e-01  6.63e-06  3.57e-08  1.81e-06  4.97e-09  1.46e-07  9.90e-01  
 16  +1.0950e-01  +1.0950e-01  6.63e-08  3.57e-10  1.82e-08  4.97e-11  1.46e-09  9.90e-01  
 17  +1.0950e-01  +1.0950e-01  6.63e-10  3.57e-12  1.82e-10  4.98e-13  1.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.3032ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:06 PM: Optimal value: 1.095e-01
(CVXPY) Oct 06 04:24:06 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:06 PM: Solver (including time spent in interface) took 3.080e-02 seconds
Iteration: 31, Objective: 0.1095
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:06 PM: Your problem has 566 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:06 PM: Finished problem compilation (took 1.542e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 566
  constraints   = 816
  nnz(P)        = 0
  nnz(A)        = 6263
  cones (total) = 1
    : Nonnegative = 1,  numel = 816

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9675e-01  +2.5317e+02  2.53e+02  9.51e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +4.5848e-01  +5.7810e+01  5.74e+01  4.27e-01  1.28e+01  4.12e-03  5.66e-01  5.74e-01  
  2  +3.8852e-01  +9.9474e+00  9.56e+00  1.02e-01  4.36e+00  2.95e-02  2.13e-01  9.90e-01  
  3  +3.2288e-01  +3.5847e+00  3.26e+00  2.80e-02  1.33e+00  1.31e-02  6.70e-02  7.11e-01  
  4  +2.6982e-01  +2.5480e+00  2.28e+00  1.66e-02  7.91e-01  9.10e-03  4.16e-02  4.31e-01  
  5  +2.2109e-01  +8.0470e-01  5.84e-01  4.38e-03  2.04e-01  5.66e-04  1.20e-02  9.06e-01  
  6  +1.7556e-01  +4.5330e-01  2.78e-01  1.99e-03  9.31e-02  2.68e-04  5.88e-03  6.08e-01  
  7  +1.5717e-01  +3.5398e-01  1.97e-01  1.31e-03  6.32e-02  1.92e-04  4.00e-03  4.38e-01  
  8  +1.4035e-01  +2.6194e-01  1.22e-01  7.51e-04  3.73e-02  1.20e-04  2.39e-03  4.73e-01  
  9  +1.2716e-01  +1.9000e-01  6.28e-02  3.67e-04  1.85e-02  5.90e-05  1.23e-03  6.57e-01  
 10  +1.2373e-01  +1.7308e-01  4.93e-02  2.74e-04  1.42e-02  4.68e-05  9.28e-04  4.07e-01  
 11  +1.1618e-01  +1.3556e-01  1.94e-02  1.07e-04  5.50e-03  1.52e-05  3.78e-04  9.90e-01  
 12  +1.1152e-01  +1.1715e-01  5.64e-03  3.05e-05  1.58e-03  4.14e-06  1.14e-04  7.20e-01  
 13  +1.1016e-01  +1.1191e-01  1.75e-03  9.42e-06  4.82e-04  1.35e-06  3.73e-05  9.01e-01  
 14  +1.0963e-01  +1.0997e-01  3.41e-04  1.83e-06  9.33e-05  2.58e-07  7.45e-06  8.10e-01  
 15  +1.0950e-01  +1.0952e-01  1.17e-05  6.30e-08  3.20e-06  8.78e-09  2.58e-07  9.90e-01  
 16  +1.0950e-01  +1.0950e-01  1.17e-07  6.31e-10  3.21e-08  8.80e-11  2.59e-09  9.90e-01  
 17  +1.0950e-01  +1.0950e-01  1.17e-09  6.31e-12  3.21e-10  8.81e-13  2.59e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.9673ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:06 PM: Optimal value: 1.095e-01
(CVXPY) Oct 06 04:24:06 PM: Compilation took 1.542e-02 seconds
(CVXPY) Oct 06 04:24:06 PM: Solver (including time spent in interface) took 1.509e-02 seconds
FULL MODEL:
  Accruacy: 0.856
  Our objective: 0.7120000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.184)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.044)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x4 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x2 = 0 AND x4 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x7 = 1)                                             <-- (term's our objective: 0.044)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x6 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x9 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.052)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.036)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.016)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.036)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.016)
 OR (x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.024)
 OR (x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.024)
 OR (x2 = 1 AND x4 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)                                             <-- (term's our objective: 0.028)
 OR (x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x9 = 1)                                             <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 11.196693420410156
Best over terms:
  Our final objective: 0.184
    Its accruacy: 0.592
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.184
  Highest accruacy: 0.592
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

