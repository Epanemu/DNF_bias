Command:
python test_script.py -s constant_subclass -d 3 -n 10000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15139999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 3.

Computed total variation: 0.15139999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:07 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:07 PM: Finished problem compilation (took 6.964e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 30007
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0009e+03  5.00e+03  9.84e-01  7.83e+01  1.00e+00  1.00e+00   ------   
  1  +6.2012e-01  +9.2711e+02  9.26e+02  3.06e-01  4.08e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5584e-01  +1.5889e+02  1.58e+02  1.36e-01  2.16e+01  6.67e-03  2.21e-01  6.63e-01  
  3  +5.0957e-01  +2.8078e+01  2.76e+01  1.04e-01  1.61e+01  1.17e-05  2.19e-01  5.23e-02  
  4  +5.0002e-01  +1.1214e+00  6.21e-01  4.15e-03  6.50e-01  3.24e-06  1.69e-01  7.08e-01  
  5  +4.9998e-01  +6.3685e-01  1.37e-01  9.13e-04  1.44e-01  1.10e-06  3.35e-02  8.24e-01  
  6  +4.9508e-01  +1.3392e+00  8.44e-01  8.75e-04  1.39e-01  7.30e-05  2.78e-03  9.70e-01  
  7  +4.7783e-01  +8.4089e-01  3.63e-01  1.00e-04  1.59e-02  2.00e-04  3.12e-04  8.89e-01  
  8  +4.6337e-01  +5.1680e-01  5.34e-02  1.37e-05  2.17e-03  1.97e-06  4.64e-05  9.02e-01  
  9  +4.5333e-01  +4.6102e-01  7.69e-03  1.75e-06  2.77e-04  2.75e-07  6.72e-06  8.81e-01  
 10  +4.5067e-01  +4.5088e-01  2.18e-04  4.53e-08  7.16e-06  8.23e-09  1.92e-07  9.80e-01  
 11  +4.5060e-01  +4.5060e-01  2.18e-06  4.52e-10  7.15e-08  8.23e-11  1.92e-09  9.90e-01  
 12  +4.5060e-01  +4.5060e-01  2.18e-08  4.53e-12  7.16e-10  8.45e-13  1.97e-11  9.90e-01  
 13  +4.5060e-01  +4.5060e-01  2.18e-10  4.54e-14  7.16e-12  8.67e-15  2.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.6031ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:07 PM: Optimal value: 4.506e-01
(CVXPY) Oct 06 03:48:07 PM: Compilation took 6.964e-02 seconds
(CVXPY) Oct 06 03:48:07 PM: Solver (including time spent in interface) took 6.000e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4506
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:07 PM: Your problem has 5010 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:07 PM: Finished problem compilation (took 2.268e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5010
  constraints   = 10010
  nnz(P)        = 0
  nnz(A)        = 34180
  cones (total) = 1
    : Nonnegative = 1,  numel = 10010

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +5.0014e+03  5.00e+03  9.84e-01  8.20e+01  1.00e+00  1.00e+00   ------   
  1  +6.1998e-01  +9.2765e+02  9.27e+02  3.07e-01  4.27e+01  4.25e-03  4.37e-01  6.94e-01  
  2  +5.5568e-01  +1.5857e+02  1.58e+02  1.36e-01  2.26e+01  6.70e-03  2.21e-01  6.64e-01  
  3  +5.0944e-01  +2.7788e+01  2.73e+01  1.03e-01  1.67e+01  1.17e-05  2.19e-01  5.40e-02  
  4  +5.0080e-01  +3.4022e+00  2.90e+00  1.92e-02  3.08e+00  4.20e-06  2.06e-01  1.83e-01  
  5  +5.0003e-01  +8.2982e-01  3.30e-01  2.20e-03  3.62e-01  1.27e-06  7.81e-02  7.98e-01  
  6  +4.9995e-01  +7.2043e-01  2.20e-01  1.46e-03  2.40e-01  1.67e-06  2.42e-02  7.81e-01  
  7  +4.9580e-01  +8.0386e-01  3.08e-01  2.97e-04  4.95e-02  5.34e-05  8.74e-04  9.90e-01  
  8  +4.9268e-01  +7.7421e-01  2.82e-01  1.69e-04  2.82e-02  7.69e-05  4.87e-04  4.67e-01  
  9  +4.8742e-01  +7.0995e-01  2.23e-01  7.86e-05  1.31e-02  8.81e-05  2.22e-04  6.78e-01  
 10  +4.8850e-01  +7.0089e-01  2.12e-01  7.70e-05  1.28e-02  6.69e-05  2.18e-04  1.74e-01  
 11  +4.8253e-01  +6.4650e-01  1.64e-01  3.93e-05  6.54e-03  3.42e-05  1.10e-04  8.90e-01  
 12  +4.5822e-01  +5.4063e-01  8.24e-02  1.46e-05  2.42e-03  1.45e-05  4.29e-05  7.53e-01  
 13  +4.4430e-01  +4.9068e-01  4.64e-02  7.64e-06  1.27e-03  7.84e-06  2.31e-05  4.86e-01  
 14  +4.4221e-01  +4.8203e-01  3.98e-02  6.97e-06  1.15e-03  5.36e-06  2.30e-05  7.52e-02  
 15  +4.3536e-01  +4.5595e-01  2.06e-02  3.55e-06  5.88e-04  2.58e-06  1.19e-05  5.57e-01  
 16  +4.3435e-01  +4.5817e-01  2.38e-02  3.80e-06  6.30e-04  3.31e-06  1.18e-05  6.26e-02  
 17  +4.2466e-01  +4.2522e-01  5.59e-04  8.79e-08  1.46e-05  3.27e-08  2.81e-07  9.90e-01  
 18  +4.2440e-01  +4.2441e-01  5.59e-06  8.79e-10  1.45e-07  3.26e-10  2.81e-09  9.90e-01  
 19  +4.2440e-01  +4.2440e-01  5.59e-08  8.79e-12  1.45e-09  3.28e-12  2.82e-11  9.90e-01  
 20  +4.2440e-01  +4.2440e-01  5.59e-10  8.79e-14  1.45e-11  3.29e-14  2.83e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.3622ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:07 PM: Optimal value: 4.244e-01
(CVXPY) Oct 06 03:48:07 PM: Compilation took 2.268e-02 seconds
(CVXPY) Oct 06 03:48:07 PM: Solver (including time spent in interface) took 1.039e-01 seconds
FULL MODEL:
  Accruacy: 0.5757
  Our objective: 0.15140000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1514)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.642421245574951
Best over terms:
  Our final objective: 0.15140000000000003
    Its accruacy: 0.5757
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15140000000000003
  Highest accruacy: 0.5757
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

