Command:
python test_script.py -s constant_subclass -d 4 -n 500 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.23199999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:58 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:58 PM: Finished problem compilation (took 4.022e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +2.5080e+02  2.50e+02  9.32e-01  1.85e+01  1.00e+00  1.01e+00   ------   
  1  +6.0724e-01  +4.8864e+01  4.83e+01  3.19e-01  1.01e+01  4.09e-03  4.76e-01  6.68e-01  
  2  +5.4760e-01  +7.6534e+00  7.11e+00  1.13e-01  4.29e+00  8.48e-03  2.17e-01  7.56e-01  
  3  +5.0109e-01  +1.3070e+00  8.06e-01  2.40e-02  8.81e-01  1.36e-03  1.93e-01  4.52e-01  
  4  +4.9986e-01  +6.7662e-01  1.77e-01  5.26e-03  1.99e-01  3.92e-04  4.36e-02  8.16e-01  
  5  +4.8436e-01  +8.8493e-01  4.01e-01  2.28e-03  8.83e-02  4.39e-03  7.27e-03  9.27e-01  
  6  +4.6845e-01  +5.7350e-01  1.05e-01  5.49e-04  2.11e-02  4.41e-05  1.92e-03  8.42e-01  
  7  +4.5392e-01  +4.9119e-01  3.73e-02  1.73e-04  6.66e-03  1.47e-05  6.84e-04  6.66e-01  
  8  +4.4669e-01  +4.5521e-01  8.52e-03  3.63e-05  1.39e-03  6.74e-06  1.60e-04  9.58e-01  
  9  +4.4441e-01  +4.4534e-01  9.31e-04  3.91e-06  1.50e-04  8.11e-07  1.78e-05  9.90e-01  
 10  +4.4410e-01  +4.4411e-01  9.34e-06  3.92e-08  1.51e-06  8.13e-09  1.80e-07  9.90e-01  
 11  +4.4410e-01  +4.4410e-01  9.34e-08  3.92e-10  1.51e-08  8.13e-11  1.80e-09  9.90e-01  
 12  +4.4410e-01  +4.4410e-01  9.34e-10  3.92e-12  1.51e-10  8.13e-13  1.80e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.9017ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:58 PM: Optimal value: 4.441e-01
(CVXPY) Oct 06 03:49:58 PM: Compilation took 4.022e-02 seconds
(CVXPY) Oct 06 03:49:58 PM: Solver (including time spent in interface) took 5.022e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:58 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:58 PM: Finished problem compilation (took 5.038e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 2309
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9898e-01  +2.5124e+02  2.51e+02  9.33e-01  2.00e+01  1.00e+00  1.02e+00   ------   
  1  +6.0300e-01  +4.9328e+01  4.87e+01  3.28e-01  1.09e+01  4.07e-03  4.90e-01  6.62e-01  
  2  +5.4344e-01  +7.2249e+00  6.68e+00  1.07e-01  4.32e+00  9.17e-03  2.10e-01  7.98e-01  
  3  +5.0113e-01  +1.4643e+00  9.63e-01  2.91e-02  1.13e+00  2.08e-03  1.78e-01  5.33e-01  
  4  +4.9750e-01  +8.8386e-01  3.86e-01  1.02e-02  4.10e-01  1.68e-03  4.41e-02  8.56e-01  
  5  +4.7267e-01  +8.1051e-01  3.38e-01  2.33e-03  9.63e-02  6.86e-03  7.65e-03  8.70e-01  
  6  +4.6637e-01  +7.5002e-01  2.84e-01  1.75e-03  7.21e-02  5.13e-03  5.79e-03  3.68e-01  
  7  +4.5620e-01  +6.1727e-01  1.61e-01  9.49e-04  3.89e-02  5.43e-05  3.17e-03  9.76e-01  
  8  +4.4757e-01  +5.6876e-01  1.21e-01  4.60e-04  1.89e-02  1.02e-04  1.44e-03  8.54e-01  
  9  +4.3693e-01  +5.2157e-01  8.46e-02  4.09e-04  1.67e-02  4.87e-05  1.40e-03  2.16e-01  
 10  +4.3551e-01  +5.1772e-01  8.22e-02  3.70e-04  1.51e-02  5.19e-05  1.25e-03  1.68e-01  
 11  +4.3529e-01  +5.1492e-01  7.96e-02  3.67e-04  1.50e-02  5.24e-05  1.24e-03  1.35e-01  
 12  +4.2019e-01  +4.5893e-01  3.87e-02  1.35e-04  5.51e-03  3.39e-05  4.54e-04  6.53e-01  
 13  +4.0732e-01  +4.1002e-01  2.70e-03  8.94e-06  3.65e-04  2.58e-06  3.16e-05  9.80e-01  
 14  +4.0621e-01  +4.0624e-01  2.72e-05  9.01e-08  3.68e-06  2.57e-08  3.21e-07  9.90e-01  
 15  +4.0620e-01  +4.0620e-01  2.72e-07  9.00e-10  3.68e-08  2.57e-10  3.21e-09  9.90e-01  
 16  +4.0620e-01  +4.0620e-01  2.72e-09  9.00e-12  3.68e-10  2.57e-12  3.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2071ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:58 PM: Optimal value: 4.062e-01
(CVXPY) Oct 06 03:49:58 PM: Compilation took 5.038e-03 seconds
(CVXPY) Oct 06 03:49:58 PM: Solver (including time spent in interface) took 8.034e-03 seconds
Iteration: 2, Objective: 0.4062
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:58 PM: Your problem has 272 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:58 PM: Finished problem compilation (took 3.795e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 272
  constraints   = 522
  nnz(P)        = 0
  nnz(A)        = 2440
  cones (total) = 1
    : Nonnegative = 1,  numel = 522

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9872e-01  +2.5104e+02  2.51e+02  9.34e-01  2.02e+01  1.00e+00  1.03e+00   ------   
  1  +6.0121e-01  +4.9371e+01  4.88e+01  3.33e-01  1.10e+01  4.02e-03  5.02e-01  6.59e-01  
  2  +5.4243e-01  +7.1324e+00  6.59e+00  1.07e-01  4.28e+00  9.45e-03  2.12e-01  8.10e-01  
  3  +5.0087e-01  +1.4606e+00  9.60e-01  2.94e-02  1.14e+00  2.22e-03  1.75e-01  5.80e-01  
  4  +4.9759e-01  +1.1231e+00  6.25e-01  1.67e-02  6.67e-01  2.31e-03  7.15e-02  6.50e-01  
  5  +4.7368e-01  +9.8381e-01  5.10e-01  3.88e-03  1.60e-01  7.37e-03  1.27e-02  8.81e-01  
  6  +4.6456e-01  +8.8687e-01  4.22e-01  2.67e-03  1.10e-01  6.76e-03  8.59e-03  3.59e-01  
  7  +4.6249e-01  +8.6962e-01  4.07e-01  2.15e-03  8.89e-02  5.75e-03  6.68e-03  4.27e-01  
  8  +4.5271e-01  +7.8679e-01  3.34e-01  1.54e-03  6.33e-02  4.75e-03  4.83e-03  3.23e-01  
  9  +4.3856e-01  +6.1082e-01  1.72e-01  8.39e-04  3.43e-02  1.00e-04  2.81e-03  7.85e-01  
 10  +4.2417e-01  +5.3598e-01  1.12e-01  4.82e-04  1.97e-02  7.39e-05  1.65e-03  4.92e-01  
 11  +4.0773e-01  +4.5636e-01  4.86e-02  1.90e-04  7.75e-03  4.14e-05  6.87e-04  7.68e-01  
 12  +3.9895e-01  +4.1669e-01  1.77e-02  6.82e-05  2.77e-03  2.09e-05  2.56e-04  9.90e-01  
 13  +3.9241e-01  +3.9274e-01  3.24e-04  1.23e-06  5.00e-05  2.35e-07  4.78e-06  9.89e-01  
 14  +3.9230e-01  +3.9230e-01  3.25e-06  1.23e-08  5.01e-07  2.35e-09  4.78e-08  9.90e-01  
 15  +3.9230e-01  +3.9230e-01  3.25e-08  1.23e-10  5.01e-09  2.35e-11  4.79e-10  9.90e-01  
 16  +3.9230e-01  +3.9230e-01  3.25e-10  1.23e-12  5.01e-11  2.36e-13  4.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9075ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:58 PM: Optimal value: 3.923e-01
(CVXPY) Oct 06 03:49:58 PM: Compilation took 3.795e-03 seconds
(CVXPY) Oct 06 03:49:58 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3923
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:58 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:58 PM: Finished problem compilation (took 4.087e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 2593
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9852e-01  +2.5103e+02  2.51e+02  9.35e-01  2.03e+01  1.00e+00  1.03e+00   ------   
  1  +6.0034e-01  +4.9534e+01  4.89e+01  3.35e-01  1.11e+01  4.03e-03  5.03e-01  6.58e-01  
  2  +5.4174e-01  +7.0676e+00  6.53e+00  1.05e-01  4.22e+00  9.62e-03  2.08e-01  8.19e-01  
  3  +5.0016e-01  +1.3960e+00  8.96e-01  2.75e-02  1.08e+00  2.26e-03  1.65e-01  6.62e-01  
  4  +4.9371e-01  +1.2037e+00  7.10e-01  1.52e-02  6.17e-01  3.64e-03  5.56e-02  7.46e-01  
  5  +4.5797e-01  +9.1808e-01  4.60e-01  2.76e-03  1.15e-01  1.01e-02  8.94e-03  8.69e-01  
  6  +4.5008e-01  +8.2748e-01  3.77e-01  1.97e-03  8.17e-02  6.80e-03  6.27e-03  5.16e-01  
  7  +4.4315e-01  +7.5600e-01  3.13e-01  1.56e-03  6.48e-02  3.70e-03  5.11e-03  4.17e-01  
  8  +4.1990e-01  +5.6909e-01  1.49e-01  7.28e-04  2.99e-02  1.05e-03  2.64e-03  5.97e-01  
  9  +4.1344e-01  +5.2590e-01  1.12e-01  5.22e-04  2.14e-02  5.94e-04  1.92e-03  5.03e-01  
 10  +4.0247e-01  +4.6497e-01  6.25e-02  2.62e-04  1.07e-02  3.00e-04  9.97e-04  5.96e-01  
 11  +3.9931e-01  +4.5006e-01  5.07e-02  2.06e-04  8.44e-03  2.22e-04  7.91e-04  3.11e-01  
 12  +3.9223e-01  +4.1734e-01  2.51e-02  1.01e-04  4.13e-03  7.17e-05  4.03e-04  6.77e-01  
 13  +3.8499e-01  +3.8690e-01  1.91e-03  7.47e-06  3.05e-04  3.88e-06  3.12e-05  9.36e-01  
 14  +3.8441e-01  +3.8443e-01  1.95e-05  7.62e-08  3.11e-06  3.94e-08  3.20e-07  9.90e-01  
 15  +3.8440e-01  +3.8440e-01  1.95e-07  7.62e-10  3.11e-08  3.94e-10  3.20e-09  9.90e-01  
 16  +3.8440e-01  +3.8440e-01  1.95e-09  7.62e-12  3.11e-10  3.94e-12  3.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.9747ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:58 PM: Optimal value: 3.844e-01
(CVXPY) Oct 06 03:49:58 PM: Compilation took 4.087e-03 seconds
(CVXPY) Oct 06 03:49:58 PM: Solver (including time spent in interface) took 5.388e-03 seconds
Iteration: 4, Objective: 0.3844
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:58 PM: Your problem has 278 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:58 PM: Finished problem compilation (took 5.023e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 278
  constraints   = 528
  nnz(P)        = 0
  nnz(A)        = 2607
  cones (total) = 1
    : Nonnegative = 1,  numel = 528

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9852e-01  +2.5103e+02  2.51e+02  9.35e-01  2.03e+01  1.00e+00  1.03e+00   ------   
  1  +6.0022e-01  +4.9594e+01  4.90e+01  3.36e-01  1.11e+01  4.03e-03  5.03e-01  6.57e-01  
  2  +5.4173e-01  +7.0723e+00  6.53e+00  1.06e-01  4.22e+00  9.67e-03  2.09e-01  8.20e-01  
  3  +5.0051e-01  +1.4431e+00  9.43e-01  2.89e-02  1.14e+00  2.31e-03  1.67e-01  6.32e-01  
  4  +4.9392e-01  +1.1672e+00  6.73e-01  1.41e-02  5.76e-01  3.54e-03  5.09e-02  7.83e-01  
  5  +4.6831e-01  +9.8086e-01  5.13e-01  3.79e-03  1.58e-01  8.17e-03  1.22e-02  7.90e-01  
  6  +4.5546e-01  +8.0677e-01  3.51e-01  2.20e-03  9.13e-02  3.71e-03  7.19e-03  6.19e-01  
  7  +4.4974e-01  +7.7345e-01  3.24e-01  1.80e-03  7.47e-02  3.45e-03  5.89e-03  2.32e-01  
  8  +4.4458e-01  +7.1027e-01  2.66e-01  1.55e-03  6.41e-02  1.28e-03  5.27e-03  4.67e-01  
  9  +4.1926e-01  +5.5304e-01  1.34e-01  6.50e-04  2.67e-02  6.20e-04  2.37e-03  5.79e-01  
 10  +4.0179e-01  +4.5485e-01  5.31e-02  2.34e-04  9.57e-03  1.81e-04  8.99e-04  7.69e-01  
 11  +4.0008e-01  +4.4838e-01  4.83e-02  2.05e-04  8.39e-03  1.42e-04  7.91e-04  2.70e-01  
 12  +3.9455e-01  +4.2643e-01  3.19e-02  1.31e-04  5.37e-03  6.19e-05  5.20e-04  6.22e-01  
 13  +3.8751e-01  +3.9689e-01  9.38e-03  3.69e-05  1.51e-03  1.74e-05  1.51e-04  7.81e-01  
 14  +3.8472e-01  +3.8566e-01  9.43e-04  3.70e-06  1.51e-04  1.66e-06  1.54e-05  9.07e-01  
 15  +3.8440e-01  +3.8441e-01  9.48e-06  3.71e-08  1.52e-06  1.66e-08  1.56e-07  9.90e-01  
 16  +3.8440e-01  +3.8440e-01  9.48e-08  3.71e-10  1.52e-08  1.66e-10  1.56e-09  9.90e-01  
 17  +3.8440e-01  +3.8440e-01  9.48e-10  3.71e-12  1.52e-10  1.66e-12  1.56e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.7631ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:58 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:58 PM: Optimal value: 3.844e-01
(CVXPY) Oct 06 03:49:58 PM: Compilation took 5.023e-03 seconds
(CVXPY) Oct 06 03:49:58 PM: Solver (including time spent in interface) took 5.135e-03 seconds
FULL MODEL:
  Accruacy: 0.616
  Our objective: 0.23199999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1)            <-- (term's our objective: 0.028)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.335517168045044
Best over terms:
  Our final objective: 0.18
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.18
  Highest accruacy: 0.59
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

