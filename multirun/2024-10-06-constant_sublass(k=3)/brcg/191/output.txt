Command:
python test_script.py -s constant_subclass -d 5 -n 10000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1514
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.1598
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:00 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:00 PM: Finished problem compilation (took 7.461e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  9.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +1.0020e+03  1.00e+03  3.64e-01  5.42e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4628e-01  +1.4308e+02  1.43e+02  1.45e-01  2.69e+01  9.84e-03  2.35e-01  7.78e-01  
  3  +5.1089e-01  +3.4058e+01  3.35e+01  1.16e-01  2.11e+01  2.35e-05  2.32e-01  8.80e-02  
  4  +5.0017e-01  +1.2147e+00  7.15e-01  4.82e-03  8.91e-01  4.35e-06  1.37e-01  9.90e-01  
  5  +5.0001e-01  +6.2751e-01  1.27e-01  8.51e-04  1.59e-01  1.53e-06  3.18e-02  7.99e-01  
  6  +4.9968e-01  +7.2481e-01  2.25e-01  1.05e-03  1.96e-01  1.55e-05  4.79e-03  9.05e-01  
  7  +4.9138e-01  +6.5885e-01  1.67e-01  5.45e-05  1.02e-02  3.08e-04  1.65e-04  9.66e-01  
  8  +4.7700e-01  +5.4187e-01  6.49e-02  1.79e-05  3.35e-03  2.04e-05  5.90e-05  8.20e-01  
  9  +4.6687e-01  +4.9143e-01  2.46e-02  6.12e-06  1.14e-03  2.10e-07  2.16e-05  9.61e-01  
 10  +4.6070e-01  +4.6308e-01  2.38e-03  5.64e-07  1.06e-04  2.40e-08  2.11e-06  9.10e-01  
 11  +4.5984e-01  +4.5999e-01  1.44e-04  3.01e-08  5.63e-06  4.25e-09  1.28e-07  9.73e-01  
 12  +4.5980e-01  +4.5980e-01  1.45e-06  3.02e-10  5.65e-08  4.27e-11  1.29e-09  9.90e-01  
 13  +4.5980e-01  +4.5980e-01  1.45e-08  3.02e-12  5.65e-10  4.27e-13  1.29e-11  9.90e-01  
 14  +4.5980e-01  +4.5980e-01  1.45e-10  3.01e-14  5.65e-12  4.54e-15  1.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.6657ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:00 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:00 PM: Optimal value: 4.598e-01
(CVXPY) Oct 06 03:55:00 PM: Compilation took 7.461e-02 seconds
(CVXPY) Oct 06 03:55:00 PM: Solver (including time spent in interface) took 8.920e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4598
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:00 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:00 PM: Finished problem compilation (took 3.360e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 49388
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0012e+03  5.00e+03  9.85e-01  9.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.9948e-01  +1.0023e+03  1.00e+03  3.65e-01  5.74e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4605e-01  +1.4261e+02  1.42e+02  1.45e-01  2.84e+01  9.88e-03  2.35e-01  7.80e-01  
  3  +5.1074e-01  +3.3750e+01  3.32e+01  1.15e-01  2.22e+01  2.35e-05  2.32e-01  9.12e-02  
  4  +5.0031e-01  +1.6993e+00  1.20e+00  8.08e-03  1.57e+00  5.05e-06  1.60e-01  7.28e-01  
  5  +5.0006e-01  +8.7187e-01  3.72e-01  2.49e-03  4.89e-01  2.43e-06  7.06e-02  6.67e-01  
  6  +5.0001e-01  +8.3019e-01  3.30e-01  2.17e-03  4.28e-01  3.68e-06  2.87e-02  7.04e-01  
  7  +4.9835e-01  +7.5665e-01  2.58e-01  4.19e-04  8.35e-02  4.97e-05  1.28e-03  9.74e-01  
  8  +4.9006e-01  +6.8306e-01  1.93e-01  7.05e-05  1.41e-02  2.09e-04  2.03e-04  8.43e-01  
  9  +4.9055e-01  +6.9412e-01  2.04e-01  5.71e-05  1.14e-02  1.98e-04  1.59e-04  4.74e-01  
 10  +4.8775e-01  +6.7317e-01  1.85e-01  4.78e-05  9.54e-03  1.35e-04  1.32e-04  3.87e-01  
 11  +4.8423e-01  +6.5290e-01  1.69e-01  3.98e-05  7.93e-03  8.99e-05  1.10e-04  3.98e-01  
 12  +4.8081e-01  +6.3876e-01  1.58e-01  3.26e-05  6.48e-03  8.39e-05  9.07e-05  2.52e-01  
 13  +4.7533e-01  +6.1771e-01  1.42e-01  3.15e-05  6.27e-03  6.19e-05  9.04e-05  6.92e-02  
 14  +4.5914e-01  +5.5046e-01  9.13e-02  1.62e-05  3.21e-03  3.28e-05  4.72e-05  6.31e-01  
 15  +4.5290e-01  +5.2639e-01  7.35e-02  1.27e-05  2.51e-03  2.04e-05  3.76e-05  3.79e-01  
 16  +4.2805e-01  +4.3644e-01  8.39e-03  1.33e-06  2.64e-04  2.08e-07  4.22e-06  9.34e-01  
 17  +4.2446e-01  +4.2460e-01  1.37e-04  2.16e-08  4.27e-06  3.21e-09  6.91e-08  9.84e-01  
 18  +4.2440e-01  +4.2440e-01  1.37e-06  2.16e-10  4.27e-08  3.21e-11  6.91e-10  9.90e-01  
 19  +4.2440e-01  +4.2440e-01  1.37e-08  2.16e-12  4.27e-10  3.23e-13  6.95e-12  9.90e-01  
 20  +4.2440e-01  +4.2440e-01  1.37e-10  2.16e-14  4.27e-12  3.25e-15  6.99e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138.1259ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:01 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:01 PM: Optimal value: 4.244e-01
(CVXPY) Oct 06 03:55:01 PM: Compilation took 3.360e-02 seconds
(CVXPY) Oct 06 03:55:01 PM: Solver (including time spent in interface) took 1.400e-01 seconds
Iteration: 2, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:01 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:01 PM: Finished problem compilation (took 3.863e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 50795
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0012e+03  5.00e+03  9.85e-01  9.85e+01  1.00e+00  1.00e+00   ------   
  1  +5.9952e-01  +1.0024e+03  1.00e+03  3.65e-01  5.75e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4602e-01  +1.4258e+02  1.42e+02  1.45e-01  2.84e+01  9.89e-03  2.36e-01  7.80e-01  
  3  +5.1073e-01  +3.3707e+01  3.32e+01  1.15e-01  2.23e+01  2.35e-05  2.32e-01  9.16e-02  
  4  +5.0028e-01  +1.6361e+00  1.14e+00  7.67e-03  1.50e+00  5.02e-06  1.57e-01  7.58e-01  
  5  +5.0008e-01  +9.2117e-01  4.21e-01  2.82e-03  5.55e-01  2.64e-06  7.69e-02  6.04e-01  
  6  +5.0004e-01  +8.7164e-01  3.72e-01  2.48e-03  4.88e-01  3.11e-06  4.35e-02  5.17e-01  
  7  +4.9970e-01  +7.7300e-01  2.73e-01  1.33e-03  2.64e-01  1.18e-05  5.89e-03  8.94e-01  
  8  +4.9253e-01  +7.1898e-01  2.26e-01  9.26e-05  1.85e-02  2.06e-04  2.63e-04  9.56e-01  
  9  +4.9147e-01  +7.0455e-01  2.13e-01  7.05e-05  1.41e-02  1.40e-04  1.96e-04  5.80e-01  
 10  +4.9106e-01  +6.9053e-01  1.99e-01  6.07e-05  1.21e-02  5.52e-05  1.68e-04  6.56e-01  
 11  +4.8626e-01  +6.6777e-01  1.82e-01  4.26e-05  8.52e-03  2.70e-05  1.18e-04  8.06e-01  
 12  +4.7608e-01  +6.2603e-01  1.50e-01  3.09e-05  6.15e-03  2.04e-05  8.79e-05  3.87e-01  
 13  +4.4485e-01  +4.9996e-01  5.51e-02  1.00e-05  1.99e-03  1.17e-06  3.11e-05  9.00e-01  
 14  +4.3193e-01  +4.5565e-01  2.37e-02  4.01e-06  7.94e-04  8.58e-07  1.28e-05  7.12e-01  
 15  +4.3148e-01  +4.5359e-01  2.21e-02  3.87e-06  7.67e-04  7.56e-07  1.28e-05  1.83e-02  
 16  +4.3119e-01  +4.5305e-01  2.19e-02  3.76e-06  7.45e-04  9.51e-07  1.22e-05  2.65e-01  
 17  +4.2818e-01  +4.4362e-01  1.54e-02  2.56e-06  5.08e-04  7.40e-07  8.32e-06  3.90e-01  
 18  +4.2405e-01  +4.2991e-01  5.86e-03  9.65e-07  1.91e-04  2.99e-07  3.19e-06  6.65e-01  
 19  +4.2177e-01  +4.2237e-01  5.96e-04  9.79e-08  1.94e-05  4.28e-08  3.27e-07  9.89e-01  
 20  +4.2150e-01  +4.2151e-01  6.04e-06  9.91e-10  1.96e-07  4.33e-10  3.31e-09  9.90e-01  
 21  +4.2150e-01  +4.2150e-01  6.04e-08  9.91e-12  1.96e-09  4.33e-12  3.31e-11  9.90e-01  
 22  +4.2150e-01  +4.2150e-01  6.05e-10  9.93e-14  1.97e-11  4.33e-14  3.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.3394ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:01 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:01 PM: Optimal value: 4.215e-01
(CVXPY) Oct 06 03:55:01 PM: Compilation took 3.863e-02 seconds
(CVXPY) Oct 06 03:55:01 PM: Solver (including time spent in interface) took 1.734e-01 seconds
FULL MODEL:
  Accruacy: 0.5787
  Our objective: 0.15739999999999993

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.1514)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.006)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.4901416301727295
Best over terms:
  Our final objective: 0.1514
    Its accruacy: 0.5757
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1514
  Highest accruacy: 0.5757
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

