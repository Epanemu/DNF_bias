Command:
python test_script.py -s constant_subclass -d 8 -n 100 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.13999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 8.

Computed total variation: 0.8800000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:19 PM: Your problem has 67 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:19 PM: Finished problem compilation (took 4.647e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9766e-01  +5.0962e+01  5.05e+01  8.71e-01  9.94e+00  1.00e+00  1.04e+00   ------   
  1  +5.7993e-01  +1.1108e+01  1.05e+01  3.70e-01  5.93e+00  3.80e-03  5.80e-01  5.99e-01  
  2  +5.1883e-01  +1.6848e+00  1.17e+00  9.02e-02  1.78e+00  1.68e-02  2.33e-01  9.90e-01  
  3  +5.0053e-01  +7.5181e-01  2.51e-01  1.92e-02  3.93e-01  5.20e-03  6.29e-02  7.80e-01  
  4  +4.8254e-01  +7.1681e-01  2.34e-01  7.80e-03  1.65e-01  8.18e-03  2.63e-02  6.75e-01  
  5  +4.6796e-01  +5.7891e-01  1.11e-01  3.58e-03  7.51e-02  2.27e-03  1.32e-02  6.19e-01  
  6  +4.5289e-01  +5.0124e-01  4.84e-02  1.23e-03  2.58e-02  8.10e-04  5.19e-03  7.01e-01  
  7  +4.4167e-01  +4.4628e-01  4.61e-03  1.05e-04  2.21e-03  9.05e-06  5.24e-04  9.76e-01  
  8  +4.4012e-01  +4.4017e-01  5.32e-05  1.18e-06  2.47e-05  9.98e-08  6.12e-06  9.89e-01  
  9  +4.4010e-01  +4.4010e-01  5.32e-07  1.18e-08  2.47e-07  9.97e-10  6.12e-08  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  5.32e-09  1.18e-10  2.47e-09  9.98e-12  6.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 907.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:19 PM: Optimal value: 4.401e-01
(CVXPY) Oct 06 04:07:19 PM: Compilation took 4.647e-02 seconds
(CVXPY) Oct 06 04:07:19 PM: Solver (including time spent in interface) took 1.586e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:19 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:19 PM: Finished problem compilation (took 5.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 687
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9258e-01  +5.1917e+01  5.14e+01  8.77e-01  1.01e+01  1.00e+00  1.06e+00   ------   
  1  +5.5761e-01  +1.1270e+01  1.07e+01  3.80e-01  5.95e+00  3.79e-03  5.94e-01  5.99e-01  
  2  +4.9671e-01  +2.1433e+00  1.65e+00  1.09e-01  2.18e+00  1.84e-02  2.66e-01  8.92e-01  
  3  +4.5620e-01  +9.0603e-01  4.50e-01  2.19e-02  4.73e-01  8.72e-03  6.43e-02  8.12e-01  
  4  +4.3121e-01  +7.5630e-01  3.25e-01  1.15e-02  2.48e-01  6.54e-03  3.65e-02  5.32e-01  
  5  +4.0313e-01  +6.3089e-01  2.28e-01  5.45e-03  1.20e-01  5.00e-03  1.81e-02  6.34e-01  
  6  +3.7173e-01  +4.9724e-01  1.26e-01  2.42e-03  5.39e-02  2.77e-03  8.62e-03  5.70e-01  
  7  +3.5508e-01  +4.2593e-01  7.09e-02  1.34e-03  3.03e-02  1.21e-03  4.92e-03  5.72e-01  
  8  +3.3199e-01  +3.3592e-01  3.92e-03  7.24e-05  1.63e-03  1.19e-05  2.82e-04  9.73e-01  
  9  +3.3033e-01  +3.3040e-01  6.60e-05  1.22e-06  2.74e-05  1.18e-07  4.84e-06  9.83e-01  
 10  +3.3030e-01  +3.3030e-01  1.20e-06  2.26e-08  5.01e-07  2.21e-09  9.12e-08  9.81e-01  
 11  +3.3030e-01  +3.3030e-01  1.20e-08  2.26e-10  5.01e-09  2.21e-11  9.12e-10  9.90e-01  
 12  +3.3030e-01  +3.3030e-01  1.20e-10  2.26e-12  5.02e-11  2.21e-13  9.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1793ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:19 PM: Optimal value: 3.303e-01
(CVXPY) Oct 06 04:07:19 PM: Compilation took 5.991e-03 seconds
(CVXPY) Oct 06 04:07:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:19 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:19 PM: Finished problem compilation (took 8.506e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 776
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8983e-01  +5.2062e+01  5.16e+01  8.82e-01  1.01e+01  1.00e+00  1.07e+00   ------   
  1  +5.3369e-01  +1.1265e+01  1.07e+01  3.84e-01  5.75e+00  3.82e-03  5.92e-01  6.01e-01  
  2  +4.6318e-01  +2.2051e+00  1.74e+00  9.54e-02  1.91e+00  2.08e-02  2.34e-01  9.28e-01  
  3  +3.9340e-01  +1.0827e+00  6.89e-01  2.50e-02  5.23e-01  1.22e-02  7.06e-02  7.57e-01  
  4  +3.2975e-01  +6.7788e-01  3.48e-01  8.40e-03  1.76e-01  7.00e-03  2.63e-02  7.16e-01  
  5  +2.7809e-01  +3.9337e-01  1.15e-01  2.71e-03  5.62e-02  2.33e-04  9.49e-03  9.37e-01  
  6  +2.5282e-01  +2.9073e-01  3.79e-02  8.43e-04  1.75e-02  1.27e-04  3.09e-03  8.18e-01  
  7  +2.4100e-01  +2.4248e-01  1.48e-03  3.24e-05  6.73e-04  4.00e-06  1.24e-04  9.66e-01  
  8  +2.4058e-01  +2.4091e-01  3.35e-04  7.39e-06  1.52e-04  9.88e-07  2.93e-05  8.03e-01  
  9  +2.4045e-01  +2.4047e-01  1.20e-05  2.69e-07  5.48e-06  2.78e-08  1.11e-06  9.65e-01  
 10  +2.4045e-01  +2.4045e-01  1.21e-07  2.71e-09  5.51e-08  2.79e-10  1.12e-08  9.90e-01  
 11  +2.4045e-01  +2.4045e-01  1.21e-09  2.71e-11  5.51e-10  2.79e-12  1.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3553ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:19 PM: Optimal value: 2.405e-01
(CVXPY) Oct 06 04:07:19 PM: Compilation took 8.506e-03 seconds
(CVXPY) Oct 06 04:07:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:20 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Finished problem compilation (took 9.620e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 842
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8807e-01  +5.1925e+01  5.14e+01  8.86e-01  9.87e+00  1.00e+00  1.06e+00   ------   
  1  +5.1422e-01  +1.1206e+01  1.07e+01  3.85e-01  5.48e+00  3.88e-03  5.81e-01  6.05e-01  
  2  +4.2388e-01  +2.3864e+00  1.96e+00  8.90e-02  1.73e+00  2.23e-02  2.15e-01  9.20e-01  
  3  +3.0706e-01  +1.0211e+00  7.14e-01  1.98e-02  4.07e-01  1.26e-02  5.63e-02  8.09e-01  
  4  +2.4892e-01  +5.9084e-01  3.42e-01  8.77e-03  1.81e-01  5.13e-03  2.71e-02  6.05e-01  
  5  +2.0317e-01  +3.2836e-01  1.25e-01  3.07e-03  6.46e-02  1.42e-03  1.05e-02  7.33e-01  
  6  +1.8362e-01  +2.3331e-01  4.97e-02  1.18e-03  2.52e-02  5.10e-04  4.20e-03  6.65e-01  
  7  +1.7111e-01  +1.7255e-01  1.44e-03  3.41e-05  7.29e-04  6.25e-06  1.27e-04  9.87e-01  
  8  +1.7065e-01  +1.7076e-01  1.14e-04  2.77e-06  5.77e-05  2.80e-07  1.15e-05  9.67e-01  
  9  +1.7060e-01  +1.7060e-01  2.18e-06  5.37e-08  1.11e-06  5.99e-09  2.35e-07  9.84e-01  
 10  +1.7060e-01  +1.7060e-01  2.18e-08  5.36e-10  1.11e-08  5.98e-11  2.35e-09  9.90e-01  
 11  +1.7060e-01  +1.7060e-01  2.18e-10  5.37e-12  1.11e-10  5.98e-13  2.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.593ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:20 PM: Optimal value: 1.706e-01
(CVXPY) Oct 06 04:07:20 PM: Compilation took 9.620e-03 seconds
(CVXPY) Oct 06 04:07:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1706
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:20 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Finished problem compilation (took 9.911e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 882
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8506e-01  +5.2367e+01  5.19e+01  8.89e-01  9.64e+00  1.00e+00  1.08e+00   ------   
  1  +4.7796e-01  +1.1291e+01  1.08e+01  3.82e-01  5.25e+00  3.95e-03  5.79e-01  6.07e-01  
  2  +3.4726e-01  +2.7407e+00  2.39e+00  8.72e-02  1.64e+00  2.33e-02  2.15e-01  8.78e-01  
  3  +2.4931e-01  +8.9077e-01  6.41e-01  1.92e-02  3.73e-01  7.92e-03  5.46e-02  8.16e-01  
  4  +2.1617e-01  +6.3819e-01  4.22e-01  1.21e-02  2.36e-01  5.12e-03  3.58e-02  3.97e-01  
  5  +1.7725e-01  +3.6815e-01  1.91e-01  5.26e-03  1.05e-01  1.56e-03  1.67e-02  8.07e-01  
  6  +1.5463e-01  +2.4981e-01  9.52e-02  2.40e-03  4.95e-02  7.53e-04  7.92e-03  6.43e-01  
  7  +1.3350e-01  +1.4342e-01  9.92e-03  2.42e-04  5.03e-03  6.55e-05  8.41e-04  9.08e-01  
  8  +1.3113e-01  +1.3188e-01  7.49e-04  1.86e-05  3.82e-04  3.85e-06  6.63e-05  9.22e-01  
  9  +1.3093e-01  +1.3103e-01  9.38e-05  2.43e-06  4.85e-05  4.00e-07  9.37e-06  9.25e-01  
 10  +1.3090e-01  +1.3090e-01  1.11e-06  2.90e-08  5.77e-07  4.35e-09  1.14e-07  9.88e-01  
 11  +1.3090e-01  +1.3090e-01  1.11e-08  2.90e-10  5.77e-09  4.35e-11  1.14e-09  9.90e-01  
 12  +1.3090e-01  +1.3090e-01  1.12e-10  2.90e-12  5.77e-11  4.35e-13  1.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5075ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:20 PM: Optimal value: 1.309e-01
(CVXPY) Oct 06 04:07:20 PM: Compilation took 9.911e-03 seconds
(CVXPY) Oct 06 04:07:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1309
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:20 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Finished problem compilation (took 9.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 927
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8365e-01  +5.2650e+01  5.22e+01  8.93e-01  9.44e+00  1.00e+00  1.08e+00   ------   
  1  +4.4969e-01  +1.1438e+01  1.10e+01  3.81e-01  5.06e+00  4.02e-03  5.77e-01  6.05e-01  
  2  +3.0366e-01  +2.7582e+00  2.45e+00  8.62e-02  1.57e+00  2.32e-02  2.15e-01  8.68e-01  
  3  +2.2132e-01  +1.0789e+00  8.58e-01  2.61e-02  4.91e-01  1.02e-02  7.34e-02  7.17e-01  
  4  +1.7154e-01  +4.9814e-01  3.27e-01  9.75e-03  1.83e-01  3.65e-03  2.94e-02  6.59e-01  
  5  +1.3153e-01  +2.5094e-01  1.19e-01  3.27e-03  6.37e-02  1.24e-03  1.05e-02  7.34e-01  
  6  +1.2683e-01  +2.2979e-01  1.03e-01  2.60e-03  5.39e-02  1.01e-03  8.29e-03  3.83e-01  
  7  +1.0811e-01  +1.2935e-01  2.12e-02  5.24e-04  1.09e-02  8.92e-05  1.74e-03  9.90e-01  
  8  +1.0146e-01  +1.0256e-01  1.10e-03  2.69e-05  5.60e-04  3.38e-06  9.23e-05  9.48e-01  
  9  +1.0112e-01  +1.0130e-01  1.76e-04  4.47e-06  9.05e-05  5.98e-07  1.73e-05  8.89e-01  
 10  +1.0105e-01  +1.0106e-01  8.51e-06  2.17e-07  4.36e-06  2.77e-08  8.80e-07  9.57e-01  
 11  +1.0105e-01  +1.0105e-01  8.86e-08  2.26e-09  4.54e-08  2.88e-10  9.19e-09  9.90e-01  
 12  +1.0105e-01  +1.0105e-01  8.87e-10  2.26e-11  4.54e-10  2.88e-12  9.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9709ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:20 PM: Optimal value: 1.011e-01
(CVXPY) Oct 06 04:07:20 PM: Compilation took 9.514e-03 seconds
(CVXPY) Oct 06 04:07:20 PM: Solver (including time spent in interface) took 5.770e-04 seconds
Iteration: 6, Objective: 0.1011
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:20 PM: Your problem has 127 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Finished problem compilation (took 4.506e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 127
  constraints   = 177
  nnz(P)        = 0
  nnz(A)        = 970
  cones (total) = 1
    : Nonnegative = 1,  numel = 177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8029e-01  +5.2426e+01  5.19e+01  8.96e-01  9.24e+00  1.00e+00  1.08e+00   ------   
  1  +4.0931e-01  +1.1616e+01  1.12e+01  3.81e-01  4.90e+00  4.14e-03  5.73e-01  5.96e-01  
  2  +2.3943e-01  +2.5302e+00  2.29e+00  7.94e-02  1.40e+00  2.41e-02  1.97e-01  9.01e-01  
  3  +1.8030e-01  +8.5104e-01  6.71e-01  2.29e-02  4.14e-01  8.35e-03  6.24e-02  7.21e-01  
  4  +1.5271e-01  +5.9173e-01  4.39e-01  1.45e-02  2.66e-01  5.24e-03  4.09e-02  4.37e-01  
  5  +1.1457e-01  +2.7510e-01  1.61e-01  4.95e-03  9.42e-02  1.36e-03  1.53e-02  8.20e-01  
  6  +9.4625e-02  +1.5752e-01  6.29e-02  1.78e-03  3.51e-02  5.31e-04  5.85e-03  6.62e-01  
  7  +8.4628e-02  +9.5885e-02  1.13e-02  3.17e-04  6.23e-03  5.04e-05  1.08e-03  9.90e-01  
  8  +8.1452e-02  +8.2335e-02  8.83e-04  2.51e-05  4.88e-04  2.86e-06  8.91e-05  9.19e-01  
  9  +8.1191e-02  +8.1306e-02  1.15e-04  3.36e-06  6.32e-05  3.76e-07  1.35e-05  9.24e-01  
 10  +8.1151e-02  +8.1152e-02  1.83e-06  5.37e-08  1.01e-06  5.31e-09  2.22e-07  9.85e-01  
 11  +8.1150e-02  +8.1150e-02  1.84e-08  5.39e-10  1.01e-08  5.32e-11  2.23e-09  9.90e-01  
 12  +8.1150e-02  +8.1150e-02  1.84e-10  5.39e-12  1.01e-10  5.32e-13  2.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7434ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:20 PM: Optimal value: 8.115e-02
(CVXPY) Oct 06 04:07:20 PM: Compilation took 4.506e-03 seconds
(CVXPY) Oct 06 04:07:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:20 PM: Your problem has 128 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Finished problem compilation (took 7.380e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 128
  constraints   = 178
  nnz(P)        = 0
  nnz(A)        = 977
  cones (total) = 1
    : Nonnegative = 1,  numel = 178

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8024e-01  +5.2416e+01  5.19e+01  8.96e-01  9.23e+00  1.00e+00  1.08e+00   ------   
  1  +4.0645e-01  +1.1639e+01  1.12e+01  3.81e-01  4.88e+00  4.16e-03  5.72e-01  5.95e-01  
  2  +2.3399e-01  +2.5474e+00  2.31e+00  7.96e-02  1.39e+00  2.42e-02  1.97e-01  8.99e-01  
  3  +1.7670e-01  +8.6817e-01  6.91e-01  2.36e-02  4.25e-01  8.46e-03  6.43e-02  7.07e-01  
  4  +1.4973e-01  +6.1283e-01  4.63e-01  1.54e-02  2.79e-01  5.41e-03  4.33e-02  4.20e-01  
  5  +1.1223e-01  +2.7785e-01  1.66e-01  5.25e-03  9.70e-02  1.36e-03  1.61e-02  8.21e-01  
  6  +9.0009e-02  +1.3624e-01  4.62e-02  1.40e-03  2.62e-02  3.51e-04  4.56e-03  7.50e-01  
  7  +8.1556e-02  +8.3265e-02  1.71e-03  5.20e-05  9.61e-04  9.45e-06  1.75e-04  9.62e-01  
  8  +8.1217e-02  +8.1464e-02  2.47e-04  7.82e-06  1.40e-04  9.97e-07  2.93e-05  8.62e-01  
  9  +8.1156e-02  +8.1178e-02  2.21e-05  7.01e-07  1.24e-05  8.24e-08  2.80e-06  9.26e-01  
 10  +8.1150e-02  +8.1150e-02  2.49e-07  7.90e-09  1.40e-07  9.23e-10  3.17e-08  9.89e-01  
 11  +8.1150e-02  +8.1150e-02  2.50e-09  7.91e-11  1.40e-09  9.24e-12  3.18e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0835ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:20 PM: Optimal value: 8.115e-02
(CVXPY) Oct 06 04:07:20 PM: Compilation took 7.380e-03 seconds
(CVXPY) Oct 06 04:07:20 PM: Solver (including time spent in interface) took 4.529e-03 seconds
Iteration: 8, Objective: 0.0812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:20 PM: Your problem has 132 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Finished problem compilation (took 1.155e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 132
  constraints   = 182
  nnz(P)        = 0
  nnz(A)        = 990
  cones (total) = 1
    : Nonnegative = 1,  numel = 182

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7801e-01  +5.2427e+01  5.19e+01  8.97e-01  9.15e+00  1.00e+00  1.08e+00   ------   
  1  +3.7686e-01  +1.1830e+01  1.15e+01  3.81e-01  4.82e+00  4.25e-03  5.70e-01  5.88e-01  
  2  +2.0776e-01  +2.4405e+00  2.23e+00  7.78e-02  1.35e+00  2.43e-02  1.88e-01  9.10e-01  
  3  +1.6821e-01  +1.0076e+00  8.39e-01  3.05e-02  5.36e-01  1.02e-02  8.00e-02  6.01e-01  
  4  +1.3473e-01  +5.8289e-01  4.48e-01  1.57e-02  2.78e-01  5.14e-03  4.38e-02  5.45e-01  
  5  +1.0159e-01  +2.8381e-01  1.82e-01  5.96e-03  1.09e-01  1.47e-03  1.81e-02  8.23e-01  
  6  +7.7513e-02  +1.4443e-01  6.69e-02  1.97e-03  3.73e-02  5.31e-04  6.40e-03  6.99e-01  
  7  +7.0816e-02  +1.0932e-01  3.85e-02  1.08e-03  2.07e-02  2.97e-04  3.54e-03  5.29e-01  
  8  +6.2171e-02  +6.4393e-02  2.22e-03  6.19e-05  1.18e-03  8.04e-06  2.10e-04  9.90e-01  
  9  +6.1468e-02  +6.1664e-02  1.96e-04  5.75e-06  1.06e-04  4.88e-07  2.09e-05  9.18e-01  
 10  +6.1402e-02  +6.1406e-02  4.35e-06  1.30e-07  2.38e-06  1.08e-08  4.87e-07  9.81e-01  
 11  +6.1400e-02  +6.1400e-02  4.35e-08  1.30e-09  2.38e-08  1.08e-10  4.88e-09  9.90e-01  
 12  +6.1400e-02  +6.1400e-02  4.35e-10  1.30e-11  2.38e-10  1.08e-12  4.88e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8601ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:20 PM: Optimal value: 6.140e-02
(CVXPY) Oct 06 04:07:20 PM: Compilation took 1.155e-02 seconds
(CVXPY) Oct 06 04:07:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0614
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:20 PM: Your problem has 133 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:21 PM: Finished problem compilation (took 1.004e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 133
  constraints   = 183
  nnz(P)        = 0
  nnz(A)        = 993
  cones (total) = 1
    : Nonnegative = 1,  numel = 183

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7790e-01  +5.2416e+01  5.19e+01  8.97e-01  9.13e+00  1.00e+00  1.08e+00   ------   
  1  +3.7433e-01  +1.1840e+01  1.15e+01  3.80e-01  4.81e+00  4.26e-03  5.69e-01  5.88e-01  
  2  +2.0609e-01  +2.4566e+00  2.25e+00  7.83e-02  1.35e+00  2.42e-02  1.90e-01  9.07e-01  
  3  +1.6550e-01  +9.2854e-01  7.63e-01  2.78e-02  4.88e-01  9.35e-03  7.34e-02  6.37e-01  
  4  +1.3729e-01  +6.1992e-01  4.83e-01  1.70e-02  3.01e-01  5.60e-03  4.70e-02  4.54e-01  
  5  +1.0171e-01  +2.8431e-01  1.83e-01  6.02e-03  1.09e-01  1.45e-03  1.82e-02  8.42e-01  
  6  +7.9421e-02  +1.5975e-01  8.03e-02  2.38e-03  4.49e-02  6.25e-04  7.70e-03  6.42e-01  
  7  +6.7420e-02  +9.4190e-02  2.68e-02  7.61e-04  1.44e-02  2.03e-04  2.56e-03  6.82e-01  
  8  +6.1764e-02  +6.3233e-02  1.47e-03  4.21e-05  7.91e-04  7.93e-06  1.46e-04  9.50e-01  
  9  +6.1554e-02  +6.2243e-02  6.88e-04  2.03e-05  3.74e-04  3.38e-06  7.55e-05  6.42e-01  
 10  +6.1373e-02  +6.1450e-02  7.76e-05  2.33e-06  4.23e-05  3.34e-07  9.15e-06  8.84e-01  
 11  +6.1350e-02  +6.1352e-02  1.36e-06  4.12e-08  7.43e-07  5.71e-09  1.63e-07  9.83e-01  
 12  +6.1350e-02  +6.1350e-02  1.36e-08  4.12e-10  7.43e-09  5.71e-11  1.63e-09  9.90e-01  
 13  +6.1350e-02  +6.1350e-02  1.37e-10  4.13e-12  7.45e-11  5.72e-13  1.64e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8886ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:21 PM: Optimal value: 6.135e-02
(CVXPY) Oct 06 04:07:21 PM: Compilation took 1.004e-02 seconds
(CVXPY) Oct 06 04:07:21 PM: Solver (including time spent in interface) took 2.570e-03 seconds
Iteration: 10, Objective: 0.0614
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:21 PM: Your problem has 134 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:21 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 134
  constraints   = 184
  nnz(P)        = 0
  nnz(A)        = 1000
  cones (total) = 1
    : Nonnegative = 1,  numel = 184

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7716e-01  +5.2432e+01  5.20e+01  8.98e-01  9.12e+00  1.00e+00  1.08e+00   ------   
  1  +3.6755e-01  +1.1827e+01  1.15e+01  3.79e-01  4.79e+00  4.27e-03  5.68e-01  5.89e-01  
  2  +1.9623e-01  +2.4267e+00  2.23e+00  7.72e-02  1.33e+00  2.39e-02  1.86e-01  9.08e-01  
  3  +1.6331e-01  +9.7261e-01  8.09e-01  3.05e-02  5.30e-01  9.47e-03  7.92e-02  6.04e-01  
  4  +1.3231e-01  +5.7029e-01  4.38e-01  1.59e-02  2.80e-01  4.90e-03  4.40e-02  5.38e-01  
  5  +1.0082e-01  +2.8547e-01  1.85e-01  6.21e-03  1.13e-01  1.46e-03  1.87e-02  8.25e-01  
  6  +7.7531e-02  +1.5013e-01  7.26e-02  2.18e-03  4.12e-02  5.65e-04  7.05e-03  6.75e-01  
  7  +6.7290e-02  +9.3726e-02  2.64e-02  7.62e-04  1.45e-02  2.00e-04  2.55e-03  6.60e-01  
  8  +6.1828e-02  +6.3537e-02  1.71e-03  4.95e-05  9.33e-04  9.54e-06  1.71e-04  9.43e-01  
  9  +6.1573e-02  +6.2328e-02  7.56e-04  2.25e-05  4.14e-04  3.76e-06  8.34e-05  6.60e-01  
 10  +6.1380e-02  +6.1489e-02  1.09e-04  3.31e-06  5.97e-05  4.86e-07  1.30e-05  8.53e-01  
 11  +6.1355e-02  +6.1367e-02  1.27e-05  3.86e-07  6.95e-06  4.86e-08  1.52e-06  9.90e-01  
 12  +6.1350e-02  +6.1350e-02  1.33e-07  4.06e-09  7.31e-08  5.10e-10  1.61e-08  9.89e-01  
 13  +6.1350e-02  +6.1350e-02  1.33e-09  4.07e-11  7.32e-10  5.11e-12  1.61e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.037ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:21 PM: Optimal value: 6.135e-02
(CVXPY) Oct 06 04:07:21 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:07:21 PM: Solver (including time spent in interface) took 8.156e-03 seconds
FULL MODEL:
  Accruacy: 0.93
  Our objective: 0.8600000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.22)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1)                       <-- (term's our objective: 0.1)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 1)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 0)                       <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1)            <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x3 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.08)
 OR (x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.08)
 OR (x4 = 1 AND x5 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.4002697467803955
Best over terms:
  Our final objective: 0.22
    Its accruacy: 0.61
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.22
  Highest accruacy: 0.61
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

