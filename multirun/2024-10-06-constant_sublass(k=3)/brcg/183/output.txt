Command:
python test_script.py -s constant_subclass -d 5 -n 1000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.17600000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 5.

Computed total variation: 0.20800000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:13 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:13 PM: Finished problem compilation (took 4.838e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 4011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9984e-01  +5.0074e+02  5.00e+02  9.52e-01  2.87e+01  1.00e+00  1.00e+00   ------   
  1  +5.9920e-01  +1.0058e+02  1.00e+02  3.51e-01  1.66e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4472e-01  +1.4431e+01  1.39e+01  1.26e-01  7.35e+00  9.98e-03  2.30e-01  7.93e-01  
  3  +5.0508e-01  +2.6550e+00  2.15e+00  4.39e-02  2.43e+00  1.63e-05  2.18e-01  2.52e-01  
  4  +5.0038e-01  +7.1926e-01  2.19e-01  4.72e-03  2.73e-01  6.43e-06  5.99e-02  8.48e-01  
  5  +4.9763e-01  +9.0559e-01  4.08e-01  3.39e-03  2.00e-01  5.20e-05  1.14e-02  8.95e-01  
  6  +4.8628e-01  +7.7092e-01  2.85e-01  7.78e-04  4.60e-02  1.26e-04  2.48e-03  7.82e-01  
  7  +4.7056e-01  +5.9273e-01  1.22e-01  3.02e-04  1.78e-02  3.53e-05  1.07e-03  7.28e-01  
  8  +4.5269e-01  +4.8885e-01  3.62e-02  7.87e-05  4.63e-03  1.08e-05  3.21e-04  8.92e-01  
  9  +4.4647e-01  +4.6020e-01  1.37e-02  2.91e-05  1.71e-03  6.19e-06  1.25e-04  9.90e-01  
 10  +4.4219e-01  +4.4248e-01  2.90e-04  6.10e-07  3.58e-05  1.12e-07  2.73e-06  9.83e-01  
 11  +4.4210e-01  +4.4210e-01  2.90e-06  6.09e-09  3.58e-07  1.12e-09  2.73e-08  9.90e-01  
 12  +4.4210e-01  +4.4210e-01  2.90e-08  6.09e-11  3.58e-09  1.12e-11  2.73e-10  9.90e-01  
 13  +4.4210e-01  +4.4210e-01  2.90e-10  6.09e-13  3.58e-11  1.12e-13  2.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.9978ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:13 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:13 PM: Optimal value: 4.421e-01
(CVXPY) Oct 06 03:54:13 PM: Compilation took 4.838e-02 seconds
(CVXPY) Oct 06 03:54:13 PM: Solver (including time spent in interface) took 9.627e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:14 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:14 PM: Finished problem compilation (took 5.016e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 5070
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0117e+02  5.01e+02  9.53e-01  3.06e+01  1.00e+00  1.01e+00   ------   
  1  +5.9773e-01  +1.0092e+02  1.00e+02  3.55e-01  1.76e+01  3.98e-03  5.10e-01  6.43e-01  
  2  +5.4260e-01  +1.3998e+01  1.35e+01  1.24e-01  7.55e+00  1.03e-02  2.27e-01  8.14e-01  
  3  +5.0357e-01  +2.3500e+00  1.85e+00  3.82e-02  2.25e+00  1.55e-05  2.08e-01  3.66e-01  
  4  +5.0093e-01  +1.0767e+00  5.76e-01  1.23e-02  7.46e-01  7.15e-06  9.45e-02  5.77e-01  
  5  +4.9764e-01  +1.1081e+00  6.10e-01  6.25e-03  3.91e-01  3.52e-05  1.99e-02  9.55e-01  
  6  +4.8358e-01  +8.8754e-01  4.04e-01  1.39e-03  8.76e-02  8.29e-05  4.14e-03  7.94e-01  
  7  +4.7414e-01  +7.6786e-01  2.94e-01  8.67e-04  5.46e-02  7.66e-05  2.60e-03  5.42e-01  
  8  +4.6910e-01  +6.8691e-01  2.18e-01  5.99e-04  3.76e-02  8.33e-05  1.84e-03  8.85e-01  
  9  +4.6324e-01  +6.4754e-01  1.84e-01  4.55e-04  2.85e-02  7.53e-05  1.40e-03  2.75e-01  
 10  +4.6065e-01  +6.1439e-01  1.54e-01  3.62e-04  2.27e-02  7.35e-05  1.08e-03  9.90e-01  
 11  +4.5108e-01  +5.6204e-01  1.11e-01  1.93e-04  1.21e-02  7.00e-05  5.75e-04  9.48e-01  
 12  +4.4187e-01  +5.2654e-01  8.47e-02  1.77e-04  1.11e-02  3.89e-05  5.63e-04  2.07e-01  
 13  +4.2391e-01  +4.5275e-01  2.88e-02  4.64e-05  2.89e-03  1.94e-05  1.48e-04  7.65e-01  
 14  +4.1273e-01  +4.1400e-01  1.28e-03  2.05e-06  1.27e-04  7.14e-07  6.84e-06  9.90e-01  
 15  +4.1211e-01  +4.1212e-01  1.29e-05  2.07e-08  1.29e-06  7.12e-09  6.98e-08  9.90e-01  
 16  +4.1210e-01  +4.1210e-01  1.29e-07  2.07e-10  1.29e-08  7.12e-11  6.98e-10  9.90e-01  
 17  +4.1210e-01  +4.1210e-01  1.29e-09  2.07e-12  1.29e-10  7.12e-13  6.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8229ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:14 PM: Optimal value: 4.121e-01
(CVXPY) Oct 06 03:54:14 PM: Compilation took 5.016e-03 seconds
(CVXPY) Oct 06 03:54:14 PM: Solver (including time spent in interface) took 1.550e-02 seconds
Iteration: 2, Objective: 0.4121
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:14 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:14 PM: Finished problem compilation (took 9.933e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 5623
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0113e+02  5.01e+02  9.54e-01  3.10e+01  1.00e+00  1.03e+00   ------   
  1  +5.9732e-01  +1.0132e+02  1.01e+02  3.60e-01  1.78e+01  3.96e-03  5.22e-01  6.40e-01  
  2  +5.4206e-01  +1.3951e+01  1.34e+01  1.25e-01  7.55e+00  1.07e-02  2.33e-01  8.20e-01  
  3  +5.0332e-01  +2.2958e+00  1.79e+00  3.78e-02  2.22e+00  1.58e-05  2.11e-01  4.02e-01  
  4  +5.0056e-01  +9.2436e-01  4.24e-01  9.20e-03  5.61e-01  6.19e-06  7.24e-02  6.87e-01  
  5  +4.8920e-01  +1.4582e+00  9.69e-01  3.73e-03  2.35e-01  8.68e-05  1.08e-02  9.34e-01  
  6  +4.7663e-01  +1.0755e+00  5.99e-01  1.74e-03  1.10e-01  8.23e-05  5.15e-03  5.74e-01  
  7  +4.6749e-01  +9.0898e-01  4.41e-01  1.03e-03  6.51e-02  1.06e-04  3.07e-03  5.51e-01  
  8  +4.6695e-01  +7.6160e-01  2.95e-01  7.24e-04  4.55e-02  1.30e-04  2.17e-03  8.14e-01  
  9  +4.3960e-01  +5.8687e-01  1.47e-01  3.01e-04  1.88e-02  6.60e-05  9.57e-04  6.28e-01  
 10  +4.2739e-01  +5.1002e-01  8.26e-02  1.70e-04  1.06e-02  3.83e-05  6.10e-04  9.20e-01  
 11  +4.2554e-01  +5.0046e-01  7.49e-02  1.55e-04  9.68e-03  3.50e-05  5.58e-04  2.40e-01  
 12  +4.1963e-01  +4.8223e-01  6.26e-02  1.21e-04  7.55e-03  3.44e-05  4.21e-04  5.16e-01  
 13  +4.0497e-01  +4.2972e-01  2.48e-02  4.50e-05  2.79e-03  1.49e-05  1.61e-04  7.60e-01  
 14  +3.9772e-01  +4.0155e-01  3.83e-03  6.94e-06  4.31e-04  2.18e-06  2.61e-05  8.48e-01  
 15  +3.9637e-01  +3.9653e-01  1.62e-04  2.94e-07  1.82e-05  9.72e-08  1.12e-06  9.88e-01  
 16  +3.9630e-01  +3.9630e-01  1.62e-06  2.94e-09  1.82e-07  9.72e-10  1.12e-08  9.90e-01  
 17  +3.9630e-01  +3.9630e-01  1.62e-08  2.94e-11  1.82e-09  9.72e-12  1.12e-10  9.90e-01  
 18  +3.9630e-01  +3.9630e-01  1.62e-10  2.94e-13  1.82e-11  9.72e-14  1.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.5644ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:14 PM: Optimal value: 3.963e-01
(CVXPY) Oct 06 03:54:14 PM: Compilation took 9.933e-03 seconds
(CVXPY) Oct 06 03:54:14 PM: Solver (including time spent in interface) took 1.200e-02 seconds
Iteration: 3, Objective: 0.3963
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:14 PM: Your problem has 534 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:14 PM: Finished problem compilation (took 6.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 534
  constraints   = 1034
  nnz(P)        = 0
  nnz(A)        = 5798
  cones (total) = 1
    : Nonnegative = 1,  numel = 1034

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0108e+02  5.01e+02  9.54e-01  3.12e+01  1.00e+00  1.03e+00   ------   
  1  +5.9670e-01  +1.0138e+02  1.01e+02  3.62e-01  1.79e+01  3.95e-03  5.25e-01  6.39e-01  
  2  +5.4172e-01  +1.3890e+01  1.33e+01  1.25e-01  7.53e+00  1.08e-02  2.33e-01  8.24e-01  
  3  +5.0327e-01  +2.2898e+00  1.79e+00  3.78e-02  2.23e+00  1.61e-05  2.09e-01  4.14e-01  
  4  +5.0075e-01  +1.0479e+00  5.47e-01  1.19e-02  7.22e-01  7.28e-06  8.72e-02  6.08e-01  
  5  +4.9712e-01  +1.2660e+00  7.69e-01  7.43e-03  4.66e-01  3.82e-05  2.33e-02  8.68e-01  
  6  +4.8518e-01  +1.0408e+00  5.56e-01  2.20e-03  1.39e-01  7.26e-05  6.59e-03  7.21e-01  
  7  +4.8480e-01  +9.5835e-01  4.74e-01  1.75e-03  1.11e-01  9.77e-05  5.15e-03  5.03e-01  
  8  +4.7653e-01  +8.5364e-01  3.77e-01  1.07e-03  6.78e-02  1.10e-04  3.18e-03  5.81e-01  
  9  +4.6903e-01  +7.7489e-01  3.06e-01  8.81e-04  5.56e-02  9.57e-05  2.72e-03  4.67e-01  
 10  +4.3870e-01  +5.7065e-01  1.32e-01  2.92e-04  1.83e-02  5.28e-05  9.52e-04  8.22e-01  
 11  +4.2782e-01  +5.2284e-01  9.50e-02  1.96e-04  1.22e-02  4.13e-05  6.55e-04  4.15e-01  
 12  +4.2623e-01  +5.1683e-01  9.06e-02  1.82e-04  1.14e-02  4.18e-05  6.11e-04  1.82e-01  
 13  +4.1840e-01  +4.8415e-01  6.58e-02  1.35e-04  8.38e-03  3.62e-05  4.71e-04  8.57e-01  
 14  +4.0668e-01  +4.3750e-01  3.08e-02  5.94e-05  3.70e-03  1.74e-05  2.17e-04  5.84e-01  
 15  +3.9805e-01  +4.0282e-01  4.78e-03  9.14e-06  5.68e-04  2.52e-06  3.52e-05  8.50e-01  
 16  +3.9691e-01  +3.9838e-01  1.47e-03  2.77e-06  1.72e-04  8.44e-07  1.06e-05  7.86e-01  
 17  +3.9678e-01  +3.9797e-01  1.18e-03  2.27e-06  1.41e-04  5.64e-07  9.18e-06  3.77e-01  
 18  +3.9677e-01  +3.9791e-01  1.14e-03  2.18e-06  1.36e-04  5.46e-07  8.80e-06  8.24e-02  
 19  +3.9668e-01  +3.9754e-01  8.53e-04  1.64e-06  1.02e-04  4.36e-07  6.49e-06  4.78e-01  
 20  +3.9659e-01  +3.9732e-01  7.32e-04  1.33e-06  8.26e-05  4.10e-07  5.08e-06  3.88e-01  
 21  +3.9630e-01  +3.9632e-01  1.25e-05  2.28e-08  1.42e-06  7.01e-09  8.74e-08  9.83e-01  
 22  +3.9630e-01  +3.9630e-01  1.25e-07  2.28e-10  1.42e-08  7.01e-11  8.74e-10  9.90e-01  
 23  +3.9630e-01  +3.9630e-01  1.25e-09  2.28e-12  1.42e-10  7.01e-13  8.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.5009ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:14 PM: Optimal value: 3.963e-01
(CVXPY) Oct 06 03:54:14 PM: Compilation took 6.509e-03 seconds
(CVXPY) Oct 06 03:54:14 PM: Solver (including time spent in interface) took 2.027e-02 seconds
Iteration: 4, Objective: 0.3963
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:14 PM: Your problem has 536 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:14 PM: Finished problem compilation (took 1.278e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 536
  constraints   = 1036
  nnz(P)        = 0
  nnz(A)        = 5874
  cones (total) = 1
    : Nonnegative = 1,  numel = 1036

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0109e+02  5.01e+02  9.54e-01  3.12e+01  1.00e+00  1.03e+00   ------   
  1  +5.9641e-01  +1.0142e+02  1.01e+02  3.62e-01  1.79e+01  3.95e-03  5.26e-01  6.39e-01  
  2  +5.4161e-01  +1.3873e+01  1.33e+01  1.25e-01  7.50e+00  1.08e-02  2.32e-01  8.26e-01  
  3  +5.0328e-01  +2.2933e+00  1.79e+00  3.79e-02  2.23e+00  1.62e-05  2.09e-01  4.16e-01  
  4  +5.0058e-01  +9.6770e-01  4.67e-01  1.01e-02  6.19e-01  6.77e-06  7.55e-02  6.65e-01  
  5  +4.9374e-01  +2.3583e+00  1.86e+00  7.92e-03  5.00e-01  1.09e-04  2.26e-02  9.73e-01  
  6  +4.7938e-01  +1.3992e+00  9.20e-01  2.74e-03  1.73e-01  7.96e-05  8.13e-03  6.46e-01  
  7  +4.8220e-01  +1.1614e+00  6.79e-01  2.10e-03  1.33e-01  1.38e-04  6.15e-03  4.95e-01  
  8  +4.8299e-01  +1.0189e+00  5.36e-01  1.62e-03  1.03e-01  1.52e-04  4.73e-03  5.36e-01  
  9  +4.7301e-01  +8.6586e-01  3.93e-01  9.87e-04  6.24e-02  1.38e-04  2.94e-03  5.84e-01  
 10  +4.6564e-01  +7.3507e-01  2.69e-01  7.68e-04  4.83e-02  9.54e-05  2.38e-03  7.79e-01  
 11  +4.3833e-01  +5.8233e-01  1.44e-01  3.13e-04  1.96e-02  6.02e-05  1.02e-03  6.81e-01  
 12  +4.3681e-01  +5.7438e-01  1.38e-01  3.01e-04  1.89e-02  5.85e-05  9.96e-04  1.40e-01  
 13  +4.2690e-01  +5.2821e-01  1.01e-01  2.10e-04  1.31e-02  4.63e-05  7.09e-04  4.16e-01  
 14  +4.1750e-01  +4.8611e-01  6.86e-02  1.38e-04  8.59e-03  3.43e-05  4.82e-04  5.50e-01  
 15  +4.0023e-01  +4.1122e-01  1.10e-02  2.16e-05  1.34e-03  5.04e-06  8.21e-05  9.30e-01  
 16  +3.9733e-01  +3.9980e-01  2.47e-03  4.82e-06  2.99e-04  1.26e-06  1.87e-05  8.41e-01  
 17  +3.9702e-01  +3.9876e-01  1.74e-03  3.22e-06  2.00e-04  9.37e-07  1.23e-05  4.40e-01  
 18  +3.9701e-01  +3.9872e-01  1.71e-03  3.18e-06  1.98e-04  9.18e-07  1.21e-05  6.37e-02  
 19  +3.9668e-01  +3.9757e-01  8.91e-04  1.71e-06  1.06e-04  4.21e-07  6.78e-06  8.76e-01  
 20  +3.9647e-01  +3.9684e-01  3.69e-04  6.90e-07  4.29e-05  2.00e-07  2.66e-06  7.34e-01  
 21  +3.9631e-01  +3.9633e-01  1.82e-05  3.31e-08  2.05e-06  8.81e-09  1.27e-07  9.90e-01  
 22  +3.9630e-01  +3.9630e-01  1.85e-07  3.36e-10  2.08e-08  8.95e-11  1.29e-09  9.90e-01  
 23  +3.9630e-01  +3.9630e-01  1.85e-09  3.36e-12  2.08e-10  8.95e-13  1.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.0954ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:14 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:14 PM: Optimal value: 3.963e-01
(CVXPY) Oct 06 03:54:14 PM: Compilation took 1.278e-02 seconds
(CVXPY) Oct 06 03:54:14 PM: Solver (including time spent in interface) took 1.706e-02 seconds
FULL MODEL:
  Accruacy: 0.603
  Our objective: 0.20599999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.176)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.754613637924194
Best over terms:
  Our final objective: 0.176
    Its accruacy: 0.588
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.176
  Highest accruacy: 0.588
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

