Command:
python test_script.py -s constant_subclass -d 4 -n 1000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.218
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.236
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:25 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:25 PM: Finished problem compilation (took 4.509e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9974e-01  +5.0090e+02  5.00e+02  9.51e-01  2.66e+01  1.00e+00  1.00e+00   ------   
  1  +6.0764e-01  +9.7284e+01  9.67e+01  3.26e-01  1.47e+01  4.10e-03  4.74e-01  6.68e-01  
  2  +5.4913e-01  +1.5129e+01  1.46e+01  1.22e-01  6.67e+00  8.36e-03  2.21e-01  7.42e-01  
  3  +5.0199e-01  +1.8774e+00  1.38e+00  2.84e-02  1.48e+00  2.07e-04  2.06e-01  3.53e-01  
  4  +5.0008e-01  +7.6454e-01  2.64e-01  5.51e-03  2.97e-01  6.00e-05  4.85e-02  8.36e-01  
  5  +4.8355e-01  +8.8852e-01  4.05e-01  1.25e-03  6.93e-02  1.04e-03  3.60e-03  9.62e-01  
  6  +4.6419e-01  +6.7060e-01  2.06e-01  5.73e-04  3.15e-02  3.39e-04  1.79e-03  5.86e-01  
  7  +4.4426e-01  +5.1030e-01  6.60e-02  1.74e-04  9.49e-03  3.24e-06  6.00e-04  9.63e-01  
  8  +4.3106e-01  +4.4005e-01  8.99e-03  2.26e-05  1.23e-03  6.29e-07  8.45e-05  8.70e-01  
  9  +4.2844e-01  +4.2949e-01  1.05e-03  2.27e-06  1.24e-04  3.14e-07  9.93e-06  9.56e-01  
 10  +4.2810e-01  +4.2811e-01  1.09e-05  2.30e-08  1.25e-06  3.28e-09  1.03e-07  9.90e-01  
 11  +4.2810e-01  +4.2810e-01  1.09e-07  2.30e-10  1.25e-08  3.28e-11  1.03e-09  9.90e-01  
 12  +4.2810e-01  +4.2810e-01  1.09e-09  2.30e-12  1.25e-10  3.32e-13  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7992ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:25 PM: Optimal value: 4.281e-01
(CVXPY) Oct 06 03:50:25 PM: Compilation took 4.509e-02 seconds
(CVXPY) Oct 06 03:50:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:25 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:25 PM: Finished problem compilation (took 8.525e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4739
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +5.0129e+02  5.01e+02  9.52e-01  2.93e+01  1.00e+00  1.01e+00   ------   
  1  +6.0557e-01  +9.7907e+01  9.73e+01  3.31e-01  1.61e+01  4.08e-03  4.84e-01  6.64e-01  
  2  +5.4669e-01  +1.4641e+01  1.41e+01  1.20e-01  7.08e+00  8.82e-03  2.19e-01  7.66e-01  
  3  +5.0174e-01  +1.9326e+00  1.43e+00  2.98e-02  1.70e+00  4.28e-04  1.99e-01  4.19e-01  
  4  +5.0021e-01  +1.0509e+00  5.51e-01  1.15e-02  6.70e-01  2.14e-04  7.70e-02  6.78e-01  
  5  +4.8818e-01  +1.1101e+00  6.22e-01  3.15e-03  1.91e-01  1.41e-03  8.84e-03  9.90e-01  
  6  +4.7122e-01  +8.4529e-01  3.74e-01  1.13e-03  6.85e-02  1.27e-03  3.19e-03  6.94e-01  
  7  +4.5847e-01  +7.1830e-01  2.60e-01  5.88e-04  3.57e-02  7.28e-04  1.65e-03  7.23e-01  
  8  +4.5330e-01  +6.9021e-01  2.37e-01  5.25e-04  3.18e-02  5.30e-04  1.49e-03  2.66e-01  
  9  +4.4195e-01  +6.3230e-01  1.90e-01  3.99e-04  2.41e-02  3.12e-04  1.17e-03  4.22e-01  
 10  +4.2565e-01  +5.5093e-01  1.25e-01  2.47e-04  1.49e-02  3.91e-05  7.54e-04  9.90e-01  
 11  +4.0316e-01  +4.5797e-01  5.48e-02  1.01e-04  6.02e-03  2.21e-05  3.27e-04  6.99e-01  
 12  +3.8673e-01  +3.9286e-01  6.13e-03  1.09e-05  6.49e-04  2.07e-06  3.82e-05  8.92e-01  
 13  +3.8423e-01  +3.8432e-01  8.23e-05  1.44e-07  8.57e-06  3.24e-08  5.23e-07  9.90e-01  
 14  +3.8420e-01  +3.8420e-01  8.23e-07  1.44e-09  8.57e-08  3.24e-10  5.23e-09  9.90e-01  
 15  +3.8420e-01  +3.8420e-01  8.23e-09  1.44e-11  8.57e-10  3.25e-12  5.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.1068ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:25 PM: Optimal value: 3.842e-01
(CVXPY) Oct 06 03:50:25 PM: Compilation took 8.525e-03 seconds
(CVXPY) Oct 06 03:50:25 PM: Solver (including time spent in interface) took 7.525e-03 seconds
Iteration: 2, Objective: 0.3842
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:25 PM: Your problem has 520 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:25 PM: Finished problem compilation (took 5.440e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 520
  constraints   = 1020
  nnz(P)        = 0
  nnz(A)        = 4775
  cones (total) = 1
    : Nonnegative = 1,  numel = 1020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +5.0128e+02  5.01e+02  9.52e-01  2.93e+01  1.00e+00  1.02e+00   ------   
  1  +6.0550e-01  +9.7946e+01  9.73e+01  3.32e-01  1.61e+01  4.08e-03  4.84e-01  6.64e-01  
  2  +5.4650e-01  +1.4599e+01  1.41e+01  1.20e-01  7.07e+00  8.85e-03  2.19e-01  7.67e-01  
  3  +5.0173e-01  +1.9353e+00  1.43e+00  2.99e-02  1.70e+00  4.33e-04  1.99e-01  4.22e-01  
  4  +5.0009e-01  +1.0037e+00  5.04e-01  1.05e-02  6.13e-01  2.08e-04  6.94e-02  7.16e-01  
  5  +4.8539e-01  +1.5967e+00  1.11e+00  4.35e-03  2.65e-01  1.88e-03  1.21e-02  9.87e-01  
  6  +4.6837e-01  +1.0335e+00  5.65e-01  1.64e-03  9.96e-02  1.11e-03  4.70e-03  6.46e-01  
  7  +4.5825e-01  +9.6129e-01  5.03e-01  1.04e-03  6.31e-02  1.16e-03  2.91e-03  4.83e-01  
  8  +4.5034e-01  +8.4295e-01  3.93e-01  7.37e-04  4.47e-02  7.70e-04  2.09e-03  4.53e-01  
  9  +4.3768e-01  +6.2701e-01  1.89e-01  3.88e-04  2.34e-02  1.38e-05  1.17e-03  9.90e-01  
 10  +3.9900e-01  +4.4681e-01  4.78e-02  8.91e-05  5.32e-03  2.42e-05  3.00e-04  9.47e-01  
 11  +3.8386e-01  +3.8779e-01  3.93e-03  7.28e-06  4.33e-04  1.38e-06  2.72e-05  9.23e-01  
 12  +3.8233e-01  +3.8240e-01  6.93e-05  1.28e-07  7.62e-06  2.41e-08  4.93e-07  9.83e-01  
 13  +3.8230e-01  +3.8230e-01  6.92e-07  1.28e-09  7.62e-08  2.41e-10  4.93e-09  9.90e-01  
 14  +3.8230e-01  +3.8230e-01  6.92e-09  1.28e-11  7.62e-10  2.41e-12  4.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1214ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:25 PM: Optimal value: 3.823e-01
(CVXPY) Oct 06 03:50:25 PM: Compilation took 5.440e-03 seconds
(CVXPY) Oct 06 03:50:25 PM: Solver (including time spent in interface) took 9.611e-03 seconds
FULL MODEL:
  Accruacy: 0.618
  Our objective: 0.23600000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.106)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.004)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.126)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.289077281951904
Best over terms:
  Our final objective: 0.12599999999999995
    Its accruacy: 0.563
    Its hamming distance: 2
  Shortest hamming distance: 1
    Its our objective: 0.106
  Highest accruacy: 0.563
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

