Command:
python test_script.py -s constant_subclass -d 7 -n 100 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.19999999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 7.

Computed total variation: 0.76
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:36 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Finished problem compilation (took 4.334e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 515
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9682e-01  +5.1247e+01  5.08e+01  8.68e-01  9.50e+00  1.00e+00  1.04e+00   ------   
  1  +5.7916e-01  +1.0901e+01  1.03e+01  3.52e-01  5.53e+00  3.83e-03  5.64e-01  6.17e-01  
  2  +5.0938e-01  +1.6761e+00  1.17e+00  7.86e-02  1.52e+00  1.58e-02  1.97e-01  9.90e-01  
  3  +4.7147e-01  +1.0643e+00  5.93e-01  2.34e-02  4.78e-01  1.44e-02  6.43e-02  7.30e-01  
  4  +4.2513e-01  +6.6905e-01  2.44e-01  7.05e-03  1.43e-01  6.14e-03  2.17e-02  6.91e-01  
  5  +3.9665e-01  +4.8528e-01  8.86e-02  2.39e-03  4.74e-02  1.44e-03  8.45e-03  7.19e-01  
  6  +3.7657e-01  +3.9716e-01  2.06e-02  4.14e-04  8.18e-03  3.22e-04  1.86e-03  8.50e-01  
  7  +3.7029e-01  +3.7084e-01  5.48e-04  1.09e-05  2.16e-04  4.10e-06  5.12e-05  9.90e-01  
  8  +3.7010e-01  +3.7011e-01  5.48e-06  1.09e-07  2.16e-06  4.11e-08  5.12e-07  9.90e-01  
  9  +3.7010e-01  +3.7010e-01  5.48e-08  1.09e-09  2.16e-08  4.11e-10  5.12e-09  9.90e-01  
 10  +3.7010e-01  +3.7010e-01  5.48e-10  1.09e-11  2.16e-10  4.11e-12  5.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 777.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:36 PM: Optimal value: 3.701e-01
(CVXPY) Oct 06 04:01:36 PM: Compilation took 4.334e-02 seconds
(CVXPY) Oct 06 04:01:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:36 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Finished problem compilation (took 8.959e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 626
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9502e-01  +5.1417e+01  5.09e+01  8.74e-01  9.67e+00  1.00e+00  1.05e+00   ------   
  1  +5.6822e-01  +1.0972e+01  1.04e+01  3.65e-01  5.52e+00  3.83e-03  5.72e-01  6.13e-01  
  2  +4.9940e-01  +1.7431e+00  1.24e+00  7.95e-02  1.55e+00  1.70e-02  1.99e-01  9.90e-01  
  3  +4.4021e-01  +1.2710e+00  8.31e-01  2.72e-02  5.57e-01  1.89e-02  7.65e-02  6.82e-01  
  4  +3.7323e-01  +7.1359e-01  3.40e-01  8.42e-03  1.70e-01  7.43e-03  2.79e-02  6.75e-01  
  5  +3.2953e-01  +4.0969e-01  8.02e-02  2.11e-03  4.13e-02  5.45e-05  9.13e-03  8.53e-01  
  6  +3.1313e-01  +3.2478e-01  1.17e-02  3.00e-04  5.80e-03  1.20e-05  1.48e-03  8.61e-01  
  7  +3.1034e-01  +3.1084e-01  4.99e-04  1.27e-05  2.46e-04  7.91e-07  6.58e-05  9.68e-01  
  8  +3.1020e-01  +3.1022e-01  1.48e-05  3.73e-07  7.19e-06  1.70e-08  2.10e-06  9.75e-01  
  9  +3.1020e-01  +3.1020e-01  1.48e-07  3.72e-09  7.17e-08  1.70e-10  2.12e-08  9.90e-01  
 10  +3.1020e-01  +3.1020e-01  1.48e-09  3.72e-11  7.17e-10  1.70e-12  2.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 852.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:36 PM: Optimal value: 3.102e-01
(CVXPY) Oct 06 04:01:36 PM: Compilation took 8.959e-03 seconds
(CVXPY) Oct 06 04:01:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3102
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:36 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Finished problem compilation (took 7.284e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 714
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9053e-01  +5.1887e+01  5.14e+01  8.80e-01  9.65e+00  1.00e+00  1.07e+00   ------   
  1  +5.4559e-01  +1.1058e+01  1.05e+01  3.73e-01  5.41e+00  3.84e-03  5.80e-01  6.13e-01  
  2  +4.6802e-01  +2.3661e+00  1.90e+00  9.92e-02  1.88e+00  1.83e-02  2.40e-01  8.65e-01  
  3  +3.9223e-01  +1.0889e+00  6.97e-01  2.47e-02  4.95e-01  9.81e-03  7.11e-02  7.61e-01  
  4  +3.4766e-01  +6.1416e-01  2.67e-01  7.79e-03  1.56e-01  3.97e-03  2.47e-02  7.84e-01  
  5  +3.2099e-01  +4.9781e-01  1.77e-01  4.04e-03  8.31e-02  2.75e-03  1.31e-02  5.56e-01  
  6  +2.9999e-01  +4.0161e-01  1.02e-01  2.11e-03  4.43e-02  1.53e-03  7.19e-03  5.27e-01  
  7  +2.7726e-01  +2.9742e-01  2.02e-02  4.15e-04  8.71e-03  1.60e-04  1.52e-03  8.95e-01  
  8  +2.7071e-01  +2.7171e-01  1.01e-03  2.06e-05  4.30e-04  6.16e-06  7.81e-05  9.54e-01  
  9  +2.7033e-01  +2.7040e-01  7.06e-05  1.46e-06  2.96e-05  2.19e-07  6.22e-06  9.47e-01  
 10  +2.7030e-01  +2.7030e-01  9.81e-07  2.04e-08  4.09e-07  3.15e-09  9.04e-08  9.87e-01  
 11  +2.7030e-01  +2.7030e-01  9.80e-09  2.04e-10  4.09e-09  3.15e-11  9.04e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0748ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:36 PM: Optimal value: 2.703e-01
(CVXPY) Oct 06 04:01:36 PM: Compilation took 7.284e-03 seconds
(CVXPY) Oct 06 04:01:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:36 PM: Your problem has 95 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Finished problem compilation (took 5.107e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 95
  constraints   = 145
  nnz(P)        = 0
  nnz(A)        = 770
  cones (total) = 1
    : Nonnegative = 1,  numel = 145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8873e-01  +5.2074e+01  5.16e+01  8.84e-01  9.45e+00  1.00e+00  1.07e+00   ------   
  1  +5.2749e-01  +1.1115e+01  1.06e+01  3.78e-01  5.27e+00  3.84e-03  5.83e-01  6.11e-01  
  2  +4.4251e-01  +2.1644e+00  1.72e+00  8.17e-02  1.56e+00  2.04e-02  2.02e-01  9.44e-01  
  3  +3.3855e-01  +1.1292e+00  7.91e-01  2.27e-02  4.51e-01  1.34e-02  6.41e-02  7.60e-01  
  4  +2.6588e-01  +5.5196e-01  2.86e-01  7.45e-03  1.46e-01  2.95e-03  2.38e-02  7.38e-01  
  5  +2.2499e-01  +3.2557e-01  1.01e-01  2.54e-03  5.04e-02  9.15e-04  9.10e-03  6.89e-01  
  6  +2.0408e-01  +2.1792e-01  1.38e-02  3.46e-04  6.89e-03  7.79e-05  1.35e-03  9.30e-01  
  7  +2.0089e-01  +2.0179e-01  8.99e-04  2.27e-05  4.48e-04  4.14e-06  9.11e-05  9.34e-01  
  8  +2.0068e-01  +2.0091e-01  2.37e-04  6.04e-06  1.17e-04  9.04e-07  2.79e-05  9.47e-01  
  9  +2.0060e-01  +2.0061e-01  8.23e-06  2.10e-07  4.03e-06  2.58e-08  1.01e-06  9.65e-01  
 10  +2.0060e-01  +2.0060e-01  8.28e-08  2.11e-09  4.05e-08  2.59e-10  1.02e-08  9.90e-01  
 11  +2.0060e-01  +2.0060e-01  8.28e-10  2.11e-11  4.06e-10  2.59e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3257ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:36 PM: Optimal value: 2.006e-01
(CVXPY) Oct 06 04:01:36 PM: Compilation took 5.107e-03 seconds
(CVXPY) Oct 06 04:01:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2006
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:36 PM: Your problem has 104 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Finished problem compilation (took 6.684e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 104
  constraints   = 154
  nnz(P)        = 0
  nnz(A)        = 824
  cones (total) = 1
    : Nonnegative = 1,  numel = 154

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8819e-01  +5.2049e+01  5.16e+01  8.87e-01  9.29e+00  1.00e+00  1.07e+00   ------   
  1  +5.2110e-01  +1.1129e+01  1.06e+01  3.85e-01  5.12e+00  3.85e-03  5.82e-01  6.10e-01  
  2  +4.2842e-01  +2.0170e+00  1.59e+00  7.21e-02  1.36e+00  2.14e-02  1.82e-01  9.86e-01  
  3  +3.2258e-01  +1.1163e+00  7.94e-01  2.27e-02  4.43e-01  1.37e-02  6.41e-02  7.26e-01  
  4  +2.5652e-01  +5.7556e-01  3.19e-01  8.48e-03  1.65e-01  4.33e-03  2.65e-02  6.68e-01  
  5  +2.1164e-01  +3.2225e-01  1.11e-01  2.79e-03  5.59e-02  1.29e-03  9.65e-03  7.15e-01  
  6  +2.0046e-01  +2.7331e-01  7.28e-02  1.74e-03  3.59e-02  8.25e-04  6.11e-03  4.46e-01  
  7  +1.8333e-01  +1.9118e-01  7.85e-03  1.86e-04  3.84e-03  4.47e-05  6.94e-04  9.56e-01  
  8  +1.8102e-01  +1.8159e-01  5.73e-04  1.37e-05  2.81e-04  2.53e-06  5.28e-05  9.25e-01  
  9  +1.8082e-01  +1.8087e-01  4.62e-05  1.12e-06  2.23e-05  1.59e-07  4.76e-06  9.36e-01  
 10  +1.8080e-01  +1.8080e-01  5.21e-07  1.26e-08  2.50e-07  1.76e-09  5.50e-08  9.89e-01  
 11  +1.8080e-01  +1.8080e-01  5.24e-09  1.27e-10  2.52e-09  1.77e-11  5.53e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3836ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:36 PM: Optimal value: 1.808e-01
(CVXPY) Oct 06 04:01:36 PM: Compilation took 6.684e-03 seconds
(CVXPY) Oct 06 04:01:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:36 PM: Your problem has 114 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:36 PM: Finished problem compilation (took 3.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 114
  constraints   = 164
  nnz(P)        = 0
  nnz(A)        = 862
  cones (total) = 1
    : Nonnegative = 1,  numel = 164

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8671e-01  +5.2326e+01  5.18e+01  8.90e-01  9.09e+00  1.00e+00  1.07e+00   ------   
  1  +4.9801e-01  +1.1265e+01  1.08e+01  3.85e-01  4.96e+00  3.91e-03  5.82e-01  6.07e-01  
  2  +3.8667e-01  +2.2988e+00  1.91e+00  7.81e-02  1.42e+00  2.21e-02  1.94e-01  9.37e-01  
  3  +2.8157e-01  +9.3827e-01  6.57e-01  1.92e-02  3.61e-01  9.15e-03  5.55e-02  7.83e-01  
  4  +2.1115e-01  +4.5587e-01  2.45e-01  6.73e-03  1.27e-01  2.55e-03  2.18e-02  7.57e-01  
  5  +1.7814e-01  +2.6981e-01  9.17e-02  2.39e-03  4.56e-02  6.39e-04  8.37e-03  8.55e-01  
  6  +1.5676e-01  +1.7503e-01  1.83e-02  4.54e-04  8.74e-03  8.30e-05  1.69e-03  9.10e-01  
  7  +1.5159e-01  +1.5302e-01  1.43e-03  3.52e-05  6.75e-04  5.75e-06  1.35e-04  9.22e-01  
  8  +1.5134e-01  +1.5202e-01  6.82e-04  1.68e-05  3.17e-04  2.93e-06  6.75e-05  7.39e-01  
  9  +1.5111e-01  +1.5115e-01  3.73e-05  9.34e-07  1.73e-05  1.22e-07  3.89e-06  9.43e-01  
 10  +1.5110e-01  +1.5110e-01  3.94e-07  9.91e-09  1.83e-07  1.24e-09  4.17e-08  9.89e-01  
 11  +1.5110e-01  +1.5110e-01  3.94e-09  9.91e-11  1.83e-09  1.24e-11  4.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4421ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:36 PM: Optimal value: 1.511e-01
(CVXPY) Oct 06 04:01:36 PM: Compilation took 3.507e-03 seconds
(CVXPY) Oct 06 04:01:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.1511
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:37 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:37 PM: Finished problem compilation (took 5.123e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 881
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8662e-01  +5.2324e+01  5.18e+01  8.91e-01  9.05e+00  1.00e+00  1.08e+00   ------   
  1  +4.9744e-01  +1.1284e+01  1.08e+01  3.88e-01  4.93e+00  3.91e-03  5.83e-01  6.06e-01  
  2  +3.8429e-01  +2.2834e+00  1.90e+00  7.78e-02  1.40e+00  2.23e-02  1.95e-01  9.41e-01  
  3  +2.8184e-01  +1.0556e+00  7.74e-01  2.28e-02  4.26e-01  1.04e-02  6.54e-02  7.50e-01  
  4  +2.1151e-01  +4.4786e-01  2.36e-01  6.63e-03  1.24e-01  2.43e-03  2.15e-02  7.80e-01  
  5  +1.8106e-01  +3.0373e-01  1.23e-01  3.24e-03  6.21e-02  1.04e-03  1.12e-02  6.41e-01  
  6  +1.5377e-01  +1.8057e-01  2.68e-02  6.72e-04  1.30e-02  1.99e-04  2.50e-03  8.14e-01  
  7  +1.4708e-01  +1.5037e-01  3.29e-03  8.23e-05  1.59e-03  2.21e-05  3.16e-04  8.83e-01  
  8  +1.4629e-01  +1.4693e-01  6.45e-04  1.63e-05  3.15e-04  3.65e-06  6.64e-05  8.18e-01  
  9  +1.4609e-01  +1.4620e-01  1.05e-04  2.64e-06  5.09e-05  5.10e-07  1.17e-05  8.52e-01  
 10  +1.4605e-01  +1.4605e-01  1.68e-06  4.25e-08  8.11e-07  6.50e-09  1.93e-07  9.90e-01  
 11  +1.4605e-01  +1.4605e-01  1.68e-08  4.25e-10  8.10e-09  6.50e-11  1.93e-09  9.90e-01  
 12  +1.4605e-01  +1.4605e-01  1.68e-10  4.25e-12  8.10e-11  6.51e-13  1.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6582ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:37 PM: Optimal value: 1.461e-01
(CVXPY) Oct 06 04:01:37 PM: Compilation took 5.123e-03 seconds
(CVXPY) Oct 06 04:01:37 PM: Solver (including time spent in interface) took 5.007e-03 seconds
Iteration: 7, Objective: 0.1461
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:37 PM: Your problem has 124 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:37 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 124
  constraints   = 174
  nnz(P)        = 0
  nnz(A)        = 907
  cones (total) = 1
    : Nonnegative = 1,  numel = 174

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8643e-01  +5.2370e+01  5.19e+01  8.94e-01  8.91e+00  1.00e+00  1.08e+00   ------   
  1  +4.8738e-01  +1.1305e+01  1.08e+01  3.88e-01  4.79e+00  3.95e-03  5.79e-01  6.07e-01  
  2  +3.6879e-01  +2.2955e+00  1.93e+00  7.60e-02  1.35e+00  2.23e-02  1.90e-01  9.38e-01  
  3  +2.7292e-01  +1.0130e+00  7.40e-01  2.23e-02  4.08e-01  9.10e-03  6.37e-02  7.57e-01  
  4  +2.0607e-01  +4.3554e-01  2.29e-01  6.69e-03  1.23e-01  2.42e-03  2.14e-02  7.39e-01  
  5  +1.7871e-01  +3.1065e-01  1.32e-01  3.61e-03  6.73e-02  1.18e-03  1.23e-02  5.79e-01  
  6  +1.5206e-01  +1.9135e-01  3.93e-02  1.00e-03  1.90e-02  3.27e-04  3.69e-03  7.37e-01  
  7  +1.4193e-01  +1.4435e-01  2.42e-03  6.12e-05  1.16e-03  1.51e-05  2.34e-04  9.52e-01  
  8  +1.4129e-01  +1.4177e-01  4.80e-04  1.22e-05  2.31e-04  2.28e-06  5.16e-05  8.46e-01  
  9  +1.4112e-01  +1.4118e-01  5.71e-05  1.45e-06  2.73e-05  2.30e-07  6.67e-06  8.84e-01  
 10  +1.4110e-01  +1.4110e-01  6.46e-07  1.65e-08  3.09e-07  2.44e-09  7.73e-08  9.89e-01  
 11  +1.4110e-01  +1.4110e-01  6.47e-09  1.66e-10  3.09e-09  2.45e-11  7.74e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:37 PM: Optimal value: 1.411e-01
(CVXPY) Oct 06 04:01:37 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:01:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.1411
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:37 PM: Your problem has 126 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:37 PM: Finished problem compilation (took 1.046e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 126
  constraints   = 176
  nnz(P)        = 0
  nnz(A)        = 915
  cones (total) = 1
    : Nonnegative = 1,  numel = 176

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8585e-01  +5.2061e+01  5.16e+01  8.94e-01  8.87e+00  1.00e+00  1.07e+00   ------   
  1  +4.7931e-01  +1.1278e+01  1.08e+01  3.88e-01  4.74e+00  3.98e-03  5.74e-01  6.06e-01  
  2  +3.5901e-01  +2.2914e+00  1.93e+00  7.58e-02  1.32e+00  2.24e-02  1.88e-01  9.37e-01  
  3  +2.6832e-01  +1.0266e+00  7.58e-01  2.32e-02  4.18e-01  9.48e-03  6.56e-02  7.31e-01  
  4  +1.9998e-01  +4.2671e-01  2.27e-01  6.65e-03  1.20e-01  2.49e-03  2.10e-02  7.44e-01  
  5  +1.7113e-01  +3.0603e-01  1.35e-01  3.62e-03  6.69e-02  1.32e-03  1.22e-02  5.46e-01  
  6  +1.4157e-01  +1.7698e-01  3.54e-02  8.85e-04  1.65e-02  3.04e-04  3.23e-03  7.79e-01  
  7  +1.3191e-01  +1.3378e-01  1.87e-03  4.65e-05  8.64e-04  1.09e-05  1.77e-04  9.61e-01  
  8  +1.3137e-01  +1.3180e-01  4.24e-04  1.05e-05  1.97e-04  1.96e-06  4.52e-05  8.43e-01  
  9  +1.3121e-01  +1.3124e-01  2.64e-05  6.67e-07  1.23e-05  8.71e-08  3.07e-06  9.90e-01  
 10  +1.3120e-01  +1.3120e-01  2.72e-07  6.88e-09  1.27e-07  8.78e-10  3.19e-08  9.90e-01  
 11  +1.3120e-01  +1.3120e-01  2.72e-09  6.88e-11  1.27e-09  8.78e-12  3.19e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5592ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:37 PM: Optimal value: 1.312e-01
(CVXPY) Oct 06 04:01:37 PM: Compilation took 1.046e-02 seconds
(CVXPY) Oct 06 04:01:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.85
  Our objective: 0.7

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 1)                                  <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1 AND x5 = 1)                                  <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1)                       <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1)                       <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0)                                  <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.06)
 OR (x1 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.06)
 OR (x2 = 0 AND x4 = 1 AND x6 = 0)                                             <-- (term's our objective: 0.18)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.897439241409302
Best over terms:
  Our final objective: 0.18000000000000005
    Its accruacy: 0.59
    Its hamming distance: 4
  Shortest hamming distance: 3
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.59
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

